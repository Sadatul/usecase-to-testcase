{"usecase": {"name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}], "GPT4o_testcases": [{"name": "Successful Train Search and Booking", "description": "Verify that a customer can successfully search for a train and book tickets", "input": {"customerId": "customer_67890", "departureStation": "Dhaka", "arrivalStation": "Chittagong", "travelDate": "2023-12-15", "trainType": "Express", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Train search and booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Train Search with Invalid Date", "description": "Verify that a customer cannot search for a train with an invalid date", "input": {"customerId": "customer_67890", "departureStation": "Dhaka", "arrivalStation": "Chittagong", "travelDate": "2023-02-30", "trainType": "Express", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Train search failed", "status": "Invalid Date"}}, {"name": "Failed Train Booking with Unregistered Customer", "description": "Verify that an unregistered customer cannot book a train ticket", "input": {"customerId": null, "departureStation": "Dhaka", "arrivalStation": "Chittagong", "travelDate": "2023-12-15", "trainType": "Express", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Train booking failed", "status": "Unregistered Customer"}}, {"name": "Failed Payment with Invalid Payment Method", "description": "Verify that a customer cannot confirm payment with an invalid payment method", "input": {"customerId": "customer_67890", "departureStation": "Dhaka", "arrivalStation": "Chittagong", "travelDate": "2023-12-15", "trainType": "Express", "paymentMethod": "InvalidCard"}, "expected": {"outcome": "Payment failed", "status": "Invalid Payment Method"}}], "bert_score": {"Precision": 0.9166523814201355, "Recall": 0.9215488433837891, "F1": 0.9190940260887146}}
{"usecase": {"name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Event Ticket Booking", "description": "Verify that a registered user can successfully book tickets for an event", "input": {"userId": "user_67890", "eventName": "Music Fest 2023", "location": "Dhaka", "date": "2023-12-15", "numberOfTickets": 2, "seatType": "VIP", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Event ticket booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Event Ticket Booking Due to Unavailable Event", "description": "Verify that a user cannot book tickets for an event that is not available", "input": {"userId": "user_67890", "eventName": "Nonexistent Event", "location": "Dhaka", "date": "2023-12-15", "numberOfTickets": 2, "seatType": "VIP", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Event ticket booking failed", "status": "Event Not Available"}}, {"name": "Failed Event Ticket Booking Due to Invalid Payment Method", "description": "Verify that a user cannot book tickets with an invalid payment method", "input": {"userId": "user_67890", "eventName": "Music Fest 2023", "location": "Dhaka", "date": "2023-12-15", "numberOfTickets": 2, "seatType": "VIP", "paymentMethod": "Invalid Payment"}, "expected": {"outcome": "Event ticket booking failed", "status": "Invalid Payment Method"}}, {"name": "Successful Event Ticket Booking with Minimum Tickets", "description": "Verify that a user can book the minimum number of tickets for an event", "input": {"userId": "user_67890", "eventName": "Music Fest 2023", "location": "Dhaka", "date": "2023-12-15", "numberOfTickets": 1, "seatType": "General", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Event ticket booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Event Ticket Booking Due to Exceeding Ticket Limit", "description": "Verify that a user cannot book more tickets than the allowed limit", "input": {"userId": "user_67890", "eventName": "Music Fest 2023", "location": "Dhaka", "date": "2023-12-15", "numberOfTickets": 100, "seatType": "General", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Event ticket booking failed", "status": "Exceeds Ticket Limit"}}], "bert_score": {"Precision": 0.9256995916366577, "Recall": 0.9233726263046265, "F1": 0.9245346188545227}}
{"usecase": {"name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Successful One Way Air Ticket Search", "description": "Verify that a user can successfully search for one way air tickets with valid inputs", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-15", "returnDate": null, "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Tickets Available"}}, {"name": "Failed One Way Air Ticket Search with Invalid Date", "description": "Verify that a user cannot search for one way air tickets with an invalid journey date", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-02-30", "returnDate": null, "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid Date"}}, {"name": "Failed One Way Air Ticket Search with Past Date", "description": "Verify that a user cannot search for one way air tickets with a past journey date", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2022-12-15", "returnDate": null, "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Date in the Past"}}, {"name": "Failed One Way Air Ticket Search with Same Origin and Destination", "description": "Verify that a user cannot search for one way air tickets with the same origin and destination", "input": {"flyingFrom": "Dhaka", "flyingTo": "Dhaka", "journeyDate": "2023-12-15", "returnDate": null, "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid Route"}}, {"name": "Successful One Way Air Ticket Search with Maximum Tickets", "description": "Verify that a user can search for one way air tickets with the maximum number of tickets allowed", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-15", "returnDate": null, "numberOfTickets": 10, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Tickets Available"}}, {"name": "Failed One Way Air Ticket Search with Zero Tickets", "description": "Verify that a user cannot search for one way air tickets with zero tickets", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-15", "returnDate": null, "numberOfTickets": 0, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid Number of Tickets"}}], "bert_score": {"Precision": 0.9355384707450867, "Recall": 0.9304670691490173, "F1": 0.9329959154129028}}
{"usecase": {"name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Successful Round Way Air Ticket Search", "description": "Verify that a user can successfully search for round way air tickets with valid inputs", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-01", "returnDate": "2023-12-10", "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Round way air ticket search successful", "status": "Tickets Available"}}, {"name": "Failed Round Way Air Ticket Search with Invalid Dates", "description": "Verify that a user cannot search for round way air tickets if the return date is before the journey date", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-10", "returnDate": "2023-12-01", "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Round way air ticket search failed", "status": "Invalid Date Selection"}}, {"name": "Failed Round Way Air Ticket Search with Missing Information", "description": "Verify that a user cannot search for round way air tickets if any required field is missing", "input": {"flyingFrom": "Dhaka", "flyingTo": null, "journeyDate": "2023-12-01", "returnDate": "2023-12-10", "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Round way air ticket search failed", "status": "Missing Information"}}, {"name": "Edge Case: Round Way Air Ticket Search with Maximum Tickets", "description": "Verify that a user can search for round way air tickets with the maximum number of tickets allowed", "input": {"flyingFrom": "Dhaka", "flyingTo": "Chittagong", "journeyDate": "2023-12-01", "returnDate": "2023-12-10", "numberOfTickets": 10, "serviceClass": "Economy"}, "expected": {"outcome": "Round way air ticket search successful", "status": "Tickets Available"}}, {"name": "Negative Case: Round Way Air Ticket Search with Invalid City", "description": "Verify that a user cannot search for round way air tickets with an invalid city name", "input": {"flyingFrom": "InvalidCity", "flyingTo": "Chittagong", "journeyDate": "2023-12-01", "returnDate": "2023-12-10", "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Round way air ticket search failed", "status": "Invalid City"}}], "bert_score": {"Precision": 0.9361258745193481, "Recall": 0.9311521053314209, "F1": 0.9336323142051697}}
{"usecase": {"name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Multi City Air Ticket Search", "description": "Verify that a user can successfully search for multi-city air tickets with valid inputs", "input": {"flyingFrom": ["Dhaka", "Chittagong"], "flyingTo": ["Chittagong", "Sylhet"], "journeyDates": ["2023-12-01", "2023-12-05"], "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Multi-city air ticket search successful", "status": "Tickets Available"}}, {"name": "Failed Multi City Air Ticket Search Due to Invalid Date", "description": "Verify that a user cannot search for multi-city air tickets with an invalid date", "input": {"flyingFrom": ["Dhaka", "Chittagong"], "flyingTo": ["Chittagong", "Sylhet"], "journeyDates": ["2023-13-01", "2023-12-05"], "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Multi-city air ticket search failed", "status": "Invalid Date"}}, {"name": "Failed Multi City Air Ticket Search Due to Missing Destination", "description": "Verify that a user cannot search for multi-city air tickets if a destination city is missing", "input": {"flyingFrom": ["Dhaka"], "flyingTo": ["Chittagong"], "journeyDates": ["2023-12-01"], "numberOfTickets": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Multi-city air ticket search failed", "status": "Missing Destination"}}, {"name": "Successful Multi City Air Ticket Search with Maximum Flights", "description": "Verify that a user can search for multi-city air tickets with the maximum number of flights allowed", "input": {"flyingFrom": ["Dhaka", "Chittagong", "Sylhet", "Rajshahi"], "flyingTo": ["Chittagong", "Sylhet", "Rajshahi", "Khulna"], "journeyDates": ["2023-12-01", "2023-12-05", "2023-12-10", "2023-12-15"], "numberOfTickets": 1, "serviceClass": "Business"}, "expected": {"outcome": "Multi-city air ticket search successful", "status": "Tickets Available"}}, {"name": "Failed Multi City Air Ticket Search Due to Invalid Service Class", "description": "Verify that a user cannot search for multi-city air tickets with an invalid service class", "input": {"flyingFrom": ["Dhaka", "Chittagong"], "flyingTo": ["Chittagong", "Sylhet"], "journeyDates": ["2023-12-01", "2023-12-05"], "numberOfTickets": 2, "serviceClass": "Luxury"}, "expected": {"outcome": "Multi-city air ticket search failed", "status": "Invalid Service Class"}}], "bert_score": {"Precision": 0.9217332005500793, "Recall": 0.8971136808395386, "F1": 0.9092568159103394}}
{"usecase": {"name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Event Search", "description": "Verify that a user can successfully search for events in a specific location within a valid date range", "input": {"location": "Dhaka", "fromDate": "2023-11-01", "toDate": "2023-11-10"}, "expected": {"outcome": "Event search successful", "status": "Events Found"}}, {"name": "Event Search with No Events Found", "description": "Verify that the system handles cases where no events are found for the specified location and date range", "input": {"location": "Khulna", "fromDate": "2023-12-01", "toDate": "2023-12-05"}, "expected": {"outcome": "Event search successful", "status": "No Events Found"}}, {"name": "Event Search with Invalid Date Range", "description": "Verify that the system prevents searching when the 'From Date' is after the 'To Date'", "input": {"location": "Chittagong", "fromDate": "2023-11-15", "toDate": "2023-11-10"}, "expected": {"outcome": "Event search failed", "status": "Invalid Date Range"}}, {"name": "Event Search with Missing Location", "description": "Verify that the system prevents searching when no location is selected", "input": {"location": null, "fromDate": "2023-11-01", "toDate": "2023-11-10"}, "expected": {"outcome": "Event search failed", "status": "Location Required"}}, {"name": "Event Search with Past Date Range", "description": "Verify that the system handles searches with a date range in the past", "input": {"location": "Sylhet", "fromDate": "2023-01-01", "toDate": "2023-01-10"}, "expected": {"outcome": "Event search successful", "status": "No Events Found"}}], "bert_score": {"Precision": 0.9494914412498474, "Recall": 0.9470721483230591, "F1": 0.9482802748680115}}
{"usecase": {"name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}], "GPT4o_testcases": [{"name": "Successful Launch Ticket Booking", "description": "Verify that a user can successfully book a launch ticket with valid details and payment.", "input": {"userId": "user_67890", "origin": "Dhaka", "destination": "Barisal", "journeyDate": "2023-12-15", "selectedTrip": "Trip_001", "seats": ["A1", "A2"], "phoneNumber": "01812345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}, {"firstName": "Jane", "lastName": "Doe", "gender": "Female"}], "paymentMethod": "Bank Card"}, "expected": {"outcome": "Launch ticket booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Launch Ticket Booking Due to No Available Seats", "description": "Verify that a user cannot book a launch ticket if there are no available seats for the selected trip.", "input": {"userId": "user_67890", "origin": "Dhaka", "destination": "Barisal", "journeyDate": "2023-12-15", "selectedTrip": "Trip_002", "seats": [], "phoneNumber": "01812345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Bank Card"}, "expected": {"outcome": "Launch ticket booking failed", "status": "No Available Seats"}}, {"name": "Failed Launch Ticket Booking Due to Invalid Payment", "description": "Verify that a user cannot book a launch ticket if the payment method is invalid.", "input": {"userId": "user_67890", "origin": "Dhaka", "destination": "Barisal", "journeyDate": "2023-12-15", "selectedTrip": "Trip_003", "seats": ["B1"], "phoneNumber": "01812345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Invalid Payment"}, "expected": {"outcome": "Launch ticket booking failed", "status": "Payment Error"}}, {"name": "Failed Launch Ticket Booking Due to Missing Passenger Details", "description": "Verify that a user cannot book a launch ticket if passenger details are incomplete.", "input": {"userId": "user_67890", "origin": "Dhaka", "destination": "Barisal", "journeyDate": "2023-12-15", "selectedTrip": "Trip_004", "seats": ["C1"], "phoneNumber": "01812345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Bank Card"}, "expected": {"outcome": "Launch ticket booking failed", "status": "Incomplete Passenger Details"}}], "bert_score": {"Precision": 0.9045803546905518, "Recall": 0.8734283447265625, "F1": 0.8887314796447754}}
{"usecase": {"name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}], "GPT4o_testcases": [{"name": "Successful Park Ticket Booking", "description": "Verify that a user can successfully book a park ticket with valid details", "input": {"userId": "user_67890", "location": "Dhaka", "parkName": "Fantasy Kingdom", "ticketType": "Adult", "ticketQuantity": 2, "entryDate": "2023-12-25", "contactDetails": {"email": "user@example.com", "phone": "01812345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmation received"}}, {"name": "Failed Park Ticket Booking Due to Unavailable Tickets", "description": "Verify that a user cannot book a park ticket if tickets are unavailable for the selected date", "input": {"userId": "user_67890", "location": "Dhaka", "parkName": "Fantasy Kingdom", "ticketType": "Adult", "ticketQuantity": 2, "entryDate": "2023-12-25", "contactDetails": {"email": "user@example.com", "phone": "01812345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Tickets unavailable"}}, {"name": "Invalid Park Ticket Booking Due to Missing Contact Details", "description": "Verify that a user cannot book a park ticket if contact details are missing", "input": {"userId": "user_67890", "location": "Dhaka", "parkName": "Fantasy Kingdom", "ticketType": "Adult", "ticketQuantity": 2, "entryDate": "2023-12-25", "contactDetails": {"email": null, "phone": null}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Missing contact details"}}, {"name": "Edge Case Park Ticket Booking with Maximum Ticket Quantity", "description": "Verify that a user can book the maximum allowed quantity of tickets", "input": {"userId": "user_67890", "location": "Dhaka", "parkName": "Fantasy Kingdom", "ticketType": "Adult", "ticketQuantity": 10, "entryDate": "2023-12-25", "contactDetails": {"email": "user@example.com", "phone": "01812345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmation received"}}, {"name": "Invalid Park Ticket Booking with Past Date", "description": "Verify that a user cannot book a park ticket for a past date", "input": {"userId": "user_67890", "location": "Dhaka", "parkName": "Fantasy Kingdom", "ticketType": "Adult", "ticketQuantity": 2, "entryDate": "2022-12-25", "contactDetails": {"email": "user@example.com", "phone": "01812345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Invalid entry date"}}], "bert_score": {"Precision": 0.9008105397224426, "Recall": 0.8874337077140808, "F1": 0.8940720558166504}}
{"usecase": {"name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}], "GPT4o_testcases": [{"name": "Successful Bus Booking", "description": "Verify that a customer can successfully book a bus ticket with valid details", "input": {"departureStation": "Dhaka", "arrivalStation": "Chittagong", "busType": "AC", "seatNumber": "A1", "contactInfo": {"name": "Alice Smith", "mobile": "01712345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Ticket Generated"}}, {"name": "Failed Bus Booking Due to Missing Contact Information", "description": "Verify that a customer cannot book a bus ticket if contact information is missing", "input": {"departureStation": "Dhaka", "arrivalStation": "Chittagong", "busType": "AC", "seatNumber": "A1", "contactInfo": {"name": null, "mobile": "01712345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Missing Contact Information"}}, {"name": "Failed Bus Booking Due to Invalid Payment Method", "description": "Verify that a customer cannot book a bus ticket with an invalid payment method", "input": {"departureStation": "Dhaka", "arrivalStation": "Chittagong", "busType": "AC", "seatNumber": "A1", "contactInfo": {"name": "Alice Smith", "mobile": "01712345678"}, "paymentMethod": "InvalidCard"}, "expected": {"outcome": "Booking failed", "status": "Invalid Payment Method"}}, {"name": "Edge Case: Booking with Last Available Seat", "description": "Verify that a customer can book the last available seat on a bus", "input": {"departureStation": "Dhaka", "arrivalStation": "Chittagong", "busType": "AC", "seatNumber": "Z50", "contactInfo": {"name": "Alice Smith", "mobile": "01712345678"}, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Ticket Generated"}}, {"name": "Negative Case: Booking with Past Date", "description": "Verify that a customer cannot book a bus ticket for a past date", "input": {"departureStation": "Dhaka", "arrivalStation": "Chittagong", "busType": "AC", "seatNumber": "A1", "contactInfo": {"name": "Alice Smith", "mobile": "01712345678"}, "travelDate": "2022-01-01", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Invalid Travel Date"}}], "bert_score": {"Precision": 0.9210880994796753, "Recall": 0.9091329574584961, "F1": 0.9150714874267578}}
{"usecase": {"name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}], "GPT4o_testcases": [{"name": "Successful Payment Process", "description": "Verify that a client can successfully complete the payment process for a ticket", "input": {"clientId": "client_67890", "selectedSeats": ["A1", "A2"], "paymentMethod": "Credit Card", "otp": "123456", "balance": 5000, "ticketPrice": 2000}, "expected": {"outcome": "Payment successful", "status": "Payment Confirmed"}}, {"name": "Failed Payment Due to Insufficient Balance", "description": "Verify that a client cannot complete the payment process if the balance is insufficient", "input": {"clientId": "client_67890", "selectedSeats": ["A1", "A2"], "paymentMethod": "Credit Card", "otp": "123456", "balance": 1000, "ticketPrice": 2000}, "expected": {"outcome": "Payment failed", "status": "Insufficient Balance"}}, {"name": "Failed Payment Due to Incorrect OTP", "description": "Verify that a client cannot complete the payment process with an incorrect OTP", "input": {"clientId": "client_67890", "selectedSeats": ["A1", "A2"], "paymentMethod": "Credit Card", "otp": "654321", "balance": 5000, "ticketPrice": 2000}, "expected": {"outcome": "Payment failed", "status": "Incorrect OTP"}}, {"name": "Failed Payment Due to No Seats Selected", "description": "Verify that a client cannot proceed with payment if no seats are selected", "input": {"clientId": "client_67890", "selectedSeats": [], "paymentMethod": "Credit Card", "otp": "123456", "balance": 5000, "ticketPrice": 2000}, "expected": {"outcome": "Payment failed", "status": "No Seats Selected"}}, {"name": "Successful Payment with Different Payment Method", "description": "Verify that a client can successfully complete the payment process using a different payment method", "input": {"clientId": "client_67890", "selectedSeats": ["A1", "A2"], "paymentMethod": "Mobile Banking", "otp": "123456", "balance": 5000, "ticketPrice": 2000}, "expected": {"outcome": "Payment successful", "status": "Payment Confirmed"}}], "bert_score": {"Precision": 0.9143204092979431, "Recall": 0.9064783453941345, "F1": 0.9103825092315674}}
{"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}], "GPT4o_testcases": [{"name": "Successful Login", "description": "Verify that a user can successfully log into their Splitwise account with valid credentials.", "input": {"email": "user@example.com", "password": "correct_password"}, "expected": {"outcome": "Login successful", "status": "Redirected to home screen"}}, {"name": "Failed Login with Incorrect Password", "description": "Verify that a user cannot log into their Splitwise account with an incorrect password.", "input": {"email": "user@example.com", "password": "wrong_password"}, "expected": {"outcome": "Login failed", "status": "Error message displayed"}}, {"name": "Failed Login with Unregistered Email", "description": "Verify that a user cannot log into their Splitwise account with an unregistered email.", "input": {"email": "unregistered@example.com", "password": "any_password"}, "expected": {"outcome": "Login failed", "status": "Error message displayed"}}, {"name": "Failed Login with Empty Email", "description": "Verify that a user cannot log into their Splitwise account with an empty email field.", "input": {"email": "", "password": "any_password"}, "expected": {"outcome": "Login failed", "status": "Error message displayed"}}, {"name": "Failed Login with Empty Password", "description": "Verify that a user cannot log into their Splitwise account with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": {"outcome": "Login failed", "status": "Error message displayed"}}, {"name": "Failed Login with Empty Credentials", "description": "Verify that a user cannot log into their Splitwise account with both email and password fields empty.", "input": {"email": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Error message displayed"}}], "bert_score": {"Precision": 0.9439735412597656, "Recall": 0.9451547861099243, "F1": 0.9445638060569763}}
{"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}], "GPT4o_testcases": [{"name": "Successful Sign Up", "description": "Verify that a new user can successfully sign up for a Splitwise account with valid details.", "input": {"fullName": "Alice Smith", "email": "alice.smith@example.com", "phoneNumber": "0123456789", "password": "SecurePass123", "confirmPassword": "SecurePass123"}, "expected": {"outcome": "Sign up successful", "status": "Account Activated"}}, {"name": "Sign Up with Existing Email", "description": "Verify that a user cannot sign up with an email that is already registered.", "input": {"fullName": "Bob Johnson", "email": "existing.email@example.com", "phoneNumber": "0987654321", "password": "AnotherPass123", "confirmPassword": "AnotherPass123"}, "expected": {"outcome": "Sign up failed", "status": "Email Already Registered"}}, {"name": "Sign Up with Mismatched Passwords", "description": "Verify that a user cannot sign up if the password and confirm password do not match.", "input": {"fullName": "Charlie Brown", "email": "charlie.brown@example.com", "phoneNumber": "0112233445", "password": "Password123", "confirmPassword": "Password321"}, "expected": {"outcome": "Sign up failed", "status": "Password Mismatch"}}, {"name": "Sign Up with Invalid Email Format", "description": "Verify that a user cannot sign up with an invalid email format.", "input": {"fullName": "David Green", "email": "david.green@com", "phoneNumber": "0223344556", "password": "ValidPass123", "confirmPassword": "ValidPass123"}, "expected": {"outcome": "Sign up failed", "status": "Invalid Email Format"}}, {"name": "Sign Up with Short Password", "description": "Verify that a user cannot sign up with a password that is too short.", "input": {"fullName": "Eve White", "email": "eve.white@example.com", "phoneNumber": "0334455667", "password": "Short1", "confirmPassword": "Short1"}, "expected": {"outcome": "Sign up failed", "status": "Password Too Short"}}, {"name": "Sign Up with Missing Phone Number", "description": "Verify that a user cannot sign up without providing a phone number.", "input": {"fullName": "Frank Black", "email": "frank.black@example.com", "phoneNumber": null, "password": "ValidPass123", "confirmPassword": "ValidPass123"}, "expected": {"outcome": "Sign up failed", "status": "Phone Number Required"}}], "bert_score": {"Precision": 0.9429009556770325, "Recall": 0.939487099647522, "F1": 0.9411908984184265}}
{"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}], "GPT4o_testcases": [{"name": "Successful Friend Addition with Existing Splitwise User", "description": "Verify that a user can successfully add a friend who is already a registered Splitwise user.", "input": {"userId": "user_67890", "friendName": "Alice Smith", "friendContact": "alice@example.com"}, "expected": {"outcome": "Friend added successfully", "status": "Friend Added"}}, {"name": "Successful Friend Addition with Non-Registered User", "description": "Verify that a user can send an app link to a friend who is not a registered Splitwise user.", "input": {"userId": "user_67890", "friendName": "Bob Johnson", "friendContact": "0123456789"}, "expected": {"outcome": "App link sent successfully", "status": "Link Sent"}}, {"name": "Failed Friend Addition with Invalid Contact", "description": "Verify that a user cannot add a friend with an invalid contact number or email.", "input": {"userId": "user_67890", "friendName": "Charlie Brown", "friendContact": "invalid_contact"}, "expected": {"outcome": "Friend addition failed", "status": "Invalid Contact"}}, {"name": "Failed Friend Addition with Empty Contact", "description": "Verify that a user cannot add a friend if the contact information is empty.", "input": {"userId": "user_67890", "friendName": "David Green", "friendContact": ""}, "expected": {"outcome": "Friend addition failed", "status": "Empty Contact"}}, {"name": "Edge Case: Adding Friend with Special Characters in Name", "description": "Verify that a user can add a friend whose name contains special characters.", "input": {"userId": "user_67890", "friendName": "Eve O'Connor", "friendContact": "eve@example.com"}, "expected": {"outcome": "Friend added successfully", "status": "Friend Added"}}], "bert_score": {"Precision": 0.9337782859802246, "Recall": 0.9330338835716248, "F1": 0.933405876159668}}
{"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}], "GPT4o_testcases": [{"name": "Successful Group Creation with All Details", "description": "Verify that a user can successfully create a new group with all details provided", "input": {"userId": "user_67890", "groupName": "Weekend Trip", "groupPhoto": "photo.jpg", "groupType": "Trip", "startDate": "2023-11-01", "endDate": "2023-11-05"}, "expected": {"outcome": "Group creation successful", "status": "Group Created"}}, {"name": "Successful Group Creation Without Optional Details", "description": "Verify that a user can successfully create a new group without optional details", "input": {"userId": "user_67890", "groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": {"outcome": "Group creation successful", "status": "Group Created"}}, {"name": "Failed Group Creation Due to Missing Group Name", "description": "Verify that a user cannot create a new group without providing a group name", "input": {"userId": "user_67890", "groupName": null, "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": {"outcome": "Group creation failed", "status": "Missing Group Name"}}, {"name": "Failed Group Creation Due to Missing Trip Dates", "description": "Verify that a user cannot create a 'Trip' group without providing start and end dates", "input": {"userId": "user_67890", "groupName": "Business Trip", "groupPhoto": "photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": {"outcome": "Group creation failed", "status": "Missing Trip Dates"}}, {"name": "Successful Group Creation with Minimal Details", "description": "Verify that a user can successfully create a new group with only the required details", "input": {"userId": "user_67890", "groupName": "Study Group", "groupPhoto": null, "groupType": null}, "expected": {"outcome": "Group creation successful", "status": "Group Created"}}], "bert_score": {"Precision": 0.9433878660202026, "Recall": 0.9422169923782349, "F1": 0.9428020715713501}}
{"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}], "GPT4o_testcases": [{"name": "Successful Expense Addition", "description": "Verify that a user can successfully add an expense with valid details and split equally among members", "input": {"userId": "user_67890", "groups": ["Friends"], "description": "Dinner", "amount": 100.0, "paidBy": "user_67890", "splitCategory": "Equally"}, "expected": {"outcome": "Expense added successfully", "status": "Expense Recorded"}}, {"name": "Failed Expense Addition Due to Missing Description", "description": "Verify that a user cannot add an expense without a description", "input": {"userId": "user_67890", "groups": ["Friends"], "description": null, "amount": 100.0, "paidBy": "user_67890", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "Missing Description"}}, {"name": "Failed Expense Addition Due to Zero Amount", "description": "Verify that a user cannot add an expense with an amount of zero", "input": {"userId": "user_67890", "groups": ["Friends"], "description": "Dinner", "amount": 0.0, "paidBy": "user_67890", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "Invalid Amount"}}, {"name": "Successful Unequal Split Expense Addition", "description": "Verify that a user can add an expense with an unequal split among members", "input": {"userId": "user_67890", "groups": ["Friends"], "description": "Dinner", "amount": 100.0, "paidBy": "user_67890", "splitCategory": "Unequally", "splitDetails": {"user_67890": 60.0, "user_12345": 40.0}}, "expected": {"outcome": "Expense added successfully", "status": "Expense Recorded"}}, {"name": "Failed Expense Addition Due to Invalid Split Details", "description": "Verify that a user cannot add an expense with invalid split details that do not sum up to the total amount", "input": {"userId": "user_67890", "groups": ["Friends"], "description": "Dinner", "amount": 100.0, "paidBy": "user_67890", "splitCategory": "Unequally", "splitDetails": {"user_67890": 50.0, "user_12345": 30.0}}, "expected": {"outcome": "Expense addition failed", "status": "Invalid Split Details"}}], "bert_score": {"Precision": 0.9331121444702148, "Recall": 0.9357946515083313, "F1": 0.9344515204429626}}
{"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}], "GPT4o_testcases": [{"name": "Successful Activity Feed View", "description": "Verify that a user can successfully view the activity feed", "input": {"userId": "user_67890"}, "expected": {"outcome": "Activity feed displayed successfully", "status": "Feed Displayed"}}, {"name": "Filter Activities by Type", "description": "Verify that a user can filter activities by type", "input": {"userId": "user_67890", "filterType": "expenses"}, "expected": {"outcome": "Activities filtered by expenses", "status": "Filter Applied"}}, {"name": "Search Specific Activity", "description": "Verify that a user can search for a specific activity", "input": {"userId": "user_67890", "searchQuery": "Dinner"}, "expected": {"outcome": "Specific activity found", "status": "Search Successful"}}, {"name": "Edit Activity", "description": "Verify that a user can edit an activity", "input": {"userId": "user_67890", "activityId": "activity_123", "newDetails": "Updated Dinner Expense"}, "expected": {"outcome": "Activity edited successfully", "status": "Edit Successful"}}, {"name": "Delete Activity", "description": "Verify that a user can delete an activity", "input": {"userId": "user_67890", "activityId": "activity_123"}, "expected": {"outcome": "Activity deleted successfully", "status": "Delete Successful"}}, {"name": "Failed Activity Feed View", "description": "Verify that a user cannot view the activity feed if not logged in", "input": {"userId": null}, "expected": {"outcome": "Activity feed view failed", "status": "Not Logged In"}}, {"name": "Invalid Filter Type", "description": "Verify that an invalid filter type returns an error", "input": {"userId": "user_67890", "filterType": "invalidType"}, "expected": {"outcome": "Filter application failed", "status": "Invalid Filter Type"}}, {"name": "Search Non-Existent Activity", "description": "Verify that searching for a non-existent activity returns no results", "input": {"userId": "user_67890", "searchQuery": "NonExistentActivity"}, "expected": {"outcome": "No activities found", "status": "Search Unsuccessful"}}, {"name": "Edit Non-Existent Activity", "description": "Verify that editing a non-existent activity returns an error", "input": {"userId": "user_67890", "activityId": "nonExistentActivity", "newDetails": "Updated Details"}, "expected": {"outcome": "Edit failed", "status": "Activity Not Found"}}, {"name": "Delete Non-Existent Activity", "description": "Verify that deleting a non-existent activity returns an error", "input": {"userId": "user_67890", "activityId": "nonExistentActivity"}, "expected": {"outcome": "Delete failed", "status": "Activity Not Found"}}], "bert_score": {"Precision": 0.9314007759094238, "Recall": 0.9271485805511475, "F1": 0.9292697906494141}}
{"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}], "GPT4o_testcases": [{"name": "Successful Group and Non-Group Expense View", "description": "Verify that a user can successfully view groups and non-group expenses", "input": {"userId": "user_67890", "loggedIn": true, "groups": ["Group A", "Group B"], "nonGroupExpenses": ["Expense 1", "Expense 2"]}, "expected": {"outcome": "Groups and non-group expenses displayed successfully", "status": "View Successful"}}, {"name": "Failed Group View Due to No Groups", "description": "Verify that a user cannot view groups if they are not part of any group", "input": {"userId": "user_67890", "loggedIn": true, "groups": [], "nonGroupExpenses": ["Expense 1", "Expense 2"]}, "expected": {"outcome": "No groups to display", "status": "No Groups Found"}}, {"name": "Failed Expense View Due to Not Logged In", "description": "Verify that a user cannot view expenses if they are not logged in", "input": {"userId": "user_67890", "loggedIn": false, "groups": ["Group A", "Group B"], "nonGroupExpenses": ["Expense 1", "Expense 2"]}, "expected": {"outcome": "Access denied", "status": "Not Logged In"}}, {"name": "Successful Detailed Group Expense View", "description": "Verify that a user can view detailed expenses within a selected group", "input": {"userId": "user_67890", "loggedIn": true, "selectedGroup": "Group A", "groupExpenses": ["Expense 1", "Expense 2"]}, "expected": {"outcome": "Detailed group expenses displayed successfully", "status": "Detail View Successful"}}, {"name": "Failed Non-Group Expense Detail View Due to Invalid Expense", "description": "Verify that a user cannot view details of a non-group expense if the expense is invalid", "input": {"userId": "user_67890", "loggedIn": true, "selectedNonGroupExpense": "Invalid Expense"}, "expected": {"outcome": "Expense details not found", "status": "Invalid Expense"}}], "bert_score": {"Precision": 0.9054586291313171, "Recall": 0.8995089530944824, "F1": 0.9024739861488342}}
{"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}], "GPT4o_testcases": [{"name": "Successful Group Details View", "description": "Verify that a user can successfully view the details of a selected group", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Group details displayed successfully", "status": "Details Visible"}}, {"name": "Failed Group Details View - Not a Member", "description": "Verify that a user cannot view group details if they are not a member of the group", "input": {"userId": "user_67890", "groupId": "group_54321"}, "expected": {"outcome": "Group details view failed", "status": "Access Denied"}}, {"name": "View Group Members List", "description": "Verify that a user can view the list of all group members", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Group members list displayed", "status": "Members Visible"}}, {"name": "View Total Group Expenses", "description": "Verify that a user can see the total expenses shared in the group", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Total expenses displayed", "status": "Expenses Visible"}}, {"name": "View Individual Expense History", "description": "Verify that a user can view individual expense history related to the group", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Individual expense history displayed", "status": "History Visible"}}, {"name": "Invite New Member to Group", "description": "Verify that a user can invite new members to the group via email", "input": {"userId": "user_67890", "groupId": "group_12345", "inviteEmail": "newmember@example.com"}, "expected": {"outcome": "Invitation sent successfully", "status": "Invite Sent"}}, {"name": "Remove Member from Group", "description": "Verify that a user can remove a member from the group", "input": {"userId": "user_67890", "groupId": "group_12345", "memberId": "member_54321"}, "expected": {"outcome": "Member removed successfully", "status": "Member Removed"}}, {"name": "Leave Group", "description": "Verify that a user can leave the group", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "User left the group successfully", "status": "Left Group"}}, {"name": "Failed Group Details View - Invalid Group ID", "description": "Verify that a user cannot view group details with an invalid group ID", "input": {"userId": "user_67890", "groupId": "invalid_group"}, "expected": {"outcome": "Group details view failed", "status": "Invalid Group ID"}}, {"name": "View Member Contribution Summary", "description": "Verify that a user can view a summary of each member's contribution to the group expenses", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Member contribution summary displayed", "status": "Summary Visible"}}], "bert_score": {"Precision": 0.9251939654350281, "Recall": 0.9350724816322327, "F1": 0.9301069378852844}}
{"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}], "GPT4o_testcases": [{"name": "Successful View of Friends and Balances", "description": "Verify that a user can successfully view the list of friends and their balances", "input": {"userId": "user_67890"}, "expected": {"outcome": "Friends list and balances displayed successfully", "status": "View Successful"}}, {"name": "Failed View of Friends and Balances with No Friends Added", "description": "Verify that a user cannot view friends and balances if no friends are added", "input": {"userId": "user_67890"}, "expected": {"outcome": "No friends to display", "status": "View Failed"}}, {"name": "Successful Payment to a Friend", "description": "Verify that a user can successfully make a payment to a friend", "input": {"userId": "user_67890", "friendId": "friend_12345", "paymentMethod": "Credit Card", "amount": 50.0}, "expected": {"outcome": "Payment successful and balances updated", "status": "Payment Successful"}}, {"name": "Failed Payment with Invalid Amount", "description": "Verify that a user cannot make a payment with an invalid amount", "input": {"userId": "user_67890", "friendId": "friend_12345", "paymentMethod": "Credit Card", "amount": -10.0}, "expected": {"outcome": "Payment failed due to invalid amount", "status": "Payment Failed"}}, {"name": "Failed Payment with No Payment Method Selected", "description": "Verify that a user cannot make a payment without selecting a payment method", "input": {"userId": "user_67890", "friendId": "friend_12345", "paymentMethod": null, "amount": 50.0}, "expected": {"outcome": "Payment failed due to no payment method selected", "status": "Payment Failed"}}, {"name": "Successful View of Detailed Transaction History", "description": "Verify that a user can view detailed transaction history with a specific friend", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Detailed transaction history displayed successfully", "status": "View Successful"}}, {"name": "Failed View of Detailed Transaction History with Invalid Friend ID", "description": "Verify that a user cannot view transaction history with an invalid friend ID", "input": {"userId": "user_67890", "friendId": "invalid_friend"}, "expected": {"outcome": "Transaction history view failed due to invalid friend ID", "status": "View Failed"}}], "bert_score": {"Precision": 0.920721709728241, "Recall": 0.9232614636421204, "F1": 0.9219898581504822}}
{"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}], "GPT4o_testcases": [{"name": "Successful Friend Details View", "description": "Verify that a user can successfully view a friend's details", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Friend details displayed successfully", "status": "Details Visible"}}, {"name": "Failed Friend Details View - No Friends Added", "description": "Verify that a user cannot view friend details if no friends are added", "input": {"userId": "user_67890", "friendId": null}, "expected": {"outcome": "Friend details view failed", "status": "No Friends Available"}}, {"name": "Successful Expense History View", "description": "Verify that a user can view the expense history with a friend", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Expense history displayed successfully", "status": "History Visible"}}, {"name": "Failed Expense History View - Invalid Friend ID", "description": "Verify that a user cannot view expense history with an invalid friend ID", "input": {"userId": "user_67890", "friendId": "invalid_friend"}, "expected": {"outcome": "Expense history view failed", "status": "Invalid Friend ID"}}, {"name": "Successful Settle Up", "description": "Verify that a user can successfully settle up with a friend", "input": {"userId": "user_67890", "friendId": "friend_12345", "amount": 50.0}, "expected": {"outcome": "Settle up successful", "status": "Balance Cleared"}}, {"name": "Failed Settle Up - Insufficient Balance", "description": "Verify that a user cannot settle up if the balance is insufficient", "input": {"userId": "user_67890", "friendId": "friend_12345", "amount": 5000.0}, "expected": {"outcome": "Settle up failed", "status": "Insufficient Balance"}}, {"name": "Successful Reminder Sent", "description": "Verify that a user can send a reminder to a friend for pending payments", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Reminder sent successfully", "status": "Reminder Sent"}}, {"name": "Failed Reminder Sent - No Pending Payments", "description": "Verify that a user cannot send a reminder if there are no pending payments", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Reminder sending failed", "status": "No Pending Payments"}}, {"name": "Successful Export of Friend's Expense Data", "description": "Verify that a user can export a friend's expense data as a spreadsheet", "input": {"userId": "user_67890", "friendId": "friend_12345"}, "expected": {"outcome": "Export successful", "status": "Data Exported"}}, {"name": "Failed Export of Friend's Expense Data - Invalid Format", "description": "Verify that a user cannot export a friend's expense data in an invalid format", "input": {"userId": "user_67890", "friendId": "friend_12345", "format": "invalid_format"}, "expected": {"outcome": "Export failed", "status": "Invalid Format"}}, {"name": "Successful Friendship Management", "description": "Verify that a user can manage friendship settings", "input": {"userId": "user_67890", "friendId": "friend_12345", "action": "block"}, "expected": {"outcome": "Friendship management successful", "status": "Friend Blocked"}}, {"name": "Failed Friendship Management - Invalid Action", "description": "Verify that a user cannot perform an invalid action in friendship management", "input": {"userId": "user_67890", "friendId": "friend_12345", "action": "invalid_action"}, "expected": {"outcome": "Friendship management failed", "status": "Invalid Action"}}], "bert_score": {"Precision": 0.929799497127533, "Recall": 0.9286395311355591, "F1": 0.9292191863059998}}
{"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}], "GPT4o_testcases": [{"name": "Successful Account Information Update", "description": "Verify that a user can successfully update their account information", "input": {"userId": "user_67890", "email": "newemail@example.com", "password": "NewPassword123"}, "expected": {"outcome": "Account information update successful", "status": "Information Updated"}}, {"name": "Failed Account Information Update Due to Empty Email", "description": "Verify that a user cannot update their account information if the email is empty", "input": {"userId": "user_67890", "email": "", "password": "NewPassword123"}, "expected": {"outcome": "Account information update failed", "status": "Incorrect Information"}}, {"name": "Successful Notification Settings Update", "description": "Verify that a user can successfully update their notification settings", "input": {"userId": "user_67890", "emailNotifications": true, "pushNotifications": false}, "expected": {"outcome": "Notification settings update successful", "status": "Settings Updated"}}, {"name": "Failed Notification Settings Update Due to Invalid Input", "description": "Verify that a user cannot update their notification settings with invalid input", "input": {"userId": "user_67890", "emailNotifications": "invalid", "pushNotifications": false}, "expected": {"outcome": "Notification settings update failed", "status": "Invalid Input"}}, {"name": "Successful Subscription to Splitwise Pro", "description": "Verify that a user can successfully subscribe to Splitwise Pro", "input": {"userId": "user_67890", "subscribePro": true}, "expected": {"outcome": "Subscription successful", "status": "Pro Subscribed"}}, {"name": "Failed Subscription to Splitwise Pro Due to Payment Error", "description": "Verify that a user cannot subscribe to Splitwise Pro if there is a payment error", "input": {"userId": "user_67890", "subscribePro": true, "paymentMethod": "invalid_card"}, "expected": {"outcome": "Subscription failed", "status": "Payment Error"}}, {"name": "Successful Two-Factor Authentication Enablement", "description": "Verify that a user can successfully enable two-factor authentication", "input": {"userId": "user_67890", "enableTwoFactor": true}, "expected": {"outcome": "Two-factor authentication enabled", "status": "Security Updated"}}, {"name": "Failed Two-Factor Authentication Enablement Due to Missing Phone Number", "description": "Verify that a user cannot enable two-factor authentication without a phone number", "input": {"userId": "user_67890", "enableTwoFactor": true, "phoneNumber": null}, "expected": {"outcome": "Two-factor authentication enablement failed", "status": "Missing Information"}}], "bert_score": {"Precision": 0.9293111562728882, "Recall": 0.9237020611763, "F1": 0.9264980554580688}}
{"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}], "GPT4o_testcases": [{"name": "Successful Logout", "description": "Verify that a user can successfully log out of their Splitwise account", "input": {"userId": "user_67890", "action": "logout"}, "expected": {"outcome": "Logout successful", "status": "Redirected to login screen"}}, {"name": "Logout Without Confirmation", "description": "Verify that a user cannot log out without confirming the logout action", "input": {"userId": "user_67890", "action": "attempt_logout_without_confirmation"}, "expected": {"outcome": "Logout not completed", "status": "Still logged in"}}, {"name": "Logout with Invalid Session", "description": "Verify that a user cannot log out if the session is invalid", "input": {"userId": "user_67890", "action": "logout", "session": "invalid"}, "expected": {"outcome": "Logout failed", "status": "Session expired"}}, {"name": "Logout with Network Failure", "description": "Verify that a user cannot log out if there is a network failure", "input": {"userId": "user_67890", "action": "logout", "network": "down"}, "expected": {"outcome": "Logout failed", "status": "Network error"}}], "bert_score": {"Precision": 0.9181892275810242, "Recall": 0.927959680557251, "F1": 0.9230485558509827}}
{"usecase": {"name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Ad Posting", "description": "Verify that a seller can successfully post a new sale ad with all required information.", "input": {"sellerId": "seller_67890", "category": "Electronics", "subCategory": "Mobile Phones", "location": "Dhaka", "price": "15000", "image": "mobile.jpg", "description": "Brand new mobile phone for sale."}, "expected": {"outcome": "Ad posted successfully", "status": "Ad Under Review"}}, {"name": "Failed Ad Posting Due to Missing Information", "description": "Verify that a seller cannot post a new sale ad if any required information is missing.", "input": {"sellerId": "seller_67890", "category": "Electronics", "subCategory": "Mobile Phones", "location": "Dhaka", "price": null, "image": "mobile.jpg", "description": "Brand new mobile phone for sale."}, "expected": {"outcome": "Ad posting failed", "status": "Missing Required Information"}}, {"name": "Failed Ad Posting Due to Invalid Price", "description": "Verify that a seller cannot post a new sale ad with an invalid price.", "input": {"sellerId": "seller_67890", "category": "Electronics", "subCategory": "Mobile Phones", "location": "Dhaka", "price": "-5000", "image": "mobile.jpg", "description": "Brand new mobile phone for sale."}, "expected": {"outcome": "Ad posting failed", "status": "Invalid Price"}}, {"name": "Failed Ad Posting Due to Invalid Image Format", "description": "Verify that a seller cannot post a new sale ad with an invalid image format.", "input": {"sellerId": "seller_67890", "category": "Electronics", "subCategory": "Mobile Phones", "location": "Dhaka", "price": "15000", "image": "mobile.txt", "description": "Brand new mobile phone for sale."}, "expected": {"outcome": "Ad posting failed", "status": "Invalid Image Format"}}, {"name": "Successful Ad Posting with Maximum Price", "description": "Verify that a seller can post a new sale ad with the maximum allowable price.", "input": {"sellerId": "seller_67890", "category": "Real Estate", "subCategory": "Apartments", "location": "Dhaka", "price": "100000000", "image": "apartment.jpg", "description": "Luxury apartment for sale."}, "expected": {"outcome": "Ad posted successfully", "status": "Ad Under Review"}}], "bert_score": {"Precision": 0.9419935345649719, "Recall": 0.9532067775726318, "F1": 0.9475670456886292}}
{"usecase": {"name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}], "GPT4o_testcases": [{"name": "Successful Item Search with Filters", "description": "Verify that a buyer can successfully search for an item using category and location filters", "input": {"category": "Electronics", "typeOfAd": "For Sale", "typeOfPoster": "Individual", "location": "Dhaka"}, "expected": {"outcome": "Search results displayed", "status": "Items Found"}}, {"name": "Successful Item Search without Filters", "description": "Verify that a buyer can successfully search for an item without applying any filters", "input": {"category": "All", "typeOfAd": null, "typeOfPoster": null, "location": null}, "expected": {"outcome": "Search results displayed", "status": "Items Found"}}, {"name": "Failed Item Search with Invalid Category", "description": "Verify that a buyer receives an error when searching with an invalid category", "input": {"category": "InvalidCategory", "typeOfAd": "For Sale", "typeOfPoster": "Individual", "location": "Dhaka"}, "expected": {"outcome": "Search results not displayed", "status": "Invalid Category"}}, {"name": "Failed Item Search with Invalid Location", "description": "Verify that a buyer receives an error when searching with an invalid location", "input": {"category": "Electronics", "typeOfAd": "For Sale", "typeOfPoster": "Individual", "location": "InvalidLocation"}, "expected": {"outcome": "Search results not displayed", "status": "Invalid Location"}}, {"name": "Successful Item Search with Specific Title", "description": "Verify that a buyer can successfully search for an item using a specific advertisement title", "input": {"category": "Electronics", "typeOfAd": "For Sale", "typeOfPoster": "Individual", "location": "Dhaka", "searchTitle": "iPhone 12"}, "expected": {"outcome": "Search results displayed", "status": "Items Found"}}, {"name": "Failed Item Search with Non-Existent Title", "description": "Verify that a buyer receives no results when searching with a non-existent advertisement title", "input": {"category": "Electronics", "typeOfAd": "For Sale", "typeOfPoster": "Individual", "location": "Dhaka", "searchTitle": "NonExistentItem"}, "expected": {"outcome": "Search results not displayed", "status": "No Items Found"}}], "bert_score": {"Precision": 0.9301671385765076, "Recall": 0.9358903765678406, "F1": 0.9330199956893921}}
{"usecase": {"name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}], "GPT4o_testcases": [{"name": "Successful Ad Boost with Valid Payment", "description": "Verify that a seller can successfully boost an ad using valid payment details", "input": {"sellerId": "seller_67890", "adId": "ad_12345", "boostOption": "Spotlight", "duration": "7 days", "paymentMethod": "Visa", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}}, "expected": {"outcome": "Ad boost successful", "status": "Spotlight"}}, {"name": "Failed Ad Boost Due to Insufficient Balance", "description": "Verify that a seller cannot boost an ad if there is insufficient balance", "input": {"sellerId": "seller_67890", "adId": "ad_12345", "boostOption": "Urgent", "duration": "3 days", "paymentMethod": "Pay by voucher", "voucherCode": "VOUCHER123"}, "expected": {"outcome": "Ad boost failed", "status": "Insufficient Balance"}}, {"name": "Failed Ad Boost with Invalid Payment Details", "description": "Verify that a seller cannot boost an ad using invalid payment details", "input": {"sellerId": "seller_67890", "adId": "ad_12345", "boostOption": "Bump Up", "duration": "15 days", "paymentMethod": "MasterCard", "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "01/23", "cvv": "000"}}, "expected": {"outcome": "Ad boost failed", "status": "Invalid Payment Details"}}, {"name": "Successful Ad Boost with Multiple Options", "description": "Verify that a seller can boost an ad with multiple options", "input": {"sellerId": "seller_67890", "adId": "ad_12345", "boostOptions": ["Bump Up", "Urgent"], "duration": "7 days", "paymentMethod": "Bikash", "paymentDetails": {"accountNumber": "01712345678", "pin": "1234"}}, "expected": {"outcome": "Ad boost successful", "status": "Bumped, Urgent"}}, {"name": "Failed Ad Boost with Invalid Ad ID", "description": "Verify that a seller cannot boost an ad with an invalid ad ID", "input": {"sellerId": "seller_67890", "adId": "invalid_ad_000", "boostOption": "Spotlight", "duration": "7 days", "paymentMethod": "DBBL", "paymentDetails": {"accountNumber": "123456789", "pin": "5678"}}, "expected": {"outcome": "Ad boost failed", "status": "Invalid Ad ID"}}], "bert_score": {"Precision": 0.924028754234314, "Recall": 0.9213160872459412, "F1": 0.9226704239845276}}
{"usecase": {"name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}], "GPT4o_testcases": [{"name": "Successful Job Posting", "description": "Verify that an employer can successfully post a new job listing with all required details.", "input": {"employerId": "employer_67890", "title": "Software Engineer", "description": "Responsible for developing software solutions.", "location": "Dhaka", "category": "IT", "experience": "2 years"}, "expected": {"outcome": "Job posting successful", "status": "Job Posted"}}, {"name": "Failed Job Posting Due to Missing Title", "description": "Verify that a job posting fails if the title is missing.", "input": {"employerId": "employer_67890", "title": null, "description": "Responsible for developing software solutions.", "location": "Dhaka", "category": "IT", "experience": "2 years"}, "expected": {"outcome": "Job posting failed", "status": "Missing Title"}}, {"name": "Failed Job Posting Due to Missing Description", "description": "Verify that a job posting fails if the description is missing.", "input": {"employerId": "employer_67890", "title": "Software Engineer", "description": null, "location": "Dhaka", "category": "IT", "experience": "2 years"}, "expected": {"outcome": "Job posting failed", "status": "Missing Description"}}, {"name": "Successful Job Posting Without Experience", "description": "Verify that an employer can post a job without specifying years of experience.", "input": {"employerId": "employer_67890", "title": "Software Engineer", "description": "Responsible for developing software solutions.", "location": "Dhaka", "category": "IT", "experience": null}, "expected": {"outcome": "Job posting successful", "status": "Job Posted"}}, {"name": "Failed Job Posting Due to Invalid Location", "description": "Verify that a job posting fails if the location is invalid.", "input": {"employerId": "employer_67890", "title": "Software Engineer", "description": "Responsible for developing software solutions.", "location": "InvalidLocation", "category": "IT", "experience": "2 years"}, "expected": {"outcome": "Job posting failed", "status": "Invalid Location"}}], "bert_score": {"Precision": 0.9371788501739502, "Recall": 0.9433623552322388, "F1": 0.9402604103088379}}
{"usecase": {"name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}], "GPT4o_testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job with all required information", "input": {"userId": "jobseeker_67890", "jobId": "job_12345", "resume": "resume.pdf"}, "expected": {"outcome": "Job application submitted successfully", "status": "Application Submitted"}}, {"name": "Failed Job Application Due to Missing Resume", "description": "Verify that a job seeker cannot apply for a job without submitting a resume", "input": {"userId": "jobseeker_67890", "jobId": "job_12345", "resume": null}, "expected": {"outcome": "Job application submission failed", "status": "Resume Required"}}, {"name": "Failed Job Application Due to Invalid Job ID", "description": "Verify that a job seeker cannot apply for a job with an invalid job ID", "input": {"userId": "jobseeker_67890", "jobId": "invalid_job_00000", "resume": "resume.pdf"}, "expected": {"outcome": "Job application submission failed", "status": "Invalid Job ID"}}, {"name": "Failed Job Application Due to Not Logged In", "description": "Verify that a job seeker cannot apply for a job without being logged in", "input": {"userId": null, "jobId": "job_12345", "resume": "resume.pdf"}, "expected": {"outcome": "Job application submission failed", "status": "User Not Logged In"}}], "bert_score": {"Precision": 0.945875883102417, "Recall": 0.9507899284362793, "F1": 0.9483265280723572}}
{"usecase": {"name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}], "GPT4o_testcases": [{"name": "Successful Talent Search and Shortlist", "description": "Verify that an employer can successfully search for job seekers and add them to the shortlist", "input": {"employerId": "employer_67890", "searchCriteria": {"jobCategory": "Software Development", "location": "Dhaka", "keywords": "Java Developer"}, "filters": {"experience": "3+ years", "educationLevel": "Bachelor's", "gender": "Any"}}, "expected": {"outcome": "Talent search and shortlist successful", "status": "Profiles Shortlisted"}}, {"name": "Failed Talent Search Due to Invalid Criteria", "description": "Verify that an employer cannot search for job seekers with invalid search criteria", "input": {"employerId": "employer_67890", "searchCriteria": {"jobCategory": null, "location": "Dhaka", "keywords": "Java Developer"}, "filters": {"experience": "3+ years", "educationLevel": "Bachelor's", "gender": "Any"}}, "expected": {"outcome": "Talent search failed", "status": "Invalid Search Criteria"}}, {"name": "Successful Full Profile Unlock with Membership", "description": "Verify that an employer with membership can unlock full profiles of job seekers", "input": {"employerId": "employer_67890", "membershipStatus": "Active", "selectedProfiles": ["profile_123", "profile_456"]}, "expected": {"outcome": "Full profile unlock successful", "status": "Profiles Unlocked"}}, {"name": "Failed Full Profile Unlock Without Membership", "description": "Verify that an employer without membership cannot unlock full profiles of job seekers", "input": {"employerId": "employer_67890", "membershipStatus": "Inactive", "selectedProfiles": ["profile_123", "profile_456"]}, "expected": {"outcome": "Full profile unlock failed", "status": "Membership Required"}}], "bert_score": {"Precision": 0.9354673624038696, "Recall": 0.9370136857032776, "F1": 0.9362398386001587}}
{"usecase": {"name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}], "GPT4o_testcases": [{"name": "Successful Membership Registration", "description": "Verify that a user can successfully register for a membership with valid details", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "Tech Gadgets", "email": "contact@techgadgets.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Membership registration successful", "status": "Account Activated"}}, {"name": "Failed Membership Registration Due to Missing Business Name", "description": "Verify that a user cannot register for a membership if the business name is missing", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": null, "email": "contact@techgadgets.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Membership registration failed", "status": "Missing Business Name"}}, {"name": "Failed Membership Registration Due to Invalid Email", "description": "Verify that a user cannot register for a membership with an invalid email format", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "Tech Gadgets", "email": "contact@techgadgets", "phoneNumber": "01712345678"}, "expected": {"outcome": "Membership registration failed", "status": "Invalid Email Format"}}, {"name": "Failed Membership Registration Due to Invalid Phone Number", "description": "Verify that a user cannot register for a membership with an invalid phone number", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "Tech Gadgets", "email": "contact@techgadgets.com", "phoneNumber": "12345"}, "expected": {"outcome": "Membership registration failed", "status": "Invalid Phone Number"}}, {"name": "Successful Membership Registration with Premium Plan", "description": "Verify that a user can successfully register for a Premium membership plan", "input": {"businessCategory": "Electronics", "membershipPlan": "Premium - Yearly", "businessName": "Electro World", "email": "info@electroworld.com", "phoneNumber": "01812345678"}, "expected": {"outcome": "Membership registration successful", "status": "Account Activated"}}], "bert_score": {"Precision": 0.9355576038360596, "Recall": 0.9380211234092712, "F1": 0.9367876648902893}}
{"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}], "GPT4o_testcases": [{"name": "Successful Workspace Creation", "description": "Verify that a user can successfully create a new workspace with valid details", "input": {"userId": "user_67890", "workspaceName": "Project Alpha", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation successful", "status": "Workspace Created"}}, {"name": "Failed Workspace Creation Due to Exceeding Limit", "description": "Verify that a user cannot create a new workspace if they have reached the maximum number of workspaces", "input": {"userId": "user_67890", "workspaceName": "Project Beta", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Workspace Limit Exceeded"}}, {"name": "Failed Workspace Creation Due to Missing Name", "description": "Verify that a user cannot create a new workspace without providing a workspace name", "input": {"userId": "user_67890", "workspaceName": null, "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Invalid Workspace Name"}}, {"name": "Failed Workspace Creation Due to Invalid Email Domain", "description": "Verify that a user cannot create a new workspace with an invalid email domain", "input": {"userId": "user_67890", "workspaceName": "Project Gamma", "emailDomain": "invalid_domain"}, "expected": {"outcome": "Workspace creation failed", "status": "Invalid Email Domain"}}], "bert_score": {"Precision": 0.9442209601402283, "Recall": 0.9451481103897095, "F1": 0.9446843266487122}}
{"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}], "GPT4o_testcases": [{"name": "Successful Workspace Switch", "description": "Verify that a user can successfully switch to another workspace they are a member of.", "input": {"userId": "user_67890", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace B"}, "expected": {"outcome": "Workspace switch successful", "status": "Redirected to Workspace B"}}, {"name": "Failed Workspace Switch - Not a Member", "description": "Verify that a user cannot switch to a workspace they are not a member of.", "input": {"userId": "user_67890", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace C"}, "expected": {"outcome": "Workspace switch failed", "status": "Access Denied"}}, {"name": "Failed Workspace Switch - Invalid Workspace", "description": "Verify that a user cannot switch to a non-existent workspace.", "input": {"userId": "user_67890", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace X"}, "expected": {"outcome": "Workspace switch failed", "status": "Workspace Not Found"}}, {"name": "Failed Workspace Switch - Not Logged In", "description": "Verify that a user cannot switch workspaces if they are not logged in.", "input": {"userId": null, "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace B"}, "expected": {"outcome": "Workspace switch failed", "status": "User Not Logged In"}}, {"name": "Edge Case - Switch to Same Workspace", "description": "Verify that switching to the same workspace does not cause any issues.", "input": {"userId": "user_67890", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace A"}, "expected": {"outcome": "No change in workspace", "status": "Remains in Workspace A"}}], "bert_score": {"Precision": 0.9314281940460205, "Recall": 0.9372477531433105, "F1": 0.9343289136886597}}
{"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}], "GPT4o_testcases": [{"name": "Successful Workspace Join by Invitation", "description": "Verify that a user can successfully join a workspace using an invitation link.", "input": {"userId": "user_67890", "invitationLink": "https://notion.so/invite/abc123"}, "expected": {"outcome": "Workspace join successful", "status": "Joined"}}, {"name": "Successful Workspace Join by Allowed Domain", "description": "Verify that a user can successfully join a workspace using an email from an allowed domain.", "input": {"userId": "user_67890", "email": "user@alloweddomain.com"}, "expected": {"outcome": "Workspace join successful", "status": "Joined"}}, {"name": "Failed Workspace Join with Invalid Invitation Link", "description": "Verify that a user cannot join a workspace using an invalid invitation link.", "input": {"userId": "user_67890", "invitationLink": "https://notion.so/invite/invalid"}, "expected": {"outcome": "Workspace join failed", "status": "Invalid Invitation"}}, {"name": "Failed Workspace Join with Unallowed Domain", "description": "Verify that a user cannot join a workspace using an email from an unallowed domain.", "input": {"userId": "user_67890", "email": "user@unalloweddomain.com"}, "expected": {"outcome": "Workspace join failed", "status": "Domain Not Allowed"}}, {"name": "Failed Workspace Join Without Login", "description": "Verify that a user cannot join a workspace without being logged into their Notion account.", "input": {"userId": null, "invitationLink": "https://notion.so/invite/abc123"}, "expected": {"outcome": "Workspace join failed", "status": "Not Logged In"}}], "bert_score": {"Precision": 0.9410099983215332, "Recall": 0.9504919648170471, "F1": 0.9457272887229919}}
{"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Name Update", "description": "Verify that a user can successfully update the workspace name", "input": {"userId": "user_67890", "workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name update successful", "status": "Name Updated"}}, {"name": "Failed Workspace Name Update Due to Empty Name", "description": "Verify that a user cannot update the workspace name if the name is empty", "input": {"userId": "user_67890", "workspaceName": ""}, "expected": {"outcome": "Workspace name update failed", "status": "Invalid Name"}}, {"name": "Failed Workspace Name Update Due to Special Characters", "description": "Verify that a user cannot update the workspace name if the name contains special characters", "input": {"userId": "user_67890", "workspaceName": "Workspace@123"}, "expected": {"outcome": "Workspace name update failed", "status": "Invalid Characters"}}, {"name": "Failed Workspace Name Update Due to Exceeding Character Limit", "description": "Verify that a user cannot update the workspace name if the name exceeds the character limit", "input": {"userId": "user_67890", "workspaceName": "This is a very long workspace name that exceeds the character limit"}, "expected": {"outcome": "Workspace name update failed", "status": "Name Too Long"}}], "bert_score": {"Precision": 0.9355509281158447, "Recall": 0.9550141096115112, "F1": 0.9451823234558105}}
{"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Icon Upload", "description": "Verify that a user can successfully upload a new icon for the workspace", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "iconFile": "icon.png"}, "expected": {"outcome": "Workspace icon update successful", "status": "Icon Updated"}}, {"name": "Failed Workspace Icon Upload - Unsupported File Format", "description": "Verify that a user cannot upload a workspace icon with an unsupported file format", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "iconFile": "icon.txt"}, "expected": {"outcome": "Workspace icon update failed", "status": "Unsupported File Format"}}, {"name": "Failed Workspace Icon Upload - No File Selected", "description": "Verify that a user cannot update the workspace icon without selecting a file", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "iconFile": null}, "expected": {"outcome": "Workspace icon update failed", "status": "No File Selected"}}, {"name": "Failed Workspace Icon Upload - File Size Exceeded", "description": "Verify that a user cannot upload a workspace icon if the file size exceeds the limit", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "iconFile": "large_icon.png"}, "expected": {"outcome": "Workspace icon update failed", "status": "File Size Exceeded"}}], "bert_score": {"Precision": 0.9521900415420532, "Recall": 0.9565460681915283, "F1": 0.9543630480766296}}
{"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Deletion", "description": "Verify that a user can successfully delete a workspace by typing the correct workspace name", "input": {"userId": "user_67890", "workspaceName": "Project Alpha"}, "expected": {"outcome": "Workspace deletion successful", "status": "Workspace Deleted"}}, {"name": "Failed Workspace Deletion Due to Incorrect Name", "description": "Verify that a user cannot delete a workspace if the typed workspace name is incorrect", "input": {"userId": "user_67890", "workspaceName": "Project Beta"}, "expected": {"outcome": "Workspace deletion failed", "status": "Incorrect Workspace Name"}}, {"name": "Failed Workspace Deletion Due to Empty Name", "description": "Verify that a user cannot delete a workspace if the workspace name is not provided", "input": {"userId": "user_67890", "workspaceName": ""}, "expected": {"outcome": "Workspace deletion failed", "status": "Workspace Name Required"}}, {"name": "Failed Workspace Deletion Due to Unauthorized User", "description": "Verify that a user cannot delete a workspace if they do not have the necessary permissions", "input": {"userId": "user_12345", "workspaceName": "Project Alpha"}, "expected": {"outcome": "Workspace deletion failed", "status": "Unauthorized User"}}], "bert_score": {"Precision": 0.92672199010849, "Recall": 0.9476032257080078, "F1": 0.9370462894439697}}
{"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}], "GPT4o_testcases": [{"name": "Successful Workspace Leave", "description": "Verify that a user can successfully leave a workspace they are a member of.", "input": {"userId": "user_67890", "workspaceId": "workspace_12345"}, "expected": {"outcome": "User successfully left the workspace", "status": "Workspace Left"}}, {"name": "Failed Workspace Leave - Not a Member", "description": "Verify that a user cannot leave a workspace they are not a member of.", "input": {"userId": "user_67890", "workspaceId": "workspace_54321"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Not a Member"}}, {"name": "Failed Workspace Leave - Not Logged In", "description": "Verify that a user cannot leave a workspace if they are not logged in.", "input": {"userId": null, "workspaceId": "workspace_12345"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Not Logged In"}}, {"name": "Edge Case - Leave Workspace with Invalid ID", "description": "Verify that a user cannot leave a workspace with an invalid workspace ID.", "input": {"userId": "user_67890", "workspaceId": "invalid_workspace_id"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Invalid Workspace ID"}}], "bert_score": {"Precision": 0.94256591796875, "Recall": 0.951440691947937, "F1": 0.9469825029373169}}
{"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}], "GPT4o_testcases": [{"name": "Successful Email Addition", "description": "Verify that a user can successfully add another email account to their Notion account", "input": {"primaryUserId": "user_67890", "newEmail": "newemail@example.com"}, "expected": {"outcome": "Email addition successful", "status": "Email Added"}}, {"name": "Failed Email Addition Due to Invalid Email", "description": "Verify that a user cannot add an invalid email account to their Notion account", "input": {"primaryUserId": "user_67890", "newEmail": "invalid-email"}, "expected": {"outcome": "Email addition failed", "status": "Invalid Email Format"}}, {"name": "Failed Email Addition Due to Unverified Email", "description": "Verify that a user cannot add an email account if the email is not verified", "input": {"primaryUserId": "user_67890", "newEmail": "unverified@example.com"}, "expected": {"outcome": "Email addition failed", "status": "Email Not Verified"}}, {"name": "Failed Email Addition Due to Duplicate Email", "description": "Verify that a user cannot add an email account that is already associated with their Notion account", "input": {"primaryUserId": "user_67890", "newEmail": "existingemail@example.com"}, "expected": {"outcome": "Email addition failed", "status": "Email Already Exists"}}, {"name": "Successful Email Addition with Edge Case Email", "description": "Verify that a user can successfully add an email account with edge case characters", "input": {"primaryUserId": "user_67890", "newEmail": "edge.case+test@example.com"}, "expected": {"outcome": "Email addition successful", "status": "Email Added"}}], "bert_score": {"Precision": 0.9476689696311951, "Recall": 0.9453943371772766, "F1": 0.946530282497406}}
{"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Import from File", "description": "Verify that a user can successfully import workspace data from a file", "input": {"userId": "user_67890", "filePath": "/path/to/workspace_file.zip"}, "expected": {"outcome": "Workspace import successful", "status": "Data Imported"}}, {"name": "Successful Workspace Import from Cloud", "description": "Verify that a user can successfully import workspace data from cloud storage", "input": {"userId": "user_67890", "cloudStorage": "Google Drive", "fileId": "file_12345"}, "expected": {"outcome": "Workspace import successful", "status": "Data Imported"}}, {"name": "Failed Workspace Import Due to Invalid File", "description": "Verify that a user cannot import workspace data from an invalid file", "input": {"userId": "user_67890", "filePath": "/path/to/invalid_file.txt"}, "expected": {"outcome": "Workspace import failed", "status": "Invalid File Format"}}, {"name": "Failed Workspace Import Due to Missing File", "description": "Verify that a user cannot import workspace data if the file is missing", "input": {"userId": "user_67890", "filePath": null}, "expected": {"outcome": "Workspace import failed", "status": "File Not Found"}}, {"name": "Failed Workspace Import Due to Unauthorized Cloud Access", "description": "Verify that a user cannot import workspace data from cloud storage without proper authorization", "input": {"userId": "user_67890", "cloudStorage": "Dropbox", "fileId": "file_67890"}, "expected": {"outcome": "Workspace import failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9360178709030151, "Recall": 0.9503915309906006, "F1": 0.9431499242782593}}
{"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}], "GPT4o_testcases": [{"name": "Successful Member Addition", "description": "Verify that a user can successfully add a member to the workspace using a valid email", "input": {"userId": "user_67890", "memberEmail": "newmember@example.com"}, "expected": {"outcome": "Member added successfully", "status": "Member Added"}}, {"name": "Failed Member Addition with Invalid Email", "description": "Verify that a user cannot add a member with an invalid email format", "input": {"userId": "user_67890", "memberEmail": "invalid-email"}, "expected": {"outcome": "Member addition failed", "status": "Invalid Email Format"}}, {"name": "Failed Member Addition with Empty Email", "description": "Verify that a user cannot add a member if the email field is empty", "input": {"userId": "user_67890", "memberEmail": ""}, "expected": {"outcome": "Member addition failed", "status": "Email Required"}}, {"name": "Successful Invitation Email Sent", "description": "Verify that a user can send an invitation email to a member", "input": {"userId": "user_67890", "memberEmail": "invitee@example.com"}, "expected": {"outcome": "Invitation email sent successfully", "status": "Invitation Sent"}}, {"name": "Failed Member Addition with Existing Member", "description": "Verify that a user cannot add a member who is already in the workspace", "input": {"userId": "user_67890", "memberEmail": "existingmember@example.com"}, "expected": {"outcome": "Member addition failed", "status": "Member Already Exists"}}], "bert_score": {"Precision": 0.9415405988693237, "Recall": 0.9455713629722595, "F1": 0.9435517191886902}}
{"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}], "GPT4o_testcases": [{"name": "Successful Email Domain Update", "description": "Verify that a workspace owner can successfully update allowed email domains", "input": {"userId": "owner_67890", "allowedDomains": ["company.com", "ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Email domains update successful", "status": "Domains Updated"}}, {"name": "Failed Email Domain Update with Empty Domain", "description": "Verify that a workspace owner cannot update allowed email domains if any domain is empty", "input": {"userId": "owner_67890", "allowedDomains": ["company.com", ""]}, "expected": {"outcome": "Email domains update failed", "status": "Invalid Domain"}}, {"name": "Failed Email Domain Update with Invalid Domain Format", "description": "Verify that a workspace owner cannot update allowed email domains with an invalid domain format", "input": {"userId": "owner_67890", "allowedDomains": ["company.com", "invalid_domain"]}, "expected": {"outcome": "Email domains update failed", "status": "Invalid Domain Format"}}, {"name": "Successful Email Domain Update with Single Domain", "description": "Verify that a workspace owner can update allowed email domains with a single valid domain", "input": {"userId": "owner_67890", "allowedDomains": ["company.com"]}, "expected": {"outcome": "Email domains update successful", "status": "Domains Updated"}}, {"name": "Failed Email Domain Update with Duplicate Domains", "description": "Verify that a workspace owner cannot update allowed email domains with duplicate entries", "input": {"userId": "owner_67890", "allowedDomains": ["company.com", "company.com"]}, "expected": {"outcome": "Email domains update failed", "status": "Duplicate Domains"}}], "bert_score": {"Precision": 0.9303022623062134, "Recall": 0.9351295828819275, "F1": 0.9327096939086914}}
{"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Content Export", "description": "Verify that a user can successfully export all workspace content with valid permissions and plan.", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "plan": "Business", "exportFormat": "PDF", "contentInclusion": "All"}, "expected": {"outcome": "Workspace content export successful", "status": "Content Exported"}}, {"name": "Failed Workspace Content Export Due to Insufficient Permissions", "description": "Verify that a user cannot export workspace content without owner permissions.", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "plan": "Business", "exportFormat": "PDF", "contentInclusion": "All"}, "expected": {"outcome": "Workspace content export failed", "status": "Insufficient Permissions"}}, {"name": "Failed Workspace Content Export Due to Invalid Plan", "description": "Verify that a user cannot export workspace content in PDF format without a Business or Enterprise plan.", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "plan": "Personal", "exportFormat": "PDF", "contentInclusion": "All"}, "expected": {"outcome": "Workspace content export failed", "status": "Invalid Plan"}}, {"name": "Successful Workspace Content Export with Markdown Format", "description": "Verify that a user can export workspace content in Markdown format with valid permissions and plan.", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "plan": "Business", "exportFormat": "Markdown", "contentInclusion": "All"}, "expected": {"outcome": "Workspace content export successful", "status": "Content Exported"}}, {"name": "Failed Workspace Content Export Due to Unsupported Format", "description": "Verify that a user cannot export workspace content in an unsupported format.", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "plan": "Business", "exportFormat": "TXT", "contentInclusion": "All"}, "expected": {"outcome": "Workspace content export failed", "status": "Unsupported Format"}}], "bert_score": {"Precision": 0.9331613779067993, "Recall": 0.9353780746459961, "F1": 0.9342684149742126}}
{"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Rich Text Formatting", "description": "Verify that a user can successfully apply rich text formatting options to a text block", "input": {"textBlockId": "block_67890", "formattingOptions": ["bold", "italic", "underline"], "link": "https://example.com"}, "expected": {"outcome": "Rich text formatting applied successfully", "status": "Formatting Applied"}}, {"name": "Failed Rich Text Formatting Due to Invalid Link", "description": "Verify that a user cannot apply a link if the URL is invalid", "input": {"textBlockId": "block_67890", "formattingOptions": ["bold", "italic"], "link": "invalid_url"}, "expected": {"outcome": "Rich text formatting failed", "status": "Invalid Link"}}, {"name": "Failed Rich Text Formatting Due to Empty Text Block", "description": "Verify that a user cannot apply formatting to an empty text block", "input": {"textBlockId": "block_67891", "formattingOptions": ["bold", "italic"], "link": "https://example.com"}, "expected": {"outcome": "Rich text formatting failed", "status": "Empty Text Block"}}, {"name": "Successful Link Addition Without Other Formatting", "description": "Verify that a user can successfully add a link to a text block without other formatting options", "input": {"textBlockId": "block_67892", "formattingOptions": [], "link": "https://example.com"}, "expected": {"outcome": "Link added successfully", "status": "Link Added"}}, {"name": "Failed Rich Text Formatting Due to Nonexistent Text Block", "description": "Verify that a user cannot apply formatting to a nonexistent text block", "input": {"textBlockId": "block_00000", "formattingOptions": ["bold", "italic"], "link": "https://example.com"}, "expected": {"outcome": "Rich text formatting failed", "status": "Text Block Not Found"}}], "bert_score": {"Precision": 0.9280910491943359, "Recall": 0.9262075424194336, "F1": 0.9271483421325684}}
{"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Content Organization into Columns", "description": "Verify that a user can successfully organize content into multiple columns on a Notion page.", "input": {"pageId": "page_67890", "blocks": [{"blockId": "block_1", "content": "Task 1"}, {"blockId": "block_2", "content": "Task 2"}], "columns": 2}, "expected": {"outcome": "Content organized into columns successfully", "status": "Columns Created"}}, {"name": "Failed Content Organization with Invalid Block", "description": "Verify that content organization fails if a block is invalid or missing.", "input": {"pageId": "page_67890", "blocks": [{"blockId": "block_1", "content": "Task 1"}, {"blockId": null, "content": "Task 2"}], "columns": 2}, "expected": {"outcome": "Content organization failed", "status": "Invalid Block"}}, {"name": "Edge Case: Organize Content with Maximum Columns", "description": "Verify that a user can organize content into the maximum allowed number of columns.", "input": {"pageId": "page_67890", "blocks": [{"blockId": "block_1", "content": "Task 1"}, {"blockId": "block_2", "content": "Task 2"}, {"blockId": "block_3", "content": "Task 3"}], "columns": 3}, "expected": {"outcome": "Content organized into maximum columns successfully", "status": "Max Columns Created"}}, {"name": "Negative Case: Organize Content with Zero Columns", "description": "Verify that content organization fails if the number of columns is set to zero.", "input": {"pageId": "page_67890", "blocks": [{"blockId": "block_1", "content": "Task 1"}, {"blockId": "block_2", "content": "Task 2"}], "columns": 0}, "expected": {"outcome": "Content organization failed", "status": "Invalid Column Number"}}], "bert_score": {"Precision": 0.9153153300285339, "Recall": 0.9253188967704773, "F1": 0.920289933681488}}
{"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Heading Addition", "description": "Verify that a user can successfully add H1, H2, and H3 headings to structure content on a Notion page.", "input": {"pageId": "page_67890", "headings": [{"type": "H1", "content": "Introduction"}, {"type": "H2", "content": "Main Content"}, {"type": "H3", "content": "Details"}]}, "expected": {"outcome": "Headings added successfully", "status": "Content Structured"}}, {"name": "Failed Heading Addition Due to Empty Content", "description": "Verify that a user cannot add a heading if the content is empty.", "input": {"pageId": "page_67890", "headings": [{"type": "H1", "content": ""}]}, "expected": {"outcome": "Heading addition failed", "status": "Empty Content"}}, {"name": "Failed Heading Addition Due to Invalid Heading Type", "description": "Verify that a user cannot add a heading with an invalid heading type.", "input": {"pageId": "page_67890", "headings": [{"type": "H4", "content": "Invalid Heading"}]}, "expected": {"outcome": "Heading addition failed", "status": "Invalid Heading Type"}}, {"name": "Successful Multiple Headings Addition", "description": "Verify that a user can add multiple headings of the same type to structure content.", "input": {"pageId": "page_67890", "headings": [{"type": "H2", "content": "Section 1"}, {"type": "H2", "content": "Section 2"}]}, "expected": {"outcome": "Multiple headings added successfully", "status": "Content Structured"}}, {"name": "Failed Heading Addition Due to Missing Page", "description": "Verify that a user cannot add headings if the page does not exist.", "input": {"pageId": "page_00000", "headings": [{"type": "H1", "content": "Introduction"}]}, "expected": {"outcome": "Heading addition failed", "status": "Page Not Found"}}], "bert_score": {"Precision": 0.9165100455284119, "Recall": 0.9186571836471558, "F1": 0.9175823926925659}}
{"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Successful Icon and Cover Art Update", "description": "Verify that a user can successfully add or change the page icon and cover image", "input": {"pageId": "page_67890", "icon": "icon_url_1", "coverImage": "cover_image_url_1"}, "expected": {"outcome": "Icon and cover image update successful", "status": "Updated"}}, {"name": "Failed Icon Update with Invalid URL", "description": "Verify that a user cannot update the page icon with an invalid URL", "input": {"pageId": "page_67890", "icon": "invalid_url", "coverImage": "cover_image_url_1"}, "expected": {"outcome": "Icon update failed", "status": "Invalid Icon URL"}}, {"name": "Failed Cover Image Update with Empty URL", "description": "Verify that a user cannot update the cover image with an empty URL", "input": {"pageId": "page_67890", "icon": "icon_url_1", "coverImage": ""}, "expected": {"outcome": "Cover image update failed", "status": "Empty Cover Image URL"}}, {"name": "Edge Case: Large Icon and Cover Image Files", "description": "Verify that a user can update the page icon and cover image with large file sizes", "input": {"pageId": "page_67890", "icon": "large_icon_url", "coverImage": "large_cover_image_url"}, "expected": {"outcome": "Icon and cover image update successful", "status": "Updated"}}, {"name": "Negative Case: Unauthorized User Attempt", "description": "Verify that an unauthorized user cannot update the page icon and cover image", "input": {"pageId": "page_67890", "icon": "icon_url_1", "coverImage": "cover_image_url_1", "userRole": "guest"}, "expected": {"outcome": "Icon and cover image update failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9215912818908691, "Recall": 0.9359591007232666, "F1": 0.9287196397781372}}
{"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Image Upload and Management", "description": "Verify that a user can successfully upload, arrange, and resize an image on a Notion page.", "input": {"userId": "user_67890", "imageFile": "image1.jpg", "arrangement": "center", "resize": "50%", "caption": "Sample Image", "altText": "A sample image for testing"}, "expected": {"outcome": "Image upload and management successful", "status": "Image Updated"}}, {"name": "Failed Image Upload Due to Unsupported Format", "description": "Verify that a user cannot upload an image with an unsupported format.", "input": {"userId": "user_67890", "imageFile": "image1.txt", "arrangement": "center", "resize": "50%", "caption": "Sample Image", "altText": "A sample image for testing"}, "expected": {"outcome": "Image upload failed", "status": "Unsupported Format"}}, {"name": "Failed Image Management Due to Missing Alt Text", "description": "Verify that a user cannot save image changes without providing alt text.", "input": {"userId": "user_67890", "imageFile": "image1.jpg", "arrangement": "center", "resize": "50%", "caption": "Sample Image", "altText": null}, "expected": {"outcome": "Image management failed", "status": "Missing Alt Text"}}, {"name": "Edge Case: Large Image Upload", "description": "Verify that a user can upload a large image file and manage it successfully.", "input": {"userId": "user_67890", "imageFile": "large_image.jpg", "arrangement": "left", "resize": "25%", "caption": "Large Image", "altText": "A large image for testing"}, "expected": {"outcome": "Large image upload and management successful", "status": "Image Updated"}}, {"name": "Edge Case: Multiple Image Uploads", "description": "Verify that a user can upload multiple images and manage them on a Notion page.", "input": {"userId": "user_67890", "imageFiles": ["image1.jpg", "image2.jpg", "image3.jpg"], "arrangements": ["left", "center", "right"], "resizes": ["30%", "40%", "50%"], "captions": ["Image 1", "Image 2", "Image 3"], "altTexts": ["Alt text 1", "Alt text 2", "Alt text 3"]}, "expected": {"outcome": "Multiple image uploads and management successful", "status": "Images Updated"}}], "bert_score": {"Precision": 0.9260414838790894, "Recall": 0.9327430725097656, "F1": 0.9293802380561829}}
{"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Successful File Upload and Embed", "description": "Verify that a user can successfully upload and embed files into a Notion page", "input": {"userId": "user_67890", "fileUpload": "document.pdf", "embedLink": "https://example.com/file"}, "expected": {"outcome": "File upload and embed successful", "status": "Files Added"}}, {"name": "Failed File Upload Due to Unsupported Format", "description": "Verify that a user cannot upload a file with an unsupported format", "input": {"userId": "user_67890", "fileUpload": "document.exe", "embedLink": "https://example.com/file"}, "expected": {"outcome": "File upload failed", "status": "Unsupported File Format"}}, {"name": "Failed Embed Due to Invalid Link", "description": "Verify that a user cannot embed a file with an invalid link", "input": {"userId": "user_67890", "fileUpload": "document.pdf", "embedLink": "invalid_link"}, "expected": {"outcome": "File embed failed", "status": "Invalid Link"}}, {"name": "Successful File Arrangement", "description": "Verify that a user can successfully arrange file blocks on a Notion page", "input": {"userId": "user_67890", "fileUpload": "document.pdf", "embedLink": "https://example.com/file", "arrangeAction": "move"}, "expected": {"outcome": "File arrangement successful", "status": "Files Arranged"}}, {"name": "Failed File Arrangement Due to Missing File", "description": "Verify that a user cannot arrange file blocks if the file is missing", "input": {"userId": "user_67890", "fileUpload": null, "embedLink": "https://example.com/file", "arrangeAction": "move"}, "expected": {"outcome": "File arrangement failed", "status": "File Missing"}}], "bert_score": {"Precision": 0.9386080503463745, "Recall": 0.9471279382705688, "F1": 0.9428487420082092}}
{"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Media Embed", "description": "Verify that a user can successfully embed a video and upload an audio file", "input": {"videoUrl": "https://streaming.service/video123", "audioFile": "audio.mp3"}, "expected": {"outcome": "Media embedded successfully", "status": "Media Added"}}, {"name": "Failed Video Embed", "description": "Verify that a user cannot embed a video with an invalid URL", "input": {"videoUrl": "invalid_url", "audioFile": "audio.mp3"}, "expected": {"outcome": "Video embed failed", "status": "Invalid URL"}}, {"name": "Failed Audio Upload", "description": "Verify that a user cannot upload an unsupported audio file format", "input": {"videoUrl": "https://streaming.service/video123", "audioFile": "audio.txt"}, "expected": {"outcome": "Audio upload failed", "status": "Unsupported Format"}}, {"name": "Successful Media Resize and Align", "description": "Verify that a user can resize and align media blocks", "input": {"videoUrl": "https://streaming.service/video123", "audioFile": "audio.mp3", "resize": "50%", "align": "center"}, "expected": {"outcome": "Media resized and aligned successfully", "status": "Media Adjusted"}}, {"name": "Failed Media Resize", "description": "Verify that a user cannot resize media blocks to an invalid size", "input": {"videoUrl": "https://streaming.service/video123", "audioFile": "audio.mp3", "resize": "150%", "align": "center"}, "expected": {"outcome": "Media resize failed", "status": "Invalid Size"}}], "bert_score": {"Precision": 0.9484320282936096, "Recall": 0.9464386105537415, "F1": 0.9474343061447144}}
{"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Page Link", "description": "Verify that a user can successfully link one Notion page to another using '@'.", "input": {"userId": "user_67890", "trigger": "@", "pageName": "Project Plan"}, "expected": {"outcome": "Page link successful", "status": "Link Added"}}, {"name": "Failed Page Link with Non-existent Page", "description": "Verify that a user cannot link to a non-existent Notion page.", "input": {"userId": "user_67890", "trigger": "[[", "pageName": "NonExistentPage"}, "expected": {"outcome": "Page link failed", "status": "Page Not Found"}}, {"name": "Successful Page Link with '+'", "description": "Verify that a user can successfully link one Notion page to another using '+'.", "input": {"userId": "user_67890", "trigger": "+", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link successful", "status": "Link Added"}}, {"name": "Failed Page Link with Empty Page Name", "description": "Verify that a user cannot link a page if the page name is empty.", "input": {"userId": "user_67890", "trigger": "@", "pageName": ""}, "expected": {"outcome": "Page link failed", "status": "Invalid Page Name"}}, {"name": "Successful Page Link with Special Characters in Page Name", "description": "Verify that a user can link a page with special characters in the page name.", "input": {"userId": "user_67890", "trigger": "[[", "pageName": "Design & Development"}, "expected": {"outcome": "Page link successful", "status": "Link Added"}}], "bert_score": {"Precision": 0.9319730997085571, "Recall": 0.9327948689460754, "F1": 0.9323837757110596}}
{"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}], "GPT4o_testcases": [{"name": "Successful URL Mention Formatting", "description": "Verify that a user can successfully format a pasted URL as a mention in Notion.", "input": {"userId": "user_67890", "url": "https://www.example.com"}, "expected": {"outcome": "URL formatted as mention successfully", "status": "Mention Created"}}, {"name": "Failed URL Mention Formatting with Invalid URL", "description": "Verify that a user cannot format an invalid URL as a mention in Notion.", "input": {"userId": "user_67890", "url": "invalid_url"}, "expected": {"outcome": "URL mention formatting failed", "status": "Invalid URL"}}, {"name": "Failed URL Mention Formatting with Empty URL", "description": "Verify that a user cannot format an empty URL as a mention in Notion.", "input": {"userId": "user_67890", "url": ""}, "expected": {"outcome": "URL mention formatting failed", "status": "Empty URL"}}, {"name": "Successful URL Mention Formatting with Long URL", "description": "Verify that a user can format a very long URL as a mention in Notion.", "input": {"userId": "user_67890", "url": "https://www.example.com/very/long/url/that/keeps/going/on/and/on/and/on"}, "expected": {"outcome": "URL formatted as mention successfully", "status": "Mention Created"}}, {"name": "Failed URL Mention Formatting with Unsupported Protocol", "description": "Verify that a user cannot format a URL with an unsupported protocol as a mention in Notion.", "input": {"userId": "user_67890", "url": "ftp://www.example.com"}, "expected": {"outcome": "URL mention formatting failed", "status": "Unsupported Protocol"}}], "bert_score": {"Precision": 0.9251874089241028, "Recall": 0.9391884803771973, "F1": 0.9321354031562805}}
{"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Content Transfer", "description": "Verify that a user can successfully transfer content ownership to another account", "input": {"currentOwnerId": "user_12345", "newOwnerId": "user_67890", "contentId": "page_001"}, "expected": {"outcome": "Content transfer successful", "status": "Ownership Transferred"}}, {"name": "Failed Content Transfer Due to Nonexistent New Account", "description": "Verify that content transfer fails if the new account does not exist", "input": {"currentOwnerId": "user_12345", "newOwnerId": "user_00000", "contentId": "page_001"}, "expected": {"outcome": "Content transfer failed", "status": "New Account Not Found"}}, {"name": "Failed Content Transfer Due to Missing Permissions", "description": "Verify that content transfer fails if the current owner does not grant ownership permissions", "input": {"currentOwnerId": "user_12345", "newOwnerId": "user_67890", "contentId": "page_001"}, "expected": {"outcome": "Content transfer failed", "status": "Permissions Not Granted"}}, {"name": "Edge Case: Transfer Content with Invalid Content ID", "description": "Verify that content transfer fails if the content ID is invalid", "input": {"currentOwnerId": "user_12345", "newOwnerId": "user_67890", "contentId": "invalid_page"}, "expected": {"outcome": "Content transfer failed", "status": "Invalid Content ID"}}, {"name": "Edge Case: Transfer Content to Same Account", "description": "Verify that content transfer fails if the new account is the same as the current owner", "input": {"currentOwnerId": "user_12345", "newOwnerId": "user_12345", "contentId": "page_001"}, "expected": {"outcome": "Content transfer failed", "status": "Same Account Transfer"}}], "bert_score": {"Precision": 0.9243372678756714, "Recall": 0.9332467913627625, "F1": 0.9287706613540649}}
{"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}], "GPT4o_testcases": [{"name": "Successful Content Duplication", "description": "Verify that a user can successfully duplicate a block of content on a Notion page.", "input": {"pageId": "page_67890", "blockId": "block_12345", "action": "Duplicate"}, "expected": {"outcome": "Content duplication successful", "status": "Content Duplicated"}}, {"name": "Successful Content Deletion", "description": "Verify that a user can successfully delete a block of content on a Notion page.", "input": {"pageId": "page_67890", "blockId": "block_12345", "action": "Delete"}, "expected": {"outcome": "Content deletion successful", "status": "Content Deleted"}}, {"name": "Failed Content Duplication - Nonexistent Block", "description": "Verify that a user cannot duplicate a block of content that does not exist on a Notion page.", "input": {"pageId": "page_67890", "blockId": "block_99999", "action": "Duplicate"}, "expected": {"outcome": "Content duplication failed", "status": "Block Not Found"}}, {"name": "Failed Content Deletion - Nonexistent Block", "description": "Verify that a user cannot delete a block of content that does not exist on a Notion page.", "input": {"pageId": "page_67890", "blockId": "block_99999", "action": "Delete"}, "expected": {"outcome": "Content deletion failed", "status": "Block Not Found"}}, {"name": "Failed Content Duplication - Invalid Action", "description": "Verify that a user cannot perform an invalid action on a block of content.", "input": {"pageId": "page_67890", "blockId": "block_12345", "action": "Move"}, "expected": {"outcome": "Action failed", "status": "Invalid Action"}}, {"name": "Failed Content Deletion - Unauthorized User", "description": "Verify that a user without proper permissions cannot delete a block of content.", "input": {"pageId": "page_67890", "blockId": "block_12345", "action": "Delete", "userRole": "Viewer"}, "expected": {"outcome": "Content deletion failed", "status": "Unauthorized Action"}}], "bert_score": {"Precision": 0.9128068089485168, "Recall": 0.9329665303230286, "F1": 0.9227765798568726}}
{"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Content Restoration", "description": "Verify that a user can successfully restore content from the trash within the 30-day window.", "input": {"userId": "user_67890", "contentId": "content_12345", "daysInTrash": 15}, "expected": {"outcome": "Content restoration successful", "status": "Content Restored"}}, {"name": "Failed Content Restoration - Outside Window", "description": "Verify that a user cannot restore content from the trash if it is outside the 30-day window.", "input": {"userId": "user_67890", "contentId": "content_12345", "daysInTrash": 31}, "expected": {"outcome": "Content restoration failed", "status": "Restoration Window Expired"}}, {"name": "Failed Content Restoration - Nonexistent Content", "description": "Verify that a user cannot restore content that does not exist in the trash.", "input": {"userId": "user_67890", "contentId": "content_99999", "daysInTrash": 10}, "expected": {"outcome": "Content restoration failed", "status": "Content Not Found"}}, {"name": "Failed Content Restoration - Invalid User", "description": "Verify that an invalid user cannot restore content from the trash.", "input": {"userId": "invalid_user", "contentId": "content_12345", "daysInTrash": 10}, "expected": {"outcome": "Content restoration failed", "status": "Invalid User"}}], "bert_score": {"Precision": 0.9107868671417236, "Recall": 0.9245350956916809, "F1": 0.9176095128059387}}
{"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful Content Sync Across Pages", "description": "Verify that a user can successfully sync content across multiple Notion pages.", "input": {"userId": "user_67890", "sourcePageId": "page_001", "destinationPageId": "page_002", "content": "Meeting Notes"}, "expected": {"outcome": "Content sync successful", "status": "Content Synced"}}, {"name": "Failed Content Sync Due to Missing Permissions", "description": "Verify that a user cannot sync content if they lack edit permissions on the destination page.", "input": {"userId": "user_67890", "sourcePageId": "page_001", "destinationPageId": "page_003", "content": "Project Plan"}, "expected": {"outcome": "Content sync failed", "status": "Permission Denied"}}, {"name": "Failed Content Sync Due to Non-Existent Source Page", "description": "Verify that a user cannot sync content from a non-existent source page.", "input": {"userId": "user_67890", "sourcePageId": "page_999", "destinationPageId": "page_002", "content": "Weekly Report"}, "expected": {"outcome": "Content sync failed", "status": "Source Page Not Found"}}, {"name": "Failed Content Sync Due to Non-Existent Destination Page", "description": "Verify that a user cannot sync content to a non-existent destination page.", "input": {"userId": "user_67890", "sourcePageId": "page_001", "destinationPageId": "page_999", "content": "Budget Overview"}, "expected": {"outcome": "Content sync failed", "status": "Destination Page Not Found"}}, {"name": "Failed Content Sync Due to Empty Content", "description": "Verify that a user cannot sync empty content across pages.", "input": {"userId": "user_67890", "sourcePageId": "page_001", "destinationPageId": "page_002", "content": ""}, "expected": {"outcome": "Content sync failed", "status": "No Content to Sync"}}], "bert_score": {"Precision": 0.9288578033447266, "Recall": 0.9467569589614868, "F1": 0.9377219676971436}}
{"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful Unsync of Content", "description": "Verify that a user can successfully unsync a synced block across pages.", "input": {"userId": "user_67890", "syncedBlockId": "block_12345"}, "expected": {"outcome": "Content unsynced successfully", "status": "Unsynced"}}, {"name": "Failed Unsync Due to Non-existent Block", "description": "Verify that a user cannot unsync a block that does not exist.", "input": {"userId": "user_67890", "syncedBlockId": "block_00000"}, "expected": {"outcome": "Content unsync failed", "status": "Block Not Found"}}, {"name": "Failed Unsync Due to Lack of Permissions", "description": "Verify that a user cannot unsync a block if they lack the necessary permissions.", "input": {"userId": "user_67890", "syncedBlockId": "block_12345"}, "expected": {"outcome": "Content unsync failed", "status": "Permission Denied"}}, {"name": "Edge Case: Unsync with Multiple Synced Blocks", "description": "Verify that a user can unsync one block when multiple synced blocks are present.", "input": {"userId": "user_67890", "syncedBlockId": "block_12345", "additionalSyncedBlockIds": ["block_67890", "block_54321"]}, "expected": {"outcome": "Content unsynced successfully", "status": "Unsynced"}}], "bert_score": {"Precision": 0.9224417209625244, "Recall": 0.9404306411743164, "F1": 0.9313492774963379}}
{"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}], "GPT4o_testcases": [{"name": "Successful Code Block Creation and Edit", "description": "Verify that a user can successfully create and edit a code block with valid inputs", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "pageId": "page_456", "code": "print('Hello, World!')", "language": "Python"}, "expected": {"outcome": "Code block created and edited successfully", "status": "Code Block Updated"}}, {"name": "Failed Code Block Creation with Empty Code", "description": "Verify that a user cannot create a code block with empty code input", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "pageId": "page_456", "code": "", "language": "Python"}, "expected": {"outcome": "Code block creation failed", "status": "Invalid Code Input"}}, {"name": "Failed Code Block Edit with Unsupported Language", "description": "Verify that a user cannot edit a code block with an unsupported language", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "pageId": "page_456", "code": "SELECT * FROM users;", "language": "UnsupportedLang"}, "expected": {"outcome": "Code block edit failed", "status": "Unsupported Language"}}, {"name": "Successful Code Block Creation with Edge Case Code", "description": "Verify that a user can create a code block with edge case code input", "input": {"userId": "user_67890", "workspaceId": "workspace_123", "pageId": "page_456", "code": "a = 0\nwhile a < 10:\n    a += 1\n    if a == 5:\n        break", "language": "Python"}, "expected": {"outcome": "Code block created successfully", "status": "Code Block Created"}}, {"name": "Failed Code Block Creation with Invalid User", "description": "Verify that a user cannot create a code block if the user is invalid", "input": {"userId": "invalid_user", "workspaceId": "workspace_123", "pageId": "page_456", "code": "console.log('Hello, World!');", "language": "JavaScript"}, "expected": {"outcome": "Code block creation failed", "status": "Invalid User"}}], "bert_score": {"Precision": 0.9280491471290588, "Recall": 0.9341067671775818, "F1": 0.9310681223869324}}
{"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Math Equation Creation", "description": "Verify that a user can successfully create and display a math equation using LaTeX syntax.", "input": {"userId": "user_67890", "equation": "$$E=mc^2$$"}, "expected": {"outcome": "Equation displayed successfully", "status": "Equation Displayed"}}, {"name": "Failed Math Equation Creation Due to Syntax Error", "description": "Verify that a user cannot create a math equation if the LaTeX syntax is incorrect.", "input": {"userId": "user_67890", "equation": "$$E=mc^2"}, "expected": {"outcome": "Equation display failed", "status": "Syntax Error"}}, {"name": "Empty Equation Input", "description": "Verify that a user cannot create a math equation if the input is empty.", "input": {"userId": "user_67890", "equation": ""}, "expected": {"outcome": "Equation display failed", "status": "Empty Input"}}, {"name": "Complex Math Equation Creation", "description": "Verify that a user can successfully create and display a complex math equation using LaTeX syntax.", "input": {"userId": "user_67890", "equation": "$$\\int_{a}^{b} x^2 \\,dx$$"}, "expected": {"outcome": "Equation displayed successfully", "status": "Equation Displayed"}}, {"name": "Math Equation with Unsupported Characters", "description": "Verify that a user cannot create a math equation if it contains unsupported characters.", "input": {"userId": "user_67890", "equation": "$$E=mc^2@$$"}, "expected": {"outcome": "Equation display failed", "status": "Unsupported Characters"}}], "bert_score": {"Precision": 0.9353395104408264, "Recall": 0.9411088228225708, "F1": 0.9382153153419495}}
{"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}], "GPT4o_testcases": [{"name": "Successful Database Creation", "description": "Verify that a user can successfully create a new database in Notion.", "input": {"userId": "user_67890", "databaseType": "Table", "databaseName": "Project Tracker", "properties": {"Status": "Select", "Due Date": "Date"}}, "expected": {"outcome": "Database creation successful", "status": "Database Created"}}, {"name": "Failed Database Creation Due to Missing Name", "description": "Verify that a user cannot create a database without providing a name.", "input": {"userId": "user_67890", "databaseType": "Table", "databaseName": null, "properties": {"Status": "Select", "Due Date": "Date"}}, "expected": {"outcome": "Database creation failed", "status": "Missing Database Name"}}, {"name": "Failed Database Creation Due to Insufficient Permissions", "description": "Verify that a user cannot create a database if they lack the necessary permissions.", "input": {"userId": "user_67890", "databaseType": "Board", "databaseName": "Team Tasks", "properties": {"Priority": "Select", "Assigned To": "Person"}}, "expected": {"outcome": "Database creation failed", "status": "Insufficient Permissions"}}, {"name": "Successful Database Creation with Minimal Properties", "description": "Verify that a user can create a database with minimal properties configured.", "input": {"userId": "user_67890", "databaseType": "List", "databaseName": "Reading List", "properties": {}}, "expected": {"outcome": "Database creation successful", "status": "Database Created"}}, {"name": "Failed Database Creation with Invalid Property Type", "description": "Verify that a user cannot create a database with an invalid property type.", "input": {"userId": "user_67890", "databaseType": "Table", "databaseName": "Inventory", "properties": {"Quantity": "InvalidType"}}, "expected": {"outcome": "Database creation failed", "status": "Invalid Property Type"}}], "bert_score": {"Precision": 0.9362022876739502, "Recall": 0.9358150959014893, "F1": 0.936008632183075}}
{"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}], "GPT4o_testcases": [{"name": "Successful Database View Customization", "description": "Verify that a user can successfully customize and save a database view.", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Table", "filters": ["Status: Completed"], "sorts": ["Date: Ascending"], "grouping": "Category"}, "expected": {"outcome": "Database view customization successful", "status": "View Saved"}}, {"name": "Failed Database View Customization Due to Missing Permissions", "description": "Verify that a user cannot customize a database view without editing permissions.", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Board", "filters": ["Priority: High"], "sorts": ["Name: Descending"], "grouping": "Project"}, "expected": {"outcome": "Database view customization failed", "status": "Permission Denied"}}, {"name": "Invalid View Type for Database Customization", "description": "Verify that a user cannot select an invalid view type for database customization.", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "InvalidView", "filters": ["Status: In Progress"], "sorts": ["Priority: Low"], "grouping": "Department"}, "expected": {"outcome": "Database view customization failed", "status": "Invalid View Type"}}, {"name": "Successful Database View Customization with No Filters", "description": "Verify that a user can customize and save a database view without applying any filters.", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Calendar", "filters": [], "sorts": ["Date: Descending"], "grouping": "Event Type"}, "expected": {"outcome": "Database view customization successful", "status": "View Saved"}}, {"name": "Failed Database View Customization Due to Invalid Filter", "description": "Verify that a user cannot apply an invalid filter during database view customization.", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "List", "filters": ["InvalidFilter: Value"], "sorts": ["Name: Ascending"], "grouping": "Team"}, "expected": {"outcome": "Database view customization failed", "status": "Invalid Filter"}}], "bert_score": {"Precision": 0.9234479665756226, "Recall": 0.9224351048469543, "F1": 0.9229412078857422}}
{"usecase": {"name": "Managing Database Pages", "scenario": "User manages individual pages within a database, adding, opening, and editing them.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to add and edit database pages."], "steps": ["User navigates to the database and clicks on 'New' to add a new page.", "User enters the details for the new page and saves it.", "User opens an existing page to edit its content.", "User modifies properties or adds new content to the page."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New Database Page", "description": "Verify that the user can create a new page within the database.", "input": {"pageName": "New Task", "properties": {"Status": "To-Do", "Due Date": "2024-10-20"}}, "expected": {"outcome": "New page created successfully in the database.", "status": "Page Created"}}, {"name": "Editing Existing Page Content", "description": "Verify that the user can edit an existing page's content in the database.", "input": {"pageName": "Task 1", "newContent": "Updated task details."}, "expected": {"outcome": "Page content updated successfully.", "status": "Updated"}}, {"name": "Deleting a Database Page", "description": "Verify that the user can delete a page from the database.", "input": {"pageName": "Old Task"}, "expected": {"outcome": "Page deleted successfully from the database.", "status": "Deleted"}}], "GPT4o_testcases": [{"name": "Successful Page Addition", "description": "Verify that a user can successfully add a new page to the database", "input": {"userId": "user_67890", "pageTitle": "Project Plan", "pageContent": "Details of the project plan"}, "expected": {"outcome": "Page addition successful", "status": "Page Added"}}, {"name": "Failed Page Addition Due to Missing Title", "description": "Verify that a user cannot add a new page without a title", "input": {"userId": "user_67890", "pageTitle": null, "pageContent": "Details of the project plan"}, "expected": {"outcome": "Page addition failed", "status": "Missing Title"}}, {"name": "Successful Page Edit", "description": "Verify that a user can successfully edit an existing page", "input": {"userId": "user_67890", "pageId": "page_12345", "newContent": "Updated project plan details"}, "expected": {"outcome": "Page edit successful", "status": "Page Edited"}}, {"name": "Failed Page Edit Due to Invalid Page ID", "description": "Verify that a user cannot edit a page with an invalid page ID", "input": {"userId": "user_67890", "pageId": "invalid_page_id", "newContent": "Updated project plan details"}, "expected": {"outcome": "Page edit failed", "status": "Invalid Page ID"}}, {"name": "Successful Page Content Modification", "description": "Verify that a user can successfully modify the content of an existing page", "input": {"userId": "user_67890", "pageId": "page_12345", "modifiedContent": "Revised project plan details"}, "expected": {"outcome": "Content modification successful", "status": "Content Modified"}}, {"name": "Failed Page Content Modification Due to Lack of Permissions", "description": "Verify that a user cannot modify page content without proper permissions", "input": {"userId": "user_67890", "pageId": "page_12345", "modifiedContent": "Revised project plan details"}, "expected": {"outcome": "Content modification failed", "status": "Insufficient Permissions"}}], "bert_score": {"Precision": 0.9388571977615356, "Recall": 0.9425317049026489, "F1": 0.940690815448761}}
{"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}], "GPT4o_testcases": [{"name": "Successful Collaboration in Database", "description": "Verify that a user can successfully collaborate in a shared database with appropriate permissions.", "input": {"userId": "user_67890", "databaseId": "db_12345", "permissions": "Can edit content", "action": "add and edit pages"}, "expected": {"outcome": "Collaboration successful", "status": "Changes saved"}}, {"name": "Failed Collaboration Due to Insufficient Permissions", "description": "Verify that a user cannot collaborate in a shared database without appropriate permissions.", "input": {"userId": "user_67890", "databaseId": "db_12345", "permissions": "Can view content", "action": "add and edit pages"}, "expected": {"outcome": "Collaboration failed", "status": "Permission Denied"}}, {"name": "Edge Case: Collaboration with Empty Database", "description": "Verify that a user can collaborate in a shared database even if it is initially empty.", "input": {"userId": "user_67890", "databaseId": "db_67890", "permissions": "Can edit content", "action": "add pages"}, "expected": {"outcome": "Collaboration successful", "status": "Pages added"}}, {"name": "Invalid Database ID", "description": "Verify that a user cannot collaborate in a database with an invalid database ID.", "input": {"userId": "user_67890", "databaseId": "invalid_db", "permissions": "Can edit content", "action": "add and edit pages"}, "expected": {"outcome": "Collaboration failed", "status": "Invalid Database ID"}}], "bert_score": {"Precision": 0.9330126047134399, "Recall": 0.9363910555839539, "F1": 0.9346988201141357}}
{"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Database Lock", "description": "Verify that an admin can successfully lock the database to prevent structure changes.", "input": {"userId": "admin_12345", "action": "lock"}, "expected": {"outcome": "Database lock successful", "status": "Locked"}}, {"name": "Successful Database Unlock", "description": "Verify that an admin can successfully unlock the database to allow structure changes.", "input": {"userId": "admin_12345", "action": "unlock"}, "expected": {"outcome": "Database unlock successful", "status": "Unlocked"}}, {"name": "Failed Database Lock Due to Insufficient Permissions", "description": "Verify that a non-admin user cannot lock the database.", "input": {"userId": "user_67890", "action": "lock"}, "expected": {"outcome": "Database lock failed", "status": "Permission Denied"}}, {"name": "Failed Database Unlock Due to Insufficient Permissions", "description": "Verify that a non-admin user cannot unlock the database.", "input": {"userId": "user_67890", "action": "unlock"}, "expected": {"outcome": "Database unlock failed", "status": "Permission Denied"}}, {"name": "Failed Database Lock Due to Invalid Action", "description": "Verify that an invalid action does not lock the database.", "input": {"userId": "admin_12345", "action": "invalid_action"}, "expected": {"outcome": "Database lock failed", "status": "Invalid Action"}}, {"name": "Failed Database Unlock Due to Invalid Action", "description": "Verify that an invalid action does not unlock the database.", "input": {"userId": "admin_12345", "action": "invalid_action"}, "expected": {"outcome": "Database unlock failed", "status": "Invalid Action"}}], "bert_score": {"Precision": 0.9310903549194336, "Recall": 0.9304340481758118, "F1": 0.9307621121406555}}
{"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Attempt to Modify Locked Database Structure", "description": "Verify that a user cannot modify the structure of a locked database", "input": {"userId": "user_67890", "databaseId": "db_12345", "action": "modify_structure"}, "expected": {"outcome": "Modification denied", "status": "Database Locked"}}, {"name": "Attempt to Modify Content in Locked Database", "description": "Verify that a user can modify content in a locked database", "input": {"userId": "user_67890", "databaseId": "db_12345", "action": "modify_content"}, "expected": {"outcome": "Content modification successful", "status": "Content Updated"}}, {"name": "Attempt to Modify Without Permissions", "description": "Verify that a user without edit permissions cannot modify content in a locked database", "input": {"userId": "user_67891", "databaseId": "db_12345", "action": "modify_content"}, "expected": {"outcome": "Modification denied", "status": "Permission Denied"}}, {"name": "Attempt to Modify with Invalid Database ID", "description": "Verify that a user cannot modify a database with an invalid database ID", "input": {"userId": "user_67890", "databaseId": "invalid_db", "action": "modify_content"}, "expected": {"outcome": "Modification failed", "status": "Invalid Database ID"}}], "bert_score": {"Precision": 0.905361533164978, "Recall": 0.9222366213798523, "F1": 0.9137212038040161}}
{"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Property Addition", "description": "Verify that a user can successfully add a new property to the database", "input": {"userId": "user_67890", "propertyName": "Deadline", "propertyType": "Date"}, "expected": {"outcome": "Property addition successful", "status": "Property Added"}}, {"name": "Failed Property Addition Due to Missing Name", "description": "Verify that a user cannot add a new property without a name", "input": {"userId": "user_67890", "propertyName": null, "propertyType": "Date"}, "expected": {"outcome": "Property addition failed", "status": "Missing Property Name"}}, {"name": "Successful Property Edit", "description": "Verify that a user can successfully edit an existing property", "input": {"userId": "user_67890", "propertyId": "prop_123", "newPropertyName": "Due Date", "newPropertyType": "Date"}, "expected": {"outcome": "Property edit successful", "status": "Property Edited"}}, {"name": "Failed Property Edit Due to Invalid Type", "description": "Verify that a user cannot edit a property to an invalid type", "input": {"userId": "user_67890", "propertyId": "prop_123", "newPropertyName": "Due Date", "newPropertyType": "InvalidType"}, "expected": {"outcome": "Property edit failed", "status": "Invalid Property Type"}}, {"name": "Successful Property Deletion", "description": "Verify that a user can successfully delete a property from the database", "input": {"userId": "user_67890", "propertyId": "prop_123"}, "expected": {"outcome": "Property deletion successful", "status": "Property Deleted"}}, {"name": "Failed Property Deletion Due to Non-existent Property", "description": "Verify that a user cannot delete a non-existent property", "input": {"userId": "user_67890", "propertyId": "prop_999"}, "expected": {"outcome": "Property deletion failed", "status": "Property Not Found"}}], "bert_score": {"Precision": 0.9365988969802856, "Recall": 0.9421684741973877, "F1": 0.9393754005432129}}
{"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Property Value Entry", "description": "Verify that a user can successfully enter valid values for all property types in the database.", "input": {"propertyType": "Text", "value": "Valid Text"}, "expected": {"outcome": "Value accepted", "status": "Valid Entry"}}, {"name": "Failed Property Value Entry - Empty Value", "description": "Verify that a user cannot enter an empty value for a required property type.", "input": {"propertyType": "Text", "value": ""}, "expected": {"outcome": "Value rejected", "status": "Empty Value"}}, {"name": "Failed Property Value Entry - Invalid Value", "description": "Verify that a user cannot enter an invalid value for a numeric property type.", "input": {"propertyType": "Number", "value": "InvalidNumber"}, "expected": {"outcome": "Value rejected", "status": "Invalid Entry"}}, {"name": "Successful Property Value Entry - Edge Case", "description": "Verify that a user can enter a boundary value for a numeric property type.", "input": {"propertyType": "Number", "value": "0"}, "expected": {"outcome": "Value accepted", "status": "Valid Entry"}}, {"name": "Failed Property Value Entry - Exceeding Character Limit", "description": "Verify that a user cannot enter a value exceeding the character limit for a text property type.", "input": {"propertyType": "Text", "value": "A very long text exceeding the character limit set for this property type"}, "expected": {"outcome": "Value rejected", "status": "Exceeds Character Limit"}}], "bert_score": {"Precision": 0.9475237131118774, "Recall": 0.9456809163093567, "F1": 0.946601390838623}}
{"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Relation Creation", "description": "Verify that a user can successfully create a relation between two databases", "input": {"userId": "user_67890", "database1": "Projects", "database2": "Tasks", "relationName": "Project Tasks"}, "expected": {"outcome": "Relation created successfully", "status": "Relation Established"}}, {"name": "Failed Relation Creation Due to Missing Database", "description": "Verify that a user cannot create a relation if one of the databases is missing", "input": {"userId": "user_67890", "database1": "Projects", "database2": null, "relationName": "Project Tasks"}, "expected": {"outcome": "Relation creation failed", "status": "Missing Database"}}, {"name": "Failed Relation Creation Due to Lack of Permissions", "description": "Verify that a user cannot create a relation if they lack permissions to modify database properties", "input": {"userId": "user_67890", "database1": "Projects", "database2": "Tasks", "relationName": "Project Tasks", "permissions": "read-only"}, "expected": {"outcome": "Relation creation failed", "status": "Insufficient Permissions"}}, {"name": "Successful Relation Update", "description": "Verify that a user can successfully update an existing relation between two databases", "input": {"userId": "user_67890", "database1": "Projects", "database2": "Tasks", "relationName": "Updated Project Tasks"}, "expected": {"outcome": "Relation updated successfully", "status": "Relation Updated"}}, {"name": "Failed Relation Update Due to Invalid Relation Name", "description": "Verify that a user cannot update a relation with an invalid relation name", "input": {"userId": "user_67890", "database1": "Projects", "database2": "Tasks", "relationName": ""}, "expected": {"outcome": "Relation update failed", "status": "Invalid Relation Name"}}], "bert_score": {"Precision": 0.9310991764068604, "Recall": 0.9410635828971863, "F1": 0.9360548257827759}}
{"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Rollup Creation", "description": "Verify that a user can successfully create a rollup property with valid data.", "input": {"databaseId": "db_67890", "rollupName": "Total Sales", "relatedProperty": "Sales Amount", "calculationMethod": "Sum"}, "expected": {"outcome": "Rollup property created successfully", "status": "Rollup Created"}}, {"name": "Failed Rollup Creation with Invalid Property", "description": "Verify that a user cannot create a rollup property with an invalid related property.", "input": {"databaseId": "db_67890", "rollupName": "Total Sales", "relatedProperty": "Invalid Property", "calculationMethod": "Sum"}, "expected": {"outcome": "Rollup property creation failed", "status": "Invalid Related Property"}}, {"name": "Failed Rollup Creation with Empty Name", "description": "Verify that a user cannot create a rollup property with an empty rollup name.", "input": {"databaseId": "db_67890", "rollupName": "", "relatedProperty": "Sales Amount", "calculationMethod": "Sum"}, "expected": {"outcome": "Rollup property creation failed", "status": "Empty Rollup Name"}}, {"name": "Successful Rollup Creation with Date Property", "description": "Verify that a user can successfully create a rollup property using a date property.", "input": {"databaseId": "db_67890", "rollupName": "Latest Sale Date", "relatedProperty": "Sale Date", "calculationMethod": "Latest"}, "expected": {"outcome": "Rollup property created successfully", "status": "Rollup Created"}}, {"name": "Failed Rollup Creation with Unsupported Calculation", "description": "Verify that a user cannot create a rollup property with an unsupported calculation method.", "input": {"databaseId": "db_67890", "rollupName": "Total Sales", "relatedProperty": "Sales Amount", "calculationMethod": "Unsupported Method"}, "expected": {"outcome": "Rollup property creation failed", "status": "Unsupported Calculation Method"}}], "bert_score": {"Precision": 0.9320595264434814, "Recall": 0.9353760480880737, "F1": 0.9337148666381836}}
{"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Rollup Creation with Valid Data", "description": "Verify that a user can successfully create a rollup with valid data types and non-empty values.", "input": {"rollupId": "rollup_001", "relatedDatabaseId": "db_123", "property": "Total Sales", "dataType": "Number", "value": 1500}, "expected": {"outcome": "Rollup creation successful", "status": "Rollup Created"}}, {"name": "Failed Rollup Creation with Invalid Data Type", "description": "Verify that a user cannot create a rollup with invalid data types.", "input": {"rollupId": "rollup_002", "relatedDatabaseId": "db_123", "property": "Total Sales", "dataType": "String", "value": "Fifteen Hundred"}, "expected": {"outcome": "Rollup creation failed", "status": "Invalid Data Type"}}, {"name": "Failed Rollup Creation with Empty Values", "description": "Verify that a user cannot create a rollup with empty values.", "input": {"rollupId": "rollup_003", "relatedDatabaseId": "db_123", "property": "Total Sales", "dataType": "Number", "value": null}, "expected": {"outcome": "Rollup creation failed", "status": "Empty Value"}}, {"name": "Failed Rollup Creation with Inconsistent Data", "description": "Verify that a user cannot create a rollup when related databases contain inconsistent data.", "input": {"rollupId": "rollup_004", "relatedDatabaseId": "db_456", "property": "Total Sales", "dataType": "Number", "value": 2000}, "expected": {"outcome": "Rollup creation failed", "status": "Inconsistent Data"}}], "bert_score": {"Precision": 0.9254408478736877, "Recall": 0.9270259141921997, "F1": 0.9262326955795288}}
{"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful View Creation and Customization", "description": "Verify that a user can successfully create and customize a new view in the database", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Table", "properties": ["Name", "Date", "Status"], "filters": {"Status": "Active"}, "sorts": {"Date": "Ascending"}}, "expected": {"outcome": "View creation and customization successful", "status": "View Created"}}, {"name": "Failed View Creation Due to Missing Permissions", "description": "Verify that a user cannot create a new view if they lack the necessary permissions", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Board", "properties": ["Name", "Priority"], "filters": {"Priority": "High"}, "sorts": {"Name": "Descending"}}, "expected": {"outcome": "View creation failed", "status": "Permission Denied"}}, {"name": "Switching Between Views", "description": "Verify that a user can switch between different views in the database", "input": {"userId": "user_67890", "databaseId": "db_12345", "currentView": "Table", "targetView": "Calendar"}, "expected": {"outcome": "View switch successful", "status": "View Switched"}}, {"name": "Failed View Customization Due to Invalid Filter", "description": "Verify that a user cannot apply an invalid filter during view customization", "input": {"userId": "user_67890", "databaseId": "db_12345", "viewType": "Calendar", "properties": ["Event", "Date"], "filters": {"Date": "InvalidDate"}, "sorts": {"Event": "Ascending"}}, "expected": {"outcome": "View customization failed", "status": "Invalid Filter"}}], "bert_score": {"Precision": 0.9347490668296814, "Recall": 0.9432721138000488, "F1": 0.9389912486076355}}
{"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Filter Application", "description": "Verify that a user can successfully apply a filter to a database view", "input": {"userId": "user_67890", "databaseId": "db_12345", "filters": [{"property": "Status", "criteria": "is", "value": "Completed"}]}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View Displayed"}}, {"name": "Failed Filter Application Due to Missing Criteria", "description": "Verify that a user cannot apply a filter if the criteria is missing", "input": {"userId": "user_67890", "databaseId": "db_12345", "filters": [{"property": "Status", "criteria": null, "value": "Completed"}]}, "expected": {"outcome": "Filter application failed", "status": "Invalid Filter Criteria"}}, {"name": "Successful Multiple Filters Application", "description": "Verify that a user can apply multiple filters using 'AND' logic", "input": {"userId": "user_67890", "databaseId": "db_12345", "filters": [{"property": "Status", "criteria": "is", "value": "Completed"}, {"property": "Priority", "criteria": "is", "value": "High"}], "logic": "AND"}, "expected": {"outcome": "Multiple filters applied successfully", "status": "Filtered View Displayed"}}, {"name": "Failed Filter Application Due to Invalid Property", "description": "Verify that a user cannot apply a filter with an invalid property", "input": {"userId": "user_67890", "databaseId": "db_12345", "filters": [{"property": "InvalidProperty", "criteria": "is", "value": "Completed"}]}, "expected": {"outcome": "Filter application failed", "status": "Invalid Property"}}, {"name": "Successful Filter Application with OR Logic", "description": "Verify that a user can apply filters using 'OR' logic", "input": {"userId": "user_67890", "databaseId": "db_12345", "filters": [{"property": "Status", "criteria": "is", "value": "Completed"}, {"property": "Status", "criteria": "is", "value": "In Progress"}], "logic": "OR"}, "expected": {"outcome": "Filters applied successfully with OR logic", "status": "Filtered View Displayed"}}], "bert_score": {"Precision": 0.9404101371765137, "Recall": 0.9464181661605835, "F1": 0.9434046149253845}}
{"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Database Sort", "description": "Verify that a user can successfully sort database items by a specific property in ascending order", "input": {"userId": "user_67890", "databaseId": "db_12345", "property": "Date", "order": "Ascending"}, "expected": {"outcome": "Database items sorted successfully", "status": "Sort Applied"}}, {"name": "Failed Database Sort Due to Missing Property", "description": "Verify that a user cannot sort database items if the property is not specified", "input": {"userId": "user_67890", "databaseId": "db_12345", "property": null, "order": "Ascending"}, "expected": {"outcome": "Database sort failed", "status": "Property Not Specified"}}, {"name": "Successful Multiple Sorts", "description": "Verify that a user can apply multiple sorts and adjust their order", "input": {"userId": "user_67890", "databaseId": "db_12345", "sorts": [{"property": "Date", "order": "Ascending"}, {"property": "Priority", "order": "Descending"}]}, "expected": {"outcome": "Multiple sorts applied successfully", "status": "Sorts Applied"}}, {"name": "Failed Sort Due to Invalid Order", "description": "Verify that a user cannot sort database items if the order is invalid", "input": {"userId": "user_67890", "databaseId": "db_12345", "property": "Date", "order": "InvalidOrder"}, "expected": {"outcome": "Database sort failed", "status": "Invalid Order"}}, {"name": "Successful Sort Configuration Save", "description": "Verify that a user can save the sort configuration", "input": {"userId": "user_67890", "databaseId": "db_12345", "property": "Name", "order": "Descending"}, "expected": {"outcome": "Sort configuration saved successfully", "status": "Configuration Saved"}}], "bert_score": {"Precision": 0.9214951395988464, "Recall": 0.9290016293525696, "F1": 0.9252331256866455}}
{"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Grouping by Valid Property", "description": "Verify that a user can successfully group database items by a valid property", "input": {"databaseId": "db_67890", "property": "Status"}, "expected": {"outcome": "Grouping successful", "status": "Items grouped by Status"}}, {"name": "Failed Grouping by Invalid Property", "description": "Verify that a user cannot group database items by an invalid property", "input": {"databaseId": "db_67890", "property": "InvalidProperty"}, "expected": {"outcome": "Grouping failed", "status": "Invalid Property"}}, {"name": "Failed Grouping Without Permissions", "description": "Verify that a user cannot group database items without the necessary permissions", "input": {"databaseId": "db_67890", "property": "Status", "userPermissions": "read-only"}, "expected": {"outcome": "Grouping failed", "status": "Insufficient Permissions"}}, {"name": "Successful Grouping with Custom Order", "description": "Verify that a user can arrange groups in a custom order after grouping by a valid property", "input": {"databaseId": "db_67890", "property": "Priority", "order": ["High", "Medium", "Low"]}, "expected": {"outcome": "Grouping and ordering successful", "status": "Items grouped and ordered by Priority"}}, {"name": "Failed Grouping with Empty Property", "description": "Verify that a user cannot group database items if the property is empty", "input": {"databaseId": "db_67890", "property": ""}, "expected": {"outcome": "Grouping failed", "status": "Property Required"}}], "bert_score": {"Precision": 0.9284295439720154, "Recall": 0.9329384565353394, "F1": 0.9306785464286804}}
{"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Database Search", "description": "Verify that a user can successfully search for items in the database using valid keywords.", "input": {"userId": "user_67890", "databaseId": "db_12345", "keywords": "Project Plan"}, "expected": {"outcome": "Search results displayed successfully", "status": "Results Found"}}, {"name": "Failed Database Search with Invalid Keywords", "description": "Verify that a user receives no results when searching with invalid or non-existent keywords.", "input": {"userId": "user_67890", "databaseId": "db_12345", "keywords": "NonExistentKeyword"}, "expected": {"outcome": "No search results found", "status": "No Results"}}, {"name": "Database Search with Empty Keywords", "description": "Verify that a user cannot perform a search with empty keywords.", "input": {"userId": "user_67890", "databaseId": "db_12345", "keywords": ""}, "expected": {"outcome": "Search failed due to empty keywords", "status": "Invalid Input"}}, {"name": "Database Search Without Permissions", "description": "Verify that a user cannot search the database without the necessary permissions.", "input": {"userId": "user_67890", "databaseId": "db_12345", "keywords": "Project Plan"}, "expected": {"outcome": "Search failed due to lack of permissions", "status": "Permission Denied"}}, {"name": "Database Search with Special Characters", "description": "Verify that a user can search using keywords with special characters.", "input": {"userId": "user_67890", "databaseId": "db_12345", "keywords": "Plan@2023!"}, "expected": {"outcome": "Search results displayed successfully", "status": "Results Found"}}], "bert_score": {"Precision": 0.9228949546813965, "Recall": 0.9365419149398804, "F1": 0.9296683669090271}}
{"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Row Addition", "description": "Verify that a user can successfully add a new row to the table view", "input": {"userId": "user_67890", "action": "addRow", "rowData": {"column1": "Data1", "column2": "Data2"}}, "expected": {"outcome": "Row addition successful", "status": "Row Added"}}, {"name": "Failed Row Addition Due to Missing Data", "description": "Verify that a user cannot add a new row if any required data is missing", "input": {"userId": "user_67890", "action": "addRow", "rowData": {"column1": "Data1", "column2": null}}, "expected": {"outcome": "Row addition failed", "status": "Missing Data"}}, {"name": "Successful Column Deletion", "description": "Verify that a user can successfully delete a column from the table view", "input": {"userId": "user_67890", "action": "deleteColumn", "columnName": "column2"}, "expected": {"outcome": "Column deletion successful", "status": "Column Deleted"}}, {"name": "Failed Column Deletion Due to Non-existent Column", "description": "Verify that a user cannot delete a column that does not exist", "input": {"userId": "user_67890", "action": "deleteColumn", "columnName": "nonExistentColumn"}, "expected": {"outcome": "Column deletion failed", "status": "Column Not Found"}}, {"name": "Successful Row Editing", "description": "Verify that a user can successfully edit an existing row in the table view", "input": {"userId": "user_67890", "action": "editRow", "rowId": "row_123", "newData": {"column1": "UpdatedData1", "column2": "UpdatedData2"}}, "expected": {"outcome": "Row editing successful", "status": "Row Updated"}}, {"name": "Failed Row Editing Due to Invalid Row ID", "description": "Verify that a user cannot edit a row with an invalid row ID", "input": {"userId": "user_67890", "action": "editRow", "rowId": "invalid_row_id", "newData": {"column1": "UpdatedData1", "column2": "UpdatedData2"}}, "expected": {"outcome": "Row editing failed", "status": "Invalid Row ID"}}], "bert_score": {"Precision": 0.9190343022346497, "Recall": 0.9267054796218872, "F1": 0.922853946685791}}
{"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful List Item Addition", "description": "Verify that a user can successfully add a new item to the list view.", "input": {"userId": "user_67890", "listItem": "New Note", "properties": {"title": "Meeting Notes", "date": "2023-10-01"}}, "expected": {"outcome": "List item added successfully", "status": "Item Added"}}, {"name": "Failed List Item Addition Due to Missing Title", "description": "Verify that a user cannot add a new item to the list view if the title is missing.", "input": {"userId": "user_67890", "listItem": "New Note", "properties": {"title": null, "date": "2023-10-01"}}, "expected": {"outcome": "List item addition failed", "status": "Missing Title"}}, {"name": "Successful List Item Deletion", "description": "Verify that a user can successfully delete an item from the list view.", "input": {"userId": "user_67890", "listItemId": "item_123"}, "expected": {"outcome": "List item deleted successfully", "status": "Item Deleted"}}, {"name": "Failed List Item Deletion Due to Invalid ID", "description": "Verify that a user cannot delete an item from the list view if the item ID is invalid.", "input": {"userId": "user_67890", "listItemId": "invalid_id"}, "expected": {"outcome": "List item deletion failed", "status": "Invalid Item ID"}}, {"name": "Successful List Item Edit", "description": "Verify that a user can successfully edit an existing item in the list view.", "input": {"userId": "user_67890", "listItemId": "item_123", "newProperties": {"title": "Updated Meeting Notes", "date": "2023-10-02"}}, "expected": {"outcome": "List item edited successfully", "status": "Item Edited"}}, {"name": "Failed List Item Edit Due to Missing Permissions", "description": "Verify that a user cannot edit an item in the list view if they lack the necessary permissions.", "input": {"userId": "user_67890", "listItemId": "item_123", "newProperties": {"title": "Updated Meeting Notes", "date": "2023-10-02"}}, "expected": {"outcome": "List item edit failed", "status": "Insufficient Permissions"}}], "bert_score": {"Precision": 0.9308019876480103, "Recall": 0.9363444447517395, "F1": 0.9335649609565735}}
{"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Workflow Visualization", "description": "Verify that a user can successfully move items between columns in the board view to represent workflow changes.", "input": {"userId": "user_67890", "boardId": "board_123", "itemId": "item_456", "sourceColumn": "To Do", "destinationColumn": "In Progress"}, "expected": {"outcome": "Item moved successfully", "status": "Workflow Updated"}}, {"name": "Failed Workflow Visualization Due to Permission", "description": "Verify that a user cannot move items between columns if they lack the necessary permissions.", "input": {"userId": "user_67890", "boardId": "board_123", "itemId": "item_456", "sourceColumn": "To Do", "destinationColumn": "In Progress"}, "expected": {"outcome": "Item move failed", "status": "Permission Denied"}}, {"name": "Failed Workflow Visualization Due to Invalid Board", "description": "Verify that a user cannot move items if the board view is invalid or does not exist.", "input": {"userId": "user_67890", "boardId": "invalid_board", "itemId": "item_456", "sourceColumn": "To Do", "destinationColumn": "In Progress"}, "expected": {"outcome": "Item move failed", "status": "Invalid Board"}}, {"name": "Failed Workflow Visualization Due to Invalid Item", "description": "Verify that a user cannot move an item if the item does not exist in the board view.", "input": {"userId": "user_67890", "boardId": "board_123", "itemId": "invalid_item", "sourceColumn": "To Do", "destinationColumn": "In Progress"}, "expected": {"outcome": "Item move failed", "status": "Invalid Item"}}], "bert_score": {"Precision": 0.9327206611633301, "Recall": 0.9384188652038574, "F1": 0.9355610609054565}}
{"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Event Addition", "description": "Verify that a user can successfully add an event to the calendar.", "input": {"userId": "user_67890", "eventTitle": "Team Meeting", "eventDate": "2023-11-15", "eventTime": "10:00 AM", "eventDescription": "Monthly team meeting to discuss project updates."}, "expected": {"outcome": "Event added successfully", "status": "Event Created"}}, {"name": "Failed Event Addition Due to Missing Title", "description": "Verify that a user cannot add an event without a title.", "input": {"userId": "user_67890", "eventTitle": null, "eventDate": "2023-11-15", "eventTime": "10:00 AM", "eventDescription": "Monthly team meeting to discuss project updates."}, "expected": {"outcome": "Event addition failed", "status": "Missing Title"}}, {"name": "Successful Event Deletion", "description": "Verify that a user can successfully delete an event from the calendar.", "input": {"userId": "user_67890", "eventId": "event_12345"}, "expected": {"outcome": "Event deleted successfully", "status": "Event Deleted"}}, {"name": "Failed Event Deletion Due to Invalid Event ID", "description": "Verify that a user cannot delete an event with an invalid event ID.", "input": {"userId": "user_67890", "eventId": "invalid_event_000"}, "expected": {"outcome": "Event deletion failed", "status": "Invalid Event ID"}}, {"name": "Successful Event Edit", "description": "Verify that a user can successfully edit an existing event.", "input": {"userId": "user_67890", "eventId": "event_12345", "newEventTitle": "Updated Team Meeting", "newEventDate": "2023-11-16", "newEventTime": "11:00 AM", "newEventDescription": "Updated monthly team meeting."}, "expected": {"outcome": "Event edited successfully", "status": "Event Updated"}}, {"name": "Failed Event Edit Due to Missing Date", "description": "Verify that a user cannot edit an event without providing a new date.", "input": {"userId": "user_67890", "eventId": "event_12345", "newEventTitle": "Updated Team Meeting", "newEventDate": null, "newEventTime": "11:00 AM", "newEventDescription": "Updated monthly team meeting."}, "expected": {"outcome": "Event edit failed", "status": "Missing Date"}}], "bert_score": {"Precision": 0.9277604222297668, "Recall": 0.934161901473999, "F1": 0.9309501647949219}}
{"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Unique Identifier Assignment", "description": "Verify that a user can successfully assign unique identifiers to database items.", "input": {"userId": "user_67890", "databaseId": "db_12345", "uniqueIdFormat": "UUID"}, "expected": {"outcome": "Unique identifier assignment successful", "status": "Identifiers Assigned"}}, {"name": "Failed Unique Identifier Assignment Due to Missing Permissions", "description": "Verify that a user cannot assign unique identifiers if they lack the necessary permissions.", "input": {"userId": "user_67890", "databaseId": "db_12345", "uniqueIdFormat": "UUID"}, "expected": {"outcome": "Unique identifier assignment failed", "status": "Permission Denied"}}, {"name": "Failed Unique Identifier Assignment Due to Invalid Format", "description": "Verify that a user cannot assign unique identifiers if the format is invalid.", "input": {"userId": "user_67890", "databaseId": "db_12345", "uniqueIdFormat": "INVALID_FORMAT"}, "expected": {"outcome": "Unique identifier assignment failed", "status": "Invalid Format"}}, {"name": "Edge Case: Assigning Unique Identifiers with Empty Database", "description": "Verify that a user can assign unique identifiers even if the database is initially empty.", "input": {"userId": "user_67890", "databaseId": "db_empty", "uniqueIdFormat": "UUID"}, "expected": {"outcome": "Unique identifier assignment successful", "status": "Identifiers Assigned"}}], "bert_score": {"Precision": 0.9166291356086731, "Recall": 0.9263995289802551, "F1": 0.9214884042739868}}
{"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Successful Teamspace Creation", "description": "Verify that a user can successfully create a new teamspace and invite members", "input": {"userId": "user_67890", "teamspaceName": "Project Alpha", "teamspaceIcon": "\ud83d\ude80", "invitedEmails": ["member1@example.com", "member2@example.com"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Teamspace Created"}}, {"name": "Failed Teamspace Creation Due to Missing Name", "description": "Verify that a user cannot create a teamspace without providing a name", "input": {"userId": "user_67890", "teamspaceName": null, "teamspaceIcon": "\ud83d\ude80", "invitedEmails": ["member1@example.com", "member2@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Missing Teamspace Name"}}, {"name": "Failed Teamspace Creation Due to Invalid Email", "description": "Verify that a user cannot invite members with invalid email addresses", "input": {"userId": "user_67890", "teamspaceName": "Project Beta", "teamspaceIcon": "\ud83d\udcda", "invitedEmails": ["invalid-email", "member2@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Invalid Email Address"}}, {"name": "Successful Teamspace Creation with No Icon", "description": "Verify that a user can create a teamspace without providing an icon", "input": {"userId": "user_67890", "teamspaceName": "Project Gamma", "teamspaceIcon": null, "invitedEmails": ["member1@example.com", "member2@example.com"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Teamspace Created"}}, {"name": "Failed Teamspace Creation Due to No Invited Members", "description": "Verify that a user cannot create a teamspace without inviting any members", "input": {"userId": "user_67890", "teamspaceName": "Project Delta", "teamspaceIcon": "\ud83d\udd27", "invitedEmails": []}, "expected": {"outcome": "Teamspace creation failed", "status": "No Members Invited"}}], "bert_score": {"Precision": 0.9459763169288635, "Recall": 0.943821907043457, "F1": 0.9448978900909424}}
{"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Permission Change by Owner", "description": "Verify that a teamspace owner can successfully change a member's permission level", "input": {"ownerId": "owner_123", "memberId": "member_456", "newPermission": "Can Edit"}, "expected": {"outcome": "Permission change successful", "status": "Permission Updated"}}, {"name": "Failed Permission Change by Member", "description": "Verify that a teamspace member cannot change another member's permission level to 'Owner'", "input": {"memberId": "member_123", "targetMemberId": "member_456", "newPermission": "Owner"}, "expected": {"outcome": "Permission change failed", "status": "Insufficient Permissions"}}, {"name": "Successful Owner Upgrade", "description": "Verify that a teamspace owner can upgrade a member to owner", "input": {"ownerId": "owner_123", "memberId": "member_456", "newRole": "Owner"}, "expected": {"outcome": "Role upgrade successful", "status": "Role Updated"}}, {"name": "Failed Owner Downgrade by Member", "description": "Verify that a teamspace member cannot downgrade an owner to member", "input": {"memberId": "member_123", "targetOwnerId": "owner_456", "newRole": "Member"}, "expected": {"outcome": "Role downgrade failed", "status": "Insufficient Permissions"}}, {"name": "Invalid Permission Level", "description": "Verify that an invalid permission level cannot be set", "input": {"ownerId": "owner_123", "memberId": "member_456", "newPermission": "Can Fly"}, "expected": {"outcome": "Permission change failed", "status": "Invalid Permission Level"}}], "bert_score": {"Precision": 0.9333136677742004, "Recall": 0.9325924515724182, "F1": 0.932952880859375}}
{"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Page Sharing with Valid Permissions", "description": "Verify that a user can successfully share a page with members and set valid permissions", "input": {"userId": "user_67890", "pageId": "page_12345", "members": ["member_1", "member_2"], "permissions": {"member_1": "edit", "member_2": "view"}}, "expected": {"outcome": "Page shared successfully", "status": "Permissions Set"}}, {"name": "Failed Page Sharing with Invalid Member", "description": "Verify that a user cannot share a page with an invalid member", "input": {"userId": "user_67890", "pageId": "page_12345", "members": ["invalid_member"], "permissions": {"invalid_member": "edit"}}, "expected": {"outcome": "Page sharing failed", "status": "Invalid Member"}}, {"name": "Failed Page Sharing with Invalid Permissions", "description": "Verify that a user cannot set invalid permissions for a member", "input": {"userId": "user_67890", "pageId": "page_12345", "members": ["member_1"], "permissions": {"member_1": "invalid_permission"}}, "expected": {"outcome": "Page sharing failed", "status": "Invalid Permission"}}, {"name": "Edge Case: Share Page with No Members", "description": "Verify that a user cannot share a page without selecting any members", "input": {"userId": "user_67890", "pageId": "page_12345", "members": [], "permissions": {}}, "expected": {"outcome": "Page sharing failed", "status": "No Members Selected"}}, {"name": "Edge Case: Share Page with Maximum Members", "description": "Verify that a user can share a page with the maximum allowed number of members", "input": {"userId": "user_67890", "pageId": "page_12345", "members": ["member_1", "member_2", "member_3", "member_4", "member_5"], "permissions": {"member_1": "edit", "member_2": "view", "member_3": "comment", "member_4": "view", "member_5": "edit"}}, "expected": {"outcome": "Page shared successfully", "status": "Permissions Set"}}], "bert_score": {"Precision": 0.9255367517471313, "Recall": 0.9359519481658936, "F1": 0.9307152032852173}}
{"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Successful Page Publication with Default Domain", "description": "Verify that a user can successfully publish a page as a website using the default domain", "input": {"userId": "user_67890", "subscriptionPlan": "Basic", "domain": "randomly_generated_domain", "seoPreferences": "default", "linkExpiration": "none"}, "expected": {"outcome": "Page published successfully", "status": "Published"}}, {"name": "Successful Page Publication with Custom Domain", "description": "Verify that a user with a Plus subscription can publish a page using a custom domain", "input": {"userId": "user_67890", "subscriptionPlan": "Plus", "domain": "custom_domain", "seoPreferences": "optimized", "linkExpiration": "none"}, "expected": {"outcome": "Page published successfully", "status": "Published"}}, {"name": "Failed Page Publication Due to Invalid Domain", "description": "Verify that a user cannot publish a page with an invalid domain name", "input": {"userId": "user_67890", "subscriptionPlan": "Plus", "domain": "invalid_domain!", "seoPreferences": "optimized", "linkExpiration": "none"}, "expected": {"outcome": "Page publication failed", "status": "Invalid Domain"}}, {"name": "Failed Page Publication Due to Missing SEO Preferences", "description": "Verify that a user cannot publish a page without selecting SEO preferences", "input": {"userId": "user_67890", "subscriptionPlan": "Basic", "domain": "randomly_generated_domain", "seoPreferences": null, "linkExpiration": "none"}, "expected": {"outcome": "Page publication failed", "status": "Missing SEO Preferences"}}, {"name": "Failed Page Publication Due to Expired Link", "description": "Verify that a user cannot publish a page if the link expiration is set to a past date", "input": {"userId": "user_67890", "subscriptionPlan": "Plus", "domain": "custom_domain", "seoPreferences": "optimized", "linkExpiration": "2022-01-01"}, "expected": {"outcome": "Page publication failed", "status": "Expired Link"}}], "bert_score": {"Precision": 0.9394876956939697, "Recall": 0.9370935559272766, "F1": 0.9382891058921814}}
{"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Real-time Collaboration", "description": "Verify that a user can successfully edit a block of content in real-time", "input": {"userId": "user_67890", "pageId": "page_12345", "blockId": "block_001", "newContent": "Updated content for the block"}, "expected": {"outcome": "Edit successful", "status": "Content Updated"}}, {"name": "Failed Real-time Collaboration Due to Inconsistency", "description": "Verify that a user's edit is rejected if it causes inconsistency", "input": {"userId": "user_67890", "pageId": "page_12345", "blockId": "block_001", "newContent": "Conflicting content"}, "expected": {"outcome": "Edit failed", "status": "Inconsistent Edit"}}, {"name": "Failed Real-time Collaboration Due to Invalid Block", "description": "Verify that a user cannot edit a block that does not exist", "input": {"userId": "user_67890", "pageId": "page_12345", "blockId": "block_999", "newContent": "Attempt to edit non-existent block"}, "expected": {"outcome": "Edit failed", "status": "Block Not Found"}}, {"name": "Successful Real-time Collaboration with Multiple Users", "description": "Verify that multiple users can successfully edit different blocks of content in real-time", "input": {"userId": ["user_67890", "user_54321"], "pageId": "page_12345", "blockId": ["block_001", "block_002"], "newContent": ["User 1's content", "User 2's content"]}, "expected": {"outcome": "Edit successful", "status": "Content Updated"}}, {"name": "Failed Real-time Collaboration Due to Lack of Permissions", "description": "Verify that a user cannot edit a block if they do not have permission", "input": {"userId": "user_67890", "pageId": "page_12345", "blockId": "block_001", "newContent": "Attempt to edit without permission"}, "expected": {"outcome": "Edit failed", "status": "Permission Denied"}}], "bert_score": {"Precision": 0.902807354927063, "Recall": 0.9183056354522705, "F1": 0.9104905724525452}}
{"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}], "GPT4o_testcases": [{"name": "Successful Comment Addition", "description": "Verify that a user can successfully add a comment to a page block", "input": {"userId": "user_67890", "blockId": "block_123", "commentText": "This is a great point!", "mentions": ["user_54321", "page_789"]}, "expected": {"outcome": "Comment added successfully", "status": "Comment Added"}}, {"name": "Failed Comment Addition Due to Lack of Privilege", "description": "Verify that a user cannot add a comment if they do not have the required privilege level", "input": {"userId": "user_67890", "blockId": "block_123", "commentText": "This is a great point!", "mentions": []}, "expected": {"outcome": "Comment addition failed", "status": "Insufficient Privileges"}}, {"name": "Failed Comment Addition Due to Empty Comment", "description": "Verify that a user cannot add an empty comment to a page block", "input": {"userId": "user_67890", "blockId": "block_123", "commentText": "", "mentions": []}, "expected": {"outcome": "Comment addition failed", "status": "Empty Comment"}}, {"name": "Successful Comment Addition with Mentions", "description": "Verify that a user can successfully add a comment with mentions to a page block", "input": {"userId": "user_67890", "blockId": "block_123", "commentText": "Please review this section.", "mentions": ["user_54321", "user_98765"]}, "expected": {"outcome": "Comment with mentions added successfully", "status": "Comment Added"}}, {"name": "Failed Comment Addition Due to Invalid Mentions", "description": "Verify that a user cannot add a comment with invalid mentions", "input": {"userId": "user_67890", "blockId": "block_123", "commentText": "Check this out!", "mentions": ["invalid_user"]}, "expected": {"outcome": "Comment addition failed", "status": "Invalid Mentions"}}], "bert_score": {"Precision": 0.9289490580558777, "Recall": 0.9339295625686646, "F1": 0.9314326643943787}}
{"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Edit Suggestion", "description": "Verify that a guest user can successfully suggest an edit to a block of content", "input": {"userId": "guest_67890", "blockId": "block_123", "comment": "Consider rephrasing this sentence for clarity.", "mentions": ["user_54321"]}, "expected": {"outcome": "Edit suggestion submitted successfully", "status": "Suggestion Submitted"}}, {"name": "Failed Edit Suggestion Due to Lack of Privilege", "description": "Verify that a guest user cannot suggest an edit if they lack the necessary privileges", "input": {"userId": "guest_67890", "blockId": "block_123", "comment": "Consider rephrasing this sentence for clarity.", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Insufficient Privileges"}}, {"name": "Failed Edit Suggestion Due to Empty Comment", "description": "Verify that a guest user cannot suggest an edit with an empty comment", "input": {"userId": "guest_67890", "blockId": "block_123", "comment": "", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Empty Comment"}}, {"name": "Successful Edit Suggestion with Multiple Mentions", "description": "Verify that a guest user can suggest an edit with multiple mentions", "input": {"userId": "guest_67890", "blockId": "block_123", "comment": "Consider rephrasing this sentence for clarity.", "mentions": ["user_54321", "group_987"]}, "expected": {"outcome": "Edit suggestion submitted successfully", "status": "Suggestion Submitted"}}, {"name": "Failed Edit Suggestion Due to Invalid Block ID", "description": "Verify that a guest user cannot suggest an edit with an invalid block ID", "input": {"userId": "guest_67890", "blockId": "invalid_block", "comment": "Consider rephrasing this sentence for clarity.", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Invalid Block ID"}}], "bert_score": {"Precision": 0.9034498929977417, "Recall": 0.9216428995132446, "F1": 0.9124557375907898}}
{"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}], "GPT4o_testcases": [{"name": "Successful Page Analytics View", "description": "Verify that a user with Full Access can successfully view page analytics", "input": {"userId": "user_67890", "accessLevel": "Full Access", "pageId": "page_12345"}, "expected": {"outcome": "Analytics data displayed successfully", "status": "Analytics Viewed"}}, {"name": "Failed Page Analytics View Due to Insufficient Access", "description": "Verify that a user without Full Access or Can Edit privileges cannot view page analytics", "input": {"userId": "user_67890", "accessLevel": "Read Only", "pageId": "page_12345"}, "expected": {"outcome": "Access denied to analytics data", "status": "Access Denied"}}, {"name": "Edge Case: View Analytics with No Interaction History", "description": "Verify that analytics can be viewed even if there is no interaction history", "input": {"userId": "user_67890", "accessLevel": "Full Access", "pageId": "page_67890"}, "expected": {"outcome": "Analytics data displayed with no interaction history", "status": "Analytics Viewed"}}, {"name": "Invalid Page ID for Analytics View", "description": "Verify that an error is shown when trying to view analytics for an invalid page ID", "input": {"userId": "user_67890", "accessLevel": "Full Access", "pageId": "invalid_page"}, "expected": {"outcome": "Error displayed for invalid page ID", "status": "Invalid Page ID"}}], "bert_score": {"Precision": 0.9465360641479492, "Recall": 0.9467182159423828, "F1": 0.9466270804405212}}
{"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}], "GPT4o_testcases": [{"name": "Successful Plan Upgrade", "description": "Verify that a user can successfully upgrade their subscription plan with valid payment details", "input": {"userId": "user_67890", "selectedPlan": "Premium", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}}, "expected": {"outcome": "Plan upgrade successful", "status": "Plan Upgraded"}}, {"name": "Failed Plan Upgrade Due to Invalid Payment", "description": "Verify that a user cannot upgrade their subscription plan with invalid payment details", "input": {"userId": "user_67890", "selectedPlan": "Premium", "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/25", "cvv": "123"}}, "expected": {"outcome": "Plan upgrade failed", "status": "Payment Error"}}, {"name": "Failed Plan Upgrade Due to Empty Plan Selection", "description": "Verify that a user cannot upgrade their subscription plan if no plan is selected", "input": {"userId": "user_67890", "selectedPlan": null, "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}}, "expected": {"outcome": "Plan upgrade failed", "status": "No Plan Selected"}}, {"name": "Successful Plan Upgrade with Edge Case Payment Details", "description": "Verify that a user can successfully upgrade their subscription plan with edge case valid payment details", "input": {"userId": "user_67890", "selectedPlan": "Enterprise", "paymentDetails": {"cardNumber": "4000000000000002", "expiryDate": "01/30", "cvv": "999"}}, "expected": {"outcome": "Plan upgrade successful", "status": "Plan Upgraded"}}], "bert_score": {"Precision": 0.9371448159217834, "Recall": 0.9353145360946655, "F1": 0.9362287521362305}}
{"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}], "GPT4o_testcases": [{"name": "Successful Plan Downgrade", "description": "Verify that a user can successfully downgrade their subscription plan", "input": {"userId": "user_67890", "currentPlan": "Premium", "desiredPlan": "Basic"}, "expected": {"outcome": "Plan downgrade successful", "status": "Plan Updated"}}, {"name": "Failed Plan Downgrade Due to Invalid Plan", "description": "Verify that a user cannot downgrade to a non-existent plan", "input": {"userId": "user_67890", "currentPlan": "Premium", "desiredPlan": "NonExistentPlan"}, "expected": {"outcome": "Plan downgrade failed", "status": "Invalid Plan"}}, {"name": "Failed Plan Downgrade Due to Network Error", "description": "Verify that a user receives an error message if there is a network issue during the downgrade process", "input": {"userId": "user_67890", "currentPlan": "Premium", "desiredPlan": "Basic"}, "expected": {"outcome": "Plan downgrade failed", "status": "Network Error"}}, {"name": "Plan Downgrade with Confirmation Email", "description": "Verify that a user receives a confirmation email after successfully downgrading their plan", "input": {"userId": "user_67890", "currentPlan": "Premium", "desiredPlan": "Basic"}, "expected": {"outcome": "Plan downgrade successful", "status": "Confirmation Email Sent"}}, {"name": "Plan Downgrade with Invalid User", "description": "Verify that an invalid user cannot downgrade their plan", "input": {"userId": "invalid_user", "currentPlan": "Premium", "desiredPlan": "Basic"}, "expected": {"outcome": "Plan downgrade failed", "status": "User Not Found"}}], "bert_score": {"Precision": 0.9152951240539551, "Recall": 0.9139364957809448, "F1": 0.9146153330802917}}
{"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}], "GPT4o_testcases": [{"name": "Successful Payment Method Update", "description": "Verify that a user can successfully update their payment method", "input": {"userId": "user_67890", "cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123", "billingAddress": "123 Main St, Anytown, USA"}, "expected": {"outcome": "Payment method update successful", "status": "Payment Method Updated"}}, {"name": "Failed Payment Method Update Due to Invalid Card Number", "description": "Verify that a user cannot update their payment method with an invalid card number", "input": {"userId": "user_67890", "cardNumber": "1234567890123456", "expiryDate": "12/25", "cvv": "123", "billingAddress": "123 Main St, Anytown, USA"}, "expected": {"outcome": "Payment method update failed", "status": "Invalid Card Number"}}, {"name": "Failed Payment Method Update Due to Missing CVV", "description": "Verify that a user cannot update their payment method if CVV is missing", "input": {"userId": "user_67890", "cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": null, "billingAddress": "123 Main St, Anytown, USA"}, "expected": {"outcome": "Payment method update failed", "status": "Missing CVV"}}, {"name": "Failed Payment Method Update Due to Expired Card", "description": "Verify that a user cannot update their payment method with an expired card", "input": {"userId": "user_67890", "cardNumber": "4111111111111111", "expiryDate": "12/20", "cvv": "123", "billingAddress": "123 Main St, Anytown, USA"}, "expected": {"outcome": "Payment method update failed", "status": "Card Expired"}}, {"name": "Successful Payment Method Update with Different Billing Address", "description": "Verify that a user can update their payment method with a different billing address", "input": {"userId": "user_67890", "cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123", "billingAddress": "456 Another St, Newtown, USA"}, "expected": {"outcome": "Payment method update successful", "status": "Payment Method Updated"}}], "bert_score": {"Precision": 0.9241289496421814, "Recall": 0.9241920709609985, "F1": 0.9241605401039124}}
{"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synchronized with Notion.", "input": {"userId": "user_67890", "thirdPartyTaskId": "task_001", "taskTitle": "Complete Assignment", "taskDueDate": "2023-11-01"}, "expected": {"outcome": "Task synchronization successful", "status": "Task Updated in Notion"}}, {"name": "Failed Task Synchronization Due to Invalid Task ID", "description": "Verify that synchronization fails if the task ID from the third-party app is invalid.", "input": {"userId": "user_67890", "thirdPartyTaskId": null, "taskTitle": "Complete Assignment", "taskDueDate": "2023-11-01"}, "expected": {"outcome": "Task synchronization failed", "status": "Invalid Task ID"}}, {"name": "Edge Case: Synchronization with Empty Task Title", "description": "Verify that synchronization fails if the task title is empty.", "input": {"userId": "user_67890", "thirdPartyTaskId": "task_002", "taskTitle": "", "taskDueDate": "2023-11-01"}, "expected": {"outcome": "Task synchronization failed", "status": "Empty Task Title"}}, {"name": "Edge Case: Synchronization with Past Due Date", "description": "Verify that synchronization succeeds even if the task due date is in the past.", "input": {"userId": "user_67890", "thirdPartyTaskId": "task_003", "taskTitle": "Review Notes", "taskDueDate": "2023-01-01"}, "expected": {"outcome": "Task synchronization successful", "status": "Task Updated in Notion"}}, {"name": "Negative Case: Unauthorized Integration", "description": "Verify that synchronization fails if the integration is not authorized.", "input": {"userId": "user_67890", "thirdPartyTaskId": "task_004", "taskTitle": "Plan Meeting", "taskDueDate": "2023-11-10"}, "expected": {"outcome": "Task synchronization failed", "status": "Unauthorized Integration"}}], "bert_score": {"Precision": 0.9441566467285156, "Recall": 0.9506852626800537, "F1": 0.9474097490310669}}
{"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}], "GPT4o_testcases": [{"name": "Successful CRM Data Synchronization", "description": "Verify that customer data is successfully synchronized from CRM to Notion database", "input": {"customerId": "cust_001", "customerName": "Alice Smith", "customerEmail": "alice@example.com", "customerPhone": "0123456789", "notes": "Interested in premium package"}, "expected": {"outcome": "Data synchronization successful", "status": "Data Updated in Notion"}}, {"name": "Failed CRM Data Synchronization Due to Missing Email", "description": "Verify that synchronization fails if customer email is missing", "input": {"customerId": "cust_002", "customerName": "Bob Johnson", "customerEmail": null, "customerPhone": "0987654321", "notes": "Follow up next week"}, "expected": {"outcome": "Data synchronization failed", "status": "Missing Required Information"}}, {"name": "Edge Case: Synchronization with Large Data Set", "description": "Verify that synchronization handles a large set of customer data", "input": {"customerId": "cust_003", "customerName": "Charlie Brown", "customerEmail": "charlie@example.com", "customerPhone": "1234567890", "notes": "Interested in multiple products", "additionalData": "Large data set with multiple entries"}, "expected": {"outcome": "Data synchronization successful", "status": "Data Updated in Notion"}}, {"name": "Invalid CRM Data Synchronization Due to Unauthorized Access", "description": "Verify that synchronization fails if the sales rep does not have authorized access", "input": {"customerId": "cust_004", "customerName": "Diana Prince", "customerEmail": "diana@example.com", "customerPhone": "1122334455", "notes": "Potential VIP customer", "authorizedAccess": false}, "expected": {"outcome": "Data synchronization failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9303551912307739, "Recall": 0.9375556707382202, "F1": 0.9339415431022644}}
{}
{"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "GPT4o_testcases": [{"name": "Successful Restaurant Search with Offers", "description": "Verify that a customer can successfully search for restaurants with active offers", "input": {"customerId": "customer_67890", "filter": "Offers"}, "expected": {"outcome": "Restaurants with offers displayed", "status": "Offers Displayed"}}, {"name": "No Offers Available", "description": "Verify that the system handles the scenario where no restaurants have active offers", "input": {"customerId": "customer_67890", "filter": "Offers"}, "expected": {"outcome": "No restaurants with offers available", "status": "No Offers Found"}}, {"name": "Invalid Filter Input", "description": "Verify that the system handles invalid filter input gracefully", "input": {"customerId": "customer_67890", "filter": null}, "expected": {"outcome": "Search failed due to invalid filter", "status": "Invalid Filter"}}, {"name": "Search with Offers and Cuisine Filter", "description": "Verify that a customer can filter restaurants by offers and a specific cuisine", "input": {"customerId": "customer_67890", "filter": "Offers, Italian"}, "expected": {"outcome": "Italian restaurants with offers displayed", "status": "Filtered Offers Displayed"}}, {"name": "Expired Offers Display", "description": "Verify that expired offers are not displayed in the search results", "input": {"customerId": "customer_67890", "filter": "Offers"}, "expected": {"outcome": "Only active offers displayed", "status": "Active Offers Displayed"}}], "bert_score": {"Precision": 0.9431878328323364, "Recall": 0.9514463543891907, "F1": 0.947299063205719}}
{"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Recent Search Selection", "description": "Verify that a customer can successfully select a recent search query and view results", "input": {"customerId": "customer_67890", "recentSearches": ["Pizza", "Sushi", "Burger"], "selectedSearch": "Pizza"}, "expected": {"outcome": "Search results displayed successfully", "status": "Results Displayed"}}, {"name": "No Recent Searches Available", "description": "Verify that the system handles the scenario where no recent searches are available", "input": {"customerId": "customer_67890", "recentSearches": [], "selectedSearch": null}, "expected": {"outcome": "No recent searches to display", "status": "No Searches Available"}}, {"name": "Invalid Recent Search Selection", "description": "Verify that the system handles the selection of a non-existent recent search query", "input": {"customerId": "customer_67890", "recentSearches": ["Pizza", "Sushi", "Burger"], "selectedSearch": "Pasta"}, "expected": {"outcome": "Search query not found", "status": "Invalid Selection"}}, {"name": "Empty Search Query Selection", "description": "Verify that the system handles the selection of an empty search query", "input": {"customerId": "customer_67890", "recentSearches": ["Pizza", "Sushi", "Burger"], "selectedSearch": ""}, "expected": {"outcome": "Search query not found", "status": "Invalid Selection"}}], "bert_score": {"Precision": 0.9271758198738098, "Recall": 0.9318923950195312, "F1": 0.9295281767845154}}
{"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Food Item Selection", "description": "Verify that a customer can successfully select and add a food item to the cart", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "foodItemId": "food_001", "quantity": 2}, "expected": {"outcome": "Food item added to cart successfully", "status": "Item Added"}}, {"name": "Failed Food Item Selection Due to Unavailable Item", "description": "Verify that a customer cannot add a food item to the cart if it is unavailable", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "foodItemId": "food_002", "quantity": 1}, "expected": {"outcome": "Food item addition failed", "status": "Item Unavailable"}}, {"name": "Failed Food Item Selection Due to Invalid Quantity", "description": "Verify that a customer cannot add a food item to the cart with an invalid quantity", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "foodItemId": "food_003", "quantity": 0}, "expected": {"outcome": "Food item addition failed", "status": "Invalid Quantity"}}, {"name": "Successful Food Item Selection with Maximum Quantity", "description": "Verify that a customer can add the maximum allowed quantity of a food item to the cart", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "foodItemId": "food_004", "quantity": 10}, "expected": {"outcome": "Food item added to cart successfully", "status": "Item Added"}}, {"name": "Failed Food Item Selection Due to Invalid Food Item ID", "description": "Verify that a customer cannot add a food item to the cart with an invalid food item ID", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "foodItemId": "invalid_food_id", "quantity": 1}, "expected": {"outcome": "Food item addition failed", "status": "Invalid Food Item ID"}}], "bert_score": {"Precision": 0.9200698137283325, "Recall": 0.9259605407714844, "F1": 0.9230057597160339}}
{"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Food Item Details View", "description": "Verify that a customer can successfully view the details of a selected food item", "input": {"customerId": "customer_67890", "foodItemId": "food_12345"}, "expected": {"outcome": "Food item details displayed successfully", "status": "Details Displayed"}}, {"name": "Failed Food Item Details View - Invalid Food Item", "description": "Verify that the system does not display details for an invalid food item", "input": {"customerId": "customer_67890", "foodItemId": "invalid_food_00000"}, "expected": {"outcome": "Food item details display failed", "status": "Invalid Food Item"}}, {"name": "Failed Food Item Details View - Missing Food Item ID", "description": "Verify that the system does not display details if the food item ID is missing", "input": {"customerId": "customer_67890", "foodItemId": null}, "expected": {"outcome": "Food item details display failed", "status": "Missing Food Item ID"}}, {"name": "Edge Case - View Food Item Details with Special Characters", "description": "Verify that the system can handle food item IDs with special characters", "input": {"customerId": "customer_67890", "foodItemId": "food_!@#$%"}, "expected": {"outcome": "Food item details display failed", "status": "Invalid Food Item ID"}}], "bert_score": {"Precision": 0.8909912109375, "Recall": 0.9142046570777893, "F1": 0.9024487137794495}}
{"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Switch to Delivery", "description": "Verify that a customer can successfully switch to delivery mode and see the updated restaurant list.", "input": {"userId": "customer_67890", "currentMode": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Switch successful", "status": "Restaurant list updated for delivery"}}, {"name": "Successful Switch to Pickup", "description": "Verify that a customer can successfully switch to pickup mode and see the updated restaurant list.", "input": {"userId": "customer_67890", "currentMode": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Switch successful", "status": "Restaurant list updated for pickup"}}, {"name": "Failed Switch Due to Network Error", "description": "Verify that a customer cannot switch modes if there is a network error.", "input": {"userId": "customer_67890", "currentMode": "Delivery", "switchTo": "Pickup", "networkStatus": "Disconnected"}, "expected": {"outcome": "Switch failed", "status": "Network error"}}, {"name": "Invalid Mode Switch Attempt", "description": "Verify that a customer cannot switch to an invalid mode.", "input": {"userId": "customer_67890", "currentMode": "Delivery", "switchTo": "InvalidMode"}, "expected": {"outcome": "Switch failed", "status": "Invalid mode"}}, {"name": "Edge Case: Rapid Mode Switching", "description": "Verify system stability when a customer rapidly switches between delivery and pickup modes.", "input": {"userId": "customer_67890", "switchSequence": ["Delivery", "Pickup", "Delivery", "Pickup"]}, "expected": {"outcome": "Switch successful", "status": "System stable, restaurant list updated accordingly"}}], "bert_score": {"Precision": 0.9274938106536865, "Recall": 0.9420650601387024, "F1": 0.9347226619720459}}
{"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Switch to Pickup", "description": "Verify that a customer can successfully switch from delivery to pickup while browsing the menu", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch successful", "status": "Pickup option selected", "estimatedTime": "15 minutes"}}, {"name": "Successful Switch to Delivery", "description": "Verify that a customer can successfully switch from pickup to delivery while browsing the menu", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "currentOption": "Pickup", "newOption": "Delivery"}, "expected": {"outcome": "Switch successful", "status": "Delivery option selected", "estimatedTime": "30 minutes"}}, {"name": "Failed Switch Due to Invalid Option", "description": "Verify that a customer cannot switch to an invalid option while browsing the menu", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "currentOption": "Delivery", "newOption": "InvalidOption"}, "expected": {"outcome": "Switch failed", "status": "Invalid option selected"}}, {"name": "Failed Switch Due to Network Error", "description": "Verify that a customer receives an error message when a network issue occurs during the switch", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch failed", "status": "Network error"}}, {"name": "Switch with No Change", "description": "Verify that no change occurs when the customer selects the same option they are currently on", "input": {"customerId": "customer_67890", "restaurantId": "restaurant_123", "currentOption": "Delivery", "newOption": "Delivery"}, "expected": {"outcome": "No change", "status": "Same option selected"}}], "bert_score": {"Precision": 0.92330402135849, "Recall": 0.9314887523651123, "F1": 0.9273783564567566}}
{"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Switch to Pickup", "description": "Verify that a customer can successfully switch from delivery to pickup after adding items to the cart", "input": {"userId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch successful", "status": "Pickup option selected", "estimatedTime": "15 minutes"}}, {"name": "Successful Switch to Delivery", "description": "Verify that a customer can successfully switch from pickup to delivery after adding items to the cart", "input": {"userId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Pickup", "newOption": "Delivery"}, "expected": {"outcome": "Switch successful", "status": "Delivery option selected", "estimatedTime": "30 minutes"}}, {"name": "Failed Switch Due to Empty Cart", "description": "Verify that a customer cannot switch between delivery and pickup if the cart is empty", "input": {"userId": "customer_67890", "cartItems": [], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch failed", "status": "Cart is empty"}}, {"name": "Invalid Option Selection", "description": "Verify that a customer cannot switch to an invalid option", "input": {"userId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Delivery", "newOption": "InvalidOption"}, "expected": {"outcome": "Switch failed", "status": "Invalid option selected"}}, {"name": "Switch Without Login", "description": "Verify that a customer cannot switch between delivery and pickup without logging in", "input": {"userId": null, "cartItems": ["Pizza", "Burger"], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch failed", "status": "User not logged in"}}], "bert_score": {"Precision": 0.9260090589523315, "Recall": 0.9196251630783081, "F1": 0.9228060245513916}}
{"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Switch to Pickup", "description": "Verify that a customer can successfully switch from delivery to pickup at the payment stage", "input": {"customerId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch successful", "status": "Pickup option selected", "totalCost": "Reduced", "estimatedTime": "Updated"}}, {"name": "Successful Switch to Delivery", "description": "Verify that a customer can successfully switch from pickup to delivery at the payment stage", "input": {"customerId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Pickup", "newOption": "Delivery"}, "expected": {"outcome": "Switch successful", "status": "Delivery option selected", "totalCost": "Increased", "estimatedTime": "Updated"}}, {"name": "Failed Switch Due to Empty Cart", "description": "Verify that a customer cannot switch between delivery and pickup if the cart is empty", "input": {"customerId": "customer_67890", "cartItems": [], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch failed", "status": "Cart is empty"}}, {"name": "Failed Switch Due to Invalid Option", "description": "Verify that a customer cannot switch to an invalid option at the payment stage", "input": {"customerId": "customer_67890", "cartItems": ["Pizza", "Burger"], "currentOption": "Delivery", "newOption": "InvalidOption"}, "expected": {"outcome": "Switch failed", "status": "Invalid option selected"}}, {"name": "Edge Case: Switch with Maximum Cart Items", "description": "Verify that a customer can switch between delivery and pickup with maximum allowed cart items", "input": {"customerId": "customer_67890", "cartItems": ["Item1", "Item2", "Item3", "Item4", "Item5", "Item6", "Item7", "Item8", "Item9", "Item10"], "currentOption": "Delivery", "newOption": "Pickup"}, "expected": {"outcome": "Switch successful", "status": "Pickup option selected", "totalCost": "Reduced", "estimatedTime": "Updated"}}], "bert_score": {"Precision": 0.9219591617584229, "Recall": 0.9176027774810791, "F1": 0.9197757840156555}}
