{"usecase": {"name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}], "GPT4o_testcases": [{"name": "Successful Train Booking", "description": "Verify that a registered customer can successfully book a train ticket", "input": {"customerId": "cust_123", "fromStation": "Dhaka", "toStation": "Chittagong", "date": "2024-03-15", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "valid_card_details"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Train Search", "description": "Verify that the system handles invalid search parameters", "input": {"customerId": "cust_123", "fromStation": "Dhaka", "toStation": "Dhaka", "date": "2024-03-15", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "valid_card_details"}, "expected": {"outcome": "Search failed", "status": "Invalid source and destination"}}, {"name": "Past Date Search", "description": "Verify that the system handles searches for past dates", "input": {"customerId": "cust_123", "fromStation": "Dhaka", "toStation": "Chittagong", "date": "2023-03-15", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "valid_card_details"}, "expected": {"outcome": "Search failed", "status": "Invalid date"}}, {"name": "No Available Trains", "description": "Verify that the system handles scenarios where no trains are available", "input": {"customerId": "cust_123", "fromStation": "Dhaka", "toStation": "Chittagong", "date": "2024-03-31", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "valid_card_details"}, "expected": {"outcome": "Search failed", "status": "No trains available"}}, {"name": "Invalid Payment Information", "description": "Verify that the system handles invalid payment information", "input": {"customerId": "cust_123", "fromStation": "Dhaka", "toStation": "Chittagong", "date": "2024-03-15", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "invalid_card_details"}, "expected": {"outcome": "Payment failed", "status": "Invalid payment information"}}, {"name": "Unregistered User Booking", "description": "Verify that unregistered users cannot book tickets", "input": {"customerId": "unregistered_user", "fromStation": "Dhaka", "toStation": "Chittagong", "date": "2024-03-15", "trainType": "Express", "numberOfTickets": 2, "paymentInfo": "valid_card_details"}, "expected": {"outcome": "Booking failed", "status": "User not registered"}}]}
{"usecase": {"name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Ticket Booking", "description": "Verify that a registered user can successfully book tickets for an event.", "input": {"userId": "user_123", "eventName": "Concert A", "location": "New York", "date": "2024-03-15", "numTickets": 2, "seatType": "Balcony", "paymentInfo": "Valid Card Details"}, "expected": {"outcome": "Booking successful", "status": "Confirmed", "bookingHistoryVisibility": true}}, {"name": "Event Not Found", "description": "Verify the system behavior when searching for a non-existent event.", "input": {"userId": "user_123", "eventName": "NonExistent Event", "location": "Any", "date": "Any", "numTickets": 2, "seatType": "Any", "paymentInfo": "N/A"}, "expected": {"outcome": "Event not found", "status": "No results"}}, {"name": "Invalid Ticket Number", "description": "Verify the system behavior when an invalid number of tickets is selected (e.g., zero, negative, or exceeding the available limit).", "input": {"userId": "user_123", "eventName": "Concert A", "location": "New York", "date": "2024-03-15", "numTickets": 0, "seatType": "Balcony", "paymentInfo": "N/A"}, "expected": {"outcome": "Invalid ticket number", "status": "Error"}}, {"name": "Insufficient Balance", "description": "Verify the system behavior when the user has insufficient balance for the ticket purchase.", "input": {"userId": "user_456", "eventName": "Concert B", "location": "London", "date": "2024-04-20", "numTickets": 2, "seatType": "Front Row", "paymentInfo": "Insufficient Funds"}, "expected": {"outcome": "Payment failed", "status": "Declined"}}, {"name": "Past Event Booking", "description": "Verify the system behavior when attempting to book tickets for a past event.", "input": {"userId": "user_123", "eventName": "Past Concert", "location": "Paris", "date": "2023-12-25", "numTickets": 2, "seatType": "Any", "paymentInfo": "N/A"}, "expected": {"outcome": "Booking failed", "status": "Past Event"}}, {"name": "Sold Out Event", "description": "Verify the system behavior when attempting to book tickets for a sold-out event.", "input": {"userId": "user_789", "eventName": "Sold Out Show", "location": "Tokyo", "date": "2024-05-10", "numTickets": 2, "seatType": "Any", "paymentInfo": "N/A"}, "expected": {"outcome": "Booking failed", "status": "Sold Out"}}]}
{"usecase": {"name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Successful One Way Ticket Search", "description": "Verify that the system returns available flights for a valid one way trip search", "input": {"tripType": "One Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": null, "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Available flights found"}}, {"name": "One Way Ticket Search with Invalid Cities", "description": "Verify that the system handles invalid city inputs gracefully", "input": {"tripType": "One Way", "fromCity": "Invalid City", "toCity": "Another Invalid City", "departureDate": "2024-03-15", "returnDate": null, "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid city name"}}, {"name": "One Way Ticket Search with Past Date", "description": "Verify that the system handles past departure dates correctly", "input": {"tripType": "One Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2023-03-15", "returnDate": null, "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Past date selected"}}, {"name": "One Way Ticket Search with Zero Passengers", "description": "Verify that the system handles zero passenger input correctly", "input": {"tripType": "One Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": null, "passengerCount": 0, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid passenger count"}}, {"name": "One Way Ticket Search with Same City", "description": "Verify that the system handles same city input for departure and arrival", "input": {"tripType": "One Way", "fromCity": "Dhaka", "toCity": "Dhaka", "departureDate": "2024-03-15", "returnDate": null, "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Same departure and arrival city"}}, {"name": "One Way Ticket Search with Maximum Passengers", "description": "Verify that the system handles maximum passenger input correctly", "input": {"tripType": "One Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": null, "passengerCount": 9, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Available flights found"}}]}
{"usecase": {"name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Successful Round Way Ticket Search", "description": "Verify that the system successfully searches for available round way tickets with valid input", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": "2024-03-22", "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Available flights found"}}, {"name": "Round Way Ticket Search with Same City", "description": "Verify the system behavior when the departure and arrival cities are the same", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "Dhaka", "departureDate": "2024-03-15", "returnDate": "2024-03-22", "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid city selection"}}, {"name": "Round Way Ticket Search with Past Dates", "description": "Verify the system behavior when past dates are selected for departure or return", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2023-03-15", "returnDate": "2023-03-22", "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid date selection"}}, {"name": "Round Way Ticket Search with Invalid Passenger Count", "description": "Verify the system behavior when an invalid passenger count is entered (e.g., zero or negative)", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": "2024-03-22", "passengerCount": 0, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid passenger count"}}, {"name": "Round Way Ticket Search with No Flights Available", "description": "Verify the system behavior when no flights are available for the selected criteria", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "Timbuktu", "departureDate": "2024-03-15", "returnDate": "2024-03-22", "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "No flights found"}}, {"name": "Round Way Ticket Search with Return Date Before Departure Date", "description": "Verify the system behavior when the return date is before the departure date", "input": {"tripType": "Round Way", "fromCity": "Dhaka", "toCity": "New York", "departureDate": "2024-03-15", "returnDate": "2024-03-10", "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid date selection"}}]}
{"usecase": {"name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Multi-City Search with One Stop", "description": "Verify successful search with one stop", "input": {"tripType": "Multi Way", "flights": [{"from": "DAC", "to": "DXB", "date": "2024-05-01"}, {"from": "DXB", "to": "JFK", "date": "2024-05-03"}], "passengerCount": 2, "serviceClass": "Economy"}, "expected": {"outcome": "Search successful", "status": "Results displayed"}}, {"name": "Successful Multi-City Search with Changed City", "description": "Verify successful search with changed city", "input": {"tripType": "Multi Way", "flights": [{"from": "DAC", "to": "DXB", "date": "2024-05-01"}, {"from": "AUH", "to": "JFK", "date": "2024-05-03"}], "passengerCount": 1, "serviceClass": "Business"}, "expected": {"outcome": "Search successful", "status": "Results displayed"}}, {"name": "Failed Search with Same Departure and Arrival City", "description": "Verify search fails with same departure and arrival city", "input": {"tripType": "Multi Way", "flights": [{"from": "DAC", "to": "DAC", "date": "2024-05-01"}], "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid input"}}, {"name": "Failed Search with Invalid Date", "description": "Verify search fails with invalid date", "input": {"tripType": "Multi Way", "flights": [{"from": "DAC", "to": "DXB", "date": "invalid-date"}], "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid date"}}, {"name": "Failed Search with Empty Fields", "description": "Verify search fails with empty fields", "input": {"tripType": "Multi Way", "flights": [{"from": "", "to": "DXB", "date": "2024-05-01"}], "passengerCount": 1, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Missing information"}}, {"name": "Search with Zero Passengers", "description": "Verify search fails with zero passengers", "input": {"tripType": "Multi Way", "flights": [{"from": "DAC", "to": "DXB", "date": "2024-05-01"}], "passengerCount": 0, "serviceClass": "Economy"}, "expected": {"outcome": "Search failed", "status": "Invalid passenger count"}}]}
{"usecase": {"name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Event Search with Valid Location and Date Range", "description": "Verify that the system returns relevant events when a valid location and date range are provided.", "input": {"location": "Dhaka", "fromDate": "2024-01-01", "toDate": "2024-01-15"}, "expected": {"outcome": "Events found within the specified criteria", "status": "Success"}}, {"name": "Event Search with No Results", "description": "Verify that the system handles cases where no events match the specified location and date range.", "input": {"location": "Dhaka", "fromDate": "2024-01-01", "toDate": "2024-01-02"}, "expected": {"outcome": "No events found", "status": "No Results"}}, {"name": "Event Search with Invalid Date Range", "description": "Verify that the system handles invalid date ranges gracefully.", "input": {"location": "Dhaka", "fromDate": "2024-01-15", "toDate": "2024-01-01"}, "expected": {"outcome": "Invalid date range", "status": "Error"}}, {"name": "Event Search with Invalid Location", "description": "Verify that the system handles invalid location input.", "input": {"location": "", "fromDate": "2024-01-01", "toDate": "2024-01-15"}, "expected": {"outcome": "Invalid location", "status": "Error"}}, {"name": "Event Search with Past Date Range", "description": "Verify that the system handles searches for past events.", "input": {"location": "Dhaka", "fromDate": "2023-01-01", "toDate": "2023-01-15"}, "expected": {"outcome": "Events found within the specified criteria", "status": "Success"}}, {"name": "Event Search with Future Date Range", "description": "Verify that the system handles searches for future events.", "input": {"location": "Dhaka", "fromDate": "2025-01-01", "toDate": "2025-01-15"}, "expected": {"outcome": "Events found within the specified criteria", "status": "Success"}}, {"name": "Event Search with Boundary Date Range", "description": "Verify the system behavior with date range on the boundary of allowed values.", "input": {"location": "Dhaka", "fromDate": "2024-01-01", "toDate": "2024-01-01"}, "expected": {"outcome": "Events found within the specified criteria", "status": "Success"}}, {"name": "Event Search with Special Characters in Location", "description": "Verify that the system handles special characters in location input.", "input": {"location": "Dhaka!", "fromDate": "2024-01-01", "toDate": "2024-01-15"}, "expected": {"outcome": "Invalid location", "status": "Error"}}]}
{"usecase": {"name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}], "GPT4o_testcases": [{"name": "Successful Launch Ticket Booking", "description": "Verify that a user can successfully book a launch ticket with valid inputs.", "input": {"origin": "Dhaka", "destination": "Barisal", "journeyDate": "2024-03-15", "launchName": "MV Greenline", "seats": ["A1", "A2"], "phoneNumber": "01712345678", "emailAddress": "test@example.com", "passengers": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}, {"firstName": "Jane", "lastName": "Doe", "gender": "Female"}], "paymentMethod": "Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Launch Ticket Booking with Invalid Phone Number", "description": "Verify that a user cannot book a launch ticket with an invalid phone number.", "input": {"origin": "Dhaka", "destination": "Barisal", "journeyDate": "2024-03-15", "launchName": "MV Greenline", "seats": ["A1", "A2"], "phoneNumber": "invalid", "emailAddress": "test@example.com", "passengers": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Card"}, "expected": {"outcome": "Booking failed", "status": "Invalid phone number"}}, {"name": "Launch Ticket Booking with No Seats Selected", "description": "Verify that a user cannot book a launch ticket without selecting any seats.", "input": {"origin": "Dhaka", "destination": "Barisal", "journeyDate": "2024-03-15", "launchName": "MV Greenline", "seats": [], "phoneNumber": "01712345678", "emailAddress": "test@example.com", "passengers": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Card"}, "expected": {"outcome": "Booking failed", "status": "No seats selected"}}, {"name": "Launch Ticket Booking with Past Date", "description": "Verify that a user cannot book a launch ticket for a past date.", "input": {"origin": "Dhaka", "destination": "Barisal", "journeyDate": "2023-03-15", "launchName": "MV Greenline", "seats": ["A1", "A2"], "phoneNumber": "01712345678", "emailAddress": "test@example.com", "passengers": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Card"}, "expected": {"outcome": "Booking failed", "status": "Invalid date"}}, {"name": "Launch Ticket Booking with No Available Seats", "description": "Verify that a user cannot book a launch ticket if there are no available seats.", "input": {"origin": "Dhaka", "destination": "Barisal", "journeyDate": "2024-03-15", "launchName": "MV Greenline", "seats": ["A1", "A2"], "phoneNumber": "01712345678", "emailAddress": "test@example.com", "passengers": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "paymentMethod": "Card"}, "expected": {"outcome": "Booking failed", "status": "No seats available"}}]}
{"usecase": {"name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}], "GPT4o_testcases": [{"name": "Successful Ticket Booking", "description": "Verify that a user can successfully book a park ticket.", "input": {"location": "Orlando", "parkName": "Walt Disney World", "ticketType": "Adult", "quantity": 2, "entryDate": "2024-03-15", "contactDetails": {"name": "Test User", "email": "test@example.com", "phone": "1234567890"}, "passengerDetails": [{"name": "Passenger 1", "age": 30}, {"name": "Passenger 2", "age": 25}], "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Ticket Booking with Invalid Date", "description": "Verify that a user cannot book a ticket with a past date.", "input": {"location": "Orlando", "parkName": "Walt Disney World", "ticketType": "Adult", "quantity": 2, "entryDate": "2023-03-15", "contactDetails": {"name": "Test User", "email": "test@example.com", "phone": "1234567890"}, "passengerDetails": [{"name": "Passenger 1", "age": 30}, {"name": "Passenger 2", "age": 25}], "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Invalid Date"}}, {"name": "Ticket Booking with No Tickets Available", "description": "Verify that a user cannot book a ticket if no tickets are available.", "input": {"location": "Orlando", "parkName": "Walt Disney World", "ticketType": "Adult", "quantity": 1000, "entryDate": "2024-03-15", "contactDetails": {"name": "Test User", "email": "test@example.com", "phone": "1234567890"}, "passengerDetails": [], "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "No Tickets Available"}}, {"name": "Ticket Booking with Invalid Payment Method", "description": "Verify that a user cannot book a ticket with an invalid payment method.", "input": {"location": "Orlando", "parkName": "Walt Disney World", "ticketType": "Adult", "quantity": 2, "entryDate": "2024-03-15", "contactDetails": {"name": "Test User", "email": "test@example.com", "phone": "1234567890"}, "passengerDetails": [{"name": "Passenger 1", "age": 30}, {"name": "Passenger 2", "age": 25}], "paymentMethod": "Invalid Payment"}, "expected": {"outcome": "Booking failed", "status": "Invalid Payment Method"}}, {"name": "Ticket Booking with Empty Location", "description": "Verify that a user cannot book a ticket without specifying a location.", "input": {"location": "", "parkName": "Walt Disney World", "ticketType": "Adult", "quantity": 2, "entryDate": "2024-03-15", "contactDetails": {"name": "Test User", "email": "test@example.com", "phone": "1234567890"}, "passengerDetails": [], "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking failed", "status": "Location Required"}}]}
{"usecase": {"name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}], "GPT4o_testcases": [{"name": "Successful Bus Booking", "description": "Verify that a customer can successfully book a bus ticket with valid inputs.", "input": {"from": "Dhaka", "to": "Chittagong", "date": "2024-03-15", "busType": "AC", "seatNumber": "A1", "contactName": "Test User", "contactMobile": "01712345678", "email": "test@example.com"}, "expected": {"outcome": "Booking successful", "status": "Ticket Confirmed"}}, {"name": "Invalid Input - Empty Fields", "description": "Verify that booking fails with empty required fields.", "input": {"from": "", "to": "Chittagong", "date": "2024-03-15", "busType": "AC", "seatNumber": "A1", "contactName": "Test User", "contactMobile": "01712345678", "email": "test@example.com"}, "expected": {"outcome": "Booking failed", "status": "Invalid Input"}}, {"name": "Invalid Input - Invalid Date", "description": "Verify that booking fails with past date.", "input": {"from": "Dhaka", "to": "Chittagong", "date": "2023-03-15", "busType": "AC", "seatNumber": "A1", "contactName": "Test User", "contactMobile": "01712345678", "email": "test@example.com"}, "expected": {"outcome": "Booking failed", "status": "Invalid Date"}}, {"name": "No Available Buses", "description": "Verify the scenario when no buses are available for the selected route and date.", "input": {"from": "Dhaka", "to": "Sylhet", "date": "2024-03-30", "busType": "AC", "seatNumber": "A1", "contactName": "Test User", "contactMobile": "01712345678", "email": "test@example.com"}, "expected": {"outcome": "No buses found", "status": "No Available Buses"}}, {"name": "Duplicate Seat Selection", "description": "Verify that booking fails when selecting an already booked seat.", "input": {"from": "Dhaka", "to": "Chittagong", "date": "2024-03-15", "busType": "AC", "seatNumber": "B2", "contactName": "Test User", "contactMobile": "01712345678", "email": "test@example.com"}, "expected": {"outcome": "Booking failed", "status": "Seat Unavailable"}}, {"name": "Invalid Contact Information", "description": "Verify that booking fails with invalid contact information.", "input": {"from": "Dhaka", "to": "Chittagong", "date": "2024-03-15", "busType": "AC", "seatNumber": "A1", "contactName": "Test User", "contactMobile": "invalid-number", "email": "test@example.com"}, "expected": {"outcome": "Booking failed", "status": "Invalid Contact Information"}}]}
{"usecase": {"name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}], "GPT4o_testcases": [{"name": "Successful Payment with Sufficient Balance", "description": "Verify that payment is successful when sufficient balance is available", "input": {"paymentMethod": "Credit Card", "otp": "123456", "balance": 1000, "ticketPrice": 500}, "expected": {"outcome": "Payment Successful", "status": "Confirmed"}}, {"name": "Payment Failure with Insufficient Balance", "description": "Verify that payment fails when insufficient balance is available", "input": {"paymentMethod": "Debit Card", "otp": "654321", "balance": 200, "ticketPrice": 500}, "expected": {"outcome": "Payment Failed", "status": "Insufficient Balance"}}, {"name": "Payment Failure with Invalid OTP", "description": "Verify that payment fails with an invalid OTP", "input": {"paymentMethod": "Mobile Wallet", "otp": "000000", "balance": 1000, "ticketPrice": 500}, "expected": {"outcome": "Payment Failed", "status": "Invalid OTP"}}, {"name": "Payment Failure with Invalid Payment Method", "description": "Verify that payment fails with an invalid payment method", "input": {"paymentMethod": "Invalid Method", "otp": "123456", "balance": 1000, "ticketPrice": 500}, "expected": {"outcome": "Payment Failed", "status": "Invalid Payment Method"}}, {"name": "Successful Payment with Zero Ticket Price", "description": "Verify that payment is successful with a zero ticket price (edge case)", "input": {"paymentMethod": "Credit Card", "otp": "123456", "balance": 1000, "ticketPrice": 0}, "expected": {"outcome": "Payment Successful", "status": "Confirmed"}}, {"name": "Payment with Expired Card", "description": "Verify payment fails with an expired card", "input": {"paymentMethod": "Credit Card", "otp": "123456", "balance": 1000, "ticketPrice": 500, "cardExpiry": "2020-01-01"}, "expected": {"outcome": "Payment Failed", "status": "Expired Card"}}]}
{"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}], "GPT4o_testcases": [{"name": "Successful Login with Valid Credentials", "description": "Verify that a user can successfully log in with valid email and password.", "input": {"email": "validuser@example.com", "password": "correctPassword123"}, "expected": {"outcome": "Login successful", "status": "Redirected to home screen"}}, {"name": "Failed Login with Invalid Email", "description": "Verify that a user cannot log in with an invalid email address.", "input": {"email": "invalid.email", "password": "correctPassword123"}, "expected": {"outcome": "Login failed", "status": "Invalid email format"}}, {"name": "Failed Login with Invalid Password", "description": "Verify that a user cannot log in with an incorrect password.", "input": {"email": "validuser@example.com", "password": "wrongPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "Failed Login with Empty Email and Password", "description": "Verify that a user cannot log in with empty email and password fields.", "input": {"email": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Email and password required"}}, {"name": "Login with Valid Email and Empty Password", "description": "Verify the system behavior when a user attempts to log in with a valid email but an empty password.", "input": {"email": "validuser@example.com", "password": ""}, "expected": {"outcome": "Login failed", "status": "Password required"}}, {"name": "Login with Empty Email and Valid Password", "description": "Verify the system behavior when a user attempts to log in with an empty email but a valid password.", "input": {"email": "", "password": "correctPassword123"}, "expected": {"outcome": "Login failed", "status": "Email required"}}, {"name": "Login with Leading/Trailing Spaces in Email/Password", "description": "Verify that login fails with leading or trailing spaces in email/password.", "input": {"email": "  validuser@example.com ", "password": " correctPassword123  "}, "expected": {"outcome": "Login failed", "status": "Invalid email or password"}}]}
{"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}], "GPT4o_testcases": [{"name": "Successful SignUp", "description": "Verify that a user can successfully sign up with valid details.", "input": {"fullName": "Test User", "email": "testuser@example.com", "phone": "+15551234567", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": {"outcome": "Account created successfully", "status": "Verification email sent"}}, {"name": "SignUp with Existing Email", "description": "Verify that sign-up fails when using an already registered email.", "input": {"fullName": "Test User", "email": "existinguser@example.com", "phone": "+15551234567", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": {"outcome": "Sign up failed", "status": "Email already registered"}}, {"name": "SignUp with Existing Phone Number", "description": "Verify that sign-up fails when using an already registered phone number.", "input": {"fullName": "Test User", "email": "testuser2@example.com", "phone": "+15559876543", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": {"outcome": "Sign up failed", "status": "Phone number already registered"}}, {"name": "SignUp with Mismatched Passwords", "description": "Verify that sign-up fails when passwords do not match.", "input": {"fullName": "Test User", "email": "testuser3@example.com", "phone": "+15551237890", "password": "SecurePassword123", "confirmPassword": "WrongPassword"}, "expected": {"outcome": "Sign up failed", "status": "Passwords do not match"}}, {"name": "SignUp with Invalid Email Format", "description": "Verify that sign-up fails when email format is invalid.", "input": {"fullName": "Test User", "email": "invalid.email", "phone": "+15551237890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": {"outcome": "Sign up failed", "status": "Invalid email format"}}, {"name": "SignUp with Empty Fields", "description": "Verify that sign-up fails when required fields are empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": {"outcome": "Sign up failed", "status": "Required fields cannot be empty"}}, {"name": "SignUp with Weak Password", "description": "Verify that sign-up fails when the password is too weak.", "input": {"fullName": "Test User", "email": "testuser4@example.com", "phone": "+15551234568", "password": "weak", "confirmPassword": "weak"}, "expected": {"outcome": "Sign up failed", "status": "Password too weak"}}]}
{"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}], "GPT4o_testcases": [{"name": "Add Existing Splitwise User as Friend", "description": "Verify adding a friend who is already a registered Splitwise user.", "input": {"userId": "user_123", "friendIdentifier": "existing_splitwise_user@example.com"}, "expected": {"outcome": "Friend added successfully", "status": "Friend Added"}}, {"name": "Add Contact from Phone as Friend", "description": "Verify adding a friend from the user's phone contact list.", "input": {"userId": "user_123", "friendIdentifier": "01712345678"}, "expected": {"outcome": "Friend added successfully", "status": "Friend Added"}}, {"name": "Invite New User as Friend", "description": "Verify inviting a friend who is not a Splitwise user.", "input": {"userId": "user_123", "friendIdentifier": "new_user_number@example.com"}, "expected": {"outcome": "App link sent successfully", "status": "Invite Sent"}}, {"name": "Add Friend with Invalid Input - Empty Input", "description": "Verify handling of empty input when adding a friend.", "input": {"userId": "user_123", "friendIdentifier": ""}, "expected": {"outcome": "Friend addition failed", "status": "Invalid Input"}}, {"name": "Add Friend with Invalid Input - Invalid Email", "description": "Verify handling of invalid email format when adding a friend.", "input": {"userId": "user_123", "friendIdentifier": "invalid_email"}, "expected": {"outcome": "Friend addition failed", "status": "Invalid Input"}}, {"name": "Add Friend with Invalid Input - Invalid Phone Number", "description": "Verify handling of invalid phone number format when adding a friend.", "input": {"userId": "user_123", "friendIdentifier": "123"}, "expected": {"outcome": "Friend addition failed", "status": "Invalid Input"}}, {"name": "Add Self as Friend", "description": "Verify handling of attempting to add oneself as a friend.", "input": {"userId": "user_123", "friendIdentifier": "user_123"}, "expected": {"outcome": "Friend addition failed", "status": "Cannot Add Self"}}, {"name": "Add Duplicate Friend", "description": "Verify handling of attempting to add a friend who is already added.", "input": {"userId": "user_123", "friendIdentifier": "existing_friend@example.com"}, "expected": {"outcome": "Friend addition failed", "status": "Friend Already Exists"}}]}
{"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}], "GPT4o_testcases": [{"name": "Successful Group Creation with All Fields", "description": "Verify successful group creation with all fields provided.", "input": {"groupName": "Family Trip", "groupPhoto": "photo.jpg", "groupType": "Trip", "startDate": "2024-01-01", "endDate": "2024-01-05"}, "expected": {"outcome": "Group created successfully", "status": "Group Created"}}, {"name": "Successful Group Creation without Photo and Type", "description": "Verify successful group creation without optional fields.", "input": {"groupName": "Housemates", "groupPhoto": null, "groupType": null, "startDate": null, "endDate": null}, "expected": {"outcome": "Group created successfully", "status": "Group Created"}}, {"name": "Successful Group Creation with Home Type", "description": "Verify successful group creation with 'Home' type.", "input": {"groupName": "Apartment 202", "groupPhoto": null, "groupType": "Home", "startDate": null, "endDate": null}, "expected": {"outcome": "Group created successfully", "status": "Group Created"}}, {"name": "Failed Group Creation: Empty Group Name", "description": "Verify group creation fails with an empty group name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Other", "startDate": null, "endDate": null}, "expected": {"outcome": "Group creation failed", "status": "Invalid Group Name"}}, {"name": "Failed Group Creation: Trip Type without Dates", "description": "Verify group creation fails with 'Trip' type and missing dates.", "input": {"groupName": "Summer Vacation", "groupPhoto": null, "groupType": "Trip", "startDate": null, "endDate": null}, "expected": {"outcome": "Group creation failed", "status": "Missing Dates"}}, {"name": "Failed Group Creation: Invalid Start Date", "description": "Verify group creation fails with an invalid start date.", "input": {"groupName": "Winter Getaway", "groupPhoto": null, "groupType": "Trip", "startDate": "invalid-date", "endDate": "2024-02-15"}, "expected": {"outcome": "Group creation failed", "status": "Invalid Date Format"}}, {"name": "Failed Group Creation: End Date Before Start Date", "description": "Verify group creation fails if the end date is before the start date.", "input": {"groupName": "Spring Break", "groupPhoto": null, "groupType": "Trip", "startDate": "2024-03-20", "endDate": "2024-03-15"}, "expected": {"outcome": "Group creation failed", "status": "Invalid Date Range"}}]}
{"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}], "GPT4o_testcases": [{"name": "Add Expense with Equal Split", "description": "Verify adding an expense with equal split among friends.", "input": {"friends": ["friend1", "friend2", "friend3"], "description": "Lunch", "totalAmount": 30.0, "paidBy": "friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense added successfully", "status": "Expense Added"}}, {"name": "Add Expense with Unequal Split", "description": "Verify adding an expense with unequal split among friends.", "input": {"friends": ["friend1", "friend2"], "description": "Dinner", "totalAmount": 50.0, "paidBy": "friend1", "splitCategory": "Unequally", "splitAmounts": {"friend1": 30.0, "friend2": 20.0}}, "expected": {"outcome": "Expense added successfully", "status": "Expense Added"}}, {"name": "Add Expense with Percentage Split", "description": "Verify adding an expense with percentage split among friends.", "input": {"friends": ["friend1", "friend2"], "description": "Movie Tickets", "totalAmount": 20.0, "paidBy": "friend1", "splitCategory": "By Percentages", "splitPercentages": {"friend1": 60, "friend2": 40}}, "expected": {"outcome": "Expense added successfully", "status": "Expense Added"}}, {"name": "Add Expense with Shares Split", "description": "Verify adding an expense with shares split among friends.", "input": {"friends": ["friend1", "friend2", "friend3"], "description": "Grocery", "totalAmount": 60.0, "paidBy": "friend1", "splitCategory": "By Shares", "splitShares": {"friend1": 2, "friend2": 1, "friend3": 3}}, "expected": {"outcome": "Expense added successfully", "status": "Expense Added"}}, {"name": "Add Expense with Adjustments", "description": "Verify adding an expense with adjustments.", "input": {"friends": ["friend1", "friend2"], "description": "Trip", "totalAmount": 100.0, "paidBy": "friend1", "splitCategory": "By Adjustments", "splitAdjustments": {"friend1": 60.0, "friend2": 40.0}}, "expected": {"outcome": "Expense added successfully", "status": "Expense Added"}}, {"name": "Add Expense with Empty Description", "description": "Verify adding an expense with an empty description.", "input": {"friends": ["friend1", "friend2"], "description": "", "totalAmount": 20.0, "paidBy": "friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "Description cannot be empty"}}, {"name": "Add Expense with Zero Amount", "description": "Verify adding an expense with a zero total amount.", "input": {"friends": ["friend1", "friend2"], "description": "Test", "totalAmount": 0.0, "paidBy": "friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "Total amount must be greater than zero"}}, {"name": "Add Expense with No Friends Selected", "description": "Verify adding an expense without selecting any friends.", "input": {"friends": [], "description": "Test", "totalAmount": 20.0, "paidBy": "friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "At least one friend or group must be selected"}}, {"name": "Add Expense with Invalid Split Percentage", "description": "Verify adding an expense with invalid split percentages.", "input": {"friends": ["friend1", "friend2"], "description": "Test", "totalAmount": 20.0, "paidBy": "friend1", "splitCategory": "By Percentages", "splitPercentages": {"friend1": 70, "friend2": 20}}, "expected": {"outcome": "Expense addition failed", "status": "Percentage split must total 100"}}]}
{"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}], "GPT4o_testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities in chronological order.", "input": {"userId": "user_123", "activityCount": 5}, "expected": {"outcome": "Activity feed displayed successfully", "status": "Activities Loaded"}}, {"name": "View Empty Activity Feed", "description": "Verify the system behavior when the user has no recorded activities.", "input": {"userId": "user_456", "activityCount": 0}, "expected": {"outcome": "Empty activity feed displayed", "status": "No Activities Found"}}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by a specific type (e.g., expenses).", "input": {"userId": "user_123", "filterType": "expenses"}, "expected": {"outcome": "Activities filtered successfully", "status": "Filtered Activities Displayed"}}, {"name": "Filter Activities with Invalid Type", "description": "Verify system behavior when an invalid filter type is provided.", "input": {"userId": "user_123", "filterType": "invalid_type"}, "expected": {"outcome": "Invalid filter type", "status": "Filter Error"}}, {"name": "Search for Specific Activity", "description": "Verify that the user can search for a specific activity using a keyword.", "input": {"userId": "user_123", "searchKeyword": "Dinner"}, "expected": {"outcome": "Search results displayed", "status": "Search Successful"}}, {"name": "Search with No Results", "description": "Verify system behavior when the search keyword yields no results.", "input": {"userId": "user_123", "searchKeyword": "NonexistentActivity"}, "expected": {"outcome": "No search results found", "status": "No Matching Activities"}}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"userId": "user_123", "activityId": "activity_789", "updatedAmount": "15.00"}, "expected": {"outcome": "Activity updated successfully", "status": "Activity Edited"}}, {"name": "Edit Activity with Invalid ID", "description": "Verify system behavior when attempting to edit an activity with an invalid ID.", "input": {"userId": "user_123", "activityId": "invalid_id", "updatedAmount": "15.00"}, "expected": {"outcome": "Activity not found", "status": "Edit Failed"}}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity.", "input": {"userId": "user_123", "activityId": "activity_789"}, "expected": {"outcome": "Activity deleted successfully", "status": "Activity Deleted"}}, {"name": "Delete Activity with Invalid ID", "description": "Verify system behavior when attempting to delete an activity with an invalid ID.", "input": {"userId": "user_123", "activityId": "invalid_id"}, "expected": {"outcome": "Activity not found", "status": "Delete Failed"}}]}
{"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}], "GPT4o_testcases": [{"name": "View Groups with Balances", "description": "Verify that a user can view the groups they are part of and see the correct balances.", "input": {"userId": "user_123", "groups": [{"groupId": "group_1", "name": "Trip to Hawaii", "balance": 150.0}, {"groupId": "group_2", "name": "Weekend Getaway", "balance": -50.0}]}, "expected": {"outcome": "Groups and balances displayed correctly", "status": "Success"}}, {"name": "View Groups with No Balances", "description": "Verify that a user can view groups even if there are no outstanding balances.", "input": {"userId": "user_456", "groups": [{"groupId": "group_3", "name": "Lunch Buddies", "balance": 0.0}]}, "expected": {"outcome": "Groups with zero balances displayed correctly", "status": "Success"}}, {"name": "View No Groups", "description": "Verify the behavior when a user is not part of any groups.", "input": {"userId": "user_789", "groups": []}, "expected": {"outcome": "No groups message displayed", "status": "Success"}}, {"name": "View Non-Group Expenses", "description": "Verify that a user can view non-group expenses.", "input": {"userId": "user_123", "nonGroupExpenses": [{"expenseId": "expense_1", "description": "Dinner", "amount": 25.0}, {"expenseId": "expense_2", "description": "Movie Tickets", "amount": 15.0}]}, "expected": {"outcome": "Non-group expenses displayed correctly", "status": "Success"}}, {"name": "View No Non-Group Expenses", "description": "Verify the behavior when a user has no non-group expenses.", "input": {"userId": "user_456", "nonGroupExpenses": []}, "expected": {"outcome": "No non-group expenses message displayed", "status": "Success"}}, {"name": "Failed Group Retrieval", "description": "Verify the behavior when there is an error retrieving group information.", "input": {"userId": "user_789", "groups": null}, "expected": {"outcome": "Error message displayed", "status": "Error"}}, {"name": "Failed Non-Group Expense Retrieval", "description": "Verify the behavior when there is an error retrieving non-group expense information.", "input": {"userId": "user_123", "nonGroupExpenses": null}, "expected": {"outcome": "Error message displayed", "status": "Error"}}]}
{"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}], "GPT4o_testcases": [{"name": "View Group Details Successfully", "description": "Verify that a user can view group details successfully.", "input": {"userId": "user_123", "groupId": "group_456", "groupName": "Trip to Hawaii"}, "expected": {"outcome": "Group details displayed successfully", "status": "Success"}}, {"name": "View Group Details - Empty Group", "description": "Verify the behavior when viewing an empty group.", "input": {"userId": "user_123", "groupId": "group_789", "groupName": "Empty Group"}, "expected": {"outcome": "Group details displayed with no members or expenses", "status": "Success"}}, {"name": "View Group Details - Invalid Group ID", "description": "Verify the behavior when an invalid group ID is provided.", "input": {"userId": "user_123", "groupId": "invalid_group_id", "groupName": "Invalid Group"}, "expected": {"outcome": "Group not found", "status": "Error"}}, {"name": "View Group Details - User Not a Member", "description": "Verify the behavior when the user is not a member of the group.", "input": {"userId": "user_789", "groupId": "group_456", "groupName": "Trip to Hawaii"}, "expected": {"outcome": "User not authorized to view group details", "status": "Error"}}, {"name": "View Group Details - Large Number of Members", "description": "Verify the behavior when the group has a large number of members.", "input": {"userId": "user_123", "groupId": "group_999", "groupName": "Large Group", "memberCount": 1000}, "expected": {"outcome": "Group details displayed successfully with all members", "status": "Success"}}, {"name": "View Group Details - Large Number of Expenses", "description": "Verify the behavior when the group has a large number of expenses.", "input": {"userId": "user_123", "groupId": "group_888", "groupName": "Expense Heavy Group", "expenseCount": 1000}, "expected": {"outcome": "Group details displayed successfully with all expenses", "status": "Success"}}, {"name": "View Group Details - Group with Special Characters", "description": "Verify the behavior when the group name contains special characters.", "input": {"userId": "user_123", "groupId": "group_777", "groupName": "Trip to Hawaii & Fiji!"}, "expected": {"outcome": "Group details displayed successfully", "status": "Success"}}]}
{"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}], "GPT4o_testcases": [{"name": "View Friends List and Balances Successfully", "description": "Verify that a user can view their friends list and balances correctly.", "input": {"userId": "user_1", "friends": [{"friendId": "friend_2", "balance": 10.0}, {"friendId": "friend_3", "balance": -5.0}]}, "expected": {"outcome": "Friends list and balances displayed successfully", "friendsList": [{"friendId": "friend_2", "balance": 10.0}, {"friendId": "friend_3", "balance": -5.0}]}}, {"name": "View Empty Friends List", "description": "Verify the behavior when a user has no friends added.", "input": {"userId": "user_4", "friends": []}, "expected": {"outcome": "Empty friends list displayed", "friendsList": []}}, {"name": "View Detailed Transaction History", "description": "Verify that a user can view detailed transaction history with a specific friend.", "input": {"userId": "user_1", "friendId": "friend_2"}, "expected": {"outcome": "Transaction history displayed successfully", "transactions": [{"date": "2024-07-26", "amount": 5.0, "description": "Lunch"}, {"date": "2024-07-27", "amount": 5.0, "description": "Dinner"}]}}, {"name": "Make Successful Payment to Friend", "description": "Verify that a user can successfully make a payment to a friend.", "input": {"userId": "user_1", "friendId": "friend_2", "paymentAmount": 5.0, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Payment successful", "newBalance": 5.0}}, {"name": "Make Payment with Invalid Amount", "description": "Verify the behavior when a user tries to make a payment with an invalid amount (e.g., negative or zero).", "input": {"userId": "user_1", "friendId": "friend_2", "paymentAmount": -5.0, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Payment failed", "errorMessage": "Invalid payment amount"}}, {"name": "Make Payment with Invalid Payment Method", "description": "Verify the behavior when a user tries to make a payment with an invalid payment method.", "input": {"userId": "user_1", "friendId": "friend_2", "paymentAmount": 5.0, "paymentMethod": "Invalid Method"}, "expected": {"outcome": "Payment failed", "errorMessage": "Invalid payment method"}}]}
{"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}], "GPT4o_testcases": [{"name": "Successful Friend Detail View", "description": "Verify that a user can successfully view a friend's details.", "input": {"userId": "user_123", "friendId": "friend_456"}, "expected": {"outcome": "Friend details displayed successfully", "status": "Details Viewed"}}, {"name": "Friend Detail View with No Expenses", "description": "Verify that a user can view a friend's details even if there are no expenses between them.", "input": {"userId": "user_789", "friendId": "friend_012"}, "expected": {"outcome": "Friend details displayed successfully with no expenses", "status": "Details Viewed"}}, {"name": "Friend Detail View with No Mutual Groups", "description": "Verify that a user can view a friend's details even if they share no mutual groups.", "input": {"userId": "user_345", "friendId": "friend_678"}, "expected": {"outcome": "Friend details displayed successfully with no mutual groups", "status": "Details Viewed"}}, {"name": "Failed Friend Detail View - Invalid Friend ID", "description": "Verify that a user cannot view friend details with an invalid friend ID.", "input": {"userId": "user_123", "friendId": "invalid_friend_id"}, "expected": {"outcome": "Friend details retrieval failed", "status": "Invalid Friend ID"}}, {"name": "Failed Friend Detail View - User Not Logged In", "description": "Verify that a user cannot view friend details if not logged in.", "input": {"userId": null, "friendId": "friend_456"}, "expected": {"outcome": "Friend details retrieval failed", "status": "User Not Logged In"}}, {"name": "Friend Detail View - Blocked Friend", "description": "Verify the behavior when viewing details of a blocked friend.", "input": {"userId": "user_123", "friendId": "blocked_friend_789"}, "expected": {"outcome": "Limited friend details displayed or appropriate message shown", "status": "Blocked Friend"}}]}
{"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}], "GPT4o_testcases": [{"name": "Successful Email Update", "description": "Verify that a user can successfully update their email address.", "input": {"userId": "user_67890", "newEmail": "newemail@example.com", "currentPassword": "password123"}, "expected": {"outcome": "Email update successful", "status": "Email Updated"}}, {"name": "Failed Email Update - Incorrect Password", "description": "Verify that a user cannot update their email with an incorrect password.", "input": {"userId": "user_67890", "newEmail": "newemail@example.com", "currentPassword": "wrongpassword"}, "expected": {"outcome": "Email update failed", "status": "Incorrect Password"}}, {"name": "Failed Email Update - Invalid Email Format", "description": "Verify that a user cannot update their email with an invalid email format.", "input": {"userId": "user_67890", "newEmail": "invalidemail", "currentPassword": "password123"}, "expected": {"outcome": "Email update failed", "status": "Invalid Email Format"}}, {"name": "Successful Password Update", "description": "Verify that a user can successfully update their password.", "input": {"userId": "user_67890", "currentPassword": "password123", "newPassword": "newpassword456", "confirmPassword": "newpassword456"}, "expected": {"outcome": "Password update successful", "status": "Password Updated"}}, {"name": "Failed Password Update - Mismatched Passwords", "description": "Verify that a user cannot update their password if the new password and confirmation password do not match.", "input": {"userId": "user_67890", "currentPassword": "password123", "newPassword": "newpassword456", "confirmPassword": "mismatchedpassword"}, "expected": {"outcome": "Password update failed", "status": "Passwords do not match"}}, {"name": "Successful QR Code Scan - Add Friend", "description": "Verify that a user can successfully add a friend by scanning a QR code.", "input": {"userId": "user_67890", "qrCode": "friend_qr_code_data"}, "expected": {"outcome": "Friend added successfully", "status": "Friend Added"}}, {"name": "Failed QR Code Scan - Invalid QR Code", "description": "Verify that a user cannot add a friend by scanning an invalid QR code.", "input": {"userId": "user_67890", "qrCode": "invalid_qr_code_data"}, "expected": {"outcome": "Friend addition failed", "status": "Invalid QR Code"}}, {"name": "Successful Notification Settings Update", "description": "Verify that a user can successfully update their notification settings.", "input": {"userId": "user_67890", "emailNotifications": true, "pushNotifications": false}, "expected": {"outcome": "Notification settings updated successfully", "status": "Settings Updated"}}, {"name": "Successful Two-Factor Authentication Enable", "description": "Verify that a user can successfully enable two-factor authentication.", "input": {"userId": "user_67890", "twoFactorEnabled": true}, "expected": {"outcome": "Two-factor authentication enabled", "status": "2FA Enabled"}}]}
{"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}], "GPT4o_testcases": [{"name": "Successful Logout", "description": "Verify that a logged-in user can successfully log out.", "input": {"userId": "user_123"}, "expected": {"outcome": "Logout successful", "status": "Logged out", "redirect": "Login screen"}}, {"name": "Logout Confirmation Cancel", "description": "Verify the behavior when a user cancels the logout confirmation.", "input": {"userId": "user_456", "confirmLogout": false}, "expected": {"outcome": "Logout cancelled", "status": "Logged in", "redirect": "Current page"}}, {"name": "Logout from Invalid Session", "description": "Verify the behavior when a user attempts to log out from an invalid session.", "input": {"userId": "invalid_user"}, "expected": {"outcome": "Logout failed", "status": "Invalid session", "redirect": "Login screen"}}, {"name": "Logout with Network Issue", "description": "Verify the behavior when a network issue occurs during logout.", "input": {"userId": "user_789", "networkStatus": "offline"}, "expected": {"outcome": "Logout failed", "status": "Network error", "redirect": "Current page"}}]}
{"usecase": {"name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Ad Posting", "description": "Verify that a seller can successfully post a new ad with valid information.", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "iPhone 13 Pro Max", "description": "Excellent condition, 128GB storage, Space Gray", "price": "1000", "image": "image.jpg"}, "expected": {"outcome": "Ad posted successfully", "status": "Pending Review"}}, {"name": "Ad Posting with Missing Title", "description": "Verify that ad posting fails if the title field is empty.", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "", "description": "Excellent condition, 128GB storage, Space Gray", "price": "1000", "image": "image.jpg"}, "expected": {"outcome": "Ad posting failed", "status": "Title cannot be empty"}}, {"name": "Ad Posting with Invalid Price", "description": "Verify that ad posting fails if the price is invalid (e.g., negative or non-numeric).", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "iPhone 13 Pro Max", "description": "Excellent condition, 128GB storage, Space Gray", "price": "-100", "image": "image.jpg"}, "expected": {"outcome": "Ad posting failed", "status": "Invalid price"}}, {"name": "Ad Posting with Missing Image", "description": "Verify that ad posting fails if no image is provided.", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "iPhone 13 Pro Max", "description": "Excellent condition, 128GB storage, Space Gray", "price": "1000", "image": null}, "expected": {"outcome": "Ad posting failed", "status": "Image required"}}, {"name": "Ad Posting with Special Characters in Title", "description": "Verify that ad posting handles special characters in the title.", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "iPhone 13 Pro Max (Special Edition) #@$!", "description": "Excellent condition, 128GB storage, Space Gray", "price": "1000", "image": "image.jpg"}, "expected": {"outcome": "Ad posted successfully", "status": "Pending Review"}}, {"name": "Ad Posting with Long Description", "description": "Verify that ad posting handles long descriptions (e.g., exceeding character limit).", "input": {"userId": "seller_123", "category": "Electronics", "subcategory": "Mobile Phones", "location": "New York", "title": "iPhone 13 Pro Max", "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ut tellus ac nulla semper aliquet. Integer euismod, nisl eget fermentum gravida, enim velit ultricies libero, eu rhoncus nisl lectus non nibh. Mauris in odio ut ligula ultrices varius. Nulla facilisi. Sed ut tellus ac nulla semper aliquet. Integer euismod, nisl eget fermentum gravida, enim velit ultricies libero, eu rhoncus nisl lectus non nibh. Mauris in odio ut ligula ultrices varius. Nulla facilisi.", "price": "1000", "image": "image.jpg"}, "expected": {"outcome": "Ad posting failed", "status": "Description too long"}}]}
{"usecase": {"name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}], "GPT4o_testcases": [{"name": "Successful Item Search with All Filters", "description": "Verify that the user can successfully search for an item using all available filters.", "input": {"category": "Electronics", "adType": "Sale", "posterType": "Individual", "location": "New York", "searchQuery": "Laptop"}, "expected": {"outcome": "Search results displayed", "status": "Success"}}, {"name": "Successful Item Search with No Filters", "description": "Verify that the user can successfully search for an item without using any filters.", "input": {"category": "All ads", "adType": null, "posterType": null, "location": null, "searchQuery": null}, "expected": {"outcome": "Search results displayed", "status": "Success"}}, {"name": "Successful Item Search with Specific Ad Title", "description": "Verify that the user can successfully search for an item using a specific advertisement title.", "input": {"category": "All ads", "adType": null, "posterType": null, "location": null, "searchQuery": "Brand New iPhone 13"}, "expected": {"outcome": "Search results displayed", "status": "Success"}}, {"name": "Item Search with Invalid Category", "description": "Verify the system behavior when the user selects an invalid category.", "input": {"category": "InvalidCategory", "adType": null, "posterType": null, "location": null, "searchQuery": null}, "expected": {"outcome": "Error message displayed or no results found", "status": "Failure"}}, {"name": "Item Search with Invalid Search Query", "description": "Verify the system behavior when the user enters an invalid search query.", "input": {"category": "All ads", "adType": null, "posterType": null, "location": null, "searchQuery": "@@@@!!!!****"}, "expected": {"outcome": "Error message displayed or no results found", "status": "Failure"}}, {"name": "Item Search with No Matching Results", "description": "Verify the system behavior when no items match the user's search criteria.", "input": {"category": "Electronics", "adType": "Sale", "posterType": "Individual", "location": "New York", "searchQuery": "NonExistentItem"}, "expected": {"outcome": "No results found message displayed", "status": "No Results"}}, {"name": "Item Search with Empty Search Query", "description": "Verify the system behavior when the user submits an empty search query.", "input": {"category": "All ads", "adType": null, "posterType": null, "location": null, "searchQuery": ""}, "expected": {"outcome": "All ads displayed or a prompt to enter search criteria", "status": "Empty Search"}}]}
{"usecase": {"name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}], "GPT4o_testcases": [{"name": "Successful Ad Boost with Bump Up", "description": "Verify ad boost with Bump Up option using online payment.", "input": {"sellerId": "seller123", "adId": "ad456", "boostOption": "Bump Up", "duration": "3 days", "paymentMethod": "Visa", "paymentDetails": "valid visa details"}, "expected": {"outcome": "Ad boost successful", "status": "Bumped", "confirmationMessage": "Ad boosted successfully!"}}, {"name": "Successful Ad Boost with Urgent and Spotlight", "description": "Verify ad boost with Urgent and Spotlight options using voucher payment.", "input": {"sellerId": "seller789", "adId": "ad987", "boostOption": ["Urgent", "Spotlight"], "duration": "7 days", "paymentMethod": "Voucher", "paymentDetails": "valid voucher code"}, "expected": {"outcome": "Ad boost successful", "status": "Urgent, Spotlight", "confirmationMessage": "Ad boosted successfully!"}}, {"name": "Failed Ad Boost - Insufficient Balance", "description": "Verify ad boost fails due to insufficient balance.", "input": {"sellerId": "seller101", "adId": "ad112", "boostOption": "Bump Up", "duration": "15 days", "paymentMethod": "Bikash", "paymentDetails": "valid bikash details"}, "expected": {"outcome": "Ad boost failed", "status": "Insufficient Balance", "errorMessage": "Insufficient balance to boost ad."}}, {"name": "Failed Ad Boost - Invalid Voucher", "description": "Verify ad boost fails due to invalid voucher code.", "input": {"sellerId": "seller131", "adId": "ad142", "boostOption": "Urgent", "duration": "3 days", "paymentMethod": "Voucher", "paymentDetails": "invalid voucher code"}, "expected": {"outcome": "Ad boost failed", "status": "Invalid Voucher", "errorMessage": "Invalid voucher code."}}, {"name": "Failed Ad Boost - Invalid Ad ID", "description": "Verify ad boost fails due to invalid ad ID.", "input": {"sellerId": "seller161", "adId": "invalid_ad_id", "boostOption": "Spotlight", "duration": "7 days", "paymentMethod": "MasterCard", "paymentDetails": "valid mastercard details"}, "expected": {"outcome": "Ad boost failed", "status": "Invalid Ad", "errorMessage": "Ad not found."}}, {"name": "Failed Ad Boost - No Boost Option Selected", "description": "Verify ad boost fails when no boost option is selected.", "input": {"sellerId": "seller191", "adId": "ad202", "boostOption": null, "duration": "15 days", "paymentMethod": "DBBL", "paymentDetails": "valid dbbl details"}, "expected": {"outcome": "Ad boost failed", "status": "No Boost Option Selected", "errorMessage": "Please select a boost option."}}, {"name": "Failed Ad Boost - No Duration Selected", "description": "Verify ad boost fails when no duration is selected.", "input": {"sellerId": "seller221", "adId": "ad232", "boostOption": "Bump Up", "duration": null, "paymentMethod": "Visa", "paymentDetails": "valid visa details"}, "expected": {"outcome": "Ad boost failed", "status": "No Duration Selected", "errorMessage": "Please select a duration."}}]}
{"usecase": {"name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}], "GPT4o_testcases": [{"name": "Successful Job Posting with All Fields", "description": "Verify that an employer can successfully post a job with all fields filled in.", "input": {"employerId": "emp_123", "jobTitle": "Software Engineer", "jobDescription": "Develop and maintain software applications.", "location": "New York", "category": "Technology", "yearsOfExperience": "3-5 years"}, "expected": {"outcome": "Job posted successfully", "status": "Pending Review"}}, {"name": "Successful Job Posting with Optional Fields Empty", "description": "Verify that an employer can successfully post a job with optional fields left empty.", "input": {"employerId": "emp_123", "jobTitle": "Software Engineer", "jobDescription": "Develop and maintain software applications.", "location": "New York", "category": "Technology", "yearsOfExperience": ""}, "expected": {"outcome": "Job posted successfully", "status": "Pending Review"}}, {"name": "Failed Job Posting with Missing Required Fields", "description": "Verify that an employer cannot post a job with missing required fields.", "input": {"employerId": "emp_123", "jobTitle": "", "jobDescription": "Develop and maintain software applications.", "location": "New York", "category": "Technology", "yearsOfExperience": "3-5 years"}, "expected": {"outcome": "Job posting failed", "status": "Missing required fields"}}, {"name": "Failed Job Posting with Invalid Input", "description": "Verify that an employer cannot post a job with invalid input.", "input": {"employerId": "emp_123", "jobTitle": "Software Engineer", "jobDescription": "Develop and maintain software applications.", "location": "New York", "category": "Invalid Category", "yearsOfExperience": "3-5 years"}, "expected": {"outcome": "Job posting failed", "status": "Invalid category"}}, {"name": "Job Posting with Special Characters", "description": "Verify the handling of special characters in job details.", "input": {"employerId": "emp_123", "jobTitle": "Software Engineer <C++>", "jobDescription": "Develop & maintain software applications.", "location": "New York, NY", "category": "Technology", "yearsOfExperience": "3-5 years"}, "expected": {"outcome": "Job posted successfully", "status": "Pending Review"}}, {"name": "Job Posting with Long Input", "description": "Verify the system's behavior with extremely long input strings.", "input": {"employerId": "emp_123", "jobTitle": "Software Engineer with a very long and descriptive title that exceeds the character limit", "jobDescription": "A very long and detailed job description that goes on and on and on, exceeding the character limit by a significant margin.", "location": "A very long and specific location that exceeds the character limit", "category": "Technology", "yearsOfExperience": "10+ years"}, "expected": {"outcome": "Job posting failed", "status": "Input too long"}}]}
{"usecase": {"name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}], "GPT4o_testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job with a valid resume.", "input": {"jobSeekerId": "js_123", "jobId": "job_456", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Applied"}}, {"name": "Failed Job Application - Missing Resume", "description": "Verify that a job seeker cannot apply for a job without a resume.", "input": {"jobSeekerId": "js_123", "jobId": "job_456", "resume": null}, "expected": {"outcome": "Application failed", "status": "Resume Required"}}, {"name": "Failed Job Application - Invalid Job ID", "description": "Verify that a job seeker cannot apply for a job with an invalid job ID.", "input": {"jobSeekerId": "js_123", "jobId": "invalid_job_id", "resume": "resume.pdf"}, "expected": {"outcome": "Application failed", "status": "Invalid Job ID"}}, {"name": "Failed Job Application - Large Resume Size", "description": "Verify that a job seeker cannot apply for a job with a resume exceeding the size limit.", "input": {"jobSeekerId": "js_123", "jobId": "job_456", "resume": "large_resume.pdf"}, "expected": {"outcome": "Application failed", "status": "File Size Exceeded"}}, {"name": "Failed Job Application - Unsupported Resume Format", "description": "Verify that a job seeker cannot apply for a job with an unsupported resume format.", "input": {"jobSeekerId": "js_123", "jobId": "job_456", "resume": "resume.txt"}, "expected": {"outcome": "Application failed", "status": "Unsupported File Format"}}, {"name": "Job Application - Already Applied", "description": "Verify the system behavior when a user tries to apply for a job they have already applied for.", "input": {"jobSeekerId": "js_789", "jobId": "job_456", "resume": "resume.pdf"}, "expected": {"outcome": "Application failed", "status": "Already Applied"}}]}
{"usecase": {"name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}], "GPT4o_testcases": [{"name": "Successful Talent Search with Criteria", "description": "Verify that an employer can successfully search for talents using specific criteria.", "input": {"employerId": "employer_123", "jobCategory": "Software Engineer", "location": "New York", "keywords": "Java, Python"}, "expected": {"outcome": "Search results displayed", "status": "Success"}}, {"name": "Successful Talent Search without Criteria", "description": "Verify that an employer can successfully search for talents without specifying any criteria.", "input": {"employerId": "employer_123"}, "expected": {"outcome": "All profiles displayed", "status": "Success"}}, {"name": "Talent Search with No Matching Results", "description": "Verify the behavior when an employer searches for talents with criteria that yield no results.", "input": {"employerId": "employer_123", "jobCategory": "Astronaut", "location": "Mars"}, "expected": {"outcome": "No results found message displayed", "status": "No Results"}}, {"name": "Talent Search with Invalid Input", "description": "Verify the system's response to invalid search input.", "input": {"employerId": "employer_123", "jobCategory": "<script>alert('XSS')</script>"}, "expected": {"outcome": "Error message displayed or input sanitized", "status": "Invalid Input"}}, {"name": "Full Profile Unlock with Membership", "description": "Verify that an employer with membership can unlock full profiles.", "input": {"employerId": "employer_456", "membership": true, "profileId": "profile_789"}, "expected": {"outcome": "Full profile displayed", "status": "Success"}}, {"name": "Full Profile Unlock without Membership", "description": "Verify the behavior when an employer without membership attempts to unlock a full profile.", "input": {"employerId": "employer_123", "membership": false, "profileId": "profile_789"}, "expected": {"outcome": "Upgrade membership prompt displayed", "status": "Membership Required"}}, {"name": "Add to Shortlist", "description": "Verify that an employer can add profiles to their shortlist.", "input": {"employerId": "employer_123", "profileId": "profile_789"}, "expected": {"outcome": "Profile added to shortlist", "status": "Success"}}, {"name": "Add to Shortlist - Duplicate", "description": "Verify the behavior when an employer attempts to add a profile to their shortlist that is already present.", "input": {"employerId": "employer_123", "profileId": "profile_789"}, "expected": {"outcome": "Error message or no action", "status": "Duplicate Entry"}}]}
{"usecase": {"name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}], "GPT4o_testcases": [{"name": "Successful Membership Registration with Plus Monthly Plan", "description": "Verify successful registration with valid data and Plus Monthly plan.", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "Test Business", "email": "test@example.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Registration successful", "status": "Active", "plan": "Plus - Monthly", "category": "Mobile Accessories"}}, {"name": "Successful Membership Registration with Premium Yearly Plan", "description": "Verify successful registration with valid data and Premium Yearly plan.", "input": {"businessCategory": "Cars", "membershipPlan": "Premium - Yearly", "businessName": "Test Auto", "email": "testauto@example.com", "phoneNumber": "01787654321"}, "expected": {"outcome": "Registration successful", "status": "Active", "plan": "Premium - Yearly", "category": "Cars"}}, {"name": "Failed Registration: Missing Business Category", "description": "Verify registration failure when business category is not selected.", "input": {"businessCategory": null, "membershipPlan": "Plus - Monthly", "businessName": "Test Business", "email": "test@example.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Information"}}, {"name": "Failed Registration: Missing Membership Plan", "description": "Verify registration failure when membership plan is not selected.", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": null, "businessName": "Test Business", "email": "test@example.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Information"}}, {"name": "Failed Registration: Invalid Email Format", "description": "Verify registration failure with invalid email format.", "input": {"businessCategory": "Electronics", "membershipPlan": "Premium - Quarterly", "businessName": "Test Electronics", "email": "invalid-email", "phoneNumber": "01712345678"}, "expected": {"outcome": "Registration failed", "status": "Invalid Email"}}, {"name": "Failed Registration: Empty Business Name", "description": "Verify registration failure with empty business name.", "input": {"businessCategory": "Electronics", "membershipPlan": "Premium - Quarterly", "businessName": "", "email": "test@example.com", "phoneNumber": "01712345678"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Information"}}, {"name": "Failed Registration: Payment Declined", "description": "Verify registration failure when payment is declined.", "input": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "Test Auto", "email": "testauto@example.com", "phoneNumber": "01787654321", "paymentStatus": "Declined"}, "expected": {"outcome": "Registration failed", "status": "Payment Declined"}}]}
{"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}], "GPT4o_testcases": [{"name": "Successful Workspace Creation", "description": "Verify that a user can successfully create a new workspace with valid inputs.", "input": {"userId": "user_123", "workspaceName": "My Workspace", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace created successfully", "status": "Workspace Created"}}, {"name": "Workspace Creation with Empty Name", "description": "Verify that a user cannot create a workspace with an empty name.", "input": {"userId": "user_123", "workspaceName": "", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Invalid Workspace Name"}}, {"name": "Workspace Creation with Invalid Email Domain", "description": "Verify that a user cannot create a workspace with an invalid email domain.", "input": {"userId": "user_123", "workspaceName": "My Workspace", "emailDomain": "invalid-domain"}, "expected": {"outcome": "Workspace creation failed", "status": "Invalid Email Domain"}}, {"name": "Workspace Creation Exceeding Limit", "description": "Verify that a user cannot create a workspace if they have reached the maximum allowed limit.", "input": {"userId": "user_456", "workspaceName": "My Workspace", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Workspace Limit Exceeded"}}, {"name": "Workspace Creation with Existing Name", "description": "Verify that a user cannot create a workspace with a name that already exists.", "input": {"userId": "user_123", "workspaceName": "Existing Workspace", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Workspace Name Already Exists"}}, {"name": "Workspace Creation with Long Name", "description": "Verify the behavior when creating a workspace with a name exceeding the character limit.", "input": {"userId": "user_123", "workspaceName": "This is a very long workspace name that exceeds the character limit", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Workspace Name Too Long"}}, {"name": "Workspace Creation with Special Characters", "description": "Verify the behavior when creating a workspace with special characters in the name.", "input": {"userId": "user_123", "workspaceName": "My Workspace!", "emailDomain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "Invalid Workspace Name"}}]}
{"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}], "GPT4o_testcases": [{"name": "Successful Workspace Switch", "description": "Verify that a user can successfully switch to a different workspace.", "input": {"userId": "user_123", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace B"}, "expected": {"outcome": "Workspace switch successful", "currentWorkspace": "Workspace B"}}, {"name": "Workspace Switch to Current Workspace", "description": "Verify the behavior when a user attempts to switch to their current workspace.", "input": {"userId": "user_123", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace A"}, "expected": {"outcome": "No workspace change", "currentWorkspace": "Workspace A"}}, {"name": "Workspace Switch with Invalid Workspace", "description": "Verify the behavior when a user attempts to switch to a non-existent workspace.", "input": {"userId": "user_123", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace Z"}, "expected": {"outcome": "Workspace switch failed", "currentWorkspace": "Workspace A"}}, {"name": "Workspace Switch with Empty Workspace Selection", "description": "Verify the behavior when a user does not select a target workspace.", "input": {"userId": "user_123", "currentWorkspace": "Workspace A", "targetWorkspace": null}, "expected": {"outcome": "Workspace switch failed", "currentWorkspace": "Workspace A"}}, {"name": "Workspace Switch with User Not in Workspace", "description": "Verify the behavior when a user attempts to switch to a workspace they are not a member of.", "input": {"userId": "user_456", "currentWorkspace": "Workspace A", "targetWorkspace": "Workspace B"}, "expected": {"outcome": "Workspace switch failed", "currentWorkspace": "Workspace A"}}]}
{"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}], "GPT4o_testcases": [{"name": "Successful Workspace Join via Invitation", "description": "Verify that a user can successfully join a workspace using a valid invitation link.", "input": {"userId": "user_123", "invitationLink": "valid_invitation_link", "email": "user@example.com"}, "expected": {"outcome": "Workspace joined successfully", "status": "Joined"}}, {"name": "Failed Workspace Join via Invalid Invitation", "description": "Verify that a user cannot join a workspace using an invalid invitation link.", "input": {"userId": "user_123", "invitationLink": "invalid_invitation_link", "email": "user@example.com"}, "expected": {"outcome": "Workspace join failed", "status": "Invalid Invitation"}}, {"name": "Successful Workspace Join via Allowed Domain", "description": "Verify that a user with an allowed domain email can successfully join a workspace.", "input": {"userId": "user_456", "email": "user@alloweddomain.com"}, "expected": {"outcome": "Workspace joined successfully", "status": "Joined"}}, {"name": "Failed Workspace Join via Disallowed Domain", "description": "Verify that a user with a disallowed domain email cannot join a workspace.", "input": {"userId": "user_456", "email": "user@disalloweddomain.com"}, "expected": {"outcome": "Workspace join failed", "status": "Domain Not Allowed"}}, {"name": "Workspace Join with Expired Invitation", "description": "Verify the behavior when a user attempts to join a workspace using an expired invitation link.", "input": {"userId": "user_789", "invitationLink": "expired_invitation_link", "email": "user@example.com"}, "expected": {"outcome": "Workspace join failed", "status": "Expired Invitation"}}, {"name": "Workspace Join with Already Joined User", "description": "Verify the behavior when a user who has already joined a workspace attempts to join again.", "input": {"userId": "user_987", "invitationLink": "valid_invitation_link", "email": "already_joined_user@example.com"}, "expected": {"outcome": "Workspace join failed", "status": "Already a Member"}}]}
{"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Name Update", "description": "Verify that a user can successfully update the workspace name", "input": {"userId": "user_123", "workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated successfully", "status": "Name Updated"}}, {"name": "Failed Workspace Name Update - Empty Name", "description": "Verify that a user cannot update the workspace name if the provided name is empty", "input": {"userId": "user_123", "workspaceName": ""}, "expected": {"outcome": "Workspace name update failed", "status": "Invalid Name"}}, {"name": "Failed Workspace Name Update - Exceeding Character Limit", "description": "Verify that a user cannot update the workspace name if it exceeds the character limit", "input": {"userId": "user_123", "workspaceName": "This is a very long workspace name that exceeds the allowed character limit"}, "expected": {"outcome": "Workspace name update failed", "status": "Name Too Long"}}, {"name": "Failed Workspace Name Update - Special Characters", "description": "Verify that a user cannot update the workspace name if it contains special characters", "input": {"userId": "user_123", "workspaceName": "New Workspace Name!!!"}, "expected": {"outcome": "Workspace name update failed", "status": "Invalid Characters"}}, {"name": "Successful Workspace Name Update - Maximum Characters", "description": "Verify that a user can update the workspace name with the maximum allowed characters", "input": {"userId": "user_123", "workspaceName": "ThisIsAValidWorkspaceNameWithMaximumAllowedCharacters"}, "expected": {"outcome": "Workspace name updated successfully", "status": "Name Updated"}}, {"name": "Failed Workspace Name Update - Existing Name", "description": "Verify that a user cannot update the workspace name to an existing name", "input": {"userId": "user_123", "workspaceName": "Existing Workspace Name"}, "expected": {"outcome": "Workspace name update failed", "status": "Name Already Exists"}}]}
{"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Icon Update", "description": "Verify that a user can successfully update the workspace icon with a valid image file", "input": {"userId": "user_123", "workspaceId": "workspace_456", "iconFile": "valid_icon.png", "fileType": "image/png", "fileSize": "50KB"}, "expected": {"outcome": "Workspace icon updated successfully", "status": "Icon Updated"}}, {"name": "Failed Workspace Icon Update - Invalid File Type", "description": "Verify that a user cannot update the workspace icon with an invalid file type", "input": {"userId": "user_123", "workspaceId": "workspace_456", "iconFile": "invalid_icon.txt", "fileType": "text/plain", "fileSize": "1KB"}, "expected": {"outcome": "Workspace icon update failed", "status": "Invalid File Type"}}, {"name": "Failed Workspace Icon Update - File Too Large", "description": "Verify that a user cannot update the workspace icon if the file size is too large", "input": {"userId": "user_123", "workspaceId": "workspace_456", "iconFile": "large_icon.png", "fileType": "image/png", "fileSize": "10MB"}, "expected": {"outcome": "Workspace icon update failed", "status": "File Too Large"}}, {"name": "Failed Workspace Icon Update - No File Selected", "description": "Verify that a user cannot update the workspace icon if no file is selected", "input": {"userId": "user_123", "workspaceId": "workspace_456", "iconFile": null, "fileType": null, "fileSize": null}, "expected": {"outcome": "Workspace icon update failed", "status": "No File Selected"}}, {"name": "Failed Workspace Icon Update - Corrupted File", "description": "Verify that a user cannot update the workspace icon if the selected file is corrupted", "input": {"userId": "user_123", "workspaceId": "workspace_456", "iconFile": "corrupted_icon.png", "fileType": "image/png", "fileSize": "50KB"}, "expected": {"outcome": "Workspace icon update failed", "status": "Corrupted File"}}, {"name": "Failed Workspace Icon Update - Invalid Workspace ID", "description": "Verify that a user cannot update the workspace icon if the workspace ID is invalid", "input": {"userId": "user_123", "workspaceId": "invalid_workspace_id", "iconFile": "valid_icon.png", "fileType": "image/png", "fileSize": "50KB"}, "expected": {"outcome": "Workspace icon update failed", "status": "Invalid Workspace ID"}}]}
{"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Deletion", "description": "Verify that a user can successfully delete a workspace", "input": {"userId": "user_123", "workspaceName": "Test Workspace"}, "expected": {"outcome": "Workspace deleted successfully", "status": "Deleted"}}, {"name": "Failed Workspace Deletion - Incorrect Workspace Name", "description": "Verify that a user cannot delete a workspace if the provided workspace name is incorrect", "input": {"userId": "user_123", "workspaceName": "Incorrect Workspace"}, "expected": {"outcome": "Workspace deletion failed", "status": "Workspace not found"}}, {"name": "Failed Workspace Deletion - Empty Workspace Name", "description": "Verify that a user cannot delete a workspace if the provided workspace name is empty", "input": {"userId": "user_123", "workspaceName": ""}, "expected": {"outcome": "Workspace deletion failed", "status": "Invalid workspace name"}}, {"name": "Failed Workspace Deletion - User Not Logged In", "description": "Verify that a user cannot delete a workspace if not logged in", "input": {"userId": null, "workspaceName": "Test Workspace"}, "expected": {"outcome": "Workspace deletion failed", "status": "User not logged in"}}, {"name": "Failed Workspace Deletion - Special Characters in Workspace Name", "description": "Verify that a user cannot delete a workspace if the workspace name contains special characters", "input": {"userId": "user_123", "workspaceName": "Test Workspace!!!"}, "expected": {"outcome": "Workspace deletion failed", "status": "Invalid workspace name"}}, {"name": "Edge Case - Workspace Name with Max Length", "description": "Verify that a user can delete a workspace with the maximum allowed length for the workspace name", "input": {"userId": "user_123", "workspaceName": "This is a workspace name with the maximum allowed length."}, "expected": {"outcome": "Workspace deleted successfully", "status": "Deleted"}}]}
{"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}], "GPT4o_testcases": [{"name": "Successful Workspace Leave", "description": "Verify that a user can successfully leave a workspace.", "input": {"userId": "user_123", "workspaceId": "workspace_456"}, "expected": {"outcome": "User successfully left the workspace", "status": "Left Workspace"}}, {"name": "Failed Workspace Leave - User Not Member", "description": "Verify that a user cannot leave a workspace if they are not a member.", "input": {"userId": "user_789", "workspaceId": "workspace_456"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Not a Member"}}, {"name": "Failed Workspace Leave - Invalid Workspace", "description": "Verify that a user cannot leave a workspace that does not exist.", "input": {"userId": "user_123", "workspaceId": "workspace_invalid"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Invalid Workspace"}}, {"name": "Failed Workspace Leave - User Not Logged In", "description": "Verify that a user cannot leave a workspace if they are not logged in.", "input": {"userId": null, "workspaceId": "workspace_456"}, "expected": {"outcome": "User failed to leave the workspace", "status": "Not Logged In"}}, {"name": "Workspace Leave - Last Member", "description": "Verify the behavior when the last member of a workspace leaves.", "input": {"userId": "user_123", "workspaceId": "workspace_last"}, "expected": {"outcome": "Last member left the workspace", "status": "Workspace Archived/Deleted"}}]}
{"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}], "GPT4o_testcases": [{"name": "Successful Email Addition", "description": "Verify that a user can successfully add a secondary email address to their account.", "input": {"primaryEmail": "primary@example.com", "secondaryEmail": "secondary@example.com"}, "expected": {"outcome": "Secondary email added successfully", "status": "Email Added"}}, {"name": "Failed Email Addition - Existing Email", "description": "Verify that a user cannot add an existing email address as a secondary email.", "input": {"primaryEmail": "primary@example.com", "secondaryEmail": "primary@example.com"}, "expected": {"outcome": "Secondary email addition failed", "status": "Email Already Exists"}}, {"name": "Failed Email Addition - Invalid Email Format", "description": "Verify that a user cannot add an invalid email address format.", "input": {"primaryEmail": "primary@example.com", "secondaryEmail": "invalid-email"}, "expected": {"outcome": "Secondary email addition failed", "status": "Invalid Email Format"}}, {"name": "Failed Email Addition - Verification Failure", "description": "Verify that a user cannot add a secondary email without verification.", "input": {"primaryEmail": "primary@example.com", "secondaryEmail": "unverified@example.com", "verification": "failed"}, "expected": {"outcome": "Secondary email addition failed", "status": "Verification Failed"}}, {"name": "Failed Email Addition - Empty Email", "description": "Verify that a user cannot add an empty email address.", "input": {"primaryEmail": "primary@example.com", "secondaryEmail": ""}, "expected": {"outcome": "Secondary email addition failed", "status": "Email Cannot Be Empty"}}]}
{"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Workspace Import from File", "description": "Verify successful workspace import from a valid local file", "input": {"userId": "user_123", "filePath": "/path/to/valid_workspace.zip", "storageType": "local"}, "expected": {"outcome": "Workspace import successful", "status": "Import Complete"}}, {"name": "Failed Workspace Import from File - Invalid File Format", "description": "Verify workspace import failure with an invalid file format", "input": {"userId": "user_123", "filePath": "/path/to/invalid_file.txt", "storageType": "local"}, "expected": {"outcome": "Workspace import failed", "status": "Invalid File Format"}}, {"name": "Failed Workspace Import from File - File Not Found", "description": "Verify workspace import failure when the specified file does not exist", "input": {"userId": "user_123", "filePath": "/path/to/nonexistent_file.zip", "storageType": "local"}, "expected": {"outcome": "Workspace import failed", "status": "File Not Found"}}, {"name": "Successful Workspace Import from Cloud Storage", "description": "Verify successful workspace import from valid cloud storage", "input": {"userId": "user_123", "cloudProvider": "Google Drive", "storagePath": "/path/to/workspace.zip", "storageType": "cloud"}, "expected": {"outcome": "Workspace import successful", "status": "Import Complete"}}, {"name": "Failed Workspace Import from Cloud Storage - Invalid Credentials", "description": "Verify workspace import failure with invalid cloud storage credentials", "input": {"userId": "user_123", "cloudProvider": "Google Drive", "storagePath": "/path/to/workspace.zip", "storageType": "cloud", "credentials": "invalid_credentials"}, "expected": {"outcome": "Workspace import failed", "status": "Invalid Credentials"}}, {"name": "Failed Workspace Import from Cloud Storage - File Not Found", "description": "Verify workspace import failure when the specified file is not found in cloud storage", "input": {"userId": "user_123", "cloudProvider": "Google Drive", "storagePath": "/path/to/nonexistent_file.zip", "storageType": "cloud"}, "expected": {"outcome": "Workspace import failed", "status": "File Not Found"}}, {"name": "Failed Workspace Import - Empty File", "description": "Verify workspace import failure with an empty file", "input": {"userId": "user_123", "filePath": "/path/to/empty_file.zip", "storageType": "local"}, "expected": {"outcome": "Workspace import failed", "status": "Empty File"}}]}
{"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}], "GPT4o_testcases": [{"name": "Successful Member Addition (Existing User)", "description": "Verify that a user can successfully add an existing member to the workspace.", "input": {"userId": "user_123", "searchEmail": "member@example.com", "memberExists": true}, "expected": {"outcome": "Member added successfully", "status": "Member Added"}}, {"name": "Successful Member Invitation (New User)", "description": "Verify that a user can successfully invite a new member to the workspace.", "input": {"userId": "user_123", "searchEmail": "newmember@example.com", "memberExists": false}, "expected": {"outcome": "Invitation sent successfully", "status": "Invitation Sent"}}, {"name": "Failed Member Addition (Empty Search)", "description": "Verify that a user cannot add a member with an empty search email.", "input": {"userId": "user_123", "searchEmail": "", "memberExists": false}, "expected": {"outcome": "Member addition failed", "status": "Invalid Email"}}, {"name": "Failed Member Addition (Invalid Email Format)", "description": "Verify that a user cannot add a member with an invalid email format.", "input": {"userId": "user_123", "searchEmail": "invalid-email", "memberExists": false}, "expected": {"outcome": "Member addition failed", "status": "Invalid Email"}}, {"name": "Failed Member Addition (Member Already Exists)", "description": "Verify that a user cannot add a member that already exists in the workspace.", "input": {"userId": "user_123", "searchEmail": "existing_member@example.com", "memberExists": true, "memberAlreadyInWorkspace": true}, "expected": {"outcome": "Member addition failed", "status": "Member Already Exists"}}]}
{"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}], "GPT4o_testcases": [{"name": "Successful Single Domain Addition", "description": "Verify that a workspace owner can successfully add a single valid email domain.", "input": {"userId": "owner_123", "domain": "example.com"}, "expected": {"outcome": "Domain added successfully", "status": "Updated"}}, {"name": "Successful Multiple Domain Addition", "description": "Verify that a workspace owner can successfully add multiple valid email domains.", "input": {"userId": "owner_123", "domain": "example.com, example.net, example.org"}, "expected": {"outcome": "Domains added successfully", "status": "Updated"}}, {"name": "Failed Domain Addition - Empty Input", "description": "Verify that adding an empty domain fails.", "input": {"userId": "owner_123", "domain": ""}, "expected": {"outcome": "Domain addition failed", "status": "Invalid Input"}}, {"name": "Failed Domain Addition - Invalid Domain Format", "description": "Verify that adding an invalid domain format fails.", "input": {"userId": "owner_123", "domain": "example"}, "expected": {"outcome": "Domain addition failed", "status": "Invalid Domain Format"}}, {"name": "Failed Domain Addition - Duplicate Domain", "description": "Verify that adding a duplicate domain fails.", "input": {"userId": "owner_123", "domain": "example.com, example.com"}, "expected": {"outcome": "Domain addition failed", "status": "Duplicate Domain"}}, {"name": "Failed Domain Addition - User Not Workspace Owner", "description": "Verify that a non-owner cannot add domains.", "input": {"userId": "user_456", "domain": "example.com"}, "expected": {"outcome": "Domain addition failed", "status": "Unauthorized"}}, {"name": "Edge Case - Domain with Subdomain", "description": "Verify handling of subdomains.", "input": {"userId": "owner_123", "domain": "sub.example.com"}, "expected": {"outcome": "Domain added successfully", "status": "Updated"}}, {"name": "Edge Case - Domain with Special Characters", "description": "Verify handling of domains with hyphens.", "input": {"userId": "owner_123", "domain": "example-domain.com"}, "expected": {"outcome": "Domain added successfully", "status": "Updated"}}, {"name": "Edge Case - Long Domain Name", "description": "Verify handling of long domain names.", "input": {"userId": "owner_123", "domain": "averylongdomainnametotestthesystem.com"}, "expected": {"outcome": "Domain added successfully", "status": "Updated"}}]}
{"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Markdown Export", "description": "Verify successful export of workspace content in Markdown format.", "input": {"userPlan": "Enterprise", "exportFormat": "Markdown", "contentInclusion": "All"}, "expected": {"outcome": "Export successful", "status": "Download Complete", "format": "Markdown"}}, {"name": "Successful HTML Export", "description": "Verify successful export of workspace content in HTML format.", "input": {"userPlan": "Business", "exportFormat": "HTML", "contentInclusion": "Specific Items"}, "expected": {"outcome": "Export successful", "status": "Download Complete", "format": "HTML"}}, {"name": "Successful CSV Export", "description": "Verify successful export of workspace content in CSV format.", "input": {"userPlan": "Enterprise", "exportFormat": "CSV", "contentInclusion": "All"}, "expected": {"outcome": "Export successful", "status": "Download Complete", "format": "CSV"}}, {"name": "Successful PDF Export with Business Plan", "description": "Verify successful export of workspace content in PDF format with a Business plan.", "input": {"userPlan": "Business", "exportFormat": "PDF", "contentInclusion": "All"}, "expected": {"outcome": "Export successful", "status": "Download Complete", "format": "PDF"}}, {"name": "Failed PDF Export with Free Plan", "description": "Verify that PDF export fails with a Free plan.", "input": {"userPlan": "Free", "exportFormat": "PDF", "contentInclusion": "All"}, "expected": {"outcome": "Export failed", "status": "PDF export requires Business or Enterprise plan"}}, {"name": "Export Failure - No Content Selected", "description": "Verify export fails when no content is selected for export.", "input": {"userPlan": "Enterprise", "exportFormat": "Markdown", "contentInclusion": "None"}, "expected": {"outcome": "Export failed", "status": "Please select content for export"}}, {"name": "Export Interruption - Network Error", "description": "Verify export fails due to a network error.", "input": {"userPlan": "Business", "exportFormat": "HTML", "contentInclusion": "All", "networkStatus": "Offline"}, "expected": {"outcome": "Export failed", "status": "Network error"}}, {"name": "Export with Invalid Format", "description": "Verify export fails with an invalid format selection.", "input": {"userPlan": "Enterprise", "exportFormat": "InvalidFormat", "contentInclusion": "All"}, "expected": {"outcome": "Export failed", "status": "Invalid export format selected"}}]}
{"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Bold Formatting", "description": "Verify that a user can successfully bold selected text.", "input": {"text": "This is a test.", "selectionStart": 0, "selectionEnd": 4, "formattingOption": "bold"}, "expected": {"outcome": "Text successfully bolded", "formattedText": "<b>This</b> is a test."}}, {"name": "Successful Italic Formatting with Link", "description": "Verify that a user can successfully italicize and add a link to selected text.", "input": {"text": "This is a test.", "selectionStart": 5, "selectionEnd": 7, "formattingOption": "italic", "link": "https://www.example.com"}, "expected": {"outcome": "Text successfully italicized and linked", "formattedText": "This <i><a href=\"https://www.example.com\">is</a></i> a test."}}, {"name": "Formatting Empty Selection", "description": "Verify the behavior when formatting an empty selection.", "input": {"text": "This is a test.", "selectionStart": 5, "selectionEnd": 5, "formattingOption": "bold"}, "expected": {"outcome": "No change to text", "formattedText": "This is a test."}}, {"name": "Invalid Formatting Option", "description": "Verify the behavior when an invalid formatting option is provided.", "input": {"text": "This is a test.", "selectionStart": 0, "selectionEnd": 4, "formattingOption": "invalidOption"}, "expected": {"outcome": "Formatting failed", "formattedText": "This is a test."}}, {"name": "Invalid Link Format", "description": "Verify the behavior when an invalid link format is provided.", "input": {"text": "This is a test.", "selectionStart": 5, "selectionEnd": 7, "formattingOption": "link", "link": "invalid-link"}, "expected": {"outcome": "Link insertion failed", "formattedText": "This is a test."}}, {"name": "Formatting with Overlapping Selections", "description": "Verify the behavior when formatting with overlapping selections.", "input": {"text": "This is a test.", "selectionStart": 0, "selectionEnd": 4, "formattingOption": "bold", "secondSelectionStart": 2, "secondSelectionEnd": 7, "secondFormattingOption": "italic"}, "expected": {"outcome": "Overlapping formatting applied", "formattedText": "<b>Th<i>is is</i></b> a test."}}, {"name": "Formatting Out of Bounds", "description": "Verify the behavior when selection is out of bounds.", "input": {"text": "This is a test.", "selectionStart": 10, "selectionEnd": 15, "formattingOption": "bold"}, "expected": {"outcome": "Formatting failed", "formattedText": "This is a test."}}]}
{"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Two Column Organization", "description": "Verify that a user can successfully organize content into two columns.", "input": {"pageId": "page_123", "blocks": [{"type": "text", "content": "Block 1"}, {"type": "image", "content": "image.jpg"}, {"type": "text", "content": "Block 2"}], "columns": 2}, "expected": {"outcome": "Content organized into two columns", "status": "Success"}}, {"name": "Successful Three Column Organization with Different Content Types", "description": "Verify that a user can successfully organize different content types into three columns.", "input": {"pageId": "page_456", "blocks": [{"type": "text", "content": "Block 1"}, {"type": "image", "content": "image.jpg"}, {"type": "video", "content": "video.mp4"}, {"type": "text", "content": "Block 2"}, {"type": "list", "content": ["item 1", "item 2"]}], "columns": 3}, "expected": {"outcome": "Content organized into three columns", "status": "Success"}}, {"name": "Failed Column Organization with Empty Page", "description": "Verify that column organization fails on an empty page.", "input": {"pageId": "page_789", "blocks": [], "columns": 2}, "expected": {"outcome": "Column organization failed", "status": "Empty Page"}}, {"name": "Failed Column Organization with Invalid Column Number", "description": "Verify that column organization fails with an invalid column number (e.g., zero or negative).", "input": {"pageId": "page_101", "blocks": [{"type": "text", "content": "Block 1"}, {"type": "image", "content": "image.jpg"}], "columns": 0}, "expected": {"outcome": "Column organization failed", "status": "Invalid Column Number"}}, {"name": "Column Organization with Large Number of Blocks", "description": "Verify column organization with a large number of blocks.", "input": {"pageId": "page_102", "blocks": [{"type": "text", "content": "Block 1"}, {"type": "text", "content": "Block 2"}, {"type": "text", "content": "Block 3"}, {"type": "text", "content": "Block 4"}, {"type": "text", "content": "Block 5"}, {"type": "text", "content": "Block 6"}, {"type": "text", "content": "Block 7"}, {"type": "text", "content": "Block 8"}, {"type": "text", "content": "Block 9"}, {"type": "text", "content": "Block 10"}], "columns": 3}, "expected": {"outcome": "Content organized into three columns", "status": "Success"}}]}
{"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Valid Headings Added", "description": "Verify that the user can add H1, H2, and H3 headings successfully.", "input": {"pageContent": "Existing content", "headings": [{"level": "H1", "text": "Heading 1"}, {"level": "H2", "text": "Heading 2"}, {"level": "H3", "text": "Heading 3"}]}, "expected": {"outcome": "Headings added successfully", "structure": "Content structured with H1, H2, and H3 headings"}}, {"name": "Empty Heading Text", "description": "Verify the behavior when adding a heading with empty text.", "input": {"pageContent": "Existing content", "headings": [{"level": "H1", "text": ""}]}, "expected": {"outcome": "Heading addition failed", "structure": "Content not structured, empty heading not added"}}, {"name": "Unsupported Heading Level", "description": "Verify the behavior when adding a heading with an unsupported level (e.g., H4).", "input": {"pageContent": "Existing content", "headings": [{"level": "H4", "text": "Heading 4"}]}, "expected": {"outcome": "Heading addition failed", "structure": "Content not structured, unsupported heading not added"}}, {"name": "Special Characters in Heading", "description": "Verify the behavior when adding a heading with special characters in the text.", "input": {"pageContent": "Existing content", "headings": [{"level": "H1", "text": "Heading with <special> characters"}]}, "expected": {"outcome": "Headings added successfully", "structure": "Content structured with H1 containing special characters"}}, {"name": "Duplicate Headings", "description": "Verify the behavior when adding duplicate headings.", "input": {"pageContent": "Existing content", "headings": [{"level": "H1", "text": "Heading 1"}, {"level": "H1", "text": "Heading 1"}]}, "expected": {"outcome": "Headings added successfully", "structure": "Content structured with duplicate H1 headings"}}, {"name": "No Headings Added", "description": "Verify the behavior when no headings are added.", "input": {"pageContent": "Existing content", "headings": []}, "expected": {"outcome": "No headings added", "structure": "Content remains unchanged"}}]}
{"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Successful Icon and Cover Addition", "description": "Verify that a user can successfully add both an icon and a cover image.", "input": {"pageId": "page_123", "icon": "smiley.png", "cover": "landscape.jpg"}, "expected": {"outcome": "Icon and cover added successfully", "status": "Updated"}}, {"name": "Successful Icon Update", "description": "Verify that a user can successfully update an existing icon.", "input": {"pageId": "page_123", "icon": "new_icon.png", "cover": null}, "expected": {"outcome": "Icon updated successfully", "status": "Updated"}}, {"name": "Successful Cover Update", "description": "Verify that a user can successfully update an existing cover image.", "input": {"pageId": "page_123", "icon": null, "cover": "new_cover.jpg"}, "expected": {"outcome": "Cover updated successfully", "status": "Updated"}}, {"name": "Icon Addition Failure - Invalid Format", "description": "Verify that adding an icon with an invalid format fails.", "input": {"pageId": "page_123", "icon": "icon.txt", "cover": null}, "expected": {"outcome": "Icon addition failed", "status": "Invalid Icon Format"}}, {"name": "Cover Addition Failure - Invalid Format", "description": "Verify that adding a cover image with an invalid format fails.", "input": {"pageId": "page_123", "icon": null, "cover": "cover.txt"}, "expected": {"outcome": "Cover addition failed", "status": "Invalid Cover Format"}}, {"name": "Icon Addition Failure - Large File Size", "description": "Verify that adding an icon with a large file size fails.", "input": {"pageId": "page_123", "icon": "large_icon.png", "cover": null}, "expected": {"outcome": "Icon addition failed", "status": "File Size Exceeded"}}, {"name": "Cover Addition Failure - Large File Size", "description": "Verify that adding a cover image with a large file size fails.", "input": {"pageId": "page_123", "icon": null, "cover": "large_cover.jpg"}, "expected": {"outcome": "Cover addition failed", "status": "File Size Exceeded"}}, {"name": "No Changes Made", "description": "Verify that no changes are made if no input is provided.", "input": {"pageId": "page_123", "icon": null, "cover": null}, "expected": {"outcome": "No changes made", "status": "No Updates"}}]}
{"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Image Upload and Management", "description": "Verify that a user can successfully upload, arrange, resize, and add captions and alt text to an image.", "input": {"pageId": "page_123", "image": "image.jpg", "caption": "Test Image Caption", "altText": "Test Image Alt Text", "width": 300, "height": 200}, "expected": {"outcome": "Image uploaded and managed successfully", "status": "Success"}}, {"name": "Failed Image Upload - Invalid File Type", "description": "Verify that uploading an invalid file type results in an error.", "input": {"pageId": "page_123", "image": "document.pdf", "caption": "Test Caption", "altText": "Test Alt Text", "width": 300, "height": 200}, "expected": {"outcome": "Image upload failed", "status": "Invalid File Type"}}, {"name": "Failed Image Upload - File Too Large", "description": "Verify that uploading a file exceeding the size limit results in an error.", "input": {"pageId": "page_123", "image": "large_image.jpg", "caption": "Test Caption", "altText": "Test Alt Text", "width": 300, "height": 200}, "expected": {"outcome": "Image upload failed", "status": "File Too Large"}}, {"name": "Image Resize - Zero Dimensions", "description": "Verify the behavior when resizing an image to zero width or height.", "input": {"pageId": "page_123", "image": "image.jpg", "caption": "Test Caption", "altText": "Test Alt Text", "width": 0, "height": 200}, "expected": {"outcome": "Image resize failed", "status": "Invalid Dimensions"}}, {"name": "Empty Caption and Alt Text", "description": "Verify the behavior when caption and alt text are left empty.", "input": {"pageId": "page_123", "image": "image.jpg", "caption": "", "altText": "", "width": 300, "height": 200}, "expected": {"outcome": "Image uploaded with empty caption and alt text", "status": "Success"}}, {"name": "Long Caption and Alt Text", "description": "Verify the behavior with long caption and alt text exceeding character limits.", "input": {"pageId": "page_123", "image": "image.jpg", "caption": "This is a very long caption exceeding the character limit.", "altText": "This is a very long alt text exceeding the character limit.", "width": 300, "height": 200}, "expected": {"outcome": "Image uploaded with truncated caption and alt text", "status": "Success"}}]}
{"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Successful PDF Upload", "description": "Verify that a user can successfully upload a PDF file.", "input": {"fileName": "test.pdf", "fileSize": "1MB", "fileType": "application/pdf"}, "expected": {"outcome": "File uploaded successfully", "status": "Uploaded"}}, {"name": "Failed PDF Upload - Large File", "description": "Verify that a user cannot upload a PDF file exceeding the size limit.", "input": {"fileName": "test.pdf", "fileSize": "100MB", "fileType": "application/pdf"}, "expected": {"outcome": "File upload failed", "status": "File too large"}}, {"name": "Successful File Embed", "description": "Verify that a user can successfully embed a file from a valid external link.", "input": {"fileLink": "https://example.com/test.pdf"}, "expected": {"outcome": "File embedded successfully", "status": "Embedded"}}, {"name": "Failed File Embed - Invalid Link", "description": "Verify that a user cannot embed a file from an invalid external link.", "input": {"fileLink": "invalid-link"}, "expected": {"outcome": "File embed failed", "status": "Invalid link"}}, {"name": "Successful File Arrangement", "description": "Verify that a user can successfully arrange the file block on the page.", "input": {"blockPosition": "Top"}, "expected": {"outcome": "File block arranged successfully", "status": "Arranged"}}, {"name": "Failed File Upload - Unsupported File Type", "description": "Verify that a user cannot upload an unsupported file type.", "input": {"fileName": "test.exe", "fileSize": "1MB", "fileType": "application/x-msdownload"}, "expected": {"outcome": "File upload failed", "status": "Unsupported file type"}}, {"name": "Failed File Embed - Empty Link", "description": "Verify that a user cannot embed a file with an empty link.", "input": {"fileLink": ""}, "expected": {"outcome": "File embed failed", "status": "Empty link"}}]}
{"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Video Embed", "description": "Verify that a user can successfully embed a video from a supported streaming service.", "input": {"videoUrl": "https://www.youtube.com/watch?v=dQw4w9WgXcQ", "page": "Test Page"}, "expected": {"outcome": "Video embedded successfully", "status": "Video Displayed"}}, {"name": "Failed Video Embed - Invalid URL", "description": "Verify that embedding a video fails with an invalid URL.", "input": {"videoUrl": "invalid-url", "page": "Test Page"}, "expected": {"outcome": "Video embed failed", "status": "Invalid URL"}}, {"name": "Successful Audio Upload", "description": "Verify that a user can successfully upload an audio file.", "input": {"audioFile": "test.mp3", "page": "Test Page"}, "expected": {"outcome": "Audio uploaded successfully", "status": "Audio Playing"}}, {"name": "Failed Audio Upload - Unsupported Format", "description": "Verify that uploading an audio file in an unsupported format fails.", "input": {"audioFile": "test.txt", "page": "Test Page"}, "expected": {"outcome": "Audio upload failed", "status": "Unsupported Format"}}, {"name": "Successful Media Resize and Align", "description": "Verify that a user can resize and align embedded media.", "input": {"mediaType": "video", "size": "large", "alignment": "center", "page": "Test Page"}, "expected": {"outcome": "Media resized and aligned successfully", "status": "Media Displayed Correctly"}}, {"name": "Failed Media Resize - Invalid Size", "description": "Verify that resizing media with an invalid size fails.", "input": {"mediaType": "video", "size": "invalid-size", "alignment": "center", "page": "Test Page"}, "expected": {"outcome": "Media resize failed", "status": "Invalid Size"}}, {"name": "Edge Case - Large Audio File Upload", "description": "Verify the behavior when uploading a very large audio file.", "input": {"audioFile": "large_audio.wav", "page": "Test Page"}, "expected": {"outcome": "Audio upload may succeed or fail based on system limits", "status": "Upload Timed Out/ Upload Successful"}}, {"name": "Edge Case - Long Video URL", "description": "Verify the behavior when embedding a video with an extremely long URL.", "input": {"videoUrl": "https://www.example.com/very/long/url/test/video?param1=value1&param2=value2...", "page": "Test Page"}, "expected": {"outcome": "Video embed may succeed or fail based on URL length limits", "status": "Video Displayed/ Invalid URL"}}]}
{"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Page Linking using '@'", "description": "Verify that a user can successfully link to another page using the '@' symbol.", "input": {"page1": "Page 1", "page2": "Page 2", "linkMethod": "@"}, "expected": {"outcome": "Page linked successfully", "linkFormat": "Page 2"}}, {"name": "Successful Page Linking using '[['", "description": "Verify that a user can successfully link to another page using the '[[' symbol.", "input": {"page1": "Page 1", "page2": "Page 2", "linkMethod": "[["}, "expected": {"outcome": "Page linked successfully", "linkFormat": "[[Page 2]]"}}, {"name": "Successful Page Linking using '+'", "description": "Verify that a user can successfully link to another page using the '+' symbol.", "input": {"page1": "Page 1", "page2": "Page 2", "linkMethod": "+"}, "expected": {"outcome": "Page linked successfully", "linkFormat": "+Page 2"}}, {"name": "Failed Page Linking - Nonexistent Page", "description": "Verify that linking fails when the target page does not exist.", "input": {"page1": "Page 1", "page2": "Nonexistent Page", "linkMethod": "@"}, "expected": {"outcome": "Page linking failed", "linkFormat": null}}, {"name": "Failed Page Linking - Empty Page Name", "description": "Verify that linking fails when the target page name is empty.", "input": {"page1": "Page 1", "page2": "", "linkMethod": "[["}, "expected": {"outcome": "Page linking failed", "linkFormat": null}}, {"name": "Failed Page Linking - Invalid Characters", "description": "Verify that linking fails when the target page name contains invalid characters.", "input": {"page1": "Page 1", "page2": "Page 2#Invalid", "linkMethod": "+"}, "expected": {"outcome": "Page linking failed", "linkFormat": null}}, {"name": "Edge Case - Long Page Name", "description": "Verify linking behavior with a very long page name.", "input": {"page1": "Page 1", "page2": "This is a very long page name exceeding the character limit test", "linkMethod": "@"}, "expected": {"outcome": "Page linked successfully or partially linked/truncated", "linkFormat": "This is a very long page name exceeding the character limit test"}}]}
{"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}], "GPT4o_testcases": [{"name": "Valid URL - Paste as Mention", "description": "Verify that a valid URL is pasted and formatted as a mention.", "input": {"url": "https://www.example.com"}, "expected": {"outcome": "URL pasted as mention", "status": "Success"}}, {"name": "Invalid URL - Paste as Mention", "description": "Verify the behavior when pasting an invalid URL.", "input": {"url": "invalid-url"}, "expected": {"outcome": "Invalid URL", "status": "Error"}}, {"name": "Empty URL - Paste as Mention", "description": "Verify the behavior when pasting an empty URL.", "input": {"url": ""}, "expected": {"outcome": "Empty URL", "status": "Error"}}, {"name": "Long URL - Paste as Mention", "description": "Verify the behavior with a very long URL.", "input": {"url": "https://www.example.com/very/long/path/that/exceeds/character/limit"}, "expected": {"outcome": "URL pasted as mention", "status": "Success"}}, {"name": "URL with Special Characters - Paste as Mention", "description": "Verify the behavior with a URL containing special characters.", "input": {"url": "https://www.example.com/!@#$%^&*()_+=-`~"}, "expected": {"outcome": "URL pasted as mention", "status": "Success"}}, {"name": "URL with Unicode Characters - Paste as Mention", "description": "Verify the behavior with a URL containing Unicode characters.", "input": {"url": "https://www.example.com/\u0442\u0435\u0441\u0442"}, "expected": {"outcome": "URL pasted as mention", "status": "Success"}}]}
{"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Content Transfer", "description": "Verify that content can be successfully transferred from one account to another.", "input": {"userAccountId": "user123", "newAccountId": "user456", "contentType": "page", "contentName": "Test Page", "permissions": "owner"}, "expected": {"outcome": "Content transferred successfully", "status": "Ownership transferred"}}, {"name": "Transfer to Non-Existent Account", "description": "Verify that content cannot be transferred to a non-existent account.", "input": {"userAccountId": "user123", "newAccountId": "nonexistent", "contentType": "page", "contentName": "Test Page", "permissions": "owner"}, "expected": {"outcome": "Content transfer failed", "status": "Account not found"}}, {"name": "Transfer with Invalid Permissions", "description": "Verify that content cannot be transferred without owner permissions.", "input": {"userAccountId": "user123", "newAccountId": "user456", "contentType": "page", "contentName": "Test Page", "permissions": "editor"}, "expected": {"outcome": "Content transfer failed", "status": "Insufficient permissions"}}, {"name": "Transfer Non-existent Content", "description": "Verify that non-existent content cannot be transferred.", "input": {"userAccountId": "user123", "newAccountId": "user456", "contentType": "page", "contentName": "NonExistentPage", "permissions": "owner"}, "expected": {"outcome": "Content transfer failed", "status": "Content not found"}}, {"name": "Transfer with Empty New Account ID", "description": "Verify that content cannot be transferred with an empty new account ID.", "input": {"userAccountId": "user123", "newAccountId": "", "contentType": "page", "contentName": "Test Page", "permissions": "owner"}, "expected": {"outcome": "Content transfer failed", "status": "Invalid account ID"}}]}
{"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}], "GPT4o_testcases": [{"name": "Successful Content Duplication", "description": "Verify that a user can successfully duplicate a block of content.", "input": {"pageId": "page_123", "blockId": "block_456", "action": "Duplicate"}, "expected": {"outcome": "Content duplicated successfully", "status": "Duplicated Block Created"}}, {"name": "Successful Content Deletion", "description": "Verify that a user can successfully delete a block of content.", "input": {"pageId": "page_123", "blockId": "block_456", "action": "Delete"}, "expected": {"outcome": "Content deleted successfully", "status": "Block Deleted"}}, {"name": "Failed Content Duplication - Invalid Block ID", "description": "Verify that content duplication fails with an invalid block ID.", "input": {"pageId": "page_123", "blockId": "invalid_block_id", "action": "Duplicate"}, "expected": {"outcome": "Content duplication failed", "status": "Invalid Block ID"}}, {"name": "Failed Content Deletion - Invalid Block ID", "description": "Verify that content deletion fails with an invalid block ID.", "input": {"pageId": "page_123", "blockId": "invalid_block_id", "action": "Delete"}, "expected": {"outcome": "Content deletion failed", "status": "Invalid Block ID"}}, {"name": "Failed Content Action - Invalid Action", "description": "Verify that content action fails with an invalid action.", "input": {"pageId": "page_123", "blockId": "block_456", "action": "Invalid Action"}, "expected": {"outcome": "Content action failed", "status": "Invalid Action"}}, {"name": "Edge Case - Duplicate Empty Block", "description": "Verify the behavior when duplicating an empty block.", "input": {"pageId": "page_123", "blockId": "empty_block_id", "action": "Duplicate"}, "expected": {"outcome": "Empty block duplicated", "status": "Duplicated Block Created"}}, {"name": "Edge Case - Delete Last Block", "description": "Verify the behavior when deleting the last block on a page.", "input": {"pageId": "page_123", "blockId": "last_block_id", "action": "Delete"}, "expected": {"outcome": "Last block deleted", "status": "Block Deleted"}}]}
{"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Content Restoration", "description": "Verify that a user can successfully restore deleted content within 30 days.", "input": {"userId": "user_123", "contentId": "content_456", "deletionDate": "2024-07-20", "restoreDate": "2024-07-25"}, "expected": {"outcome": "Content restored successfully", "status": "Restored"}}, {"name": "Failed Content Restoration (Expired)", "description": "Verify that a user cannot restore deleted content after 30 days.", "input": {"userId": "user_123", "contentId": "content_789", "deletionDate": "2024-06-20", "restoreDate": "2024-07-25"}, "expected": {"outcome": "Content restoration failed", "status": "Restoration period expired"}}, {"name": "Failed Content Restoration (Invalid Content ID)", "description": "Verify that content restoration fails with an invalid content ID.", "input": {"userId": "user_123", "contentId": "invalid_content_id", "deletionDate": "2024-07-20", "restoreDate": "2024-07-25"}, "expected": {"outcome": "Content restoration failed", "status": "Invalid content ID"}}, {"name": "Content Restoration on 30th Day", "description": "Verify that a user can restore deleted content on the 30th day.", "input": {"userId": "user_123", "contentId": "content_101", "deletionDate": "2024-06-25", "restoreDate": "2024-07-25"}, "expected": {"outcome": "Content restored successfully", "status": "Restored"}}, {"name": "Content Restoration on 1st Day", "description": "Verify that a user can restore deleted content on the 1st day.", "input": {"userId": "user_123", "contentId": "content_112", "deletionDate": "2024-07-24", "restoreDate": "2024-07-25"}, "expected": {"outcome": "Content restored successfully", "status": "Restored"}}]}
{"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful Content Sync", "description": "Verify that content syncs successfully between two pages.", "input": {"sourcePageId": "page_1", "destinationPageId": "page_2", "content": "This is a test content."}, "expected": {"outcome": "Content synced successfully", "status": "Synced"}}, {"name": "Sync with Empty Content", "description": "Verify the behavior when syncing empty content.", "input": {"sourcePageId": "page_3", "destinationPageId": "page_4", "content": ""}, "expected": {"outcome": "Empty content synced", "status": "Synced"}}, {"name": "Sync to Same Page", "description": "Verify the behavior when syncing content to the same page.", "input": {"sourcePageId": "page_5", "destinationPageId": "page_5", "content": "Self sync test."}, "expected": {"outcome": "Content synced to the same page", "status": "Synced"}}, {"name": "Sync with Non-Existent Source Page", "description": "Verify the behavior when the source page does not exist.", "input": {"sourcePageId": "non_existent_page", "destinationPageId": "page_6", "content": "Test content."}, "expected": {"outcome": "Source page not found", "status": "Error"}}, {"name": "Sync with Non-Existent Destination Page", "description": "Verify the behavior when the destination page does not exist.", "input": {"sourcePageId": "page_7", "destinationPageId": "non_existent_page", "content": "Test content."}, "expected": {"outcome": "Destination page not found", "status": "Error"}}, {"name": "Sync without Edit Permission", "description": "Verify the behavior when the user lacks edit permissions on the destination page.", "input": {"sourcePageId": "page_8", "destinationPageId": "page_9_no_permission", "content": "Test content."}, "expected": {"outcome": "Permission denied", "status": "Error"}}, {"name": "Sync with Special Characters", "description": "Verify the behavior when syncing content with special characters.", "input": {"sourcePageId": "page_10", "destinationPageId": "page_11", "content": "<script>alert('test');</script>"}, "expected": {"outcome": "Content with special characters synced", "status": "Synced"}}, {"name": "Sync with Large Content", "description": "Verify the behavior when syncing large content.", "input": {"sourcePageId": "page_12", "destinationPageId": "page_13", "content": "Very large content exceeding character limit."}, "expected": {"outcome": "Large content synced", "status": "Synced"}}]}
{"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful Unsync Single Block", "description": "Verify that a user can successfully unsync a single synced block.", "input": {"pageId": "page_1", "blockId": "block_1", "syncedPages": ["page_2", "page_3"]}, "expected": {"outcome": "Unsync successful", "status": "Block unsynced from all pages"}}, {"name": "Successful Unsync Multiple Blocks", "description": "Verify that a user can successfully unsync multiple synced blocks.", "input": {"pageId": "page_1", "blockIds": ["block_1", "block_2"], "syncedPages": ["page_2", "page_3"]}, "expected": {"outcome": "Unsync successful", "status": "Blocks unsynced from all pages"}}, {"name": "Unsync Non-Existent Block", "description": "Verify the behavior when attempting to unsync a non-existent block.", "input": {"pageId": "page_1", "blockId": "block_999", "syncedPages": ["page_2", "page_3"]}, "expected": {"outcome": "Unsync failed", "status": "Block not found"}}, {"name": "Unsync Already Unsynced Block", "description": "Verify the behavior when attempting to unsync an already unsynced block.", "input": {"pageId": "page_1", "blockId": "block_1", "syncedPages": []}, "expected": {"outcome": "Unsync failed", "status": "Block already unsynced"}}, {"name": "Unsync with Invalid Page ID", "description": "Verify the behavior when attempting to unsync with an invalid page ID.", "input": {"pageId": "invalid_page_id", "blockId": "block_1", "syncedPages": ["page_2", "page_3"]}, "expected": {"outcome": "Unsync failed", "status": "Invalid page ID"}}, {"name": "Unsync with Empty Synced Pages List", "description": "Verify the behavior when attempting to unsync with an empty synced pages list.", "input": {"pageId": "page_1", "blockId": "block_1", "syncedPages": []}, "expected": {"outcome": "Unsync failed", "status": "Block already unsynced"}}]}
{"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}], "GPT4o_testcases": [{"name": "Successful Code Block Creation and Edit", "description": "Verify that a user can successfully create and edit a code block with valid input.", "input": {"language": "Python", "code": "print('Hello, world!')"}, "expected": {"outcome": "Code block created and edited successfully", "status": "Code block saved"}}, {"name": "Empty Code Block Creation", "description": "Verify the behavior when creating a code block without any code.", "input": {"language": "JavaScript", "code": ""}, "expected": {"outcome": "Empty code block created", "status": "Code block saved"}}, {"name": "Unsupported Language Selection", "description": "Verify the behavior when selecting an unsupported language for the code block.", "input": {"language": "InvalidLanguage", "code": "some code"}, "expected": {"outcome": "Code block created with default language or error message displayed", "status": "Code block saved or error message"}}, {"name": "Special Characters in Code", "description": "Verify that special characters are handled correctly within the code block.", "input": {"language": "HTML", "code": "<div>Test</div>"}, "expected": {"outcome": "Code block displays special characters correctly", "status": "Code block saved"}}, {"name": "Long Code Input", "description": "Verify the behavior when pasting a very long code snippet into the code block.", "input": {"language": "Java", "code": "public class Main { // Very long code here }"}, "expected": {"outcome": "Code block handles long code input correctly", "status": "Code block saved"}}, {"name": "Code Block Deletion", "description": "Verify that a user can delete a code block.", "input": {"language": "C++", "code": "int main() { return 0; }", "action": "delete"}, "expected": {"outcome": "Code block deleted successfully", "status": "Code block removed"}}]}
{"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}], "GPT4o_testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline equation is displayed correctly.", "input": {"equation": "$$x^2 + y^2 = r^2$$"}, "expected": {"outcome": "Equation displayed correctly", "renderedEquation": "x\u00b2 + y\u00b2 = r\u00b2"}}, {"name": "Valid Block Equation", "description": "Verify that a valid block equation is displayed correctly.", "input": {"equation": "/math \\frac{1}{2}"}, "expected": {"outcome": "Equation displayed correctly", "renderedEquation": "\u00bd"}}, {"name": "Invalid Inline Equation", "description": "Verify that an invalid inline equation is handled gracefully.", "input": {"equation": "$$x^2 + y^2 = $$"}, "expected": {"outcome": "Equation displays an error or placeholder", "renderedEquation": "Error"}}, {"name": "Invalid Block Equation", "description": "Verify that an invalid block equation is handled gracefully.", "input": {"equation": "/math \\fra"}, "expected": {"outcome": "Equation displays an error or placeholder", "renderedEquation": "Error"}}, {"name": "Empty Inline Equation", "description": "Verify the behavior with an empty inline equation.", "input": {"equation": "$$$$"}, "expected": {"outcome": "Empty equation displayed or placeholder", "renderedEquation": ""}}, {"name": "Empty Block Equation", "description": "Verify the behavior with an empty block equation.", "input": {"equation": "/math "}, "expected": {"outcome": "Empty equation displayed or placeholder", "renderedEquation": ""}}, {"name": "Complex Equation with Special Characters", "description": "Verify that a complex equation with special characters is displayed correctly.", "input": {"equation": "$$\\sum_{i=1}^{n} i = \\frac{n(n+1)}{2}$$"}, "expected": {"outcome": "Equation displayed correctly", "renderedEquation": "\u2211\u1d62\u208c\u2081\u207f i = n(n+1)/2"}}, {"name": "Very Long Equation", "description": "Verify the behavior with a very long equation.", "input": {"equation": "$$x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x + x = 30x$$"}, "expected": {"outcome": "Equation displayed correctly or truncated gracefully", "renderedEquation": "30x"}}]}
{"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}], "GPT4o_testcases": [{"name": "Successful Database Creation - Table", "description": "Verify that a user can successfully create a new table database.", "input": {"databaseType": "table", "databaseName": "My New Table", "properties": {"Name": {"type": "title"}, "Status": {"type": "select", "options": ["Not started", "In progress", "Completed"]}}}, "expected": {"outcome": "Database created successfully", "status": "Database Created"}}, {"name": "Successful Database Creation - Board", "description": "Verify that a user can successfully create a new board database.", "input": {"databaseType": "board", "databaseName": "My Kanban Board", "properties": {"Name": {"type": "title"}, "Status": {"type": "select", "options": ["Todo", "Doing", "Done"]}}}, "expected": {"outcome": "Database created successfully", "status": "Database Created"}}, {"name": "Failed Database Creation - Empty Name", "description": "Verify that a user cannot create a database with an empty name.", "input": {"databaseType": "table", "databaseName": "", "properties": {"Name": {"type": "title"}}}, "expected": {"outcome": "Database creation failed", "status": "Invalid Database Name"}}, {"name": "Failed Database Creation - Special Characters in Name", "description": "Verify that a user cannot create a database with special characters in the name.", "input": {"databaseType": "list", "databaseName": "My Database / ? #", "properties": {"Name": {"type": "title"}}}, "expected": {"outcome": "Database creation failed", "status": "Invalid Database Name"}}, {"name": "Failed Database Creation - No Properties", "description": "Verify that a user cannot create a database without defining any properties.", "input": {"databaseType": "board", "databaseName": "My Board", "properties": {}}, "expected": {"outcome": "Database creation failed", "status": "No Properties Defined"}}, {"name": "Edge Case - Long Database Name", "description": "Verify database creation with a very long name.", "input": {"databaseType": "table", "databaseName": "This is a very long database name that exceeds the character limit allowed by Notion databases", "properties": {"Name": {"type": "title"}}}, "expected": {"outcome": "Database creation failed", "status": "Database Name Too Long"}}]}
{"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}], "GPT4o_testcases": [{"name": "Successful Table View Creation", "description": "Verify that a user can successfully create a table view.", "input": {"databaseId": "db_123", "viewType": "Table", "filters": [], "sorts": [], "grouping": null}, "expected": {"outcome": "Table view created successfully", "status": "View Created"}}, {"name": "Successful Board View Creation with Filters and Sorts", "description": "Verify that a user can successfully create a board view with filters and sorts.", "input": {"databaseId": "db_456", "viewType": "Board", "filters": [{"property": "Status", "value": "In Progress"}], "sorts": [{"property": "Priority", "direction": "ascending"}], "grouping": "Status"}, "expected": {"outcome": "Board view created successfully", "status": "View Created"}}, {"name": "Failed View Creation - Invalid View Type", "description": "Verify that view creation fails with an invalid view type.", "input": {"databaseId": "db_789", "viewType": "InvalidViewType", "filters": [], "sorts": [], "grouping": null}, "expected": {"outcome": "View creation failed", "status": "Invalid View Type"}}, {"name": "Failed View Creation - Missing Database ID", "description": "Verify that view creation fails with a missing database ID.", "input": {"databaseId": null, "viewType": "Table", "filters": [], "sorts": [], "grouping": null}, "expected": {"outcome": "View creation failed", "status": "Missing Database ID"}}, {"name": "Failed View Creation - Invalid Filter Format", "description": "Verify that view creation fails with an invalid filter format.", "input": {"databaseId": "db_101", "viewType": "Calendar", "filters": [{"invalid": "filter"}], "sorts": [], "grouping": null}, "expected": {"outcome": "View creation failed", "status": "Invalid Filter Format"}}, {"name": "View Creation with Empty Filters and Sorts", "description": "Verify that a user can create a view with empty filters and sorts.", "input": {"databaseId": "db_112", "viewType": "List", "filters": [], "sorts": [], "grouping": null}, "expected": {"outcome": "List view created successfully", "status": "View Created"}}]}
{"usecase": {"name": "Managing Database Pages", "scenario": "User manages individual pages within a database, adding, opening, and editing them.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to add and edit database pages."], "steps": ["User navigates to the database and clicks on 'New' to add a new page.", "User enters the details for the new page and saves it.", "User opens an existing page to edit its content.", "User modifies properties or adds new content to the page."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New Database Page", "description": "Verify that the user can create a new page within the database.", "input": {"pageName": "New Task", "properties": {"Status": "To-Do", "Due Date": "2024-10-20"}}, "expected": {"outcome": "New page created successfully in the database.", "status": "Page Created"}}, {"name": "Editing Existing Page Content", "description": "Verify that the user can edit an existing page's content in the database.", "input": {"pageName": "Task 1", "newContent": "Updated task details."}, "expected": {"outcome": "Page content updated successfully.", "status": "Updated"}}, {"name": "Deleting a Database Page", "description": "Verify that the user can delete a page from the database.", "input": {"pageName": "Old Task"}, "expected": {"outcome": "Page deleted successfully from the database.", "status": "Deleted"}}], "GPT4o_testcases": [{"name": "Successful Page Creation", "description": "Verify that a user can successfully create a new page in the database.", "input": {"databaseId": "db_123", "pageTitle": "Test Page", "pageContent": "This is a test page."}, "expected": {"outcome": "Page created successfully", "status": "Page Added"}}, {"name": "Failed Page Creation - Empty Title", "description": "Verify that page creation fails if the title is empty.", "input": {"databaseId": "db_123", "pageTitle": "", "pageContent": "This is a test page."}, "expected": {"outcome": "Page creation failed", "status": "Title Required"}}, {"name": "Successful Page Edit", "description": "Verify that a user can successfully edit an existing page.", "input": {"pageId": "page_456", "newPageTitle": "Updated Test Page", "newPageContent": "This is updated content."}, "expected": {"outcome": "Page updated successfully", "status": "Page Updated"}}, {"name": "Failed Page Edit - Invalid Page ID", "description": "Verify that page edit fails if an invalid page ID is provided.", "input": {"pageId": "invalid_page_id", "newPageTitle": "Updated Test Page", "newPageContent": "This is updated content."}, "expected": {"outcome": "Page update failed", "status": "Invalid Page ID"}}, {"name": "Page Creation with Special Characters", "description": "Verify page creation with special characters in title and content.", "input": {"databaseId": "db_123", "pageTitle": "Test Page with !@#$%^&*()", "pageContent": "Content with special characters: <>?\"'"}, "expected": {"outcome": "Page created successfully", "status": "Page Added"}}, {"name": "Page Creation with Very Long Title", "description": "Verify page creation with a very long title.", "input": {"databaseId": "db_123", "pageTitle": "This is a very long title that exceeds the character limit for a page title.", "pageContent": "This is the page content."}, "expected": {"outcome": "Page creation failed", "status": "Title Too Long"}}]}
{"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}], "GPT4o_testcases": [{"name": "Successful Collaboration with Edit Permissions", "description": "Verify that team members can successfully add and edit pages when granted 'Can edit content' permissions.", "input": {"userId": "user_1", "teamMembers": ["user_2", "user_3"], "permission": "Can edit content", "pageContent": "Initial page content", "updatedContent": "Updated page content"}, "expected": {"outcome": "Collaboration successful", "status": "Changes saved", "pageContent": "Updated page content"}}, {"name": "Failed Collaboration with View-Only Permissions", "description": "Verify that team members cannot edit pages when granted 'Can view' permissions.", "input": {"userId": "user_1", "teamMembers": ["user_2", "user_3"], "permission": "Can view", "pageContent": "Initial page content", "updatedContent": "Updated page content"}, "expected": {"outcome": "Collaboration failed", "status": "Edit permission denied", "pageContent": "Initial page content"}}, {"name": "Collaboration with Empty Database", "description": "Verify collaboration behavior when the database is empty.", "input": {"userId": "user_1", "teamMembers": ["user_2", "user_3"], "permission": "Can edit content", "pageContent": null, "updatedContent": "New page content"}, "expected": {"outcome": "Collaboration successful", "status": "Changes saved", "pageContent": "New page content"}}, {"name": "Collaboration with Large Team", "description": "Verify collaboration behavior with a large number of team members.", "input": {"userId": "user_1", "teamMembers": ["user_2", "user_3", "user_4", "user_5", "user_6", "user_7", "user_8", "user_9", "user_10"], "permission": "Can edit content", "pageContent": "Initial page content", "updatedContent": "Updated page content"}, "expected": {"outcome": "Collaboration successful", "status": "Changes saved", "pageContent": "Updated page content"}}, {"name": "Collaboration with Invalid User", "description": "Verify behavior when sharing with an invalid user.", "input": {"userId": "user_1", "teamMembers": ["invalid_user"], "permission": "Can edit content", "pageContent": "Initial page content", "updatedContent": "Updated page content"}, "expected": {"outcome": "Collaboration failed", "status": "Invalid user", "pageContent": "Initial page content"}}]}
{"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Database Lock", "description": "Verify that an admin user can successfully lock the database.", "input": {"userId": "admin_123", "action": "lock"}, "expected": {"outcome": "Database locked successfully", "status": "Locked"}}, {"name": "Successful Database Unlock", "description": "Verify that an admin user can successfully unlock the database.", "input": {"userId": "admin_123", "action": "unlock"}, "expected": {"outcome": "Database unlocked successfully", "status": "Unlocked"}}, {"name": "Database Lock Failure - Non-Admin User", "description": "Verify that a non-admin user cannot lock the database.", "input": {"userId": "user_456", "action": "lock"}, "expected": {"outcome": "Database lock failed", "status": "Unauthorized"}}, {"name": "Database Unlock Failure - Non-Admin User", "description": "Verify that a non-admin user cannot unlock the database.", "input": {"userId": "user_456", "action": "unlock"}, "expected": {"outcome": "Database unlock failed", "status": "Unauthorized"}}, {"name": "Database Lock Failure - Already Locked", "description": "Verify the behavior when attempting to lock an already locked database.", "input": {"userId": "admin_123", "action": "lock", "currentStatus": "Locked"}, "expected": {"outcome": "Database lock failed", "status": "Already Locked"}}, {"name": "Database Unlock Failure - Already Unlocked", "description": "Verify the behavior when attempting to unlock an already unlocked database.", "input": {"userId": "admin_123", "action": "unlock", "currentStatus": "Unlocked"}, "expected": {"outcome": "Database unlock failed", "status": "Already Unlocked"}}, {"name": "Database Operation Failure - Invalid Action", "description": "Verify the behavior when providing an invalid action.", "input": {"userId": "admin_123", "action": "invalid_action"}, "expected": {"outcome": "Database operation failed", "status": "Invalid Action"}}]}
{"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Attempt to Modify View in Locked Database", "description": "Verify the system behavior when a user attempts to modify a view in a locked database.", "input": {"userId": "user_123", "databaseName": "locked_db", "action": "modify_view", "viewName": "view1"}, "expected": {"outcome": "Operation failed", "status": "Database locked"}}, {"name": "Attempt to Alter Table in Locked Database", "description": "Verify the system behavior when a user attempts to alter a table in a locked database.", "input": {"userId": "user_123", "databaseName": "locked_db", "action": "alter_table", "tableName": "table1"}, "expected": {"outcome": "Operation failed", "status": "Database locked"}}, {"name": "Attempt to Add Column in Locked Database", "description": "Verify the system behavior when a user attempts to add a column to a table in a locked database.", "input": {"userId": "user_123", "databaseName": "locked_db", "action": "add_column", "tableName": "table1", "columnName": "new_column"}, "expected": {"outcome": "Operation failed", "status": "Database locked"}}, {"name": "Attempt to Modify Stored Procedure in Locked Database", "description": "Verify the system behavior when a user attempts to modify a stored procedure in a locked database.", "input": {"userId": "user_123", "databaseName": "locked_db", "action": "modify_stored_procedure", "procedureName": "procedure1"}, "expected": {"outcome": "Operation failed", "status": "Database locked"}}, {"name": "Attempt to Access Data in Locked Database", "description": "Verify the system behavior when a user attempts to access data within a locked database (read-only access).", "input": {"userId": "user_123", "databaseName": "locked_db", "action": "select_data", "tableName": "table1"}, "expected": {"outcome": "Operation successful", "status": "Data retrieved"}}]}
{"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Property Addition", "description": "Verify that a user can successfully add a new property.", "input": {"propertyName": "newProperty", "propertyType": "INT", "defaultValue": "0"}, "expected": {"outcome": "Property added successfully", "status": "Property Created"}}, {"name": "Failed Property Addition - Duplicate Name", "description": "Verify that a user cannot add a property with a duplicate name.", "input": {"propertyName": "existingProperty", "propertyType": "INT", "defaultValue": "0"}, "expected": {"outcome": "Property addition failed", "status": "Duplicate Property Name"}}, {"name": "Failed Property Addition - Invalid Type", "description": "Verify that a user cannot add a property with an invalid type.", "input": {"propertyName": "newProperty", "propertyType": "INVALID_TYPE", "defaultValue": "0"}, "expected": {"outcome": "Property addition failed", "status": "Invalid Property Type"}}, {"name": "Successful Property Edit", "description": "Verify that a user can successfully edit an existing property.", "input": {"propertyName": "existingProperty", "newPropertyName": "updatedProperty", "propertyType": "STRING", "defaultValue": "updatedValue"}, "expected": {"outcome": "Property edited successfully", "status": "Property Updated"}}, {"name": "Failed Property Edit - Nonexistent Property", "description": "Verify that a user cannot edit a nonexistent property.", "input": {"propertyName": "nonexistentProperty", "newPropertyName": "updatedProperty", "propertyType": "STRING", "defaultValue": "updatedValue"}, "expected": {"outcome": "Property edit failed", "status": "Property Not Found"}}, {"name": "Successful Property Deletion", "description": "Verify that a user can successfully delete an existing property.", "input": {"propertyName": "existingProperty"}, "expected": {"outcome": "Property deleted successfully", "status": "Property Deleted"}}, {"name": "Failed Property Deletion - Nonexistent Property", "description": "Verify that a user cannot delete a nonexistent property.", "input": {"propertyName": "nonexistentProperty"}, "expected": {"outcome": "Property deletion failed", "status": "Property Not Found"}}, {"name": "Failed Property Addition - Empty Property Name", "description": "Verify that a user cannot add a property with an empty name.", "input": {"propertyName": "", "propertyType": "INT", "defaultValue": "0"}, "expected": {"outcome": "Property addition failed", "status": "Invalid Property Name"}}]}
{"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid Integer Input", "description": "Verify system accepts a valid integer input.", "input": {"propertyType": "Integer", "inputValue": "123"}, "expected": {"outcome": "Input accepted", "status": "Valid"}}, {"name": "Invalid Integer Input", "description": "Verify system rejects an invalid integer input.", "input": {"propertyType": "Integer", "inputValue": "123.45"}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}, {"name": "Empty Integer Input", "description": "Verify system rejects an empty integer input.", "input": {"propertyType": "Integer", "inputValue": ""}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}, {"name": "Valid String Input", "description": "Verify system accepts a valid string input.", "input": {"propertyType": "String", "inputValue": "Test String"}, "expected": {"outcome": "Input accepted", "status": "Valid"}}, {"name": "Empty String Input", "description": "Verify system accepts an empty string input.", "input": {"propertyType": "String", "inputValue": ""}, "expected": {"outcome": "Input accepted", "status": "Valid"}}, {"name": "Valid Date Input", "description": "Verify system accepts a valid date input.", "input": {"propertyType": "Date", "inputValue": "2024-07-24"}, "expected": {"outcome": "Input accepted", "status": "Valid"}}, {"name": "Invalid Date Input", "description": "Verify system rejects an invalid date input.", "input": {"propertyType": "Date", "inputValue": "2024-13-32"}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}, {"name": "Empty Date Input", "description": "Verify system rejects an empty date input.", "input": {"propertyType": "Date", "inputValue": ""}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}, {"name": "Valid Boolean Input", "description": "Verify system accepts a valid boolean input.", "input": {"propertyType": "Boolean", "inputValue": "true"}, "expected": {"outcome": "Input accepted", "status": "Valid"}}, {"name": "Invalid Boolean Input", "description": "Verify system rejects an invalid boolean input.", "input": {"propertyType": "Boolean", "inputValue": "1"}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}, {"name": "Empty Boolean Input", "description": "Verify system rejects an empty boolean input.", "input": {"propertyType": "Boolean", "inputValue": ""}, "expected": {"outcome": "Input rejected", "status": "Invalid"}}]}
{"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Relation Creation", "description": "Verify that a user can successfully create a relation between two databases.", "input": {"database1": "Database A", "database2": "Database B", "relationName": "Relation AB", "relationType": "One-to-many"}, "expected": {"outcome": "Relation created successfully", "status": "Relation Added"}}, {"name": "Failed Relation Creation - Duplicate Name", "description": "Verify that a user cannot create a relation with a duplicate name.", "input": {"database1": "Database A", "database2": "Database B", "relationName": "Relation AB", "relationType": "One-to-many"}, "expected": {"outcome": "Relation creation failed", "status": "Duplicate Relation Name"}}, {"name": "Failed Relation Creation - Missing Target Database", "description": "Verify that a user cannot create a relation without selecting a target database.", "input": {"database1": "Database A", "database2": null, "relationName": "Relation AB", "relationType": "One-to-many"}, "expected": {"outcome": "Relation creation failed", "status": "Missing Target Database"}}, {"name": "Failed Relation Creation - Invalid Relation Type", "description": "Verify that a user cannot create a relation with an invalid relation type.", "input": {"database1": "Database A", "database2": "Database B", "relationName": "Relation AB", "relationType": "Invalid Type"}, "expected": {"outcome": "Relation creation failed", "status": "Invalid Relation Type"}}, {"name": "Successful Relation Deletion", "description": "Verify that a user can successfully delete an existing relation.", "input": {"relationName": "Relation AB"}, "expected": {"outcome": "Relation deleted successfully", "status": "Relation Removed"}}, {"name": "Failed Relation Deletion - Nonexistent Relation", "description": "Verify that a user cannot delete a nonexistent relation.", "input": {"relationName": "Nonexistent Relation"}, "expected": {"outcome": "Relation deletion failed", "status": "Relation Not Found"}}]}
{"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Rollup Creation - Sum", "description": "Verify that a user can successfully create a rollup property with the 'sum' calculation method.", "input": {"relatedDatabase": "DatabaseA", "relatedProperty": "NumericProperty", "calculationMethod": "sum"}, "expected": {"outcome": "Rollup property created successfully", "status": "Rollup Created"}}, {"name": "Successful Rollup Creation - Average", "description": "Verify that a user can successfully create a rollup property with the 'average' calculation method.", "input": {"relatedDatabase": "DatabaseB", "relatedProperty": "DateProperty", "calculationMethod": "average"}, "expected": {"outcome": "Rollup property created successfully", "status": "Rollup Created"}}, {"name": "Failed Rollup Creation - Invalid Related Property", "description": "Verify that rollup creation fails if the related property does not exist.", "input": {"relatedDatabase": "DatabaseA", "relatedProperty": "NonExistentProperty", "calculationMethod": "sum"}, "expected": {"outcome": "Rollup property creation failed", "status": "Invalid Related Property"}}, {"name": "Failed Rollup Creation - Invalid Calculation Method", "description": "Verify that rollup creation fails if an invalid calculation method is selected.", "input": {"relatedDatabase": "DatabaseB", "relatedProperty": "DateProperty", "calculationMethod": "invalidMethod"}, "expected": {"outcome": "Rollup property creation failed", "status": "Invalid Calculation Method"}}, {"name": "Failed Rollup Creation - Missing Related Database", "description": "Verify that rollup creation fails if no related database is selected.", "input": {"relatedDatabase": null, "relatedProperty": "NumericProperty", "calculationMethod": "sum"}, "expected": {"outcome": "Rollup property creation failed", "status": "Missing Related Database"}}, {"name": "Failed Rollup Creation - Incompatible Property Type", "description": "Verify that rollup creation fails if the related property type is incompatible with the chosen calculation method.", "input": {"relatedDatabase": "DatabaseC", "relatedProperty": "TextProperty", "calculationMethod": "sum"}, "expected": {"outcome": "Rollup property creation failed", "status": "Incompatible Property Type"}}]}
{"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Rollup Creation with Valid Data", "description": "Verify successful rollup creation with valid data types and non-empty values.", "input": {"rollupName": "ValidRollup", "relationType": "SUM", "sourceProperty": "valid_numeric_property", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup created successfully", "status": "Success"}}, {"name": "Rollup Creation with Empty Relation Type", "description": "Verify rollup creation fails with an empty relation type.", "input": {"rollupName": "InvalidRollup", "relationType": "", "sourceProperty": "valid_numeric_property", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Invalid relation type"}}, {"name": "Rollup Creation with Invalid Relation Type", "description": "Verify rollup creation fails with an invalid relation type.", "input": {"rollupName": "InvalidRollup", "relationType": "INVALID_TYPE", "sourceProperty": "valid_numeric_property", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Invalid relation type"}}, {"name": "Rollup Creation with Empty Source Property", "description": "Verify rollup creation fails with an empty source property.", "input": {"rollupName": "InvalidRollup", "relationType": "SUM", "sourceProperty": "", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Invalid source property"}}, {"name": "Rollup Creation with Non-existent Source Property", "description": "Verify rollup creation fails with a non-existent source property.", "input": {"rollupName": "InvalidRollup", "relationType": "SUM", "sourceProperty": "non_existent_property", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Source property not found"}}, {"name": "Rollup Creation with Empty Target Property", "description": "Verify rollup creation fails with an empty target property.", "input": {"rollupName": "InvalidRollup", "relationType": "SUM", "sourceProperty": "valid_numeric_property", "targetProperty": ""}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Invalid target property"}}, {"name": "Rollup Creation with Incompatible Data Types", "description": "Verify rollup creation fails with incompatible data types between source and relation type.", "input": {"rollupName": "InvalidRollup", "relationType": "SUM", "sourceProperty": "text_property", "targetProperty": "rollup_result"}, "expected": {"outcome": "Rollup creation failed", "status": "Error: Incompatible data types"}}]}
{"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful View Creation - Table", "description": "Verify that a user can successfully create a new table view.", "input": {"viewType": "Table", "properties": ["Name", "Status", "Priority"], "filters": [], "sorts": []}, "expected": {"outcome": "View created successfully", "viewType": "Table", "viewName": "Table View"}}, {"name": "Successful View Creation - Board", "description": "Verify that a user can successfully create a new board view.", "input": {"viewType": "Board", "properties": ["Name", "Status", "Priority"], "filters": [], "sorts": [], "groupByProperty": "Status"}, "expected": {"outcome": "View created successfully", "viewType": "Board", "viewName": "Board View"}}, {"name": "Successful View Switching", "description": "Verify that a user can switch between different views.", "input": {"existingViews": ["Table View", "Board View"], "switchToView": "Board View"}, "expected": {"outcome": "View switched successfully", "currentView": "Board View"}}, {"name": "Failed View Creation - Invalid View Type", "description": "Verify that view creation fails with an invalid view type.", "input": {"viewType": "InvalidViewType", "properties": ["Name", "Status", "Priority"], "filters": [], "sorts": []}, "expected": {"outcome": "View creation failed", "error": "Invalid view type selected"}}, {"name": "Failed View Creation - No Properties Selected", "description": "Verify that view creation fails if no properties are selected.", "input": {"viewType": "Table", "properties": [], "filters": [], "sorts": []}, "expected": {"outcome": "View creation failed", "error": "At least one property must be selected"}}, {"name": "Failed View Switching - Nonexistent View", "description": "Verify that view switching fails if the target view does not exist.", "input": {"existingViews": ["Table View", "Board View"], "switchToView": "Nonexistent View"}, "expected": {"outcome": "View switching failed", "error": "View not found"}}]}
{"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Filter Application - Single Filter", "description": "Verify that a user can successfully apply a single filter to a database.", "input": {"databaseId": "db_123", "filterProperty": "Status", "filterCriteria": "Complete"}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View", "displayedRecords": "Only records with Status 'Complete'"}}, {"name": "Successful Filter Application - Multiple Filters (AND)", "description": "Verify that a user can successfully apply multiple filters using AND logic.", "input": {"databaseId": "db_123", "filterProperties": ["Status", "Priority"], "filterCriteria": ["Complete", "High"], "filterLogic": "AND"}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View", "displayedRecords": "Only records with Status 'Complete' AND Priority 'High'"}}, {"name": "Successful Filter Application - Multiple Filters (OR)", "description": "Verify that a user can successfully apply multiple filters using OR logic.", "input": {"databaseId": "db_123", "filterProperties": ["Status", "Priority"], "filterCriteria": ["Complete", "High"], "filterLogic": "OR"}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View", "displayedRecords": "Only records with Status 'Complete' OR Priority 'High'"}}, {"name": "Failed Filter Application - Invalid Property", "description": "Verify that filter application fails when an invalid property is selected.", "input": {"databaseId": "db_123", "filterProperty": "InvalidProperty", "filterCriteria": "Value"}, "expected": {"outcome": "Filter application failed", "status": "Invalid Filter", "displayedRecords": "Unfiltered View"}}, {"name": "Failed Filter Application - Empty Criteria", "description": "Verify that filter application fails when the filter criteria is empty.", "input": {"databaseId": "db_123", "filterProperty": "Status", "filterCriteria": ""}, "expected": {"outcome": "Filter application failed", "status": "Invalid Filter", "displayedRecords": "Unfiltered View"}}, {"name": "Edge Case - Filter with Special Characters", "description": "Verify filter application with special characters in criteria.", "input": {"databaseId": "db_123", "filterProperty": "Name", "filterCriteria": "John's Project"}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View", "displayedRecords": "Records matching 'John's Project'"}}, {"name": "Edge Case - Filter with Numeric Values", "description": "Verify filter application with numeric values in criteria.", "input": {"databaseId": "db_123", "filterProperty": "Quantity", "filterCriteria": "100"}, "expected": {"outcome": "Filter applied successfully", "status": "Filtered View", "displayedRecords": "Records matching '100'"}}]}
{"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Sort by Single Property Ascending", "description": "Verify sorting items in ascending order based on a single property.", "input": {"databaseId": "db_123", "sortProperty": "Name", "sortOrder": "Ascending"}, "expected": {"outcome": "Items sorted successfully", "status": "Sorted"}}, {"name": "Sort by Single Property Descending", "description": "Verify sorting items in descending order based on a single property.", "input": {"databaseId": "db_123", "sortProperty": "Date", "sortOrder": "Descending"}, "expected": {"outcome": "Items sorted successfully", "status": "Sorted"}}, {"name": "Sort by Multiple Properties", "description": "Verify sorting items based on multiple properties with different sort orders.", "input": {"databaseId": "db_123", "sortProperties": [{"property": "Priority", "order": "Descending"}, {"property": "DueDate", "order": "Ascending"}]}, "expected": {"outcome": "Items sorted successfully", "status": "Sorted"}}, {"name": "Sort Empty Database", "description": "Verify sorting an empty database.", "input": {"databaseId": "db_empty", "sortProperty": "Name", "sortOrder": "Ascending"}, "expected": {"outcome": "Items sorted successfully", "status": "Sorted"}}, {"name": "Sort with Invalid Property", "description": "Verify sorting with a non-existent property.", "input": {"databaseId": "db_123", "sortProperty": "InvalidProperty", "sortOrder": "Ascending"}, "expected": {"outcome": "Sorting failed", "status": "Invalid Property"}}, {"name": "Sort with Invalid Database ID", "description": "Verify sorting with an invalid database ID.", "input": {"databaseId": "invalid_db_id", "sortProperty": "Name", "sortOrder": "Ascending"}, "expected": {"outcome": "Sorting failed", "status": "Invalid Database"}}, {"name": "Sort with Missing Sort Order", "description": "Verify sorting with missing sort order.", "input": {"databaseId": "db_123", "sortProperty": "Name"}, "expected": {"outcome": "Sorting failed", "status": "Missing Sort Order"}}]}
{"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Grouping by Status", "description": "Verify that a user can successfully group items by the 'Status' property.", "input": {"databaseId": "db_123", "groupByProperty": "Status", "groupOrder": ["Not Started", "In Progress", "Completed"]}, "expected": {"outcome": "Items grouped successfully", "status": "Grouping applied"}}, {"name": "Grouping by Empty Property", "description": "Verify the behavior when grouping by a property with no values.", "input": {"databaseId": "db_123", "groupByProperty": "EmptyProperty", "groupOrder": []}, "expected": {"outcome": "Grouping might succeed, creating a single group or no groups", "status": "Grouping applied or No groups created"}}, {"name": "Grouping with Invalid Property", "description": "Verify the system behavior when attempting to group by a non-existent property.", "input": {"databaseId": "db_123", "groupByProperty": "InvalidProperty", "groupOrder": []}, "expected": {"outcome": "Grouping fails", "status": "Invalid property selected"}}, {"name": "Grouping with Special Characters", "description": "Verify grouping functionality with property values containing special characters.", "input": {"databaseId": "db_123", "groupByProperty": "PropertyWithSpecialChars", "groupOrder": ["Value with !@#$%^&*()", "Another Value"]}, "expected": {"outcome": "Items grouped successfully based on special characters", "status": "Grouping applied"}}, {"name": "Grouping with Empty Database", "description": "Verify the behavior when grouping an empty database.", "input": {"databaseId": "db_empty", "groupByProperty": "Status", "groupOrder": []}, "expected": {"outcome": "Grouping succeeds, but no groups are created", "status": "Grouping applied, no items to group"}}]}
{"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}], "GPT4o_testcases": null}
{"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Add Row with Valid Data", "description": "Verify adding a row with valid data succeeds.", "input": {"row_data": {"column1": "value1", "column2": "value2", "column3": "value3"}}, "expected": {"outcome": "Row added successfully", "status": "Success"}}, {"name": "Add Row with Invalid Data", "description": "Verify adding a row with invalid data fails.", "input": {"row_data": {"column1": "", "column2": "value2", "column3": "value3"}}, "expected": {"outcome": "Row addition failed", "status": "Error: Invalid input for column1"}}, {"name": "Edit Row with Valid Data", "description": "Verify editing a row with valid data succeeds.", "input": {"row_id": 1, "row_data": {"column1": "updated_value1", "column2": "updated_value2", "column3": "updated_value3"}}, "expected": {"outcome": "Row updated successfully", "status": "Success"}}, {"name": "Edit Row with Invalid Data", "description": "Verify editing a row with invalid data fails.", "input": {"row_id": 1, "row_data": {"column1": 123, "column2": "updated_value2", "column3": "updated_value3"}}, "expected": {"outcome": "Row update failed", "status": "Error: Invalid input for column1"}}, {"name": "Edit Non-Existent Row", "description": "Verify editing a non-existent row fails.", "input": {"row_id": 9999, "row_data": {"column1": "updated_value1", "column2": "updated_value2", "column3": "updated_value3"}}, "expected": {"outcome": "Row update failed", "status": "Error: Row not found"}}, {"name": "Delete Existing Row", "description": "Verify deleting an existing row succeeds.", "input": {"row_id": 1}, "expected": {"outcome": "Row deleted successfully", "status": "Success"}}, {"name": "Delete Non-Existent Row", "description": "Verify deleting a non-existent row fails.", "input": {"row_id": 9999}, "expected": {"outcome": "Row deletion failed", "status": "Error: Row not found"}}, {"name": "Add Column with Valid Name", "description": "Verify adding a column with a valid name succeeds.", "input": {"column_name": "new_column"}, "expected": {"outcome": "Column added successfully", "status": "Success"}}, {"name": "Add Column with Invalid Name", "description": "Verify adding a column with an invalid name fails.", "input": {"column_name": "invalid column name"}, "expected": {"outcome": "Column addition failed", "status": "Error: Invalid column name"}}, {"name": "Delete Existing Column", "description": "Verify deleting an existing column succeeds.", "input": {"column_name": "column1"}, "expected": {"outcome": "Column deleted successfully", "status": "Success"}}, {"name": "Delete Non-Existent Column", "description": "Verify deleting a non-existent column fails.", "input": {"column_name": "non_existent_column"}, "expected": {"outcome": "Column deletion failed", "status": "Error: Column not found"}}]}
{"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}], "GPT4o_testcases": null}
{"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}], "GPT4o_testcases": null}
{"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Add Event Successfully", "description": "Verify that a user can add an event to the calendar.", "input": {"userId": "user_123", "eventName": "Meeting", "eventDate": "2024-07-20", "eventTime": "10:00", "eventDescription": "Team meeting"}, "expected": {"outcome": "Event added successfully", "status": "Event Created"}}, {"name": "Add Event Failure - Missing Event Name", "description": "Verify that adding an event fails if the event name is missing.", "input": {"userId": "user_123", "eventName": "", "eventDate": "2024-07-20", "eventTime": "10:00", "eventDescription": "Team meeting"}, "expected": {"outcome": "Event addition failed", "status": "Missing Event Name"}}, {"name": "Add Event Failure - Past Date", "description": "Verify that adding an event fails if the event date is in the past.", "input": {"userId": "user_123", "eventName": "Meeting", "eventDate": "2023-07-20", "eventTime": "10:00", "eventDescription": "Team meeting"}, "expected": {"outcome": "Event addition failed", "status": "Invalid Date"}}, {"name": "Edit Event Successfully", "description": "Verify that a user can edit an existing event.", "input": {"userId": "user_123", "eventId": "event_456", "eventName": "Workshop", "eventDate": "2024-07-21", "eventTime": "14:00"}, "expected": {"outcome": "Event edited successfully", "status": "Event Updated"}}, {"name": "Edit Event Failure - Invalid Event ID", "description": "Verify that editing an event fails if the event ID is invalid.", "input": {"userId": "user_123", "eventId": "invalid_id", "eventName": "Workshop", "eventDate": "2024-07-21", "eventTime": "14:00"}, "expected": {"outcome": "Event edit failed", "status": "Invalid Event ID"}}, {"name": "Delete Event Successfully", "description": "Verify that a user can delete an existing event.", "input": {"userId": "user_123", "eventId": "event_789"}, "expected": {"outcome": "Event deleted successfully", "status": "Event Deleted"}}, {"name": "Delete Event Failure - Event Not Found", "description": "Verify that deleting an event fails if the event is not found.", "input": {"userId": "user_123", "eventId": "nonexistent_event"}, "expected": {"outcome": "Event deletion failed", "status": "Event Not Found"}}]}
{"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Unique ID Assignment - Auto Increment", "description": "Verify that unique IDs are automatically assigned incrementally.", "input": {"userId": "admin_001", "idFormat": "auto_increment", "startingValue": "1000"}, "expected": {"outcome": "Unique IDs assigned successfully", "status": "Configuration Updated", "nextId": "1001"}}, {"name": "Successful Unique ID Assignment - UUID", "description": "Verify that unique IDs are assigned using UUID format.", "input": {"userId": "admin_001", "idFormat": "uuid"}, "expected": {"outcome": "Unique IDs assigned successfully", "status": "Configuration Updated", "nextId": "a valid UUID"}}, {"name": "Failed Unique ID Assignment - Invalid Format", "description": "Verify that an error occurs when an invalid ID format is provided.", "input": {"userId": "admin_001", "idFormat": "invalid_format"}, "expected": {"outcome": "Unique ID assignment failed", "status": "Invalid ID Format"}}, {"name": "Failed Unique ID Assignment - Insufficient Permissions", "description": "Verify that an error occurs when a user without sufficient permissions attempts to assign IDs.", "input": {"userId": "user_002", "idFormat": "auto_increment", "startingValue": "1000"}, "expected": {"outcome": "Unique ID assignment failed", "status": "Insufficient Permissions"}}, {"name": "Failed Unique ID Assignment - Invalid Starting Value", "description": "Verify that an error occurs when an invalid starting value is provided for auto-increment.", "input": {"userId": "admin_001", "idFormat": "auto_increment", "startingValue": "abc"}, "expected": {"outcome": "Unique ID assignment failed", "status": "Invalid Starting Value"}}, {"name": "Edge Case - Auto Increment Overflow", "description": "Verify the behavior when the auto-increment value reaches the maximum limit.", "input": {"userId": "admin_001", "idFormat": "auto_increment", "startingValue": "9999999999"}, "expected": {"outcome": "Unique ID assignment failed or wraps around", "status": "Overflow Error or Value Wraps Around"}}]}
{"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Successful Teamspace Creation with Multiple Valid Emails", "description": "Verify that a user can successfully create a teamspace and invite multiple members with valid email addresses.", "input": {"teamspaceName": "Test Teamspace 1", "teamspaceIcon": "icon_url_1", "invitedEmails": ["test1@example.com", "test2@example.com", "test3@example.com"]}, "expected": {"outcome": "Teamspace created successfully", "status": "Members Invited"}}, {"name": "Successful Teamspace Creation with No Invitations", "description": "Verify that a user can successfully create a teamspace without inviting any members.", "input": {"teamspaceName": "Test Teamspace 2", "teamspaceIcon": "icon_url_2", "invitedEmails": []}, "expected": {"outcome": "Teamspace created successfully", "status": "No Members Invited"}}, {"name": "Failed Teamspace Creation with Empty Teamspace Name", "description": "Verify that a user cannot create a teamspace with an empty name.", "input": {"teamspaceName": "", "teamspaceIcon": "icon_url_3", "invitedEmails": ["test1@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Invalid Teamspace Name"}}, {"name": "Failed Teamspace Creation with Invalid Email Format", "description": "Verify that a user cannot create a teamspace when inviting members with invalid email addresses.", "input": {"teamspaceName": "Test Teamspace 4", "teamspaceIcon": "icon_url_4", "invitedEmails": ["invalid_email", "test2@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Invalid Email Format"}}, {"name": "Teamspace Creation with Long Teamspace Name", "description": "Verify the behavior when creating a teamspace with a name exceeding the character limit (Edge case).", "input": {"teamspaceName": "This is a very long teamspace name exceeding the allowed character limit for testing purposes.", "teamspaceIcon": "icon_url_5", "invitedEmails": ["test1@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Teamspace Name Too Long"}}, {"name": "Teamspace Creation with Special Characters in Name", "description": "Verify the behavior when creating a teamspace with special characters in the name.", "input": {"teamspaceName": "Test!@#$%^&*()_+ Teamspace", "teamspaceIcon": "icon_url_6", "invitedEmails": ["test1@example.com"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Invalid Teamspace Name"}}]}
{"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Owner Changes Member Permission To Full Access", "description": "Verify that a teamspace owner can change a member's permission to 'Full Access'.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Full Access"}, "expected": {"outcome": "Permission change successful", "status": "Full Access"}}, {"name": "Owner Changes Member Permission To Can View", "description": "Verify that a teamspace owner can change a member's permission to 'Can View'.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Can View"}, "expected": {"outcome": "Permission change successful", "status": "Can View"}}, {"name": "Owner Changes Member Permission To Can Edit", "description": "Verify that a teamspace owner can change a member's permission to 'Can Edit'.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Can Edit"}, "expected": {"outcome": "Permission change successful", "status": "Can Edit"}}, {"name": "Owner Changes Member Permission To Can Comment", "description": "Verify that a teamspace owner can change a member's permission to 'Can Comment'.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Can Comment"}, "expected": {"outcome": "Permission change successful", "status": "Can Comment"}}, {"name": "Owner Upgrades Member To Owner", "description": "Verify that a teamspace owner can upgrade a member to owner.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Owner"}, "expected": {"outcome": "Upgrade successful", "status": "Owner"}}, {"name": "Owner Downgrades Owner To Member", "description": "Verify that a teamspace owner can downgrade another owner to member.", "input": {"actor": "Teamspace Owner", "targetUser": "Owner", "newPermission": "Member"}, "expected": {"outcome": "Downgrade successful", "status": "Member"}}, {"name": "Member Changes Member Permission", "description": "Verify that a teamspace member can change another member's permission.", "input": {"actor": "Teamspace Member", "targetUser": "Member", "newPermission": "Can View"}, "expected": {"outcome": "Permission change successful", "status": "Can View"}}, {"name": "Member Attempts To Change Owner Permission", "description": "Verify that a teamspace member cannot change an owner's permission.", "input": {"actor": "Teamspace Member", "targetUser": "Owner", "newPermission": "Can View"}, "expected": {"outcome": "Permission change failed", "status": "Insufficient Privileges"}}, {"name": "Owner Attempts Invalid Permission Change", "description": "Verify that a teamspace owner cannot change a member's permission to an invalid value.", "input": {"actor": "Teamspace Owner", "targetUser": "Member", "newPermission": "Invalid Permission"}, "expected": {"outcome": "Permission change failed", "status": "Invalid Permission"}}]}
{"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Page Sharing with Individual Member", "description": "Verify that a user can successfully share a page with an individual member with specific access level.", "input": {"userId": "user_123", "pageId": "page_456", "memberId": "member_789", "accessLevel": "Read"}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Successful Page Sharing with Group", "description": "Verify that a user can successfully share a page with a group with specific access level.", "input": {"userId": "user_123", "pageId": "page_456", "groupId": "group_012", "accessLevel": "Write"}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Failed Page Sharing - Invalid Page ID", "description": "Verify that page sharing fails with an invalid page ID.", "input": {"userId": "user_123", "pageId": "invalid_page_id", "memberId": "member_789", "accessLevel": "Read"}, "expected": {"outcome": "Page sharing failed", "status": "Invalid Page ID"}}, {"name": "Failed Page Sharing - Invalid Member/Group ID", "description": "Verify that page sharing fails with an invalid member/group ID.", "input": {"userId": "user_123", "pageId": "page_456", "memberId": "invalid_member_id", "accessLevel": "Write"}, "expected": {"outcome": "Page sharing failed", "status": "Invalid Member/Group ID"}}, {"name": "Failed Page Sharing - Invalid Access Level", "description": "Verify that page sharing fails with an invalid access level.", "input": {"userId": "user_123", "pageId": "page_456", "memberId": "member_789", "accessLevel": "Invalid Access"}, "expected": {"outcome": "Page sharing failed", "status": "Invalid Access Level"}}, {"name": "Failed Page Sharing - No Members/Groups Selected", "description": "Verify that page sharing fails when no members or groups are selected.", "input": {"userId": "user_123", "pageId": "page_456", "memberId": null, "groupId": null, "accessLevel": "Read"}, "expected": {"outcome": "Page sharing failed", "status": "No Members/Groups Selected"}}, {"name": "Edge Case - Sharing with Self", "description": "Verify the behavior when a user tries to share a page with themselves.", "input": {"userId": "user_123", "pageId": "page_456", "memberId": "user_123", "accessLevel": "Read"}, "expected": {"outcome": "Page sharing redundant", "status": "Already Owner"}}]}
{"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Successful Page Publish with Random Domain", "description": "Verify that a user can successfully publish a page with a randomly generated domain.", "input": {"userId": "user_123", "pageId": "page_456", "subscription": "Free", "domain": "randomly_generated.example.com", "seo": "default", "linkExpiration": "never"}, "expected": {"outcome": "Page published successfully", "status": "Published", "url": "randomly_generated.example.com"}}, {"name": "Successful Page Publish with Custom Domain (Plus Subscription)", "description": "Verify that a user with a Plus subscription can successfully publish a page with a custom domain.", "input": {"userId": "user_789", "pageId": "page_012", "subscription": "Plus", "domain": "custom.example.com", "seo": "custom", "linkExpiration": "1 year"}, "expected": {"outcome": "Page published successfully", "status": "Published", "url": "custom.example.com"}}, {"name": "Failed Page Publish (Invalid Custom Domain)", "description": "Verify that a user cannot publish a page with an invalid custom domain.", "input": {"userId": "user_789", "pageId": "page_012", "subscription": "Plus", "domain": "invalid domain", "seo": "custom", "linkExpiration": "1 year"}, "expected": {"outcome": "Page publish failed", "status": "Invalid Domain", "url": null}}, {"name": "Failed Page Publish (Free User, Custom Domain)", "description": "Verify that a free user cannot publish a page with a custom domain.", "input": {"userId": "user_123", "pageId": "page_456", "subscription": "Free", "domain": "custom.example.com", "seo": "custom", "linkExpiration": "1 year"}, "expected": {"outcome": "Page publish failed", "status": "Insufficient Privileges", "url": null}}, {"name": "Failed Page Publish (Non-Existent Page)", "description": "Verify that a user cannot publish a non-existent page.", "input": {"userId": "user_123", "pageId": "non_existent_page", "subscription": "Free", "domain": "randomly_generated.example.com", "seo": "default", "linkExpiration": "never"}, "expected": {"outcome": "Page publish failed", "status": "Page Not Found", "url": null}}]}
{"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Collaboration and Approval", "description": "Verify that multiple users can collaborate and edits are approved when consistent.", "input": {"pageId": "page_123", "userIds": ["user_1", "user_2"], "blockId": "block_456", "edits": [{"userId": "user_1", "content": "This is a collaborative edit."}, {"userId": "user_2", "content": "This is another collaborative edit."}]}, "expected": {"outcome": "Edits approved", "status": "Changes Saved"}}, {"name": "Collaboration with Inconsistent Edits and Rejection", "description": "Verify that inconsistent edits are rejected.", "input": {"pageId": "page_123", "userIds": ["user_1", "user_2"], "blockId": "block_456", "edits": [{"userId": "user_1", "content": "This is edit 1."}, {"userId": "user_2", "content": "This is a conflicting edit."}]}, "expected": {"outcome": "Edits rejected", "status": "Conflicting Edits"}}, {"name": "Collaboration with Empty Edit", "description": "Verify the behavior when a user submits an empty edit.", "input": {"pageId": "page_123", "userIds": ["user_1"], "blockId": "block_456", "edits": [{"userId": "user_1", "content": ""}]}, "expected": {"outcome": "Edit ignored", "status": "No Changes Made"}}, {"name": "Collaboration with Invalid Block ID", "description": "Verify the behavior when an invalid block ID is provided.", "input": {"pageId": "page_123", "userIds": ["user_1"], "blockId": "invalid_block_id", "edits": [{"userId": "user_1", "content": "This is an edit."}]}, "expected": {"outcome": "Edit failed", "status": "Invalid Block ID"}}, {"name": "Collaboration with Unauthorized User", "description": "Verify that unauthorized users cannot edit the page.", "input": {"pageId": "page_123", "userIds": ["unauthorized_user"], "blockId": "block_456", "edits": [{"userId": "unauthorized_user", "content": "This is an edit."}]}, "expected": {"outcome": "Edit failed", "status": "Unauthorized Access"}}]}
{"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}], "GPT4o_testcases": [{"name": "Successful Comment Posting with Text", "description": "Verify that a user can successfully post a text comment.", "input": {"userId": "user_123", "blockId": "block_456", "commentText": "This is a test comment.", "mentions": []}, "expected": {"outcome": "Comment posted successfully", "status": "Comment Added"}}, {"name": "Successful Comment Posting with Mentions", "description": "Verify that a user can successfully post a comment with mentions.", "input": {"userId": "user_123", "blockId": "block_456", "commentText": "This is a test comment mentioning @user456 and @group789.", "mentions": ["user456", "group789"]}, "expected": {"outcome": "Comment posted successfully", "status": "Comment Added"}}, {"name": "Failed Comment Posting - Empty Comment", "description": "Verify that a user cannot post an empty comment.", "input": {"userId": "user_123", "blockId": "block_456", "commentText": "", "mentions": []}, "expected": {"outcome": "Comment posting failed", "status": "Empty Comment"}}, {"name": "Failed Comment Posting - User Not Logged In", "description": "Verify that a user cannot post a comment if not logged in.", "input": {"userId": null, "blockId": "block_456", "commentText": "This is a test comment.", "mentions": []}, "expected": {"outcome": "Comment posting failed", "status": "Not Logged In"}}, {"name": "Failed Comment Posting - Insufficient Privileges", "description": "Verify that a user cannot post a comment if they do not have sufficient privileges.", "input": {"userId": "user_789", "blockId": "block_456", "commentText": "This is a test comment.", "mentions": [], "userPrivilege": "Read Only"}, "expected": {"outcome": "Comment posting failed", "status": "Insufficient Privileges"}}, {"name": "Failed Comment Posting - Invalid Block ID", "description": "Verify that a user cannot post a comment to an invalid block ID.", "input": {"userId": "user_123", "blockId": "invalid_block_id", "commentText": "This is a test comment.", "mentions": []}, "expected": {"outcome": "Comment posting failed", "status": "Invalid Block ID"}}, {"name": "Comment Posting - Long Comment Text", "description": "Verify the behavior when posting a very long comment.", "input": {"userId": "user_123", "blockId": "block_456", "commentText": "This is a very long comment exceeding the character limit. This is a very long comment exceeding the character limit. This is a very long comment exceeding the character limit.", "mentions": []}, "expected": {"outcome": "Comment posting failed or truncated", "status": "Comment Too Long"}}, {"name": "Comment Posting - Special Characters", "description": "Verify the behavior when posting a comment with special characters.", "input": {"userId": "user_123", "blockId": "block_456", "commentText": "This comment contains special characters like <, >, &, and \".", "mentions": []}, "expected": {"outcome": "Comment posted successfully or sanitized", "status": "Comment Added"}}]}
{"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Successful Edit Suggestion", "description": "Verify that a user can successfully suggest an edit to a content block.", "input": {"userId": "user_123", "blockId": "block_456", "comment": "This sentence needs clarification.", "mentions": []}, "expected": {"outcome": "Edit suggestion submitted successfully", "status": "Suggestion Pending"}}, {"name": "Edit Suggestion with Mentions", "description": "Verify that a user can suggest an edit with mentions of other users, groups, or pages.", "input": {"userId": "user_123", "blockId": "block_456", "comment": "This section needs review. @user_789 @group_123 @page_456", "mentions": ["user_789", "group_123", "page_456"]}, "expected": {"outcome": "Edit suggestion submitted successfully", "status": "Suggestion Pending"}}, {"name": "Edit Suggestion with Empty Comment", "description": "Verify that a user cannot suggest an edit with an empty comment.", "input": {"userId": "user_123", "blockId": "block_456", "comment": "", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Comment cannot be empty"}}, {"name": "Edit Suggestion with Invalid Block ID", "description": "Verify that a user cannot suggest an edit with an invalid block ID.", "input": {"userId": "user_123", "blockId": "invalid_block_id", "comment": "This needs to be updated.", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Invalid block ID"}}, {"name": "Edit Suggestion with Invalid Mentions", "description": "Verify that a user cannot suggest an edit with invalid mentions.", "input": {"userId": "user_123", "blockId": "block_456", "comment": "This needs review. @invalid_user @invalid_group", "mentions": ["invalid_user", "invalid_group"]}, "expected": {"outcome": "Edit suggestion failed", "status": "Invalid mentions"}}, {"name": "Edit Suggestion with Excessively Long Comment", "description": "Verify the behavior when a user suggests an edit with an excessively long comment.", "input": {"userId": "user_123", "blockId": "block_456", "comment": "This is a very long comment exceeding the character limit. This is a very long comment exceeding the character limit. This is a very long comment exceeding the character limit.", "mentions": []}, "expected": {"outcome": "Edit suggestion failed", "status": "Comment too long"}}]}
{"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}], "GPT4o_testcases": [{"name": "Successful Page Analytics View (Full Access)", "description": "Verify that a user with full access can view page analytics", "input": {"userId": "user_1", "page": "page_123", "userPrivileges": "Full Access"}, "expected": {"outcome": "Analytics displayed successfully", "graphData": "Present", "detailedViews": "Available on hover", "creatorInfo": "Visible", "recentUserList": "Visible"}}, {"name": "Successful Page Analytics View (Can Edit)", "description": "Verify that a user with edit privileges can view page analytics", "input": {"userId": "user_2", "page": "page_123", "userPrivileges": "Can Edit"}, "expected": {"outcome": "Analytics displayed successfully", "graphData": "Present", "detailedViews": "Available on hover", "creatorInfo": "Visible", "recentUserList": "Visible"}}, {"name": "Failed Page Analytics View (No Access)", "description": "Verify that a user without necessary privileges cannot view page analytics", "input": {"userId": "user_3", "page": "page_123", "userPrivileges": "View Only"}, "expected": {"outcome": "Access denied", "graphData": "Not Present", "detailedViews": "Not Available", "creatorInfo": "Not Visible", "recentUserList": "Not Visible"}}, {"name": "Analytics View with No Data", "description": "Verify analytics display when page has no view data", "input": {"userId": "user_1", "page": "page_456", "userPrivileges": "Full Access"}, "expected": {"outcome": "Analytics displayed successfully", "graphData": "Empty", "detailedViews": "Not Available", "creatorInfo": "Visible", "recentUserList": "Empty"}}, {"name": "Invalid Page ID", "description": "Verify system behavior with invalid page ID", "input": {"userId": "user_1", "page": "invalid_page_id", "userPrivileges": "Full Access"}, "expected": {"outcome": "Page not found", "graphData": "Not Present", "detailedViews": "Not Available", "creatorInfo": "Not Visible", "recentUserList": "Not Visible"}}]}
{"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}], "GPT4o_testcases": [{"name": "Successful Plan Upgrade", "description": "Verify that a user can successfully upgrade their plan with valid payment details.", "input": {"userId": "user_123", "currentPlan": "Basic", "targetPlan": "Premium", "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/25", "cvv": "123"}}, "expected": {"outcome": "Plan upgrade successful", "status": "Upgrade Confirmed", "newPlan": "Premium"}}, {"name": "Failed Plan Upgrade - Invalid Payment Details", "description": "Verify that a user cannot upgrade their plan with invalid payment details.", "input": {"userId": "user_123", "currentPlan": "Basic", "targetPlan": "Premium", "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/20", "cvv": "123"}}, "expected": {"outcome": "Plan upgrade failed", "status": "Payment Declined", "newPlan": "Basic"}}, {"name": "Failed Plan Upgrade - Insufficient Funds", "description": "Verify that a user cannot upgrade their plan with insufficient funds.", "input": {"userId": "user_456", "currentPlan": "Free", "targetPlan": "Premium", "paymentDetails": {"cardNumber": "9876543210987654", "expiryDate": "12/26", "cvv": "456"}}, "expected": {"outcome": "Plan upgrade failed", "status": "Insufficient Funds", "newPlan": "Free"}}, {"name": "Upgrade to Same Plan", "description": "Verify the behavior when a user attempts to upgrade to their current plan.", "input": {"userId": "user_789", "currentPlan": "Standard", "targetPlan": "Standard", "paymentDetails": {"cardNumber": "1122334455667788", "expiryDate": "12/27", "cvv": "789"}}, "expected": {"outcome": "Already on this plan", "status": "No Action Taken", "newPlan": "Standard"}}, {"name": "Upgrade from Free to Paid Plan", "description": "Verify the upgrade process from a free plan to a paid plan.", "input": {"userId": "user_000", "currentPlan": "Free", "targetPlan": "Basic", "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/28", "cvv": "000"}}, "expected": {"outcome": "Plan upgrade successful", "status": "Upgrade Confirmed", "newPlan": "Basic"}}]}
{"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}], "GPT4o_testcases": [{"name": "Successful Plan Downgrade", "description": "Verify that a user can successfully downgrade their plan", "input": {"userId": "user_123", "currentPlan": "Premium", "downgradePlan": "Basic"}, "expected": {"outcome": "Plan downgrade successful", "status": "Plan downgraded to Basic", "confirmationMessage": "Your plan has been downgraded to Basic.", "emailConfirmation": true}}, {"name": "Downgrade to Same Plan", "description": "Verify the behavior when a user attempts to downgrade to the same plan they are currently on", "input": {"userId": "user_456", "currentPlan": "Standard", "downgradePlan": "Standard"}, "expected": {"outcome": "Plan downgrade not applicable", "status": "Already on Standard plan", "confirmationMessage": "You are already on the Standard plan.", "emailConfirmation": false}}, {"name": "Downgrade from Free Plan", "description": "Verify the behavior when a user on the free plan attempts to downgrade", "input": {"userId": "user_789", "currentPlan": "Free", "downgradePlan": "Basic"}, "expected": {"outcome": "Plan downgrade not possible", "status": "Cannot downgrade from Free plan", "confirmationMessage": "You cannot downgrade from the Free plan.", "emailConfirmation": false}}, {"name": "Downgrade with Invalid Plan", "description": "Verify the behavior when a user attempts to downgrade to an invalid plan", "input": {"userId": "user_000", "currentPlan": "Premium", "downgradePlan": "InvalidPlan"}, "expected": {"outcome": "Plan downgrade failed", "status": "Invalid plan selected", "confirmationMessage": "The selected plan is invalid.", "emailConfirmation": false}}, {"name": "Downgrade with Missing User Information", "description": "Verify the behavior when user information is missing during the downgrade process", "input": {"userId": null, "currentPlan": "Premium", "downgradePlan": "Basic"}, "expected": {"outcome": "Plan downgrade failed", "status": "User information missing", "confirmationMessage": "User information is required for plan downgrade.", "emailConfirmation": false}}]}
{"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}], "GPT4o_testcases": [{"name": "Successful Payment Method Update", "description": "Verify that a user can successfully update their payment method", "input": {"userId": "user_123", "paymentMethod": "Credit Card", "cardNumber": "1234-5678-9012-3456", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Payment method updated successfully", "status": "Updated", "confirmationMessage": "Your payment method has been updated.", "emailConfirmation": true}}, {"name": "Failed Payment Method Update - Invalid Card Number", "description": "Verify that payment method update fails with an invalid card number", "input": {"userId": "user_123", "paymentMethod": "Credit Card", "cardNumber": "1234-5678-9012-345", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Payment method update failed", "status": "Invalid Card Number", "confirmationMessage": "Please enter a valid card number.", "emailConfirmation": false}}, {"name": "Failed Payment Method Update - Expired Card", "description": "Verify that payment method update fails with an expired card", "input": {"userId": "user_123", "paymentMethod": "Credit Card", "cardNumber": "1234-5678-9012-3456", "expiryDate": "12/20", "cvv": "123"}, "expected": {"outcome": "Payment method update failed", "status": "Expired Card", "confirmationMessage": "Your card has expired.", "emailConfirmation": false}}, {"name": "Failed Payment Method Update - Invalid CVV", "description": "Verify that payment method update fails with an invalid CVV", "input": {"userId": "user_123", "paymentMethod": "Credit Card", "cardNumber": "1234-5678-9012-3456", "expiryDate": "12/25", "cvv": "12"}, "expected": {"outcome": "Payment method update failed", "status": "Invalid CVV", "confirmationMessage": "Please enter a valid CVV.", "emailConfirmation": false}}, {"name": "Failed Payment Method Update - Empty Fields", "description": "Verify that payment method update fails with empty required fields", "input": {"userId": "user_123", "paymentMethod": "Credit Card", "cardNumber": "", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Payment method update failed", "status": "Empty Fields", "confirmationMessage": "Please fill in all required fields.", "emailConfirmation": false}}]}
{"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Successful Task Synchronization", "description": "Verify that a newly created task in the third-party app successfully synchronizes with Notion.", "input": {"taskName": "Grocery Shopping", "dueDate": "2024-07-20", "status": "Pending", "description": "Buy milk, eggs, and bread."}, "expected": {"outcome": "Task synchronized successfully", "status": "Synchronized", "notionDatabase": "Updated"}}, {"name": "Successful Task Update Synchronization", "description": "Verify that updating an existing task in the third-party app successfully synchronizes with Notion.", "input": {"taskName": "Grocery Shopping", "dueDate": "2024-07-22", "status": "Completed", "description": "Bought milk, eggs, and bread."}, "expected": {"outcome": "Task update synchronized successfully", "status": "Synchronized", "notionDatabase": "Updated"}}, {"name": "Failed Synchronization - Invalid Task Name", "description": "Verify that a task with an invalid name does not synchronize with Notion.", "input": {"taskName": "", "dueDate": "2024-07-20", "status": "Pending", "description": "Buy milk, eggs, and bread."}, "expected": {"outcome": "Task synchronization failed", "status": "Failed", "notionDatabase": "Not Updated"}}, {"name": "Failed Synchronization - Past Due Date", "description": "Verify that a task with a past due date synchronizes with Notion but reflects the correct status.", "input": {"taskName": "Grocery Shopping", "dueDate": "2023-07-20", "status": "Pending", "description": "Buy milk, eggs, and bread."}, "expected": {"outcome": "Task synchronized with past due date", "status": "Overdue", "notionDatabase": "Updated"}}, {"name": "Failed Synchronization - Notion API Down", "description": "Verify the behavior when the Notion API is unavailable.", "input": {"taskName": "Grocery Shopping", "dueDate": "2024-07-20", "status": "Pending", "description": "Buy milk, eggs, and bread.", "notionAPIStatus": "Down"}, "expected": {"outcome": "Task synchronization failed", "status": "Failed", "notionDatabase": "Not Updated"}}, {"name": "Synchronization with Special Characters", "description": "Verify that tasks with special characters in the name or description synchronize correctly.", "input": {"taskName": "Grocery Shopping & Cleaning", "dueDate": "2024-07-20", "status": "Pending", "description": "Buy milk, eggs, and bread, then clean the kitchen!"}, "expected": {"outcome": "Task synchronized successfully with special characters", "status": "Synchronized", "notionDatabase": "Updated"}}]}
{"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}], "GPT4o_testcases": [{"name": "Successful Customer Data Synchronization", "description": "Verify that customer data is successfully synced to Notion when a sales rep adds new customer information.", "input": {"customerName": "Test Customer", "customerEmail": "test@example.com", "customerPhone": "123-456-7890", "notes": "Initial contact made."}, "expected": {"outcome": "Data synchronized successfully", "status": "Data Added to Notion"}}, {"name": "Successful Customer Data Update Synchronization", "description": "Verify that customer data is successfully synced to Notion when a sales rep updates existing customer information.", "input": {"customerName": "Existing Customer", "customerEmail": "updated@example.com", "customerPhone": "987-654-3210", "notes": "Follow-up meeting scheduled."}, "expected": {"outcome": "Data synchronized successfully", "status": "Data Updated in Notion"}}, {"name": "Failed Synchronization - Missing Customer Name", "description": "Verify that synchronization fails when the customer name is missing.", "input": {"customerName": "", "customerEmail": "test@example.com", "customerPhone": "123-456-7890", "notes": "Initial contact made."}, "expected": {"outcome": "Data synchronization failed", "status": "Missing Required Field"}}, {"name": "Failed Synchronization - Invalid Email Format", "description": "Verify that synchronization fails when the customer email is in an invalid format.", "input": {"customerName": "Test Customer", "customerEmail": "invalid-email", "customerPhone": "123-456-7890", "notes": "Initial contact made."}, "expected": {"outcome": "Data synchronization failed", "status": "Invalid Email Format"}}, {"name": "Failed Synchronization - Notion API Error", "description": "Verify the system's behavior when the Notion API returns an error during synchronization.", "input": {"customerName": "Test Customer", "customerEmail": "test@example.com", "customerPhone": "123-456-7890", "notes": "Initial contact made.", "notionAPIError": "Rate Limit Exceeded"}, "expected": {"outcome": "Data synchronization failed", "status": "Notion API Error"}}, {"name": "Synchronization with Special Characters", "description": "Verify that synchronization handles special characters in customer data correctly.", "input": {"customerName": "T\u00e9st C\u00fcst\u00f6m\u00e9r #1", "customerEmail": "test.customer@example.com", "customerPhone": "+1-123-456-7890", "notes": "Special characters test!"}, "expected": {"outcome": "Data synchronized successfully", "status": "Data Added to Notion"}}, {"name": "Synchronization with Empty Notes", "description": "Verify that synchronization handles empty notes field correctly.", "input": {"customerName": "Test Customer", "customerEmail": "test@example.com", "customerPhone": "123-456-7890", "notes": ""}, "expected": {"outcome": "Data synchronized successfully", "status": "Data Added to Notion"}}]}
{"usecase": {"name": "Search for Restaurants", "scenario": "Customer searches for restaurants using keywords such as cuisine type, restaurant name, or dish name.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer clicks on the search bar", "Customer enters a keyword or phrase", "System displays search results based on the keyword or phrase", "Customer selects a restaurant from the search results"]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that the system shows the correct restaurant options when a valid restaurant name is entered.", "input": {"searchQuery": "Burger King"}, "expected": {"outcome": "Search results display Burger King and related options", "status": "Success"}}, {"name": "Search with Popular Dish Name", "description": "Verify that the system shows relevant restaurants when a popular dish name is entered.", "input": {"searchQuery": "Pizza"}, "expected": {"outcome": "Search results display restaurants offering pizza", "status": "Success"}}, {"name": "Search with Invalid Query", "description": "Verify that the system handles invalid or unknown queries appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "Show no search result and display we're not in your area yet. NO resturants matches the slected criteria", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify that the system handles empty search queries gracefully.", "input": {"searchQuery": ""}, "expected": {"outcome": "No search results", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Restaurant Search by Cuisine", "description": "Verify that the app displays relevant results when searching by a valid cuisine type.", "input": {"searchKeyword": "Italian"}, "expected": {"outcome": "Search successful", "status": "Results displayed for Italian cuisine"}}, {"name": "Successful Restaurant Search by Name", "description": "Verify that the app displays the correct restaurant when searching by its exact name.", "input": {"searchKeyword": "Pizza Hut"}, "expected": {"outcome": "Search successful", "status": "Pizza Hut displayed in results"}}, {"name": "Successful Restaurant Search by Dish Name", "description": "Verify that the app displays relevant results when searching by a valid dish name.", "input": {"searchKeyword": "Burger"}, "expected": {"outcome": "Search successful", "status": "Results displayed for restaurants serving Burger"}}, {"name": "Empty Search Keyword", "description": "Verify the app's behavior when the search keyword is empty.", "input": {"searchKeyword": ""}, "expected": {"outcome": "Search with empty keyword", "status": "Either display all restaurants or a prompt to enter a keyword"}}, {"name": "Search with Special Characters", "description": "Verify the app's behavior when the search keyword contains special characters.", "input": {"searchKeyword": "Pizza!@#$%^&*()"}, "expected": {"outcome": "Search with special characters", "status": "Either display relevant results ignoring special characters or handle them appropriately"}}, {"name": "Search with Invalid Cuisine", "description": "Verify the app's behavior when searching for a non-existent cuisine.", "input": {"searchKeyword": "Kryptonian Food"}, "expected": {"outcome": "Search with invalid cuisine", "status": "Display a 'No results found' message"}}, {"name": "Search with Misspelled Restaurant Name", "description": "Verify the app's behavior when searching for a restaurant with a misspelled name.", "input": {"searchKeyword": "Piza Hut"}, "expected": {"outcome": "Search with misspelled restaurant name", "status": "Display relevant results based on fuzzy matching or suggest correct spellings"}}, {"name": "Search with Multiple Keywords", "description": "Verify the app's behavior when searching with multiple keywords.", "input": {"searchKeyword": "Burger Italian Pizza"}, "expected": {"outcome": "Search with multiple keywords", "status": "Display results matching all or some of the keywords based on the search logic"}}, {"name": "Search with Very Long Keyword", "description": "Verify the app's behavior when searching with a very long keyword.", "input": {"searchKeyword": "This is a very long search keyword that exceeds reasonable limits for a restaurant search query."}, "expected": {"outcome": "Search with very long keyword", "status": "Either truncate the keyword, display an error message, or handle it gracefully"}}]}
{"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "GPT4o_testcases": [{"name": "Successful Restaurant Search with Offers", "description": "Verify that the system displays restaurants with active offers when the customer filters by offers.", "input": {"filter": "Offers", "location": "New York City"}, "expected": {"outcome": "Restaurants with offers displayed", "status": "Success"}}, {"name": "No Restaurants with Offers Found", "description": "Verify system behavior when no restaurants have active offers.", "input": {"filter": "Offers", "location": "Remote Island"}, "expected": {"outcome": "No restaurants found with offers", "status": "No Results"}}, {"name": "Invalid Filter Input", "description": "Verify system behavior with an invalid filter input.", "input": {"filter": "InvalidFilter", "location": "London"}, "expected": {"outcome": "Invalid filter input", "status": "Error"}}, {"name": "Empty Search Location", "description": "Verify system behavior when the search location is empty.", "input": {"filter": "Offers", "location": ""}, "expected": {"outcome": "Location required", "status": "Error"}}, {"name": "Expired Offer Display", "description": "Verify that expired offers are not displayed.", "input": {"filter": "Offers", "location": "Paris", "date": "2024-01-01"}, "expected": {"outcome": "Only active offers displayed", "status": "Success"}}, {"name": "Multiple Offers Available", "description": "Verify system behavior when multiple offers are available for a single restaurant.", "input": {"filter": "Offers", "location": "Tokyo", "restaurantId": "restaurant_123"}, "expected": {"outcome": "Multiple offers displayed for the restaurant", "status": "Success"}}]}
{"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Recent Search Selection", "description": "Verify that the customer can successfully select a recent search query and view the results.", "input": {"customerId": "customer_123", "recentSearches": ["shoes", "bags", "watches"], "selectedSearch": "bags"}, "expected": {"outcome": "Search results displayed for 'bags'", "status": "Success"}}, {"name": "No Recent Searches", "description": "Verify the system behavior when there are no recent searches.", "input": {"customerId": "customer_456", "recentSearches": []}, "expected": {"outcome": "No recent searches displayed", "status": "No Recent Searches"}}, {"name": "Recent Search with Special Characters", "description": "Verify the system handles searches with special characters correctly.", "input": {"customerId": "customer_789", "recentSearches": ["shoes!", "@bags", "wa#tches"], "selectedSearch": "@bags"}, "expected": {"outcome": "Search results displayed for '@bags'", "status": "Success"}}, {"name": "Recent Search with Empty String", "description": "Verify the system behavior when selecting an empty search string.", "input": {"customerId": "customer_101", "recentSearches": ["", "bags", "watches"], "selectedSearch": ""}, "expected": {"outcome": "No search results displayed", "status": "Invalid Search Query"}}, {"name": "Recent Search with Long String", "description": "Verify the system behavior when selecting a very long search string.", "input": {"customerId": "customer_102", "recentSearches": ["This is a very long search query exceeding the reasonable limit", "bags", "watches"], "selectedSearch": "This is a very long search query exceeding the reasonable limit"}, "expected": {"outcome": "Search results displayed or truncated appropriately", "status": "Success or handled appropriately"}}]}
{"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Item Addition to Cart", "description": "Verify that a customer can successfully add an item to the cart.", "input": {"customerId": "customer_123", "restaurantId": "restaurant_456", "itemId": "item_789", "itemName": "Burger", "itemPrice": 10.0, "quantity": 1}, "expected": {"outcome": "Item added to cart successfully", "status": "Item Added", "cartCount": 1}}, {"name": "Add Item with Zero Quantity", "description": "Verify the behavior when adding an item with zero quantity.", "input": {"customerId": "customer_123", "restaurantId": "restaurant_456", "itemId": "item_789", "itemName": "Burger", "itemPrice": 10.0, "quantity": 0}, "expected": {"outcome": "Item not added to cart", "status": "Invalid Quantity", "cartCount": 0}}, {"name": "Add Item with Negative Quantity", "description": "Verify the behavior when adding an item with negative quantity.", "input": {"customerId": "customer_123", "restaurantId": "restaurant_456", "itemId": "item_789", "itemName": "Burger", "itemPrice": 10.0, "quantity": -1}, "expected": {"outcome": "Item not added to cart", "status": "Invalid Quantity", "cartCount": 0}}, {"name": "Add Item to Cart with Invalid Item ID", "description": "Verify the behavior when adding an item with an invalid item ID.", "input": {"customerId": "customer_123", "restaurantId": "restaurant_456", "itemId": "invalid_item_id", "itemName": "Burger", "itemPrice": 10.0, "quantity": 1}, "expected": {"outcome": "Item not added to cart", "status": "Invalid Item ID", "cartCount": 0}}, {"name": "Add Item to Cart with Invalid Restaurant ID", "description": "Verify the behavior when adding an item with an invalid restaurant ID.", "input": {"customerId": "customer_123", "restaurantId": "invalid_restaurant_id", "itemId": "item_789", "itemName": "Burger", "itemPrice": 10.0, "quantity": 1}, "expected": {"outcome": "Item not added to cart", "status": "Invalid Restaurant ID", "cartCount": 0}}, {"name": "Add Item to Cart - Item Not Available", "description": "Verify the behavior when adding an item that is not available.", "input": {"customerId": "customer_123", "restaurantId": "restaurant_456", "itemId": "item_999", "itemName": "Unavailable Item", "itemPrice": 10.0, "quantity": 1}, "expected": {"outcome": "Item not added to cart", "status": "Item Unavailable", "cartCount": 0}}]}
{"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "GPT4o_testcases": [{"name": "View Food Item Details - Success", "description": "Verify that the system displays the correct details of a food item.", "input": {"itemId": "item_123", "itemName": "Burger"}, "expected": {"outcome": "Item details displayed successfully", "details": {"name": "Burger", "description": "Delicious beef burger", "ingredients": ["Beef patty", "Lettuce", "Tomato", "Cheese"], "price": 10.99}}}, {"name": "View Food Item Details - Invalid Item ID", "description": "Verify the system behavior when an invalid item ID is provided.", "input": {"itemId": "invalid_id"}, "expected": {"outcome": "Item not found", "details": null}}, {"name": "View Food Item Details - Missing Item ID", "description": "Verify the system behavior when no item ID is provided.", "input": {}, "expected": {"outcome": "Invalid input", "details": null}}, {"name": "View Food Item Details - Item with No Description", "description": "Verify the system behavior when an item has no description.", "input": {"itemId": "item_no_desc"}, "expected": {"outcome": "Item details displayed successfully", "details": {"name": "Fries", "description": null, "ingredients": ["Potato", "Salt"], "price": 2.99}}}, {"name": "View Food Item Details - Item with Long Description", "description": "Verify the system behavior when an item has a very long description.", "input": {"itemId": "item_long_desc"}, "expected": {"outcome": "Item details displayed successfully", "details": {"name": "Special Pizza", "description": "This pizza is made with the finest ingredients from Italy, including San Marzano tomatoes, fresh mozzarella cheese, and basil leaves. It is cooked in a wood-fired oven for a crispy crust and a delicious flavor.", "ingredients": ["Dough", "Tomato", "Mozzarella", "Basil"], "price": 15.99}}}]}
{"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Switch to Delivery", "description": "Verify that the system updates the restaurant list correctly when switching to delivery.", "input": {"userId": "customer_123", "initialMode": "pickup", "switchMode": "delivery", "location": "123 Main St"}, "expected": {"outcome": "Restaurant list updated for delivery", "restaurantsDisplayed": ["Restaurant A (Delivery)", "Restaurant B (Delivery)"]}}, {"name": "Successful Switch to Pickup", "description": "Verify that the system updates the restaurant list correctly when switching to pickup.", "input": {"userId": "customer_456", "initialMode": "delivery", "switchMode": "pickup", "location": "456 Oak Ave"}, "expected": {"outcome": "Restaurant list updated for pickup", "restaurantsDisplayed": ["Restaurant C (Pickup)", "Restaurant D (Pickup)"]}}, {"name": "Switch with Invalid Location", "description": "Verify system behavior when switching delivery/pickup with an invalid location.", "input": {"userId": "customer_789", "initialMode": "delivery", "switchMode": "pickup", "location": "Invalid Location"}, "expected": {"outcome": "Location error message displayed", "restaurantsDisplayed": []}}, {"name": "Switch with No Restaurants Available", "description": "Verify system behavior when no restaurants are available for the selected mode.", "input": {"userId": "customer_101", "initialMode": "pickup", "switchMode": "delivery", "location": "Remote Area"}, "expected": {"outcome": "No restaurants found message displayed", "restaurantsDisplayed": []}}, {"name": "Repeated Mode Switching", "description": "Verify system stability with repeated switching between delivery and pickup.", "input": {"userId": "customer_112", "initialMode": "delivery", "switchMode": "pickup", "iterations": 5, "location": "City Center"}, "expected": {"outcome": "Restaurant list updates correctly after each switch", "restaurantsDisplayed": ["Restaurant E (Pickup)", "Restaurant F (Pickup)"]}}]}
{"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Switch to Delivery", "description": "Verify that the system correctly updates information when switching to delivery.", "input": {"customerID": "cust_123", "restaurantID": "rest_456", "currentMode": "pickup", "switchTo": "delivery", "deliveryAddress": "123 Main St"}, "expected": {"outcome": "Switch successful", "mode": "delivery", "timeUpdated": true, "optionsUpdated": true}}, {"name": "Successful Switch to Pickup", "description": "Verify that the system correctly updates information when switching to pickup.", "input": {"customerID": "cust_123", "restaurantID": "rest_456", "currentMode": "delivery", "switchTo": "pickup", "deliveryAddress": null}, "expected": {"outcome": "Switch successful", "mode": "pickup", "timeUpdated": true, "optionsUpdated": true}}, {"name": "Switch with Invalid Restaurant ID", "description": "Verify system behavior when switching with an invalid restaurant ID.", "input": {"customerID": "cust_123", "restaurantID": "invalid_rest_id", "currentMode": "pickup", "switchTo": "delivery", "deliveryAddress": "123 Main St"}, "expected": {"outcome": "Switch failed", "error": "Invalid restaurant ID"}}, {"name": "Switch with Missing Delivery Address", "description": "Verify system behavior when switching to delivery without a delivery address.", "input": {"customerID": "cust_123", "restaurantID": "rest_456", "currentMode": "pickup", "switchTo": "delivery", "deliveryAddress": null}, "expected": {"outcome": "Switch failed", "error": "Delivery address required"}}, {"name": "Switch with No Change", "description": "Verify system behavior when attempting to switch to the current mode.", "input": {"customerID": "cust_123", "restaurantID": "rest_456", "currentMode": "delivery", "switchTo": "delivery", "deliveryAddress": "123 Main St"}, "expected": {"outcome": "No change", "mode": "delivery", "timeUpdated": false, "optionsUpdated": false}}]}
{"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Switch to Delivery", "description": "Verify that a customer can successfully switch to delivery after adding items to the cart.", "input": {"userId": "customer_123", "cartItems": [{"itemId": "item_1", "quantity": 2}, {"itemId": "item_2", "quantity": 1}], "deliveryAddress": "123 Main St", "selectedOption": "delivery"}, "expected": {"outcome": "Switch to delivery successful", "status": "Delivery option selected", "estimatedTime": "30 mins", "deliveryFee": 5.0}}, {"name": "Successful Switch to Pickup", "description": "Verify that a customer can successfully switch to pickup after adding items to the cart.", "input": {"userId": "customer_456", "cartItems": [{"itemId": "item_3", "quantity": 3}], "pickupLocation": "Store A", "selectedOption": "pickup"}, "expected": {"outcome": "Switch to pickup successful", "status": "Pickup option selected", "estimatedTime": "15 mins", "deliveryFee": 0.0}}, {"name": "Switch with Empty Cart", "description": "Verify the behavior when switching options with an empty cart.", "input": {"userId": "customer_789", "cartItems": [], "selectedOption": "delivery"}, "expected": {"outcome": "Switch with empty cart", "status": "Cart is empty"}}, {"name": "Switch with Invalid Delivery Address", "description": "Verify the behavior when switching to delivery with an invalid address.", "input": {"userId": "customer_101", "cartItems": [{"itemId": "item_1", "quantity": 2}], "deliveryAddress": "", "selectedOption": "delivery"}, "expected": {"outcome": "Invalid delivery address", "status": "Please enter a valid delivery address"}}, {"name": "Switch with Invalid Pickup Location", "description": "Verify the behavior when switching to pickup with an invalid location.", "input": {"userId": "customer_112", "cartItems": [{"itemId": "item_2", "quantity": 1}], "pickupLocation": "", "selectedOption": "pickup"}, "expected": {"outcome": "Invalid pickup location", "status": "Please select a valid pickup location"}}, {"name": "Switch with Unavailable Pickup Location", "description": "Verify the behavior when the selected pickup location is unavailable.", "input": {"userId": "customer_112", "cartItems": [{"itemId": "item_2", "quantity": 1}], "pickupLocation": "Unavailable Store", "selectedOption": "pickup"}, "expected": {"outcome": "Pickup location unavailable", "status": "Selected pickup location is currently unavailable"}}]}
{"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "Successful Switch to Delivery", "description": "Verify switching to delivery updates cost and time correctly.", "input": {"cartId": "cart_123", "initialSelection": "pickup", "switchSelection": "delivery", "deliveryAddress": "123 Main St", "paymentMethod": "card"}, "expected": {"outcome": "Switch successful", "status": "Order Placed", "cost": 15.5, "time": "30 mins"}}, {"name": "Successful Switch to Pickup", "description": "Verify switching to pickup updates cost and time correctly.", "input": {"cartId": "cart_456", "initialSelection": "delivery", "switchSelection": "pickup", "pickupLocation": "Store A", "paymentMethod": "cash"}, "expected": {"outcome": "Switch successful", "status": "Order Placed", "cost": 15.0, "time": "15 mins"}}, {"name": "Switch with Invalid Address", "description": "Verify switching to delivery with an invalid address fails.", "input": {"cartId": "cart_789", "initialSelection": "pickup", "switchSelection": "delivery", "deliveryAddress": "", "paymentMethod": "card"}, "expected": {"outcome": "Switch failed", "status": "Invalid Address"}}, {"name": "Switch with No Payment Method", "description": "Verify placing order after switch without payment method fails.", "input": {"cartId": "cart_101", "initialSelection": "delivery", "switchSelection": "pickup", "pickupLocation": "Store A", "paymentMethod": null}, "expected": {"outcome": "Order failed", "status": "No Payment Method Selected"}}, {"name": "Switch with Empty Cart", "description": "Verify switching with an empty cart fails.", "input": {"cartId": "cart_112", "initialSelection": "pickup", "switchSelection": "delivery", "deliveryAddress": "123 Main St", "paymentMethod": "card", "cartItems": []}, "expected": {"outcome": "Switch failed", "status": "Empty Cart"}}]}
