{"usecase": {"name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}], "GPT4o_testcases": [{"name": "Successful Train Search and Booking", "description": "Verify that a customer can successfully search for a train and book tickets.", "input": {"departure_station": "Station A", "destination_station": "Station B", "date": "2024-04-15", "train_type": "Express", "passengers": 3}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date Search", "description": "Verify that train search fails for a past travel date.", "input": {"departure_station": "Station X", "destination_station": "Station Y", "date": "2023-02-10", "train_type": "Express", "passengers": 1}, "expected": {"outcome": "Search failed", "message": "Invalid travel date"}}, {"name": "Unregistered User", "description": "Verify that booking fails for an unregistered user.", "input": {"departure_station": "Station C", "destination_station": "Station D", "date": "2024-06-20", "train_type": "Express", "passengers": 2}, "expected": {"outcome": "Booking failed", "message": "User not registered"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure_station": "Station E", "destination_station": "Station F", "date": "2024-07-05", "train_type": "Express", "passengers": 500}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}, {"name": "Invalid Train Type", "description": "Verify that booking fails for an invalid train type.", "input": {"departure_station": "Station G", "destination_station": "Station H", "date": "2024-08-10", "train_type": "Superfast", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid train type"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Valid Event Search and Booking", "description": "User searches for an event and successfully books tickets", "input": {"searchParams": {"eventName": "Concert", "location": "New York", "date": "2023-12-25"}, "bookingDetails": {"tickets": 2, "seatType": "VIP"}, "paymentInfo": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}, "cookies": {"token": "validUserToken"}}, "expected": {"outcome": "Booking successful", "confirmation": "Received", "status": "Approved"}}, {"name": "Event Search with No Results", "description": "User searches for an event that does not exist", "input": {"searchParams": {"eventName": "NonExistentEvent", "location": "Nowhere", "date": "2023-12-25"}, "cookies": {"token": "validUserToken"}}, "expected": {"outcome": "No events found", "status": "No Results"}}, {"name": "Booking with Invalid Payment Details", "description": "User attempts to book tickets with invalid payment information", "input": {"searchParams": {"eventName": "Concert", "location": "New York", "date": "2023-12-25"}, "bookingDetails": {"tickets": 2, "seatType": "VIP"}, "paymentInfo": {"cardNumber": "1234567890123456", "expiryDate": "01/20", "cvv": "000"}, "cookies": {"token": "validUserToken"}}, "expected": {"outcome": "Payment failed", "status": "Denied"}}, {"name": "Unauthorized Event Booking Attempt", "description": "User attempts to book tickets without being logged in", "input": {"searchParams": {"eventName": "Concert", "location": "New York", "date": "2023-12-25"}, "bookingDetails": {"tickets": 2, "seatType": "VIP"}, "paymentInfo": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}, "cookies": {"token": ""}}, "expected": {"outcome": "User not logged in", "access": "Denied"}}, {"name": "Booking with Exceeding Ticket Limit", "description": "User attempts to book more tickets than available", "input": {"searchParams": {"eventName": "Concert", "location": "New York", "date": "2023-12-25"}, "bookingDetails": {"tickets": 100, "seatType": "VIP"}, "paymentInfo": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123"}, "cookies": {"token": "validUserToken"}}, "expected": {"outcome": "Not enough tickets available", "status": "Denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Valid One Way Ticket Search", "description": "Verify that the system returns available flights for a valid one way search", "input": {"flying_from": "JFK", "flying_to": "LAX", "date": "15-03-23", "tickets": "2", "class": "business"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Invalid Date Format", "description": "Verify that the system handles invalid date format gracefully", "input": {"flying_from": "JFK", "flying_to": "LAX", "date": "15/03/23", "tickets": "2", "class": "business"}, "expected": {"outcome": "Invalid date format", "status": "400"}}, {"name": "No Flights Available", "description": "Verify that the system handles the case where no flights are available", "input": {"flying_from": "JFK", "flying_to": "LAX", "date": "01-01-23", "tickets": "2", "class": "business"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}, {"name": "Exceeding Ticket Limit", "description": "Verify that the system handles the case where the number of tickets exceeds the limit", "input": {"flying_from": "JFK", "flying_to": "LAX", "date": "15-03-23", "tickets": "10", "class": "economy"}, "expected": {"outcome": "Ticket limit exceeded", "status": "400"}}, {"name": "Invalid City Code", "description": "Verify that the system handles invalid city codes", "input": {"flying_from": "XYZ", "flying_to": "LAX", "date": "15-03-23", "tickets": "2", "class": "economy"}, "expected": {"outcome": "Invalid city code", "status": "400"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "GPT4o_testcases": [{"name": "Round Way Ticket Search with Available Flights", "description": "Verify that the system returns available flights for a round way trip with valid parameters.", "input": {"flying_from": "JFK", "flying_to": "LAX", "journey_date": "15-03-23", "return_date": "22-03-23", "tickets": "2", "class": "business"}, "expected": {"outcome": "Flights available", "comments": "System shows a list of available flights", "status": "200"}}, {"name": "Round Way Ticket Search with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available for the selected round way trip.", "input": {"flying_from": "JFK", "flying_to": "LAX", "journey_date": "01-01-23", "return_date": "08-01-23", "tickets": "2", "class": "business"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}, {"name": "Round Way Ticket Search with Invalid Dates", "description": "Verify that the system handles invalid date inputs for a round way trip.", "input": {"flying_from": "JFK", "flying_to": "LAX", "journey_date": "32-03-23", "return_date": "22-03-23", "tickets": "2", "class": "business"}, "expected": {"outcome": "Invalid date format", "status": "400"}}, {"name": "Round Way Ticket Search with Past Dates", "description": "Verify that the system handles past date inputs for a round way trip.", "input": {"flying_from": "JFK", "flying_to": "LAX", "journey_date": "15-01-22", "return_date": "22-01-22", "tickets": "2", "class": "business"}, "expected": {"outcome": "Journey date cannot be in the past", "status": "400"}}, {"name": "Round Way Ticket Search with Invalid Number of Tickets", "description": "Verify that the system handles invalid number of tickets input for a round way trip.", "input": {"flying_from": "JFK", "flying_to": "LAX", "journey_date": "15-03-23", "return_date": "22-03-23", "tickets": "0", "class": "business"}, "expected": {"outcome": "Invalid number of tickets", "status": "400"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Multi City Search with Available Flights", "description": "Verify that the system returns available flights for a valid multi-city search", "input": {"flights": [{"source": "NYC", "dest": "LAX", "date": "15-03-23"}, {"source": "LAX", "dest": "SFO", "date": "16-03-23"}], "seats": "2", "class": "business"}, "expected": {"outcome": "Flights available", "comments": "System shows a list of available flights", "status": "200"}}, {"name": "Multi City Search with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available for the selected multi-city route", "input": {"flights": [{"source": "NYC", "dest": "LAX", "date": "01-01-23"}, {"source": "LAX", "dest": "SFO", "date": "02-01-23"}], "seats": "2", "class": "business"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}, {"name": "Multi City Search with Invalid Date", "description": "Verify that the system handles invalid date input gracefully", "input": {"flights": [{"source": "NYC", "dest": "LAX", "date": "32-03-23"}], "seats": "1", "class": "economy"}, "expected": {"outcome": "Invalid date format", "status": "400"}}, {"name": "Multi City Search with Invalid City Code", "description": "Verify that the system handles invalid city code input gracefully", "input": {"flights": [{"source": "XYZ", "dest": "LAX", "date": "15-03-23"}], "seats": "1", "class": "economy"}, "expected": {"outcome": "Invalid city code", "status": "400"}}, {"name": "Multi City Search with Zero Seats", "description": "Verify that the system handles the case where zero seats are requested", "input": {"flights": [{"source": "NYC", "dest": "LAX", "date": "15-03-23"}], "seats": "0", "class": "economy"}, "expected": {"outcome": "Invalid number of seats", "status": "400"}}, {"name": "Multi City Search with Maximum Seats", "description": "Verify that the system can handle the maximum number of seats allowed", "input": {"flights": [{"source": "NYC", "dest": "LAX", "date": "15-03-23"}], "seats": "10", "class": "economy"}, "expected": {"outcome": "Flights available", "comments": "System shows a list of available flights", "status": "200"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Valid Search - Dhaka Events in January", "description": "User searches for events in Dhaka during January 2024", "input": {"location": "Dhaka", "fromDate": "Jan 1, 2024", "toDate": "Jan 31, 2024"}, "expected": {"outcome": "Events are listed successfully", "status": "Success"}}, {"name": "Valid Search - Chittagong Events in February", "description": "User searches for events in Chittagong during February 2024", "input": {"location": "Chittagong", "fromDate": "Feb 1, 2024", "toDate": "Feb 28, 2024"}, "expected": {"outcome": "Events are listed successfully", "status": "Success"}}, {"name": "Invalid Search - Missing Location", "description": "User searches for events without selecting a location", "input": {"fromDate": "Jan 1, 2024", "toDate": "Jan 31, 2024"}, "expected": {"outcome": "Search is not performed - Missing location", "status": "Rejected"}}, {"name": "Invalid Search - Missing Date Range", "description": "User searches for events without selecting a date range", "input": {"location": "Dhaka"}, "expected": {"outcome": "Search is not performed - Missing date range", "status": "Rejected"}}, {"name": "Edge Case - Search with Past Date Range", "description": "User searches for events in Dhaka with a past date range", "input": {"location": "Dhaka", "fromDate": "Jan 1, 2020", "toDate": "Jan 31, 2020"}, "expected": {"outcome": "No events found", "status": "Success"}}, {"name": "Edge Case - Search with Future Date Range", "description": "User searches for events in Dhaka with a future date range", "input": {"location": "Dhaka", "fromDate": "Jan 1, 2025", "toDate": "Jan 31, 2025"}, "expected": {"outcome": "Events are listed successfully", "status": "Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}], "GPT4o_testcases": [{"name": "Successful Launch Booking", "description": "Verify that a user can successfully book a launch ticket.", "input": {"departure": "City A", "destination": "City B", "date": "2024-06-15", "passengers": 3, "contact": {"phone": "1234567890", "email": "user@example.com"}, "passenger_details": [{"first_name": "John", "last_name": "Doe", "gender": "Male"}, {"first_name": "Jane", "last_name": "Doe", "gender": "Female"}, {"first_name": "Jim", "last_name": "Beam", "gender": "Male"}], "payment_method": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Past Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-02-10", "passengers": 1, "contact": {"phone": "0987654321", "email": "user2@example.com"}, "passenger_details": [{"first_name": "Alice", "last_name": "Smith", "gender": "Female"}], "payment_method": "Mobile Banking"}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails when requested seats exceed available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-07-20", "passengers": 150, "contact": {"phone": "1122334455", "email": "user3@example.com"}, "passenger_details": [{"first_name": "Bob", "last_name": "Brown", "gender": "Male"}], "payment_method": "Credit Card"}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}, {"name": "Invalid Contact Information", "description": "Verify that booking fails with invalid contact information.", "input": {"departure": "City M", "destination": "City N", "date": "2024-08-05", "passengers": 2, "contact": {"phone": "invalid_phone", "email": "invalid_email"}, "passenger_details": [{"first_name": "Charlie", "last_name": "Chaplin", "gender": "Male"}, {"first_name": "Diana", "last_name": "Prince", "gender": "Female"}], "payment_method": "Mobile Banking"}, "expected": {"outcome": "Booking failed", "message": "Invalid contact information"}}, {"name": "Payment Failure", "description": "Verify that booking fails when payment is unsuccessful.", "input": {"departure": "City R", "destination": "City S", "date": "2024-09-10", "passengers": 1, "contact": {"phone": "2233445566", "email": "user4@example.com"}, "passenger_details": [{"first_name": "Eve", "last_name": "Adams", "gender": "Female"}], "payment_method": "Credit Card"}, "expected": {"outcome": "Booking failed", "message": "Payment unsuccessful"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}], "GPT4o_testcases": [{"name": "Successful Park Ticket Booking", "description": "Verify that a user can successfully book a park ticket.", "input": {"location": "City Z", "park": "Adventure Park", "entry_date": "2024-06-15", "tickets": {"adults": 2, "kids": 1}, "contact_details": {"name": "John Doe", "email": "john.doe@example.com"}, "payment_method": "Credit Card"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Entry Date", "description": "Verify that booking fails for a past entry date.", "input": {"location": "City Z", "park": "Adventure Park", "entry_date": "2023-01-10", "tickets": {"adults": 1}, "contact_details": {"name": "Jane Doe", "email": "jane.doe@example.com"}, "payment_method": "Debit Card"}, "expected": {"outcome": "Booking failed", "message": "Invalid entry date"}}, {"name": "Unavailable Park", "description": "Verify that booking fails when the selected park is unavailable.", "input": {"location": "City Z", "park": "Unavailable Park", "entry_date": "2024-07-20", "tickets": {"adults": 2}, "contact_details": {"name": "Alice Smith", "email": "alice.smith@example.com"}, "payment_method": "PayPal"}, "expected": {"outcome": "Booking failed", "message": "Park not available"}}, {"name": "Exceeding Ticket Limit", "description": "Verify that booking fails when the number of tickets exceeds the limit.", "input": {"location": "City Z", "park": "Adventure Park", "entry_date": "2024-08-05", "tickets": {"adults": 100}, "contact_details": {"name": "Bob Brown", "email": "bob.brown@example.com"}, "payment_method": "Credit Card"}, "expected": {"outcome": "Booking failed", "message": "Exceeds ticket limit"}}, {"name": "Missing Contact Details", "description": "Verify that booking fails when contact details are missing.", "input": {"location": "City Z", "park": "Adventure Park", "entry_date": "2024-09-10", "tickets": {"adults": 2}, "contact_details": {}, "payment_method": "Credit Card"}, "expected": {"outcome": "Booking failed", "message": "Contact details required"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}], "GPT4o_testcases": [{"name": "Valid Bus Selection and Booking", "description": "Verify that the system allows a customer to successfully search, select, and book a bus ticket.", "input": {"departureStation": "Station A", "arrivalStation": "Station B", "busType": "AC", "seatNumber": "12A", "customerId": "CUST12345", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Booking successful", "ticketGenerated": true}}, {"name": "Invalid Bus Selection - No Buses Available", "description": "Verify that the system handles the case where no buses are available for the selected route.", "input": {"departureStation": "Station X", "arrivalStation": "Station Y", "busType": "Non-AC", "customerId": "CUST12345"}, "expected": {"outcome": "Booking unsuccessful", "reason": "No buses available"}}, {"name": "Invalid Seat Selection", "description": "Verify that the system handles the case where a customer selects an already booked seat.", "input": {"departureStation": "Station A", "arrivalStation": "Station B", "busType": "Express", "seatNumber": "5B", "customerId": "CUST12345", "paymentMethod": "Debit Card"}, "expected": {"outcome": "Booking unsuccessful", "reason": "Seat already booked"}}, {"name": "Incomplete Personal Information", "description": "Verify that the system handles the case where a customer does not provide complete personal information.", "input": {"departureStation": "Station A", "arrivalStation": "Station B", "busType": "AC", "seatNumber": "10C", "customerId": "CUST12345", "paymentMethod": "Credit Card", "contactInfo": ""}, "expected": {"outcome": "Booking unsuccessful", "reason": "Incomplete personal information"}}, {"name": "Successful Payment Processing", "description": "Verify that the system processes payment successfully and completes the booking.", "input": {"departureStation": "Station A", "arrivalStation": "Station B", "busType": "AC", "seatNumber": "15D", "customerId": "CUST12345", "paymentMethod": "Credit Card"}, "expected": {"outcome": "Payment successful", "bookingConfirmed": true}}, {"name": "Failed Payment Processing", "description": "Verify that the system handles payment failure and does not complete the booking.", "input": {"departureStation": "Station A", "arrivalStation": "Station B", "busType": "AC", "seatNumber": "15D", "customerId": "CUST12345", "paymentMethod": "Expired Credit Card"}, "expected": {"outcome": "Payment failed", "bookingConfirmed": false, "reason": "Payment method declined"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}], "GPT4o_testcases": [{"name": "Successful Payment Process", "description": "Verify that the client can successfully complete the payment process", "input": {"payment_method": "Credit Card", "otp": "123456"}, "expected": {"outcome": "Payment confirmed", "status": "200"}}, {"name": "Payment Authentication Failure", "description": "Verify that the system handles incorrect OTP during payment", "input": {"payment_method": "Credit Card", "otp": "654321"}, "expected": {"outcome": "Authentication failed", "status": "401"}}, {"name": "Insufficient Balance Failure", "description": "Verify that the system handles payment failure due to insufficient balance", "input": {"payment_method": "Debit Card", "otp": "123456"}, "expected": {"outcome": "Insufficient balance", "status": "402"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment method selection", "input": {"payment_method": "Invalid Method", "otp": "123456"}, "expected": {"outcome": "Invalid payment method", "status": "400"}}, {"name": "No Seats Selected", "description": "Verify that the system handles payment attempt without seat selection", "input": {"payment_method": "Credit Card", "otp": "123456"}, "expected": {"outcome": "No seats selected", "status": "400"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}], "GPT4o_testcases": [{"name": "Valid User Login", "description": "Verify that a user can log in with valid credentials and access the home screen.", "input": {"email": "user@splitwise.com", "password": "validpassword"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Email", "description": "Verify that the system denies access when an invalid email is used.", "input": {"email": "invalid@splitwise.com", "password": "validpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "Invalid Password", "description": "Verify that the system denies access when an invalid password is used.", "input": {"email": "user@splitwise.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "Empty Credentials", "description": "Verify that the system denies access when no credentials are entered.", "input": {"email": "", "password": ""}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "SQL Injection Attempt", "description": "Verify that the system is secure against SQL injection attempts.", "input": {"email": "user@splitwise.com", "password": "' OR '1'='1"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "Case Sensitivity Check", "description": "Verify that the system treats email and password as case-sensitive.", "input": {"email": "User@splitwise.com", "password": "ValidPassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "Special Characters in Password", "description": "Verify that a user can log in with a password containing special characters.", "input": {"email": "user@splitwise.com", "password": "P@ssw0rd!"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}], "GPT4o_testcases": [{"name": "ValidSplitwiseAccountCreation", "description": "Test the successful creation of a Splitwise account using valid details.", "input": {"fullName": "John Doe", "email": "john.doe@example.com", "phone": "1234567890", "password": "SecurePass123", "confirmPassword": "SecurePass123"}, "expected": {"success": true, "message": "User account is created successfully. Verification email sent. User is redirected to the home screen after verification."}}, {"name": "DuplicateEmailSplitwise", "description": "Test if the system handles a scenario where a user tries to sign up with an email that already exists.", "input": {"fullName": "Jane Doe", "email": "existing_user@example.com", "phone": "9876543210", "password": "NewPass456", "confirmPassword": "NewPass456"}, "expected": {"success": false, "message": "System displays an error message indicating that the email is already registered. User account is not created."}}, {"name": "PasswordMismatch", "description": "Test if the system handles a scenario where the password and confirm password do not match.", "input": {"fullName": "Alice Smith", "email": "alice.smith@example.com", "phone": "1231231234", "password": "MismatchPass123", "confirmPassword": "MismatchPass321"}, "expected": {"success": false, "message": "System displays an error message indicating that the passwords do not match. User account is not created."}}, {"name": "MissingFullName", "description": "Test if the system handles a scenario where a user tries to sign up without providing a full name.", "input": {"email": "no.name@example.com", "phone": "4564564567", "password": "NoNamePass123", "confirmPassword": "NoNamePass123"}, "expected": {"success": false, "message": "System displays an error message indicating that the full name is required. User account is not created."}}, {"name": "InvalidEmailFormat", "description": "Test if the system handles a scenario where a user enters an invalid email format.", "input": {"fullName": "Bob Brown", "email": "bob.brown@com", "phone": "7897897890", "password": "ValidPass123", "confirmPassword": "ValidPass123"}, "expected": {"success": false, "message": "System displays an error message indicating that the email format is invalid. User account is not created."}}, {"name": "ShortPassword", "description": "Test if the system handles a scenario where a user enters a password that is too short.", "input": {"fullName": "Charlie Green", "email": "charlie.green@example.com", "phone": "3213213210", "password": "Short1", "confirmPassword": "Short1"}, "expected": {"success": false, "message": "System displays an error message indicating that the password is too short. User account is not created."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}], "GPT4o_testcases": [{"name": "Add Existing Splitwise User", "description": "User successfully adds a friend who is already a registered Splitwise user", "input": {"friendName": "John Doe", "contactInfo": "john.doe@example.com"}, "expected": {"outcome": "Friend added successfully", "status": "Successful"}}, {"name": "Add Non-Registered User", "description": "User attempts to add a friend who is not a registered Splitwise user and sends an app link", "input": {"friendName": "Jane Smith", "contactInfo": "jane.smith@example.com"}, "expected": {"outcome": "App link sent via text message", "status": "Successful"}}, {"name": "Invalid Contact Information", "description": "System handles the case where the user provides invalid contact information", "input": {"friendName": "Invalid User", "contactInfo": "invalid-email"}, "expected": {"outcome": "Invalid contact information", "status": "Failed"}}, {"name": "Add Friend from Contacts", "description": "User adds a friend by selecting from their phone contacts", "input": {"friendName": "Emily Clark", "contactInfo": "emily.clark@example.com"}, "expected": {"outcome": "Friend added successfully", "status": "Successful"}}, {"name": "Duplicate Friend Addition", "description": "System handles the case where the user tries to add a friend who is already in their Splitwise account", "input": {"friendName": "John Doe", "contactInfo": "john.doe@example.com"}, "expected": {"outcome": "Friend already exists", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}], "GPT4o_testcases": [{"name": "Valid Group Creation with Trip Type", "description": "Verify that a group is created successfully with valid data for a trip type", "input": {"name": "Vacation Trip", "groupPhoto": "vacation.jpg", "groupType": "Trip", "startDate": "2023-12-01", "endDate": "2023-12-10"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Valid Group Creation without Photo", "description": "Verify that a group is created successfully without a photo", "input": {"name": "Home Group", "groupPhoto": "", "groupType": "Home"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation with Missing Name", "description": "Verify that a group is not created when the group name is missing", "input": {"name": "", "groupPhoto": "group.jpg", "groupType": "Couple"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}, {"name": "Invalid Group Creation with Trip Type Missing Dates", "description": "Verify that a group is not created when trip type is selected but dates are missing", "input": {"name": "Business Trip", "groupPhoto": "business.jpg", "groupType": "Trip", "startDate": "", "endDate": ""}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}, {"name": "Edge Case: Group Creation with Long Name", "description": "Verify that a group is created successfully with a very long group name", "input": {"name": "A very long group name that exceeds normal length expectations to test the system's handling of long strings", "groupPhoto": "longname.jpg", "groupType": "Other"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Edge Case: Group Creation with Special Characters in Name", "description": "Verify that a group is created successfully with special characters in the group name", "input": {"name": "Group!@#$%^&*()", "groupPhoto": "special.jpg", "groupType": "Home"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}], "GPT4o_testcases": [{"name": "Valid Expense Addition", "description": "Verify that a user can successfully add an expense with valid details.", "input": {"groups": ["Group1"], "friends": ["Friend1"], "description": "Dinner", "amount": 100, "paidBy": "Friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense added successfully", "status": "Added", "notification": "Notification sent to all involved members"}}, {"name": "Add Expense Without Description", "description": "Verify that the system handles adding an expense without a description.", "input": {"groups": ["Group1"], "friends": ["Friend1"], "description": "", "amount": 100, "paidBy": "Friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "DescriptionRequired"}}, {"name": "Add Expense With Zero Amount", "description": "Verify that the system handles adding an expense with zero amount.", "input": {"groups": ["Group1"], "friends": ["Friend1"], "description": "Dinner", "amount": 0, "paidBy": "Friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "InvalidAmount"}}, {"name": "Add Expense With Invalid Split Category", "description": "Verify that the system handles adding an expense with an invalid split category.", "input": {"groups": ["Group1"], "friends": ["Friend1"], "description": "Dinner", "amount": 100, "paidBy": "Friend1", "splitCategory": "InvalidCategory"}, "expected": {"outcome": "Expense addition failed", "status": "InvalidSplitCategory"}}, {"name": "Add Expense With Unequal Split", "description": "Verify that a user can add an expense with an unequal split among members.", "input": {"groups": ["Group1"], "friends": ["Friend1"], "description": "Dinner", "amount": 100, "paidBy": "Friend1", "splitCategory": "Unequally", "splitDetails": {"Friend1": 60, "Friend2": 40}}, "expected": {"outcome": "Expense added successfully", "status": "Added", "notification": "Notification sent to all involved members"}}, {"name": "Add Expense With Invalid Friend", "description": "Verify that the system handles adding an expense with a nonexistent friend.", "input": {"groups": ["Group1"], "friends": ["NonexistentFriend"], "description": "Dinner", "amount": 100, "paidBy": "Friend1", "splitCategory": "Equally"}, "expected": {"outcome": "Expense addition failed", "status": "InvalidFriend"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}], "GPT4o_testcases": [{"name": "View Activity Feed", "description": "Verify that a user can successfully view the chronological list of activities.", "input": {}, "expected": {"outcome": "Activity feed viewed successfully", "status": "Viewed"}}, {"name": "Search Activity", "description": "Verify that a user can search for specific activities using the search bar.", "input": {"searchQuery": "Dinner"}, "expected": {"outcome": "Search results displayed successfully", "status": "SearchSuccessful"}}, {"name": "Filter Activities by Type", "description": "Verify that a user can filter activities by type.", "input": {"filterType": "expenses"}, "expected": {"outcome": "Activities filtered successfully", "status": "FilterSuccessful"}}, {"name": "Edit Activity", "description": "Verify that a user can edit an activity from the feed.", "input": {"activityId": "12345"}, "expected": {"outcome": "Activity edited successfully", "status": "EditSuccessful"}}, {"name": "Delete Activity", "description": "Verify that a user can delete an activity from the feed.", "input": {"activityId": "12345"}, "expected": {"outcome": "Activity deleted successfully", "status": "DeleteSuccessful"}}, {"name": "Access Unauthorized Activity", "description": "Verify that the system restricts access to activities for unauthorized users.", "input": {}, "expected": {"outcome": "Activity access failed", "status": "UnauthorizedAccess"}}, {"name": "Invalid Search Query", "description": "Verify that the system handles invalid search queries gracefully.", "input": {"searchQuery": "!!!@@@###"}, "expected": {"outcome": "No results found", "status": "SearchFailed"}}, {"name": "Edit Non-existent Activity", "description": "Verify that the system handles attempts to edit non-existent activities.", "input": {"activityId": "99999"}, "expected": {"outcome": "Edit failed", "status": "ActivityNotFound"}}, {"name": "Delete Non-existent Activity", "description": "Verify that the system handles attempts to delete non-existent activities.", "input": {"activityId": "99999"}, "expected": {"outcome": "Delete failed", "status": "ActivityNotFound"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}], "GPT4o_testcases": [{"name": "View All Groups", "description": "Verify that the user can successfully view all groups they are part of.", "input": {}, "expected": {"outcome": "Groups displayed successfully", "access": "Allowed"}}, {"name": "View Group Details", "description": "Verify that the user can view detailed expenses within a specific group.", "input": {"selectedGroup": "VacationTrip"}, "expected": {"outcome": "Group details viewed successfully", "access": "Allowed"}}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses not associated with any group.", "input": {}, "expected": {"outcome": "Non-group expenses displayed successfully", "access": "Allowed"}}, {"name": "View Specific Non-Group Expense", "description": "Verify that the user can view details of a specific non-group expense.", "input": {"selectedExpense": "Dinner with Friends"}, "expected": {"outcome": "Non-group expense details viewed successfully", "access": "Allowed"}}, {"name": "View Group with No Expenses", "description": "Verify that the user can view a group that has no expenses.", "input": {"selectedGroup": "EmptyGroup"}, "expected": {"outcome": "Group viewed successfully with no expenses", "access": "Allowed"}}, {"name": "View Non-Existent Group", "description": "Verify that the system handles attempts to view a non-existent group.", "input": {"selectedGroup": "NonExistentGroup"}, "expected": {"outcome": "Error displayed: Group not found", "access": "Denied"}}, {"name": "View Non-Existent Non-Group Expense", "description": "Verify that the system handles attempts to view a non-existent non-group expense.", "input": {"selectedExpense": "NonExistentExpense"}, "expected": {"outcome": "Error displayed: Expense not found", "access": "Denied"}}, {"name": "View Groups Without Login", "description": "Verify that the user cannot view groups without logging in.", "input": {}, "expected": {"outcome": "Error displayed: User not logged in", "access": "Denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}], "GPT4o_testcases": [{"name": "View Group Details - Valid Group", "description": "Verify that a user can view details of a valid group they are a member of.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123"}, "expected": {"outcome": "Group details displayed", "status": "Success"}}, {"name": "View Group Details - Invalid Group", "description": "Verify that a user cannot view details of a group they are not a member of.", "input": {"user": "ExistingUser789", "groupId": "InvalidGroup456"}, "expected": {"outcome": "Access denied", "status": "Failure"}}, {"name": "View Group Members", "description": "Verify that a user can view the list of all members in a group.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123"}, "expected": {"outcome": "Members list displayed", "status": "Success"}}, {"name": "View Group Expenses", "description": "Verify that a user can view the total expenses shared in the group.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123"}, "expected": {"outcome": "Expenses displayed", "status": "Success"}}, {"name": "Edit Group Settings - Authorized User", "description": "Verify that a user with permissions can edit group settings.", "input": {"user": "AdminUser123", "groupId": "ValidGroup123", "editSettings": true}, "expected": {"outcome": "Settings updated", "status": "Success"}}, {"name": "Edit Group Settings - Unauthorized User", "description": "Verify that a user without permissions cannot edit group settings.", "input": {"user": "RegularUser456", "groupId": "ValidGroup123", "editSettings": true}, "expected": {"outcome": "Edit denied", "status": "Failure"}}, {"name": "Invite New Member - Valid Email", "description": "Verify that a user can invite a new member to the group using a valid email.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123", "inviteEmail": "newmember@example.com"}, "expected": {"outcome": "Invitation sent", "status": "Success"}}, {"name": "Invite New Member - Invalid Email", "description": "Verify that a user cannot invite a new member using an invalid email.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123", "inviteEmail": "invalid-email"}, "expected": {"outcome": "Invalid email error", "status": "Failure"}}, {"name": "Remove Member - Authorized User", "description": "Verify that an authorized user can remove a member from the group.", "input": {"user": "AdminUser123", "groupId": "ValidGroup123", "removeMember": "MemberToRemove"}, "expected": {"outcome": "Member removed", "status": "Success"}}, {"name": "Remove Member - Unauthorized User", "description": "Verify that an unauthorized user cannot remove a member from the group.", "input": {"user": "RegularUser456", "groupId": "ValidGroup123", "removeMember": "MemberToRemove"}, "expected": {"outcome": "Remove denied", "status": "Failure"}}, {"name": "Leave Group - Member", "description": "Verify that a member can leave the group.", "input": {"user": "ExistingUser789", "groupId": "ValidGroup123", "leaveGroup": true}, "expected": {"outcome": "Left group", "status": "Success"}}, {"name": "Leave Group - Non-Member", "description": "Verify that a non-member cannot leave a group they are not part of.", "input": {"user": "NonMemberUser", "groupId": "ValidGroup123", "leaveGroup": true}, "expected": {"outcome": "Leave denied", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}], "GPT4o_testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends added.", "input": {"loggedIn": true, "friendsAdded": true}, "expected": {"outcome": "Friends list displayed", "status": "200"}}, {"name": "View Owed Amounts", "description": "Verify that the user can see the total amount owed to each friend and by each friend.", "input": {"loggedIn": true, "friendsAdded": true}, "expected": {"outcome": "Amounts displayed", "status": "200"}}, {"name": "View Transaction History", "description": "Verify that the user can view detailed transaction history with a specific friend.", "input": {"loggedIn": true, "friendSelected": true}, "expected": {"outcome": "Transaction history displayed", "status": "200"}}, {"name": "Make Payment to Friend", "description": "Verify that the user can make a payment to a specific friend.", "input": {"loggedIn": true, "friendSelected": true, "paymentMethodSelected": true, "paymentAmount": 50}, "expected": {"outcome": "Payment successful", "status": "200"}}, {"name": "Invalid Payment Amount", "description": "Verify that the system handles the case where the user enters an invalid payment amount.", "input": {"loggedIn": true, "friendSelected": true, "paymentMethodSelected": true, "paymentAmount": -10}, "expected": {"outcome": "Payment failed", "status": "400"}}, {"name": "No Friends Added", "description": "Verify that the system handles the case where the user has not added any friends.", "input": {"loggedIn": true, "friendsAdded": false}, "expected": {"outcome": "No friends to display", "status": "404"}}, {"name": "Not Logged In", "description": "Verify that the system handles the case where the user is not logged in.", "input": {"loggedIn": false}, "expected": {"outcome": "Access denied", "status": "401"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}], "GPT4o_testcases": [{"name": "View Friend's Details", "description": "Verify that the user can view detailed information about a specific friend.", "input": {"friendId": "friend123"}, "expected": {"outcome": "User successfully views the friend's details, including contact information and mutual groups."}}, {"name": "View Friend's Expense History", "description": "Verify that the user can view the expense history with a specific friend.", "input": {"friendId": "friend123"}, "expected": {"outcome": "User successfully views the expense history with the friend."}}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with a friend.", "input": {"friendId": "friend123", "amount": 50}, "expected": {"outcome": "User successfully settles up the outstanding balance with the friend."}}, {"name": "Send Reminder to Friend", "description": "Verify that the user can send a reminder to a friend for pending payments.", "input": {"friendId": "friend123"}, "expected": {"outcome": "User successfully sends a reminder to the friend."}}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export a friend's expense data as a spreadsheet.", "input": {"friendId": "friend123"}, "expected": {"outcome": "User successfully exports the friend's expense data."}}, {"name": "Manage Friendship Settings", "description": "Verify that the user can manage friendship settings such as block, report, or remove.", "input": {"friendId": "friend123", "action": "block"}, "expected": {"outcome": "User successfully manages friendship settings by blocking the friend."}}, {"name": "View Detailed Activity", "description": "Verify that the user can view detailed activity related to a friend.", "input": {"friendId": "friend123"}, "expected": {"outcome": "User successfully views detailed activity related to the friend."}}, {"name": "View Friend's Details with Invalid ID", "description": "Verify that the system handles invalid friend ID gracefully when trying to view details.", "input": {"friendId": "invalidFriendId"}, "expected": {"outcome": "System displays an error message indicating the friend ID is invalid."}}, {"name": "Settle Up with Negative Amount", "description": "Verify that the system prevents settling up with a negative amount.", "input": {"friendId": "friend123", "amount": -50}, "expected": {"outcome": "System displays an error message indicating the amount cannot be negative."}}, {"name": "Send Reminder to Non-existent Friend", "description": "Verify that the system handles sending a reminder to a non-existent friend.", "input": {"friendId": "nonExistentFriend"}, "expected": {"outcome": "System displays an error message indicating the friend does not exist."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}], "GPT4o_testcases": [{"name": "Edit Account Information - Valid Details", "description": "Verify that the user can successfully edit their account information with valid details.", "input": {"email": "newuser@gmail.com", "password": "newpassword123"}, "expected": {"outcome": "Account information updated successfully", "status": "Success"}}, {"name": "Edit Account Information - Invalid Email", "description": "Verify that the system handles invalid email format when editing account information.", "input": {"email": "invalid-email", "password": "newpassword123"}, "expected": {"outcome": "Invalid email format", "status": "Error"}}, {"name": "Manage Notifications - Enable All", "description": "Verify that the user can enable all notification settings.", "input": {"email_notifications": true, "push_notifications": true}, "expected": {"outcome": "All notifications enabled", "status": "Success"}}, {"name": "Manage Notifications - Invalid Input", "description": "Verify that the system handles invalid input for notification settings.", "input": {"email_notifications": "yes", "push_notifications": "no"}, "expected": {"outcome": "Invalid input for notification settings", "status": "Error"}}, {"name": "Access Security Settings - Enable 2FA", "description": "Verify that the user can enable two-factor authentication successfully.", "input": {"two_factor_authentication": true}, "expected": {"outcome": "Two-factor authentication enabled", "status": "Success"}}, {"name": "Access Security Settings - Invalid 2FA Input", "description": "Verify that the system handles invalid input for two-factor authentication settings.", "input": {"two_factor_authentication": "enable"}, "expected": {"outcome": "Invalid input for two-factor authentication", "status": "Error"}}, {"name": "Contact Support - Valid Request", "description": "Verify that the user can contact support successfully with a valid request.", "input": {"support_request": "Need help with account settings"}, "expected": {"outcome": "Support request submitted successfully", "status": "Success"}}, {"name": "Contact Support - Empty Request", "description": "Verify that the system handles an empty support request.", "input": {"support_request": ""}, "expected": {"outcome": "Support request cannot be empty", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}], "GPT4o_testcases": [{"name": "Successful Logout", "description": "Verify that a user can successfully log out and is redirected to the login screen.", "input": {"action": "logout"}, "expected": {"outcome": "User successfully logged out", "status": "Logged Out"}}, {"name": "Logout Confirmation Prompt", "description": "Verify that the system prompts the user to confirm the logout action.", "input": {"action": "attempt logout"}, "expected": {"outcome": "Logout confirmation prompt displayed", "status": "Prompted"}}, {"name": "Cancel Logout", "description": "Verify that the user can cancel the logout action and remain logged in.", "input": {"action": "cancel logout"}, "expected": {"outcome": "User remains logged in", "status": "Logged In"}}, {"name": "Access After Logout", "description": "Verify that a user cannot access their account after logging out without logging in again.", "input": {"action": "access account after logout"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}, {"name": "Logout Without Confirmation", "description": "Verify that the system does not log out the user without confirmation.", "input": {"action": "attempt logout without confirmation"}, "expected": {"outcome": "User remains logged in", "status": "Logged In"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Post Valid Sale Ad for Item", "description": "Seller posts a valid sale ad for an item", "input": {"ad info": ["category: Electronics", "sub-category: Mobile Phones", "location: New York", "price: 300", "contact: 0123456789", "email: seller@example.com", "photos: 2"]}, "expected": {"outcome": "Ad approved and posted for sale", "status": "Success"}}, {"name": "Post Invalid Sale Ad with Missing Price", "description": "Seller posts an ad without specifying the price", "input": {"ad info": ["category: Electronics", "sub-category: Mobile Phones", "location: New York", "contact: 0123456789", "email: seller@example.com", "photos: 2"]}, "expected": {"outcome": "Missing price, ad not approved", "status": "Failed"}}, {"name": "Post Sale Ad with Invalid Email", "description": "Seller posts an ad with an invalid email format", "input": {"ad info": ["category: Electronics", "sub-category: Mobile Phones", "location: New York", "price: 300", "contact: 0123456789", "email: seller@com", "photos: 2"]}, "expected": {"outcome": "Invalid email format, ad not approved", "status": "Failed"}}, {"name": "Post Sale Ad with Excessive Photos", "description": "Seller posts an ad with more photos than allowed", "input": {"ad info": ["category: Electronics", "sub-category: Mobile Phones", "location: New York", "price: 300", "contact: 0123456789", "email: seller@example.com", "photos: 10"]}, "expected": {"outcome": "Too many photos, ad not approved", "status": "Failed"}}, {"name": "Post Sale Ad with Valid Service", "description": "Seller posts a valid sale ad for a service", "input": {"ad info": ["category: Services", "sub-category: Cleaning", "location: Los Angeles", "price: 100", "contact: 0987654321", "email: serviceprovider@example.com", "photos: 1"]}, "expected": {"outcome": "Ad approved and posted for service", "status": "Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}], "GPT4o_testcases": [{"name": "Search for Valid Item with Filters", "description": "Buyer searches for an item using valid filters", "input": {"filters": {"category": "Electronics", "type of ad": "For Sale", "type of poster": "Individual", "location": "New York"}}, "expected": {"outcome": "Relevant items displayed", "status": "Success"}}, {"name": "Search for Item with Invalid Category", "description": "Buyer searches for an item using an invalid category", "input": {"filters": {"category": "InvalidCategory", "type of ad": "For Sale", "type of poster": "Individual", "location": "New York"}}, "expected": {"outcome": "No items found", "status": "Failed"}}, {"name": "Search for Item with No Filters", "description": "Buyer searches for an item without applying any filters", "input": {"filters": {}}, "expected": {"outcome": "All items displayed", "status": "Success"}}, {"name": "Search for Specific Advertisement Title", "description": "Buyer searches for a specific advertisement title", "input": {"search bar": "iPhone 12"}, "expected": {"outcome": "Specific advertisement displayed", "status": "Success"}}, {"name": "Search for Item with Invalid Location", "description": "Buyer searches for an item using an invalid location", "input": {"filters": {"category": "Electronics", "type of ad": "For Sale", "type of poster": "Individual", "location": "InvalidLocation"}}, "expected": {"outcome": "No items found", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}], "GPT4o_testcases": [{"name": "Boost Ad with Valid Payment", "description": "Verify that the seller can boost an ad using a valid payment method.", "input": {"boostOption": "Spotlight", "duration": "7 days", "paymentMethod": "Visa", "paymentDetails": "Valid Visa card details"}, "expected": {"outcome": "Ad is successfully boosted and confirmation message is received."}}, {"name": "Boost Ad with Insufficient Balance", "description": "Verify that the seller cannot boost an ad if there is insufficient balance.", "input": {"boostOption": "Urgent", "duration": "3 days", "paymentMethod": "Pay by voucher", "voucherDetails": "Insufficient balance voucher"}, "expected": {"outcome": "Boosting fails and an error message is displayed indicating insufficient balance."}}, {"name": "Boost Ad with Invalid Payment Details", "description": "Verify that the seller cannot boost an ad using invalid payment details.", "input": {"boostOption": "Bump Up", "duration": "15 days", "paymentMethod": "MasterCard", "paymentDetails": "Invalid MasterCard details"}, "expected": {"outcome": "Payment fails and an error message is displayed indicating invalid payment details."}}, {"name": "Boost Ad with Multiple Options", "description": "Verify that the seller can select multiple boosting options for an ad.", "input": {"boostOptions": ["Bump Up", "Spotlight"], "duration": "7 days", "paymentMethod": "Bikash", "paymentDetails": "Valid Bikash account details"}, "expected": {"outcome": "Ad is successfully boosted with multiple options and confirmation message is received."}}, {"name": "Boost Ad with Invalid Duration", "description": "Verify that the seller cannot boost an ad with an invalid duration.", "input": {"boostOption": "Urgent", "duration": "0 days", "paymentMethod": "DBBL", "paymentDetails": "Valid DBBL account details"}, "expected": {"outcome": "Boosting fails and an error message is displayed indicating invalid duration."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}], "GPT4o_testcases": [{"name": "Valid Job Posting with All Details", "description": "Verify that an employer can successfully post a job with all required details.", "input": {"jobDetails": {"title": "Backend Developer", "description": "Looking for a backend developer to join our team.", "location": "New York", "category": "IT", "yearsOfExperience": "3", "applicationDeadline": "2024-05-01"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}, {"name": "Job Posting Without Location", "description": "Verify that the system handles the case where an employer tries to post a job without specifying the location.", "input": {"jobDetails": {"title": "Project Manager", "description": "Experienced project manager needed.", "category": "Management", "yearsOfExperience": "5", "applicationDeadline": "2024-06-01"}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}, {"name": "Job Posting with Past Deadline", "description": "Verify that the system prevents posting a job with a past application deadline.", "input": {"jobDetails": {"title": "Graphic Designer", "description": "Creative graphic designer required.", "location": "Remote", "category": "Design", "yearsOfExperience": "2", "applicationDeadline": "2023-01-01"}}, "expected": {"outcome": "Job posting failed", "status": "Invalid deadline"}}, {"name": "Job Posting with Missing Title", "description": "Verify that the system handles the case where an employer tries to post a job without a title.", "input": {"jobDetails": {"description": "Join our team as a software engineer.", "location": "San Francisco", "category": "Engineering", "yearsOfExperience": "4", "applicationDeadline": "2024-07-15"}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}, {"name": "Job Posting with Optional Experience", "description": "Verify that an employer can post a job without specifying years of experience.", "input": {"jobDetails": {"title": "Marketing Specialist", "description": "Dynamic marketing specialist needed.", "location": "Chicago", "category": "Marketing", "applicationDeadline": "2024-08-10"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}], "GPT4o_testcases": [{"name": "Valid Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "12345", "resume": "job_seeker_resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Missing Resume", "description": "Verify that the system handles the case where the job seeker tries to submit an application without a resume.", "input": {"jobID": "12345", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Invalid File Format", "description": "Verify that the system handles the case where the job seeker uploads a resume in an unsupported file format.", "input": {"jobID": "12345", "resume": "resume.exe"}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Application Without Login", "description": "Verify that the system prevents a job seeker from applying for a job without being logged in.", "input": {"jobID": "12345", "resume": "job_seeker_resume.pdf"}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Apply to Nonexistent Job", "description": "Verify that the system handles the case where the job seeker tries to apply to a job that does not exist.", "input": {"jobID": "99999", "resume": "job_seeker_resume.pdf"}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}], "GPT4o_testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can successfully search and view profiles of job seekers.", "input": {"searchCriteria": {"jobCategory": "Engineering", "location": "New York"}, "membership": true}, "expected": {"outcome": "Profiles displayed successfully", "profilesViewed": true}}, {"name": "Search Without Criteria", "description": "Verify that the system handles the case where the employer searches without any criteria.", "input": {"searchCriteria": {}, "membership": false}, "expected": {"outcome": "Profiles displayed successfully", "profilesViewed": true}}, {"name": "Invalid Search Criteria", "description": "Verify that the system handles invalid search criteria.", "input": {"searchCriteria": {"jobCategory": "UnknownCategory", "location": "Atlantis"}, "membership": false}, "expected": {"outcome": "No profiles found", "profilesViewed": false}}, {"name": "View Full Profile Without Membership", "description": "Verify that an employer cannot view full profiles without a membership.", "input": {"searchCriteria": {"jobCategory": "Engineering"}, "membership": false}, "expected": {"outcome": "Full profile access denied", "profilesViewed": true}}, {"name": "View Full Profile With Membership", "description": "Verify that an employer with membership can view full profiles.", "input": {"searchCriteria": {"jobCategory": "Engineering"}, "membership": true}, "expected": {"outcome": "Full profile displayed successfully", "profilesViewed": true}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}], "GPT4o_testcases": [{"name": "valid membership registration", "description": "verify that user successfully registers as a member with valid details", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "Tech Gadgets", "email": "unique@example.com", "phoneNumber": "1234567890"}, "expected": {"outcome": "registration is successfully completed", "status": "approved"}}, {"name": "invalid membership registration - missing details", "description": "verify that registration fails when required details are missing", "input": {"businessCategory": "", "membershipPlan": "Plus - Monthly", "businessName": "", "email": "", "phoneNumber": ""}, "expected": {"outcome": "registration failed", "status": "rejected"}}, {"name": "invalid membership registration - duplicate email", "description": "verify that registration fails when using a duplicate email", "input": {"businessCategory": "Electronics", "membershipPlan": "Premium - Yearly", "businessName": "Electro World", "email": "duplicate@example.com", "phoneNumber": "0987654321"}, "expected": {"outcome": "registration failed", "status": "rejected"}}, {"name": "payment failure", "description": "verify that registration fails if payment is not completed", "input": {"businessCategory": "Cars", "membershipPlan": "Plus - Quarterly", "businessName": "Auto Hub", "email": "unique2@example.com", "phoneNumber": "1122334455", "paymentStatus": "failed"}, "expected": {"outcome": "registration failed", "status": "rejected"}}, {"name": "successful payment and activation", "description": "verify that user account is activated after successful payment", "input": {"businessCategory": "Mobile Accessories", "membershipPlan": "Premium - Monthly", "businessName": "Gadget Store", "email": "unique3@example.com", "phoneNumber": "2233445566", "paymentStatus": "successful"}, "expected": {"outcome": "registration is successfully completed", "status": "approved"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}], "GPT4o_testcases": [{"name": "Create New Workspace Successfully", "description": "Verify that a user can successfully create a new workspace when all conditions are met.", "input": {"workspace_name": "New Workspace", "email_domain": "example.com"}, "expected": {"outcome": "Workspace created successfully", "status": "Created"}}, {"name": "Exceed Maximum Workspaces", "description": "Verify that the system prevents creating a new workspace when the user exceeds the maximum number of workspaces allowed.", "input": {"workspace_name": "Another Workspace", "email_domain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "MaxWorkspacesExceeded"}}, {"name": "Create Workspace Without Name", "description": "Verify that the system prevents creating a new workspace without a name.", "input": {"workspace_name": "", "email_domain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "InvalidInput"}}, {"name": "Create Workspace With Invalid Email Domain", "description": "Verify that the system prevents creating a new workspace with an invalid email domain.", "input": {"workspace_name": "Invalid Domain Workspace", "email_domain": "invalid_domain"}, "expected": {"outcome": "Workspace creation failed", "status": "InvalidEmailDomain"}}, {"name": "Unauthorized Workspace Creation", "description": "Verify that the system restricts workspace creation for unauthorized users.", "input": {"workspace_name": "Unauthorized Workspace", "email_domain": "example.com"}, "expected": {"outcome": "Workspace creation failed", "status": "UnauthorizedAccess"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}], "GPT4o_testcases": [{"name": "Switch Workspace Successfully", "description": "Verify that a user can successfully switch to another workspace they are a member of.", "input": {"action": "click_profile_picture", "select_workspace": "Workspace B"}, "expected": {"outcome": "Workspace switched successfully", "status": "Switched"}}, {"name": "Switch to Non-Member Workspace", "description": "Verify that the system restricts switching to a workspace the user is not a member of.", "input": {"action": "click_profile_picture", "select_workspace": "Workspace C"}, "expected": {"outcome": "Workspace switch failed", "status": "UnauthorizedAccess"}}, {"name": "Switch Workspace Without Login", "description": "Verify that the system restricts workspace switching when the user is not logged in.", "input": {"action": "click_profile_picture", "select_workspace": "Workspace A"}, "expected": {"outcome": "Workspace switch failed", "status": "NotLoggedIn"}}, {"name": "Switch to Same Workspace", "description": "Verify that switching to the currently active workspace does not cause any issues.", "input": {"action": "click_profile_picture", "select_workspace": "Current Workspace"}, "expected": {"outcome": "No change in workspace", "status": "NoAction"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}], "GPT4o_testcases": [{"name": "Valid Invitation Acceptance", "description": "Verify that a user can successfully join a workspace using a valid invitation link.", "input": {"user": "User123", "invitationLink": "validLink"}, "expected": {"outcome": "User joined workspace", "status": "Success"}}, {"name": "Invalid Invitation Link", "description": "Verify that a user cannot join a workspace using an invalid invitation link.", "input": {"user": "User456", "invitationLink": "invalidLink"}, "expected": {"outcome": "Failed to join workspace", "status": "Error"}}, {"name": "Allowed Domain Email", "description": "Verify that a user can join a workspace using an email from an allowed domain.", "input": {"user": "User789", "emailDomain": "alloweddomain.com"}, "expected": {"outcome": "User joined workspace", "status": "Success"}}, {"name": "Disallowed Domain Email", "description": "Verify that a user cannot join a workspace using an email from a disallowed domain.", "input": {"user": "User101", "emailDomain": "disalloweddomain.com"}, "expected": {"outcome": "Failed to join workspace", "status": "Error"}}, {"name": "No Invitation or Allowed Domain", "description": "Verify that a user cannot join a workspace without an invitation or allowed domain email.", "input": {"user": "User202", "invitationLink": null, "emailDomain": "randomdomain.com"}, "expected": {"outcome": "Failed to join workspace", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Valid Workspace Name Update", "description": "Verify that a user can successfully update the workspace name.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated successfully", "updatedName": "New Workspace Name"}}, {"name": "Empty Workspace Name", "description": "Verify that the system handles the case where the user tries to update the workspace name with an empty string.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name update failed", "updatedName": "No change"}}, {"name": "Excessively Long Workspace Name", "description": "Verify that the system handles the case where the user tries to update the workspace name with a name that exceeds the maximum length.", "input": {"workspaceName": "A very long workspace name that exceeds the maximum allowed length for workspace names"}, "expected": {"outcome": "Workspace name update failed", "updatedName": "No change"}}, {"name": "Workspace Name with Special Characters", "description": "Verify that the system handles the case where the user tries to update the workspace name with special characters.", "input": {"workspaceName": "Workspace@123!"}, "expected": {"outcome": "Workspace name updated successfully", "updatedName": "Workspace@123!"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Valid Workspace Icon Upload", "description": "Verify that a user can successfully upload a valid workspace icon.", "input": {"iconFile": "valid-icon.png"}, "expected": {"outcome": "Workspace icon updated successfully", "updatedIcon": "valid-icon.png"}}, {"name": "Invalid File Format", "description": "Verify that the system handles the case where the user tries to upload an icon with an invalid file format.", "input": {"iconFile": "invalid-icon.txt"}, "expected": {"outcome": "Workspace icon update failed", "updatedIcon": "No change"}}, {"name": "Exceeding File Size Limit", "description": "Verify that the system handles the case where the user tries to upload an icon that exceeds the file size limit.", "input": {"iconFile": "large-icon.png"}, "expected": {"outcome": "Workspace icon update failed", "updatedIcon": "No change"}}, {"name": "Empty Icon File", "description": "Verify that the system handles the case where the user tries to upload an empty icon file.", "input": {"iconFile": ""}, "expected": {"outcome": "Workspace icon update failed", "updatedIcon": "No change"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Delete Current Workspace - Valid Case", "description": "User successfully deletes the current workspace by confirming the workspace name", "input": {"userId": "2005023", "workspaceName": "Project Alpha"}, "expected": {"outcome": "Workspace deleted successfully", "status": "204"}}, {"name": "Delete Current Workspace - Invalid Workspace Name", "description": "User attempts to delete a workspace with an incorrect workspace name", "input": {"userId": "2005023", "workspaceName": "Wrong Name"}, "expected": {"outcome": "Workspace deletion failed", "status": "400"}}, {"name": "Delete Current Workspace - User Not Logged In", "description": "User attempts to delete a workspace without being logged in", "input": {"userId": null, "workspaceName": "Project Alpha"}, "expected": {"outcome": "User not authenticated", "status": "401"}}, {"name": "Delete Current Workspace - Non-existent Workspace", "description": "User attempts to delete a workspace that does not exist", "input": {"userId": "2005023", "workspaceName": "NonExistentWorkspace"}, "expected": {"outcome": "Workspace not found", "status": "404"}}, {"name": "Delete Current Workspace - Empty Workspace Name", "description": "User attempts to delete a workspace without providing a workspace name", "input": {"userId": "2005023", "workspaceName": ""}, "expected": {"outcome": "Invalid workspace name", "status": "400"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}], "GPT4o_testcases": [{"name": "Valid Workspace Leaving", "description": "Verify that a user can successfully leave a workspace they are a member of.", "input": {"workspace_id": "67890"}, "expected": {"outcome": "User left the workspace successfully", "status": "Not a member", "notification": "Notification sent to workspace members"}}, {"name": "Invalid Workspace Leaving", "description": "Verify that the system handles the case where a user tries to leave a workspace they are not a member of.", "input": {"workspace_id": "09876"}, "expected": {"outcome": "Leave workspace failed", "status": "Still a member"}}, {"name": "Leave Workspace Without Confirmation", "description": "Verify that the system does not allow leaving a workspace if the user does not confirm the action.", "input": {"workspace_id": "67890", "confirmation": false}, "expected": {"outcome": "Leave workspace cancelled", "status": "Still a member"}}, {"name": "Leave Non-Existent Workspace", "description": "Verify that the system handles the case where a user tries to leave a non-existent workspace.", "input": {"workspace_id": "00000"}, "expected": {"outcome": "Leave workspace failed", "status": "No such workspace"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}], "GPT4o_testcases": [{"name": "Valid Email Addition", "description": "Verify that a user can successfully add another email account.", "input": {"primary_email": "user@notion.com", "new_email": "newuser@example.com"}, "expected": {"outcome": "Email added successfully", "status": "Active"}}, {"name": "Invalid Email Format", "description": "Verify that the system handles the case where the user provides an email with an invalid format.", "input": {"primary_email": "user@notion.com", "new_email": "invalid_email_format"}, "expected": {"outcome": "Email addition failed", "status": "Inactive"}}, {"name": "Duplicate Email Addition", "description": "Verify that the system prevents adding an email that is already associated with the account.", "input": {"primary_email": "user@notion.com", "new_email": "user@notion.com"}, "expected": {"outcome": "Email addition failed", "status": "Inactive"}}, {"name": "Unverified Email Addition", "description": "Verify that the system handles the case where the user does not verify the new email.", "input": {"primary_email": "user@notion.com", "new_email": "unverified@example.com"}, "expected": {"outcome": "Email addition pending verification", "status": "Pending"}}, {"name": "Email Addition Without Access", "description": "Verify that the system handles the case where the user does not have access to the new email account.", "input": {"primary_email": "user@notion.com", "new_email": "noaccess@example.com"}, "expected": {"outcome": "Email addition failed", "status": "Inactive"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Valid file import", "description": "verify that a user can successfully import workspace data from a valid file", "input": {"user_id": "user123", "file_type": "valid_file_format"}, "expected": {"outcome": "import successful", "status": "accepted"}}, {"name": "Invalid file import", "description": "verify that a user cannot import workspace data from an invalid file", "input": {"user_id": "user123", "file_type": "invalid_file_format"}, "expected": {"outcome": "import failed", "status": "denied"}}, {"name": "Cloud storage import", "description": "verify that a user can import workspace data from cloud storage", "input": {"user_id": "user123", "cloud_storage": "valid_cloud_service"}, "expected": {"outcome": "import successful", "status": "accepted"}}, {"name": "Unauthorized user import", "description": "verify that an unauthorized user cannot import workspace data", "input": {"user_id": "unauthorized_user", "file_type": "valid_file_format"}, "expected": {"outcome": "import failed", "status": "denied"}}, {"name": "Empty file import", "description": "verify that importing an empty file results in failure", "input": {"user_id": "user123", "file_type": "empty_file"}, "expected": {"outcome": "import failed", "status": "denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}], "GPT4o_testcases": [{"name": "Valid Member Addition", "description": "Verify that a user can successfully add a member to the workspace.", "input": {"workspace": "WorkspaceName", "memberEmail": "newmember@example.com"}, "expected": {"outcome": "Member added successfully", "status": "Added", "notification": "Notification sent to the new member"}}, {"name": "Adding Nonexistent Email", "description": "Verify that the system handles adding a member with a nonexistent email.", "input": {"workspace": "WorkspaceName", "memberEmail": "nonexistent@example.com"}, "expected": {"outcome": "Member addition failed", "status": "EmailNotFound"}}, {"name": "Member Already in Workspace", "description": "Verify that the system handles adding a member who is already part of the workspace.", "input": {"workspace": "WorkspaceName", "memberEmail": "existingmember@example.com"}, "expected": {"outcome": "Member addition failed", "status": "AlreadyInWorkspace"}}, {"name": "Invalid Email Format", "description": "Verify that the system handles an invalid email format when adding a member.", "input": {"workspace": "WorkspaceName", "memberEmail": "invalid-email-format"}, "expected": {"outcome": "Member addition failed", "status": "InvalidEmailFormat"}}, {"name": "Invite Member via Email", "description": "Verify that a user can send an invitation email to add a member to the workspace.", "input": {"workspace": "WorkspaceName", "memberEmail": "invitee@example.com"}, "expected": {"outcome": "Invitation sent successfully", "status": "InvitationSent", "notification": "Invitation email sent to invitee@example.com"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}], "GPT4o_testcases": [{"name": "Valid Domain Update", "description": "Verify that a user can successfully update the allowed email domains.", "input": {"allowedDomains": ["company.com", "ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Allowed email domains updated successfully", "updatedDomains": ["company.com", "ugrad.cse.buet.ac.bd"]}}, {"name": "Invalid Domain Format", "description": "Verify that the system handles the case where the user tries to update with an invalid domain format.", "input": {"allowedDomains": ["invalid-domain"]}, "expected": {"outcome": "Allowed email domains update failed", "updatedDomains": "No change"}}, {"name": "Empty Domain List", "description": "Verify that the system handles the case where the user tries to update with an empty domain list.", "input": {"allowedDomains": []}, "expected": {"outcome": "Allowed email domains update failed", "updatedDomains": "No change"}}, {"name": "Duplicate Domain Entry", "description": "Verify that the system handles duplicate domain entries correctly.", "input": {"allowedDomains": ["company.com", "company.com"]}, "expected": {"outcome": "Allowed email domains updated successfully", "updatedDomains": ["company.com"]}}, {"name": "Exceeding Maximum Domain Limit", "description": "Verify that the system handles the case where the user tries to update with more domains than allowed.", "input": {"allowedDomains": ["domain1.com", "domain2.com", "domain3.com", "domain4.com", "domain5.com", "domain6.com"]}, "expected": {"outcome": "Allowed email domains update failed", "updatedDomains": "No change"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Authorized user exports workspace content", "description": "verify that authorized users can export workspace content", "input": {"user_role": "workspace_owner", "plan_type": "Business"}, "expected": {"outcome": "export successful", "status": "accepted"}}, {"name": "Unauthorized user attempts to export workspace content", "description": "verify that unauthorized users cannot export workspace content", "input": {"user_role": "member", "plan_type": "Business"}, "expected": {"outcome": "export failed", "status": "denied"}}, {"name": "User with insufficient plan attempts PDF export", "description": "verify that users without a Business or Enterprise plan cannot export as PDF", "input": {"user_role": "workspace_owner", "plan_type": "Free"}, "expected": {"outcome": "export failed", "status": "denied"}}, {"name": "User exports workspace content with all formats", "description": "verify that users can select and export content in all available formats", "input": {"user_role": "workspace_owner", "plan_type": "Enterprise", "export_formats": ["Markdown", "HTML", "CSV", "PDF"]}, "expected": {"outcome": "export successful", "status": "accepted"}}, {"name": "User exports workspace content with invalid format", "description": "verify that users cannot export content in an unsupported format", "input": {"user_role": "workspace_owner", "plan_type": "Business", "export_formats": ["TXT"]}, "expected": {"outcome": "export failed", "status": "denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Apply Bold Formatting to Text", "description": "User applies bold formatting to a selected text block", "input": {"userId": "2005013", "documentId": "doc123", "textBlockId": "block456", "formatting": "bold", "timestamp": "2024-02-04T14:00:00Z"}, "expected": {"outcome": "Text formatted successfully", "status": "200"}}, {"name": "Apply Invalid Formatting Option", "description": "User attempts to apply an unsupported formatting option", "input": {"userId": "2005013", "documentId": "doc123", "textBlockId": "block456", "formatting": "unsupported_format", "timestamp": "2024-02-04T14:05:00Z"}, "expected": {"outcome": "Invalid formatting option", "status": "400"}}, {"name": "Add Hyperlink to Text", "description": "User adds a hyperlink to a selected text block", "input": {"userId": "2005013", "documentId": "doc123", "textBlockId": "block456", "formatting": "add_link", "link": "https://example.com", "timestamp": "2024-02-04T14:10:00Z"}, "expected": {"outcome": "Link added successfully", "status": "200"}}, {"name": "Apply Formatting Without Selecting Text", "description": "User tries to apply formatting without selecting a text block", "input": {"userId": "2005013", "documentId": "doc123", "textBlockId": "", "formatting": "italic", "timestamp": "2024-02-04T14:15:00Z"}, "expected": {"outcome": "No text block selected", "status": "400"}}, {"name": "Apply Multiple Formatting Options", "description": "User applies multiple formatting options to a selected text block", "input": {"userId": "2005013", "documentId": "doc123", "textBlockId": "block456", "formatting": ["bold", "italic", "underline"], "timestamp": "2024-02-04T14:20:00Z"}, "expected": {"outcome": "Text formatted successfully", "status": "200"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid Column Organization", "description": "Verify that a user can successfully organize content into columns.", "input": {"action": "dragAndDrop", "contentBlocks": ["Block1", "Block2", "Block3"]}, "expected": {"outcome": "Organization successful", "status": "Columns Created"}}, {"name": "Invalid Content Block", "description": "Verify the response when a user attempts to organize an invalid content block.", "input": {"action": "dragAndDrop", "contentBlocks": ["InvalidBlock"]}, "expected": {"outcome": "Organization failed", "status": "Error"}}, {"name": "Empty Column Organization", "description": "Verify the response when a user attempts to create columns with no content blocks.", "input": {"action": "dragAndDrop", "contentBlocks": []}, "expected": {"outcome": "Organization failed", "status": "No Content"}}, {"name": "Exceeding Column Limit", "description": "Verify the response when a user attempts to create more columns than allowed.", "input": {"action": "dragAndDrop", "contentBlocks": ["Block1", "Block2", "Block3", "Block4", "Block5", "Block6"]}, "expected": {"outcome": "Organization failed", "status": "Column Limit Exceeded"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Valid Heading Addition", "description": "Verify that a user can successfully add H1, H2, and H3 headings to structure content.", "input": {"headings": ["H1: Introduction", "H2: Background", "H3: Details"]}, "expected": {"outcome": "Headings added successfully", "status": "Structured"}}, {"name": "Invalid Heading Format", "description": "Verify the response when a user adds headings with an invalid format.", "input": {"headings": ["H4: Invalid", "H5: Also Invalid"]}, "expected": {"outcome": "Heading addition failed", "status": "Error"}}, {"name": "Empty Heading Submission", "description": "Verify the response when a user submits an empty heading.", "input": {"headings": [""]}, "expected": {"outcome": "Heading addition failed", "status": "Error"}}, {"name": "Duplicate Heading Addition", "description": "Verify the response when a user adds duplicate headings.", "input": {"headings": ["H1: Introduction", "H1: Introduction"]}, "expected": {"outcome": "Duplicate headings detected", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Add Page Icon", "description": "Verify that a user can successfully add or change the page icon.", "input": {"icon": "valid_icon.png"}, "expected": {"outcome": "Icon added or changed", "status": "Icon updated successfully"}}, {"name": "Add Cover Image", "description": "Verify that a user can successfully add or change the cover image.", "input": {"coverImage": "valid_cover.jpg"}, "expected": {"outcome": "Cover image added or changed", "status": "Cover updated successfully"}}, {"name": "Invalid Icon Format", "description": "Verify that an error is shown when a user tries to upload an invalid icon format.", "input": {"icon": "invalid_icon.txt"}, "expected": {"outcome": "Error message displayed", "status": "Invalid icon format"}}, {"name": "Invalid Cover Image Format", "description": "Verify that an error is shown when a user tries to upload an invalid cover image format.", "input": {"coverImage": "invalid_cover.docx"}, "expected": {"outcome": "Error message displayed", "status": "Invalid cover image format"}}, {"name": "Large Icon File", "description": "Verify that an error is shown when a user tries to upload an excessively large icon file.", "input": {"icon": "large_icon.png"}, "expected": {"outcome": "Error message displayed", "status": "Icon file too large"}}, {"name": "Large Cover Image File", "description": "Verify that an error is shown when a user tries to upload an excessively large cover image file.", "input": {"coverImage": "large_cover.jpg"}, "expected": {"outcome": "Error message displayed", "status": "Cover image file too large"}}, {"name": "Remove Page Icon", "description": "Verify that a user can remove the page icon.", "input": {"icon": null}, "expected": {"outcome": "Icon removed", "status": "No icon displayed"}}, {"name": "Remove Cover Image", "description": "Verify that a user can remove the cover image.", "input": {"coverImage": null}, "expected": {"outcome": "Cover image removed", "status": "No cover image displayed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Valid Image Upload and Arrangement", "description": "Verify that a user can successfully upload and arrange an image on the page.", "input": {"uploadedImage": "Landscape.jpg", "arrangement": "Center"}, "expected": {"outcome": "Image uploaded and arranged", "status": "Success"}}, {"name": "Image Upload with Resizing", "description": "Verify that a user can upload an image and resize it successfully.", "input": {"uploadedImage": "Portrait.jpg", "resize": "50%"}, "expected": {"outcome": "Image uploaded and resized", "status": "Success"}}, {"name": "Image Upload with Caption and Alt Text", "description": "Verify that a user can add captions and alt text to an uploaded image.", "input": {"uploadedImage": "Cityscape.jpg", "caption": "A beautiful city view", "altText": "Cityscape"}, "expected": {"outcome": "Caption and alt text added", "status": "Success"}}, {"name": "Empty Image Upload", "description": "Verify that the system handles the case where a user tries to upload an empty image.", "input": {"uploadedImage": ""}, "expected": {"outcome": "Image upload failed", "status": "Error"}}, {"name": "Invalid Image Format Upload", "description": "Verify that the system handles the case where a user uploads an image in an unsupported format.", "input": {"uploadedImage": "Document.pdf"}, "expected": {"outcome": "Image upload failed", "status": "Error"}}, {"name": "Image Arrangement Without Upload", "description": "Verify that the system handles the case where a user tries to arrange an image without uploading.", "input": {"arrangement": "Left"}, "expected": {"outcome": "Arrangement failed", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}], "GPT4o_testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can successfully upload a PDF file to a Notion page.", "input": {"fileType": "PDF", "fileName": "SampleDocument.pdf"}, "expected": {"outcome": "Upload successful", "status": "File visible on page"}}, {"name": "Invalid File Type Upload", "description": "Verify the response when a user attempts to upload an unsupported file type.", "input": {"fileType": "EXE", "fileName": "ExecutableFile.exe"}, "expected": {"outcome": "Upload failed", "status": "Unsupported file type"}}, {"name": "Valid File Link Embedding", "description": "Verify that a user can successfully embed a file link from an external source.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "Embedding successful", "status": "Link visible on page"}}, {"name": "Invalid File Link Embedding", "description": "Verify the response when a user attempts to embed an invalid file link.", "input": {"fileLink": "https://example.com/invalidlink"}, "expected": {"outcome": "Embedding failed", "status": "Invalid link"}}, {"name": "Arrange File Block", "description": "Verify that a user can arrange the file block on the page.", "input": {"action": "Move file block", "position": "Top of the page"}, "expected": {"outcome": "Arrangement successful", "status": "File block moved"}}, {"name": "Arrange File Block Without Permission", "description": "Verify the response when a user without edit permissions attempts to arrange a file block.", "input": {"action": "Move file block", "position": "Top of the page"}, "expected": {"outcome": "Arrangement failed", "status": "Permission denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Embed Video from Streaming Service", "description": "Verify that a user can embed a video from a streaming service into a Notion page.", "input": {"media_type": "video", "video_url": "https://streaming.example.com/video1"}, "expected": {"outcome": "Video embedded successfully into the Notion page", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file to a Notion page.", "input": {"media_type": "audio", "audio_file": "audio_example.mp3"}, "expected": {"outcome": "Audio file uploaded successfully to the Notion page", "status": "Success"}}, {"name": "Resize and Align Media Blocks", "description": "Verify that a user can resize and align media blocks on a Notion page.", "input": {"action": "resize_align", "media_block": "video", "new_size": "medium", "alignment": "center"}, "expected": {"outcome": "Media block resized and aligned successfully", "status": "Success"}}, {"name": "Embed Invalid Video URL", "description": "Verify that embedding an invalid video URL results in an error.", "input": {"media_type": "video", "video_url": "invalid_url"}, "expected": {"outcome": "Error message displayed for invalid video URL", "status": "Failure"}}, {"name": "Upload Unsupported Audio Format", "description": "Verify that uploading an unsupported audio format results in an error.", "input": {"media_type": "audio", "audio_file": "audio_example.txt"}, "expected": {"outcome": "Error message displayed for unsupported audio format", "status": "Failure"}}, {"name": "Resize Media Block to Invalid Size", "description": "Verify that resizing a media block to an invalid size results in an error.", "input": {"action": "resize_align", "media_block": "audio", "new_size": "extra_large", "alignment": "left"}, "expected": {"outcome": "Error message displayed for invalid size", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Valid Page Linking", "description": "Verify that a user can successfully link one Notion page to another.", "input": {"trigger": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Linking successful", "status": "Linked"}}, {"name": "Linking Non-existent Page", "description": "Verify the response when a user tries to link to a non-existent Notion page.", "input": {"trigger": "[[", "pageName": "NonExistentPage"}, "expected": {"outcome": "Linking failed", "status": "Error"}}, {"name": "Invalid Trigger Character", "description": "Verify the response when a user uses an invalid trigger character for linking.", "input": {"trigger": "#", "pageName": "Project Overview"}, "expected": {"outcome": "Linking failed", "status": "Error"}}, {"name": "Empty Page Name", "description": "Verify the response when a user tries to link with an empty page name.", "input": {"trigger": "+", "pageName": ""}, "expected": {"outcome": "Linking failed", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}], "GPT4o_testcases": [{"name": "Valid URL Mention Formatting", "description": "Verify that a user can successfully paste a URL and format it as a mention.", "input": {"pastedURL": "https://example.com"}, "expected": {"outcome": "Formatting successful", "status": "Mention"}}, {"name": "Invalid URL Formatting", "description": "Verify the response when a user tries to format an invalid URL as a mention.", "input": {"pastedURL": "invalid-url"}, "expected": {"outcome": "Formatting failed", "status": "Error"}}, {"name": "Empty URL Input", "description": "Verify the response when a user pastes an empty string instead of a URL.", "input": {"pastedURL": ""}, "expected": {"outcome": "Formatting failed", "status": "Error"}}, {"name": "URL with Special Characters", "description": "Verify that a URL with special characters can be formatted as a mention.", "input": {"pastedURL": "https://example.com/?q=hello&lang=en"}, "expected": {"outcome": "Formatting successful", "status": "Mention"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Valid Content Transfer", "description": "Verify that a user can successfully transfer content ownership to another account.", "input": {"sharedPage": "ProjectPlan", "newOwnerAccount": "newOwner@example.com"}, "expected": {"outcome": "Transfer successful", "status": "Ownership Transferred"}}, {"name": "Transfer to Non-Existent Account", "description": "Verify the response when a user attempts to transfer content to a non-existent account.", "input": {"sharedPage": "ProjectPlan", "newOwnerAccount": "nonExistent@example.com"}, "expected": {"outcome": "Transfer failed", "status": "Account Not Found"}}, {"name": "Transfer Without Sharing", "description": "Verify the response when a user tries to transfer ownership without sharing the page first.", "input": {"sharedPage": null, "newOwnerAccount": "newOwner@example.com"}, "expected": {"outcome": "Transfer failed", "status": "Page Not Shared"}}, {"name": "Transfer with Insufficient Permissions", "description": "Verify the response when a user without sufficient permissions attempts to transfer ownership.", "input": {"sharedPage": "ProjectPlan", "newOwnerAccount": "newOwner@example.com"}, "expected": {"outcome": "Transfer failed", "status": "Insufficient Permissions"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}], "GPT4o_testcases": [{"name": "Valid Content Duplication", "description": "Verify that a user can successfully duplicate a block of content.", "input": {"action": "Duplicate", "contentBlock": "Introduction"}, "expected": {"outcome": "Duplication successful", "status": "Content duplicated"}}, {"name": "Valid Content Deletion", "description": "Verify that a user can successfully delete a block of content.", "input": {"action": "Delete", "contentBlock": "Conclusion"}, "expected": {"outcome": "Deletion successful", "status": "Content deleted"}}, {"name": "Duplicate Non-existent Content", "description": "Verify the response when a user attempts to duplicate a non-existent block of content.", "input": {"action": "Duplicate", "contentBlock": "NonExistentBlock"}, "expected": {"outcome": "Duplication failed", "status": "Content not found"}}, {"name": "Delete Non-existent Content", "description": "Verify the response when a user attempts to delete a non-existent block of content.", "input": {"action": "Delete", "contentBlock": "NonExistentBlock"}, "expected": {"outcome": "Deletion failed", "status": "Content not found"}}, {"name": "Duplicate Content Without Selection", "description": "Verify the response when a user tries to duplicate content without selecting any block.", "input": {"action": "Duplicate", "contentBlock": ""}, "expected": {"outcome": "Duplication failed", "status": "No content selected"}}, {"name": "Delete Content Without Selection", "description": "Verify the response when a user tries to delete content without selecting any block.", "input": {"action": "Delete", "contentBlock": ""}, "expected": {"outcome": "Deletion failed", "status": "No content selected"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}], "GPT4o_testcases": [{"name": "Restore Deleted Content", "description": "Verify that a user can successfully restore deleted content from the trash.", "input": {"selectedContent": "Page123", "restorationWindow": "Within 30 days"}, "expected": {"outcome": "Content restored successfully", "status": "Active"}}, {"name": "Restore Content Outside Window", "description": "Verify that the system prevents restoration of content outside the 30-day window.", "input": {"selectedContent": "Page456", "restorationWindow": "Beyond 30 days"}, "expected": {"outcome": "Content restoration failed", "error": "Restoration window expired"}}, {"name": "Invalid Content Selection", "description": "Verify that the system handles the case where the user selects invalid or non-existent content for restoration.", "input": {"selectedContent": "InvalidPage", "restorationWindow": "Within 30 days"}, "expected": {"outcome": "Content restoration failed", "error": "Invalid content selection"}}, {"name": "Restore Multiple Contents", "description": "Verify that a user can restore multiple deleted contents from the trash.", "input": {"selectedContents": ["Page789", "Page101"], "restorationWindow": "Within 30 days"}, "expected": {"outcome": "Contents restored successfully", "status": ["Active", "Active"]}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Valid Content Sync", "description": "Verify that a user can successfully sync content across pages.", "input": {"sourcePageContent": "Project Plan", "destinationPage": "Team Updates"}, "expected": {"outcome": "Sync successful", "status": "Content Synced"}}, {"name": "Sync Without Edit Permissions", "description": "Verify the response when a user tries to sync content without edit permissions.", "input": {"sourcePageContent": "Project Plan", "destinationPage": "Restricted Page"}, "expected": {"outcome": "Sync failed", "status": "Permission Denied"}}, {"name": "Sync to Nonexistent Page", "description": "Verify the response when a user tries to sync content to a nonexistent page.", "input": {"sourcePageContent": "Project Plan", "destinationPage": "Nonexistent Page"}, "expected": {"outcome": "Sync failed", "status": "Page Not Found"}}, {"name": "Sync Empty Content", "description": "Verify the response when a user tries to sync empty content.", "input": {"sourcePageContent": "", "destinationPage": "Team Updates"}, "expected": {"outcome": "Sync failed", "status": "No Content"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Valid Unsync Operation", "description": "Verify that a user can successfully unsync a synced block.", "input": {"selectedBlock": "Chapter1Summary"}, "expected": {"outcome": "Unsync successful", "status": "Independent"}}, {"name": "Unsync Non-existent Block", "description": "Verify the response when a user attempts to unsync a block that does not exist.", "input": {"selectedBlock": "NonExistentBlock"}, "expected": {"outcome": "Unsync failed", "status": "Error"}}, {"name": "Unsync Already Unsynced Block", "description": "Verify the response when a user attempts to unsync a block that is already unsynced.", "input": {"selectedBlock": "AlreadyUnsyncedBlock"}, "expected": {"outcome": "Unsync failed", "status": "No Change"}}, {"name": "Unsync Without Selection", "description": "Verify the response when a user attempts to unsync without selecting any block.", "input": {"selectedBlock": ""}, "expected": {"outcome": "Unsync failed", "status": "No Selection"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}], "GPT4o_testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block with valid code.", "input": {"code": "console.log('Hello, World!');", "language": "JavaScript"}, "expected": {"outcome": "Code block created", "status": "Success"}}, {"name": "Empty Code Block", "description": "Verify that the system handles the case where a user tries to create a code block without any code.", "input": {"code": "", "language": "JavaScript"}, "expected": {"outcome": "Invalid code block", "status": "Rejected"}}, {"name": "Unsupported Language", "description": "Verify that the system handles unsupported programming languages gracefully.", "input": {"code": "print('Hello, World!')", "language": "UnknownLang"}, "expected": {"outcome": "Unsupported language", "status": "Rejected"}}, {"name": "Edit Code Block", "description": "Verify that a user can edit an existing code block and save changes.", "input": {"original_code": "console.log('Hello');", "edited_code": "console.log('Hello, World!');", "language": "JavaScript"}, "expected": {"outcome": "Code block edited", "status": "Success"}}, {"name": "Invalid Code Syntax", "description": "Verify that the system identifies syntax errors in the code block.", "input": {"code": "console.log('Hello, World!'", "language": "JavaScript"}, "expected": {"outcome": "Syntax error detected", "status": "Warning"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}], "GPT4o_testcases": [{"name": "Create Inline Math Equation", "description": "Verify that a user can create an inline math equation using LaTeX syntax.", "input": {"equation": "$$E=mc^2$$"}, "expected": {"outcome": "Equation displayed correctly", "status": "Successful"}}, {"name": "Create Block Math Equation", "description": "Verify that a user can create a block math equation using LaTeX syntax.", "input": {"equation": "/math \\int_0^\\infty e^{-x} dx"}, "expected": {"outcome": "Equation displayed correctly", "status": "Successful"}}, {"name": "Invalid LaTeX Syntax", "description": "Verify that the system handles invalid LaTeX syntax gracefully.", "input": {"equation": "$$E=mc^2"}, "expected": {"outcome": "Error message displayed", "status": "Error"}}, {"name": "Empty Equation Input", "description": "Verify that the system handles empty equation input.", "input": {"equation": ""}, "expected": {"outcome": "No equation displayed", "status": "No Action"}}, {"name": "Complex Equation Formatting", "description": "Verify that a user can create and display a complex equation using LaTeX syntax.", "input": {"equation": "/math \\frac{a}{b} + \\sqrt{c^2 + d^2}"}, "expected": {"outcome": "Equation displayed correctly", "status": "Successful"}}, {"name": "Equation with Special Characters", "description": "Verify that the system can process equations with special LaTeX characters.", "input": {"equation": "$$\\alpha + \\beta = \\gamma$$"}, "expected": {"outcome": "Equation displayed correctly", "status": "Successful"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}], "GPT4o_testcases": [{"name": "Valid Database Creation", "description": "User creates a valid database with all required fields", "input": {"database": {"type": "table", "name": "Project Tracker", "properties": {"Status": "Select", "Due Date": "Date", "Priority": "Select"}}, "cookies": {"token": "validUserToken123"}}, "expected": {"outcome": "Database is created successfully", "status": "Approved"}}, {"name": "Valid Database Creation - Different Type", "description": "User creates a valid database of type board", "input": {"database": {"type": "board", "name": "Task Board", "properties": {"Assignee": "Person", "Deadline": "Date"}}, "cookies": {"token": "validUserToken123"}}, "expected": {"outcome": "Database is created successfully", "status": "Approved"}}, {"name": "Invalid Database Creation - Missing Name", "description": "User attempts to create a database without a name", "input": {"database": {"type": "list", "properties": {"Category": "Select", "Owner": "Person"}}, "cookies": {"token": "validUserToken123"}}, "expected": {"outcome": "Database is not created - Missing name", "status": "Rejected"}}, {"name": "Invalid Database Creation - No Permissions", "description": "User attempts to create a database without proper permissions", "input": {"database": {"type": "table", "name": "Unauthorized Database", "properties": {"Budget": "Number", "Deadline": "Date"}}, "cookies": {"token": "invalidUserToken456"}}, "expected": {"outcome": "Database is not created - No permissions", "status": "Rejected"}}, {"name": "Edge Case - Large Number of Properties", "description": "User creates a database with a large number of properties", "input": {"database": {"type": "table", "name": "Complex Database", "properties": {"Property1": "Text", "Property2": "Text", "Property3": "Text", "Property4": "Text", "Property5": "Text", "Property6": "Text", "Property7": "Text", "Property8": "Text", "Property9": "Text", "Property10": "Text"}}, "cookies": {"token": "validUserToken123"}}, "expected": {"outcome": "Database is created successfully", "status": "Approved"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}], "GPT4o_testcases": [{"name": "Successful Navigation to Add a View", "description": "Verify that the user can successfully navigate to add a new view in the database.", "input": {}, "expected": {"outcome": "User is able to access the 'Add a view' option successfully."}}, {"name": "Choose Valid View Type", "description": "Verify that the user can choose a valid view type such as 'Table', 'Board', or 'Calendar'.", "input": {"selectedViewType": "Table"}, "expected": {"outcome": "System allows the user to select the 'Table' view type and displays the corresponding layout."}}, {"name": "Choose Invalid View Type", "description": "Verify that the system handles invalid view type selection gracefully.", "input": {"selectedViewType": "InvalidType"}, "expected": {"outcome": "System displays an error message indicating the view type is not supported."}}, {"name": "Customize View with Filters", "description": "Verify that the user can add filters to the view.", "input": {"filters": ["Status: Completed"]}, "expected": {"outcome": "System applies the filter and displays only the entries with 'Status: Completed'."}}, {"name": "Customize View with Invalid Filters", "description": "Verify that the system handles invalid filter criteria gracefully.", "input": {"filters": ["InvalidFilter"]}, "expected": {"outcome": "System displays an error message indicating the filter criteria is invalid."}}, {"name": "Save Customized View", "description": "Verify that the user can save the customized view for future use.", "input": {}, "expected": {"outcome": "System saves the customized view successfully and it is available for future access."}}, {"name": "Save View Without Customization", "description": "Verify that the user can save a view without any customization.", "input": {}, "expected": {"outcome": "System saves the default view successfully."}}, {"name": "Save View Without Permissions", "description": "Verify that the system prevents saving a view when the user lacks editing permissions.", "input": {}, "expected": {"outcome": "System displays an error message indicating insufficient permissions to save the view."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{}
{"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}], "GPT4o_testcases": [{"name": "Valid Collaboration", "description": "Verify that a user can successfully collaborate in a shared database with edit permissions.", "input": {"database_id": "db001", "permissions": "Can edit content"}, "expected": {"outcome": "Collaboration successful", "status": "Changes saved", "notification": "Notification sent to all team members"}}, {"name": "Invalid Permissions", "description": "Verify that a user cannot collaborate in a shared database without appropriate permissions.", "input": {"database_id": "db002", "permissions": "Read-only"}, "expected": {"outcome": "Collaboration failed", "status": "No changes saved", "error": "Insufficient permissions"}}, {"name": "Edge Case: Large Number of Edits", "description": "Verify system performance when a large number of edits are made in a short time.", "input": {"database_id": "db003", "edit_count": 1000}, "expected": {"outcome": "Collaboration successful", "status": "All changes saved", "performance": "Acceptable response time"}}, {"name": "Negative Case: Invalid Database ID", "description": "Verify that the system handles an invalid database ID gracefully.", "input": {"database_id": "invalid_db"}, "expected": {"outcome": "Collaboration failed", "status": "No changes saved", "error": "Database not found"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Database Lock", "description": "User locks the database to prevent structure changes.", "input": {"action": "lock"}, "expected": {"outcome": "Database locked", "status": "Success"}}, {"name": "Database Unlock", "description": "User unlocks the database to allow structure changes.", "input": {"action": "unlock"}, "expected": {"outcome": "Database unlocked", "status": "Success"}}, {"name": "Invalid Action", "description": "User attempts an invalid action on the database.", "input": {"action": "invalid_action"}, "expected": {"outcome": "Error: Invalid action", "status": "Failure"}}, {"name": "Unauthorized Lock Attempt", "description": "Non-admin user attempts to lock the database.", "input": {"action": "lock", "userRole": "non-admin"}, "expected": {"outcome": "Error: Unauthorized access", "status": "Failure"}}, {"name": "Unauthorized Unlock Attempt", "description": "Non-admin user attempts to unlock the database.", "input": {"action": "unlock", "userRole": "non-admin"}, "expected": {"outcome": "Error: Unauthorized access", "status": "Failure"}}, {"name": "Lock Without Confirmation", "description": "User attempts to lock the database without confirming the action.", "input": {"action": "lock", "confirm": false}, "expected": {"outcome": "Action not confirmed", "status": "Failure"}}, {"name": "Unlock Without Confirmation", "description": "User attempts to unlock the database without confirming the action.", "input": {"action": "unlock", "confirm": false}, "expected": {"outcome": "Action not confirmed", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Valid Database Change Request", "description": "User attempts to change content in a locked database with valid permissions", "input": {"params": {"action": "edit_content"}, "permissions": {"edit_content": true, "edit_structure": false}}, "expected": {"outcome": "Content edited successfully", "status": "Approved"}}, {"name": "Invalid Database Change Request - Structure Edit", "description": "User attempts to change structure in a locked database without permissions", "input": {"params": {"action": "edit_structure"}, "permissions": {"edit_content": true, "edit_structure": false}}, "expected": {"outcome": "Structure change denied", "access": "Denied"}}, {"name": "Invalid Database Change Request - No Permissions", "description": "User attempts to change content in a locked database without any permissions", "input": {"params": {"action": "edit_content"}, "permissions": {"edit_content": false, "edit_structure": false}}, "expected": {"outcome": "Content change denied", "access": "Denied"}}, {"name": "Edge Case - Invalid Action", "description": "User attempts an undefined action on a locked database", "input": {"params": {"action": "undefined_action"}, "permissions": {"edit_content": true, "edit_structure": false}}, "expected": {"outcome": "Action not recognized", "access": "Denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Add Valid Property", "description": "User adds a valid property to the database", "input": {"property info": ["location: New York", "price: 1,000,000", "type: apartment", "contact: 0123456789", "email: valid@example.com"]}, "expected": {"outcome": "Property successfully added to the database", "status": "Success"}}, {"name": "Add Invalid Property", "description": "User attempts to add a property with missing details", "input": {"property info": ["location: ", "price: 500,000", "type: house", "contact: ", "email: invalid@example"]}, "expected": {"outcome": "Property not added due to missing location and invalid contact", "status": "Failed"}}, {"name": "Edit Existing Property", "description": "User edits an existing property in the database", "input": {"property id": "12345", "new property info": ["price: 1,200,000", "contact: 0987654321"]}, "expected": {"outcome": "Property details updated successfully", "status": "Success"}}, {"name": "Delete Property", "description": "User deletes a property from the database", "input": {"property id": "12345"}, "expected": {"outcome": "Property successfully deleted from the database", "status": "Success"}}, {"name": "Delete Non-existent Property", "description": "User attempts to delete a property that does not exist", "input": {"property id": "99999"}, "expected": {"outcome": "Property not found, deletion failed", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid Property Entry", "description": "User enters valid values for all property types and the system accepts the input.", "input": {"property_values": {"location": "New York", "price": "750,000", "beds": "3", "baths": "2", "perks": "gym, pool"}}, "expected": {"outcome": "Input accepted", "status": "Success"}}, {"name": "Invalid Price Entry", "description": "User enters an invalid price value and the system rejects the input.", "input": {"property_values": {"location": "New York", "price": "abc", "beds": "3", "baths": "2", "perks": "gym, pool"}}, "expected": {"outcome": "Input rejected", "status": "Failed"}}, {"name": "Empty Location Entry", "description": "User leaves the location field empty and the system rejects the input.", "input": {"property_values": {"location": "", "price": "750,000", "beds": "3", "baths": "2", "perks": "gym, pool"}}, "expected": {"outcome": "Input rejected", "status": "Failed"}}, {"name": "Negative Beds Entry", "description": "User enters a negative number for beds and the system rejects the input.", "input": {"property_values": {"location": "New York", "price": "750,000", "beds": "-1", "baths": "2", "perks": "gym, pool"}}, "expected": {"outcome": "Input rejected", "status": "Failed"}}, {"name": "Valid Empty Perks Entry", "description": "User leaves the perks field empty and the system accepts the input.", "input": {"property_values": {"location": "New York", "price": "750,000", "beds": "3", "baths": "2", "perks": ""}}, "expected": {"outcome": "Input accepted", "status": "Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Navigate to Database Settings", "description": "Verify that a user can navigate to the database settings.", "input": {}, "expected": {"outcome": "Database settings are accessible", "status": "Successful"}}, {"name": "Add Relation Property", "description": "Verify that a user can add a new 'Relation' property to a database.", "input": {"databaseName": "Projects"}, "expected": {"outcome": "Relation property added successfully", "status": "Successful"}}, {"name": "Select Target Database", "description": "Verify that a user can select a target database to link.", "input": {"sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": "Target database selected successfully", "status": "Successful"}}, {"name": "Configure and Save Relation Settings", "description": "Verify that a user can configure relation settings and save them.", "input": {"relationSettings": {"allowMultiple": true}}, "expected": {"outcome": "Relation settings configured and saved", "status": "Successful"}}, {"name": "Add Relation Property Without Permissions", "description": "Verify that a user cannot add a 'Relation' property without proper permissions.", "input": {"databaseName": "Projects"}, "expected": {"outcome": "Permission denied", "status": "Failed"}}, {"name": "Select Non-Existent Target Database", "description": "Verify that selecting a non-existent target database results in an error.", "input": {"sourceDatabase": "Projects", "targetDatabase": "NonExistentDB"}, "expected": {"outcome": "Error: Target database not found", "status": "Failed"}}, {"name": "Add Relation Property to Non-Existent Database", "description": "Verify that adding a relation property to a non-existent database results in an error.", "input": {"databaseName": "NonExistentDB"}, "expected": {"outcome": "Error: Database not found", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Create Rollup with Valid Data", "description": "User creates a rollup with valid related properties and calculation method", "input": {"related_property": "Sales Data", "calculation_method": "Sum"}, "expected": {"outcome": "Rollup property created successfully", "status": "Success"}}, {"name": "Create Rollup with Invalid Property", "description": "User attempts to create a rollup with an invalid related property", "input": {"related_property": "Invalid Data", "calculation_method": "Sum"}, "expected": {"outcome": "Error message displayed: 'Invalid related property'", "status": "Failed"}}, {"name": "Create Rollup with Invalid Calculation Method", "description": "User attempts to create a rollup with an invalid calculation method", "input": {"related_property": "Sales Data", "calculation_method": "Invalid Method"}, "expected": {"outcome": "Error message displayed: 'Invalid calculation method'", "status": "Failed"}}, {"name": "Create Rollup with No Related Property", "description": "User attempts to create a rollup without selecting a related property", "input": {"related_property": "", "calculation_method": "Sum"}, "expected": {"outcome": "Error message displayed: 'Related property is required'", "status": "Failed"}}, {"name": "Create Rollup with No Calculation Method", "description": "User attempts to create a rollup without selecting a calculation method", "input": {"related_property": "Sales Data", "calculation_method": ""}, "expected": {"outcome": "Error message displayed: 'Calculation method is required'", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Empty Rollup Value", "description": "Verify the system's response when a user attempts to create a rollup with an empty value.", "input": {"rollup_value": ""}, "expected": {"outcome": "Rollup creation failed", "status": "Error"}}, {"name": "Invalid Data Type for Rollup", "description": "Check if the system handles invalid data types for rollup properties.", "input": {"rollup_value": {"invalid": "data type"}}, "expected": {"outcome": "Invalid data type error", "status": "Error"}}, {"name": "Valid Rollup Creation", "description": "Ensure that a rollup is successfully created with valid data.", "input": {"rollup_value": "Valid Data"}, "expected": {"outcome": "Rollup created successfully", "status": "Success"}}, {"name": "Inconsistent Data in Related Databases", "description": "Test the system's behavior when related databases contain inconsistent data.", "input": {"related_database_data": "Inconsistent"}, "expected": {"outcome": "Rollup creation failed due to inconsistency", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Add a New View", "description": "Verify that a user can add a new view to the database.", "input": {"viewType": "Table"}, "expected": {"outcome": "View added successfully", "status": "Successful"}}, {"name": "Customize View Settings", "description": "Verify that a user can customize view settings such as properties, filters, and sorts.", "input": {"viewType": "Table", "properties": ["Name", "Date"], "filters": ["Date > 2023-01-01"], "sorts": ["Name ASC"]}, "expected": {"outcome": "View customized successfully", "status": "Successful"}}, {"name": "Switch Between Views", "description": "Verify that a user can switch between different views using the dropdown menu.", "input": {"currentView": "Table", "targetView": "Calendar"}, "expected": {"outcome": "View switched successfully", "status": "Successful"}}, {"name": "Add View Without Permissions", "description": "Verify that a user cannot add a new view without the necessary permissions.", "input": {"viewType": "Board"}, "expected": {"outcome": "Permission denied", "status": "Failed"}}, {"name": "Invalid View Type", "description": "Verify that an error is shown when a user tries to add an invalid view type.", "input": {"viewType": "InvalidType"}, "expected": {"outcome": "Invalid view type error", "status": "Failed"}}, {"name": "Customize View with Invalid Filter", "description": "Verify that an error is shown when a user applies an invalid filter.", "input": {"viewType": "Table", "filters": ["InvalidFilter"]}, "expected": {"outcome": "Invalid filter error", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Navigation to Database Filter", "description": "Verify that the user can successfully navigate to the database and access the filter option.", "input": {}, "expected": {"outcome": "Filter option is accessible and ready for configuration."}}, {"name": "Apply Single Filter Criteria", "description": "Verify that the user can apply a single filter criteria to the database.", "input": {"property": "Status", "criteria": "Completed"}, "expected": {"outcome": "Database view is updated to show only entries with 'Status' as 'Completed'."}}, {"name": "Apply Multiple Filters with AND Logic", "description": "Verify that the user can apply multiple filters using 'AND' logic.", "input": {"filters": [{"property": "Status", "criteria": "Completed"}, {"property": "Priority", "criteria": "High"}], "logic": "AND"}, "expected": {"outcome": "Database view is updated to show entries with 'Status' as 'Completed' and 'Priority' as 'High'."}}, {"name": "Apply Multiple Filters with OR Logic", "description": "Verify that the user can apply multiple filters using 'OR' logic.", "input": {"filters": [{"property": "Status", "criteria": "Completed"}, {"property": "Priority", "criteria": "High"}], "logic": "OR"}, "expected": {"outcome": "Database view is updated to show entries with either 'Status' as 'Completed' or 'Priority' as 'High'."}}, {"name": "Invalid Filter Criteria", "description": "Verify the system's response to an invalid filter criteria.", "input": {"property": "Status", "criteria": "NonExistentStatus"}, "expected": {"outcome": "System displays an error message indicating invalid filter criteria."}}, {"name": "Save Filter Configuration", "description": "Verify that the user can save the filter configuration successfully.", "input": {"filters": [{"property": "Status", "criteria": "Completed"}]}, "expected": {"outcome": "Filter configuration is saved and persists on subsequent database views."}}, {"name": "Unauthorized Filter Modification", "description": "Verify the system's response when a user without permissions attempts to modify filters.", "input": {"userPermissions": "ReadOnly", "action": "ModifyFilter"}, "expected": {"outcome": "System prevents modification and displays a permission error message."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Sort Items by Name Ascending", "description": "Verify that the user can sort database items by name in ascending order.", "input": {"property": "Name", "order": "Ascending"}, "expected": {"outcome": "Items are sorted by name in ascending order."}}, {"name": "Sort Items by Date Descending", "description": "Verify that the user can sort database items by date in descending order.", "input": {"property": "Date", "order": "Descending"}, "expected": {"outcome": "Items are sorted by date in descending order."}}, {"name": "Sort Items with Invalid Property", "description": "Verify that sorting with an invalid property shows an error.", "input": {"property": "InvalidProperty", "order": "Ascending"}, "expected": {"outcome": "Error message is displayed indicating invalid property."}}, {"name": "Sort Items with No Permission", "description": "Verify that a user without permission cannot sort items.", "input": {"property": "Name", "order": "Ascending"}, "expected": {"outcome": "Error message is displayed indicating lack of permissions."}}, {"name": "Sort Items with Multiple Properties", "description": "Verify that the user can sort items using multiple properties.", "input": {"properties": [{"property": "Category", "order": "Ascending"}, {"property": "Price", "order": "Descending"}]}, "expected": {"outcome": "Items are sorted by category in ascending order and then by price in descending order."}}, {"name": "Sort Items with Empty Database", "description": "Verify sorting behavior when the database is empty.", "input": {"property": "Name", "order": "Ascending"}, "expected": {"outcome": "No items to sort, database remains empty."}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid Grouping by Property", "description": "Verify that items are grouped successfully by a valid property", "input": {"property": "Status", "order": "Ascending"}, "expected": {"outcome": "Items are grouped successfully", "status": "Grouped"}}, {"name": "Invalid Grouping by Non-existent Property", "description": "Verify that grouping fails when a non-existent property is selected", "input": {"property": "NonExistentProperty", "order": "Ascending"}, "expected": {"outcome": "Grouping failed", "status": "Failed"}}, {"name": "Grouping with No Permission", "description": "Verify that grouping fails when the user lacks permissions", "input": {"property": "Status", "order": "Ascending"}, "expected": {"outcome": "Grouping failed due to lack of permissions", "status": "Failed"}}, {"name": "Valid Grouping with Custom Order", "description": "Verify that items are grouped successfully with a custom order", "input": {"property": "Priority", "order": "Custom"}, "expected": {"outcome": "Items are grouped successfully", "status": "Grouped"}}, {"name": "Grouping with Empty Property", "description": "Verify that grouping fails when an empty property is selected", "input": {"property": "", "order": "Ascending"}, "expected": {"outcome": "Grouping failed", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Search with Valid Keywords", "description": "User searches the database using valid keywords.", "input": {"keywords": "Project Plan"}, "expected": {"outcome": "Relevant search results displayed", "status": "Success"}}, {"name": "Search with Invalid Keywords", "description": "User searches the database using invalid or non-existent keywords.", "input": {"keywords": "NonExistentItem123"}, "expected": {"outcome": "No results found", "status": "Success"}}, {"name": "Search with Empty Keywords", "description": "User attempts to search the database with an empty keyword field.", "input": {"keywords": ""}, "expected": {"outcome": "Prompt to enter keywords", "status": "Failure"}}, {"name": "Search with Special Characters", "description": "User searches the database using special characters.", "input": {"keywords": "@#$%^&*"}, "expected": {"outcome": "No results found", "status": "Success"}}, {"name": "Search without Permissions", "description": "User attempts to search the database without having the necessary permissions.", "input": {"keywords": "Project Plan"}, "expected": {"outcome": "Access denied", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Navigate to Table View", "description": "Verify that a user can navigate to the database table view.", "input": {}, "expected": {"outcome": "Table view displayed", "status": "Successful"}}, {"name": "Add Row to Table", "description": "Verify that a user can add a new row to the table.", "input": {"rowData": {"column1": "Value1", "column2": "Value2"}}, "expected": {"outcome": "Row added successfully", "status": "Created"}}, {"name": "Edit Row in Table", "description": "Verify that a user can edit an existing row in the table.", "input": {"rowId": 1, "rowData": {"column1": "UpdatedValue1"}}, "expected": {"outcome": "Row edited successfully", "status": "Edited"}}, {"name": "Delete Row from Table", "description": "Verify that a user can delete a row from the table.", "input": {"rowId": 1}, "expected": {"outcome": "Row deleted successfully", "status": "Deleted"}}, {"name": "Add Column to Table", "description": "Verify that a user can add a new column to the table.", "input": {"columnName": "NewColumn"}, "expected": {"outcome": "Column added successfully", "status": "Created"}}, {"name": "Edit Column in Table", "description": "Verify that a user can edit an existing column in the table.", "input": {"columnName": "ExistingColumn", "newColumnName": "UpdatedColumn"}, "expected": {"outcome": "Column edited successfully", "status": "Edited"}}, {"name": "Delete Column from Table", "description": "Verify that a user can delete a column from the table.", "input": {"columnName": "ColumnToDelete"}, "expected": {"outcome": "Column deleted successfully", "status": "Deleted"}}, {"name": "Add Row with Invalid Data", "description": "Verify that adding a row with invalid data is handled properly.", "input": {"rowData": {"column1": "", "column2": "Value2"}}, "expected": {"outcome": "Error: Invalid data", "status": "Failed"}}, {"name": "Delete Non-existent Row", "description": "Verify that attempting to delete a non-existent row is handled properly.", "input": {"rowId": 999}, "expected": {"outcome": "Error: Row not found", "status": "Failed"}}, {"name": "Edit Non-existent Column", "description": "Verify that attempting to edit a non-existent column is handled properly.", "input": {"columnName": "NonExistentColumn", "newColumnName": "UpdatedColumn"}, "expected": {"outcome": "Error: Column not found", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid List Item Addition", "description": "Verify that a user can successfully add a valid item to the list view.", "input": {"item_name": "New Note", "item_content": "This is a new note content."}, "expected": {"outcome": "Item added successfully", "status": "Success"}}, {"name": "Empty List Item Addition", "description": "Verify that the system handles the case where a user tries to add an empty item to the list view.", "input": {"item_name": "", "item_content": ""}, "expected": {"outcome": "Invalid item details", "status": "Rejected"}}, {"name": "Edit Existing List Item", "description": "Verify that a user can successfully edit an existing item in the list view.", "input": {"item_id": 1, "new_item_name": "Updated Note", "new_item_content": "This is updated note content."}, "expected": {"outcome": "Item updated successfully", "status": "Success"}}, {"name": "Delete List Item", "description": "Verify that a user can successfully delete an item from the list view.", "input": {"item_id": 1}, "expected": {"outcome": "Item deleted successfully", "status": "Success"}}, {"name": "Delete Non-existent List Item", "description": "Verify that the system handles the case where a user tries to delete a non-existent item.", "input": {"item_id": 999}, "expected": {"outcome": "Item not found", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Workflow Visualization", "description": "Verify that a user can successfully visualize and modify workflows in the board view.", "input": {"action": "move_item", "item_id": 101, "from_column": "To Do", "to_column": "In Progress"}, "expected": {"outcome": "Workflow visualization successful", "status": "Modified", "response": {"item_id": 101, "current_column": "In Progress"}}}, {"name": "Unauthorized Workflow Modification", "description": "Verify that the system restricts users without permissions from modifying the board view.", "input": {"action": "move_item", "item_id": 102, "from_column": "In Progress", "to_column": "Done"}, "expected": {"outcome": "Modification failed", "status": "Unauthorized", "error": "User does not have permission to modify the board view"}}, {"name": "Invalid Item Movement", "description": "Verify that the system handles attempts to move non-existent items.", "input": {"action": "move_item", "item_id": 999, "from_column": "To Do", "to_column": "In Progress"}, "expected": {"outcome": "Modification failed", "status": "Error", "error": "Item not found"}}, {"name": "No Changes in Workflow", "description": "Verify that the system handles cases where no changes are made to the workflow.", "input": {"action": "view_board"}, "expected": {"outcome": "No changes detected", "status": "Viewed", "response": "Board view displayed with no modifications"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}], "GPT4o_testcases": [{"name": "Valid Event Addition", "description": "User adds a new event to the calendar", "input": {"permissions": true, "eventDetails": {"title": "Meeting", "date": "2023-11-15", "time": "10:00 AM"}}, "expected": {"outcome": "Event is successfully added to the calendar", "access": "Approved"}}, {"name": "Edit Existing Event", "description": "User edits an existing event in the calendar", "input": {"permissions": true, "eventId": "12345", "newEventDetails": {"title": "Updated Meeting", "date": "2023-11-15", "time": "11:00 AM"}}, "expected": {"outcome": "Event details are successfully updated", "access": "Approved"}}, {"name": "Delete Event", "description": "User deletes an event from the calendar", "input": {"permissions": true, "eventId": "12345"}, "expected": {"outcome": "Event is successfully deleted from the calendar", "access": "Approved"}}, {"name": "Add Event Without Permission", "description": "User tries to add an event without permissions", "input": {"permissions": false, "eventDetails": {"title": "Unauthorized Meeting", "date": "2023-11-16", "time": "2:00 PM"}}, "expected": {"outcome": "User is not allowed to add events", "access": "Denied"}}, {"name": "Edit Event Without Permission", "description": "User tries to edit an event without permissions", "input": {"permissions": false, "eventId": "12345", "newEventDetails": {"title": "Unauthorized Update", "date": "2023-11-16", "time": "3:00 PM"}}, "expected": {"outcome": "User is not allowed to edit events", "access": "Denied"}}, {"name": "Delete Event Without Permission", "description": "User tries to delete an event without permissions", "input": {"permissions": false, "eventId": "12345"}, "expected": {"outcome": "User is not allowed to delete events", "access": "Denied"}}, {"name": "Add Event with Invalid Date", "description": "User tries to add an event with an invalid date format", "input": {"permissions": true, "eventDetails": {"title": "Invalid Date Meeting", "date": "15-11-2023", "time": "10:00 AM"}}, "expected": {"outcome": "Event is not added due to invalid date format", "access": "Denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}], "GPT4o_testcases": [{"name": "Unique ID Format Configuration", "description": "User configures a valid unique ID format for new items.", "input": {"idFormat": "UUID"}, "expected": {"outcome": "Unique ID format set successfully", "status": "Success"}}, {"name": "Unique ID Format Configuration - Invalid Format", "description": "User attempts to configure an invalid unique ID format.", "input": {"idFormat": "12345"}, "expected": {"outcome": "Error: Invalid ID format", "status": "Failure"}}, {"name": "Unique ID Format Update", "description": "User updates the unique ID format to a new valid format.", "input": {"idFormat": "Custom-Format-123"}, "expected": {"outcome": "Unique ID format updated successfully", "status": "Success"}}, {"name": "Unique ID Format Update - No Permission", "description": "User without permission attempts to update the unique ID format.", "input": {"idFormat": "UUID"}, "expected": {"outcome": "Error: Insufficient permissions", "status": "Failure"}}, {"name": "Unique ID Format Configuration - Empty Format", "description": "User attempts to configure an empty unique ID format.", "input": {"idFormat": ""}, "expected": {"outcome": "Error: ID format cannot be empty", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Create Teamspace Successfully", "description": "Verify that a user can successfully create a new teamspace and invite members.", "input": {"teamspaceName": "Project Alpha", "teamspaceIcon": "\ud83d\ude80", "invitedEmails": ["member1@example.com", "member2@example.com"]}, "expected": {"outcome": "Teamspace created", "status": "Success"}}, {"name": "Create Teamspace Without Icon", "description": "Verify that a user can create a teamspace without providing an icon.", "input": {"teamspaceName": "Project Beta", "teamspaceIcon": "", "invitedEmails": ["member3@example.com"]}, "expected": {"outcome": "Teamspace created", "status": "Success"}}, {"name": "Create Teamspace With Invalid Email", "description": "Verify that creating a teamspace with an invalid email address fails.", "input": {"teamspaceName": "Project Gamma", "teamspaceIcon": "\ud83c\udf1f", "invitedEmails": ["invalid-email"]}, "expected": {"outcome": "Invalid email error", "status": "Failure"}}, {"name": "Create Teamspace Without Name", "description": "Verify that creating a teamspace without a name fails.", "input": {"teamspaceName": "", "teamspaceIcon": "\ud83d\udcc1", "invitedEmails": ["member4@example.com"]}, "expected": {"outcome": "Missing name error", "status": "Failure"}}, {"name": "Create Teamspace With Duplicate Emails", "description": "Verify that creating a teamspace with duplicate emails is handled correctly.", "input": {"teamspaceName": "Project Delta", "teamspaceIcon": "\ud83d\udd27", "invitedEmails": ["member5@example.com", "member5@example.com"]}, "expected": {"outcome": "Duplicate email warning", "status": "Success with warnings"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Valid Permission Change by Owner", "description": "Verify that a teamspace owner can change the permission level of a member.", "input": {"teamspaceId": "Teamspace id", "ownerId": "Owner user id", "memberId": "Member user id", "newPermission": "Full Access"}, "expected": {"outcome": "Successfully changed permission level", "status": "Success"}}, {"name": "Invalid Permission Change by Member", "description": "Verify that a teamspace member cannot change the permission level of an owner.", "input": {"teamspaceId": "Teamspace id", "memberId": "Member user id", "ownerId": "Owner user id", "newPermission": "Can View"}, "expected": {"outcome": "Not authorized to change permission level", "status": "Unauthorized"}}, {"name": "Upgrade Member to Owner", "description": "Verify that a teamspace owner can upgrade a member to owner.", "input": {"teamspaceId": "Teamspace id", "ownerId": "Owner user id", "memberId": "Member user id"}, "expected": {"outcome": "Successfully upgraded member to owner", "status": "Success"}}, {"name": "Downgrade Owner to Member", "description": "Verify that a teamspace owner can downgrade another owner to member.", "input": {"teamspaceId": "Teamspace id", "ownerId": "Owner user id", "targetOwnerId": "Target owner user id"}, "expected": {"outcome": "Successfully downgraded owner to member", "status": "Success"}}, {"name": "Invalid Permission Level", "description": "Verify that an invalid permission level cannot be set by a teamspace owner.", "input": {"teamspaceId": "Teamspace id", "ownerId": "Owner user id", "memberId": "Member user id", "newPermission": "Invalid Permission"}, "expected": {"outcome": "Invalid permission level", "status": "Error"}}, {"name": "Permission Change by Non-Existent User", "description": "Verify that a non-existent user cannot change permission levels.", "input": {"teamspaceId": "Teamspace id", "userId": "Non-existent user id", "targetUserId": "Target user id", "newPermission": "Can Edit"}, "expected": {"outcome": "User not found", "status": "Error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Share Page with Valid Members", "description": "Verify that a user can share a page with valid members and set appropriate permissions.", "input": {"page_id": "12345", "members": ["member1@example.com", "member2@example.com"], "permissions": ["read", "write"]}, "expected": {"outcome": "Page shared successfully", "status": "Success"}}, {"name": "Share Page with Valid Group", "description": "Verify that a user can share a page with a valid group and set appropriate permissions.", "input": {"page_id": "12345", "groups": ["group1"], "permissions": ["read"]}, "expected": {"outcome": "Page shared successfully", "status": "Success"}}, {"name": "Share Page with Invalid Member", "description": "Verify that the system denies sharing a page with an invalid member.", "input": {"page_id": "12345", "members": ["invalidmember@example.com"], "permissions": ["read"]}, "expected": {"outcome": "Share failed", "status": "Error"}}, {"name": "Share Page with Invalid Group", "description": "Verify that the system denies sharing a page with an invalid group.", "input": {"page_id": "12345", "groups": ["invalidgroup"], "permissions": ["write"]}, "expected": {"outcome": "Share failed", "status": "Error"}}, {"name": "Share Page with No Permissions", "description": "Verify that the system handles sharing a page without specifying permissions.", "input": {"page_id": "12345", "members": ["member1@example.com"], "permissions": []}, "expected": {"outcome": "Share failed", "status": "Error"}}, {"name": "Share Page with Mixed Valid and Invalid Members", "description": "Verify that the system handles sharing a page with a mix of valid and invalid members.", "input": {"page_id": "12345", "members": ["member1@example.com", "invalidmember@example.com"], "permissions": ["read", "write"]}, "expected": {"outcome": "Share partially successful", "status": "Partial Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}], "GPT4o_testcases": [{"name": "Publish with Random Domain", "description": "Verify that a user can publish a page with a randomly generated domain.", "input": {"subscription_plan": "Basic", "domain_choice": "random", "seo_settings": "default", "link_expiration": "none"}, "expected": {"outcome": "Page published successfully with random domain", "status": "Success"}}, {"name": "Publish with Custom Domain", "description": "Verify that a user with Plus subscription can publish a page with a custom domain.", "input": {"subscription_plan": "Plus", "domain_choice": "custom", "custom_domain": "mycustomdomain.com", "seo_settings": "optimized", "link_expiration": "none"}, "expected": {"outcome": "Page published successfully with custom domain", "status": "Success"}}, {"name": "Publish with Invalid Domain", "description": "Verify that publishing fails when an invalid custom domain is provided.", "input": {"subscription_plan": "Plus", "domain_choice": "custom", "custom_domain": "invalid_domain", "seo_settings": "optimized", "link_expiration": "none"}, "expected": {"outcome": "Domain validation failed", "status": "Failure"}}, {"name": "Publish without SEO Settings", "description": "Verify that a user can publish a page without setting SEO preferences.", "input": {"subscription_plan": "Basic", "domain_choice": "random", "seo_settings": "none", "link_expiration": "none"}, "expected": {"outcome": "Page published successfully without SEO settings", "status": "Success"}}, {"name": "Publish with Link Expiration", "description": "Verify that a user can set link expiration when publishing a page.", "input": {"subscription_plan": "Plus", "domain_choice": "random", "seo_settings": "default", "link_expiration": "30 days"}, "expected": {"outcome": "Page published successfully with link expiration set", "status": "Success"}}, {"name": "Publish with Invalid Subscription", "description": "Verify that publishing fails when a user without Plus subscription tries to use a custom domain.", "input": {"subscription_plan": "Basic", "domain_choice": "custom", "custom_domain": "mycustomdomain.com", "seo_settings": "default", "link_expiration": "none"}, "expected": {"outcome": "Custom domain not allowed for Basic subscription", "status": "Failure"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "User Edits Content Successfully", "description": "Verify that a user can successfully edit the content of a selected block on a shared page.", "input": {"blockId": "block123", "newContent": "Updated content for the block."}, "expected": {"outcome": "Content edited successfully", "status": "Pending system approval"}}, {"name": "User Edits Content with Invalid Block", "description": "Verify that the system handles an attempt to edit a non-existent block.", "input": {"blockId": "invalidBlock", "newContent": "Attempt to edit non-existent block."}, "expected": {"outcome": "Edit failed", "status": "Block not found"}}, {"name": "User Edits Content with Empty Content", "description": "Verify that the system handles an attempt to edit a block with empty content.", "input": {"blockId": "block123", "newContent": ""}, "expected": {"outcome": "Edit failed", "status": "Content cannot be empty"}}, {"name": "System Approves Edit", "description": "Verify that the system approves the edited content if it meets consistency requirements.", "input": {"systemApproval": true}, "expected": {"outcome": "Edit approved", "status": "Content updated on page"}}, {"name": "System Rejects Edit", "description": "Verify that the system rejects the edited content if it does not meet consistency requirements.", "input": {"systemApproval": false}, "expected": {"outcome": "Edit rejected", "status": "Content not updated"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}], "GPT4o_testcases": [{"name": "Valid Comment Addition", "description": "Verify that a user can successfully add a comment to a page block.", "input": {"userId": "user123", "blockId": "block456", "comment": "This is a very insightful section!"}, "expected": {"outcome": "Comment added successfully", "status": "Commented"}}, {"name": "Invalid Comment Addition", "description": "Verify that the system handles the case where a user tries to add an invalid comment.", "input": {"userId": "user789", "blockId": "block456", "comment": ""}, "expected": {"outcome": "Comment addition failed", "status": "Not Commented"}}, {"name": "Valid Mention in Comment", "description": "Verify that a user can successfully mention another user in a comment.", "input": {"userId": "user456", "blockId": "block789", "comment": "Great point, @user123!"}, "expected": {"outcome": "Comment with mention added successfully", "status": "Commented"}}, {"name": "Invalid Mention in Comment", "description": "Verify that the system handles the case where a user tries to mention a non-existent user.", "input": {"userId": "user456", "blockId": "block789", "comment": "Hello, @nonexistentuser!"}, "expected": {"outcome": "Comment addition failed due to invalid mention", "status": "Not Commented"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}], "GPT4o_testcases": [{"name": "Valid Edit Suggestion", "description": "Verify that a guest user can successfully suggest an edit to a page block.", "input": {"userId": "guest123", "blockId": "block456", "comment": "Please update the statistics to the latest figures."}, "expected": {"outcome": "Edit suggestion submitted successfully", "status": "Pending Review"}}, {"name": "Valid Mention in Suggestion", "description": "Verify that a guest user can mention another user in their edit suggestion.", "input": {"userId": "guest456", "blockId": "block789", "comment": "Consider revising this section, @editorTeam."}, "expected": {"outcome": "Edit suggestion with mention submitted successfully", "status": "Pending Review"}}, {"name": "Invalid Block Selection", "description": "Verify that the system handles the case where a guest user tries to suggest an edit to an invalid block.", "input": {"userId": "guest789", "blockId": "invalidBlock", "comment": "This block does not exist."}, "expected": {"outcome": "Edit suggestion failed", "status": "Error"}}, {"name": "Insufficient Privilege", "description": "Verify that the system prevents a user with insufficient privileges from suggesting an edit.", "input": {"userId": "guest000", "blockId": "block123", "comment": "Please update this outdated information."}, "expected": {"outcome": "Edit suggestion failed due to insufficient privileges", "status": "Access Denied"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}], "GPT4o_testcases": [{"name": "Successful Access to Page Analytics", "description": "Verify that the user can successfully access the page analytics.", "input": {}, "expected": {"outcome": "Analytics page is loaded successfully"}}, {"name": "View Total and Unique Page Views", "description": "Verify that the system displays a graph with total and unique page views.", "input": {}, "expected": {"outcome": "Graph with total and unique page views is displayed"}}, {"name": "Hover for Detailed View Counts", "description": "Verify that the user can hover over specific days to see detailed view counts.", "input": {"hoveredDay": "Specific Day"}, "expected": {"outcome": "Detailed view counts for the specific day are displayed"}}, {"name": "Display Page Creator Information", "description": "Verify that the system shows page creator information.", "input": {}, "expected": {"outcome": "Page creator information is displayed"}}, {"name": "Display Recent Viewer/Editor List", "description": "Verify that the system shows a list of recent viewers and editors.", "input": {}, "expected": {"outcome": "Recent viewer/editor list is displayed"}}, {"name": "Access Analytics Without Privileges", "description": "Verify that a user without Full Access or Can Edit privileges cannot access the analytics.", "input": {"userPrivileges": "Read Only"}, "expected": {"outcome": "Access denied message is displayed"}}, {"name": "Invalid Hover Action", "description": "Verify system behavior when hovering over a non-existent date.", "input": {"hoveredDay": "Non-existent Date"}, "expected": {"outcome": "No detailed view counts are displayed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}], "GPT4o_testcases": [{"name": "Successful Plan Upgrade", "description": "User successfully upgrades their subscription plan", "input": {"plan": "Premium", "payment details": {"card number": "4111111111111111", "expiry date": "12/25", "cvv": "123"}}, "expected": {"outcome": "Plan upgraded successfully", "status": "Success"}}, {"name": "Upgrade Plan with Invalid Card", "description": "User attempts to upgrade plan with an invalid card number", "input": {"plan": "Premium", "payment details": {"card number": "1234567890123456", "expiry date": "12/25", "cvv": "123"}}, "expected": {"outcome": "Payment failed, invalid card number", "status": "Failed"}}, {"name": "Upgrade Plan with Expired Card", "description": "User attempts to upgrade plan with an expired card", "input": {"plan": "Premium", "payment details": {"card number": "4111111111111111", "expiry date": "01/21", "cvv": "123"}}, "expected": {"outcome": "Payment failed, card expired", "status": "Failed"}}, {"name": "Upgrade Plan with Insufficient Funds", "description": "User attempts to upgrade plan with insufficient funds", "input": {"plan": "Premium", "payment details": {"card number": "4111111111111111", "expiry date": "12/25", "cvv": "123"}}, "expected": {"outcome": "Payment failed, insufficient funds", "status": "Failed"}}, {"name": "Upgrade Plan Without Selecting Plan", "description": "User tries to upgrade without selecting a plan", "input": {"plan": "", "payment details": {"card number": "4111111111111111", "expiry date": "12/25", "cvv": "123"}}, "expected": {"outcome": "No plan selected, upgrade not processed", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}], "GPT4o_testcases": [{"name": "Successful Plan Downgrade", "description": "User successfully downgrades their subscription plan", "input": {"current plan": "Premium", "desired plan": "Basic"}, "expected": {"outcome": "Plan downgraded successfully", "status": "Success"}}, {"name": "Downgrade to Same Plan", "description": "User attempts to downgrade to the same plan they are currently on", "input": {"current plan": "Basic", "desired plan": "Basic"}, "expected": {"outcome": "No change in plan, downgrade not processed", "status": "Failed"}}, {"name": "Downgrade with Invalid Plan", "description": "User tries to downgrade to a non-existent plan", "input": {"current plan": "Premium", "desired plan": "NonExistentPlan"}, "expected": {"outcome": "Invalid plan selected, downgrade not processed", "status": "Failed"}}, {"name": "Downgrade Without Confirmation", "description": "User navigates to downgrade but does not confirm", "input": {"current plan": "Premium", "desired plan": "Basic"}, "expected": {"outcome": "Downgrade not confirmed, no changes made", "status": "Failed"}}, {"name": "Downgrade with Network Failure", "description": "User experiences a network failure during the downgrade process", "input": {"current plan": "Premium", "desired plan": "Basic"}, "expected": {"outcome": "Network error, please try again later", "status": "Failed"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}], "GPT4o_testcases": [{"name": "Update Payment Method with Valid Details", "description": "User updates payment method with valid card details", "input": {"payment info": ["card number: 4111111111111111", "expiry date: 12/25", "CVV: 123"]}, "expected": {"outcome": "Payment method updated successfully", "status": "Success"}}, {"name": "Update Payment Method with Invalid Card Number", "description": "User tries to update payment method with an invalid card number", "input": {"payment info": ["card number: 1234567890123456", "expiry date: 12/25", "CVV: 123"]}, "expected": {"outcome": "Invalid card number, payment method not updated", "status": "Failed"}}, {"name": "Update Payment Method with Expired Card", "description": "User tries to update payment method with an expired card", "input": {"payment info": ["card number: 4111111111111111", "expiry date: 01/20", "CVV: 123"]}, "expected": {"outcome": "Card expired, payment method not updated", "status": "Failed"}}, {"name": "Update Payment Method with Missing CVV", "description": "User tries to update payment method without providing CVV", "input": {"payment info": ["card number: 4111111111111111", "expiry date: 12/25", "CVV: "]}, "expected": {"outcome": "CVV required, payment method not updated", "status": "Failed"}}, {"name": "Update Payment Method with Valid Details and Receive Confirmation", "description": "User updates payment method with valid details and receives confirmation", "input": {"payment info": ["card number: 4111111111111111", "expiry date: 12/25", "CVV: 123"]}, "expected": {"outcome": "Payment method updated successfully, confirmation received", "status": "Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Synchronize Tasks Successfully", "description": "Verify that tasks created or updated in the third-party app are successfully synchronized with Notion.", "input": {"thirdPartyTask": {"title": "New Task", "description": "Task description", "dueDate": "2023-10-15"}}, "expected": {"outcome": "Tasks synchronized successfully", "status": "Synchronized"}}, {"name": "Unauthorized Integration Attempt", "description": "Verify that the system restricts task synchronization if the integration is not authorized.", "input": {"thirdPartyTask": {"title": "Unauthorized Task", "description": "Task description", "dueDate": "2023-10-15"}}, "expected": {"outcome": "Task synchronization failed", "status": "UnauthorizedIntegration"}}, {"name": "Invalid Task Data", "description": "Verify that the system handles invalid task data gracefully during synchronization.", "input": {"thirdPartyTask": {"title": "", "description": "Task description", "dueDate": "InvalidDate"}}, "expected": {"outcome": "Task synchronization failed", "status": "InvalidData"}}, {"name": "Partial Synchronization", "description": "Verify that the system can handle partial synchronization when some tasks are valid and others are not.", "input": {"thirdPartyTasks": [{"title": "Valid Task", "description": "Valid task description", "dueDate": "2023-10-15"}, {"title": "", "description": "Invalid task description", "dueDate": "InvalidDate"}]}, "expected": {"outcome": "Partial synchronization completed", "status": "PartialSuccess"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}], "GPT4o_testcases": [{"name": "Customer Data Sync", "description": "Sales rep updates customer data in CRM and it syncs to Notion.", "input": {"customerName": "John Doe", "email": "john.doe@example.com", "phone": "1234567890"}, "expected": {"outcome": "Customer data updated in Notion", "status": "Success"}}, {"name": "Invalid Email Format", "description": "Sales rep enters an invalid email format in CRM.", "input": {"customerName": "Jane Smith", "email": "jane.smith@com", "phone": "0987654321"}, "expected": {"outcome": "Error: Invalid email format", "status": "Failure"}}, {"name": "Unauthorized Access", "description": "Sales rep without authorization tries to sync data.", "input": {"customerName": "Alice Johnson", "email": "alice.johnson@example.com", "phone": "1122334455"}, "expected": {"outcome": "Error: Unauthorized access", "status": "Failure"}}, {"name": "Empty Customer Data", "description": "Sales rep attempts to sync with empty customer data fields.", "input": {"customerName": "", "email": "", "phone": ""}, "expected": {"outcome": "Error: Missing customer data", "status": "Failure"}}, {"name": "Large Data Sync", "description": "Sales rep syncs a large number of customer records.", "input": {"customerRecords": 10000}, "expected": {"outcome": "All customer records synced to Notion", "status": "Success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{}
{"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "GPT4o_testcases": [{"name": "search with valid offer filter", "description": "Customer searches for restaurants with valid offers", "input": {"offerFilter": "20% off"}, "expected": {"outcome": "Restaurants with offers found", "status": "okay"}}, {"name": "search with no offers available", "description": "Customer searches for restaurants when no offers are available", "input": {"offerFilter": "50% off"}, "expected": {"outcome": "No restaurants with offers found", "status": "okay"}}, {"name": "search with invalid offer filter", "description": "Customer uses an invalid offer filter", "input": {"offerFilter": "invalidOffer"}, "expected": {"outcome": "Error message displayed", "status": "error"}}, {"name": "search with empty offer filter", "description": "Customer searches without specifying an offer filter", "input": {"offerFilter": ""}, "expected": {"outcome": "All restaurants displayed", "status": "okay"}}, {"name": "search with expired offer", "description": "Customer searches for restaurants with expired offers", "input": {"offerFilter": "Expired Offer"}, "expected": {"outcome": "No restaurants with offers found", "status": "okay"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "GPT4o_testcases": [{"name": "View Recent Searches", "description": "Verify that a customer can view a list of their recent search queries.", "input": {}, "expected": {"outcome": "Recent searches displayed", "status": "Viewed recent searches"}}, {"name": "Select Recent Search", "description": "Verify that a customer can select a recent search query and view the results.", "input": {"selectedSearch": "Laptop"}, "expected": {"outcome": "Search results displayed", "status": "Results for selected search"}}, {"name": "No Recent Searches", "description": "Verify the system's behavior when there are no recent searches available.", "input": {}, "expected": {"outcome": "No recent searches message", "status": "Handled empty recent searches"}}, {"name": "Invalid Search Selection", "description": "Verify the system's response when a customer selects an invalid or non-existent recent search.", "input": {"selectedSearch": "NonExistentSearch"}, "expected": {"outcome": "Error message displayed", "status": "Handled invalid search selection"}}, {"name": "Recent Searches Update", "description": "Verify that the list of recent searches updates dynamically with new search queries.", "input": {"newSearch": "Smartphone"}, "expected": {"outcome": "Recent searches updated", "status": "List includes new search"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "GPT4o_testcases": [{"name": "valid food selection", "description": "Customer selects available food items from the menu", "input": [{"restaurant": "xyz restaurant", "food items": {"pasta": 1, "salad": 2}}, {"restaurant": "abc restaurant", "food items": {"sushi": 3, "ramen": 1}}], "expected": {"outcome": "Added to cart", "status": "Added"}}, {"name": "invalid food selection", "description": "Customer selects food items with invalid quantity", "input": [{"restaurant": "xyz restaurant", "food items": {"pasta": -1, "salad": 0}}, {"restaurant": "abc restaurant", "food items": {"sushi": 0, "ramen": -2}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable food item", "description": "Customer selects food items that are unavailable", "input": [{"restaurant": "xyz restaurant", "food items": {"pasta": "unavailable", "salad": 2}}, {"restaurant": "abc restaurant", "food items": {"sushi": 3, "ramen": "unavailable"}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable restaurant", "description": "Customer selects food items from an unavailable restaurant", "input": [{"restaurant": "Unavailable restaurant", "food items": {"pasta": 1, "salad": 2}}, {"restaurant": "abc restaurant", "food items": {"sushi": 3, "ramen": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "GPT4o_testcases": [{"name": "view item details", "description": "Customer can view details of a selected food item", "input": {"item_id": "123"}, "expected": {"outcome": "Details Displayed", "status": "okay"}}, {"name": "view item details with invalid id", "description": "Customer tries to view details of a non-existent food item", "input": {"item_id": "999"}, "expected": {"outcome": "Item Not Found", "status": "error"}}, {"name": "view item details with missing id", "description": "Customer tries to view details without providing an item id", "input": {"item_id": ""}, "expected": {"outcome": "Invalid Request", "status": "error"}}, {"name": "view item details with special characters in id", "description": "Customer tries to view details with special characters in item id", "input": {"item_id": "@#$%"}, "expected": {"outcome": "Invalid Request", "status": "error"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "GPT4o_testcases": [{"name": "Switch to Delivery", "description": "Customer switches to delivery option and system updates the restaurant list accordingly", "input": {"option": "delivery"}, "expected": {"outcome": "Restaurant list updated for delivery", "status": "success"}}, {"name": "Switch to Pickup", "description": "Customer switches to pickup option and system updates the restaurant list accordingly", "input": {"option": "pickup"}, "expected": {"outcome": "Restaurant list updated for pickup", "status": "success"}}, {"name": "Invalid Option", "description": "Customer selects an invalid option and system should not update the restaurant list", "input": {"option": "invalid"}, "expected": {"outcome": "Invalid option selected", "status": "failure"}}, {"name": "No Option Selected", "description": "Customer does not select any option and system should not update the restaurant list", "input": {"option": ""}, "expected": {"outcome": "No option selected", "status": "failure"}}, {"name": "Rapid Switching", "description": "Customer rapidly switches between delivery and pickup options", "input": {"option": ["delivery", "pickup", "delivery", "pickup"]}, "expected": {"outcome": "Restaurant list updates correctly after each switch", "status": "success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "GPT4o_testcases": [{"name": "Switch to Delivery", "description": "Customer switches from pickup to delivery option", "input": {"restaurantId": "101", "currentOption": "pickup", "newOption": "delivery"}, "expected": {"outcome": "Delivery option selected", "estimatedTime": "30 minutes"}}, {"name": "Switch to Pickup", "description": "Customer switches from delivery to pickup option", "input": {"restaurantId": "101", "currentOption": "delivery", "newOption": "pickup"}, "expected": {"outcome": "Pickup option selected", "estimatedTime": "15 minutes"}}, {"name": "Invalid Option", "description": "Customer tries to switch to an invalid option", "input": {"restaurantId": "101", "currentOption": "delivery", "newOption": "invalidOption"}, "expected": {"outcome": "Error: Invalid option", "estimatedTime": null}}, {"name": "No Change in Option", "description": "Customer selects the same option again", "input": {"restaurantId": "101", "currentOption": "pickup", "newOption": "pickup"}, "expected": {"outcome": "No change in option", "estimatedTime": "15 minutes"}}, {"name": "Switch with Invalid Restaurant", "description": "Customer tries to switch options for a non-existent restaurant", "input": {"restaurantId": "999", "currentOption": "pickup", "newOption": "delivery"}, "expected": {"outcome": "Error: Restaurant not found", "estimatedTime": null}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "valid switch to pickup", "description": "Customer switches from delivery to pickup successfully", "input": {"current_option": "delivery", "new_option": "pickup", "cart_items": {"burger": 2, "pizza": 1}}, "expected": {"outcome": "Switch successful", "status": "updated"}}, {"name": "valid switch to delivery", "description": "Customer switches from pickup to delivery successfully", "input": {"current_option": "pickup", "new_option": "delivery", "cart_items": {"burger": 2, "pizza": 1}}, "expected": {"outcome": "Switch successful", "status": "updated"}}, {"name": "invalid switch option", "description": "Customer attempts to switch to an invalid option", "input": {"current_option": "delivery", "new_option": "invalid_option", "cart_items": {"burger": 2, "pizza": 1}}, "expected": {"outcome": "Switch failed", "status": "not updated"}}, {"name": "switch with empty cart", "description": "Customer attempts to switch options with an empty cart", "input": {"current_option": "delivery", "new_option": "pickup", "cart_items": {}}, "expected": {"outcome": "Switch failed", "status": "not updated"}}, {"name": "switch without login", "description": "Customer attempts to switch options without being logged in", "input": {"current_option": "delivery", "new_option": "pickup", "cart_items": {"burger": 2, "pizza": 1}}, "expected": {"outcome": "Switch failed", "status": "not updated"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
{"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "GPT4o_testcases": [{"name": "Switch to delivery with valid address", "description": "Customer switches to delivery option with a valid address and places the order", "input": {"name": "jane doe", "address": "123 main street", "phone": "987654321", "cartid": "333", "option": "delivery"}, "expected": {"outcome": "Order placed successfully", "status": "success"}}, {"name": "Switch to pickup", "description": "Customer switches to pickup option and places the order", "input": {"name": "jane doe", "cartid": "333", "option": "pickup"}, "expected": {"outcome": "Order placed successfully", "status": "success"}}, {"name": "Switch to delivery with invalid address", "description": "Customer switches to delivery option with an invalid address", "input": {"name": "jane doe", "address": "", "phone": "987654321", "cartid": "333", "option": "delivery"}, "expected": {"outcome": "Order did not place", "status": "Rejected"}}, {"name": "Switch to delivery with missing phone number", "description": "Customer switches to delivery option without providing a phone number", "input": {"name": "jane doe", "address": "123 main street", "cartid": "333", "option": "delivery"}, "expected": {"outcome": "Order did not place", "status": "Rejected"}}, {"name": "Switch between delivery and pickup multiple times", "description": "Customer switches between delivery and pickup options multiple times before placing the order", "input": {"name": "jane doe", "address": "123 main street", "phone": "987654321", "cartid": "333", "option": "delivery", "switchCount": 3}, "expected": {"outcome": "Order placed successfully", "status": "success"}}], "bert_score": {"Precision": 0, "Recall": 0, "F1": 0}}
