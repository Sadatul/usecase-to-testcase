{"usecase": {"name": "File Upload", "scenario": "User uploads a file, then it is signed with user's private key in browser side, then the file is uploaded to server side. User can view file after a successful upload.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User chooses a file from file browser", "File is digitally signed.", "The file is sent in 1 MB chunks to the server.", "After last chunk is sent successfully, the file signature is sent to the server."]}, "testcases": [{"name": "Empty File Upload", "description": "Verify that the system handles the case where no file is sent to the server with api call", "input": {"userFile": null}, "expected": {"outcome": "No file detected", "status": "failed"}}, {"name": "Valid File Upload", "description": "Verify that a file upload is successful", "input": {"userid": "uuid", "fileChunk": ["file data in binary format"]}, "expected": {"outcome": "Successful file upload", "status": "Success", "fileid": "uuid", "file_signatureid": "uuid"}}, {"name": "Missing File Chunk", "description": "Verify that a file upload is not completed if last chunk is not sent", "input": {"userid": "uuid", "lastChunk": []}, "expected": {"outcome": "File not uploaded yet", "status": "Uploading"}}, {"name": "Valid File Viewing", "description": "Verify that a user can view his file data after a successful upload", "input": {"fileid": "uuid", "userid": "uuid"}, "expected": {"filedata": "file data", "fileLink": "url", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful File Upload", "description": "Verify that a user can successfully upload a file and view it after upload", "input": {"userId": "user_12345", "fileName": "document.pdf", "fileSize": "2MB", "fileType": "application/pdf"}, "expected": {"outcome": "File upload successful", "status": "File Uploaded and Viewable"}}, {"name": "Failed File Upload Due to Large File Size", "description": "Verify that a user cannot upload a file larger than the allowed size", "input": {"userId": "user_12345", "fileName": "large_document.pdf", "fileSize": "15MB", "fileType": "application/pdf"}, "expected": {"outcome": "File upload failed", "status": "File Size Exceeds Limit"}}, {"name": "Failed File Upload Due to Unsupported File Type", "description": "Verify that a user cannot upload a file with an unsupported file type", "input": {"userId": "user_12345", "fileName": "script.js", "fileSize": "500KB", "fileType": "application/javascript"}, "expected": {"outcome": "File upload failed", "status": "Unsupported File Type"}}, {"name": "Successful File Upload with Edge Case File Size", "description": "Verify that a user can upload a file that is exactly at the maximum allowed size", "input": {"userId": "user_12345", "fileName": "max_size_document.pdf", "fileSize": "10MB", "fileType": "application/pdf"}, "expected": {"outcome": "File upload successful", "status": "File Uploaded and Viewable"}}, {"name": "Failed File Upload Due to Network Interruption", "description": "Verify that a file upload fails if there is a network interruption during the upload process", "input": {"userId": "user_12345", "fileName": "interrupted_document.pdf", "fileSize": "3MB", "fileType": "application/pdf"}, "expected": {"outcome": "File upload failed", "status": "Network Error"}}], "bert_score": {"Precision": 0.9339761137962341, "Recall": 0.9375278949737549, "F1": 0.9357485771179199}}
{"usecase": {"name": "Verify A File Signature", "scenario": "User can upload a file and it's signature and verify if the signature is authentic.", "actors": "User", "preconditions": "User is logged in the website and has the file, the signature and the public key.", "steps": ["User uploads the file, the signature, the public key.", "System authenticates the signature", "User views the result"]}, "testcases": [{"name": "Valid File Signature", "description": "Verify that an authentic file signature returns successful in test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Authentic File Signature", "status": "Success"}}, {"name": "Invalid File Signature", "description": "Verify that an inauthenticate file signature fails authentication test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Inauthentic File Signature", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful File Signature Verification", "description": "Verify that a user can successfully verify a file signature with valid inputs", "input": {"userId": "user_67890", "file": "document.pdf", "signature": "signature.sig", "publicKey": "publicKey.pem"}, "expected": {"outcome": "Signature verification successful", "status": "Signature Authentic"}}, {"name": "Failed File Signature Verification - Invalid Signature", "description": "Verify that the system fails to verify a file signature with an invalid signature", "input": {"userId": "user_67890", "file": "document.pdf", "signature": "invalid_signature.sig", "publicKey": "publicKey.pem"}, "expected": {"outcome": "Signature verification failed", "status": "Signature Not Authentic"}}, {"name": "Failed File Signature Verification - Missing File", "description": "Verify that the system fails to verify a file signature when the file is missing", "input": {"userId": "user_67890", "file": null, "signature": "signature.sig", "publicKey": "publicKey.pem"}, "expected": {"outcome": "Signature verification failed", "status": "File Missing"}}, {"name": "Failed File Signature Verification - Missing Signature", "description": "Verify that the system fails to verify a file signature when the signature is missing", "input": {"userId": "user_67890", "file": "document.pdf", "signature": null, "publicKey": "publicKey.pem"}, "expected": {"outcome": "Signature verification failed", "status": "Signature Missing"}}, {"name": "Failed File Signature Verification - Missing Public Key", "description": "Verify that the system fails to verify a file signature when the public key is missing", "input": {"userId": "user_67890", "file": "document.pdf", "signature": "signature.sig", "publicKey": null}, "expected": {"outcome": "Signature verification failed", "status": "Public Key Missing"}}], "bert_score": {"Precision": 0.9403286576271057, "Recall": 0.9523332118988037, "F1": 0.9462928771972656}}
{"usecase": {"name": "Organization Operations", "scenario": "User can create a new Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User creates an Organization", "User adds members to Organization", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Organization Creation", "description": "Verify that an Organization can be created with a valid name", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created organization", "orgid": "Organization id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Organization admin can add members to an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to organization", "orgid": "Organization id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Organization admin can send notice to all members in an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in organization", "orgid": "Organization id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in organization.", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "orgid": "Organization id", "status": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Successful Organization Creation", "description": "Verify that a user can successfully create a new organization", "input": {"userId": "user_12345", "organizationName": "Tech Innovators", "description": "A group for tech enthusiasts"}, "expected": {"outcome": "Organization creation successful", "status": "Organization Created"}}, {"name": "Failed Organization Creation", "description": "Verify that a user cannot create an organization with an empty name", "input": {"userId": "user_12345", "organizationName": "", "description": "A group for tech enthusiasts"}, "expected": {"outcome": "Organization creation failed", "status": "Invalid Organization Name"}}, {"name": "Successful Member Addition", "description": "Verify that a user can successfully add members to an organization", "input": {"userId": "user_12345", "organizationId": "org_67890", "members": ["member_001", "member_002"]}, "expected": {"outcome": "Members added successfully", "status": "Members Added"}}, {"name": "Failed Member Addition", "description": "Verify that a user cannot add members to an organization if the member list is empty", "input": {"userId": "user_12345", "organizationId": "org_67890", "members": []}, "expected": {"outcome": "Member addition failed", "status": "No Members Provided"}}, {"name": "Successful Notice Sending", "description": "Verify that a user can successfully send a notice to all members of an organization", "input": {"userId": "user_12345", "organizationId": "org_67890", "notice": "Meeting at 5 PM"}, "expected": {"outcome": "Notice sent successfully", "status": "Notice Sent"}}, {"name": "Failed Notice Sending", "description": "Verify that a user cannot send a notice if the notice content is empty", "input": {"userId": "user_12345", "organizationId": "org_67890", "notice": ""}, "expected": {"outcome": "Notice sending failed", "status": "Empty Notice Content"}}], "bert_score": {"Precision": 0.9337269067764282, "Recall": 0.9391711950302124, "F1": 0.9364411234855652}}
{"usecase": {"name": "Team Operations", "scenario": "User can create a new Team under an Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization", "steps": ["User creates an Team", "User adds members to Team", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that an Team can be created with a valid name in the Organization", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created team", "teamid": "Team id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Team admin can add members to an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to team", "teamid": "Team id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Team admin can send notice to all members in an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in team", "teamid": "Team id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "teamid": "Team id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "teamid": "Team id", "status": "Unavailable User"}}], "GPT4o_testcases": [{"name": "Successful Team Creation and Operations", "description": "Verify that a user can successfully create a team, add members, and send a notice", "input": {"userId": "user_12345", "organizationId": "org_67890", "teamName": "Development Team", "members": ["member_1", "member_2", "member_3"], "notice": "Team meeting at 10 AM"}, "expected": {"outcome": "Team created, members added, notice sent", "status": "Operation Successful"}}, {"name": "Failed Team Creation with Empty Team Name", "description": "Verify that a user cannot create a team with an empty team name", "input": {"userId": "user_12345", "organizationId": "org_67890", "teamName": "", "members": ["member_1", "member_2", "member_3"], "notice": "Team meeting at 10 AM"}, "expected": {"outcome": "Team creation failed", "status": "Invalid Team Name"}}, {"name": "Failed Member Addition with Invalid Member ID", "description": "Verify that a user cannot add members with invalid member IDs", "input": {"userId": "user_12345", "organizationId": "org_67890", "teamName": "Development Team", "members": ["member_1", "invalid_member"], "notice": "Team meeting at 10 AM"}, "expected": {"outcome": "Member addition failed", "status": "Invalid Member ID"}}, {"name": "Failed Notice Sending with Empty Notice", "description": "Verify that a user cannot send an empty notice to team members", "input": {"userId": "user_12345", "organizationId": "org_67890", "teamName": "Development Team", "members": ["member_1", "member_2", "member_3"], "notice": ""}, "expected": {"outcome": "Notice sending failed", "status": "Empty Notice"}}], "bert_score": {"Precision": 0.9193979501724243, "Recall": 0.9261101484298706, "F1": 0.9227418899536133}}
{"usecase": {"name": "Thread Operations", "scenario": "User can create a new Thread under an Team, add members to it, send notices to all members and add files to the thread.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization and a Team", "steps": ["User creates an Thread", "User adds members to Thread", "User sends a notice to all members", "User adds a file to the thread"]}, "testcases": [{"name": "Valid Thread Creation", "description": "Verify that an Thread can be created with a valid name in the Team", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created thread", "threadid": "Thread id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Thread admin can add members to an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to thread", "threadid": "Thread id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Thread admin can send notice to all members in an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in thread", "threadid": "Thread id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "threadid": "Thread id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "threadid": "Thread id", "status": "Unavailable User"}}, {"name": "Valid File Addition", "description": "Verify that a member of a thread can add a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileData": ["file data in binary format"]}, "expected": {"outcome": "File successfully added in the thread", "threadid": "Thread id", "fileid": "file id", "status": "Success"}}, {"name": "Valid File Viewing", "description": "Verify that a member of a thread can view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "File data successfully returned", "threadid": "Thread id", "fileid": "file id", "fileData": "file data", "fileLink": "url", "status": "Success"}}, {"name": "Invalid File Viewing", "description": "Verify that a non-member of a thread cannot view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "User unauthorized in this thread", "threadid": "Thread id", "status": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Successful Thread Creation and Operations", "description": "Verify that a user can successfully create a thread, add members, send notices, and add files", "input": {"userId": "user_67890", "threadName": "Project Discussion", "members": ["member_1", "member_2"], "notice": "Meeting at 10 AM", "file": "project_plan.pdf"}, "expected": {"outcome": "Thread operations successful", "status": "Thread Created and Updated"}}, {"name": "Failed Thread Creation Due to Missing Name", "description": "Verify that a user cannot create a thread without a name", "input": {"userId": "user_67890", "threadName": null, "members": ["member_1", "member_2"], "notice": "Meeting at 10 AM", "file": "project_plan.pdf"}, "expected": {"outcome": "Thread creation failed", "status": "Missing Thread Name"}}, {"name": "Failed Member Addition Due to Invalid Member ID", "description": "Verify that a user cannot add members with invalid IDs to a thread", "input": {"userId": "user_67890", "threadName": "Project Discussion", "members": ["invalid_member"], "notice": "Meeting at 10 AM", "file": "project_plan.pdf"}, "expected": {"outcome": "Member addition failed", "status": "Invalid Member ID"}}, {"name": "Failed Notice Sending Due to Empty Notice", "description": "Verify that a user cannot send an empty notice to thread members", "input": {"userId": "user_67890", "threadName": "Project Discussion", "members": ["member_1", "member_2"], "notice": "", "file": "project_plan.pdf"}, "expected": {"outcome": "Notice sending failed", "status": "Empty Notice"}}, {"name": "Failed File Addition Due to Unsupported File Type", "description": "Verify that a user cannot add a file with an unsupported type to a thread", "input": {"userId": "user_67890", "threadName": "Project Discussion", "members": ["member_1", "member_2"], "notice": "Meeting at 10 AM", "file": "project_plan.exe"}, "expected": {"outcome": "File addition failed", "status": "Unsupported File Type"}}], "bert_score": {"Precision": 0.9264860153198242, "Recall": 0.9328277707099915, "F1": 0.9296461343765259}}
{"usecase": {"name": "Register Retailer", "scenario": "Retailer wants to register with the platform to place orders for products from different manufacturers.", "actors": "Retailer", "preconditions": "Retailer is not registered with the platform.", "steps": ["Retailer visits the platform website", "Retailer fills the registration form", "Retailer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a retailer can successfully register with the platform.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a retailer tries to register with invalid details, like invalid email, invalid nid, or phone number", "input": {"retailerDetails": {"name": "ABC Retail", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-239, Karwan Bazar, Dhaka", "nid": "aadffa", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a retailer tries to register with a phone number that is already registered.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because the phone number is already registered", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Retailer Registration", "description": "Verify that a retailer can successfully register with the platform", "input": {"retailerId": "retailer_67890", "name": "Retailer One", "email": "retailerone@example.com", "password": "SecurePass123", "businessName": "Retailer One Store", "contactNumber": "01234567890", "address": "123 Retailer Street"}, "expected": {"outcome": "Retailer registration successful", "status": "Registered"}}, {"name": "Failed Retailer Registration Due to Missing Email", "description": "Verify that a retailer cannot register without providing an email", "input": {"retailerId": "retailer_67890", "name": "Retailer One", "email": null, "password": "SecurePass123", "businessName": "Retailer One Store", "contactNumber": "01234567890", "address": "123 Retailer Street"}, "expected": {"outcome": "Retailer registration failed", "status": "Missing Information"}}, {"name": "Failed Retailer Registration Due to Weak Password", "description": "Verify that a retailer cannot register with a weak password", "input": {"retailerId": "retailer_67890", "name": "Retailer One", "email": "retailerone@example.com", "password": "123", "businessName": "Retailer One Store", "contactNumber": "01234567890", "address": "123 Retailer Street"}, "expected": {"outcome": "Retailer registration failed", "status": "Weak Password"}}, {"name": "Failed Retailer Registration Due to Duplicate Email", "description": "Verify that a retailer cannot register with an email that is already in use", "input": {"retailerId": "retailer_67890", "name": "Retailer One", "email": "existingretailer@example.com", "password": "SecurePass123", "businessName": "Retailer One Store", "contactNumber": "01234567890", "address": "123 Retailer Street"}, "expected": {"outcome": "Retailer registration failed", "status": "Email Already Used"}}], "bert_score": {"Precision": 0.9398318529129028, "Recall": 0.9425193667411804, "F1": 0.9411737322807312}}
{"usecase": {"name": "Place Order", "scenario": "Retailer places an order for products from different manufacturers, the order requires confirmation from each manufacturer.", "actors": "Retailer, Manufacturers", "preconditions": "Retailer is registered with the platform and has selected products from different manufacturers.", "steps": ["Retailer selects products from various manufacturers to include in the order", "Retailer submits the order", "Each manufacturer confirms and processes their part of the order"]}, "testcases": [{"name": "Valid Product Selection", "description": "Verify that a retailer can successfully select and place an order for valid products from different manufacturers.", "input": {"selectedProducts": [{"manufacturer": "ABC Electronics", "productCode": "Laptop123", "quantity": 2}, {"manufacturer": "XYZ Appliances", "productCode": "Refrigerator456", "quantity": 1}, {"manufacturer": "FashionHub", "productCode": "Apparel789", "quantity": 5}]}, "expected": {"outcome": "Order placed successfully", "status": "Pending Manufacturer Confirmation"}}, {"name": "Empty Product Selection", "description": "Verify that the system handles the case where a retailer tries to submit an empty product selection in the order.", "input": {"selectedProducts": []}, "expected": {"outcome": "Order placement failed", "status": "Rejected"}}, {"name": "Manufacturer Confirmation", "description": "Verify that each manufacturer can successfully confirm and process their part of the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": true, "FashionHub": true}}, "expected": {"outcome": "Order confirmed and processed", "status": "Completed"}}, {"name": "Partial Manufacturer Confirmation", "description": "Verify that the system handles the case where some manufacturers confirm and others do not for the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": false, "FashionHub": true}}, "expected": {"outcome": "Partial order confirmation", "status": "Partially Completed"}}], "GPT4o_testcases": [{"name": "Successful Order Placement", "description": "Verify that a retailer can successfully place an order with products from different manufacturers", "input": {"retailerId": "retailer_67890", "products": [{"manufacturerId": "manu_001", "productId": "prod_001", "quantity": 10}, {"manufacturerId": "manu_002", "productId": "prod_002", "quantity": 5}]}, "expected": {"outcome": "Order placed successfully", "status": "Order Confirmed"}}, {"name": "Failed Order Placement Due to Unavailable Product", "description": "Verify that an order cannot be placed if any selected product is unavailable", "input": {"retailerId": "retailer_67890", "products": [{"manufacturerId": "manu_001", "productId": "prod_001", "quantity": 10}, {"manufacturerId": "manu_002", "productId": "prod_999", "quantity": 5}]}, "expected": {"outcome": "Order placement failed", "status": "Product Unavailable"}}, {"name": "Failed Order Placement Due to Manufacturer Rejection", "description": "Verify that an order cannot be placed if any manufacturer rejects the order", "input": {"retailerId": "retailer_67890", "products": [{"manufacturerId": "manu_001", "productId": "prod_001", "quantity": 10}, {"manufacturerId": "manu_003", "productId": "prod_003", "quantity": 5}]}, "expected": {"outcome": "Order placement failed", "status": "Manufacturer Rejected"}}, {"name": "Successful Order Placement with Minimum Quantity", "description": "Verify that a retailer can place an order with the minimum quantity of products", "input": {"retailerId": "retailer_67890", "products": [{"manufacturerId": "manu_001", "productId": "prod_001", "quantity": 1}]}, "expected": {"outcome": "Order placed successfully", "status": "Order Confirmed"}}, {"name": "Failed Order Placement with Zero Quantity", "description": "Verify that an order cannot be placed with zero quantity of any product", "input": {"retailerId": "retailer_67890", "products": [{"manufacturerId": "manu_001", "productId": "prod_001", "quantity": 0}]}, "expected": {"outcome": "Order placement failed", "status": "Invalid Quantity"}}], "bert_score": {"Precision": 0.9361322522163391, "Recall": 0.9448263645172119, "F1": 0.9404592514038086}}
{"usecase": {"name": "Track Order", "scenario": "Retailer wants to track the status of an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer selects the order to track", "Retailer views the status of the order"]}, "testcases": [{"name": "Valid Order Tracking", "description": "Verify that a retailer can successfully track the status of an order placed with different manufacturers.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order status retrieved successfully", "status": "Partially Completed"}}, {"name": "Invalid Order Tracking", "description": "Verify that the system handles the case where a retailer tries to track an order that does not exist.", "input": {"orderID": "67890"}, "expected": {"outcome": "Order status retrieval failed", "status": "Not Found"}}, {"name": "Order Completed", "description": "The ordered products have reached the retailer and the order is completed.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order Has reached the retailer", "status": "Completed"}}], "GPT4o_testcases": [{"name": "Successful Order Tracking", "description": "Verify that a retailer can successfully track the status of an order", "input": {"retailerId": "retailer_67890", "orderId": "order_12345"}, "expected": {"outcome": "Order status retrieved successfully", "status": "Order In Transit"}}, {"name": "Failed Order Tracking - Invalid Order ID", "description": "Verify that a retailer cannot track an order with an invalid order ID", "input": {"retailerId": "retailer_67890", "orderId": "invalid_order_000"}, "expected": {"outcome": "Order tracking failed", "status": "Order Not Found"}}, {"name": "Failed Order Tracking - Missing Order ID", "description": "Verify that a retailer cannot track an order if the order ID is missing", "input": {"retailerId": "retailer_67890", "orderId": null}, "expected": {"outcome": "Order tracking failed", "status": "Order ID Required"}}, {"name": "Failed Order Tracking - Unauthorized Access", "description": "Verify that a retailer cannot track an order without logging in", "input": {"retailerId": null, "orderId": "order_12345"}, "expected": {"outcome": "Order tracking failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9352071285247803, "Recall": 0.9446840286254883, "F1": 0.9399216771125793}}
{"usecase": {"name": "Make Payment", "scenario": "Retailer wants to make payment for an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer proceeds to make payment after the order is confirmed and processed by the manufacturers", "Retailer makes the payment"]}, "testcases": [{"name": "Full Payment", "description": "Verify that a retailer can successfully make payment for an order placed with different manufacturers.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment successful", "status": "Completed"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where a retailer tries to make an insufficient payment for the order without taking a loan.", "input": {"orderID": "12345", "paymentDetails": {"amount": 10000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment failed, insufficient amount", "status": "Rejected"}}, {"name": "Loan Payment", "description": "Verify that the system handles the case where a retailer takes a loan to make the payment for the order.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "Pay Later"}}, "expected": {"outcome": "Partial Payment successful", "status": "Partially Completed"}}], "GPT4o_testcases": [{"name": "Successful Payment", "description": "Verify that a retailer can successfully make a payment for an order placed with different manufacturers.", "input": {"retailerId": "retailer_67890", "orderId": "order_12345", "paymentMethod": "Credit Card", "amount": 1500.0}, "expected": {"outcome": "Payment successful", "status": "Payment Completed"}}, {"name": "Failed Payment Due to Insufficient Funds", "description": "Verify that a retailer cannot make a payment if there are insufficient funds in the selected payment method.", "input": {"retailerId": "retailer_67890", "orderId": "order_12345", "paymentMethod": "Credit Card", "amount": 1500.0}, "expected": {"outcome": "Payment failed", "status": "Insufficient Funds"}}, {"name": "Failed Payment Due to Invalid Payment Method", "description": "Verify that a retailer cannot make a payment if the payment method is invalid.", "input": {"retailerId": "retailer_67890", "orderId": "order_12345", "paymentMethod": "InvalidCard", "amount": 1500.0}, "expected": {"outcome": "Payment failed", "status": "Invalid Payment Method"}}, {"name": "Failed Payment Due to Unconfirmed Order", "description": "Verify that a retailer cannot make a payment if the order is not confirmed by the manufacturers.", "input": {"retailerId": "retailer_67890", "orderId": "order_54321", "paymentMethod": "Credit Card", "amount": 1500.0}, "expected": {"outcome": "Payment failed", "status": "Order Not Confirmed"}}], "bert_score": {"Precision": 0.9499619007110596, "Recall": 0.9595251083374023, "F1": 0.954719603061676}}
{"usecase": {"name": "Register Manufacturer", "scenario": "Manufacturer wants to register with the platform to sell their products to retailers.", "actors": "Manufacturer", "preconditions": "Manufacturer is not registered with the platform.", "steps": ["Manufacturer visits the platform website", "Manufacturer fills the registration form", "Manufacturer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a manufacturer can successfully register with the platform.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with invalid details, like invalid email, or phone number", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with an email that is already registered.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because the email is already registered", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Manufacturer Registration", "description": "Verify that a manufacturer can successfully register with the platform", "input": {"manufacturerId": "manu_67890", "companyName": "XYZ Manufacturing", "contactPerson": "Alice Smith", "email": "alice@xyzmanufacturing.com", "phone": "01234567890", "address": "123 Industrial Park, Cityville"}, "expected": {"outcome": "Registration successful", "status": "Registered"}}, {"name": "Failed Manufacturer Registration Due to Missing Information", "description": "Verify that a manufacturer cannot register if any required information is missing", "input": {"manufacturerId": "manu_67890", "companyName": "XYZ Manufacturing", "contactPerson": null, "email": "alice@xyzmanufacturing.com", "phone": "01234567890", "address": "123 Industrial Park, Cityville"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Information"}}, {"name": "Failed Manufacturer Registration Due to Invalid Email", "description": "Verify that a manufacturer cannot register with an invalid email format", "input": {"manufacturerId": "manu_67890", "companyName": "XYZ Manufacturing", "contactPerson": "Alice Smith", "email": "alice@xyzmanufacturing", "phone": "01234567890", "address": "123 Industrial Park, Cityville"}, "expected": {"outcome": "Registration failed", "status": "Invalid Email"}}, {"name": "Failed Manufacturer Registration Due to Duplicate Entry", "description": "Verify that a manufacturer cannot register if they are already registered", "input": {"manufacturerId": "manu_67890", "companyName": "XYZ Manufacturing", "contactPerson": "Alice Smith", "email": "alice@xyzmanufacturing.com", "phone": "01234567890", "address": "123 Industrial Park, Cityville"}, "expected": {"outcome": "Registration failed", "status": "Already Registered"}}], "bert_score": {"Precision": 0.9314650893211365, "Recall": 0.9372206926345825, "F1": 0.9343340396881104}}
{"usecase": {"name": "Manage Products", "scenario": "Manufacturer wants to manage their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new product", "Manufacturer updates an existing product", "Manufacturer deletes a product"]}, "testcases": [{"name": "Add New Product", "description": "Verify that a manufacturer can successfully add a new product to the platform.", "input": {"productDetails": {"productCode": "Laptop123", "productName": "Laptop", "unitPrice": 500, "description": "Laptop with 8GB RAM and 1TB HDD", "weight": "2.5kg", "category": "Electronics", "image": "laptop.jpg", "minimumOrderQuantity": 20, "minimumDiscount": 5.0, "maximumDiscount": 10.0}}, "expected": {"outcome": "Product added successfully", "status": "Success"}}, {"name": "Update Product", "description": "Verify that a manufacturer can successfully update an existing product on the platform.", "input": {"productDetails": {"productCode": "Laptop123", "unitPrice": 600, "description": "Laptop with 16GB RAM and 1TB HDD", "weight": "2.7kg", "image": "laptop1.jpg", "minimumOrderQuantity": 40, "minimumDiscount": 7.0, "maximumDiscount": 12.0}}, "expected": {"outcome": "Product updated successfully", "status": "Success"}}, {"name": "Delete Product", "description": "Verify that a manufacturer can successfully delete a product from the platform.", "input": {"productCode": "Laptop123"}, "expected": {"outcome": "Product deleted successfully", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Product Addition", "description": "Verify that a manufacturer can successfully add a new product", "input": {"manufacturerId": "manufacturer_67890", "productName": "Product A", "productCategory": "Electronics", "price": 100.0, "stock": 50}, "expected": {"outcome": "Product addition successful", "status": "Product Added"}}, {"name": "Failed Product Addition Due to Missing Information", "description": "Verify that a manufacturer cannot add a new product if any required information is missing", "input": {"manufacturerId": "manufacturer_67890", "productName": null, "productCategory": "Electronics", "price": 100.0, "stock": 50}, "expected": {"outcome": "Product addition failed", "status": "Missing Information"}}, {"name": "Successful Product Update", "description": "Verify that a manufacturer can successfully update an existing product", "input": {"manufacturerId": "manufacturer_67890", "productId": "product_12345", "productName": "Product A Updated", "price": 120.0}, "expected": {"outcome": "Product update successful", "status": "Product Updated"}}, {"name": "Failed Product Update Due to Invalid Product ID", "description": "Verify that a manufacturer cannot update a product with an invalid product ID", "input": {"manufacturerId": "manufacturer_67890", "productId": "invalid_product_id", "productName": "Product A Updated", "price": 120.0}, "expected": {"outcome": "Product update failed", "status": "Invalid Product ID"}}, {"name": "Successful Product Deletion", "description": "Verify that a manufacturer can successfully delete a product", "input": {"manufacturerId": "manufacturer_67890", "productId": "product_12345"}, "expected": {"outcome": "Product deletion successful", "status": "Product Deleted"}}, {"name": "Failed Product Deletion Due to Non-existent Product", "description": "Verify that a manufacturer cannot delete a product that does not exist", "input": {"manufacturerId": "manufacturer_67890", "productId": "non_existent_product"}, "expected": {"outcome": "Product deletion failed", "status": "Product Not Found"}}], "bert_score": {"Precision": 0.9188602566719055, "Recall": 0.919857382774353, "F1": 0.919358491897583}}
{"usecase": {"name": "Manage Orders", "scenario": "Manufacturer wants to manage the orders placed for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has received orders for their products.", "steps": ["Manufacturer logs in to the platform", "Manufacturer views the list of orders", "Manufacturer updates the status of an order"]}, "testcases": [{"name": "View Orders", "description": "Verify that a manufacturer can successfully view the list of orders placed for their products.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Orders retrieved successfully", "status": "Success"}}, {"name": "Update Order Status", "description": "Verify that a manufacturer can successfully update the status of an order placed for their products.", "input": {"orderID": "12345", "status": "Shipped"}, "expected": {"outcome": "Order status updated successfully", "status": "Shipped"}}], "GPT4o_testcases": [{"name": "Successful Order Status Update", "description": "Verify that a manufacturer can successfully update the status of an order", "input": {"manufacturerId": "manufacturer_67890", "orderId": "order_12345", "newStatus": "Shipped"}, "expected": {"outcome": "Order status update successful", "status": "Order Updated"}}, {"name": "Failed Order Status Update Due to Invalid Order ID", "description": "Verify that a manufacturer cannot update the status of an order with an invalid order ID", "input": {"manufacturerId": "manufacturer_67890", "orderId": "invalid_order_id", "newStatus": "Shipped"}, "expected": {"outcome": "Order status update failed", "status": "Invalid Order ID"}}, {"name": "Failed Order Status Update Due to Missing Status", "description": "Verify that a manufacturer cannot update the status of an order if the new status is not provided", "input": {"manufacturerId": "manufacturer_67890", "orderId": "order_12345", "newStatus": null}, "expected": {"outcome": "Order status update failed", "status": "Missing Status"}}, {"name": "View Orders List", "description": "Verify that a manufacturer can view the list of orders", "input": {"manufacturerId": "manufacturer_67890"}, "expected": {"outcome": "Orders list retrieved successfully", "status": "Orders Retrieved"}}, {"name": "Failed to View Orders List Due to Invalid Manufacturer ID", "description": "Verify that a manufacturer cannot view the list of orders with an invalid manufacturer ID", "input": {"manufacturerId": "invalid_manufacturer_id"}, "expected": {"outcome": "Orders list retrieval failed", "status": "Invalid Manufacturer ID"}}], "bert_score": {"Precision": 0.9209291338920593, "Recall": 0.9346873760223389, "F1": 0.927757203578949}}
{"usecase": {"name": "Manage Inventory", "scenario": "Manufacturer wants to manage the inventory of their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added products to their inventory.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new inventory", "Manufacturer views the list of products in their inventory", "Manufacturer adds a new batch of stock"]}, "testcases": [{"name": "Add New Inventory", "description": "Verify that a manufacturer can successfully add a new inventory.", "input": {"inventoryDetails": {"inventoryName": "Inventory1", "type": "Warehouse", "location": "A-23, Industrial Area, Tejgaon, Dhaka", "capacity": "1000 sq. ft."}}, "expected": {"outcome": "Inventory added successfully", "status": "Success"}}, {"name": "View Inventory Products", "description": "Verify that a manufacturer can successfully view the list of products in their inventory.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Inventory Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of stock", "description": "Verify that a manufacturer can successfully add a new batch of product in their inventory.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100, "marketStatus": "Available"}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Inventory Addition", "description": "Verify that a manufacturer can successfully add a new inventory", "input": {"manufacturerId": "manu_67890", "inventoryName": "Electronics", "productList": [{"productId": "prod_001", "productName": "Smartphone", "quantity": 100}, {"productId": "prod_002", "productName": "Laptop", "quantity": 50}]}, "expected": {"outcome": "Inventory addition successful", "status": "Inventory Added"}}, {"name": "Failed Inventory Addition Due to Empty Product List", "description": "Verify that a manufacturer cannot add a new inventory with an empty product list", "input": {"manufacturerId": "manu_67890", "inventoryName": "Electronics", "productList": []}, "expected": {"outcome": "Inventory addition failed", "status": "Empty Product List"}}, {"name": "Successful Stock Batch Addition", "description": "Verify that a manufacturer can successfully add a new batch of stock to an existing product", "input": {"manufacturerId": "manu_67890", "productId": "prod_001", "batchQuantity": 50}, "expected": {"outcome": "Stock batch addition successful", "status": "Stock Updated"}}, {"name": "Failed Stock Batch Addition Due to Invalid Product ID", "description": "Verify that a manufacturer cannot add a new batch of stock with an invalid product ID", "input": {"manufacturerId": "manu_67890", "productId": "invalid_prod", "batchQuantity": 50}, "expected": {"outcome": "Stock batch addition failed", "status": "Invalid Product ID"}}, {"name": "View Inventory List", "description": "Verify that a manufacturer can view the list of products in their inventory", "input": {"manufacturerId": "manu_67890"}, "expected": {"outcome": "Inventory list retrieved successfully", "status": "Inventory List Displayed"}}], "bert_score": {"Precision": 0.9309428930282593, "Recall": 0.9292899370193481, "F1": 0.9301156997680664}}
{"usecase": {"name": "Manage Production House", "scenario": "Manufacturer wants to manage the production house for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added production houses.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new production house", "Manufacturer views the list of products in their production houses", "Manufacturer adds a new batch of product in a production house"]}, "testcases": [{"name": "Add New Production House", "description": "Verify that a manufacturer can successfully add a new production house.", "input": {"productionHouseDetails": {"productionHouseName": "ProductionHouse1", "type": "Juice, Beverage, and Snacks Production House", "location": "B-23, Industrial Area, Tejgaon, Dhaka", "capacity": "5000 sq. ft."}}, "expected": {"outcome": "Production House added successfully", "status": "Success"}}, {"name": "View Production House Products", "description": "Verify that a manufacturer can successfully view the list of products in their production houses.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Production House Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of product in a production house", "description": "Verify that a manufacturer can successfully add a new batch of product in a production house.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Production House Addition", "description": "Verify that a manufacturer can successfully add a new production house", "input": {"manufacturerId": "manufacturer_67890", "productionHouseName": "XYZ Productions", "location": "123 Industrial Ave", "capacity": 1000}, "expected": {"outcome": "Production house addition successful", "status": "Production House Added"}}, {"name": "Failed Production House Addition", "description": "Verify that a manufacturer cannot add a new production house with missing information", "input": {"manufacturerId": "manufacturer_67890", "productionHouseName": "", "location": "123 Industrial Ave", "capacity": 1000}, "expected": {"outcome": "Production house addition failed", "status": "Missing Information"}}, {"name": "Successful Product Batch Addition", "description": "Verify that a manufacturer can successfully add a new batch of product in a production house", "input": {"manufacturerId": "manufacturer_67890", "productionHouseId": "house_001", "productName": "Gadget", "batchNumber": "batch_123", "quantity": 500}, "expected": {"outcome": "Product batch addition successful", "status": "Batch Added"}}, {"name": "Failed Product Batch Addition", "description": "Verify that a manufacturer cannot add a new batch of product with invalid quantity", "input": {"manufacturerId": "manufacturer_67890", "productionHouseId": "house_001", "productName": "Gadget", "batchNumber": "batch_123", "quantity": -10}, "expected": {"outcome": "Product batch addition failed", "status": "Invalid Quantity"}}, {"name": "View Products in Production House", "description": "Verify that a manufacturer can view the list of products in their production houses", "input": {"manufacturerId": "manufacturer_67890", "productionHouseId": "house_001"}, "expected": {"outcome": "Products list retrieved successfully", "status": "Products Listed"}}], "bert_score": {"Precision": 0.935795247554779, "Recall": 0.9353122711181641, "F1": 0.9355536699295044}}
{"usecase": {"name": "Give lease an inventory", "scenario": "Manufacturer wants to give lease an empty inventory to another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer sets the lease terms and conditions"]}, "testcases": [{"name": "Lease Inventory", "description": "Verify that a manufacturer can successfully lease an empty inventory to another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to lease an inventory that is not empty.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory lease failed, because the inventory is not empty", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Inventory Lease", "description": "Verify that a manufacturer can successfully lease an inventory to another manufacturer", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "inventory_12345", "leaseTerms": "12 months", "leaseConditions": "Return in original condition"}, "expected": {"outcome": "Inventory lease successful", "status": "Lease Created"}}, {"name": "Failed Inventory Lease Due to Missing Terms", "description": "Verify that a manufacturer cannot lease an inventory if lease terms are not provided", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "inventory_12345", "leaseTerms": null, "leaseConditions": "Return in original condition"}, "expected": {"outcome": "Inventory lease failed", "status": "Missing Lease Terms"}}, {"name": "Failed Inventory Lease Due to Unregistered Manufacturer", "description": "Verify that an unregistered manufacturer cannot lease an inventory", "input": {"manufacturerId": "unregistered_manufacturer", "inventoryId": "inventory_12345", "leaseTerms": "12 months", "leaseConditions": "Return in original condition"}, "expected": {"outcome": "Inventory lease failed", "status": "Unregistered Manufacturer"}}, {"name": "Failed Inventory Lease Due to Nonexistent Inventory", "description": "Verify that a manufacturer cannot lease a nonexistent inventory", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "nonexistent_inventory", "leaseTerms": "12 months", "leaseConditions": "Return in original condition"}, "expected": {"outcome": "Inventory lease failed", "status": "Inventory Not Found"}}], "bert_score": {"Precision": 0.9268215298652649, "Recall": 0.9337636828422546, "F1": 0.9302796125411987}}
{"usecase": {"name": "Take lease an inventory", "scenario": "Manufacturer wants to take lease an empty inventory from another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer agrees to the lease terms and conditions"]}, "testcases": [{"name": "Take Lease", "description": "Verify that a manufacturer can successfully take lease an empty inventory from another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to take lease an inventory using invalid details, like taking lease for more than lease duration, not paying full payment.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "8 months", "leaseAmount": 5000}}, "expected": {"outcome": "Inventory lease failed, because the manufacturer did not agree to the lease terms and conditions", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Inventory Lease", "description": "Verify that a manufacturer can successfully lease an inventory", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "inventory_12345", "leaseTermsAccepted": true}, "expected": {"outcome": "Inventory lease successful", "status": "Lease Confirmed"}}, {"name": "Failed Inventory Lease Due to Unaccepted Terms", "description": "Verify that a manufacturer cannot lease an inventory if the lease terms are not accepted", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "inventory_12345", "leaseTermsAccepted": false}, "expected": {"outcome": "Inventory lease failed", "status": "Terms Not Accepted"}}, {"name": "Failed Inventory Lease Due to Invalid Inventory ID", "description": "Verify that a manufacturer cannot lease an inventory with an invalid inventory ID", "input": {"manufacturerId": "manufacturer_67890", "inventoryId": "invalid_inventory", "leaseTermsAccepted": true}, "expected": {"outcome": "Inventory lease failed", "status": "Invalid Inventory ID"}}, {"name": "Failed Inventory Lease Due to Unregistered Manufacturer", "description": "Verify that an unregistered manufacturer cannot lease an inventory", "input": {"manufacturerId": "unregistered_manufacturer", "inventoryId": "inventory_12345", "leaseTermsAccepted": true}, "expected": {"outcome": "Inventory lease failed", "status": "Manufacturer Not Registered"}}], "bert_score": {"Precision": 0.9210454821586609, "Recall": 0.9259019494056702, "F1": 0.9234673380851746}}
{"usecase": {"name": "Manage Manufacturer Status", "scenario": "Admin wants to manage the status of manufacturers on the platform.", "actors": "Admin", "preconditions": "Admin and manufacturer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of manufacturers", "Admin gives top batch to a manufacturer", "Admin bans a manufacturer", "Admin gives warning to a manufacturer", "Admin unbans a manufacturer"]}, "testcases": [{"name": "View Manufacturers", "description": "Verify that an admin can successfully view the list of manufacturers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Manufacturers retrieved successfully", "status": "Success"}}, {"name": "Give Top Batch", "description": "Verify that an admin can successfully give top batch to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Top batch given successfully", "status": "Success"}}, {"name": "Ban Manufacturer", "description": "Verify that an admin can successfully ban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Manufacturer", "description": "Verify that an admin can successfully unban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer unbanned successfully", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Manufacturer Top Batch Assignment", "description": "Verify that an admin can successfully assign a top batch to a manufacturer", "input": {"adminId": "admin_123", "manufacturerId": "manu_456", "action": "assignTopBatch"}, "expected": {"outcome": "Top batch assignment successful", "status": "Top Batch Assigned"}}, {"name": "Failed Manufacturer Top Batch Assignment", "description": "Verify that an admin cannot assign a top batch to a non-existent manufacturer", "input": {"adminId": "admin_123", "manufacturerId": "manu_999", "action": "assignTopBatch"}, "expected": {"outcome": "Top batch assignment failed", "status": "Manufacturer Not Found"}}, {"name": "Successful Manufacturer Ban", "description": "Verify that an admin can successfully ban a manufacturer", "input": {"adminId": "admin_123", "manufacturerId": "manu_456", "action": "banManufacturer"}, "expected": {"outcome": "Manufacturer ban successful", "status": "Manufacturer Banned"}}, {"name": "Failed Manufacturer Ban", "description": "Verify that an admin cannot ban a manufacturer without specifying a manufacturer ID", "input": {"adminId": "admin_123", "manufacturerId": null, "action": "banManufacturer"}, "expected": {"outcome": "Manufacturer ban failed", "status": "Invalid Manufacturer ID"}}, {"name": "Successful Manufacturer Warning", "description": "Verify that an admin can successfully give a warning to a manufacturer", "input": {"adminId": "admin_123", "manufacturerId": "manu_456", "action": "warnManufacturer"}, "expected": {"outcome": "Warning issued successfully", "status": "Warning Given"}}, {"name": "Failed Manufacturer Warning", "description": "Verify that an admin cannot give a warning to a manufacturer if the admin ID is invalid", "input": {"adminId": "admin_999", "manufacturerId": "manu_456", "action": "warnManufacturer"}, "expected": {"outcome": "Warning issuance failed", "status": "Invalid Admin ID"}}, {"name": "Successful Manufacturer Unban", "description": "Verify that an admin can successfully unban a manufacturer", "input": {"adminId": "admin_123", "manufacturerId": "manu_456", "action": "unbanManufacturer"}, "expected": {"outcome": "Manufacturer unban successful", "status": "Manufacturer Unbanned"}}, {"name": "Failed Manufacturer Unban", "description": "Verify that an admin cannot unban a manufacturer who is not banned", "input": {"adminId": "admin_123", "manufacturerId": "manu_789", "action": "unbanManufacturer"}, "expected": {"outcome": "Manufacturer unban failed", "status": "Manufacturer Not Banned"}}], "bert_score": {"Precision": 0.9297828078269958, "Recall": 0.9403116106987, "F1": 0.9350175857543945}}
{"usecase": {"name": "Manage Retailer Status", "scenario": "Admin wants to manage the status of retailers on the platform.", "actors": "Admin", "preconditions": "Admin and retailer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of retailers", "Admin bans a retailer", "Admin gives warning to a retailer", "Admin unbans a retailer"]}, "testcases": [{"name": "View Retailers", "description": "Verify that an admin can successfully view the list of retailers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Retailers retrieved successfully", "status": "Success"}}, {"name": "Ban Retailer", "description": "Verify that an admin can successfully ban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Retailer", "description": "Verify that an admin can successfully unban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer unbanned successfully", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Retailer Ban", "description": "Verify that an admin can successfully ban a retailer", "input": {"adminId": "admin_123", "retailerId": "retailer_456", "action": "ban"}, "expected": {"outcome": "Retailer ban successful", "status": "Retailer Banned"}}, {"name": "Failed Retailer Ban Due to Invalid Retailer ID", "description": "Verify that an admin cannot ban a retailer with an invalid retailer ID", "input": {"adminId": "admin_123", "retailerId": "invalid_retailer", "action": "ban"}, "expected": {"outcome": "Retailer ban failed", "status": "Invalid Retailer ID"}}, {"name": "Successful Retailer Warning", "description": "Verify that an admin can successfully give a warning to a retailer", "input": {"adminId": "admin_123", "retailerId": "retailer_456", "action": "warn"}, "expected": {"outcome": "Retailer warning successful", "status": "Retailer Warned"}}, {"name": "Failed Retailer Warning Due to Missing Admin ID", "description": "Verify that an admin cannot give a warning to a retailer if admin ID is missing", "input": {"adminId": null, "retailerId": "retailer_456", "action": "warn"}, "expected": {"outcome": "Retailer warning failed", "status": "Missing Admin ID"}}, {"name": "Successful Retailer Unban", "description": "Verify that an admin can successfully unban a retailer", "input": {"adminId": "admin_123", "retailerId": "retailer_456", "action": "unban"}, "expected": {"outcome": "Retailer unban successful", "status": "Retailer Unbanned"}}, {"name": "Failed Retailer Unban Due to Already Active Status", "description": "Verify that an admin cannot unban a retailer who is not banned", "input": {"adminId": "admin_123", "retailerId": "retailer_789", "action": "unban"}, "expected": {"outcome": "Retailer unban failed", "status": "Retailer Already Active"}}], "bert_score": {"Precision": 0.9358073472976685, "Recall": 0.9414406418800354, "F1": 0.9386155009269714}}
{"usecase": {"name": "Adding a new Category", "scenario": "Admin wants to add a new category to the platform.", "actors": "Admin", "preconditions": "Admin is registered with the platform and the category is not currently registered.", "steps": ["Admin logs in to the platform", "Admin submits new category details", "Admin adds a new category"]}, "testcases": [{"name": "Add New Category", "description": "Verify that an admin can successfully add a new category to the platform.", "input": {"categoryDetails": {"categoryName": "Furniture", "image": "furniture.jpg"}}, "expected": {"outcome": "Category added successfully", "status": "Success"}}, {"name": "Duplicate Category", "description": "Verify that the system handles the case where an admin tries to add a category that is already registered.", "input": {"categoryDetails": {"categoryName": "Electronics", "image": "electronics.jpg"}}, "expected": {"outcome": "Category addition failed, because the category is already registered", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Category Addition", "description": "Verify that an admin can successfully add a new category", "input": {"adminId": "admin_67890", "categoryName": "Electronics", "categoryDescription": "Devices and gadgets"}, "expected": {"outcome": "Category addition successful", "status": "Category Added"}}, {"name": "Failed Category Addition - Duplicate Category", "description": "Verify that an admin cannot add a category that already exists", "input": {"adminId": "admin_67890", "categoryName": "Electronics", "categoryDescription": "Devices and gadgets"}, "expected": {"outcome": "Category addition failed", "status": "Category Already Exists"}}, {"name": "Failed Category Addition - Missing Category Name", "description": "Verify that an admin cannot add a category without a name", "input": {"adminId": "admin_67890", "categoryName": null, "categoryDescription": "Devices and gadgets"}, "expected": {"outcome": "Category addition failed", "status": "Invalid Category Name"}}, {"name": "Failed Category Addition - Unauthorized Admin", "description": "Verify that an unauthorized admin cannot add a new category", "input": {"adminId": "unauthorized_admin", "categoryName": "Furniture", "categoryDescription": "Home and office furniture"}, "expected": {"outcome": "Category addition failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9323700666427612, "Recall": 0.940175473690033, "F1": 0.9362565279006958}}
{"usecase": {"name": "Prompt Creation and Marketplace", "scenario": "User creates a prompt and engages in the marketplace.", "actors": "Seller, Buyer, Admin", "preconditions": "User is registered and logged in.", "steps": ["Seller creates a new prompt", "Seller uploads prompt details and files", "Admin approves the prompt", "Buyer purchases the approved prompt"]}, "testcases": [{"name": "Valid Prompt Creation", "description": "Verify that a seller can successfully create a prompt.", "input": {"title": "Engaging Prompt", "description": "An exciting prompt description.", "type": "Inspiration", "price": 5.99, "prompt": "Write something engaging!", "engine": "GPT-3", "tipsToUse": "Follow the instructions carefully."}, "expected": {"outcome": "Prompt created successfully", "status": "Approved"}}, {"name": "Invalid Prompt Creation", "description": "Verify that the system handles the case where a seller tries to create an invalid prompt.", "input": {"title": "", "description": "An invalid prompt without a title.", "type": "Miscellaneous", "price": 2.99, "prompt": "Write something miscellaneous.", "engine": "DALL-E"}, "expected": {"outcome": "Prompt creation failed", "status": "Rejected"}}, {"name": "Prompt Purchase", "description": "Verify that a buyer can successfully purchase an approved prompt.", "input": {"promptId": "prompt123", "userId": "user456"}, "expected": {"outcome": "Prompt purchased successfully", "status": "Purchased"}}], "GPT4o_testcases": [{"name": "Successful Prompt Creation and Approval", "description": "Verify that a seller can successfully create a prompt and get it approved by the admin", "input": {"sellerId": "seller_12345", "promptTitle": "Creative Writing Prompt", "promptDetails": "A detailed guide on creative writing", "files": ["guide.pdf", "examples.docx"]}, "expected": {"outcome": "Prompt creation and approval successful", "status": "Prompt Approved"}}, {"name": "Failed Prompt Creation Due to Missing Details", "description": "Verify that a seller cannot create a prompt if any of the required details are missing", "input": {"sellerId": "seller_12345", "promptTitle": "", "promptDetails": "A detailed guide on creative writing", "files": ["guide.pdf", "examples.docx"]}, "expected": {"outcome": "Prompt creation failed", "status": "Missing Required Details"}}, {"name": "Successful Prompt Purchase", "description": "Verify that a buyer can successfully purchase an approved prompt", "input": {"buyerId": "buyer_67890", "promptId": "prompt_54321"}, "expected": {"outcome": "Prompt purchase successful", "status": "Purchase Completed"}}, {"name": "Failed Prompt Purchase Due to Unapproved Prompt", "description": "Verify that a buyer cannot purchase a prompt that has not been approved", "input": {"buyerId": "buyer_67890", "promptId": "prompt_98765"}, "expected": {"outcome": "Prompt purchase failed", "status": "Prompt Not Approved"}}, {"name": "Failed Prompt Creation Due to Invalid File Format", "description": "Verify that a seller cannot upload a prompt with invalid file formats", "input": {"sellerId": "seller_12345", "promptTitle": "Creative Writing Prompt", "promptDetails": "A detailed guide on creative writing", "files": ["guide.exe", "examples.bat"]}, "expected": {"outcome": "Prompt creation failed", "status": "Invalid File Format"}}], "bert_score": {"Precision": 0.9296606779098511, "Recall": 0.9346734285354614, "F1": 0.9321603178977966}}
{"usecase": {"name": "VIP Membership Purchase", "scenario": "User purchases a VIP membership.", "actors": "User, Admin", "preconditions": "User is registered and logged in.", "steps": ["User purchases a VIP membership", "Admin approves the VIP membership"]}, "testcases": [{"name": "Valid VIP Membership Purchase", "description": "Verify that a user can successfully purchase a VIP membership.", "input": {"membershipId": "vip123", "userId": "user789"}, "expected": {"outcome": "VIP membership purchased successfully", "status": "Approved"}}, {"name": "Invalid VIP Membership Purchase", "description": "Verify that the system handles the case where a user tries to purchase an invalid VIP membership.", "input": {"membershipId": "invalidVIP", "userId": "user456"}, "expected": {"outcome": "VIP membership purchase failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful VIP Membership Purchase", "description": "Verify that a user can successfully purchase a VIP membership and it gets approved by the admin", "input": {"userId": "user_67890", "membershipType": "VIP", "paymentMethod": "Credit Card", "paymentStatus": "Completed"}, "expected": {"outcome": "VIP membership purchase successful", "status": "Membership Approved"}}, {"name": "Failed VIP Membership Purchase Due to Payment Failure", "description": "Verify that a user cannot purchase a VIP membership if the payment fails", "input": {"userId": "user_67890", "membershipType": "VIP", "paymentMethod": "Credit Card", "paymentStatus": "Failed"}, "expected": {"outcome": "VIP membership purchase failed", "status": "Payment Error"}}, {"name": "Failed VIP Membership Purchase Due to Missing Information", "description": "Verify that a user cannot purchase a VIP membership if any required information is missing", "input": {"userId": "user_67890", "membershipType": null, "paymentMethod": "Credit Card", "paymentStatus": "Completed"}, "expected": {"outcome": "VIP membership purchase failed", "status": "Incomplete Information"}}, {"name": "Successful VIP Membership Purchase with Admin Approval Delay", "description": "Verify that a user can purchase a VIP membership but the approval is delayed by the admin", "input": {"userId": "user_67890", "membershipType": "VIP", "paymentMethod": "Credit Card", "paymentStatus": "Completed"}, "expected": {"outcome": "VIP membership purchase pending", "status": "Awaiting Admin Approval"}}], "bert_score": {"Precision": 0.935431718826294, "Recall": 0.9460321068763733, "F1": 0.9407020807266235}}
{"usecase": {"name": "User Rating", "scenario": "User rates a prompt seller.", "actors": "Buyer, Seller", "preconditions": "User has purchased a prompt.", "steps": ["Buyer rates the prompt seller"]}, "testcases": [{"name": "Valid Rating", "description": "Verify that a buyer can successfully rate a prompt seller.", "input": {"reviewerId": "user123", "promptId": "prompt789", "rating": 4, "comment": "Great seller!"}, "expected": {"outcome": "Rating submitted successfully", "status": "Submitted"}}, {"name": "Invalid Rating", "description": "Verify that the system handles the case where a buyer tries to submit an invalid rating.", "input": {"reviewerId": "user789", "promptId": "prompt123", "rating": 6}, "expected": {"outcome": "Rating submission failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Prompt Seller Rating", "description": "Verify that a buyer can successfully rate a prompt seller after purchase", "input": {"buyerId": "buyer_67890", "sellerId": "seller_12345", "rating": 5, "comment": "Excellent service!"}, "expected": {"outcome": "Rating submitted successfully", "status": "Rating Recorded"}}, {"name": "Failed Prompt Seller Rating Due to Missing Rating", "description": "Verify that a buyer cannot submit a rating without providing a rating value", "input": {"buyerId": "buyer_67890", "sellerId": "seller_12345", "rating": null, "comment": "Excellent service!"}, "expected": {"outcome": "Rating submission failed", "status": "Rating Value Missing"}}, {"name": "Failed Prompt Seller Rating Due to Invalid Rating Value", "description": "Verify that a buyer cannot submit a rating with an invalid rating value", "input": {"buyerId": "buyer_67890", "sellerId": "seller_12345", "rating": 6, "comment": "Excellent service!"}, "expected": {"outcome": "Rating submission failed", "status": "Invalid Rating Value"}}, {"name": "Successful Prompt Seller Rating with Minimum Rating", "description": "Verify that a buyer can successfully rate a prompt seller with the minimum rating value", "input": {"buyerId": "buyer_67890", "sellerId": "seller_12345", "rating": 1, "comment": "Poor service"}, "expected": {"outcome": "Rating submitted successfully", "status": "Rating Recorded"}}], "bert_score": {"Precision": 0.9442634582519531, "Recall": 0.953548789024353, "F1": 0.9488834142684937}}
{"usecase": {"name": "Search and Filter", "scenario": "User searches for prompts and applies filters.", "actors": "User", "preconditions": "User is logged in.", "steps": ["User enters search criteria", "User applies filters"]}, "testcases": [{"name": "Valid Search and Filter", "description": "Verify that a user can successfully search for prompts and apply filters.", "input": {"searchQuery": "Engaging prompts", "filters": {"type": "Inspiration", "price": 5.99, "engine": "GPT-3"}}, "expected": {"outcome": "Search and filter successful", "results": "Found prompts matching criteria"}}, {"name": "Invalid Search and Filter", "description": "Verify that the system handles the case where a user enters invalid search criteria.", "input": {"searchQuery": "", "filters": {"type": "InvalidType"}}, "expected": {"outcome": "Search and filter failed", "results": "No matching prompts"}}], "GPT4o_testcases": [{"name": "Successful Search with Filters", "description": "Verify that a user can successfully search and apply filters to get the desired results", "input": {"userId": "user_67890", "searchCriteria": "Science Fiction", "filters": {"genre": "Sci-Fi", "year": "2021", "rating": "4+"}}, "expected": {"outcome": "Search and filter applied successfully", "status": "Results Displayed"}}, {"name": "Failed Search with Invalid Filters", "description": "Verify that a user cannot apply invalid filters", "input": {"userId": "user_67890", "searchCriteria": "Science Fiction", "filters": {"genre": "Sci-Fi", "year": "abcd", "rating": "4+"}}, "expected": {"outcome": "Search failed due to invalid filters", "status": "Invalid Filter"}}, {"name": "Search with No Results", "description": "Verify that a user receives a no results message when search criteria and filters yield no results", "input": {"userId": "user_67890", "searchCriteria": "Unknown Genre", "filters": {"genre": "Unknown", "year": "2021", "rating": "5"}}, "expected": {"outcome": "No results found", "status": "No Results"}}, {"name": "Search with Empty Criteria", "description": "Verify that a user cannot perform a search with empty search criteria", "input": {"userId": "user_67890", "searchCriteria": "", "filters": {"genre": "Sci-Fi", "year": "2021", "rating": "4+"}}, "expected": {"outcome": "Search failed due to empty criteria", "status": "Empty Search Criteria"}}], "bert_score": {"Precision": 0.9332886934280396, "Recall": 0.9385967254638672, "F1": 0.9359351396560669}}
{"usecase": {"name": "Discussion Forum Participation", "scenario": "User engages in the discussion forum.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User posts a discussion topic", "User replies to a discussion topic"]}, "testcases": [{"name": "Valid Discussion Post", "description": "Verify that a user can successfully post a discussion topic.", "input": {"userId": "user123", "topic": "Discussing prompt creation techniques", "content": "Share your experiences and tips!"}, "expected": {"outcome": "Discussion post successful", "status": "Posted"}}, {"name": "Invalid Discussion Post", "description": "Verify that the system handles the case where a user tries to post an invalid discussion topic.", "input": {"userId": "user456", "topic": "", "content": "Invalid content"}, "expected": {"outcome": "Discussion post failed", "status": "Not Posted"}}, {"name": "Discussion Reply", "description": "Verify that a user can successfully reply to a discussion topic.", "input": {"userId": "user789", "topicId": "topic123", "content": "Great insights!"}, "expected": {"outcome": "Discussion reply successful", "status": "Replied"}}], "GPT4o_testcases": [{"name": "Successful Discussion Topic Post", "description": "Verify that a user can successfully post a discussion topic", "input": {"userId": "user_67890", "topicTitle": "Benefits of Online Learning", "topicContent": "Online learning offers flexibility and convenience."}, "expected": {"outcome": "Discussion topic posted successfully", "status": "Topic Posted"}}, {"name": "Failed Discussion Topic Post", "description": "Verify that a user cannot post a discussion topic with an empty title", "input": {"userId": "user_67890", "topicTitle": "", "topicContent": "Online learning offers flexibility and convenience."}, "expected": {"outcome": "Discussion topic post failed", "status": "Invalid Topic Title"}}, {"name": "Successful Discussion Reply", "description": "Verify that a user can successfully reply to a discussion topic", "input": {"userId": "user_67890", "topicId": "topic_12345", "replyContent": "I agree with the benefits mentioned."}, "expected": {"outcome": "Reply posted successfully", "status": "Reply Posted"}}, {"name": "Failed Discussion Reply", "description": "Verify that a user cannot reply to a discussion topic with empty content", "input": {"userId": "user_67890", "topicId": "topic_12345", "replyContent": ""}, "expected": {"outcome": "Reply post failed", "status": "Invalid Reply Content"}}], "bert_score": {"Precision": 0.9487850666046143, "Recall": 0.9537445902824402, "F1": 0.9512583613395691}}
{"usecase": {"name": "Prompt Approval by Admin", "scenario": "Admin reviews and approves prompts submitted by sellers.", "actors": "Admin", "preconditions": "Admin is logged in.", "steps": ["Admin reviews submitted prompts", "Admin approves or rejects the prompts"]}, "testcases": [{"name": "Valid Prompt Approval", "description": "Verify that the admin can successfully approve a submitted prompt.", "input": {"adminId": "admin123", "promptId": "prompt456"}, "expected": {"outcome": "Prompt approved successfully", "status": "Approved"}}, {"name": "Valid Prompt Rejection", "description": "Verify that the admin can successfully reject a submitted prompt.", "input": {"adminId": "admin456", "promptId": "prompt789"}, "expected": {"outcome": "Prompt rejected successfully", "status": "Rejected"}}, {"name": "Invalid Prompt Approval", "description": "Verify that the system handles the case where the admin tries to approve an invalid prompt.", "input": {"adminId": "admin789", "promptId": "invalidPrompt"}, "expected": {"outcome": "Prompt approval failed", "status": "Not Approved"}}], "GPT4o_testcases": [{"name": "Successful Prompt Approval", "description": "Verify that an admin can successfully approve a valid prompt submitted by a seller", "input": {"adminId": "admin_67890", "promptId": "prompt_12345", "action": "approve"}, "expected": {"outcome": "Prompt approval successful", "status": "Prompt Approved"}}, {"name": "Failed Prompt Approval Due to Invalid Prompt", "description": "Verify that an admin cannot approve a prompt if the prompt is invalid", "input": {"adminId": "admin_67890", "promptId": "prompt_invalid", "action": "approve"}, "expected": {"outcome": "Prompt approval failed", "status": "Invalid Prompt"}}, {"name": "Successful Prompt Rejection", "description": "Verify that an admin can successfully reject a prompt submitted by a seller", "input": {"adminId": "admin_67890", "promptId": "prompt_12345", "action": "reject"}, "expected": {"outcome": "Prompt rejection successful", "status": "Prompt Rejected"}}, {"name": "Failed Prompt Rejection Due to Missing Admin ID", "description": "Verify that an admin cannot reject a prompt if the admin ID is missing", "input": {"adminId": null, "promptId": "prompt_12345", "action": "reject"}, "expected": {"outcome": "Prompt rejection failed", "status": "Missing Admin ID"}}], "bert_score": {"Precision": 0.9438897967338562, "Recall": 0.9480345845222473, "F1": 0.9459576606750488}}
{"usecase": {"name": "Asset Group Creation", "scenario": "User creates a new crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, User must have coins in the wallet to add an initial token.", "steps": ["User enters the name for the new crypto asset group", "User adds a description", "User adds an initial token (Optional)"]}, "testcases": [{"name": "Valid Asset Group Creation", "description": "Verify that a user can successfully create a new crypto asset group.", "input": {"assetGroupDetails": {"name": "MyAssetGroup", "description": "A diversified portfolio of crypto assets", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation successful", "status": "Created"}}, {"name": "Asset Group Creation with Initial Coin", "description": "Verify that a user can create an asset group with an initial coin.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin successful", "status": "Created"}}, {"name": "Empty Asset Group Details", "description": "Verify that the system handles the case where a user submits an empty asset group creation request.", "input": {"assetGroupDetails": {"name": "", "description": "", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Initial Coin not in Wallet", "description": "Verify that the system handles the case where a user submits an asset group creation request with a token that is not present in the wallet.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Incorrect Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an incorrect wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "IncorrectWallet"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Empty Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an empty wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Asset Group Creation with Initial Token", "description": "Verify that a user can successfully create a new crypto asset group with an initial token", "input": {"userId": "user_67890", "groupName": "Crypto Investments", "description": "Group for long-term crypto investments", "initialToken": "Bitcoin"}, "expected": {"outcome": "Asset group creation successful", "status": "Group Created"}}, {"name": "Successful Asset Group Creation without Initial Token", "description": "Verify that a user can successfully create a new crypto asset group without an initial token", "input": {"userId": "user_67890", "groupName": "Crypto Savings", "description": "Group for saving crypto assets", "initialToken": null}, "expected": {"outcome": "Asset group creation successful", "status": "Group Created"}}, {"name": "Failed Asset Group Creation with Empty Group Name", "description": "Verify that a user cannot create a new crypto asset group if the group name is empty", "input": {"userId": "user_67890", "groupName": "", "description": "Group for trading crypto assets", "initialToken": "Ethereum"}, "expected": {"outcome": "Asset group creation failed", "status": "Invalid Group Name"}}, {"name": "Failed Asset Group Creation with Insufficient Coins", "description": "Verify that a user cannot create a new crypto asset group with an initial token if there are insufficient coins in the wallet", "input": {"userId": "user_67890", "groupName": "Crypto Ventures", "description": "Group for venture crypto investments", "initialToken": "Litecoin"}, "expected": {"outcome": "Asset group creation failed", "status": "Insufficient Coins"}}], "bert_score": {"Precision": 0.9376180171966553, "Recall": 0.9452259540557861, "F1": 0.9414066076278687}}
{"usecase": {"name": "Add Tokens to Asset Group", "scenario": "User adds valid tokens to an existing crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, has an existing crypto asset group, and possesses the necessary wallet(s).", "steps": ["User selects an existing crypto asset group", "User adds valid tokens to the selected asset group"]}, "testcases": [{"name": "Valid Token Addition - Same Wallet", "description": "Verify that the user can successfully add valid tokens from the same wallet to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}, {"name": "Cardano", "symbol": "ADA", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Valid Token Addition - Different Wallets", "description": "Verify that the user can successfully add valid tokens from different wallets to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet456"}, {"name": "Litecoin", "symbol": "LTC", "walletAddress": "UserWallet789"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Empty Token List", "description": "Verify that the system handles the case where the user tries to add an empty list of tokens to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": []}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Token Not in Wallet", "description": "Verify that the system handles the case where the user tries to add tokens not present in their wallet to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "InvalidToken", "symbol": "INV", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Empty Wallet Address", "description": "Verify that the system handles the case where the user tries to add tokens with empty wallet address to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}], "GPT4o_testcases": [{"name": "Successful Token Addition", "description": "Verify that a user can successfully add valid tokens to an existing crypto asset group", "input": {"userId": "user_67890", "assetGroupId": "group_123", "tokens": ["BTC", "ETH", "LTC"]}, "expected": {"outcome": "Tokens added successfully", "status": "Tokens Added"}}, {"name": "Failed Token Addition Due to Invalid Token", "description": "Verify that a user cannot add invalid tokens to an existing crypto asset group", "input": {"userId": "user_67890", "assetGroupId": "group_123", "tokens": ["BTC", "INVALID_TOKEN", "LTC"]}, "expected": {"outcome": "Token addition failed", "status": "Invalid Token"}}, {"name": "Failed Token Addition Due to Empty Token List", "description": "Verify that a user cannot add tokens if the token list is empty", "input": {"userId": "user_67890", "assetGroupId": "group_123", "tokens": []}, "expected": {"outcome": "Token addition failed", "status": "No Tokens Provided"}}, {"name": "Failed Token Addition Due to Nonexistent Asset Group", "description": "Verify that a user cannot add tokens to a nonexistent crypto asset group", "input": {"userId": "user_67890", "assetGroupId": "nonexistent_group", "tokens": ["BTC", "ETH"]}, "expected": {"outcome": "Token addition failed", "status": "Asset Group Not Found"}}], "bert_score": {"Precision": 0.9332363605499268, "Recall": 0.9334054589271545, "F1": 0.933320939540863}}
{"usecase": {"name": "View Assets in Asset Group", "scenario": "User wants to view the existing crypto assets within asset groups.", "actors": "User", "preconditions": "User is registered in the system and has at least one crypto asset group with assets.", "steps": ["User navigates to the 'Asset Groups' section of the application", "User selects a specific asset group to view", "User views the details of the selected asset group, including its name, description, and associated assets"]}, "testcases": [{"name": "View Specific Asset Group", "description": "Verify that the user can successfully view the details of a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets"}, "expected": {"outcome": "Asset group details viewed successfully", "access": "Allowed"}}, {"name": "View Assets in a Group", "description": "Verify that the user can successfully view the assets within a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets", "selectedAsset": "Bitcoin"}, "expected": {"outcome": "Asset within the group viewed successfully", "access": "Allowed"}}], "GPT4o_testcases": [{"name": "Successful Asset Group View", "description": "Verify that a user can successfully view the details of an asset group", "input": {"userId": "user_67890", "assetGroupId": "group_123", "action": "view"}, "expected": {"outcome": "Asset group details displayed successfully", "status": "View Successful"}}, {"name": "Failed Asset Group View - No Asset Group", "description": "Verify that a user cannot view asset group details if the asset group does not exist", "input": {"userId": "user_67890", "assetGroupId": "group_999", "action": "view"}, "expected": {"outcome": "Asset group details not found", "status": "View Failed"}}, {"name": "Failed Asset Group View - Unregistered User", "description": "Verify that an unregistered user cannot view any asset group details", "input": {"userId": "user_00000", "assetGroupId": "group_123", "action": "view"}, "expected": {"outcome": "User not registered", "status": "View Failed"}}, {"name": "Successful Asset Group View with Multiple Assets", "description": "Verify that a user can view an asset group with multiple assets", "input": {"userId": "user_67890", "assetGroupId": "group_456", "action": "view"}, "expected": {"outcome": "Asset group with multiple assets displayed successfully", "status": "View Successful"}}, {"name": "Failed Asset Group View - Empty Asset Group", "description": "Verify that a user cannot view details of an empty asset group", "input": {"userId": "user_67890", "assetGroupId": "group_789", "action": "view"}, "expected": {"outcome": "Asset group is empty", "status": "View Failed"}}], "bert_score": {"Precision": 0.9172564148902893, "Recall": 0.9259291887283325, "F1": 0.9215723872184753}}
{"usecase": {"name": "Asset Management Request", "scenario": "User requests an experienced personal to manage user's assets.", "actors": "User, System", "preconditions": "User is registered in the system.", "steps": ["User selects token type(s) to be invested in", "User enters the amount to invest", "User selects the expected profit percentage", "System dynamically populates the list of available experienced personals based on user's selections", "User selects an experienced personal from the provided list", "User submits the asset management request"]}, "testcases": [{"name": "Valid Asset Management Request", "description": "Verify that a user can successfully request an experienced personal to manage user's assets.", "input": {"tokenTypes": ["Bitcoin", "Ethereum"], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedExperiencedPersonal": "JohnDoe123"}, "expected": {"outcome": "Asset management request submitted successfully", "status": "Submitted"}}, {"name": "Empty Token Types", "description": "Verify that the system handles the case where the user tries to submit a request without specifying token types.", "input": {"tokenTypes": [], "investmentAmount": 5000, "expectedProfitPercentage": 8, "selectedExperiencedPersonal": "JohnDoe456"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Negative Investment Amount", "description": "Verify that the system handles the case where the user enters a negative investment amount.", "input": {"tokenTypes": ["Bitcoin"], "investmentAmount": -2000, "expectedProfitPercentage": 12, "selectedExperiencedPersonal": "JohnDoe789"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Invalid Expected Profit Percentage", "description": "Verify that the system handles the case where the user selects an invalid expected profit percentage.", "input": {"tokenTypes": ["Ethereum"], "investmentAmount": 8000, "expectedProfitPercentage": null, "selectedExperiencedPersonal": "JohnDoe101"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Asset Management Request", "description": "Verify that a user can successfully request asset management with valid inputs", "input": {"userId": "user_67890", "tokenTypes": ["TokenA", "TokenB"], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedPersonal": "personal_123"}, "expected": {"outcome": "Asset management request successful", "status": "Request Submitted"}}, {"name": "Failed Asset Management Request Due to Missing Token Type", "description": "Verify that a user cannot request asset management if no token type is selected", "input": {"userId": "user_67890", "tokenTypes": [], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedPersonal": "personal_123"}, "expected": {"outcome": "Asset management request failed", "status": "Invalid Token Type"}}, {"name": "Failed Asset Management Request Due to Invalid Investment Amount", "description": "Verify that a user cannot request asset management with a negative investment amount", "input": {"userId": "user_67890", "tokenTypes": ["TokenA"], "investmentAmount": -5000, "expectedProfitPercentage": 10, "selectedPersonal": "personal_123"}, "expected": {"outcome": "Asset management request failed", "status": "Invalid Investment Amount"}}, {"name": "Failed Asset Management Request Due to Missing Experienced Personal", "description": "Verify that a user cannot request asset management if no experienced personal is selected", "input": {"userId": "user_67890", "tokenTypes": ["TokenA"], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedPersonal": null}, "expected": {"outcome": "Asset management request failed", "status": "No Personal Selected"}}, {"name": "Edge Case: Maximum Investment Amount", "description": "Verify that a user can request asset management with the maximum allowable investment amount", "input": {"userId": "user_67890", "tokenTypes": ["TokenA"], "investmentAmount": 1000000, "expectedProfitPercentage": 15, "selectedPersonal": "personal_123"}, "expected": {"outcome": "Asset management request successful", "status": "Request Submitted"}}], "bert_score": {"Precision": 0.9474620819091797, "Recall": 0.9458419680595398, "F1": 0.9466512799263}}
{"usecase": {"name": "Responds to Asset Management Request", "scenario": "Experienced personal receives an asset management request and responds to either accept or reject the request.", "actors": "Experienced Personal", "preconditions": "Experienced personal is registered in the system and has received an asset management request.", "steps": ["Experienced personal receives the asset management request notification", "Experienced personal reviews the details of the request including token types, investment amount, and expected profit percentage", "Experienced personal decides to either accept or reject the request", "Experienced personal provides additional comments (optional)", "Experienced personal submits the response"]}, "testcases": [{"name": "Experienced Personal Accepts Request", "description": "Verify that an experienced personal can successfully accept an asset management request.", "input": {"requestID": "12345", "response": "Accept", "comments": "I am excited to manage your assets!"}, "expected": {"outcome": "Asset management request accepted successfully", "status": "Accepted"}}, {"name": "Experienced Personal Rejects Request", "description": "Verify that an experienced personal can successfully reject an asset management request.", "input": {"requestID": "67890", "response": "Reject", "comments": "I am currently unable to take on new clients."}, "expected": {"outcome": "Asset management request rejected successfully", "status": "Rejected"}}, {"name": "Missing Response", "description": "Verify that the system handles the case where the experienced personal submits a response without specifying accept or reject.", "input": {"requestID": "24680", "comments": "I am currently evaluating the request."}, "expected": {"outcome": "Asset management request response unsuccessful", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Asset Management Request Acceptance", "description": "Verify that an experienced personal can successfully accept an asset management request", "input": {"experiencedPersonalId": "exp_67890", "requestId": "req_12345", "decision": "Accept", "comments": "Looking forward to managing this asset."}, "expected": {"outcome": "Asset management request accepted successfully", "status": "Request Accepted"}}, {"name": "Successful Asset Management Request Rejection", "description": "Verify that an experienced personal can successfully reject an asset management request", "input": {"experiencedPersonalId": "exp_67890", "requestId": "req_12345", "decision": "Reject", "comments": "Not interested in this asset at the moment."}, "expected": {"outcome": "Asset management request rejected successfully", "status": "Request Rejected"}}, {"name": "Failed Asset Management Request Response Due to Missing Decision", "description": "Verify that an experienced personal cannot submit a response without a decision", "input": {"experiencedPersonalId": "exp_67890", "requestId": "req_12345", "decision": null, "comments": "Decision is missing."}, "expected": {"outcome": "Asset management request response failed", "status": "Decision Required"}}, {"name": "Failed Asset Management Request Response Due to Invalid Request ID", "description": "Verify that an experienced personal cannot respond to a request with an invalid request ID", "input": {"experiencedPersonalId": "exp_67890", "requestId": "invalid_req", "decision": "Accept", "comments": "Invalid request ID provided."}, "expected": {"outcome": "Asset management request response failed", "status": "Invalid Request ID"}}], "bert_score": {"Precision": 0.9457116723060608, "Recall": 0.947529137134552, "F1": 0.9466195702552795}}
{"usecase": {"name": "User Assigns or Refuses Accepted Personal to Manage Assets", "scenario": "User either assigns or refuses the experienced personal who has accepted the asset management request to actually manage the user's assets.", "actors": "User", "preconditions": "User has received an acceptance response from an experienced personal for the asset management request.", "steps": ["User receives the acceptance notification from the experienced personal", "User reviews the details of the acceptance including personal's details and comments", "User decides to either confirm the assignment or refuse it", "If confirming, user provides additional instructions or preferences (optional)", "User submits the assignment or refusal"]}, "testcases": [{"name": "Confirm Assignment", "description": "Verify that the user can successfully confirm the assignment of the accepted experienced personal to manage the assets.", "input": {"requestID": "12345", "decision": "Confirm", "acceptedPersonal": "JohnDoe123", "additionalInstructions": "Please focus on long-term growth."}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}, {"name": "Refuse Assignment", "description": "Verify that the user can successfully refuse the assignment of the accepted experienced personal.", "input": {"requestID": "12345", "decision": "Refuse", "acceptedPersonal": "JohnDoe123"}, "expected": {"outcome": "Assignment refused successfully", "status": "Refused"}}, {"name": "Invalid Request ID", "description": "Verify that the system handles the case where an invalid request ID is provided.", "input": {"requestID": "InvalidID", "decision": "Confirm", "acceptedPersonal": "JohnDoe456", "additionalInstructions": "Please focus on short-term gains."}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Missing Decision", "description": "Verify that the system handles the case where the user tries to submit without specifying the decision.", "input": {"requestID": "67890", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Empty Additional Instructions", "description": "Verify that the user can successfully submit an assignment without providing additional instructions.", "input": {"requestID": "13579", "decision": "Confirm", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}], "GPT4o_testcases": [{"name": "Successful Asset Management Assignment", "description": "Verify that a user can successfully assign the experienced personal to manage assets", "input": {"userId": "user_67890", "personalId": "personal_12345", "decision": "confirm", "instructions": "Manage all assets with priority on real estate"}, "expected": {"outcome": "Asset management assignment successful", "status": "Assignment Confirmed"}}, {"name": "Successful Asset Management Refusal", "description": "Verify that a user can successfully refuse the experienced personal to manage assets", "input": {"userId": "user_67890", "personalId": "personal_12345", "decision": "refuse", "instructions": null}, "expected": {"outcome": "Asset management refusal successful", "status": "Assignment Refused"}}, {"name": "Failed Asset Management Assignment Due to Missing Decision", "description": "Verify that a user cannot proceed without making a decision to assign or refuse", "input": {"userId": "user_67890", "personalId": "personal_12345", "decision": null, "instructions": "Manage all assets with priority on real estate"}, "expected": {"outcome": "Asset management assignment failed", "status": "Decision Required"}}, {"name": "Failed Asset Management Assignment Due to Invalid Personal ID", "description": "Verify that a user cannot assign an invalid personal ID to manage assets", "input": {"userId": "user_67890", "personalId": "invalid_personal_000", "decision": "confirm", "instructions": "Manage all assets with priority on real estate"}, "expected": {"outcome": "Asset management assignment failed", "status": "Invalid Personal ID"}}], "bert_score": {"Precision": 0.9489352703094482, "Recall": 0.950713574886322, "F1": 0.9498235583305359}}
{"usecase": {"name": "Registration", "scenario": "User signs up for an account on Jobify platform.", "actors": "User", "preconditions": "User visits Jobify platform for the first time.", "steps": ["User provides required information including username, email, password, full name, profile details, contact information, privacy settings, and job preferences.", "User submits the registration form."]}, "testcases": [{"name": "Valid User Registration", "description": "Verify that a user can successfully register with valid information.", "input": {"username": "john_doe", "email": "john.doe@example.com", "password": "securehashedpassword123", "fullName": "John Doe", "profile": {"location": "City, Country", "skills": ["Java", "JavaScript", "SQL"], "education": "Bachelor's in Computer Science"}, "contact": {"phone": "123-456-7890", "email": "john.doe@example.com"}, "privacySettings": {"notifications": true, "publicProfile": true}, "job_preferences": {"locations": "New York", "salary_range": "$10k", "job_type": ["Software Engineer", "Web Developer", "ML Engineer"]}}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Incomplete User Registration", "description": "Verify that the system handles the case where a user tries to register with incomplete information.", "input": {"username": "jane_smith", "email": "jane.smith@example.com"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Registration", "description": "Verify that a user can successfully register with all valid information", "input": {"username": "new_user", "email": "newuser@example.com", "password": "SecurePass123", "fullName": "New User", "profileDetails": "Software Developer", "contactInformation": "0123456789", "privacySettings": "Public", "jobPreferences": "Full-time"}, "expected": {"outcome": "Registration successful", "status": "Account Created"}}, {"name": "Failed Registration Due to Missing Information", "description": "Verify that registration fails if any required information is missing", "input": {"username": "new_user", "email": "newuser@example.com", "password": null, "fullName": "New User", "profileDetails": "Software Developer", "contactInformation": "0123456789", "privacySettings": "Public", "jobPreferences": "Full-time"}, "expected": {"outcome": "Registration failed", "status": "Missing Information"}}, {"name": "Failed Registration Due to Invalid Email", "description": "Verify that registration fails if the email format is invalid", "input": {"username": "new_user", "email": "invalid-email", "password": "SecurePass123", "fullName": "New User", "profileDetails": "Software Developer", "contactInformation": "0123456789", "privacySettings": "Public", "jobPreferences": "Full-time"}, "expected": {"outcome": "Registration failed", "status": "Invalid Email Format"}}, {"name": "Failed Registration Due to Weak Password", "description": "Verify that registration fails if the password is too weak", "input": {"username": "new_user", "email": "newuser@example.com", "password": "123", "fullName": "New User", "profileDetails": "Software Developer", "contactInformation": "0123456789", "privacySettings": "Public", "jobPreferences": "Full-time"}, "expected": {"outcome": "Registration failed", "status": "Weak Password"}}, {"name": "Successful Registration with Minimum Required Information", "description": "Verify that a user can register with only the minimum required information", "input": {"username": "minimal_user", "email": "minimaluser@example.com", "password": "SecurePass123", "fullName": "Minimal User", "profileDetails": null, "contactInformation": null, "privacySettings": null, "jobPreferences": null}, "expected": {"outcome": "Registration successful", "status": "Account Created"}}], "bert_score": {"Precision": 0.9294021725654602, "Recall": 0.9368945956230164, "F1": 0.9331333041191101}}
{"usecase": {"name": "Login", "scenario": "Registered user logs in to the Jobify platform.", "actors": "User", "preconditions": "User is registered on the Jobify platform.", "steps": ["User enters username and password.", "User submits the login form."]}, "testcases": [{"name": "Valid User Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "john_doe", "password": "securehashedpassword123"}, "expected": {"outcome": "Login successful", "status": "Authenticated"}}, {"name": "Invalid User Login", "description": "Verify that the system handles the case where a user tries to log in with incorrect credentials.", "input": {"username": "john_doe", "password": "incorrectpassword"}, "expected": {"outcome": "Login failed", "status": "Unauthenticated"}}], "GPT4o_testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with valid credentials", "input": {"username": "valid_user", "password": "correct_password"}, "expected": {"outcome": "Login successful", "status": "User logged in"}}, {"name": "Failed Login with Incorrect Password", "description": "Verify that a user cannot log in with an incorrect password", "input": {"username": "valid_user", "password": "wrong_password"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "Failed Login with Nonexistent Username", "description": "Verify that a user cannot log in with a username that does not exist", "input": {"username": "nonexistent_user", "password": "any_password"}, "expected": {"outcome": "Login failed", "status": "Username not found"}}, {"name": "Failed Login with Empty Credentials", "description": "Verify that a user cannot log in with empty username and password fields", "input": {"username": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Empty credentials"}}, {"name": "Failed Login with SQL Injection", "description": "Verify that a user cannot log in using SQL injection", "input": {"username": "valid_user", "password": "' OR '1'='1"}, "expected": {"outcome": "Login failed", "status": "Invalid credentials"}}], "bert_score": {"Precision": 0.9545785188674927, "Recall": 0.9595645666122437, "F1": 0.9570650458335876}}
{"usecase": {"name": "Job Search", "scenario": "User searches for jobs based on preferences and applies for suitable positions.", "actors": "User", "preconditions": "User is logged into the Jobify platform.", "steps": ["User enters search criteria including job type, location, and salary range.", "User views the list of jobs matching the search criteria.", "User selects a job to view details."]}, "testcases": [{"name": "Valid Job Search", "description": "Verify that a user can successfully search for jobs and apply for suitable positions.", "input": {"searchCriteria": {"jobType": "Software Engineer", "location": "New York", "salaryRange": "$80k - $100k"}}, "expected": {"outcome": "Job search and application successful", "status": "Completed"}}, {"name": "Empty Job Search Results", "description": "Verify that the system handles the case where the job search yields no results.", "input": {"searchCriteria": {"jobType": "Data Analyst", "location": "Los Angeles", "salaryRange": "$70k - $90k"}}, "expected": {"outcome": "Job search yielded no results", "status": "No jobs found"}}], "GPT4o_testcases": [{"name": "Successful Job Search and View", "description": "Verify that a user can successfully search for jobs and view job details", "input": {"userId": "user_67890", "jobType": "Full-time", "location": "New York", "salaryRange": "50000-70000"}, "expected": {"outcome": "Job search successful", "status": "Jobs Listed"}}, {"name": "Failed Job Search with Invalid Criteria", "description": "Verify that a user cannot search for jobs with invalid criteria", "input": {"userId": "user_67890", "jobType": "", "location": "New York", "salaryRange": "50000-70000"}, "expected": {"outcome": "Job search failed", "status": "Invalid Search Criteria"}}, {"name": "Job Search with No Results", "description": "Verify that a user receives a no results message when no jobs match the search criteria", "input": {"userId": "user_67890", "jobType": "Part-time", "location": "Remote", "salaryRange": "100000-150000"}, "expected": {"outcome": "No jobs found", "status": "No Results"}}, {"name": "View Job Details Successfully", "description": "Verify that a user can view details of a selected job", "input": {"userId": "user_67890", "jobId": "job_12345"}, "expected": {"outcome": "Job details displayed", "status": "Details Viewed"}}, {"name": "Failed to View Job Details with Invalid Job ID", "description": "Verify that a user cannot view job details with an invalid job ID", "input": {"userId": "user_67890", "jobId": "invalid_job_id"}, "expected": {"outcome": "Job details not found", "status": "Invalid Job ID"}}], "bert_score": {"Precision": 0.9413868188858032, "Recall": 0.9493962526321411, "F1": 0.9453745484352112}}
{"usecase": {"name": "Apply for Jobs", "scenario": "Employee submits job applications through the platform.", "actors": "Employee", "preconditions": "Employee has selected a job to apply for.", "steps": ["Employee uploads resume and cover letter.", "Employee submits the application."]}, "testcases": [{"name": "Valid Job Application", "description": "Verify that an employee can successfully submit a job application.", "input": {"jobID": "67890", "resume": "employee_resume.pdf", "coverLetter": "cover_letter.txt"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Coverpage", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "coverLetter": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}], "GPT4o_testcases": [{"name": "Successful Job Application Submission", "description": "Verify that an employee can successfully submit a job application with all required documents.", "input": {"employeeId": "emp_67890", "resume": "resume.pdf", "coverLetter": "cover_letter.pdf"}, "expected": {"outcome": "Job application submitted successfully", "status": "Application Submitted"}}, {"name": "Failed Job Application Submission Due to Missing Resume", "description": "Verify that an employee cannot submit a job application without a resume.", "input": {"employeeId": "emp_67890", "resume": null, "coverLetter": "cover_letter.pdf"}, "expected": {"outcome": "Job application submission failed", "status": "Missing Required Documents"}}, {"name": "Failed Job Application Submission Due to Missing Cover Letter", "description": "Verify that an employee cannot submit a job application without a cover letter.", "input": {"employeeId": "emp_67890", "resume": "resume.pdf", "coverLetter": null}, "expected": {"outcome": "Job application submission failed", "status": "Missing Required Documents"}}, {"name": "Failed Job Application Submission Due to Invalid File Format", "description": "Verify that an employee cannot submit a job application with an invalid file format for resume or cover letter.", "input": {"employeeId": "emp_67890", "resume": "resume.txt", "coverLetter": "cover_letter.docx"}, "expected": {"outcome": "Job application submission failed", "status": "Invalid File Format"}}], "bert_score": {"Precision": 0.9517048597335815, "Recall": 0.9510008692741394, "F1": 0.9513527750968933}}
{"usecase": {"name": "Employer Job Posting", "scenario": "Employer posts job openings and manages posted jobs on the Jobify platform.", "actors": "Employer", "preconditions": "Employer is logged into the Jobify platform.", "steps": ["Employer navigates to the job posting section.", "Employer fills in job details including title, description, requirements, and application deadline.", "Employer previews the job posting.", "Employer submits the job posting."]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a job opening.", "input": {"jobDetails": {"title": "Data Scientist", "description": "Seeking a skilled data scientist for analytics team.", "requirements": "Master's degree in data science, experience with Python and machine learning.", "applicationDeadline": "2024-03-15"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}, {"name": "Incomplete Job Posting", "description": "Verify that the system handles the case where an employer tries to post a job with incomplete information.", "input": {"jobDetails": {"title": "Frontend Developer", "description": "Seeking a frontend developer for web application project."}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}], "GPT4o_testcases": [{"name": "Successful Job Posting", "description": "Verify that an employer can successfully post a job with all required details filled in correctly.", "input": {"employerId": "employer_67890", "jobTitle": "Software Engineer", "jobDescription": "Responsible for developing software solutions.", "jobRequirements": "Bachelor's degree in Computer Science.", "applicationDeadline": "2023-12-31"}, "expected": {"outcome": "Job posting successful", "status": "Job Posted"}}, {"name": "Failed Job Posting Due to Missing Title", "description": "Verify that a job posting fails if the job title is missing.", "input": {"employerId": "employer_67890", "jobTitle": null, "jobDescription": "Responsible for developing software solutions.", "jobRequirements": "Bachelor's degree in Computer Science.", "applicationDeadline": "2023-12-31"}, "expected": {"outcome": "Job posting failed", "status": "Missing Information"}}, {"name": "Failed Job Posting Due to Past Deadline", "description": "Verify that a job posting fails if the application deadline is set in the past.", "input": {"employerId": "employer_67890", "jobTitle": "Software Engineer", "jobDescription": "Responsible for developing software solutions.", "jobRequirements": "Bachelor's degree in Computer Science.", "applicationDeadline": "2022-12-31"}, "expected": {"outcome": "Job posting failed", "status": "Invalid Deadline"}}, {"name": "Successful Job Posting with Minimum Requirements", "description": "Verify that an employer can post a job with only the minimum required fields filled.", "input": {"employerId": "employer_67890", "jobTitle": "Data Analyst", "jobDescription": "Analyze data trends.", "jobRequirements": "", "applicationDeadline": "2023-12-31"}, "expected": {"outcome": "Job posting successful", "status": "Job Posted"}}], "bert_score": {"Precision": 0.9363346099853516, "Recall": 0.9429601430892944, "F1": 0.939635694026947}}
{"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}], "GPT4o_testcases": [{"name": "Successful Company Details Update", "description": "Verify that an employer can successfully update company details", "input": {"employerId": "employer_67890", "companyDescription": "Leading tech company specializing in AI solutions.", "contactInformation": {"email": "contact@techcompany.com", "phone": "0123456789"}}, "expected": {"outcome": "Company details update successful", "status": "Details Updated"}}, {"name": "Failed Company Details Update Due to Missing Description", "description": "Verify that an employer cannot update company details if the company description is missing", "input": {"employerId": "employer_67890", "companyDescription": null, "contactInformation": {"email": "contact@techcompany.com", "phone": "0123456789"}}, "expected": {"outcome": "Company details update failed", "status": "Missing Information"}}, {"name": "Failed Company Details Update Due to Invalid Email", "description": "Verify that an employer cannot update company details if the email format is invalid", "input": {"employerId": "employer_67890", "companyDescription": "Leading tech company specializing in AI solutions.", "contactInformation": {"email": "invalid-email-format", "phone": "0123456789"}}, "expected": {"outcome": "Company details update failed", "status": "Invalid Email Format"}}, {"name": "Successful Company Details Update with Minimum Information", "description": "Verify that an employer can update company details with minimum required information", "input": {"employerId": "employer_67890", "companyDescription": "Tech company.", "contactInformation": {"email": "contact@techcompany.com", "phone": null}}, "expected": {"outcome": "Company details update successful", "status": "Details Updated"}}], "bert_score": {"Precision": 0.9298754930496216, "Recall": 0.9364216923713684, "F1": 0.933137059211731}}
{"usecase": {"name": "Interview Scheduling", "scenario": "Employer schedules interviews with selected candidates and manages interview details.", "actors": "Employer, Candidate", "preconditions": "Employer has posted job openings and candidates have applied.", "steps": ["Employer reviews job applications and selects candidates for interviews.", "Employer sends interview invitations to selected candidates.", "Candidate accepts the interview invitation.", "Employer schedules the interview date, time, and medium (e.g., Zoom)."]}, "testcases": [{"name": "Select Candidates for Interview", "description": "Verify that an employer can successfully select candidates for interviews.", "input": {"selectedCandidates": ["CandidateA", "CandidateB", "CandidateC"]}, "expected": {"outcome": "Candidates selected for interview", "status": "Candidates notified"}}, {"name": "Send Interview Invitations", "description": "Verify that an employer can successfully send interview invitations to selected candidates.", "input": {"interviewDetails": {"date": "2024-03-20", "time": "10:00 AM", "medium": "Zoom"}}, "expected": {"outcome": "Interview invitations sent", "status": "Candidates notified"}}], "GPT4o_testcases": [{"name": "Successful Interview Scheduling", "description": "Verify that an employer can successfully schedule an interview with a candidate", "input": {"employerId": "employer_67890", "candidateId": "candidate_12345", "interviewDate": "2023-11-15", "interviewTime": "10:00 AM", "medium": "Zoom"}, "expected": {"outcome": "Interview scheduled successfully", "status": "Interview Scheduled"}}, {"name": "Failed Interview Scheduling Due to Missing Date", "description": "Verify that an employer cannot schedule an interview without providing a date", "input": {"employerId": "employer_67890", "candidateId": "candidate_12345", "interviewDate": null, "interviewTime": "10:00 AM", "medium": "Zoom"}, "expected": {"outcome": "Interview scheduling failed", "status": "Missing Information"}}, {"name": "Failed Interview Scheduling Due to Invalid Time", "description": "Verify that an employer cannot schedule an interview with an invalid time format", "input": {"employerId": "employer_67890", "candidateId": "candidate_12345", "interviewDate": "2023-11-15", "interviewTime": "25:00 PM", "medium": "Zoom"}, "expected": {"outcome": "Interview scheduling failed", "status": "Invalid Time Format"}}, {"name": "Successful Interview Rescheduling", "description": "Verify that an employer can successfully reschedule an interview", "input": {"employerId": "employer_67890", "candidateId": "candidate_12345", "interviewDate": "2023-11-20", "interviewTime": "2:00 PM", "medium": "Zoom"}, "expected": {"outcome": "Interview rescheduled successfully", "status": "Interview Rescheduled"}}, {"name": "Failed Interview Scheduling Due to Unavailable Medium", "description": "Verify that an employer cannot schedule an interview with an unavailable medium", "input": {"employerId": "employer_67890", "candidateId": "candidate_12345", "interviewDate": "2023-11-15", "interviewTime": "10:00 AM", "medium": "UnavailablePlatform"}, "expected": {"outcome": "Interview scheduling failed", "status": "Invalid Medium"}}], "bert_score": {"Precision": 0.9238545298576355, "Recall": 0.935477077960968, "F1": 0.9296295046806335}}
{"usecase": {"name": "Create a Group", "scenario": "A user creates a group with a name ,profile Photo  description", "Actors": "Any valid user", "precondition": "User is logged in", "steps": ["User clicks on create group button", "User enters the group name", "User enters the group description", "User selects the group profile photo", "User clicks on create group button"]}, "testcases": [{"name": "Valid Group Creation", "description": "Verify that a group is created successfully with valid data", "input": {"name": "Test Group", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation", "description": "Verify that a group is not created with invalid data", "input": {"name": "", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Group Creation", "description": "Verify that a user can successfully create a group with valid details", "input": {"userId": "user_67890", "groupName": "Study Group", "groupDescription": "A group for study discussions", "groupProfilePhoto": "photo_url_123"}, "expected": {"outcome": "Group creation successful", "status": "Group Created"}}, {"name": "Failed Group Creation Due to Missing Name", "description": "Verify that a user cannot create a group without a group name", "input": {"userId": "user_67890", "groupName": null, "groupDescription": "A group for study discussions", "groupProfilePhoto": "photo_url_123"}, "expected": {"outcome": "Group creation failed", "status": "Missing Group Name"}}, {"name": "Failed Group Creation Due to Missing Description", "description": "Verify that a user cannot create a group without a group description", "input": {"userId": "user_67890", "groupName": "Study Group", "groupDescription": null, "groupProfilePhoto": "photo_url_123"}, "expected": {"outcome": "Group creation failed", "status": "Missing Group Description"}}, {"name": "Failed Group Creation Due to Missing Profile Photo", "description": "Verify that a user cannot create a group without a group profile photo", "input": {"userId": "user_67890", "groupName": "Study Group", "groupDescription": "A group for study discussions", "groupProfilePhoto": null}, "expected": {"outcome": "Group creation failed", "status": "Missing Group Profile Photo"}}, {"name": "Successful Group Creation with Minimum Details", "description": "Verify that a user can create a group with only the required fields", "input": {"userId": "user_67890", "groupName": "Study Group", "groupDescription": "A group for study discussions", "groupProfilePhoto": "photo_url_123"}, "expected": {"outcome": "Group creation successful", "status": "Group Created"}}], "bert_score": {"Precision": 0.9364522099494934, "Recall": 0.951694667339325, "F1": 0.944011926651001}}
{"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Group Join Request", "description": "Verify that a user can successfully send a join request to a group and get approved by the admin", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Join request approved", "status": "User added to group"}}, {"name": "Failed Group Join Request - Nonexistent Group", "description": "Verify that a user cannot send a join request to a nonexistent group", "input": {"userId": "user_67890", "groupId": "group_00000"}, "expected": {"outcome": "Join request failed", "status": "Group not found"}}, {"name": "Failed Group Join Request - Already a Member", "description": "Verify that a user cannot send a join request to a group they are already a member of", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Join request failed", "status": "User already a member"}}, {"name": "Failed Group Join Request - Admin Rejection", "description": "Verify that a user is notified if the group admin rejects their join request", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Join request rejected", "status": "Request denied by admin"}}, {"name": "Successful Notification on Join Request Approval", "description": "Verify that a user receives a notification when their join request is approved by the admin", "input": {"userId": "user_67890", "groupId": "group_12345"}, "expected": {"outcome": "Notification sent", "status": "User notified of approval"}}], "bert_score": {"Precision": 0.9276366829872131, "Recall": 0.9450469613075256, "F1": 0.9362608790397644}}
{"usecase": {"name": "Approve a Post", "scenario": "A group member posts a post and the group admin approves the post", "actors": "Group Member, Group Admin", "preconditions": "Group member is logged in and is a member of the group and there is a group admin", "postconditions": "Post is visible to all group members", "steps": ["Group member selects images to post", "Group member add relevant tags to the images", "Group member adds a description to the post", "Group member clicks on post button", "A notification is sent to admin about the post", "Group admin approves the post", "A notification is sent to the group member about the approval"]}, "testcases": [{"name": "Valid Image Post with Correct Tags", "description": "Verify that a group member can successfully post images with correct tags", "input": {"selectedImages": ["Nature.jpg", "Travel.jpg"], "tags": ["Nature", "Travel"]}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Image post with incorrect Tags", "description": "Verify that the system handles the case where a group member posts images with incorrect tags, and the admin modifies the tags before approving the post.", "input": {"selectedImages": ["Art.jpg", "Culture.jpg"], "tags": ["Artwork", "History"]}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Empty Image Post ", "description": "Verify that the system handles the case where a group member tries to submit an empty post", "input": {"selectedImages": "", "tags": ""}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a member's post  with valid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Admin Modification of Tags", "description": "Verify that the admin can modify the tags of a member's post  with invalid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a member's post ", "input": {"advisorApproval": false}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Post Approval", "description": "Verify that a group admin can successfully approve a post made by a group member", "input": {"groupId": "group_67890", "memberId": "member_12345", "postId": "post_54321", "images": ["image1.jpg", "image2.jpg"], "tags": ["event", "fun"], "description": "Join us for the event!", "adminId": "admin_98765"}, "expected": {"outcome": "Post approval successful", "status": "Post Approved"}}, {"name": "Failed Post Approval Due to Missing Images", "description": "Verify that a post cannot be approved if images are missing", "input": {"groupId": "group_67890", "memberId": "member_12345", "postId": "post_54321", "images": [], "tags": ["event", "fun"], "description": "Join us for the event!", "adminId": "admin_98765"}, "expected": {"outcome": "Post approval failed", "status": "Missing Images"}}, {"name": "Failed Post Approval Due to Missing Description", "description": "Verify that a post cannot be approved if the description is missing", "input": {"groupId": "group_67890", "memberId": "member_12345", "postId": "post_54321", "images": ["image1.jpg", "image2.jpg"], "tags": ["event", "fun"], "description": "", "adminId": "admin_98765"}, "expected": {"outcome": "Post approval failed", "status": "Missing Description"}}, {"name": "Failed Post Approval Due to Invalid Admin", "description": "Verify that a post cannot be approved if the admin is invalid", "input": {"groupId": "group_67890", "memberId": "member_12345", "postId": "post_54321", "images": ["image1.jpg", "image2.jpg"], "tags": ["event", "fun"], "description": "Join us for the event!", "adminId": "invalid_admin"}, "expected": {"outcome": "Post approval failed", "status": "Invalid Admin"}}, {"name": "Successful Notification to Member After Approval", "description": "Verify that a notification is sent to the group member after the post is approved", "input": {"groupId": "group_67890", "memberId": "member_12345", "postId": "post_54321", "adminId": "admin_98765"}, "expected": {"outcome": "Notification sent to member", "status": "Notification Successful"}}], "bert_score": {"Precision": 0.9265421032905579, "Recall": 0.9367343187332153, "F1": 0.9316103458404541}}
{"usecase": {"name": " Perform Similar Search Operation", "scenario": "A user performs a search operation within a group to find specific contens.", "actors": "User", "preconditions": "The user is a member of the group", "steps": ["User navigates to the group's search functionality", "User enters search criteria (keywords, member names,location etc.)", "System processes the search query and presents relevant results"]}, "testcases": [{"name": "Content Search", "description": "Verify that the user can successfully search for specific content within the group.", "input": {"searchCriteria": "location"}, "expected": {"outcome": "Relevant content is displayed", "status": "Displayed"}}, {"name": "Member Search", "description": "Verify that the user can search for specific members within the group.", "input": {"searchCriteria": "JohnDoe"}, "expected": {"outcome": "Member profile is displayed", "status": "Displayed"}}, {"name": "Empty Search", "description": "Verify that the system handles the case where the user performs an empty search within the group.", "input": {"searchCriteria": ""}, "expected": {"outcome": "No relevant results found", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Search Operation", "description": "Verify that a user can successfully perform a search operation within a group", "input": {"userId": "user_67890", "groupId": "group_123", "searchCriteria": "project update"}, "expected": {"outcome": "Search operation successful", "status": "Results Found"}}, {"name": "Failed Search Operation with Empty Criteria", "description": "Verify that a search operation fails if the search criteria is empty", "input": {"userId": "user_67890", "groupId": "group_123", "searchCriteria": ""}, "expected": {"outcome": "Search operation failed", "status": "No Criteria Provided"}}, {"name": "Search Operation with Non-Member User", "description": "Verify that a user who is not a member of the group cannot perform a search operation", "input": {"userId": "user_99999", "groupId": "group_123", "searchCriteria": "meeting notes"}, "expected": {"outcome": "Search operation failed", "status": "User Not a Member"}}, {"name": "Search Operation with Invalid Group ID", "description": "Verify that a search operation fails if the group ID is invalid", "input": {"userId": "user_67890", "groupId": "invalid_group", "searchCriteria": "budget report"}, "expected": {"outcome": "Search operation failed", "status": "Invalid Group ID"}}], "bert_score": {"Precision": 0.9169923663139343, "Recall": 0.9270950555801392, "F1": 0.9220160841941833}}
{"usecase": {"name": "Modify Admin Moderator Role", "scenario": "Group admin can add other group members as an admin and may also resign from adminship ", "actors": "Group Admin, Group Member", "preconditions": "There is an existing group admin", "steps": ["Group admin selects a member to suggest for admin role", "Admin suggests the member for adminship", "Suggested member receives the admin offer through a notification", "Suggested member accepts the offer"]}, "testcases": [{"name": "Admin Role offer - Acceptance", "description": "Verify that the current admin can successfully suggest a member for adminship, and the member accepts the offer.", "input": {"selectedMember": "JohnDoe", "adminOffer": true}, "expected": {"outcome": "Admin role assigned", "status": "Accepted"}}, {"name": "Admin Role offer - Rejection", "description": "Verify that the current admin can suggest a member for adminship, and the member rejects the offer.", "input": {"selectedMember": "JaneDoe", "adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Member accepts Admin Role offer", "description": "Verify that the member can accept the admin role offer.", "input": {"adminOffer": true}, "expected": {"outcome": "Admin role  assigned", "status": "Accepted"}}, {"name": "Member rejects Admin Role offer", "description": "Verify that the member can reject the admin role offer.", "input": {"adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Admin Resignation", "description": "Verify that the current admin can resign from adminship.", "input": {"resignation": true}, "expected": {"outcome": "Admin role resigned", "status": "Resigned"}}], "GPT4o_testcases": [{"name": "Successful Admin Role Assignment", "description": "Verify that a group admin can successfully assign another member as an admin", "input": {"groupId": "group_67890", "adminId": "admin_12345", "memberId": "member_54321"}, "expected": {"outcome": "Admin role assignment successful", "status": "Member is now an admin"}}, {"name": "Failed Admin Role Assignment Due to Non-Admin Initiator", "description": "Verify that a non-admin member cannot assign another member as an admin", "input": {"groupId": "group_67890", "adminId": "member_54321", "memberId": "member_98765"}, "expected": {"outcome": "Admin role assignment failed", "status": "Permission Denied"}}, {"name": "Failed Admin Role Assignment Due to Non-Existent Member", "description": "Verify that an admin cannot assign a non-existent member as an admin", "input": {"groupId": "group_67890", "adminId": "admin_12345", "memberId": "member_00000"}, "expected": {"outcome": "Admin role assignment failed", "status": "Member Not Found"}}, {"name": "Successful Admin Resignation", "description": "Verify that a group admin can successfully resign from adminship", "input": {"groupId": "group_67890", "adminId": "admin_12345"}, "expected": {"outcome": "Admin resignation successful", "status": "Admin Resigned"}}, {"name": "Failed Admin Resignation Due to Sole Admin", "description": "Verify that a sole admin cannot resign without assigning another admin", "input": {"groupId": "group_67890", "adminId": "admin_12345"}, "expected": {"outcome": "Admin resignation failed", "status": "Cannot Resign as Sole Admin"}}], "bert_score": {"Precision": 0.9283970594406128, "Recall": 0.9362849593162537, "F1": 0.9323243498802185}}
{"usecase": {"name": "Session Creation", "scenario": "A student creates a session for a specific academic term.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects the academic term for which they want to create a session.", "User enters the session title (e.g., '4-1' for level 4, term 1).", "User creates the session."]}, "testcases": [{"name": "Valid Session Creation", "description": "Verify that a student can successfully create a session for a specific academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation successful", "status": "Success"}}, {"name": "Duplicate Session Title", "description": "Verify that the system handles the case where a student tries to create a session with a title that already exists for the same academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}, {"name": "Empty Session Title", "description": "Verify that the system handles the case where a student tries to create a session without a title.", "input": {"session_title": ""}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Session Creation", "description": "Verify that a student can successfully create a session for a specific academic term.", "input": {"userId": "student_67890", "academicTerm": "2023 Fall", "sessionTitle": "4-1"}, "expected": {"outcome": "Session creation successful", "status": "Session Created"}}, {"name": "Failed Session Creation Due to Missing Title", "description": "Verify that a student cannot create a session without providing a session title.", "input": {"userId": "student_67890", "academicTerm": "2023 Fall", "sessionTitle": null}, "expected": {"outcome": "Session creation failed", "status": "Missing Session Title"}}, {"name": "Failed Session Creation Due to Invalid Term", "description": "Verify that a student cannot create a session with an invalid academic term.", "input": {"userId": "student_67890", "academicTerm": "Invalid Term", "sessionTitle": "4-1"}, "expected": {"outcome": "Session creation failed", "status": "Invalid Academic Term"}}, {"name": "Failed Session Creation Due to Unregistered User", "description": "Verify that an unregistered user cannot create a session.", "input": {"userId": "unregistered_user", "academicTerm": "2023 Fall", "sessionTitle": "4-1"}, "expected": {"outcome": "Session creation failed", "status": "User Not Registered"}}], "bert_score": {"Precision": 0.9308470487594604, "Recall": 0.9378318190574646, "F1": 0.9343264102935791}}
{"usecase": {"name": "Session Creation with Visibility Settings", "scenario": "A student creates a session and sets its visibility.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects to create a new session.", "User enters the session title.", "User selects the visibility setting: public, private, or publish.", "User creates the session."]}, "testcases": [{"name": "Create Public Session", "description": "Verify that a student can create a session with public visibility.", "input": {"session_title": "4-1", "visibility": "public"}, "expected": {"outcome": "Session creation successful with public visibility", "status": "Success"}}, {"name": "Create Private Session", "description": "Verify that a student can create a session with private visibility.", "input": {"session_title": "4-2", "visibility": "private"}, "expected": {"outcome": "Session creation successful with private visibility", "status": "Success"}}, {"name": "Publish Session", "description": "Verify that a student can publish a session to make it visible to others.", "input": {"session_title": "4-1", "visibility": "publish"}, "expected": {"outcome": "Session successfully published", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Session Creation with Public Visibility", "description": "Verify that a student can successfully create a session with public visibility", "input": {"userId": "student_67890", "sessionTitle": "Math Study Group", "visibility": "public"}, "expected": {"outcome": "Session creation successful", "status": "Session Created"}}, {"name": "Successful Session Creation with Private Visibility", "description": "Verify that a student can successfully create a session with private visibility", "input": {"userId": "student_67890", "sessionTitle": "Science Project Discussion", "visibility": "private"}, "expected": {"outcome": "Session creation successful", "status": "Session Created"}}, {"name": "Failed Session Creation with Missing Title", "description": "Verify that a student cannot create a session without a title", "input": {"userId": "student_67890", "sessionTitle": null, "visibility": "public"}, "expected": {"outcome": "Session creation failed", "status": "Missing Information"}}, {"name": "Failed Session Creation with Invalid Visibility", "description": "Verify that a student cannot create a session with an invalid visibility setting", "input": {"userId": "student_67890", "sessionTitle": "History Lecture", "visibility": "unknown"}, "expected": {"outcome": "Session creation failed", "status": "Invalid Visibility Setting"}}, {"name": "Successful Session Creation with Publish Visibility", "description": "Verify that a student can successfully create a session with publish visibility", "input": {"userId": "student_67890", "sessionTitle": "Art Workshop", "visibility": "publish"}, "expected": {"outcome": "Session creation successful", "status": "Session Created"}}], "bert_score": {"Precision": 0.9449431896209717, "Recall": 0.9502021074295044, "F1": 0.9475653171539307}}
{"usecase": {"name": "Course Creation Under Session", "scenario": "A student creates a course under a session.", "actors": "Student", "preconditions": "User is registered and logged in. A session exists.", "steps": ["User navigates to the desired session.", "User selects to create a new course.", "User enters the course title.", "User creates the course."]}, "testcases": [{"name": "Create Course Under Session", "description": "Verify that a student can create a course under a session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Introduction to Software Development"}, "expected": {"outcome": "Course creation successful under session", "status": "Success"}}, {"name": "Duplicate Course Added Under Same Session", "description": "Verify that the system handles the case where a student tries to create a course with a duplicate title under the same session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Advanced Software Development"}, "expected": {"outcome": "Course creation unsuccessful due to duplicate title", "status": "Failed"}}, {"name": "Empty Course Title", "description": "Verify that the system handles the case where a student tries to create a course without a title.", "input": {"session_title": "4-1", "course_title": ""}, "expected": {"outcome": "Course creation unsuccessful", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Course Creation", "description": "Verify that a student can successfully create a course under a session", "input": {"userId": "student_67890", "sessionId": "session_2023", "courseTitle": "Introduction to Programming"}, "expected": {"outcome": "Course creation successful", "status": "Course Created"}}, {"name": "Failed Course Creation Due to Missing Title", "description": "Verify that a student cannot create a course without providing a course title", "input": {"userId": "student_67890", "sessionId": "session_2023", "courseTitle": null}, "expected": {"outcome": "Course creation failed", "status": "Missing Course Title"}}, {"name": "Failed Course Creation Due to Invalid Session", "description": "Verify that a student cannot create a course under a non-existent session", "input": {"userId": "student_67890", "sessionId": "invalid_session", "courseTitle": "Advanced Mathematics"}, "expected": {"outcome": "Course creation failed", "status": "Invalid Session"}}, {"name": "Failed Course Creation Due to Unregistered User", "description": "Verify that an unregistered user cannot create a course", "input": {"userId": "unregistered_user", "sessionId": "session_2023", "courseTitle": "Physics 101"}, "expected": {"outcome": "Course creation failed", "status": "User Not Registered"}}], "bert_score": {"Precision": 0.9511014223098755, "Recall": 0.9464951157569885, "F1": 0.9487926363945007}}
{"usecase": {"name": "Adding Resources to a Course", "scenario": "A student adds various resources to a course.", "actors": "Student", "preconditions": "User is registered and logged in. A course exists under a session.", "steps": ["User navigates to the desired course.", "User selects to add a new resource.", "User specifies the type of resource to add: lecture video, PDF, link, or notes.", "User uploads or provides the necessary information for the selected resource type.", "User adds the resource to the course."]}, "testcases": [{"name": "Add Lecture Video", "description": "Verify that a student can add a lecture video to a course.", "input": {"resource_type": "lecture_video", "video_title": "Introduction to Software Development", "video_url": "https://example.com/lecture1"}, "expected": {"outcome": "Lecture video added successfully to the course", "status": "Success"}}, {"name": "Add PDF Resource", "description": "Verify that a student can add a PDF resource to a course.", "input": {"resource_type": "pdf", "pdf_title": "Software Development Basics", "pdf_file": "example.pdf"}, "expected": {"outcome": "PDF resource added successfully to the course", "status": "Success"}}, {"name": "Add Link", "description": "Verify that a student can add a link to a course.", "input": {"resource_type": "link", "link_title": "Software Development Tutorial", "link_url": "https://example.com/tutorial"}, "expected": {"outcome": "Link added successfully to the course", "status": "Success"}}, {"name": "Add Notes", "description": "Verify that a student can add personal class notes or pictures to a course.", "input": {"resource_type": "notes", "notes_title": "Class Notes - Week 1", "notes_file": "notes_week1.pdf"}, "expected": {"outcome": "Notes added successfully to the course", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Resource Addition", "description": "Verify that a student can successfully add a lecture video to a course", "input": {"userId": "student_67890", "courseId": "course_123", "resourceType": "Lecture Video", "resourceDetails": {"title": "Introduction to Biology", "videoUrl": "http://example.com/video.mp4"}}, "expected": {"outcome": "Resource addition successful", "status": "Resource Added"}}, {"name": "Failed Resource Addition Due to Missing Details", "description": "Verify that a student cannot add a resource if the resource details are incomplete", "input": {"userId": "student_67890", "courseId": "course_123", "resourceType": "PDF", "resourceDetails": {"title": null, "pdfUrl": "http://example.com/document.pdf"}}, "expected": {"outcome": "Resource addition failed", "status": "Incomplete Resource Details"}}, {"name": "Invalid Resource Type", "description": "Verify that a student cannot add a resource with an invalid resource type", "input": {"userId": "student_67890", "courseId": "course_123", "resourceType": "Audio", "resourceDetails": {"title": "Lecture Audio", "audioUrl": "http://example.com/audio.mp3"}}, "expected": {"outcome": "Resource addition failed", "status": "Invalid Resource Type"}}, {"name": "Successful Resource Addition with Notes", "description": "Verify that a student can successfully add notes to a course", "input": {"userId": "student_67890", "courseId": "course_123", "resourceType": "Notes", "resourceDetails": {"title": "Chapter 1 Notes", "content": "These are the notes for chapter 1."}}, "expected": {"outcome": "Resource addition successful", "status": "Resource Added"}}, {"name": "Failed Resource Addition Due to Invalid URL", "description": "Verify that a student cannot add a resource with an invalid URL", "input": {"userId": "student_67890", "courseId": "course_123", "resourceType": "Link", "resourceDetails": {"title": "External Resource", "linkUrl": "invalid_url"}}, "expected": {"outcome": "Resource addition failed", "status": "Invalid URL"}}], "bert_score": {"Precision": 0.9366974234580994, "Recall": 0.9411584138870239, "F1": 0.938922643661499}}
{"usecase": {"name": "Writing Educational Blogs with Tags", "scenario": "A user writes an educational blog and adds tags to it.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Blogs' section.", "User selects to create a new blog post.", "User writes the content of the blog post.", "User adds relevant tags to the blog post.", "User publishes the blog post."]}, "testcases": [{"name": "Write Blog with Tags", "description": "Verify that a user can write an educational blog with tags.", "input": {"blog_title": "Introduction to Machine Learning", "blog_content": "In this blog post, we discuss the basics of machine learning...", "tags": ["machine learning", "artificial intelligence", "data science"]}, "expected": {"outcome": "Blog post created successfully with tags", "status": "Success"}}, {"name": "Empty Blog Title", "description": "Verify that the system handles the case where a user tries to create a blog post without a title.", "input": {"blog_title": "", "blog_content": "Lorem ipsum dolor sit amet...", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Blog Content", "description": "Verify that the system handles the case where a user tries to create a blog post without content.", "input": {"blog_title": "Sample Blog", "blog_content": "", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Tags", "description": "Verify that the system handles the case where a user tries to create a blog post without adding any tags.", "input": {"blog_title": "Sample Blog", "blog_content": "Lorem ipsum dolor sit amet...", "tags": []}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}], "GPT4o_testcases": [{"name": "Successful Blog Post Creation", "description": "Verify that a user can successfully create and publish a blog post with tags", "input": {"userId": "user_67890", "blogContent": "This is an educational blog about science.", "tags": ["Science", "Education", "Learning"]}, "expected": {"outcome": "Blog post published successfully", "status": "Published"}}, {"name": "Failed Blog Post Creation Due to Missing Content", "description": "Verify that a user cannot publish a blog post without content", "input": {"userId": "user_67890", "blogContent": "", "tags": ["Science", "Education", "Learning"]}, "expected": {"outcome": "Blog post creation failed", "status": "Content Missing"}}, {"name": "Failed Blog Post Creation Due to Missing Tags", "description": "Verify that a user cannot publish a blog post without tags", "input": {"userId": "user_67890", "blogContent": "This is an educational blog about science.", "tags": []}, "expected": {"outcome": "Blog post creation failed", "status": "Tags Missing"}}, {"name": "Successful Blog Post Creation with Maximum Tags", "description": "Verify that a user can publish a blog post with the maximum allowed number of tags", "input": {"userId": "user_67890", "blogContent": "This is an educational blog about science.", "tags": ["Science", "Education", "Learning", "Research", "Innovation"]}, "expected": {"outcome": "Blog post published successfully", "status": "Published"}}, {"name": "Failed Blog Post Creation Due to Excessive Tags", "description": "Verify that a user cannot publish a blog post with more than the allowed number of tags", "input": {"userId": "user_67890", "blogContent": "This is an educational blog about science.", "tags": ["Science", "Education", "Learning", "Research", "Innovation", "ExtraTag"]}, "expected": {"outcome": "Blog post creation failed", "status": "Too Many Tags"}}], "bert_score": {"Precision": 0.9559395909309387, "Recall": 0.9472823143005371, "F1": 0.9515912532806396}}
{"usecase": {"name": "Team creation for a contest", "scenario": "A user registers for a contest by creatting a team", "actors": "Team leader", "preconditions": "Contest has not started yet and team members are not part of any other team.", "steps": ["User creates a team", "User is assigned as the team leader"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that the contest has not started yet and the user is not already part of another team.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User1"}, "expected": {"outcome": "Team registration successful", "status": "Team Created"}}, {"name": "Duplicate Team Name", "description": "Verify that the system handles the case where a team with the same name already exists for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User2"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "Contest Already Started", "description": "Verify that the system handles the case where the contest has already started.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team2", "Team Leader": "User3"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "User Already Part of Another Team", "description": "Verify that the system handles the case where the user is already part of another team for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team3", "Team Leader": "User1"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}], "GPT4o_testcases": [{"name": "Successful Team Creation", "description": "Verify that a user can successfully create a team for a contest", "input": {"userId": "leader_12345", "teamName": "Winners", "members": ["member_1", "member_2", "member_3"]}, "expected": {"outcome": "Team creation successful", "status": "Team Created"}}, {"name": "Failed Team Creation - Contest Started", "description": "Verify that a user cannot create a team if the contest has already started", "input": {"userId": "leader_12345", "teamName": "Winners", "members": ["member_1", "member_2", "member_3"], "contestStatus": "Started"}, "expected": {"outcome": "Team creation failed", "status": "Contest Already Started"}}, {"name": "Failed Team Creation - Member in Another Team", "description": "Verify that a user cannot create a team if any member is already part of another team", "input": {"userId": "leader_12345", "teamName": "Winners", "members": ["member_1", "member_2", "member_3"], "memberStatus": {"member_1": "Free", "member_2": "In Team", "member_3": "Free"}}, "expected": {"outcome": "Team creation failed", "status": "Member Already in Another Team"}}, {"name": "Failed Team Creation - Empty Team Name", "description": "Verify that a user cannot create a team with an empty team name", "input": {"userId": "leader_12345", "teamName": "", "members": ["member_1", "member_2", "member_3"]}, "expected": {"outcome": "Team creation failed", "status": "Invalid Team Name"}}], "bert_score": {"Precision": 0.9288986921310425, "Recall": 0.9252777099609375, "F1": 0.9270846843719482}}
{"usecase": {"name": "Submission of a problem solution in a contest", "scenario": "A member team submits a solution for a problem in a contest", "actors": "Team member", "preconditions": "Contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "steps": ["User submits a solution for a problem", "System evaluates the solution", "System updates the scoreboard", "Team unlocks the new problems"]}, "testcases": [{"name": "Correct Flag Submission", "description": "Verify that the contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "Solution1"}, "expected": {"outcome": "Submission successful", "status": "Accepted"}}, {"name": "Incorrect Flag Submission", "description": "Verify that the system handles the case where the submitted flag is incorrect.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "IncorrectSolution"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Maximum Submissions Reached", "description": "Verify that the system handles the case where the maximum number of submissions for the problem is reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P2", "Solution": "Solution2"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Finished Contest Upsolving", "description": "Verify that the system handles the case where the contest is not ongoing.", "input": {"Contest Name": "BUETCTF", "User": "User1", "Problem ID": "P3", "Solution": "Solution3"}, "expected": {"outcome": "Verdict is given but scoreboard is not updated", "status": "Verdict Given"}}], "GPT4o_testcases": [{"name": "Successful Solution Submission", "description": "Verify that a team member can successfully submit a solution for a problem", "input": {"teamId": "team_67890", "problemId": "problem_001", "solutionCode": "print('Hello, World!')"}, "expected": {"outcome": "Solution submitted successfully", "status": "Submission Accepted"}}, {"name": "Failed Solution Submission Due to Contest End", "description": "Verify that a team member cannot submit a solution after the contest has ended", "input": {"teamId": "team_67890", "problemId": "problem_001", "solutionCode": "print('Hello, World!')"}, "expected": {"outcome": "Solution submission failed", "status": "Contest Ended"}}, {"name": "Failed Solution Submission Due to Maximum Submissions Reached", "description": "Verify that a team member cannot submit a solution if the maximum number of submissions for the problem is reached", "input": {"teamId": "team_67890", "problemId": "problem_001", "solutionCode": "print('Hello, World!')"}, "expected": {"outcome": "Solution submission failed", "status": "Maximum Submissions Reached"}}, {"name": "Invalid Solution Submission Due to Missing Code", "description": "Verify that a team member cannot submit a solution if the solution code is missing", "input": {"teamId": "team_67890", "problemId": "problem_001", "solutionCode": null}, "expected": {"outcome": "Solution submission failed", "status": "Invalid Submission"}}], "bert_score": {"Precision": 0.9360193014144897, "Recall": 0.9391181468963623, "F1": 0.9375661611557007}}
{"usecase": {"name": "Asking for clarification in a contest", "scenario": "A team member asks for clarification for a problem in a contest", "actors": "Team member, Contest organizer", "preconditions": "Contest is ongoing and the team is registered for the contest.", "steps": ["User asks for clarification for a problem", "Contest organizer answers the clarification"]}, "testcases": [{"name": "Valid Clarification Request", "description": "Verify that the contest is ongoing and the team is registered for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1"}, "expected": {"outcome": "Clarification request successful", "status": "Asked"}}, {"name": "Valid Clarification Response", "description": "Verify that the contest organizer can successfully answer the clarification.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1", "Answer": "Answer1"}, "expected": {"outcome": "Clarification response successful", "status": "Answered"}}], "GPT4o_testcases": [{"name": "Successful Clarification Request", "description": "Verify that a team member can successfully ask for clarification during a contest", "input": {"teamId": "team_67890", "problemId": "problem_001", "question": "Can we assume all inputs are positive?"}, "expected": {"outcome": "Clarification request sent successfully", "status": "Request Sent"}}, {"name": "Failed Clarification Request Due to Missing Question", "description": "Verify that a team member cannot ask for clarification if the question is missing", "input": {"teamId": "team_67890", "problemId": "problem_001", "question": null}, "expected": {"outcome": "Clarification request failed", "status": "Invalid Request"}}, {"name": "Successful Clarification Response", "description": "Verify that a contest organizer can successfully respond to a clarification request", "input": {"organizerId": "organizer_123", "clarificationId": "clarification_456", "response": "Yes, all inputs are positive."}, "expected": {"outcome": "Clarification response sent successfully", "status": "Response Sent"}}, {"name": "Failed Clarification Response Due to Missing Response", "description": "Verify that a contest organizer cannot respond to a clarification request if the response is missing", "input": {"organizerId": "organizer_123", "clarificationId": "clarification_456", "response": null}, "expected": {"outcome": "Clarification response failed", "status": "Invalid Response"}}], "bert_score": {"Precision": 0.9322828650474548, "Recall": 0.9404807686805725, "F1": 0.9363638758659363}}
{"usecase": {"name": "Enter in the contest", "scenario": "A user enters in a contest section", "actors": "Team member, regular users of the system", "preconditions": "Contest is ongoing or finished.", "steps": ["register or unregistered users try to enter into the contest section", "system verifies contest status and allows users to enter into the contest section", "users can see problems, standings, and other contest related information"]}, "testcases": [{"name": "Contest is ongoing or finished", "description": "Verify that the contest is ongoing or finished.", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users redirected to the contest section", "status": "successful"}}, {"name": "contest is upcoming", "description": "verify the contest status", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users promted with remaining time for the contest to start", "status": "failed to enter"}}], "GPT4o_testcases": [{"name": "Successful Contest Entry", "description": "Verify that a registered user can successfully enter an ongoing contest", "input": {"userId": "user_67890", "contestStatus": "ongoing", "userType": "registered"}, "expected": {"outcome": "Contest entry successful", "status": "Access Granted"}}, {"name": "Failed Contest Entry for Unregistered User", "description": "Verify that an unregistered user cannot enter a contest section", "input": {"userId": null, "contestStatus": "ongoing", "userType": "unregistered"}, "expected": {"outcome": "Contest entry failed", "status": "Access Denied"}}, {"name": "Contest Entry After Contest Finished", "description": "Verify that a user cannot enter a contest section after the contest has finished", "input": {"userId": "user_67890", "contestStatus": "finished", "userType": "registered"}, "expected": {"outcome": "Contest entry failed", "status": "Contest Finished"}}, {"name": "Successful Contest Entry for Team Member", "description": "Verify that a team member can enter the contest section regardless of contest status", "input": {"userId": "team_12345", "contestStatus": "finished", "userType": "team member"}, "expected": {"outcome": "Contest entry successful", "status": "Access Granted"}}], "bert_score": {"Precision": 0.9182169437408447, "Recall": 0.9264935255050659, "F1": 0.9223366975784302}}
{"usecase": {"name": "Creation of a contest", "scenario": "Admin creates a contest", "actors": "Admin", "preconditions": "user must be an admin of the system and the contest name must be unique", "steps": ["Admin creates a contest with a unique name and type of contest", "System verifies user role and contest name and type", "After sucessful creation of a contest admin can add problems and other specification, set time and date for the contest"]}, "testcases": [{"name": "user is an admin and contest name is unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is created successfully, authorized by the admin", "status": "Contest creation successful"}}, {"name": "user is not an admin", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "user1", "User role": "user"}, "expected": {"outcome": "User is not authorized to create a contest and no contest is created", "status": "Contest creation failed"}}, {"name": "contest name is not unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is not created, contest name is not unique", "status": "Contest creation failed"}}], "GPT4o_testcases": [{"name": "Successful Contest Creation", "description": "Verify that an admin can successfully create a contest with a unique name", "input": {"adminId": "admin_67890", "contestName": "Math Olympiad 2023", "contestType": "Mathematics"}, "expected": {"outcome": "Contest creation successful", "status": "Contest Created"}}, {"name": "Failed Contest Creation Due to Duplicate Name", "description": "Verify that a contest cannot be created with a duplicate name", "input": {"adminId": "admin_67890", "contestName": "Math Olympiad 2023", "contestType": "Mathematics"}, "expected": {"outcome": "Contest creation failed", "status": "Duplicate Contest Name"}}, {"name": "Failed Contest Creation Due to Invalid Admin Role", "description": "Verify that a non-admin user cannot create a contest", "input": {"adminId": "user_12345", "contestName": "Science Fair 2023", "contestType": "Science"}, "expected": {"outcome": "Contest creation failed", "status": "Invalid User Role"}}, {"name": "Failed Contest Creation Due to Missing Contest Type", "description": "Verify that a contest cannot be created without specifying the contest type", "input": {"adminId": "admin_67890", "contestName": "Art Competition 2023", "contestType": null}, "expected": {"outcome": "Contest creation failed", "status": "Missing Contest Type"}}], "bert_score": {"Precision": 0.9343260526657104, "Recall": 0.9353736639022827, "F1": 0.9348495602607727}}
{"usecase": {"name": "User Registration", "scenario": "A new user registers on the TravelBee website.", "actors": "User", "steps": ["User provides valid registration details", "User submits the registration form"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register.", "input": {"name": "John Doe", "email": "john@example.com", "password": "StrongPassword123"}, "expected": {"outcome": "Registration successful"}}, {"name": "Existing Email", "description": "Verify that registration fails for an email already in use.", "input": {"name": "Jane Doe", "email": "john@example.com", "password": "SecurePassword456"}, "expected": {"outcome": "Registration failed", "message": "Email is already in use"}}, {"name": "Weak Password", "description": "Verify that registration fails for a weak password.", "input": {"name": "Bob Smith", "email": "bob@example.com", "password": "weak"}, "expected": {"outcome": "Registration failed", "message": "Password strength requirements not met"}}], "GPT4o_testcases": [{"name": "Successful User Registration", "description": "Verify that a new user can successfully register with valid details", "input": {"username": "new_user", "email": "newuser@example.com", "password": "SecurePass123", "confirmPassword": "SecurePass123"}, "expected": {"outcome": "Registration successful", "status": "User Registered"}}, {"name": "Failed User Registration Due to Missing Email", "description": "Verify that registration fails if the email is missing", "input": {"username": "new_user", "email": null, "password": "SecurePass123", "confirmPassword": "SecurePass123"}, "expected": {"outcome": "Registration failed", "status": "Missing Information"}}, {"name": "Failed User Registration Due to Password Mismatch", "description": "Verify that registration fails if the password and confirm password do not match", "input": {"username": "new_user", "email": "newuser@example.com", "password": "SecurePass123", "confirmPassword": "DifferentPass123"}, "expected": {"outcome": "Registration failed", "status": "Password Mismatch"}}, {"name": "Failed User Registration Due to Weak Password", "description": "Verify that registration fails if the password is too weak", "input": {"username": "new_user", "email": "newuser@example.com", "password": "123", "confirmPassword": "123"}, "expected": {"outcome": "Registration failed", "status": "Weak Password"}}, {"name": "Failed User Registration Due to Existing Email", "description": "Verify that registration fails if the email is already registered", "input": {"username": "new_user", "email": "existinguser@example.com", "password": "SecurePass123", "confirmPassword": "SecurePass123"}, "expected": {"outcome": "Registration failed", "status": "Email Already Registered"}}], "bert_score": {"Precision": 0.9486753940582275, "Recall": 0.9556288719177246, "F1": 0.9521394371986389}}
{"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}], "GPT4o_testcases": [{"name": "Successful Flight Booking", "description": "Verify that a user can successfully book a flight with valid details", "input": {"userId": "user_67890", "flightNumber": "FL123", "departureDate": "2023-12-01", "departureTime": "10:00", "arrivalDate": "2023-12-01", "arrivalTime": "14:00", "origin": "JFK", "destination": "LAX", "passengerName": "Alice Smith"}, "expected": {"outcome": "Flight booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Flight Booking Due to Missing Details", "description": "Verify that a user cannot book a flight if any of the required details are missing", "input": {"userId": "user_67890", "flightNumber": "FL123", "departureDate": null, "departureTime": "10:00", "arrivalDate": "2023-12-01", "arrivalTime": "14:00", "origin": "JFK", "destination": "LAX", "passengerName": "Alice Smith"}, "expected": {"outcome": "Flight booking failed", "status": "Missing Information"}}, {"name": "Failed Flight Booking Due to Invalid Date", "description": "Verify that a user cannot book a flight with an invalid departure date", "input": {"userId": "user_67890", "flightNumber": "FL123", "departureDate": "2023-02-30", "departureTime": "10:00", "arrivalDate": "2023-12-01", "arrivalTime": "14:00", "origin": "JFK", "destination": "LAX", "passengerName": "Alice Smith"}, "expected": {"outcome": "Flight booking failed", "status": "Invalid Date"}}, {"name": "Successful Flight Booking with Edge Case Time", "description": "Verify that a user can book a flight with a departure time at midnight", "input": {"userId": "user_67890", "flightNumber": "FL123", "departureDate": "2023-12-01", "departureTime": "00:00", "arrivalDate": "2023-12-01", "arrivalTime": "04:00", "origin": "JFK", "destination": "LAX", "passengerName": "Alice Smith"}, "expected": {"outcome": "Flight booking successful", "status": "Booking Confirmed"}}], "bert_score": {"Precision": 0.9218013882637024, "Recall": 0.9278972744941711, "F1": 0.9248393177986145}}
{"usecase": {"name": "Hotel Booking", "scenario": "User books a hotel for accommodation.", "actors": "User", "steps": ["User provides valid hotel details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a hotel.", "input": {"location": "Beach City", "dates": "2024-04-15 to 2024-04-20", "roomType": "Deluxe", "numOfRooms": 1}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Location", "description": "Verify that booking fails for an invalid hotel location.", "input": {"location": "Nonexistent City", "dates": "2024-06-01 to 2024-06-05", "roomType": "Standard", "numOfRooms": 2}, "expected": {"outcome": "Booking failed", "message": "Invalid hotel location"}}, {"name": "No Available Rooms", "description": "Verify that booking fails when no rooms are available for the selected dates.", "input": {"location": "City Z", "dates": "2024-08-10 to 2024-08-15", "roomType": "Suite", "numOfRooms": 3}, "expected": {"outcome": "Booking failed", "message": "No available rooms for the selected dates"}}], "GPT4o_testcases": [{"name": "Successful Hotel Booking", "description": "Verify that a user can successfully book a hotel with valid details", "input": {"userId": "user_67890", "hotelName": "Grand Hotel", "checkInDate": "2023-12-01", "checkOutDate": "2023-12-05", "roomType": "Deluxe", "numberOfGuests": 2}, "expected": {"outcome": "Hotel booking successful", "status": "Booking Confirmed"}}, {"name": "Failed Hotel Booking Due to Missing Details", "description": "Verify that a user cannot book a hotel if any of the required details are missing", "input": {"userId": "user_67890", "hotelName": "Grand Hotel", "checkInDate": null, "checkOutDate": "2023-12-05", "roomType": "Deluxe", "numberOfGuests": 2}, "expected": {"outcome": "Hotel booking failed", "status": "Missing Information"}}, {"name": "Failed Hotel Booking Due to Invalid Dates", "description": "Verify that a user cannot book a hotel if the check-out date is before the check-in date", "input": {"userId": "user_67890", "hotelName": "Grand Hotel", "checkInDate": "2023-12-05", "checkOutDate": "2023-12-01", "roomType": "Deluxe", "numberOfGuests": 2}, "expected": {"outcome": "Hotel booking failed", "status": "Invalid Dates"}}, {"name": "Failed Hotel Booking Due to Invalid Number of Guests", "description": "Verify that a user cannot book a hotel if the number of guests exceeds the room capacity", "input": {"userId": "user_67890", "hotelName": "Grand Hotel", "checkInDate": "2023-12-01", "checkOutDate": "2023-12-05", "roomType": "Deluxe", "numberOfGuests": 5}, "expected": {"outcome": "Hotel booking failed", "status": "Exceeds Room Capacity"}}], "bert_score": {"Precision": 0.9269817471504211, "Recall": 0.9283250570297241, "F1": 0.927652895450592}}
{"usecase": {"name": "User Search", "scenario": "User searches for flights or hotels based on specific criteria.", "actors": "User", "steps": ["User provides valid search criteria"]}, "testcases": [{"name": "Successful Flight Search", "description": "Verify that the system returns relevant flight options for a valid search.", "input": {"departure": "City M", "destination": "City N", "date": "2024-07-01"}, "expected": {"outcome": "Flight options retrieved successfully"}}, {"name": "Successful Hotel Search", "description": "Verify that the system returns relevant hotel options for a valid search.", "input": {"location": "Mountain View", "dates": "2024-09-10 to 2024-09-15", "roomType": "Standard"}, "expected": {"outcome": "Hotel options retrieved successfully"}}, {"name": "No Results", "description": "Verify that the system returns no results for an invalid or uncommon search.", "input": {"departure": "Unknown City", "destination": "Mysterious Town", "date": "2025-01-01"}, "expected": {"outcome": "No results found", "message": "No options match the provided criteria"}}], "GPT4o_testcases": [{"name": "Successful Flight Search", "description": "Verify that a user can successfully search for flights with valid criteria", "input": {"searchType": "flight", "origin": "New York", "destination": "Los Angeles", "departureDate": "2023-12-01", "returnDate": "2023-12-10", "passengers": 1}, "expected": {"outcome": "Flight search successful", "status": "Results Found"}}, {"name": "Successful Hotel Search", "description": "Verify that a user can successfully search for hotels with valid criteria", "input": {"searchType": "hotel", "location": "Paris", "checkInDate": "2023-12-01", "checkOutDate": "2023-12-05", "guests": 2}, "expected": {"outcome": "Hotel search successful", "status": "Results Found"}}, {"name": "Failed Flight Search with Missing Destination", "description": "Verify that a user cannot search for flights if the destination is missing", "input": {"searchType": "flight", "origin": "New York", "destination": null, "departureDate": "2023-12-01", "returnDate": "2023-12-10", "passengers": 1}, "expected": {"outcome": "Flight search failed", "status": "Invalid Criteria"}}, {"name": "Failed Hotel Search with Invalid Dates", "description": "Verify that a user cannot search for hotels if the check-out date is before the check-in date", "input": {"searchType": "hotel", "location": "Paris", "checkInDate": "2023-12-05", "checkOutDate": "2023-12-01", "guests": 2}, "expected": {"outcome": "Hotel search failed", "status": "Invalid Date Range"}}, {"name": "Edge Case Flight Search with Maximum Passengers", "description": "Verify that a user can search for flights with the maximum number of passengers allowed", "input": {"searchType": "flight", "origin": "New York", "destination": "Los Angeles", "departureDate": "2023-12-01", "returnDate": "2023-12-10", "passengers": 9}, "expected": {"outcome": "Flight search successful", "status": "Results Found"}}, {"name": "Edge Case Hotel Search with Zero Guests", "description": "Verify that a user cannot search for hotels with zero guests", "input": {"searchType": "hotel", "location": "Paris", "checkInDate": "2023-12-01", "checkOutDate": "2023-12-05", "guests": 0}, "expected": {"outcome": "Hotel search failed", "status": "Invalid Guest Number"}}], "bert_score": {"Precision": 0.9377821683883667, "Recall": 0.9321291446685791, "F1": 0.9349470734596252}}
{"usecase": {"name": "Admin Flight Management", "scenario": "Admin adds or removes flights from the system.", "actors": "Admin", "steps": ["Admin adds a new flight", "Admin removes an existing flight"]}, "testcases": [{"name": "Add New Flight", "description": "Verify that the admin can successfully add a new flight.", "input": {"flightDetails": {"flightNumber": "TB123", "departure": "City U", "destination": "City V", "date": "2024-10-01", "availableSeats": 150}}, "expected": {"outcome": "New flight added successfully"}}, {"name": "Remove Existing Flight", "description": "Verify that the admin can successfully remove an existing flight.", "input": {"flightID": "TB456"}, "expected": {"outcome": "Existing flight removed successfully"}}, {"name": "Invalid Flight Details", "description": "Verify that adding a flight fails for invalid or incomplete details.", "input": {"flightDetails": {"departure": "City W", "date": "2024-12-01", "availableSeats": 100}}, "expected": {"outcome": "Adding flight failed", "message": "Incomplete or invalid flight details"}}], "GPT4o_testcases": [{"name": "Successful Flight Addition", "description": "Verify that an admin can successfully add a new flight to the system", "input": {"adminId": "admin_67890", "flightNumber": "FL123", "departure": "2023-12-01T10:00:00", "arrival": "2023-12-01T14:00:00", "origin": "JFK", "destination": "LAX"}, "expected": {"outcome": "Flight addition successful", "status": "Flight Added"}}, {"name": "Failed Flight Addition Due to Missing Information", "description": "Verify that an admin cannot add a new flight if any required information is missing", "input": {"adminId": "admin_67890", "flightNumber": "FL123", "departure": null, "arrival": "2023-12-01T14:00:00", "origin": "JFK", "destination": "LAX"}, "expected": {"outcome": "Flight addition failed", "status": "Missing Information"}}, {"name": "Successful Flight Removal", "description": "Verify that an admin can successfully remove an existing flight from the system", "input": {"adminId": "admin_67890", "flightNumber": "FL123"}, "expected": {"outcome": "Flight removal successful", "status": "Flight Removed"}}, {"name": "Failed Flight Removal Due to Non-existent Flight", "description": "Verify that an admin cannot remove a flight that does not exist in the system", "input": {"adminId": "admin_67890", "flightNumber": "FL999"}, "expected": {"outcome": "Flight removal failed", "status": "Flight Not Found"}}], "bert_score": {"Precision": 0.9276332259178162, "Recall": 0.9399727582931519, "F1": 0.93376225233078}}
{"usecase": {"name": "Admin Hotel Management", "scenario": "Admin manages hotels by adding/removing hotels and adding rooms to hotels.", "actors": "Admin", "steps": ["Admin adds a new hotel", "Admin adds a new room to an existing hotel", "Admin removes an existing hotel"]}, "testcases": [{"name": "Add New Hotel", "description": "Verify that the admin can successfully add a new hotel.", "input": {"hotelDetails": {"hotelName": "Luxury Resort", "location": "Beachfront Paradise", "availableRooms": 50}}, "expected": {"outcome": "New hotel added successfully"}}, {"name": "Add Room to Hotel", "description": "Verify that the admin can successfully add a room to an existing hotel.", "input": {"hotelID": "H789", "roomDetails": {"roomNumber": "101", "roomType": "Suite", "price": 200}}, "expected": {"outcome": "Room added to hotel successfully"}}, {"name": "Remove Existing Hotel", "description": "Verify that the admin can successfully remove an existing hotel.", "input": {"hotelID": "H456"}, "expected": {"outcome": "Existing hotel removed successfully"}}, {"name": "Invalid Hotel Details", "description": "Verify that adding a hotel fails for invalid or incomplete details.", "input": {"hotelDetails": {"location": "Mountain View", "availableRooms": 100}}, "expected": {"outcome": "Adding hotel failed", "message": "Incomplete or invalid hotel details"}}, {"name": "Invalid Room Details", "description": "Verify that adding a room fails for invalid or incomplete details.", "input": {"hotelID": "H123", "roomDetails": {"roomType": "InvalidType", "price": -50}}, "expected": {"outcome": "Adding room failed", "message": "Incomplete or invalid room details"}}], "GPT4o_testcases": [{"name": "Successful Hotel Addition", "description": "Verify that an admin can successfully add a new hotel", "input": {"adminId": "admin_67890", "hotelName": "Sunrise Inn", "location": "Downtown", "rating": 4}, "expected": {"outcome": "Hotel addition successful", "status": "Hotel Added"}}, {"name": "Failed Hotel Addition Due to Missing Information", "description": "Verify that an admin cannot add a new hotel if any required information is missing", "input": {"adminId": "admin_67890", "hotelName": null, "location": "Downtown", "rating": 4}, "expected": {"outcome": "Hotel addition failed", "status": "Missing Information"}}, {"name": "Successful Room Addition", "description": "Verify that an admin can successfully add a new room to an existing hotel", "input": {"adminId": "admin_67890", "hotelId": "hotel_12345", "roomNumber": "101", "roomType": "Deluxe", "price": 150}, "expected": {"outcome": "Room addition successful", "status": "Room Added"}}, {"name": "Failed Room Addition Due to Invalid Hotel ID", "description": "Verify that an admin cannot add a new room if the hotel ID is invalid", "input": {"adminId": "admin_67890", "hotelId": "invalid_hotel_id", "roomNumber": "101", "roomType": "Deluxe", "price": 150}, "expected": {"outcome": "Room addition failed", "status": "Invalid Hotel ID"}}, {"name": "Successful Hotel Removal", "description": "Verify that an admin can successfully remove an existing hotel", "input": {"adminId": "admin_67890", "hotelId": "hotel_12345"}, "expected": {"outcome": "Hotel removal successful", "status": "Hotel Removed"}}, {"name": "Failed Hotel Removal Due to Non-existent Hotel", "description": "Verify that an admin cannot remove a hotel that does not exist", "input": {"adminId": "admin_67890", "hotelId": "non_existent_hotel"}, "expected": {"outcome": "Hotel removal failed", "status": "Hotel Not Found"}}], "bert_score": {"Precision": 0.9415313005447388, "Recall": 0.947519063949585, "F1": 0.9445157051086426}}
{"usecase": {"name": "Problem Publication", "scenario": "Setter publishes a problem and Admin approves or rejects", "actors": "Setter, Admin", "preconditions": "Setter is an admin approved setter in our system", "steps": ["Setter designs a problem and saves it", "Setter submits the problem for approval", "Admin approves or rejects the problem"]}, "testcases": [{"name": "Valid Problem Submission", "description": "Verify that a setter can successfully design and submit a problem for approval.", "input": {"problemId": 1}, "expected": {"outcome": "Problem submitted for approval", "status": "Approved"}}, {"name": "Empty Canvas Submission", "description": "Verify that the system handles the case where a setter tries to submit a problem without any canvas.", "input": {"problemId": 1}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a problem.", "input": {"adminApproval": true}, "expected": {"outcome": "Problem approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject a problem.", "input": {"adminApproval": false}, "expected": {"outcome": "Problem rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Problem Publication", "description": "Verify that a setter can successfully publish a problem and it gets approved by the admin", "input": {"setterId": "setter_67890", "problemTitle": "Sample Problem", "problemDescription": "This is a sample problem description.", "difficultyLevel": "Medium"}, "expected": {"outcome": "Problem published and approved", "status": "Approved"}}, {"name": "Problem Publication Rejection", "description": "Verify that a problem can be rejected by the admin", "input": {"setterId": "setter_67890", "problemTitle": "Sample Problem", "problemDescription": "This is a sample problem description.", "difficultyLevel": "Medium"}, "expected": {"outcome": "Problem published but rejected", "status": "Rejected"}}, {"name": "Failed Problem Publication Due to Missing Title", "description": "Verify that a problem cannot be published if the title is missing", "input": {"setterId": "setter_67890", "problemTitle": null, "problemDescription": "This is a sample problem description.", "difficultyLevel": "Medium"}, "expected": {"outcome": "Problem publication failed", "status": "Missing Information"}}, {"name": "Failed Problem Publication Due to Unauthorized Setter", "description": "Verify that a problem cannot be published by an unauthorized setter", "input": {"setterId": "unauthorized_setter_123", "problemTitle": "Sample Problem", "problemDescription": "This is a sample problem description.", "difficultyLevel": "Medium"}, "expected": {"outcome": "Problem publication failed", "status": "Unauthorized Setter"}}], "bert_score": {"Precision": 0.929899275302887, "Recall": 0.9404795169830322, "F1": 0.9351595044136047}}
{"usecase": {"name": "Problem Setter Registration", "scenario": "A user intends to become a problem setter and registers for the role. Admin reviews and approves/rejects the registration.", "actors": "User, Admin", "preconditions": "", "steps": ["User expresses the intention to become a problem setter", "User submits the registration request", "Admin reviews the registration request and makes a decision (approve/reject)"]}, "testcases": [{"name": "Valid Registration Request", "description": "Verify that a user can successfully submit a valid registration request to become a problem setter.", "input": {"name": "Mahir Labib Dihan", "email": "mahirlabibdihan@gmail.com"}, "expected": {"outcome": "Registration request submitted for approval", "status": "Pending Approval"}}, {"name": "Empty Registration Details", "description": "Verify that the system handles the case where a user tries to submit an empty registration request.", "input": {}, "expected": {"outcome": "Registration request failed", "status": "Rejected"}}, {"name": "Administrator Approval", "description": "Verify that the administrator can successfully approve a submitted problem setter registration request.", "input": {"adminApproval": true}, "expected": {"outcome": "Registration approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the administrator can reject a submitted problem setter registration request.", "input": {"adminApproval": false}, "expected": {"outcome": "Registration rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Problem Setter Registration", "description": "Verify that a user can successfully register as a problem setter and get approved by the admin", "input": {"userId": "user_67890", "intention": "Register as problem setter", "registrationDetails": {"experience": "5 years", "expertise": "Mathematics"}}, "expected": {"outcome": "Registration approved", "status": "Approved"}}, {"name": "Failed Problem Setter Registration Due to Missing Information", "description": "Verify that a user cannot register as a problem setter if any required information is missing", "input": {"userId": "user_67890", "intention": "Register as problem setter", "registrationDetails": {"experience": null, "expertise": "Mathematics"}}, "expected": {"outcome": "Registration failed", "status": "Incomplete Information"}}, {"name": "Rejected Problem Setter Registration", "description": "Verify that a user's registration can be rejected by the admin", "input": {"userId": "user_67890", "intention": "Register as problem setter", "registrationDetails": {"experience": "1 year", "expertise": "Physics"}}, "expected": {"outcome": "Registration rejected", "status": "Rejected"}}, {"name": "Invalid Problem Setter Registration Request", "description": "Verify that a registration request with invalid data is handled properly", "input": {"userId": "user_67890", "intention": "Register as problem setter", "registrationDetails": {"experience": "Invalid data", "expertise": "Mathematics"}}, "expected": {"outcome": "Registration failed", "status": "Invalid Information"}}], "bert_score": {"Precision": 0.9260467290878296, "Recall": 0.9215131998062134, "F1": 0.9237744212150574}}
{"usecase": {"name": "Problem Solution Submission", "scenario": "A registered user intends to solve a problem available on the platform. The user successfully solves the problem, and the system records the solution.", "actors": "User", "preconditions": "User is registered and logged into the system", "steps": ["User navigates to the list of available problems", "User selects a specific problem to solve", "User provides a solution to the problem", "User submits the solution", "System checks the solution, gives verdict and updates the user's solving history"]}, "testcases": [{"name": "Valid Problem Solution", "description": "Verify that a user can successfully solve a problem and submit a valid solution.", "input": {"problemId": 1, "solutionJson": "solution.json", "checkerJson": "answer.json", "checkerCode": "code.js"}, "expected": {"outcome": "Solution submitted successfully", "status": "Recorded"}}, {"name": "Solution acceptd", "description": "database will be updated as the solution is matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "accepted"}, "expected": {"outcome": "Solution submission acccpted", "status": "Recorded"}}, {"name": "wrong answer", "description": "database will be updated as the solution isn't matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "wrong answer"}, "expected": {"outcome": "Solution submission rejected", "status": "Recorded"}}], "GPT4o_testcases": [{"name": "Successful Problem Solution Submission", "description": "Verify that a user can successfully submit a correct solution to a problem", "input": {"userId": "user_67890", "problemId": "problem_001", "solution": "correct_solution_code"}, "expected": {"outcome": "Solution submission successful", "status": "Correct Solution"}}, {"name": "Failed Problem Solution Submission - Incorrect Solution", "description": "Verify that a user receives a failure message when submitting an incorrect solution", "input": {"userId": "user_67890", "problemId": "problem_001", "solution": "incorrect_solution_code"}, "expected": {"outcome": "Solution submission failed", "status": "Incorrect Solution"}}, {"name": "Failed Problem Solution Submission - Empty Solution", "description": "Verify that a user cannot submit an empty solution", "input": {"userId": "user_67890", "problemId": "problem_001", "solution": ""}, "expected": {"outcome": "Solution submission failed", "status": "Empty Solution"}}, {"name": "Failed Problem Solution Submission - Unregistered User", "description": "Verify that an unregistered user cannot submit a solution", "input": {"userId": null, "problemId": "problem_001", "solution": "some_solution_code"}, "expected": {"outcome": "Solution submission failed", "status": "User Not Registered"}}, {"name": "Failed Problem Solution Submission - Invalid Problem ID", "description": "Verify that a user cannot submit a solution to a non-existent problem", "input": {"userId": "user_67890", "problemId": "invalid_problem_id", "solution": "some_solution_code"}, "expected": {"outcome": "Solution submission failed", "status": "Invalid Problem ID"}}], "bert_score": {"Precision": 0.9428920745849609, "Recall": 0.942503035068512, "F1": 0.9426975846290588}}
{"usecase": {"name": "Add Problem To Contest", "scenario": "A contest owner or collaborators can add own designed problems to the contest", "actors": "contest setter", "preconditions": "contest setter should be a registered setter in our system. contest id should be a valid contest id and the problem also should be a valid one", "steps": ["Setter navigates to the list of his/her owned or contributed conetests", "Setter selects a specific contest to add problem in", "Setter choose a problem of his/her own and add to the contest"]}, "testcases": [{"name": "Valid problem addition", "description": "a problem is being added into contest ", "input": {"contestId": 1, "problemId": 1}, "expected": {"outcome": "problem added to contest", "status": "approved"}}], "GPT4o_testcases": [{"name": "Successful Problem Addition to Contest", "description": "Verify that a contest setter can successfully add a valid problem to a contest", "input": {"setterId": "setter_67890", "contestId": "contest_12345", "problemId": "problem_54321"}, "expected": {"outcome": "Problem addition successful", "status": "Problem Added"}}, {"name": "Failed Problem Addition Due to Invalid Contest ID", "description": "Verify that a contest setter cannot add a problem to a contest with an invalid contest ID", "input": {"setterId": "setter_67890", "contestId": "invalid_contest", "problemId": "problem_54321"}, "expected": {"outcome": "Problem addition failed", "status": "Invalid Contest ID"}}, {"name": "Failed Problem Addition Due to Invalid Problem ID", "description": "Verify that a contest setter cannot add a problem with an invalid problem ID to a contest", "input": {"setterId": "setter_67890", "contestId": "contest_12345", "problemId": "invalid_problem"}, "expected": {"outcome": "Problem addition failed", "status": "Invalid Problem ID"}}, {"name": "Failed Problem Addition Due to Unregistered Setter", "description": "Verify that an unregistered setter cannot add a problem to a contest", "input": {"setterId": "unregistered_setter", "contestId": "contest_12345", "problemId": "problem_54321"}, "expected": {"outcome": "Problem addition failed", "status": "Unregistered Setter"}}, {"name": "Successful Problem Addition with Edge Case Problem ID", "description": "Verify that a contest setter can add a problem with a boundary value problem ID to a contest", "input": {"setterId": "setter_67890", "contestId": "contest_12345", "problemId": "problem_00001"}, "expected": {"outcome": "Problem addition successful", "status": "Problem Added"}}], "bert_score": {"Precision": 0.8846741318702698, "Recall": 0.9197843074798584, "F1": 0.9018876552581787}}
{"usecase": {"name": "Contest Submission for Approval", "scenario": "A contest organizer wants to submit a complete contest for approval. The organizer arranges the contest, including multiple problems, and submits it for approval. An administrator reviews and approves/rejects the submitted contest.", "actors": "Contest Setter, Admin", "preconditions": "Contest Setter is registered as a setter in our system.", "steps": ["Contest Organizer creates a new contest with multiple problems", "Contest Organizer submits the complete contest for approval", "Administrator reviews and approves/rejects the submitted contest"]}, "testcases": [{"name": "Valid Contest Submission", "description": "Verify that a contest organizer can successfully create and submit a valid contest with multiple problems for approval.", "input": {"contestId": 2}, "expected": {"outcome": "Contest submitted for approval", "status": "Pending Approval"}}, {"name": "Administrator Approval", "description": "Verify that the contest can be published.", "input": {"adminApproval": true}, "expected": {"outcome": "Contest approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the contest is rejected.", "input": {"adminApproval": false}, "expected": {"outcome": "Contest rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Contest Submission", "description": "Verify that a contest organizer can successfully submit a complete contest for approval", "input": {"organizerId": "organizer_67890", "contestName": "Math Olympiad", "problems": [{"title": "Algebra Challenge", "difficulty": "Medium"}, {"title": "Geometry Puzzle", "difficulty": "Hard"}]}, "expected": {"outcome": "Contest submission successful", "status": "Pending Approval"}}, {"name": "Failed Contest Submission Due to Missing Problems", "description": "Verify that a contest submission fails if no problems are included", "input": {"organizerId": "organizer_67890", "contestName": "Math Olympiad", "problems": []}, "expected": {"outcome": "Contest submission failed", "status": "No Problems Included"}}, {"name": "Failed Contest Submission Due to Unregistered Organizer", "description": "Verify that a contest submission fails if the organizer is not registered", "input": {"organizerId": "unregistered_12345", "contestName": "Science Quiz", "problems": [{"title": "Physics Problem", "difficulty": "Easy"}]}, "expected": {"outcome": "Contest submission failed", "status": "Organizer Not Registered"}}, {"name": "Successful Contest Approval", "description": "Verify that an administrator can successfully approve a submitted contest", "input": {"adminId": "admin_54321", "contestId": "contest_98765", "action": "approve"}, "expected": {"outcome": "Contest approved", "status": "Approved"}}, {"name": "Successful Contest Rejection", "description": "Verify that an administrator can successfully reject a submitted contest", "input": {"adminId": "admin_54321", "contestId": "contest_98765", "action": "reject"}, "expected": {"outcome": "Contest rejected", "status": "Rejected"}}, {"name": "Failed Contest Approval Due to Invalid Admin", "description": "Verify that contest approval fails if the admin is not valid", "input": {"adminId": "invalid_admin_00000", "contestId": "contest_98765", "action": "approve"}, "expected": {"outcome": "Contest approval failed", "status": "Invalid Admin"}}], "bert_score": {"Precision": 0.9142647385597229, "Recall": 0.9231799840927124, "F1": 0.9187006950378418}}
{"usecase": {"name": "Bus Tracking", "scenario": "Admin can track a live bus.", "actors": "Admin, Driver", "preconditions": "Driver must initiate an allocated trip ", "steps": ["Admin navigates to Tracking module", "Admin selects a live trip from the list", "System shows the trace of the trip using map api"]}, "testcases": [{"name": "Live Trip Tracking", "description": "Verify that Admin can select a valid live trip id to view the bus's path on the map.", "input": {"id": "1931"}, "expected": {"outcome": "Bus path visible on map", "status": "Success"}}, {"name": "Bus Tracking Finished", "description": "Verify that Admin cannot select a finished trip, which is not displayed.", "input": {"id": "1931"}, "expected": {"outcome": "Path not displayed on map", "status": "Finished"}}], "GPT4o_testcases": [{"name": "Successful Bus Tracking", "description": "Verify that an admin can successfully track a live bus trip", "input": {"adminId": "admin_67890", "tripId": "trip_12345"}, "expected": {"outcome": "Bus tracking successful", "status": "Trip Tracked"}}, {"name": "Failed Bus Tracking - No Active Trip", "description": "Verify that an admin cannot track a bus if there is no active trip", "input": {"adminId": "admin_67890", "tripId": null}, "expected": {"outcome": "Bus tracking failed", "status": "No Active Trip"}}, {"name": "Failed Bus Tracking - Invalid Trip ID", "description": "Verify that an admin cannot track a bus with an invalid trip ID", "input": {"adminId": "admin_67890", "tripId": "invalid_trip"}, "expected": {"outcome": "Bus tracking failed", "status": "Invalid Trip ID"}}, {"name": "Edge Case - Multiple Trips", "description": "Verify that an admin can select and track one trip when multiple trips are active", "input": {"adminId": "admin_67890", "tripId": "trip_54321"}, "expected": {"outcome": "Bus tracking successful", "status": "Trip Tracked"}}], "bert_score": {"Precision": 0.930980384349823, "Recall": 0.941727876663208, "F1": 0.9363232851028442}}
{"usecase": {"name": "Add a trip allocation", "scenario": "Admin defines a new trip allocation", "actors": "Admin", "preconditions": "Dependencies between Routes, Buses and Bus Staffs are not violated.", "steps": ["Admin navigates to Upcoming Trips module", "Admin enters details for a new trip e.g. route, driver, bus, date and shift", "Admin submits single trip allocation", "Admin submits bulk trip allocation", "System adds the allocation to the database"]}, "testcases": [{"name": "Single Trip Allocation", "description": "Verify that Admin can add a single allocation to the database.", "input": {"route": "Badda", "driver": "altaf68", "helper": "hossain43", "bus": "Ba-12-5555", "shift": "morning", "time": "2023-10-15T08:00:00Z", "admin": "mashroor"}, "expected": {"outcome": "Trip added to database", "status": "Added"}}, {"name": "Bulk Trip Allocation", "description": "Verify that Admin can make bulk allocation of all trips due for the next day.", "input": {"date": "2023-10-16", "admin": "mashroor"}, "expected": {"outcome": "Bulk Allocation saved successfully", "status": "Success"}}, {"name": "Empty Trip Data Selection", "description": "Verify that the system handles the case where an Admin fails to submit an allocation with empty fields.", "input": {"route": "", "driver": "", "helper": "", "bus": "Ba-12-5555", "shift": "", "time": "", "admin": "mashroor"}, "expected": {"outcome": "Error saving bulk allocation", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful Single Trip Allocation", "description": "Verify that an admin can successfully allocate a single trip with valid details", "input": {"adminId": "admin_67890", "route": "Route A", "driver": "Driver X", "bus": "Bus 101", "date": "2023-11-01", "shift": "Morning"}, "expected": {"outcome": "Trip allocation successful", "status": "Allocation Added"}}, {"name": "Failed Single Trip Allocation Due to Missing Details", "description": "Verify that an admin cannot allocate a trip if any required detail is missing", "input": {"adminId": "admin_67890", "route": "Route A", "driver": null, "bus": "Bus 101", "date": "2023-11-01", "shift": "Morning"}, "expected": {"outcome": "Trip allocation failed", "status": "Missing Information"}}, {"name": "Successful Bulk Trip Allocation", "description": "Verify that an admin can successfully allocate multiple trips with valid details", "input": {"adminId": "admin_67890", "trips": [{"route": "Route A", "driver": "Driver X", "bus": "Bus 101", "date": "2023-11-01", "shift": "Morning"}, {"route": "Route B", "driver": "Driver Y", "bus": "Bus 102", "date": "2023-11-02", "shift": "Evening"}]}, "expected": {"outcome": "Bulk trip allocation successful", "status": "Allocations Added"}}, {"name": "Failed Bulk Trip Allocation Due to Route Conflict", "description": "Verify that an admin cannot allocate trips if there is a route conflict", "input": {"adminId": "admin_67890", "trips": [{"route": "Route A", "driver": "Driver X", "bus": "Bus 101", "date": "2023-11-01", "shift": "Morning"}, {"route": "Route A", "driver": "Driver Z", "bus": "Bus 103", "date": "2023-11-01", "shift": "Morning"}]}, "expected": {"outcome": "Bulk trip allocation failed", "status": "Route Conflict"}}], "bert_score": {"Precision": 0.9344602823257446, "Recall": 0.9257572293281555, "F1": 0.9300883412361145}}
{"usecase": {"name": "View lists of user, bus, route, staff etc", "scenario": "Authorized Admin can view list of all buses, routes, users and staff", "actors": "Admin", "preconditions": "Route, Bus and Bus Staff etc data are available.", "steps": ["Admin navigates to the respective section (user, bus, route, bus_staff) in Database module", "Admin views a list of entities in the selected list", "Admin clicks on an entity to view its full details"]}, "testcases": [{"name": "View Users List", "description": "Verify that Admin can view the list of all users.", "input": {}, "expected": {"outcome": "User list displayed", "status": "Success"}}, {"name": "View Buses List", "description": "Verify that Admin can view the list of all buses.", "input": {}, "expected": {"outcome": "Bus list displayed", "status": "Success"}}, {"name": "View Routes List", "description": "Verify that Admin can view the list of all Routes.", "input": {}, "expected": {"outcome": "Route list displayed", "status": "Success"}}, {"name": "View Staff List", "description": "Verify that Admin can view the list of all staff.", "input": {}, "expected": {"outcome": "Staff list displayed", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful View of User List", "description": "Verify that an admin can successfully view the list of users", "input": {"adminId": "admin_67890", "section": "user"}, "expected": {"outcome": "User list displayed successfully", "status": "List Retrieved"}}, {"name": "Successful View of Bus List", "description": "Verify that an admin can successfully view the list of buses", "input": {"adminId": "admin_67890", "section": "bus"}, "expected": {"outcome": "Bus list displayed successfully", "status": "List Retrieved"}}, {"name": "Failed View of Route List", "description": "Verify that an admin cannot view the list of routes if the section is incorrect", "input": {"adminId": "admin_67890", "section": "route_invalid"}, "expected": {"outcome": "Route list display failed", "status": "Invalid Section"}}, {"name": "Failed View of Staff List", "description": "Verify that an admin cannot view the list of staff if adminId is invalid", "input": {"adminId": "invalid_admin", "section": "bus_staff"}, "expected": {"outcome": "Staff list display failed", "status": "Unauthorized Access"}}, {"name": "Successful View of Route Details", "description": "Verify that an admin can view full details of a selected route", "input": {"adminId": "admin_67890", "section": "route", "entityId": "route_001"}, "expected": {"outcome": "Route details displayed successfully", "status": "Details Retrieved"}}, {"name": "Failed View of Bus Details", "description": "Verify that an admin cannot view bus details if entityId is invalid", "input": {"adminId": "admin_67890", "section": "bus", "entityId": "invalid_bus"}, "expected": {"outcome": "Bus details display failed", "status": "Invalid Entity"}}], "bert_score": {"Precision": 0.9292462468147278, "Recall": 0.94527268409729, "F1": 0.9371909499168396}}
{"usecase": {"name": "Add data to user, bus, route, staff etc database", "scenario": "Authorized Admin can add new buses, routes, users and staff", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the clicks on respective buttons to add users, buses, routes, or staff", "Admin fills in the required fields for the new entity", "Admin submits the request to add the new entity", "System validates the data and adds the entity to the database"]}, "testcases": [{"name": "New User Addition", "description": "Verify that Admin can add a new user to the database.", "input": {"id": "201905069", "name": "John Doe", "email": "johndoe@example.com", "phone": "01912345678", "role": "student"}, "expected": {"outcome": "New user added", "status": "Success"}}, {"name": "New User Addition Missing Field", "description": "Admin attempts to add a new user with a missing mandatory field.", "input": {"id": "", "name": "John Doe", "email": "johndoe@example.com", "phone": "", "role": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}, {"name": "New Bus Addition", "description": "Verify that Admin can add a new Bus to the database.", "input": {"id": "Ba-12-1234", "type": "minibus", "capacity": "60"}, "expected": {"outcome": "New bus added", "status": "Success"}}, {"name": "New Bus Addition Missing Field", "description": "Admin attempts to add a new bus with a missing mandatory field.", "input": {"id": "", "capacity": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}], "GPT4o_testcases": [{"name": "Successful User Addition", "description": "Verify that an admin can successfully add a new user to the database", "input": {"adminId": "admin_67890", "userName": "Alice Smith", "userEmail": "alice@example.com", "userRole": "Student"}, "expected": {"outcome": "User addition successful", "status": "User Added"}}, {"name": "Failed User Addition Due to Missing Email", "description": "Verify that an admin cannot add a new user if the email is missing", "input": {"adminId": "admin_67890", "userName": "Alice Smith", "userEmail": null, "userRole": "Student"}, "expected": {"outcome": "User addition failed", "status": "Missing Information"}}, {"name": "Successful Bus Addition", "description": "Verify that an admin can successfully add a new bus to the database", "input": {"adminId": "admin_67890", "busNumber": "Bus123", "busCapacity": 50, "busRoute": "Route A"}, "expected": {"outcome": "Bus addition successful", "status": "Bus Added"}}, {"name": "Failed Bus Addition Due to Invalid Capacity", "description": "Verify that an admin cannot add a new bus if the capacity is invalid", "input": {"adminId": "admin_67890", "busNumber": "Bus123", "busCapacity": -10, "busRoute": "Route A"}, "expected": {"outcome": "Bus addition failed", "status": "Invalid Information"}}, {"name": "Successful Route Addition", "description": "Verify that an admin can successfully add a new route to the database", "input": {"adminId": "admin_67890", "routeName": "Route B", "routeStart": "Point A", "routeEnd": "Point B"}, "expected": {"outcome": "Route addition successful", "status": "Route Added"}}, {"name": "Failed Route Addition Due to Missing Start Point", "description": "Verify that an admin cannot add a new route if the start point is missing", "input": {"adminId": "admin_67890", "routeName": "Route B", "routeStart": null, "routeEnd": "Point B"}, "expected": {"outcome": "Route addition failed", "status": "Missing Information"}}, {"name": "Successful Staff Addition", "description": "Verify that an admin can successfully add a new staff member to the database", "input": {"adminId": "admin_67890", "staffName": "Bob Johnson", "staffRole": "Driver", "staffContact": "0123456789"}, "expected": {"outcome": "Staff addition successful", "status": "Staff Added"}}, {"name": "Failed Staff Addition Due to Invalid Contact", "description": "Verify that an admin cannot add a new staff member if the contact number is invalid", "input": {"adminId": "admin_67890", "staffName": "Bob Johnson", "staffRole": "Driver", "staffContact": "invalid_contact"}, "expected": {"outcome": "Staff addition failed", "status": "Invalid Information"}}], "bert_score": {"Precision": 0.9512555599212646, "Recall": 0.9539439082145691, "F1": 0.9525977969169617}}
{"usecase": {"name": "Feedbacks from clients and respond", "scenario": "Authorized Admin can view and respond to client feedbacks", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the Feedback module.", "Admin views all feedbacks from clients", "Admin selects a feedback to read", "Admin responds to the feedback", "System updates the feedback status and optionally notifies the client"]}, "testcases": [{"name": "Feedback List", "description": "Verify that Admin can view all client's feedback.", "input": {}, "expected": {"outcome": "Feedback List Shown", "status": "Success"}}, {"name": "Feedback Details", "description": "Verify that Admin can view a specific client's feedback.", "input": {"feedbackId": "183"}, "expected": {"outcome": "Feedback Details Shown", "status": "Success"}}, {"name": "Feedback Response", "description": "Verify that Admin can respond to client's feedback.", "input": {"feedbackId": "183", "response": "the concerned issue is being looked into soon."}, "expected": {"outcome": "Feedback Responded", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Feedback Response", "description": "Verify that an authorized admin can successfully respond to a client feedback", "input": {"adminId": "admin_67890", "feedbackId": "feedback_001", "response": "Thank you for your feedback. We will address your concerns shortly."}, "expected": {"outcome": "Feedback response successful", "status": "Response Sent"}}, {"name": "Failed Feedback Response Due to Unauthorized Admin", "description": "Verify that an unauthorized admin cannot respond to client feedback", "input": {"adminId": "admin_unauthorized", "feedbackId": "feedback_002", "response": "We appreciate your feedback."}, "expected": {"outcome": "Feedback response failed", "status": "Unauthorized Access"}}, {"name": "Failed Feedback Response Due to Empty Response", "description": "Verify that an admin cannot send an empty response to client feedback", "input": {"adminId": "admin_67890", "feedbackId": "feedback_003", "response": ""}, "expected": {"outcome": "Feedback response failed", "status": "Empty Response"}}, {"name": "View Feedbacks Successfully", "description": "Verify that an authorized admin can view all client feedbacks", "input": {"adminId": "admin_67890"}, "expected": {"outcome": "Feedbacks viewed successfully", "status": "Feedbacks Displayed"}}, {"name": "Failed to View Feedbacks Due to Unauthorized Admin", "description": "Verify that an unauthorized admin cannot view client feedbacks", "input": {"adminId": "admin_unauthorized"}, "expected": {"outcome": "View feedbacks failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9201143980026245, "Recall": 0.9361467957496643, "F1": 0.9280613660812378}}
{"usecase": {"name": "Requisition from teachers and respond", "scenario": "Authorized Admin can view and respond to teacher requisition requests.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin logs into the system", "Admin navigates to the requisition requests section", "Admin views all requisition requests from teachers", "Admin selects a request to view details", "Admin approves or rejects the request", "System updates the request status"]}, "testcases": [{"name": "Requisition List", "description": "Verify that Admin can view all Teacher requisitions.", "input": {}, "expected": {"outcome": "Requisition List Shown", "status": "Success"}}, {"name": "Requisition Approval", "description": "Admin views and approves a teacher's requisition request.", "input": {"requestId": "123", "busId": "Ba-14-5739", "date": "24-02-2024"}, "expected": {"outcome": "Request approved", "status": "Approved"}}, {"name": "Requisition Rejection", "description": "Admin views and rejects a teacher's requisition request.", "input": {"requestId": "456"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Requisition Approval", "description": "Verify that an admin can successfully approve a teacher's requisition request", "input": {"adminId": "admin_67890", "requestId": "req_001", "action": "approve"}, "expected": {"outcome": "Requisition request approved successfully", "status": "Approved"}}, {"name": "Successful Requisition Rejection", "description": "Verify that an admin can successfully reject a teacher's requisition request", "input": {"adminId": "admin_67890", "requestId": "req_002", "action": "reject"}, "expected": {"outcome": "Requisition request rejected successfully", "status": "Rejected"}}, {"name": "Failed Requisition Action Due to Missing Request ID", "description": "Verify that an admin cannot approve or reject a requisition request if the request ID is missing", "input": {"adminId": "admin_67890", "requestId": null, "action": "approve"}, "expected": {"outcome": "Requisition action failed", "status": "Invalid Request ID"}}, {"name": "Failed Requisition Action Due to Invalid Admin ID", "description": "Verify that an action cannot be performed if the admin ID is invalid", "input": {"adminId": "invalid_admin", "requestId": "req_003", "action": "approve"}, "expected": {"outcome": "Requisition action failed", "status": "Unauthorized Admin"}}, {"name": "Edge Case: Requisition Action with Empty Action Field", "description": "Verify that an admin cannot perform an action if the action field is empty", "input": {"adminId": "admin_67890", "requestId": "req_004", "action": ""}, "expected": {"outcome": "Requisition action failed", "status": "Invalid Action"}}], "bert_score": {"Precision": 0.9244861006736755, "Recall": 0.9301465153694153, "F1": 0.927307665348053}}
{"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Inventory Update", "description": "Verify that an admin can successfully update the inventory list by adding a new item", "input": {"adminId": "admin_67890", "action": "add", "item": {"partId": "part_001", "partName": "Brake Pad", "quantity": 50, "price": 25.99}}, "expected": {"outcome": "Inventory update successful", "status": "Item Added"}}, {"name": "Failed Inventory Update Due to Missing Information", "description": "Verify that an admin cannot update the inventory list if any required information is missing", "input": {"adminId": "admin_67890", "action": "add", "item": {"partId": "part_002", "partName": null, "quantity": 30, "price": 15.99}}, "expected": {"outcome": "Inventory update failed", "status": "Missing Information"}}, {"name": "Successful Inventory Deletion", "description": "Verify that an admin can successfully delete an item from the inventory list", "input": {"adminId": "admin_67890", "action": "delete", "item": {"partId": "part_003"}}, "expected": {"outcome": "Inventory update successful", "status": "Item Deleted"}}, {"name": "Failed Inventory Deletion Due to Non-existent Item", "description": "Verify that an admin cannot delete an item that does not exist in the inventory list", "input": {"adminId": "admin_67890", "action": "delete", "item": {"partId": "part_999"}}, "expected": {"outcome": "Inventory update failed", "status": "Item Not Found"}}], "bert_score": {"Precision": 0.9146130084991455, "Recall": 0.930932343006134, "F1": 0.9227005243301392}}
{"usecase": {"name": "Stock Management", "scenario": "Inventory managers/lab assistants stocks equipments according to need.", "actors": "Inventory Manager, Lab Assistant", "preconditions": "Inventory manager is assigned to an inventory and lab assistant is assigned to a lab", "steps": ["Inventory manager/lab assistant checks own location for equipments that are below the threshold", "Inventory manager/lab assistant restocks the equipments which are running low and high in demand", "Inventory manager/lab assistant discards damaged equipments", "Inventory manager/lab assistant updates the stock in the system"]}, "testcases": [{"name": "Valid Location Selection", "description": "Verify that inventory manager/lab assistant has access to that location", "input": {"selectedLocation": "validLocation"}, "expected": {"outcome": "validLocation is selected", "status": "Success"}}, {"name": "Invalid Location Selection", "description": "Verify that the system handles the case where an inventory manager/lab assistant tries to access other inventory/lab", "input": {"selectedLocation": "invalidLocation"}, "expected": {"outcome": "access denied", "status": "Rejected"}}, {"name": "Valid quantity entry", "description": "Verify that the system accepts valid quantity", "input": {"equipment": "Breadboard", "quantity": "10"}, "expected": {"outcome": "Stock updated", "status": "Success"}}, {"name": "Invalid quantity entry", "description": "Verify that the system rejects invalid quantity", "input": {"equipment": "Breadboard", "quantity": -5}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}, {"name": "Empty quantity entry", "description": "Verify that the system rejects empty quantity", "input": {"equipment": "Breadboard", "quantity": ""}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Equipment Restock", "description": "Verify that an inventory manager can successfully restock equipment that is below the threshold", "input": {"managerId": "manager_001", "equipmentId": "equip_123", "quantity": 50}, "expected": {"outcome": "Equipment restock successful", "status": "Stock Updated"}}, {"name": "Failed Equipment Restock Due to Invalid Quantity", "description": "Verify that an inventory manager cannot restock equipment with a negative quantity", "input": {"managerId": "manager_001", "equipmentId": "equip_123", "quantity": -10}, "expected": {"outcome": "Equipment restock failed", "status": "Invalid Quantity"}}, {"name": "Successful Equipment Discard", "description": "Verify that a lab assistant can successfully discard damaged equipment", "input": {"assistantId": "assistant_002", "equipmentId": "equip_456", "condition": "Damaged"}, "expected": {"outcome": "Equipment discard successful", "status": "Stock Updated"}}, {"name": "Failed Equipment Discard Due to Invalid Condition", "description": "Verify that a lab assistant cannot discard equipment with an invalid condition", "input": {"assistantId": "assistant_002", "equipmentId": "equip_456", "condition": "Unknown"}, "expected": {"outcome": "Equipment discard failed", "status": "Invalid Condition"}}, {"name": "Successful Stock Update", "description": "Verify that an inventory manager can successfully update the stock in the system", "input": {"managerId": "manager_001", "equipmentId": "equip_789", "newQuantity": 100}, "expected": {"outcome": "Stock update successful", "status": "Stock Updated"}}, {"name": "Failed Stock Update Due to Missing Equipment ID", "description": "Verify that an inventory manager cannot update the stock without providing an equipment ID", "input": {"managerId": "manager_001", "equipmentId": null, "newQuantity": 100}, "expected": {"outcome": "Stock update failed", "status": "Missing Equipment ID"}}], "bert_score": {"Precision": 0.9161396026611328, "Recall": 0.9248751997947693, "F1": 0.9204866290092468}}
{"usecase": {"name": "Request Processing", "scenario": "Student/Lab Assistant requests for equipments and the request is forwarded to required authority and finally the request is accepted/rejected", "actors": "Student, Lab Assistant, Inventory Manager, Lab Supervisor, Department Head", "preconditions": "Student is enrolled in the university, Lab Assistant is assigned to a lab, Inventory Manager is assigned to an inventory, Lab Supervisor is assigned to a lab, Department Head is assigned to a department", "steps": ["Student/Lab Assistant requests for equipments", "Lab Assistant forwards students' request to lab supervisor if required, otherwise accept/reject/modify it", "Lab Supervisor forwards the request to Department Head if required, otherwise accept/reject/modify it", "Inventory Manager/Department Head accepts/rejects the request"]}, "testcases": [{"name": "Valid Request", "description": "Verify that the system accepts valid request", "input": {"selectedEquipments": ["Breadboard", "Atmega32"], "quantity": ["10", "5"], "selectedLocation": "validLocation"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Invalid Request", "description": "Verify that the system rejects invalid request", "input": {"selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["-10", ""], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Request", "description": "Verify that the system rejects empty request", "input": {"selectedEquipments": "", "quantity": "", "selectedLocation": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Accept Request", "description": "Verify that the lab assistant/lab supervisor/department head can accept a student's request and an inventory manager can accept a lab assistant's request", "input": {"requestState": "Accepted"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Reject Request", "description": "Verify that the lab assistant/lab supervisor/department head can reject a student's request and an inventory manager can reject a lab assistant's request", "input": {"requestState": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Request", "description": "Verify that the lab assistant/lab supervisor can forward a student's request", "input": {"requestState": "Forwarded", "forwardTo": "Lab Supervisor"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Modify Request", "description": "Verify that the lab assistant/lab supervisor/department head can modify a student's request and an inventory manager can modify a lab assistant's request", "input": {"requestState": "Modified", "selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["10", "5"], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Request modified", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Equipment Request by Student", "description": "Verify that a student can successfully request equipment and the request is accepted by the Department Head", "input": {"requesterId": "student_67890", "equipmentList": ["Microscope", "Beaker"], "reason": "Lab Experiment", "forwardedBy": "Lab Assistant", "approvedBy": "Department Head"}, "expected": {"outcome": "Request accepted", "status": "Approved"}}, {"name": "Failed Equipment Request Due to Missing Equipment List", "description": "Verify that a request fails if the equipment list is empty", "input": {"requesterId": "student_67890", "equipmentList": [], "reason": "Lab Experiment", "forwardedBy": "Lab Assistant", "approvedBy": null}, "expected": {"outcome": "Request failed", "status": "Invalid Request"}}, {"name": "Request Modification by Lab Supervisor", "description": "Verify that a Lab Supervisor can modify a request before forwarding it to the Department Head", "input": {"requesterId": "student_67890", "equipmentList": ["Microscope"], "reason": "Lab Experiment", "forwardedBy": "Lab Supervisor", "modifiedEquipmentList": ["Microscope", "Test Tube"], "approvedBy": "Department Head"}, "expected": {"outcome": "Request modified and accepted", "status": "Approved"}}, {"name": "Request Rejection by Inventory Manager", "description": "Verify that an Inventory Manager can reject a request", "input": {"requesterId": "lab_assistant_12345", "equipmentList": ["Projector"], "reason": "Presentation", "forwardedBy": "Lab Supervisor", "approvedBy": "Inventory Manager", "rejectionReason": "Out of Stock"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Invalid Request by Unenrolled Student", "description": "Verify that a request fails if the requester is not enrolled in the university", "input": {"requesterId": "student_99999", "equipmentList": ["Laptop"], "reason": "Research", "forwardedBy": null, "approvedBy": null}, "expected": {"outcome": "Request failed", "status": "Invalid Requester"}}], "bert_score": {"Precision": 0.9254764318466187, "Recall": 0.9405150413513184, "F1": 0.9329351186752319}}
{"usecase": {"name": "Due Management", "scenario": "Lab Assistant/Super Admin monitors dues and takes necessary actions to recover them", "actors": "Lab Assistant, Student, Super Admin", "preconditions": "Lab Assistant is assigned to a lab, Student is enrolled in the university", "steps": ["Lab Assistant monitors dues", "Lab Assistant sends reminders to students with dues", "Lab Assistant updates the system with the status of dues", "Super Admin monitors the dues", "Students return their dues or report lost/damaged", "Lab Assistant updates the system with the status of dues", "Lab Assistant clears the dues after receiving the equipments"]}, "testcases": [{"name": "Valid Due Creation", "description": "Verify that the system creates a valid due for a student and lab assistant can monitor it", "input": {"studentId": "validStudentId", "equipment": "Breadboard", "quantity": "5", "dueDate": "2024-02-28", "location": "validLocation"}, "expected": {"outcome": "Due created", "status": "Success"}}, {"name": "Invalid Due Creation", "description": "Verify that the system rejects invalid due creation", "input": {"studentId": "invalidStudentId", "equipment": "Invalid Equipment", "quantity": "-5", "dueDate": "2024-02-28", "location": "invalidLocation"}, "expected": {"outcome": "Invalid due", "status": "Rejected"}}, {"name": "Empty Due Creation", "description": "Verify that the system rejects empty due creation", "input": {"studentId": "", "equipment": "", "quantity": "", "dueDate": "", "location": ""}, "expected": {"outcome": "Empty due", "status": "Rejected"}}, {"name": "Send Reminder", "description": "Verify that the lab assistant can send reminders to students with dues", "input": {"reminder": "Reminder sent"}, "expected": {"outcome": "Reminder sent", "status": "Success"}}, {"name": "Update Due Status", "description": "Verify that the lab assistant can update the system with the status of dues", "input": {"status": "Returned"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Monitor Due", "description": "Verify that the lab assistant/super admin can monitor the dues", "input": {"monitor": "Dues monitored"}, "expected": {"outcome": "Dues monitored", "status": "Success"}}, {"name": "Return Due", "description": "Verify that the student can return the due", "input": {"status": "Returned"}, "expected": {"outcome": "Due returned", "status": "Success"}}, {"name": "Report Lost/Damaged", "description": "Verify that the student can report lost/damaged due", "input": {"status": "Lost/Damaged"}, "expected": {"outcome": "Due reported", "status": "Success"}}, {"name": "Create Monetary Due", "description": "Verify that the system creates a monetary due for a student", "input": {"studentId": "validStudentId", "amount": "500", "dueDate": "2024-02-28"}, "expected": {"outcome": "Monetary due created", "status": "Success"}}, {"name": "Update Monetary Due Status", "description": "Verify that the lab assistant can update the system with the status of monetary dues", "input": {"status": "Paid"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Clear Due", "description": "Verify that the lab assistant can clear the due after receiving the equipments", "input": {"status": "Cleared"}, "expected": {"outcome": "Due cleared", "status": "Success"}}], "GPT4o_testcases": [{"name": "Successful Dues Monitoring and Recovery", "description": "Verify that a Lab Assistant can successfully monitor and recover dues from students", "input": {"labAssistantId": "lab_001", "studentId": "student_123", "dueAmount": 100, "equipmentStatus": "Returned"}, "expected": {"outcome": "Dues successfully monitored and recovered", "status": "Dues Cleared"}}, {"name": "Failed Dues Monitoring Due to Missing Information", "description": "Verify that a Lab Assistant cannot monitor dues if any required information is missing", "input": {"labAssistantId": "lab_001", "studentId": null, "dueAmount": 100, "equipmentStatus": "Returned"}, "expected": {"outcome": "Dues monitoring failed", "status": "Missing Information"}}, {"name": "Successful Reminder Sending", "description": "Verify that a Lab Assistant can successfully send reminders to students with dues", "input": {"labAssistantId": "lab_001", "studentId": "student_123", "dueAmount": 100}, "expected": {"outcome": "Reminder sent successfully", "status": "Reminder Sent"}}, {"name": "Failed Reminder Sending Due to Invalid Student ID", "description": "Verify that a Lab Assistant cannot send reminders if the student ID is invalid", "input": {"labAssistantId": "lab_001", "studentId": "invalid_student", "dueAmount": 100}, "expected": {"outcome": "Reminder sending failed", "status": "Invalid Student ID"}}, {"name": "Successful Dues Update by Super Admin", "description": "Verify that a Super Admin can successfully update the status of dues", "input": {"superAdminId": "admin_001", "studentId": "student_123", "dueAmount": 0, "equipmentStatus": "Returned"}, "expected": {"outcome": "Dues status updated successfully", "status": "Dues Cleared"}}, {"name": "Failed Dues Update Due to Incorrect Equipment Status", "description": "Verify that a Super Admin cannot update dues if the equipment status is incorrect", "input": {"superAdminId": "admin_001", "studentId": "student_123", "dueAmount": 0, "equipmentStatus": "Lost"}, "expected": {"outcome": "Dues update failed", "status": "Incorrect Equipment Status"}}], "bert_score": {"Precision": 0.942831814289093, "Recall": 0.9473689794540405, "F1": 0.9450949430465698}}
{"usecase": {"name": "Clearance Management", "scenario": "Student requests for clearance, superadmin verifies the request and forwards it to the department head, department head gives clearance.", "actors": "Student, Super Admin, Department Head", "preconditions": "Student is enrolled in the university, Super Admin is assigned to the university, Department Head is assigned to a department", "steps": ["Student requests for clearance", "Super Admin verifies the request and forwards it to the department head", "Department Head gives clearance"]}, "testcases": [{"name": "Valid Clearance Request", "description": "Verify that the system accepts valid clearance request", "input": {"studentId": "validStudentId", "level": "Final level", "term": "Final Term"}, "expected": {"outcome": "Request accepted", "status": "Pending"}}, {"name": "Invalid Clearance Request", "description": "Verify that the system rejects invalid clearance request", "input": {"studentId": "invalidStudentId", "level": "Invalid level", "term": "Invalid Term"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Clearance Request", "description": "Verify that the system rejects empty clearance request", "input": {"studentId": "", "level": "", "term": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Verify Clearance Request", "description": "Verify that the super admin can verify the clearance request", "input": {"studentId": "validStudentId", "dues": ""}, "expected": {"outcome": "Request verified", "status": "Success"}}, {"name": "Reject Clearance Request", "description": "Verify that the super admin can reject the clearance request", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Clearance Request", "description": "Verify that the super admin can forward the clearance request to the department head", "input": {"forward": "Forwarded"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Give Clearance", "description": "Verify that the department head can give clearance", "input": {"clearance": "Cleared"}, "expected": {"outcome": "Cleared", "status": "Success"}}, {"name": "Reject Clearance", "description": "Verify that the department head can reject the clearance", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Rejected", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Clearance Request", "description": "Verify that a student can successfully request clearance and receive approval from the department head", "input": {"studentId": "student_67890", "requestDate": "2023-10-01", "department": "Computer Science"}, "expected": {"outcome": "Clearance request approved", "status": "Clearance Granted"}}, {"name": "Failed Clearance Request Due to Missing Information", "description": "Verify that a clearance request fails if the student does not provide all necessary information", "input": {"studentId": "student_67890", "requestDate": null, "department": "Computer Science"}, "expected": {"outcome": "Clearance request failed", "status": "Incomplete Information"}}, {"name": "Clearance Request Rejected by Department Head", "description": "Verify that a clearance request can be rejected by the department head", "input": {"studentId": "student_67890", "requestDate": "2023-10-01", "department": "Computer Science"}, "expected": {"outcome": "Clearance request rejected", "status": "Clearance Denied"}}, {"name": "Invalid Clearance Request by Non-Enrolled Student", "description": "Verify that a clearance request fails if the student is not enrolled in the university", "input": {"studentId": "student_99999", "requestDate": "2023-10-01", "department": "Computer Science"}, "expected": {"outcome": "Clearance request failed", "status": "Student Not Enrolled"}}], "bert_score": {"Precision": 0.9306679964065552, "Recall": 0.9442769289016724, "F1": 0.937423050403595}}
{"usecase": {"name": "User Management", "scenario": "Super Admin assigns labs to lab assistants and lab supervisors, assigns inventory to inventory managers", "actors": "Super Admin", "preconditions": "Super Admin is assigned to the university", "steps": ["Super Admin assigns labs to lab assistants and lab supervisors", "Super Admin assigns inventory to inventory managers"]}, "testcases": [{"name": "Assign Lab", "description": "Verify that the super admin can assign labs to lab assistants and lab supervisors", "input": {"lab": "Lab1", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Lab assigned", "status": "Success"}}, {"name": "Assign Invalid Lab", "description": "Verify that the super admin cannot assign invalid labs to lab assistants and lab supervisors", "input": {"lab": "Invalid Lab", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Invalid lab", "status": "Rejected"}}, {"name": "Assign Inventory", "description": "Verify that the super admin can assign inventory to inventory managers", "input": {"inventory": "Inventory1", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Inventory assigned", "status": "Success"}}, {"name": "Assign Invalid Inventory", "description": "Verify that the super admin cannot assign invalid inventory to inventory managers", "input": {"inventory": "Invalid Inventory", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Invalid inventory", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Lab Assignment", "description": "Verify that a Super Admin can successfully assign labs to lab assistants and lab supervisors", "input": {"superAdminId": "admin_67890", "labAssistantId": "assistant_123", "labSupervisorId": "supervisor_456", "labId": "lab_001"}, "expected": {"outcome": "Lab assignment successful", "status": "Labs Assigned"}}, {"name": "Failed Lab Assignment Due to Missing Lab ID", "description": "Verify that a Super Admin cannot assign labs if the lab ID is missing", "input": {"superAdminId": "admin_67890", "labAssistantId": "assistant_123", "labSupervisorId": "supervisor_456", "labId": null}, "expected": {"outcome": "Lab assignment failed", "status": "Missing Lab ID"}}, {"name": "Successful Inventory Assignment", "description": "Verify that a Super Admin can successfully assign inventory to inventory managers", "input": {"superAdminId": "admin_67890", "inventoryManagerId": "manager_789", "inventoryId": "inventory_002"}, "expected": {"outcome": "Inventory assignment successful", "status": "Inventory Assigned"}}, {"name": "Failed Inventory Assignment Due to Invalid Manager ID", "description": "Verify that a Super Admin cannot assign inventory if the inventory manager ID is invalid", "input": {"superAdminId": "admin_67890", "inventoryManagerId": "invalid_manager", "inventoryId": "inventory_002"}, "expected": {"outcome": "Inventory assignment failed", "status": "Invalid Manager ID"}}], "bert_score": {"Precision": 0.9316925406455994, "Recall": 0.9429718852043152, "F1": 0.9372982978820801}}
{"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}], "GPT4o_testcases": [{"name": "Successful User Login", "description": "Verify that a user can successfully log in with valid credentials", "input": {"username": "user_12345", "password": "password123"}, "expected": {"outcome": "Login successful", "status": "Access Granted", "redirectPage": "User Dashboard"}}, {"name": "Successful Author Login", "description": "Verify that an author can successfully log in with valid credentials", "input": {"username": "author_12345", "password": "authorpass"}, "expected": {"outcome": "Login successful", "status": "Access Granted", "redirectPage": "Author Dashboard"}}, {"name": "Successful Admin Login", "description": "Verify that an admin can successfully log in with valid credentials", "input": {"username": "admin_12345", "password": "adminpass"}, "expected": {"outcome": "Login successful", "status": "Access Granted", "redirectPage": "Admin Dashboard"}}, {"name": "Failed Login with Incorrect Password", "description": "Verify that login fails with an incorrect password", "input": {"username": "user_12345", "password": "wrongpassword"}, "expected": {"outcome": "Login failed", "status": "Access Denied", "error": "Incorrect Password"}}, {"name": "Failed Login with Nonexistent Username", "description": "Verify that login fails with a nonexistent username", "input": {"username": "nonexistent_user", "password": "password123"}, "expected": {"outcome": "Login failed", "status": "Access Denied", "error": "User Not Found"}}, {"name": "Failed Login with Empty Credentials", "description": "Verify that login fails when username and password fields are empty", "input": {"username": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Access Denied", "error": "Empty Credentials"}}, {"name": "Edge Case: Login with Maximum Length Username", "description": "Verify that login works with a username at maximum allowed length", "input": {"username": "user_12345678901234567890", "password": "password123"}, "expected": {"outcome": "Login successful", "status": "Access Granted", "redirectPage": "User Dashboard"}}, {"name": "Edge Case: Login with Special Characters in Password", "description": "Verify that login works with a password containing special characters", "input": {"username": "user_12345", "password": "p@ssw0rd!#"}, "expected": {"outcome": "Login successful", "status": "Access Granted", "redirectPage": "User Dashboard"}}], "bert_score": {"Precision": 0.9538992643356323, "Recall": 0.9581885933876038, "F1": 0.9560391306877136}}
{"usecase": {"name": "Course Enrollment and Management", "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.", "actors": "User", "preconditions": "The user is registered and logged in to the website.", "steps": ["User navigates to the list of available courses.", "User browses and selects a course to enroll in.", "User enrolls in the selected course.", "User accesses the course page and views the lessons and quizzes.", "User attends the quizzes within the course.", "User completes the course and gives a rating to the course.", "User views their user profile to track course progress and ratings."]}, "testcases": [{"name": "View Available Courses", "description": "Verify that a user can view all available courses.", "input": {}, "expected": {"outcome": "Courses are displayed", "status": "Successful"}}, {"name": "Enroll in a Course", "description": "Verify that a user can enroll in a course.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "User successfully enrolled", "status": "Enrolled"}}, {"name": "View Lessons in a Course", "description": "Verify that a user can view lessons within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Lessons are accessible", "status": "Successful"}}, {"name": "Attend Quizzes in a Course", "description": "Verify that a user can attend quizzes within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Quizzes are accessible", "status": "Successful"}}, {"name": "Rate a Course", "description": "Verify that a user can rate a course after completing it.", "input": {"selectedCourse": "Algebra", "rating": 4}, "expected": {"outcome": "Course rated successfully", "status": "Rated"}}, {"name": "View User Profile", "description": "Verify that a user can view their profile to track progress and ratings.", "input": {}, "expected": {"outcome": "User profile is accessible", "status": "Successful"}}], "GPT4o_testcases": [{"name": "Successful Course Enrollment", "description": "Verify that a user can successfully enroll in a course", "input": {"userId": "user_12345", "courseId": "course_67890"}, "expected": {"outcome": "Course enrollment successful", "status": "Enrolled"}}, {"name": "Failed Course Enrollment Due to Unavailability", "description": "Verify that a user cannot enroll in a course that is not available", "input": {"userId": "user_12345", "courseId": "course_00000"}, "expected": {"outcome": "Course enrollment failed", "status": "Course Unavailable"}}, {"name": "View Lessons and Quizzes", "description": "Verify that a user can view lessons and quizzes after enrolling in a course", "input": {"userId": "user_12345", "courseId": "course_67890"}, "expected": {"outcome": "Lessons and quizzes accessible", "status": "Access Granted"}}, {"name": "Failed Access to Lessons and Quizzes Without Enrollment", "description": "Verify that a user cannot view lessons and quizzes without enrolling in the course", "input": {"userId": "user_12345", "courseId": "course_67890"}, "expected": {"outcome": "Access to lessons and quizzes denied", "status": "Not Enrolled"}}, {"name": "Successful Course Rating", "description": "Verify that a user can rate a course after completion", "input": {"userId": "user_12345", "courseId": "course_67890", "rating": 5}, "expected": {"outcome": "Course rating successful", "status": "Rated"}}, {"name": "Failed Course Rating Without Completion", "description": "Verify that a user cannot rate a course without completing it", "input": {"userId": "user_12345", "courseId": "course_67890", "rating": 5}, "expected": {"outcome": "Course rating failed", "status": "Not Completed"}}, {"name": "View User Profile for Course Progress", "description": "Verify that a user can view their profile to track course progress and ratings", "input": {"userId": "user_12345"}, "expected": {"outcome": "User profile accessible", "status": "Profile Viewed"}}], "bert_score": {"Precision": 0.9289228916168213, "Recall": 0.9398944973945618, "F1": 0.9343764781951904}}
{"usecase": {"name": "Author Course Management", "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.", "actors": "Author", "preconditions": "The author is registered and logged in to the platform as an author.", "steps": ["Author navigates to the analytics dashboard to view statistics of their existing courses.", "Author decides to create a new course.", "Author enters course details, including title, description, and objectives.", "Author adds lessons and content to the course.", "Author reviews and edits lessons within the course.", "Author submits the completed course to an admin or moderator for review."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an author can view analytics of their existing courses.", "input": {}, "expected": {"outcome": "Analytics displayed", "status": "Successful"}}, {"name": "Create a New Course", "description": "Verify that an author can create a new course.", "input": {"courseDetails": {"title": "Permutation and Combination", "description": "A comprehensive guide to permutations and combinations", "objectives": ["Understand permutations and combinations", "Solve related problems"]}}, "expected": {"outcome": "Course created successfully", "status": "Created"}}, {"name": "Edit Lessons in a Course", "description": "Verify that an author can edit lessons within a course.", "input": {"selectedCourse": "Permutation and Combination", "lessonEdits": {"Lesson 1": "Updated content on permutations", "Lesson 2": "Added examples on combinations"}}, "expected": {"outcome": "Lessons edited successfully", "status": "Edited"}}, {"name": "Submit Course for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course submitted for review", "status": "Submitted"}}], "GPT4o_testcases": [{"name": "Successful Course Creation", "description": "Verify that an author can successfully create a new course with all required details.", "input": {"authorId": "author_67890", "courseTitle": "Introduction to Programming", "courseDescription": "A beginner's guide to programming.", "courseObjectives": "Understand basic programming concepts.", "lessons": [{"title": "Lesson 1: Basics", "content": "Introduction to basic programming concepts."}, {"title": "Lesson 2: Variables", "content": "Understanding variables and data types."}]}, "expected": {"outcome": "Course creation successful", "status": "Course Created"}}, {"name": "Failed Course Creation Due to Missing Title", "description": "Verify that a course cannot be created without a title.", "input": {"authorId": "author_67890", "courseTitle": null, "courseDescription": "A beginner's guide to programming.", "courseObjectives": "Understand basic programming concepts.", "lessons": [{"title": "Lesson 1: Basics", "content": "Introduction to basic programming concepts."}]}, "expected": {"outcome": "Course creation failed", "status": "Missing Required Information"}}, {"name": "Successful Course Submission for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"authorId": "author_67890", "courseId": "course_12345", "submissionStatus": "Ready for Review"}, "expected": {"outcome": "Course submission successful", "status": "Submitted for Review"}}, {"name": "Failed Course Submission Due to Incomplete Lessons", "description": "Verify that a course cannot be submitted for review if lessons are incomplete.", "input": {"authorId": "author_67890", "courseId": "course_12345", "submissionStatus": "Incomplete Lessons"}, "expected": {"outcome": "Course submission failed", "status": "Incomplete Course"}}, {"name": "View Course Analytics", "description": "Verify that an author can view analytics of their courses.", "input": {"authorId": "author_67890", "action": "View Analytics"}, "expected": {"outcome": "Analytics displayed successfully", "status": "Analytics Viewed"}}], "bert_score": {"Precision": 0.9318702220916748, "Recall": 0.935388445854187, "F1": 0.9336260557174683}}
{"usecase": {"name": "Admin Course Management", "scenario": "An admin can view analytics of a course, send feedback on a submitted course, approve the submitted course, and view analytics about authors.", "actors": "Admin", "preconditions": "The admin is registered and logged in to the platform as an admin.", "steps": ["Admin navigates to the analytics dashboard to view statistics of a specific course.", "Admin reviews the submitted course and sends feedback to the author.", "Admin evaluates the submitted course and decides to approve or reject it.", "Admin views analytics about authors to track their performance."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an admin can view analytics of a specific course.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course analytics displayed", "status": "Successful"}}, {"name": "Send Feedback on Submitted Course", "description": "Verify that an admin can send feedback on a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "feedback": "Please provide more examples on combinations."}, "expected": {"outcome": "Feedback sent successfully", "status": "Sent"}}, {"name": "Approve Submitted Course", "description": "Verify that an admin can approve a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "approvalStatus": "Approved"}, "expected": {"outcome": "Course approved successfully", "status": "Approved"}}, {"name": "View Author Analytics", "description": "Verify that an admin can view analytics about authors.", "input": {}, "expected": {"outcome": "Author analytics displayed", "status": "Successful"}}], "GPT4o_testcases": [{"name": "Successful Course Analytics View", "description": "Verify that an admin can successfully view analytics of a specific course", "input": {"adminId": "admin_67890", "courseId": "course_12345"}, "expected": {"outcome": "Course analytics displayed successfully", "status": "Analytics Viewed"}}, {"name": "Failed Course Analytics View", "description": "Verify that an admin cannot view analytics if the course ID is invalid", "input": {"adminId": "admin_67890", "courseId": "invalid_course"}, "expected": {"outcome": "Course analytics view failed", "status": "Invalid Course ID"}}, {"name": "Successful Feedback Submission", "description": "Verify that an admin can successfully send feedback on a submitted course", "input": {"adminId": "admin_67890", "courseId": "course_12345", "feedback": "Great course, but needs more examples."}, "expected": {"outcome": "Feedback sent successfully", "status": "Feedback Submitted"}}, {"name": "Failed Feedback Submission", "description": "Verify that an admin cannot send feedback if the feedback text is empty", "input": {"adminId": "admin_67890", "courseId": "course_12345", "feedback": ""}, "expected": {"outcome": "Feedback submission failed", "status": "Empty Feedback"}}, {"name": "Successful Course Approval", "description": "Verify that an admin can successfully approve a submitted course", "input": {"adminId": "admin_67890", "courseId": "course_12345", "action": "approve"}, "expected": {"outcome": "Course approved successfully", "status": "Course Approved"}}, {"name": "Failed Course Approval", "description": "Verify that an admin cannot approve a course if the course ID is invalid", "input": {"adminId": "admin_67890", "courseId": "invalid_course", "action": "approve"}, "expected": {"outcome": "Course approval failed", "status": "Invalid Course ID"}}, {"name": "Successful Author Analytics View", "description": "Verify that an admin can successfully view analytics about authors", "input": {"adminId": "admin_67890"}, "expected": {"outcome": "Author analytics displayed successfully", "status": "Analytics Viewed"}}, {"name": "Failed Author Analytics View", "description": "Verify that an admin cannot view author analytics if the admin ID is invalid", "input": {"adminId": "invalid_admin"}, "expected": {"outcome": "Author analytics view failed", "status": "Invalid Admin ID"}}], "bert_score": {"Precision": 0.9402855634689331, "Recall": 0.9434235095977783, "F1": 0.9418519139289856}}
{"usecase": {"name": "Lesson Content with Interactive Elements", "scenario": "Lessons in the website can contain interactive graphs, callouts, questions, and links. The website should properly display them.", "actors": "User", "preconditions": "The user is logged in and accessing a lesson.", "steps": ["User navigates to a lesson containing interactive elements.", "User views the interactive graphs, callouts, questions, and links within the lesson.", "User interacts with the elements as required."]}, "testcases": [{"name": "Display Interactive Graphs", "description": "Verify that the website properly displays interactive graphs within a lesson.", "input": {}, "expected": {"outcome": "Interactive graphs displayed correctly", "status": "Successful"}}, {"name": "Show Callouts", "description": "Verify that the website properly shows callouts within a lesson.", "input": {}, "expected": {"outcome": "Callouts displayed properly", "status": "Successful"}}, {"name": "Present Questions", "description": "Verify that the website properly presents questions within a lesson.", "input": {}, "expected": {"outcome": "Questions displayed correctly", "status": "Successful"}}, {"name": "Handle Links", "description": "Verify that the website properly handles links within a lesson.", "input": {}, "expected": {"outcome": "Links are functional and clickable", "status": "Successful"}}, {"name": "Display Quizzes", "description": "Verify that quizzes within a lesson are properly displayed.", "input": {}, "expected": {"outcome": "Quizzes displayed correctly", "status": "Successful"}}, {"name": "Check Quiz Answers", "description": "Verify that the website checks quiz answers accurately.", "input": {"quizAnswers": {"Question 1": "Option A", "Question 2": "Option C", "Question 3": "Option D"}}, "expected": {"outcome": "Quiz answers checked properly", "status": "Successful"}}], "GPT4o_testcases": [{"name": "Successful Interactive Element Display", "description": "Verify that all interactive elements in a lesson are displayed correctly", "input": {"lessonId": "lesson_001", "userId": "user_12345"}, "expected": {"outcome": "All interactive elements displayed successfully", "status": "Elements Displayed"}}, {"name": "Failed Interactive Element Display", "description": "Verify that the lesson displays an error message if interactive elements fail to load", "input": {"lessonId": "lesson_002", "userId": "user_12345"}, "expected": {"outcome": "Interactive elements failed to load", "status": "Display Error"}}, {"name": "Successful Interaction with Graphs", "description": "Verify that a user can interact with graphs in the lesson", "input": {"lessonId": "lesson_003", "userId": "user_12345", "interactionType": "zoom"}, "expected": {"outcome": "Graph interaction successful", "status": "Interaction Completed"}}, {"name": "Failed Interaction with Graphs", "description": "Verify that a user receives an error when trying to interact with a non-functional graph", "input": {"lessonId": "lesson_004", "userId": "user_12345", "interactionType": "zoom"}, "expected": {"outcome": "Graph interaction failed", "status": "Interaction Error"}}, {"name": "Valid Callout Display", "description": "Verify that callouts are displayed correctly within the lesson", "input": {"lessonId": "lesson_005", "userId": "user_12345"}, "expected": {"outcome": "Callouts displayed successfully", "status": "Callouts Visible"}}, {"name": "Invalid Callout Display", "description": "Verify that an error message is shown if callouts fail to display", "input": {"lessonId": "lesson_006", "userId": "user_12345"}, "expected": {"outcome": "Callouts failed to display", "status": "Display Error"}}, {"name": "Successful Question Interaction", "description": "Verify that a user can interact with questions in the lesson", "input": {"lessonId": "lesson_007", "userId": "user_12345", "questionId": "question_001", "answer": "A"}, "expected": {"outcome": "Question interaction successful", "status": "Answer Submitted"}}, {"name": "Failed Question Interaction", "description": "Verify that a user receives an error when trying to submit an answer to a non-functional question", "input": {"lessonId": "lesson_008", "userId": "user_12345", "questionId": "question_002", "answer": "B"}, "expected": {"outcome": "Question interaction failed", "status": "Submission Error"}}, {"name": "Valid Link Navigation", "description": "Verify that a user can navigate through links within the lesson", "input": {"lessonId": "lesson_009", "userId": "user_12345", "linkId": "link_001"}, "expected": {"outcome": "Link navigation successful", "status": "Navigation Completed"}}, {"name": "Invalid Link Navigation", "description": "Verify that a user receives an error when trying to navigate a broken link", "input": {"lessonId": "lesson_010", "userId": "user_12345", "linkId": "link_002"}, "expected": {"outcome": "Link navigation failed", "status": "Navigation Error"}}], "bert_score": {"Precision": 0.9209102392196655, "Recall": 0.9416098594665527, "F1": 0.9311450123786926}}
{"usecase": {"name": "Add Product", "scenario": "Manager adds a product in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the product", "Manager submits the product"]}, "testcases": [{"name": "Valid add product", "description": "Verify that a manager can successfully add a product", "input": {"category": "Sweet", "name": "Lalmohon", "price": "350", "quantity": "50", "image": "img1.jpg"}, "expected": {"outcome": "Add product Successful", "status": "Approved"}}, {"name": "Empty field add product", "description": "Verify that the system handles the case where manager tries to add a product with an empty field", "input": {"category": "curd", "name": "shahi curd", "price": "", "quantity": "30", "image": "img2.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add a product with invalid data", "input": {"category": "curd", "name": "shahi curd", "price": "-10", "quantity": "40", "image": "img3.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Product Addition", "description": "Verify that a manager can successfully add a product with all valid details", "input": {"managerId": "manager_67890", "productName": "Laptop", "productCategory": "Electronics", "price": 1200.0, "quantity": 50, "description": "High-end gaming laptop"}, "expected": {"outcome": "Product addition successful", "status": "Product Added"}}, {"name": "Failed Product Addition Due to Missing Details", "description": "Verify that a manager cannot add a product if any of the required details are missing", "input": {"managerId": "manager_67890", "productName": "Laptop", "productCategory": null, "price": 1200.0, "quantity": 50, "description": "High-end gaming laptop"}, "expected": {"outcome": "Product addition failed", "status": "Missing Information"}}, {"name": "Failed Product Addition Due to Invalid Price", "description": "Verify that a manager cannot add a product if the price is invalid", "input": {"managerId": "manager_67890", "productName": "Laptop", "productCategory": "Electronics", "price": -100.0, "quantity": 50, "description": "High-end gaming laptop"}, "expected": {"outcome": "Product addition failed", "status": "Invalid Price"}}, {"name": "Failed Product Addition Due to Unauthorized Manager", "description": "Verify that an unauthorized manager cannot add a product", "input": {"managerId": "unauthorized_manager", "productName": "Laptop", "productCategory": "Electronics", "price": 1200.0, "quantity": 50, "description": "High-end gaming laptop"}, "expected": {"outcome": "Product addition failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9293929934501648, "Recall": 0.931891679763794, "F1": 0.9306405782699585}}
{"usecase": {"name": "Generate a sale", "scenario": "Showroom manager enters the details of a customer and the products and quantity s/he buys.", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid Sale generate", "description": "Verify that a showroom manager can successfully sale some products", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 6}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry successful", "status": "Approved"}}, {"name": "Empty field Sale generate", "description": "Verify that the system handles the case where showroom manager tries to generate a sale with an empty field", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}, {"name": "Inalid Sale generate", "description": "Verify that the system handles the case where showroom manager tries to genarate a sale with an invalid data", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Sale Generation", "description": "Verify that a showroom manager can successfully generate a sale with valid product and quantity details", "input": {"managerId": "manager_67890", "customerId": "customer_54321", "products": [{"productId": "product_001", "quantity": 2}, {"productId": "product_002", "quantity": 1}]}, "expected": {"outcome": "Sale generation successful", "status": "Sale Completed"}}, {"name": "Failed Sale Generation Due to Invalid Quantity", "description": "Verify that a showroom manager cannot generate a sale if any product quantity is invalid", "input": {"managerId": "manager_67890", "customerId": "customer_54321", "products": [{"productId": "product_001", "quantity": -1}, {"productId": "product_002", "quantity": 1}]}, "expected": {"outcome": "Sale generation failed", "status": "Invalid Quantity"}}, {"name": "Failed Sale Generation Due to Missing Product", "description": "Verify that a showroom manager cannot generate a sale if any product is missing", "input": {"managerId": "manager_67890", "customerId": "customer_54321", "products": []}, "expected": {"outcome": "Sale generation failed", "status": "No Products Added"}}, {"name": "Failed Sale Generation Due to Unapproved Manager", "description": "Verify that a showroom manager cannot generate a sale if the manager is not approved", "input": {"managerId": "manager_unapproved", "customerId": "customer_54321", "products": [{"productId": "product_001", "quantity": 2}]}, "expected": {"outcome": "Sale generation failed", "status": "Manager Not Approved"}}], "bert_score": {"Precision": 0.9276620149612427, "Recall": 0.9231460690498352, "F1": 0.9253984689712524}}
{"usecase": {"name": "Generate an order to factory", "scenario": "Showroom manager enters the products and quantity s/he wants to order to factory", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid order generate", "description": "Verify that a showroom manager can successfully order some products to factory", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Order successful", "status": "Approved"}}, {"name": "Inalid Order generate", "description": "Verify that the system handles the case where showroom manager tries to order a product with an invalid data", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 5}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": -2}]}, "expected": {"outcome": "Order failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Order Generation", "description": "Verify that a showroom manager can successfully generate an order with valid product and quantity", "input": {"managerId": "manager_67890", "products": [{"productId": "prod_001", "quantity": 10}, {"productId": "prod_002", "quantity": 5}]}, "expected": {"outcome": "Order generation successful", "status": "Order Placed"}}, {"name": "Failed Order Generation Due to Invalid Quantity", "description": "Verify that an order cannot be generated if any product has an invalid quantity", "input": {"managerId": "manager_67890", "products": [{"productId": "prod_001", "quantity": -5}, {"productId": "prod_002", "quantity": 5}]}, "expected": {"outcome": "Order generation failed", "status": "Invalid Quantity"}}, {"name": "Failed Order Generation Due to Missing Product", "description": "Verify that an order cannot be generated if no products are added to the cart", "input": {"managerId": "manager_67890", "products": []}, "expected": {"outcome": "Order generation failed", "status": "No Products Added"}}, {"name": "Failed Order Generation Due to Unapproved Manager", "description": "Verify that an unapproved showroom manager cannot generate an order", "input": {"managerId": "manager_unapproved", "products": [{"productId": "prod_001", "quantity": 10}]}, "expected": {"outcome": "Order generation failed", "status": "Manager Not Approved"}}], "bert_score": {"Precision": 0.9253203272819519, "Recall": 0.9229474067687988, "F1": 0.9241323471069336}}
{"usecase": {"name": "Generate a transfer to showroom", "scenario": "Factory manager enters the products and quantity s/he wants to transfer to showroom", "actors": "Factory manager", "preconditions": "Factory manager is approved", "steps": ["Factory manager adds the product to the cart", "Factory manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid transfer generate", "description": "Verify that a Factory manager can successfully transfer some products from factory to showroom", "input": {"showroom_id": "17", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer successful", "status": "Approved"}}, {"name": "Empty field transfer generate", "description": "Verify that the system handles the case where factory manager tries to generate a transfer with an empty field", "input": {"showroom_id": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}, {"name": "Inalid transfer generate", "description": "Verify that the system handles the case where factory manager tries to genarate a transfer with an invalid data", "input": {"showroom_id": "-4", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Transfer to Showroom", "description": "Verify that a factory manager can successfully transfer products to the showroom", "input": {"managerId": "manager_67890", "products": [{"productId": "prod_001", "quantity": 10}, {"productId": "prod_002", "quantity": 5}]}, "expected": {"outcome": "Transfer to showroom successful", "status": "Products Transferred"}}, {"name": "Failed Transfer Due to Unapproved Manager", "description": "Verify that a factory manager cannot transfer products if they are not approved", "input": {"managerId": "manager_67891", "products": [{"productId": "prod_001", "quantity": 10}, {"productId": "prod_002", "quantity": 5}]}, "expected": {"outcome": "Transfer to showroom failed", "status": "Manager Not Approved"}}, {"name": "Failed Transfer Due to Empty Product List", "description": "Verify that a factory manager cannot transfer products if no products are added to the cart", "input": {"managerId": "manager_67890", "products": []}, "expected": {"outcome": "Transfer to showroom failed", "status": "No Products in Cart"}}, {"name": "Failed Transfer Due to Invalid Quantity", "description": "Verify that a factory manager cannot transfer products if the quantity is invalid", "input": {"managerId": "manager_67890", "products": [{"productId": "prod_001", "quantity": -5}, {"productId": "prod_002", "quantity": 0}]}, "expected": {"outcome": "Transfer to showroom failed", "status": "Invalid Quantity"}}], "bert_score": {"Precision": 0.929397463798523, "Recall": 0.9270584583282471, "F1": 0.9282264709472656}}
{"usecase": {"name": "Add Employee", "scenario": "Manager adds an employee in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the employee", "Manager submits the information"]}, "testcases": [{"name": "Valid add employee", "description": "Verify that a manager can successfully add an employee", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "15000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee Successful", "status": "Approved"}}, {"name": "Empty field add employee", "description": "Verify that the system handles the case where manager tries to add an employee with an empty field", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add an employee with invalid data", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "-30000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}], "GPT4o_testcases": [{"name": "Successful Employee Addition", "description": "Verify that a manager can successfully add an employee with all valid details", "input": {"managerId": "manager_67890", "employeeName": "Alice Smith", "employeeId": "emp_001", "department": "HR", "position": "Recruiter", "email": "alice.smith@example.com", "phone": "01234567890"}, "expected": {"outcome": "Employee addition successful", "status": "Employee Added"}}, {"name": "Failed Employee Addition Due to Missing Information", "description": "Verify that a manager cannot add an employee if any required information is missing", "input": {"managerId": "manager_67890", "employeeName": "Alice Smith", "employeeId": null, "department": "HR", "position": "Recruiter", "email": "alice.smith@example.com", "phone": "01234567890"}, "expected": {"outcome": "Employee addition failed", "status": "Missing Information"}}, {"name": "Failed Employee Addition Due to Invalid Email", "description": "Verify that a manager cannot add an employee with an invalid email format", "input": {"managerId": "manager_67890", "employeeName": "Alice Smith", "employeeId": "emp_001", "department": "HR", "position": "Recruiter", "email": "alice.smith@com", "phone": "01234567890"}, "expected": {"outcome": "Employee addition failed", "status": "Invalid Email"}}, {"name": "Failed Employee Addition Due to Unauthorized Manager", "description": "Verify that an unauthorized manager cannot add an employee", "input": {"managerId": "unauthorized_manager", "employeeName": "Alice Smith", "employeeId": "emp_001", "department": "HR", "position": "Recruiter", "email": "alice.smith@example.com", "phone": "01234567890"}, "expected": {"outcome": "Employee addition failed", "status": "Unauthorized Access"}}], "bert_score": {"Precision": 0.9380407333374023, "Recall": 0.940506637096405, "F1": 0.9392720460891724}}
{"usecase": {"name": "Purchase Crop", "scenario": "A buyer wants to buy a specific kind of crop from a seller in the agriculture platform. The system facilitates the transaction between the buyer and the seller.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer and seller are registered users on the platform.", "The seller has listed the crop for sale."], "steps": [{"stepId": 1, "description": "Buyer selects the desired crop.", "input": "Buyer navigates to the marketplace and chooses a specific kind of crop they want to purchase."}, {"stepId": 2, "description": "View crop details.", "input": "System displays detailed information about the selected crop."}]}, "testcases": {"name": "Successful Crop Purchase", "description": "Verify that a buyer can successfully purchase a specific kind of crop from a seller.", "input": {"selectedCrop": "Organic Tomatoes", "seller": "mobarok", "buyer": "rahim", "transactionAmount": 50.0}, "expected": {"outcome": "Transaction successful", "status": "Completed"}}, "GPT4o_testcases": [{"name": "Successful Crop Purchase", "description": "Verify that a buyer can successfully purchase a crop from a seller", "input": {"buyerId": "buyer_67890", "cropId": "crop_12345", "quantity": 10, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Crop purchase successful", "status": "Transaction Completed"}}, {"name": "Failed Crop Purchase Due to Insufficient Funds", "description": "Verify that a buyer cannot purchase a crop if they have insufficient funds", "input": {"buyerId": "buyer_67890", "cropId": "crop_12345", "quantity": 10, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Crop purchase failed", "status": "Insufficient Funds"}}, {"name": "Failed Crop Purchase Due to Invalid Crop ID", "description": "Verify that a buyer cannot purchase a crop with an invalid crop ID", "input": {"buyerId": "buyer_67890", "cropId": "invalid_crop_00000", "quantity": 10, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Crop purchase failed", "status": "Invalid Crop ID"}}, {"name": "Failed Crop Purchase Due to Unavailable Quantity", "description": "Verify that a buyer cannot purchase a crop if the requested quantity is unavailable", "input": {"buyerId": "buyer_67890", "cropId": "crop_12345", "quantity": 1000, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Crop purchase failed", "status": "Quantity Unavailable"}}], "bert_score": {"Precision": 0.8930630683898926, "Recall": 0.9098105430603027, "F1": 0.9013590216636658}}
{"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}], "GPT4o_testcases": [{"name": "Successful Analytics Dashboard Access", "description": "Verify that a user can successfully access the business analytics dashboard", "input": {"userId": "user_67890", "businessAccountStatus": "active"}, "expected": {"outcome": "Dashboard access successful", "status": "Analytics Displayed"}}, {"name": "Failed Analytics Dashboard Access - Inactive Account", "description": "Verify that a user cannot access the analytics dashboard if the business account is inactive", "input": {"userId": "user_67890", "businessAccountStatus": "inactive"}, "expected": {"outcome": "Dashboard access failed", "status": "Inactive Account"}}, {"name": "Failed Analytics Dashboard Access - Not Logged In", "description": "Verify that a user cannot access the analytics dashboard if not logged in", "input": {"userId": null, "businessAccountStatus": "active"}, "expected": {"outcome": "Dashboard access failed", "status": "Not Logged In"}}, {"name": "View Overall Business Statistics", "description": "Verify that the system displays overall business statistics correctly", "input": {"userId": "user_67890", "businessAccountStatus": "active"}, "expected": {"outcome": "Statistics displayed successfully", "status": "Statistics Displayed"}}, {"name": "Explore Detailed Analytics - Valid Data", "description": "Verify that a user can explore detailed analytics with valid data", "input": {"userId": "user_67890", "businessAccountStatus": "active", "analyticsSection": "product performance"}, "expected": {"outcome": "Detailed analytics displayed successfully", "status": "Analytics Displayed"}}, {"name": "Explore Detailed Analytics - Invalid Section", "description": "Verify that a user cannot explore detailed analytics with an invalid section", "input": {"userId": "user_67890", "businessAccountStatus": "active", "analyticsSection": "invalid section"}, "expected": {"outcome": "Detailed analytics display failed", "status": "Invalid Section"}}], "bert_score": {"Precision": 0.9121447801589966, "Recall": 0.9204182028770447, "F1": 0.9162628650665283}}
{"usecase": {"name": "Search and Sort Products", "scenario": "A user wants to search for crops and have the ability to sort the search results by name, rate, and popularity.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The website has a variety of crops listed in the marketplace."], "steps": [{"stepId": 1, "description": "Enter search criteria.", "input": "User enters the desired search criteria (e.g., crop name or category) into the search bar."}, {"stepId": 2, "description": "Initiate search.", "input": "User clicks on the 'Search' button to initiate the search."}, {"stepId": 3, "description": "Sort search results.", "input": "User selects sorting options such as 'Sort by Name,' 'Sort by Rate,' or 'Sort by Popularity.'"}]}, "testcases": [{"name": "Search for a Specific Crop", "description": "Verify that the user can search for a specific crop by entering its name.", "input": {"searchCriteria": "Tomatoes"}, "expected": {"outcome": "Search results display the specified crop."}}, {"name": "Search for Crops by Category", "description": "Verify that the user can search for crops by selecting a specific category.", "input": {"searchCriteria": "Fruits"}, "expected": {"outcome": "Search results display crops within the selected category."}}, {"name": "Sort Search Results by Popularity", "description": "Verify that the user can sort the search results by crop popularity.", "input": {"sortingOption": "Popularity"}, "expected": {"outcome": "Search results are displayed in order of decreasing crop popularity."}}], "GPT4o_testcases": [{"name": "Successful Search and Sort by Name", "description": "Verify that a user can successfully search for crops and sort the results by name.", "input": {"userId": "user_67890", "searchCriteria": "Wheat", "sortOption": "Name"}, "expected": {"outcome": "Search and sort successful", "status": "Results sorted by Name"}}, {"name": "Successful Search and Sort by Rate", "description": "Verify that a user can successfully search for crops and sort the results by rate.", "input": {"userId": "user_67890", "searchCriteria": "Rice", "sortOption": "Rate"}, "expected": {"outcome": "Search and sort successful", "status": "Results sorted by Rate"}}, {"name": "Successful Search and Sort by Popularity", "description": "Verify that a user can successfully search for crops and sort the results by popularity.", "input": {"userId": "user_67890", "searchCriteria": "Corn", "sortOption": "Popularity"}, "expected": {"outcome": "Search and sort successful", "status": "Results sorted by Popularity"}}, {"name": "Failed Search with Empty Criteria", "description": "Verify that a search fails if the search criteria is empty.", "input": {"userId": "user_67890", "searchCriteria": "", "sortOption": "Name"}, "expected": {"outcome": "Search failed", "status": "No search criteria provided"}}, {"name": "Failed Sort with Invalid Option", "description": "Verify that sorting fails if an invalid sort option is selected.", "input": {"userId": "user_67890", "searchCriteria": "Barley", "sortOption": "InvalidOption"}, "expected": {"outcome": "Sort failed", "status": "Invalid sort option"}}, {"name": "Edge Case: Search with Special Characters", "description": "Verify that a search with special characters in the criteria returns appropriate results.", "input": {"userId": "user_67890", "searchCriteria": "@#$%", "sortOption": "Name"}, "expected": {"outcome": "Search completed", "status": "No results found"}}], "bert_score": {"Precision": 0.9217172861099243, "Recall": 0.9306984543800354, "F1": 0.9261860251426697}}
{"usecase": {"name": "Buyer-Seller Chat", "scenario": "A buyer wants to communicate with a seller using the chat option on the platform.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer is logged in to the website.", "The buyer has initiated communication with a specific seller."], "steps": [{"stepId": 1, "description": "Open Chat Interface.", "input": "Buyer clicks on the 'Chat' option within the seller's profile or product page."}, {"stepId": 2, "description": "Send Message.", "input": "Buyer enters a message and clicks 'Send' to communicate with the seller."}, {"stepId": 3, "description": "Receive Reply.", "input": "Seller receives the message and replies to the buyer's inquiry."}]}, "testcases": [{"name": "Send Message to Seller", "description": "Verify that the buyer can send a message to the seller.", "input": {"message": "Hi, I'm interested in purchasing your product. Can you provide more details?"}, "expected": {"outcome": "Message is sent successfully to the seller."}}, {"name": "Chat Notifications", "description": "Verify that both the buyer and seller receive notifications for new chat messages.", "input": {"newMessage": "Hello, I have a question about your product."}, "expected": {"outcome": "Both buyer and seller receive notifications for new chat messages."}}], "GPT4o_testcases": [{"name": "Successful Buyer-Seller Chat Initiation", "description": "Verify that a buyer can successfully initiate a chat with a seller", "input": {"buyerId": "buyer_12345", "sellerId": "seller_67890", "message": "Hello, I am interested in your product."}, "expected": {"outcome": "Chat initiated successfully", "status": "Message Sent"}}, {"name": "Failed Chat Initiation Due to Missing Message", "description": "Verify that a buyer cannot initiate a chat without entering a message", "input": {"buyerId": "buyer_12345", "sellerId": "seller_67890", "message": null}, "expected": {"outcome": "Chat initiation failed", "status": "Message Required"}}, {"name": "Successful Message Reception by Seller", "description": "Verify that a seller can successfully receive a message from a buyer", "input": {"buyerId": "buyer_12345", "sellerId": "seller_67890", "message": "Is the product still available?"}, "expected": {"outcome": "Message received successfully", "status": "Message Received"}}, {"name": "Failed Message Reception Due to Invalid Seller ID", "description": "Verify that a message cannot be received if the seller ID is invalid", "input": {"buyerId": "buyer_12345", "sellerId": "invalid_seller", "message": "Is the product still available?"}, "expected": {"outcome": "Message reception failed", "status": "Invalid Seller ID"}}, {"name": "Successful Reply from Seller", "description": "Verify that a seller can successfully reply to a buyer's message", "input": {"sellerId": "seller_67890", "buyerId": "buyer_12345", "replyMessage": "Yes, the product is available."}, "expected": {"outcome": "Reply sent successfully", "status": "Reply Sent"}}, {"name": "Failed Reply Due to Missing Reply Message", "description": "Verify that a seller cannot send a reply without entering a message", "input": {"sellerId": "seller_67890", "buyerId": "buyer_12345", "replyMessage": null}, "expected": {"outcome": "Reply failed", "status": "Reply Message Required"}}], "bert_score": {"Precision": 0.9129191637039185, "Recall": 0.9287481307983398, "F1": 0.9207656383514404}}
{"usecase": {"name": "Admin Monitoring and Profile Management", "scenario": "The admin wants to observe total transactions on the platform and has the authority to shut down any user profile or allow a new seller.", "actors": ["Admin"], "preconditions": ["The admin is logged in to the admin dashboard.", "There are existing user profiles and ongoing transactions on the platform."], "steps": [{"stepId": 1, "description": "Observe Total Transactions.", "input": "Admin views the total number and details of transactions on the platform."}, {"stepId": 2, "description": "Review User Profiles.", "input": "Admin has the option to review user profiles, including sellers and buyers."}, {"stepId": 3, "description": "Take Action on Profile.", "input": "Admin can take actions such as shutting down a profile or allowing a new seller based on their review."}]}, "testcases": [{"name": "Observe Total Transactions", "description": "Verify that the admin can observe the total number and details of transactions on the platform.", "input": {}, "expected": {"outcome": "Admin successfully views total transactions details."}}, {"name": "Allow New Seller", "description": "Verify that the admin can allow a new seller to register on the platform.", "input": {"newSellerRequest": "mobarokSeller"}, "expected": {"outcome": "Admin approves the new seller request, allowing them to register."}}, {"name": "Shutdown User Profile", "description": "Verify that the admin can shut down a user profile.", "input": {"profileToShutdown": "Seller123"}, "expected": {"outcome": "Admin successfully shuts down the specified user profile."}}], "GPT4o_testcases": [{"name": "Successful Transaction Observation", "description": "Verify that the admin can successfully observe total transactions on the platform", "input": {"adminId": "admin_001", "action": "viewTransactions"}, "expected": {"outcome": "Transactions observed successfully", "status": "Transactions Displayed"}}, {"name": "Failed Transaction Observation", "description": "Verify that the admin cannot observe transactions if not logged in", "input": {"adminId": null, "action": "viewTransactions"}, "expected": {"outcome": "Transaction observation failed", "status": "Access Denied"}}, {"name": "Successful User Profile Review", "description": "Verify that the admin can successfully review user profiles", "input": {"adminId": "admin_001", "action": "reviewProfiles"}, "expected": {"outcome": "User profiles reviewed successfully", "status": "Profiles Displayed"}}, {"name": "Failed User Profile Review", "description": "Verify that the admin cannot review user profiles if there are no profiles", "input": {"adminId": "admin_001", "action": "reviewProfiles"}, "expected": {"outcome": "User profile review failed", "status": "No Profiles Available"}}, {"name": "Successful Profile Shutdown", "description": "Verify that the admin can successfully shut down a user profile", "input": {"adminId": "admin_001", "action": "shutdownProfile", "userId": "user_12345"}, "expected": {"outcome": "Profile shutdown successful", "status": "Profile Deactivated"}}, {"name": "Failed Profile Shutdown", "description": "Verify that the admin cannot shut down a user profile if the userId is invalid", "input": {"adminId": "admin_001", "action": "shutdownProfile", "userId": "invalid_user"}, "expected": {"outcome": "Profile shutdown failed", "status": "Invalid User ID"}}, {"name": "Successful New Seller Approval", "description": "Verify that the admin can successfully approve a new seller", "input": {"adminId": "admin_001", "action": "approveSeller", "sellerId": "seller_67890"}, "expected": {"outcome": "New seller approval successful", "status": "Seller Approved"}}, {"name": "Failed New Seller Approval", "description": "Verify that the admin cannot approve a new seller if the sellerId is invalid", "input": {"adminId": "admin_001", "action": "approveSeller", "sellerId": "invalid_seller"}, "expected": {"outcome": "New seller approval failed", "status": "Invalid Seller ID"}}], "bert_score": {"Precision": 0.929802417755127, "Recall": 0.9290420413017273, "F1": 0.9294220805168152}}
{"usecase": {"name": "User Registration", "scenario": "A new user registers an account in the website.", "actors": "New User", "preconditions": "User does not already have an account in the website", "steps": ["New User navigates to the registration page of the website", "New User fills in the required registration details (e.g., username, email, password)", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account or rejects the registration if details are invalid or already in use"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account providing unique and valid details.", "input": {"username": "NewUser123", "email": "newuser123@example.com", "password": "SecurePassword123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Duplicate Email", "description": "Verify that the system prevents registration with an email address already in use.", "input": {"username": "NewUser456", "email": "existingemail@example.com", "password": "AnotherSecurePassword456"}, "expected": {"outcome": "Registration failed", "status": "Email already in use"}}, {"name": "Unsuccessful Registration - Duplicate Username", "description": "Verify that the system prevents registration with a username that is already in use.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "UniquePassword789"}, "expected": {"outcome": "Registration failed", "status": "Username already in use"}}, {"name": "Unsuccessful Registration - Weak Password", "description": "Verify that the system prevents registration with a password that does not fulfill the necessary requirements.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "abcdef"}, "expected": {"outcome": "Registration failed", "status": "Password must be at least 8 characters long and contain a mix of letters and numbers"}}], "GPT4o_testcases": [{"name": "Successful User Registration", "description": "Verify that a new user can successfully register an account with valid details", "input": {"username": "newuser123", "email": "newuser@example.com", "password": "SecurePass123"}, "expected": {"outcome": "User registration successful", "status": "Account Created"}}, {"name": "Failed User Registration - Missing Email", "description": "Verify that a user cannot register an account without providing an email", "input": {"username": "newuser123", "email": null, "password": "SecurePass123"}, "expected": {"outcome": "User registration failed", "status": "Missing Information"}}, {"name": "Failed User Registration - Invalid Email Format", "description": "Verify that a user cannot register an account with an invalid email format", "input": {"username": "newuser123", "email": "invalid-email", "password": "SecurePass123"}, "expected": {"outcome": "User registration failed", "status": "Invalid Email Format"}}, {"name": "Failed User Registration - Weak Password", "description": "Verify that a user cannot register an account with a weak password", "input": {"username": "newuser123", "email": "newuser@example.com", "password": "123"}, "expected": {"outcome": "User registration failed", "status": "Weak Password"}}, {"name": "Failed User Registration - Username Already Taken", "description": "Verify that a user cannot register an account with a username that is already in use", "input": {"username": "existinguser", "email": "newuser@example.com", "password": "SecurePass123"}, "expected": {"outcome": "User registration failed", "status": "Username Already Taken"}}], "bert_score": {"Precision": 0.969280481338501, "Recall": 0.9668670296669006, "F1": 0.968072235584259}}
{"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in the CineConnect website.", "actors": "Registered User", "preconditions": "User must have a registered account and know their login credentials", "steps": ["Registered User navigates to the login page of the forum", "Registered User enters their login credentials (e.g., username, password)", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "RegisteredUser", "password": "CorrectPassword"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "RegisteredUser", "password": "WrongPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "NonexistentUser", "password": "AnyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}], "GPT4o_testcases": [{"name": "Successful User Login", "description": "Verify that a registered user can successfully log into their account with valid credentials", "input": {"username": "user123", "password": "securePassword123"}, "expected": {"outcome": "Login successful", "status": "Access Granted"}}, {"name": "Failed User Login with Incorrect Password", "description": "Verify that a registered user cannot log into their account with an incorrect password", "input": {"username": "user123", "password": "wrongPassword"}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}, {"name": "Failed User Login with Nonexistent Username", "description": "Verify that a user cannot log into the system with a username that does not exist", "input": {"username": "nonexistentUser", "password": "anyPassword"}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}, {"name": "Failed User Login with Empty Credentials", "description": "Verify that a user cannot log into the system with empty username and password fields", "input": {"username": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}, {"name": "Failed User Login with SQL Injection", "description": "Verify that the system is protected against SQL injection attacks during login", "input": {"username": "user123", "password": "' OR '1'='1"}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}], "bert_score": {"Precision": 0.9724394679069519, "Recall": 0.9747064709663391, "F1": 0.9735715985298157}}
{"usecase": {"name": "Search Movies, MoviePersons, Users, Awards", "scenario": "Users can search for movies, movie-persons, other users, or movie awards like the Oscars within the platform.", "actors": "User", "preconditions": "User must be on the platform with access to the search functionality", "steps": ["User accesses the search feature on the CineConnect platform", "User enters a search query (it could be a movie title, username, or award name)", "The system processes the search query", "The system displays the search results relevant to the query"]}, "testcases": [{"name": "Successful Movie Search", "description": "Verify that the system can successfully return relevant movie results based on the search query.", "input": {"search_query": "Inception"}, "expected": {"outcome": "Search successful", "results_type": "Movies", "results_count": "1 or more", "results_content": "Relevant to 'Inception'"}}, {"name": "Successful User Search", "description": "Verify that the system can successfully return user profiles based on the search query.", "input": {"search_query": "JohnDoe"}, "expected": {"outcome": "Search successful", "results_type": "Users", "results_count": "1 or more", "results_content": "Relevant to 'JohnDoe'"}}, {"name": "Successful Awards Search", "description": "Verify that the system can successfully return information on movie awards based on the search query.", "input": {"search_query": "Oscars 2023"}, "expected": {"outcome": "Search successful", "results_type": "Awards", "results_count": "1 or more", "results_content": "Relevant to 'Oscars 2023'"}}, {"name": "Unsuccessful Search - No Results", "description": "Verify that the system can handle cases where no results are found for the search query.", "input": {"search_query": "NonexistentQuery"}, "expected": {"outcome": "Search unsuccessful", "results_type": "Movies", "results_count": "0", "results_content": "No results found for 'NonexistentQuery'"}}], "GPT4o_testcases": [{"name": "Successful Movie Search", "description": "Verify that a user can successfully search for a movie by title", "input": {"query": "Inception"}, "expected": {"outcome": "Search results displayed", "status": "Results Found"}}, {"name": "Successful User Search", "description": "Verify that a user can successfully search for another user by username", "input": {"query": "john_doe"}, "expected": {"outcome": "Search results displayed", "status": "Results Found"}}, {"name": "Successful Award Search", "description": "Verify that a user can successfully search for an award by name", "input": {"query": "Oscars"}, "expected": {"outcome": "Search results displayed", "status": "Results Found"}}, {"name": "Failed Search with Empty Query", "description": "Verify that the system handles an empty search query appropriately", "input": {"query": ""}, "expected": {"outcome": "Search failed", "status": "No Results"}}, {"name": "Failed Search with Invalid Characters", "description": "Verify that the system handles a search query with invalid characters", "input": {"query": "@#$%^&*"}, "expected": {"outcome": "Search failed", "status": "Invalid Query"}}, {"name": "Edge Case Search with Long Query", "description": "Verify that the system can handle a very long search query", "input": {"query": "A very long movie title that exceeds normal length expectations to test the system's handling of long input"}, "expected": {"outcome": "Search results displayed", "status": "Results Found"}}], "bert_score": {"Precision": 0.9475513100624084, "Recall": 0.9373118281364441, "F1": 0.9424037337303162}}
{"usecase": {"name": "Add Movies to Watchlist and Watched List", "scenario": "A user adds movies to their watchlist or marks them as watched on their profile.", "actors": "User", "preconditions": "User must be logged in and have a movie in mind to add to their watchlist or watched list", "steps": ["User searches for a movie using the platform's search feature", "User selects the movie from the search results", "User clicks on 'Add to Watchlist' or 'Mark as Watched'", "The system updates the user's profile with the movie added to the specified list"]}, "testcases": [{"name": "Successful Addition to Watchlist", "description": "Verify that a user can successfully add a movie to their watchlist.", "input": {"movie_title": "Inception", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition successful", "list_updated": "Watchlist", "movies_in_list": "1 or more", "confirmation_message": "Inception added to Watchlist"}}, {"name": "Successful Addition to Watched List", "description": "Verify that a user can successfully mark a movie as watched.", "input": {"movie_title": "The Matrix", "action": "Mark as Watched"}, "expected": {"outcome": "Addition successful", "list_updated": "Watched List", "movies_in_list": "1 or more", "confirmation_message": "The Matrix marked as Watched"}}, {"name": "Unsuccessful Addition - User Not Authenticated", "description": "Verify that the system prevents unauthenticated users from adding movies to their watchlist or watched list.", "input": {"movie_title": "Interstellar", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition failed", "reason": "User not authenticated", "error_message": "Please log in to add movies to your lists."}}], "GPT4o_testcases": [{"name": "Successful Movie Addition to Watchlist", "description": "Verify that a user can successfully add a movie to their watchlist", "input": {"userId": "user_67890", "movieTitle": "Inception", "action": "Add to Watchlist"}, "expected": {"outcome": "Movie successfully added to watchlist", "status": "Watchlist Updated"}}, {"name": "Successful Movie Marked as Watched", "description": "Verify that a user can successfully mark a movie as watched", "input": {"userId": "user_67890", "movieTitle": "Inception", "action": "Mark as Watched"}, "expected": {"outcome": "Movie successfully marked as watched", "status": "Watched List Updated"}}, {"name": "Failed Movie Addition with Empty Title", "description": "Verify that a user cannot add a movie to their watchlist if the movie title is empty", "input": {"userId": "user_67890", "movieTitle": "", "action": "Add to Watchlist"}, "expected": {"outcome": "Movie addition failed", "status": "Invalid Movie Title"}}, {"name": "Failed Movie Marking with Invalid Action", "description": "Verify that a user cannot mark a movie as watched with an invalid action", "input": {"userId": "user_67890", "movieTitle": "Inception", "action": "Invalid Action"}, "expected": {"outcome": "Movie marking failed", "status": "Invalid Action"}}, {"name": "Edge Case: Add Non-existent Movie", "description": "Verify that a user cannot add a non-existent movie to their watchlist", "input": {"userId": "user_67890", "movieTitle": "NonExistentMovie123", "action": "Add to Watchlist"}, "expected": {"outcome": "Movie addition failed", "status": "Movie Not Found"}}], "bert_score": {"Precision": 0.9541872143745422, "Recall": 0.952102541923523, "F1": 0.9531437158584595}}
{"usecase": {"name": "Rate a Movie", "scenario": "User submits a rating for a specific movie identified by ID.", "actors": "User", "preconditions": "User has a valid account and is authenticated and the movie identified by movieId exists in the system.", "steps": ["User selects a movie by movieId to rate.", "User submits a rating for the movie.", "System validates the user's authentication and permission to rate the movie.", "System updates the movie with the new rating.", "System confirms the rating update to the user."]}, "testcases": [{"name": "Successful Movie Rating", "description": "Validate that a user can successfully submit a rating for a movie.", "input": {"movieId": "Valid movie ID", "rating": 4}, "expected": {"message": "Movie successfully rated", "status": "Created"}}, {"name": "Invalid Movie ID", "description": "Verify the system's response when an invalid `movieId` is provided.", "input": {"movieId": "Invalid ID", "rating": 3}, "expected": {"message": "Invalid input provided", "status": "Bad Request"}}, {"name": "Unauthorized Rating Submission", "description": "Validate the system's response when the request is made without authentication.", "input": {"movieId": "Valid movie ID", "rating": 5}, "expected": {"message": "Authentication required", "status": "Unauthorized"}}, {"name": "Insufficient Permissions", "description": "Test the response when a user attempts to rate a movie but lacks the necessary permissions.", "input": {"movieId": "Valid movie ID", "rating": 2}, "expected": {"message": "Insufficient permissions", "status": "Unauthorized"}}], "GPT4o_testcases": [{"name": "Successful Movie Rating Submission", "description": "Verify that a user can successfully submit a rating for a movie", "input": {"userId": "user_12345", "movieId": "movie_67890", "rating": 4.5}, "expected": {"outcome": "Movie rating submission successful", "status": "Rating Updated"}}, {"name": "Failed Movie Rating Submission - Invalid Rating", "description": "Verify that a user cannot submit a rating outside the valid range", "input": {"userId": "user_12345", "movieId": "movie_67890", "rating": 6}, "expected": {"outcome": "Movie rating submission failed", "status": "Invalid Rating"}}, {"name": "Failed Movie Rating Submission - Unauthenticated User", "description": "Verify that an unauthenticated user cannot submit a rating", "input": {"userId": null, "movieId": "movie_67890", "rating": 4}, "expected": {"outcome": "Movie rating submission failed", "status": "User Not Authenticated"}}, {"name": "Failed Movie Rating Submission - Nonexistent Movie", "description": "Verify that a user cannot submit a rating for a nonexistent movie", "input": {"userId": "user_12345", "movieId": "movie_00000", "rating": 3}, "expected": {"outcome": "Movie rating submission failed", "status": "Movie Not Found"}}], "bert_score": {"Precision": 0.937727689743042, "Recall": 0.9445095658302307, "F1": 0.9411064386367798}}
{"usecase": {"name": "Create New Post in Movie Discussion Forum", "scenario": "A user creates a new post within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum", "steps": ["User navigates to the desired movie discussion forum", "User clicks on 'Create New Post'", "User enters the content, and adds images related to the post", "User submits the post for publication"]}, "testcases": [{"name": "Successful Post Creation", "description": "Verify that a user can successfully create and submit a new post when they provide a valid content, and optional images related to the post.", "input": {"content": "Exploring how sci-fi movies have evolved over the decades, highlighting key films and directors that have shaped the genre.", "created_at": "2024-02-03T10:00:00Z", "author": "JohnDoe", "images": ["sci-fi_movie_posters.jpg", "director_interviews.jpg"]}, "expected": {"outcome": "Post creation successful", "status": "Published"}}, {"name": "Unsuccessful Post Submission - Empty Content", "description": "Verify that the system prevents a post from being submitted if the content or the list of submitted images is empty.", "input": {"content": "", "created_at": "2024-02-03T11:00:00Z", "author": "JaneDoe", "images": []}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Post Submission - Not a Member", "description": "Verify that the system prevents a user from creating a post if they are not a forum member, regardless of the post's content quality.", "input": {"content": "A deep dive into some of the most underrated movies from the past decade and why they deserve more recognition.", "created_at": "2024-02-03T12:00:00Z", "author": "NonMemberUser", "images": ["underrated_movies.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Post Submission - Inappropriate Content", "description": "Verify that the system prevents a post from being submitted if the content is flagged as inappropriate, even if it's related to movies.", "input": {"title": "Controversial Movie Opinions", "content": "Content that violates forum rules or is deemed inappropriate for the community.", "created_at": "2024-02-03T13:00:00Z", "author": "RebelUser", "images": ["controversial_scenes.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to inappropriate content"}}], "GPT4o_testcases": [{"name": "Successful Post Creation", "description": "Verify that a user can successfully create a new post in the movie discussion forum", "input": {"userId": "user_67890", "forumId": "forum_123", "postContent": "This is a discussion about the latest movie release.", "images": ["image1.jpg", "image2.jpg"]}, "expected": {"outcome": "Post creation successful", "status": "Post Published"}}, {"name": "Failed Post Creation Due to Empty Content", "description": "Verify that a user cannot create a new post if the content is empty", "input": {"userId": "user_67890", "forumId": "forum_123", "postContent": "", "images": ["image1.jpg", "image2.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Content Required"}}, {"name": "Failed Post Creation Due to Unregistered User", "description": "Verify that an unregistered user cannot create a new post in the forum", "input": {"userId": null, "forumId": "forum_123", "postContent": "This is a discussion about the latest movie release.", "images": ["image1.jpg", "image2.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "User Not Registered"}}, {"name": "Successful Post Creation Without Images", "description": "Verify that a user can create a new post without adding images", "input": {"userId": "user_67890", "forumId": "forum_123", "postContent": "This is a discussion about the latest movie release.", "images": []}, "expected": {"outcome": "Post creation successful", "status": "Post Published"}}], "bert_score": {"Precision": 0.9399316310882568, "Recall": 0.9222941994667053, "F1": 0.9310293793678284}}
{"usecase": {"name": "Create New Comment or Reply in Movie Discussion Forum", "scenario": "A user comments on an existing post or replies to another comment within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum and the post or comment must exist", "steps": ["User navigates to an existing post within the movie discussion forum", "User clicks on 'Comment' or 'Reply' to engage with the post or an existing comment", "User enters the content of their comment or reply", "User submits the comment or reply for publication"]}, "testcases": [{"name": "Successful Comment Creation", "description": "Verify that a user can successfully create and submit a new comment on a post when they provide valid content.", "input": {"content": "I completely agree with your points on the evolution of sci-fi movies, especially the part about 2000s innovations.", "created_at": "2024-02-04T10:00:00Z", "author": "JaneDoe", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation successful", "status": "Published"}}, {"name": "Unsuccessful Comment Submission - Empty Content", "description": "Verify that the system prevents a comment from being submitted if the content is empty.", "input": {"content": "", "created_at": "2024-02-04T12:00:00Z", "author": "EmptyContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Comment Submission - Not a Member", "description": "Verify that the system prevents a user from creating a comment if they are not a forum member.", "input": {"content": "Absolutely love this movie, and the points you've made!", "created_at": "2024-02-04T13:00:00Z", "author": "NonMemberUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Comment Submission - Inappropriate Content", "description": "Verify that the system prevents a comment from being submitted if the content is flagged as inappropriate.", "input": {"content": "Inappropriate content that violates forum rules.", "created_at": "2024-02-04T14:00:00Z", "author": "InappropriateContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to inappropriate content"}}], "GPT4o_testcases": [{"name": "Successful Comment Creation", "description": "Verify that a user can successfully create a new comment on an existing post", "input": {"userId": "user_67890", "postId": "post_12345", "commentContent": "This movie was fantastic! The plot twists were unexpected."}, "expected": {"outcome": "Comment creation successful", "status": "Comment Published"}}, {"name": "Successful Reply Creation", "description": "Verify that a user can successfully reply to an existing comment", "input": {"userId": "user_67890", "commentId": "comment_54321", "replyContent": "I agree with your point about the cinematography!"}, "expected": {"outcome": "Reply creation successful", "status": "Reply Published"}}, {"name": "Failed Comment Creation Due to Empty Content", "description": "Verify that a user cannot create a comment with empty content", "input": {"userId": "user_67890", "postId": "post_12345", "commentContent": ""}, "expected": {"outcome": "Comment creation failed", "status": "Content Required"}}, {"name": "Failed Reply Creation Due to Non-existent Comment", "description": "Verify that a user cannot reply to a non-existent comment", "input": {"userId": "user_67890", "commentId": "comment_99999", "replyContent": "This is a reply to a non-existent comment."}, "expected": {"outcome": "Reply creation failed", "status": "Comment Not Found"}}, {"name": "Failed Comment Creation Due to Unregistered User", "description": "Verify that an unregistered user cannot create a comment", "input": {"userId": null, "postId": "post_12345", "commentContent": "This is a comment from an unregistered user."}, "expected": {"outcome": "Comment creation failed", "status": "User Not Registered"}}], "bert_score": {"Precision": 0.9362983703613281, "Recall": 0.9227383136749268, "F1": 0.9294688701629639}}
{"usecase": {"name": "Vote on a Post/Comment/Reply in Movie Discussion Forum", "scenario": "A user votes on an existing post, comment, or reply within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum, and the post, comment, or reply must exist", "steps": ["User navigates to an existing post, comment, or reply within the movie discussion forum", "User decides to upvote, downvote, or undo a previous vote", "User clicks on 'Upvote', 'Downvote', or 'Undo Vote' button", "The system updates the vote count accordingly"]}, "testcases": [{"name": "Successful Upvote", "description": "Verify that a user can successfully upvote a post, comment, or reply.", "input": {"action": "Upvote", "created_at": "2024-02-05T10:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Upvote successful", "new_upvote_count": "Increased by 1"}}, {"name": "Successful Downvote", "description": "Verify that a user can successfully downvote a post, comment, or reply.", "input": {"action": "Downvote", "created_at": "2024-02-05T11:00:00Z", "author": "User456", "post_id": "67890"}, "expected": {"outcome": "Downvote successful", "new_downvote_count": "Increased by 1"}}, {"name": "Successful Vote Undo", "description": "Verify that a user can successfully undo a previous vote on a post, comment, or reply.", "input": {"action": "Undo Vote", "created_at": "2024-02-05T12:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Vote undo successful", "new_vote_count": "Decreased by 1"}}, {"name": "Unsuccessful Vote - Not a Member", "description": "Verify that the system prevents a user from voting if they are not a forum member.", "input": {"action": "Upvote", "created_at": "2024-02-05T13:00:00Z", "author": "NonMemberUser", "post_id": "11111"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Vote - Voting Both Ways", "description": "Verify that the system prevents a user from both upvoting and downvoting the same post.", "input": {"action": "Upvote then Downvote", "created_at": "2024-02-05T14:00:00Z", "author": "User789", "post_id": "12345"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to attempting both upvote and downvote"}}], "GPT4o_testcases": [{"name": "Successful Upvote on Post", "description": "Verify that a user can successfully upvote a post", "input": {"userId": "user_67890", "postId": "post_12345", "action": "upvote"}, "expected": {"outcome": "Vote successful", "status": "Upvoted"}}, {"name": "Successful Downvote on Comment", "description": "Verify that a user can successfully downvote a comment", "input": {"userId": "user_67890", "commentId": "comment_54321", "action": "downvote"}, "expected": {"outcome": "Vote successful", "status": "Downvoted"}}, {"name": "Undo Vote on Reply", "description": "Verify that a user can successfully undo a vote on a reply", "input": {"userId": "user_67890", "replyId": "reply_98765", "action": "undo"}, "expected": {"outcome": "Vote undone", "status": "Vote Removed"}}, {"name": "Failed Vote on Nonexistent Post", "description": "Verify that a user cannot vote on a nonexistent post", "input": {"userId": "user_67890", "postId": "post_00000", "action": "upvote"}, "expected": {"outcome": "Vote failed", "status": "Post Not Found"}}, {"name": "Failed Vote with Invalid Action", "description": "Verify that a user cannot perform an invalid voting action", "input": {"userId": "user_67890", "postId": "post_12345", "action": "invalid_action"}, "expected": {"outcome": "Vote failed", "status": "Invalid Action"}}], "bert_score": {"Precision": 0.9443374872207642, "Recall": 0.9304653406143188, "F1": 0.9373500943183899}}
{"usecase": {"name": "Report a Post", "scenario": "A user reports a post in the discussion forum for violating community guidelines or other specific reasons.", "actors": "User, Moderator", "preconditions": "User must be logged in and have identified a post they believe violates the forum's rules or is otherwise inappropriate.", "steps": ["User navigates to the post they wish to report", "User clicks on the 'Report' button associated with the post", "User selects a reason for reporting the post from a predefined list or specifies a custom reason in the provided text area", "User submits the report", "The system acknowledges the report and forwards it to moderators for review"]}, "testcases": [{"name": "Successful Post Report - Predefined Reason", "description": "Verify that a user can successfully report a post for a predefined reason.", "input": {"post_id": "12345", "reason": "Harassment", "description": "The post contains harassing content towards an individual or group."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Successful Post Report - Custom Reason", "description": "Verify that a user can successfully report a post for a custom reason.", "input": {"post_id": "67890", "reason": "Other", "description": "The post promotes false information."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Unsuccessful Post Report - Not Authenticated", "description": "Verify that the system prevents a user from reporting a post if they are not logged in.", "input": {"post_id": "11223", "reason": "Spam", "description": "This post is unsolicited advertising and not relevant to the forum."}, "expected": {"outcome": "Report submission failed", "reason": "User not authenticated", "error_message": "Please log in to report a post."}}, {"name": "Unsuccessful Post Report - Post Not Found", "description": "Verify that the system handles cases where the post to be reported does not exist or has already been removed.", "input": {"post_id": "404NotFound", "reason": "Inappropriate Content", "description": "The content of this post is inappropriate for the forum."}, "expected": {"outcome": "Report submission failed", "reason": "Post not found", "error_message": "The post you are trying to report could not be found. It may have already been removed."}}], "GPT4o_testcases": [{"name": "Successful Post Report", "description": "Verify that a user can successfully report a post with a valid reason", "input": {"userId": "user_67890", "postId": "post_12345", "reportReason": "Spam"}, "expected": {"outcome": "Post report successful", "status": "Report Submitted"}}, {"name": "Failed Post Report Due to Missing Reason", "description": "Verify that a user cannot report a post without selecting a reason", "input": {"userId": "user_67890", "postId": "post_12345", "reportReason": null}, "expected": {"outcome": "Post report failed", "status": "Reason Required"}}, {"name": "Failed Post Report Due to Invalid Post ID", "description": "Verify that a user cannot report a post with an invalid post ID", "input": {"userId": "user_67890", "postId": "invalid_post", "reportReason": "Inappropriate Content"}, "expected": {"outcome": "Post report failed", "status": "Invalid Post ID"}}, {"name": "Successful Custom Reason Post Report", "description": "Verify that a user can successfully report a post with a custom reason", "input": {"userId": "user_67890", "postId": "post_12345", "reportReason": "This post contains misleading information"}, "expected": {"outcome": "Post report successful", "status": "Report Submitted"}}], "bert_score": {"Precision": 0.9404652714729309, "Recall": 0.9293707609176636, "F1": 0.9348850250244141}}
