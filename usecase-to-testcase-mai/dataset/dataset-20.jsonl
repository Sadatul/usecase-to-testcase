{"usecase": {"author": "Pramananda Sarkar", "id": "2005002", "name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}]}
{"usecase": {"author": "Turjoy Dey", "id": "2005016", "name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}]}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}]}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}]}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}]}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}]}
{"usecase": {"author": "Gourab Biswas", "id": "2005034", "name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}]}
{"usecase": {"author": "Fahim Hasan", "id": "2005043", "name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}]}
{"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}]}
{"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}]}
{"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}]}
{"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}]}
{"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}]}
{"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}]}
{"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}]}
{"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}]}
{"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}]}
{"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}]}
{"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}]}
{"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}]}
{"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}]}
{"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}]}
{"usecase": {"author": "2005004", "name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}]}
{"usecase": {"author": "2005026", "name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}]}
{"usecase": {"author": "2005008", "name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}]}
{"usecase": {"author": "2005003", "name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}]}
{"usecase": {"author": "2005007", "name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}]}
{"usecase": {"author": "2005003", "name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}]}
{"usecase": {"author": "2005018", "name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}]}
{"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}]}
{"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}]}
{"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}]}
{"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}]}
{"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}]}
{"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}]}
{"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}]}
{"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}]}
{"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}]}
{"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}]}
{"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}]}
{"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}]}
{"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}]}
{"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}]}
{"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}]}
{"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}]}
{"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}]}
{"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}]}
{"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}]}
{"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}]}
{"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}]}
{"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}]}
{"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}]}
{"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}]}
{"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}]}
{"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}]}
{"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}]}
{"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}]}
{"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}]}
{"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}]}
{"usecase": {"name": "Managing Database Pages", "scenario": "User manages individual pages within a database, adding, opening, and editing them.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to add and edit database pages."], "steps": ["User navigates to the database and clicks on 'New' to add a new page.", "User enters the details for the new page and saves it.", "User opens an existing page to edit its content.", "User modifies properties or adds new content to the page."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New Database Page", "description": "Verify that the user can create a new page within the database.", "input": {"pageName": "New Task", "properties": {"Status": "To-Do", "Due Date": "2024-10-20"}}, "expected": {"outcome": "New page created successfully in the database.", "status": "Page Created"}}, {"name": "Editing Existing Page Content", "description": "Verify that the user can edit an existing page's content in the database.", "input": {"pageName": "Task 1", "newContent": "Updated task details."}, "expected": {"outcome": "Page content updated successfully.", "status": "Updated"}}, {"name": "Deleting a Database Page", "description": "Verify that the user can delete a page from the database.", "input": {"pageName": "Old Task"}, "expected": {"outcome": "Page deleted successfully from the database.", "status": "Deleted"}}]}
{"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}]}
{"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}]}
{"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}]}
{"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}]}
{"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}]}
{"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}]}
{"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}]}
{"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}]}
{"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}]}
{"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}]}
{"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}]}
{"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}]}
{"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}]}
{"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}]}
{"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}]}
{"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}]}
{"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}]}
{"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}]}
{"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}]}
{"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}]}
{"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}]}
{"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}]}
{"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}]}
{"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}]}
{"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}]}
{"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}]}
{"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}]}
{"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}]}
{"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}]}
{"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}]}
{"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}]}
{"usecase": {"name": "Search for Restaurants", "scenario": "Customer searches for restaurants using keywords such as cuisine type, restaurant name, or dish name.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer clicks on the search bar", "Customer enters a keyword or phrase", "System displays search results based on the keyword or phrase", "Customer selects a restaurant from the search results"]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that the system shows the correct restaurant options when a valid restaurant name is entered.", "input": {"searchQuery": "Burger King"}, "expected": {"outcome": "Search results display Burger King and related options", "status": "Success"}}, {"name": "Search with Popular Dish Name", "description": "Verify that the system shows relevant restaurants when a popular dish name is entered.", "input": {"searchQuery": "Pizza"}, "expected": {"outcome": "Search results display restaurants offering pizza", "status": "Success"}}, {"name": "Search with Invalid Query", "description": "Verify that the system handles invalid or unknown queries appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "Show no search result and display we're not in your area yet. NO resturants matches the slected criteria", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify that the system handles empty search queries gracefully.", "input": {"searchQuery": ""}, "expected": {"outcome": "No search results", "status": "Error"}}], "id": "2005005"}
{"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "id": "2005019"}
{"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "id": "2005021"}
{"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "id": "2005024"}
{"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "id": "2005027"}
{"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "id": "2005030"}
{"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "id": "2005005"}
{"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005021"}
{"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005024"}
{"usecase": {"name": "Send a Parcel Using Pandago", "scenario": "Customer sends a parcel using the Pandago service, specifying the sender and recipient addresses and collection time.", "actors": "Customer, Rider", "preconditions": "Customer is logged in and has access to the Pandago service.", "steps": ["Customer opens the Pandago service", "Customer enters the sender and recipient addresses", "Customer selects the collection time (ASAP or schedule for later)", "Customer confirms the parcel details and adds delivery specifications", "Rider picks up the parcel and delivers it to the recipient"]}, "testcases": [{"name": "Valid Parcel Sending", "description": "Verify that a customer can successfully send a parcel with valid sender and recipient addresses.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "ASAP"}, "expected": {"outcome": "Parcel pickup is confirmed, and the rider is dispatched to the sender's location", "status": "Success"}}, {"name": "Invalid Sender Address", "description": "Verify that the system handles an invalid sender address appropriately.", "input": {"senderAddress": "Invalid Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "ASAP"}, "expected": {"outcome": "System displays an error prompting the customer to provide a valid sender address", "status": "Error"}}, {"name": "Invalid Recipient Address", "description": "Verify that the system handles an invalid recipient address appropriately.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Invalid Address", "collectionTime": "ASAP"}, "expected": {"outcome": "System displays an error prompting the customer to provide a valid recipient address", "status": "Error"}}, {"name": "Scheduled Parcel Pickup", "description": "Verify that the system allows customers to schedule parcel pickup for a later time.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "Scheduled (Next Day)"}, "expected": {"outcome": "System schedules the parcel pickup for the specified time", "status": "Success"}}], "id": "2005027"}
{"usecase": {"name": "Receive a Parcel Using Pandago", "scenario": "Customer receives a parcel sent by another user using the Pandago service.", "actors": "Customer, Rider", "preconditions": "Recipient has a valid delivery address and is awaiting the parcel.", "steps": ["Customer receives notification of a parcel being sent", "Customer tracks the parcel in real-time via the app", "Rider delivers the parcel to the recipient's address", "Customer confirms the receipt of the parcel"]}, "testcases": [{"name": "Valid Parcel Delivery", "description": "Verify that the recipient successfully receives a parcel with a valid delivery address.", "input": {"recipientAddress": "Hare Road,Dhaka, Bangladesh Hare Road Dhaka"}, "expected": {"outcome": "Rider delivers the parcel, and customer confirms receipt", "status": "Success"}}, {"name": "Invalid Delivery Address", "description": "Verify how the system handles an invalid or incomplete delivery address for the recipient.", "input": {"recipientAddress": "Amar Basha"}, "expected": {"outcome": "System displays an error and prevents the delivery", "status": "Error"}}, {"name": "Tracking Parcel in Real-Time", "description": "Verify that the customer can track the parcel in real-time while it's being delivered.", "input": {"trackingStatus": "In Transit"}, "expected": {"outcome": "System shows real-time tracking of the rider's location", "status": "Success"}}, {"name": "Failed Delivery Attempt", "description": "Verify that the system handles cases where the rider cannot deliver the parcel due to an unavailable recipient.", "input": {"recipientAddress": "Valid Recipient Address", "recipientAvailable": false}, "expected": {"outcome": "System notifies the customer of the failed delivery attempt and reschedules or cancels the delivery", "status": "Error"}}], "id": "2005030"}
{"usecase": {"name": "Cancel a Pandago Delivery", "scenario": "Customer cancels the parcel delivery before it is picked up by the rider.", "actors": "Customer, Rider", "preconditions": "Parcel has not been picked up yet.", "steps": ["Customer initiates a cancellation request", "System processes the cancellation if the rider has not yet picked up the parcel", "Customer receives a cancellation confirmation"]}, "testcases": [{"name": "Successful Cancellation Before Pickup", "description": "Verify that the customer can successfully cancel the delivery before the rider picks up the parcel.", "input": {"pickupStatus": "Order confirmed but No rider assigned"}, "expected": {"outcome": "Delivery is cancelled successfully, and the customer receives confirmation", "status": "Success"}}, {"name": "Failed Cancellation After Pickup", "description": "Verify that the system prevents the customer from cancelling the delivery after the rider has picked up the parcel.", "input": {"pickupStatus": "Rider Assigned"}, "expected": {"outcome": "System displays an error that the parcel cannot be cancelled after pickup", "status": "Error"}}], "id": "2005005"}
{"usecase": {"name": "Search for Products in Shops", "scenario": "Customer searches for products available in various shops using a keyword or product category.", "actors": "Customer", "preconditions": "Customer has launched app and is on the shop search page.", "steps": ["Customer enters a search keyword or selects a product category", "System displays relevant products based on the search query or selected category", "Customer selects a product from the search results"]}, "testcases": [{"name": "Valid Product Search", "description": "Verify that the system displays relevant products when a valid search query is entered.", "input": {"searchQuery": "Hand Wash"}, "expected": {"outcome": "Relevant hand wash products are displayed from different shops", "status": "Success"}}, {"name": "Invalid Product Search", "description": "Verify that the system handles invalid or unknown product searches appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "System displays no results for the invalid query", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify how the system handles empty search queries.", "input": {"searchQuery": ""}, "expected": {"outcome": "System prompts the customer to enter a search query", "status": "Error"}}, {"name": "Search by Product Category", "description": "Verify that the system displays relevant products when the customer selects a product category.", "input": {"category": "Fruits"}, "expected": {"outcome": "Relevant products are displayed from various shops", "status": "Success"}}], "id": "2005019"}
{"usecase": {"name": "Search for Shops by Name", "scenario": "Customer searches for a specific shop by entering its name in the search bar.", "actors": "Customer", "preconditions": "Customer has launched app and is on the shop search page.", "steps": ["Customer enters a shop name in the search bar", "System displays matching shops based on the entered name", "Customer selects a shop from the search results"]}, "testcases": [{"name": "Valid Shop Name Search", "description": "Verify that the system displays the correct shop when a valid shop name is entered.", "input": {"searchQuery": "Bengal Meat"}, "expected": {"outcome": "Searched shop is displayed in the search results", "status": "Success"}}, {"name": "Invalid Shop Name Search", "description": "Verify that the system handles invalid shop name queries appropriately.", "input": {"searchQuery": "UnknownShop"}, "expected": {"outcome": "System displays no matching shops", "status": "No Results"}}, {"name": "Search by Partial Shop Name", "description": "Verify that the system displays matching shops when a partial shop name is entered.", "input": {"searchQuery": "Pan"}, "expected": {"outcome": "Shops with names matching the partial query, such as 'Pandamart,' are displayed", "status": "Success"}}], "id": "2005021"}
{"usecase": {"name": "Filter Product Search Results by Availability", "scenario": "Customer filters product search results to display only products available for delivery or pickup.", "actors": "Customer", "preconditions": "Customer has launched app and has performed a product search.", "steps": ["Customer applies a filter to show only products available for delivery or pickup", "System filters the search results based on availability", "Customer selects a product from the filtered results"]}, "testcases": [{"name": "Filter by Fast Delivery", "description": "Verify that the system displays only shops from where we can get products fast when the fast delivery filter is applied.", "input": {"filter": "Fast Delivery"}, "expected": {"outcome": "Only shops from where fast delivery is possible are displayed", "status": "Success"}}, {"name": "No Products Available for Selected Filter", "description": "Verify that the system handles cases where no products are available for the selected filter.", "input": {"filter": "Pickup", "availability": "No Pickup"}, "expected": {"outcome": "System displays no results and informs the customer that no shops are available for pickup", "status": "No Results"}}], "id": "2005024"}
{"usecase": {"name": "View Recent and Popular Product Searches", "scenario": "Customer views and selects from a list of their recent product searches and popular product searches.", "actors": "Customer", "preconditions": "Customer has launched app and performed some product searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "System displays a list of popular searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Product Search", "description": "Verify that a customer can view results for a previous valid product search.", "input": {"recentSearchQuery": "Chocolate"}, "expected": {"outcome": "Search results for given recent product are displayed", "status": "Success"}}, {"name": "No Recent Searches", "description": "Verify how the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts the customer to enter a new search query", "status": "Error"}}], "id": "2005027"}
{"usecase": {"name": "Select and View Product Details", "scenario": "Customer views the details of a product, including description, price, and availability.", "actors": "Customer", "preconditions": "Customer has performed a search, and relevant product results are displayed.", "steps": ["Customer views the search results", "Customer selects a product from the search results or shop menu", "System displays the product details (description, price, availability, etc.)"]}, "testcases": [{"name": "Valid Product Details View", "description": "Verify that the system displays the correct product details when a valid product is selected.", "input": {"productName": "Cappuccino"}, "expected": {"outcome": "Product details (description, price, availability) are displayed", "status": "Success"}}, {"name": "Out of Stock Product", "description": "Verify how the system handles cases where the selected product is out of stock.", "input": {"productName": "Cappuccino", "stockStatus": "Out of Stock"}, "expected": {"outcome": "System displays an 'Out of Stock' message", "status": "Error"}}, {"name": "Invalid Product Details View", "description": "Verify that the system handles invalid product selections (e.g., non-existent product) appropriately.", "input": {"productName": "InvalidProduct"}, "expected": {"outcome": "System displays an error or no product details", "status": "Error"}}], "id": "2005030"}
{"usecase": {"name": "Add Product to Cart", "scenario": "Customer adds a selected product to their cart.", "actors": "Customer", "preconditions": "Customer has selected a product from search results to view its details.", "steps": ["Customer selects a product from the shop or search results", "System displays the product details", "Customer adds the product to the cart"]}, "testcases": [{"name": "Valid Product Added to Cart", "description": "Verify that the system successfully adds a valid product to the cart.", "input": {"productName": "Cappuccino", "quantity": 1}, "expected": {"outcome": "Product is successfully added to the cart", "status": "Success"}}, {"name": "Product Out of Stock", "description": "Verify that the system prevents adding an out-of-stock product to the cart.", "input": {"productName": "Out of Stock Product", "quantity": 1}, "expected": {"outcome": "System displays an 'Out of Stock' message and prevents the product from being added to the cart", "status": "Error"}}, {"name": "Invalid Product Addition", "description": "Verify how the system handles attempts to add an invalid or non-existent product to the cart.", "input": {"productName": "InvalidProduct", "quantity": 1}, "expected": {"outcome": "System displays an error and prevents the product from being added to the cart", "status": "Error"}}], "id": "2005005"}
{"usecase": {"name": "Modify Product Quantity in Cart", "scenario": "Customer modifies the quantity of a product in their cart before proceeding to checkout.", "actors": "Customer", "preconditions": "Customer has already added a product to their cart.", "steps": ["Customer views their cart", "Customer modifies the quantity of the product", "System updates the cart with the new quantity and recalculates the total cost"]}, "testcases": [{"name": "Increase Product Quantity", "description": "Verify that the system updates the cart correctly when the customer increases the quantity of a product.", "input": {"productName": "Cappuccino", "newQuantity": 2}, "expected": {"outcome": "Product quantity is updated, and the total cost is recalculated", "status": "Success"}}, {"name": "Decrease Product Quantity", "description": "Verify that the system updates the cart correctly when the customer decreases the quantity of a product.", "input": {"productName": "Cappuccino", "newQuantity": 1}, "expected": {"outcome": "Product quantity is updated, and the total cost is recalculated", "status": "Success"}}, {"name": "Remove Product from Cart", "description": "Verify that the system correctly removes a product when its quantity is set to zero.", "input": {"productName": "Cappuccino", "newQuantity": 0}, "expected": {"outcome": "Product is removed from the cart", "status": "Success"}}, {"name": "Negative Number of Product in Cart", "description": "Verify how the system handles attempts to add a negative number of product to the cart.", "input": {"productName": "Cappuccino", "newQuantity": -1}, "expected": {"outcome": "System displays an error and prevents the number of product from being negative", "status": "Error"}}], "id": "2005019"}
{"usecase": {"name": "Apply a Voucher Code", "scenario": "Customer applies a voucher code to their order during checkout.", "actors": "Customer", "preconditions": "Customer is logged in, has items in their cart, and is at the cart page of the checkout process.", "steps": ["Customer clicks on the 'Apply a voucher' option", "Applicable voucher codes are displayed to the customer", "Customer can select voucher valid for this order or enter a voucher code manually"]}, "testcases": [{"name": "Valid Voucher Code", "description": "Verify that the system applies the voucher discount correctly when a valid voucher code is entered and order amount is enough for this voucher.", "input": {"voucherCode": "VALID100", "OrderValue": 349}, "expected": {"outcome": "Voucher discount is applied, and the total cost is updated", "status": "Success"}}, {"name": "Invalid Voucher Code", "description": "Verify that the system displays an error when an invalid voucher code is entered.", "input": {"voucherCode": "INVALIDCODE", "OrderValue": 100}, "expected": {"outcome": "System displays an error message indicating the voucher code is invalid", "status": "Error"}}, {"name": "Expired Voucher Code", "description": "Verify that the system handles cases where the voucher code has expired.", "input": {"voucherCode": "EXPIRED123"}, "expected": {"outcome": "System displays an error message indicating the voucher code has expired", "status": "Error"}}, {"name": "Voucher Not Applicable for Restaurant", "description": "Verify that the system handles cases where a valid voucher code is entered but is not applicable to the selected restaurants", "input": {"voucherCode": "Chillox30", "Restaurant": "Khanas"}, "expected": {"outcome": "System displays an error message indicating that the voucher is not applicable for this restaurant", "status": "Error"}}], "id": "2005021"}
{"usecase": {"name": "Choose Payment Method", "scenario": "Customer selects a payment method (mobile banking, credit card, cash on delivery or other online methods) during checkout.", "actors": "Customer", "preconditions": "Customer is logged in, has items in their cart, and is at the payment stage in checkout page", "steps": ["Customer chooses a payment method", "If information is needed for that method, such as credit card or mobile banking information, system asks those information.", "System asks whether this would be a default payment option", "System confirms the selected payment method and updates the order details", "If discount is applied on certain payment methods, system handles that"]}, "testcases": [{"name": "Select Credit Card Payment", "description": "Verify that the system processes payment correctly when the customer selects the credit card option.", "input": {"paymentMethod": "Credit Card", "cardDetails": {"Card Number": 19004300578, "MM/YY": "09/25", "CVC": 678, "Cardholder Name": "Jarin Tasnim"}}, "expected": {"outcome": "Payment is successfully processed, and the order is confirmed", "status": "Success"}}, {"name": "Select Mobile Wallet Payment", "description": "Verify that the system processes payment correctly when the customer selects a mobile wallet payment method.", "input": {"paymentMethod": "Mobile Banking", "walletDetails": "confirmationID_From_Mobile_Banking_Platform"}, "expected": {"outcome": "Payment is successfully processed, and the order is confirmed", "status": "Success"}}, {"name": "Select Cash on Delivery", "description": "Verify that the system allows customers to select cash on delivery and proceed with the order.", "input": {"paymentMethod": "Cash on Delivery"}, "expected": {"outcome": "System confirms the order and sets the payment method to cash on delivery", "status": "Success"}}, {"name": "Invalid Credit Card", "description": "Verify that the system handles cases where an invalid credit card is used for payment.", "input": {"paymentMethod": "Credit Card", "cardDetails": {"Card Number": 19004300578, "MM/YY": "09/21", "CVC": 678, "Cardholder Name": "Jarin Tasnim"}}, "expected": {"outcome": "System displays an error and prevents the order from being processed", "status": "Error"}}], "id": "2005024"}
{"usecase": {"name": "Process Payment", "scenario": "Customer completes the payment process and confirms the order.", "actors": "Customer, Payment Gateway", "preconditions": "Customer is logged in, has selected a payment method, and is at the confirmation stage.", "steps": ["Customer initiates the payment", "Customer enters payment information to the payment gateway", "Payment gateway processes the payment and returns a response", "System confirms the order if payment is successful"]}, "testcases": [{"name": "Successful Payment", "description": "Verify that the system processes payment successfully and confirms the order.", "input": {"paymentMethod": "Credit Card", "paymentStatus": "Successful"}, "expected": {"outcome": "Order is confirmed, and a payment receipt is generated", "status": "Success"}}, {"name": "Failed Payment", "description": "Verify that the system handles payment failures appropriately.", "input": {"paymentMethod": "Credit Card", "paymentStatus": "Failed"}, "expected": {"outcome": "System displays an error message and prompts the customer to retry the payment or select a different payment method", "status": "Error"}}], "id": "2005027"}
{"usecase": {"name": "Apply Discount Automatically", "scenario": "Customer receives an automatic discount based on the items in their cart (e.g., restaurant offers or app-specific promotions).", "actors": "Customer", "preconditions": "Users select those specific foods or specific restaurants that is eligible for discount.", "steps": ["Customer adds eligible items to the cart", "System applies the applicable discount automatically based on the promotion", "Customer proceeds to checkout with the discount applied"]}, "testcases": [{"name": "Valid Automatic Discount Application", "description": "Verify that the system applies the automatic discount correctly when the customer adds eligible items to the cart.", "input": {"cartItems": ["Eligible Item 1", "Eligible Item 2"], "discount": 20}, "expected": {"outcome": "Discount is automatically applied to the total cost", "status": "Success"}}, {"name": "No Eligible Items for Discount", "description": "Verify that the system does not apply a discount when no eligible items are in the cart.", "input": {"cartItems": ["Ineligible Item 1", "Ineligible Item 2"]}, "expected": {"outcome": "No discount is applied, and the system does not display a discount on the total cost", "status": "No Discount"}}, {"name": "Expired Discount", "description": "Verify that the system does not apply a discount if the promotion has expired.", "input": {"cartItems": ["Eligible Item 1", "Eligible Item 2"], "discountStatus": "Expired"}, "expected": {"outcome": "System does not apply the expired discount and displays the full price", "status": "Error"}}], "id": "2005030"}
{"usecase": {"name": "Apply Discount on Minimum Order Value", "scenario": "Customer receives a discount only if their order exceeds a minimum value (e.g., Tk 500 or more).", "actors": "Customer", "preconditions": "Customer has added items to the cart, and the cart value must meet the minimum order value for the discount to be applied.", "steps": ["Customer adds items to the cart", "System checks if the total cart value exceeds the minimum threshold for the discount", "If eligible, system applies the discount automatically"]}, "testcases": [{"name": "Discount Applied for Order Above Minimum Value", "description": "Verify that the system applies the discount when the cart value exceeds the minimum order value.", "input": {"cartValue": 600, "minOrderValue": 500, "discount": 50}, "expected": {"outcome": "Discount is applied to the total cost", "status": "Success"}}, {"name": "Discount Not Applied for Order Below Minimum Value", "description": "Verify that the system does not apply the discount when the cart value is below the minimum order value.", "input": {"cartValue": 400, "minOrderValue": 500}, "expected": {"outcome": "System does not apply the discount and informs the customer of the minimum order value required", "status": "No Discount"}}, {"name": "Valid Voucher and Automatic Discount", "description": "Verify that the system applies both a valid voucher and an automatic discount correctly.", "input": {"voucherCode": "FOOD50", "automaticDiscount": 20}, "expected": {"outcome": "Both discounts are applied, and the total cost is updated", "status": "Success"}}, {"name": "Doesn't Allow Two Vouchers", "description": "Verify that the system doesn't allow to add two vouchers even if they are valid.", "input": {"voucherCode1": "FOOD50", "voucherCode2": "BKASH50"}, "expected": {"outcome": "Only the first voucher is applied, an error message is shown and the total cost is updated", "status": "Success"}}], "id": "2005005"}
{"usecase": {"name": "Accept a Delivery Order", "scenario": "Rider accepts an available delivery order from a restaurant or shop.", "actors": "Rider", "preconditions": "Rider is logged into the app and has active orders waiting for acceptance.", "steps": ["Rider receives notification of an available delivery order", "Rider views the order details", "Rider accepts the order and heads to the pickup location"]}, "testcases": [{"name": "Valid Order Acceptance", "description": "Verify that the rider can accept an available delivery order and proceed to the pickup location.", "input": {"orderStatus": "Available"}, "expected": {"outcome": "Order is accepted, and the rider heads to the pickup location", "status": "Success"}}, {"name": "Order Already Accepted by Another Rider", "description": "Verify that the system handles cases where another rider has already accepted the order.", "input": {"orderStatus": "Already Accepted"}, "expected": {"outcome": "System displays a message indicating the order has already been accepted by another rider", "status": "Error"}}, {"name": "Expired Order", "description": "Verify that the system prevents the rider from accepting an order if it has expired (e.g., time limit exceeded).", "input": {"orderStatus": "Expired"}, "expected": {"outcome": "System displays a message that the order is no longer available", "status": "Error"}}], "id": "2005019"}
{"usecase": {"name": "Pickup Order from Restaurant", "scenario": "Rider picks up the order from the restaurant and updates the system.", "actors": "Rider, Restaurant", "preconditions": "Rider has accepted the order and arrived at the restaurant.", "steps": ["Rider arrives at the restaurant", "Restaurant hands over the order", "Rider confirms the pickup in the system"]}, "testcases": [{"name": "Successful Order Pickup", "description": "Verify that the rider can successfully pick up the order and update the system.", "input": {"orderStatus": "Ready for Pickup"}, "expected": {"outcome": "Order is confirmed as picked up, and the rider heads to the delivery location", "status": "Success"}}, {"name": "Order Not Ready at Restaurant", "description": "Verify that the system handles cases where the order is not ready when the rider arrives.", "input": {"orderStatus": "Not Ready"}, "expected": {"outcome": "System displays a message indicating the order is not ready and updates the rider\u2019s wait time", "status": "Error"}}], "id": "2005021"}
{"usecase": {"name": "Deliver Order to Customer", "scenario": "Rider delivers the order to the customer and updates the system with the delivery status.", "actors": "Rider, Customer", "preconditions": "Rider has picked up the order and arrived at the delivery location.", "steps": ["Rider arrives at the delivery location", "Rider hands over the order to the customer", "Rider confirms the delivery in the system"]}, "testcases": [{"name": "Successful Order Delivery", "description": "Verify that the rider can deliver the order and update the system with the delivery status.", "input": {"deliveryStatus": "Delivered", "paymentStatus": "paid"}, "expected": {"outcome": "Order is marked as delivered, and the system updates the customer and restaurant", "status": "Success"}}, {"name": "Payment pending", "description": "Verify that the rider can deliver the order and update the system with the delivery status.", "input": {"deliveryStatus": "Delivered", "paymentStatus": "not paid"}, "expected": {"outcome": "System displays an error, and the rider is instructed to wait or return the order", "status": "Error"}}, {"name": "Customer Not Available for Delivery", "description": "Verify that the system handles cases where the customer is unavailable at the delivery location.", "input": {"deliveryStatus": "Customer Not Available"}, "expected": {"outcome": "System displays an error, and the rider is instructed to retry or return the order", "status": "Error"}}], "id": "2005024"}
{"usecase": {"name": "Accept a Customer Order", "scenario": "Restaurant receives a new order from a customer and accepts it to begin preparation.", "actors": "Restaurant", "preconditions": "Restaurant is logged in to the system and receives an order notification.", "steps": ["Restaurant receives a new order", "Restaurant views the order details", "Restaurant accepts the order and begins preparing it"]}, "testcases": [{"name": "Valid Order Acceptance", "description": "Verify that the restaurant can accept an order and begin preparation.", "input": {"orderStatus": "New", "restaurantAction": "Accept Order"}, "expected": {"outcome": "Order is accepted, and the restaurant begins preparing the food", "status": "Success"}}], "id": "2005027"}
{"usecase": {"name": "Mark Order as Ready for Pickup", "scenario": "Restaurant marks the order as ready for the rider to pick up once preparation is complete.", "actors": "Restaurant, Rider", "preconditions": "Restaurant has accepted the order and completed the preparation.", "steps": ["Restaurant finishes preparing the order", "Restaurant marks the order as ready for pickup", "Rider is notified to pick up the order"]}, "testcases": [{"name": "Order Ready for Pickup", "description": "Verify that the restaurant can mark the order as ready for pickup.", "input": {"orderStatus": "Ready for Pickup"}, "expected": {"outcome": "Order status is updated, and the rider is notified to pick up the order", "status": "Success"}}], "id": "2005030"}
{"usecase": {"name": "Login to the Application", "scenario": "Customer logs in to the app using valid or invalid credentials.", "actors": "Customer,System", "preconditions": "Customer has an account with valid credentials.", "steps": ["Customer enters email", "System verifies the credentials", "If valid, the system logs the customer in", "If invalid, the system displays an error message"]}, "testcases": [{"name": "Valid Credentials", "description": "Verify that the system logs the customer in with valid credentials.", "input": {"email": "saba@gmail.com"}, "expected": {"outcome": "Customer is logged in successfully to the homepage", "status": "Success"}}, {"name": "Unregistered Email", "description": "Verify that the system displays an error when the email is not registered.", "input": {"email": "unregistered@example.com"}, "expected": {"outcome": "System displays an error message indicating the email is not registered", "status": "Error"}}], "id": "2005005"}
{"usecase": {"name": "Sign Up for a New Account", "scenario": "A new customer signs up for an account using google or facebook account.", "actors": "Customer,System", "preconditions": "Customer does not have an existing account with the given g-mail or facebook account.", "steps": ["Customer gives a valid g-mail or facebook account", "Customer gives a valid phone number", "System creates the account and sends a confirmation email/SMS"]}, "testcases": [{"name": "Valid Account Creation using g-mail", "description": "Verify that the system creates an account when valid g-mail.", "input": {"email": "user@gmail.com"}, "expected": {"outcome": "Account is created, and a confirmation email or SMS is sent", "status": "Success"}}, {"name": "Valid Account Creation using facebook", "description": "Verify that the system creates an account when valid facebook.", "input": {"facebook ID": "www.facebook.com/saba/23445"}, "expected": {"outcome": "Account is created, and a confirmation email or SMS is sent", "status": "Success"}}, {"name": "Account Creation with Existing Gmail", "description": "Verify that the system prevents account creation when the email is already registered.", "input": {"email": "swastika@gmail.com"}, "expected": {"outcome": "System displays an error message indicating the email is already registered", "status": "Error"}}, {"name": "Account Creation with Existing Facebook ID", "description": "Verify that the system prevents account creation when the Facebook Id is already registered.", "input": {"email": "www.facebook.com/saba123"}, "expected": {"outcome": "System displays an error message indicating the Facebook ID is already registered", "status": "Error"}}, {"name": "Invalid Email Format", "description": "Verify that the system validates the email format during sign-up.", "input": {"email": "invalid-email-format"}, "expected": {"outcome": "System displays an error message indicating the email format is invalid", "status": "Error"}}, {"name": "Invalid facebook ID", "description": "Verify that the system validates that facebook Id.", "input": {"email": "invalid facebook-id"}, "expected": {"outcome": "System displays an error message indicating the facebook id invalid", "status": "Error"}}], "id": "2005021"}
{"usecase": {"name": "Track Order in Real-Time", "scenario": "Customer tracks the status of their food or parcel delivery in real-time.", "actors": "Customer, Rider", "preconditions": "Customer has placed an order, and the rider is assigned to the delivery.", "steps": ["Customer opens the app and views the current order status", "System displays real-time tracking of the rider\u2019s location", "Customer sees estimated time of arrival"]}, "testcases": [{"name": "Real-Time Tracking Available", "description": "Verify that the system displays real-time tracking for an active order.", "input": {"orderStatus": "Out for Delivery", "riderLocation": "On the Way"}, "expected": {"outcome": "Customer can see the rider's location in real-time and track the order status", "status": "Success"}}], "id": "2005024"}
{"usecase": {"name": "User Login", "scenario": "A registered user sign in into his Tripadvisor account.", "actors": "User", "preconditions": "User is not logged in.", "steps": ["User attempts to post a review or manage a booking.", "System prompts the user to log in.", "User enters their email and password.", "System verifies the credentials and logs the user in.", "User continues with the initial action (e.g., review submission or booking)."]}, "testcases": [{"name": "Valid Login via Action", "description": "Verify that a user is logged in when performing an action that prompts for login (e.g., submitting a review).", "steps": ["User attempts to submit a review.", "The system prompts for login.", "The user selects a third-party login method (e.g., Google or Facebook).", "System successfully logs the user in."], "expected": {"outcome": "User is logged in and can continue the action.", "status": "Login successful"}}, {"name": "Invalid Login via Action", "description": "Verify that the system handles invalid login attempts via a third-party login provider.", "steps": ["User attempts to submit a review.", "The system prompts for login.", "User selects a third-party login provider but fails authentication.", "System displays an error message."], "expected": {"outcome": "Login fails and user is notified.", "errorMessage": "Login failed. Please try again."}}]}
{"usecase": {"name": "Trip Planning", "scenario": "A user creates a trip plan by adding places to visit, hotels, and restaurants.", "actors": "User", "preconditions": "User is logged in and has started a trip plan.", "steps": ["User adds places to visit.", "User selects hotels and restaurants.", "System saves the trip plan."]}, "testcases": [{"name": "Valid Trip Plan Creation", "description": "Verify that a user can successfully create a trip plan with valid details.", "input": {"Trip name": ["Eiffel Tower", "Louvre Museum"], "hotels": ["Hotel Paris"], "restaurants": ["Le Meurice"]}, "expected": {"outcome": "Trip plan created successfully", "status": "Saved"}}, {"name": "Trip Plan with Missing Details", "description": "Verify that the system handles trip planning with missing places or hotels.", "input": {"places": [], "hotels": ["Hotel Paris"], "restaurants": []}, "expected": {"outcome": "Trip plan creation failed", "errorMessage": "At least one place must be added."}}]}
{"usecase": {"name": "Flight Search", "scenario": "A user searches for flights between two destinations on specific dates.", "actors": "User", "preconditions": "User is on the flight search page.", "steps": ["User selects departure and destination locations.", "User selects travel dates.", "System displays available flights."]}, "testcases": [{"name": "Valid Flight Search", "description": "Verify that a user can successfully search for flights with valid destinations and dates.", "input": {"departureLocation": "New York", "destinationLocation": "Los Angeles", "departureDate": "2024-12-01", "returnDate": "2024-12-10"}, "expected": {"outcome": "Flight search successful", "resultsCount": ">0"}}, {"name": "Flight Search with Invalid Dates", "description": "Verify that the system handles searches with past or invalid dates.", "input": {"departureLocation": "New York", "destinationLocation": "Los Angeles", "departureDate": "2020-01-01", "returnDate": "2020-01-10"}, "expected": {"outcome": "Flight search failed", "errorMessage": "Invalid travel dates."}}]}
{"usecase": {"name": "Tour or Activity Booking", "scenario": "A user books a tour or activity after reviewing the details and confirming payment.", "actors": "User", "preconditions": "User is logged in and has selected a tour or activity.", "steps": ["User reviews tour or activity details.", "User selects the date and number of participants.", "User enters payment details.", "System confirms the booking."]}, "testcases": [{"name": "Valid Tour Booking", "description": "Verify that a user can successfully book a tour with valid details and payment.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 2, "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/25", "CVV": "123"}}, "expected": {"outcome": "Booking successful", "bookingID": "B456"}}, {"name": "Booking with Invalid Payment", "description": "Verify that the system handles invalid payment details during tour booking.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 2, "paymentDetails": {"cardNumber": "invalid", "expiryDate": "12/25", "CVV": "123"}}, "expected": {"outcome": "Booking failed", "errorMessage": "Invalid payment details."}}, {"name": "Overbooking Participants", "description": "Verify that the system handles the case where the number of participants exceeds the tour capacity.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 100}, "expected": {"outcome": "Booking failed", "errorMessage": "Number of participants exceeds capacity."}}]}
{"usecase": {"name": "Hotel Booking", "scenario": "A user books a selected hotel after reviewing the details and confirming payment.", "actors": "User", "preconditions": "User has selected a hotel and entered the booking flow.", "steps": ["User reviews the hotel details.", "User selects check-in and check-out dates.", "User enters payment details.", "System confirms the booking."]}, "testcases": [{"name": "Valid Booking", "description": "Verify that a user can successfully see a hotel with valid details.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Redirect to the offer in booking.com page", "link": "H123 link at booking.com"}}, {"name": "Booking with an invalid check in date ", "description": "Verify that the given check in date is reasonable to current date.", "input": {"hotelID": "H123", "Check In": "2024-09-23", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Invalid Check In Date"}}, {"name": "Booking with invalid input in Guest field", "description": "Verify that the given data in guest field is reasonable.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "0", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Invalid Rooms In Guest Field"}}, {"name": "Booking with a deal that is not available on that date", "description": "Verify whether the deal is available on that data.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Trip.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Deal is not available"}}]}
{"usecase": {"name": "Personalized Trip Recommendations", "scenario": "A user requests personalized recommendations for hotels, restaurants, and attractions based on their preferences, reviews, and interaction history.", "actors": "User, Recommendation System", "preconditions": "User is logged in with a completed profile and previous interaction history (e.g., reviews, favorites).", "steps": ["User navigates to the 'Recommendations' section from their dashboard.", "User selects a new destination or activity type for recommendations.", "System retrieves the user's profile details, including past interactions such as reviews, favorites, and past trips.", "System analyzes these interactions using a recommendation algorithm and compares them with available listings for the selected destination.", "System filters and ranks listings based on relevance to the user's preferences and other criteria (e.g., similar reviews from like-minded users).", "Personalized recommendations for hotels, restaurants, and attractions are displayed to the user with detailed descriptions, reviews, and ratings.", "User views the recommendations and can choose to save, share, or book directly from the recommendation list."]}, "testcases": [{"name": "Generate Valid Recommendations", "description": "Verify that the system can generate personalized recommendations based on the user's previous reviews, favorites, and preferences.", "input": {"userID": "U123", "destination": "Paris", "preferences": {"favoriteCuisines": ["French", "Italian"], "preferredHotelType": "Luxury", "pastInteractions": {"favoritedListings": ["R245", "H678"], "reviewedListings": ["A567", "R124"]}}}, "expected": {"outcome": "System returns a list of personalized hotel, restaurant, and attraction recommendations in Paris that match the user's preferences.", "status": "Success", "recommendedListings": [{"listingID": "H789", "type": "Hotel", "name": "Le Meurice", "rating": "5 stars", "matchScore": 95}, {"listingID": "R890", "type": "Restaurant", "name": "Chez Janou", "cuisine": "French", "matchScore": 90}, {"listingID": "A123", "type": "Attraction", "name": "Louvre Museum", "matchScore": 88}]}}, {"name": "Generate Recommendations Without Interaction History", "description": "Verify the system's behavior when the user has no past interactions or preferences on file.", "input": {"userID": "U456", "destination": "New York", "preferences": {}}, "expected": {"outcome": "System provides generic recommendations for New York based on popular listings and general traveler preferences.", "status": "Success", "recommendedListings": [{"listingID": "H101", "type": "Hotel", "name": "The Plaza", "rating": "5 stars", "matchScore": 85}, {"listingID": "R202", "type": "Restaurant", "name": "Katz's Delicatessen", "cuisine": "American", "matchScore": 80}, {"listingID": "A303", "type": "Attraction", "name": "Statue of Liberty", "matchScore": 78}]}}, {"name": "Generate Recommendations for Multiple Destinations", "description": "Verify the system's ability to provide personalized recommendations when the user selects multiple destinations for a longer trip.", "input": {"userID": "U789", "destination": ["Tokyo", "Kyoto"], "preferences": {"favoriteCuisines": ["Japanese", "Sushi"], "preferredHotelType": "Traditional Ryokan", "pastInteractions": {"favoritedListings": ["R987"], "reviewedListings": ["A654", "H321"]}}}, "expected": {"outcome": "System returns a list of personalized recommendations for both Tokyo and Kyoto, with tailored suggestions based on the user's preferences and interactions.", "status": "Success", "recommendedListings": [{"listingID": "H432", "type": "Hotel", "name": "Hoshinoya Tokyo", "rating": "5 stars", "location": "Tokyo", "matchScore": 96}, {"listingID": "R543", "type": "Restaurant", "name": "Kyoto Kitcho", "cuisine": "Japanese Kaiseki", "location": "Kyoto", "matchScore": 93}, {"listingID": "A678", "type": "Attraction", "name": "Fushimi Inari Shrine", "location": "Kyoto", "matchScore": 91}]}}]}
{"usecase": {"name": "Hotel Review Submission", "scenario": "A user writes and submits a review for a hotel they stayed at.", "actors": "User", "preconditions": "User has completed a stay at the hotel and is logged in.", "steps": ["User navigates to the review section for the hotel.", "User writes a review and rates the hotel.", "User submits the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review with valid details.", "input": {"hotelID": "H789", "review": "Great hotel with excellent service.", "rating": 5}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Empty Review Submission", "description": "Verify that the system handles review submission without text or rating.", "input": {"hotelID": "H789", "review": "", "rating": 0}, "expected": {"outcome": "Review submission failed", "errorMessage": "Please provide a rating and review."}}]}
{"usecase": {"name": "Account Registration", "scenario": "A new user creates an account on Tripadvisor.", "actors": "User", "preconditions": "User is on the registration page.", "steps": ["User enters their details (name, email, password, etc.).", "User agrees to the terms and conditions.", "User submits the registration form.", "System creates the account and sends a confirmation email."]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a user can successfully create an account with valid details.", "input": {"name": "John Doe", "email": "john.doe@example.com", "password": "strongpassword", "termsAccepted": true}, "expected": {"outcome": "Registration successful", "userID": "U456"}}, {"name": "Registration with Existing Email", "description": "Verify that the system handles account registration with an already existing email.", "input": {"name": "Jane Doe", "email": "john.doe@example.com", "password": "strongpassword", "termsAccepted": true}, "expected": {"outcome": "Registration failed", "errorMessage": "Email already in use."}}]}
{"usecase": {"name": "Restaurant Review Submission", "scenario": "A user writes and submits a review for a restaurant they visited.", "actors": "User", "preconditions": "User has visited the restaurant and is logged in.", "steps": ["User navigates to the review section for the restaurant.", "User writes a review and rates the restaurant.", "User submits the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review with valid details.", "input": {"restaurantID": "R123", "review": "Delicious food and great ambiance.", "rating": 5}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Empty Review Submission", "description": "Verify that the system handles review submission without text or rating.", "input": {"restaurantID": "R123", "review": "", "rating": 0}, "expected": {"outcome": "Review submission failed", "errorMessage": "Please provide a rating and review."}}]}
{"usecase": {"name": "User Profile Update", "scenario": "A logged-in user updates their personal profile information on Tripadvisor.", "actors": "User", "preconditions": "User is logged into their account.", "steps": ["User navigates to the profile settings.", "User updates personal information (name, bio, etc.).", "System saves the updated information."]}, "testcases": [{"name": "Valid Profile Update", "description": "Verify that a user can successfully update their profile with valid details.", "input": {"userID": "U123", "name": "John Doe", "bio": "Travel enthusiast."}, "expected": {"outcome": "Profile update successful", "status": "Updated"}}, {"name": "Profile Update with Empty Fields", "description": "Verify that the system handles profile update attempts with empty mandatory fields.", "input": {"userID": "U123", "name": "", "bio": ""}, "expected": {"outcome": "Profile update failed", "errorMessage": "Name field is required."}}]}
{"usecase": {"name": "Hotel Search", "scenario": "A user searches for hotels in a specific destination with specific filters.", "actors": "User", "preconditions": "User is on the homepage or hotel search page.", "steps": ["User enters a destination.", "User applies filters (price range, rating, amenities, etc.).", "System displays the search results."]}, "testcases": [{"name": "Valid Search with Filters", "description": "Verify that a user can successfully search for hotels with valid destination and filters.", "input": {"destination": "New York", "filters": {"priceRange": "$100-$300", "rating": "4+", "amenities": ["WiFi", "Pool"]}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Search with No Filters", "description": "Verify that a user can search for hotels without applying filters.", "input": {"destination": "Paris", "filters": {}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Invalid Destination", "description": "Verify that the system handles searches with invalid or empty destination.", "input": {"destination": "", "filters": {}}, "expected": {"outcome": "Search failed", "errorMessage": "Please enter a destination."}}]}
{"usecase": {"name": "Restaurant Search", "scenario": "A user searches for restaurants in a specific location with filters like cuisine type and rating.", "actors": "User", "preconditions": "User is on the restaurant search page.", "steps": ["User selects a location.", "User applies filters (cuisine type, rating, etc.).", "System displays the search results."]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that a user can successfully search for restaurants with valid filters.", "input": {"location": "San Francisco", "filters": {"cuisine": "Italian", "rating": "4+"}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Invalid Location Search", "description": "Verify that the system handles invalid or empty location inputs during restaurant search.", "input": {"location": "", "filters": {}}, "expected": {"outcome": "Search failed", "errorMessage": "Please enter a valid location."}}]}
{"usecase": {"name": "Individual Course enrollment", "scenario": "Learner selects a course, if its not free, he pays money to access all course content", "actors": "Learner", "preconditions": "Learner has a coursera account", "steps": ["Learner selects a paid course", "Learner provides his name and country", "Learner selects payment via card or paypal", "For card payment, Learner provides number, Expiration date and Security code and make payment", "For paypal payment, Learner logs in to his paypal account and make payment"]}, "testcases": [{"name": "Valid personal and Card info", "description": "Verify successful payment", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "189"}, "expected": {"outcome": "Enrollment Successful", "status": "Successful"}}, {"name": "Country not provided", "description": "Verify that the system handles the case where country field is empty.", "input": {"Name": "name", "Country": "", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "There was a problem. Country is required.", "status": "Failed"}}, {"name": "Empty/incomplete card number", "description": "Verify that the system handles the case where card number is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 11", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "Your card number is incomplete.", "status": "Failed"}}, {"name": "Invalid card number", "description": "Verify that the system handles the case where where card number is invalid.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1236", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "Your card number is invalid.", "status": "Failed"}}, {"name": "Empty/incomplete card Expiration date", "description": "Verify that the system handles the case where Expiration date is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "02/", "Security Code": "458"}, "expected": {"outcome": "Your card's expiration date is incomplete.", "status": "Failed"}}, {"name": "past card Expiration date", "description": "Verify that the system handles the case where a past Expiration date is provided.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "11/23", "Security Code": "458"}, "expected": {"outcome": "Your card's expiration date is in the past.", "status": "Failed"}}, {"name": "Empty/Incomplete card Security Code", "description": "Verify that the system handles the case where security code field is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "12"}, "expected": {"outcome": "Your card's security code is incomplete.", "status": "Failed"}}, {"name": "Incorrect card Security Code", "description": "Verify that the system handles the case where security code is incorrect.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "485"}, "expected": {"outcome": "Your card's security code is incorrect.", "status": "Failed"}}]}
{"usecase": {"name": "Giving quiz", "scenario": "Learner gives quiz to test the learning of course contents.", "actors": "Learner", "preconditions": "Learner enrolled in the course", "steps": ["Learner select the quiz", "Learner answers the MCQs", "Learner submit the ans", "System automatically shows the result"]}, "testcases": [{"name": "Valid quiz submission", "description": "Verify that learner can submit quiz answer properly and see the result.", "input": {"HonorCodeCheckBox": true, "LegalName": "name"}, "expected": {"submitButtonActivated": true, "outcome": "submission successful", "status": "successful"}}, {"name": "Unticked honour Code check box", "description": "Verify that the system handles the case where Honour Code checkbox is unticked.", "input": {"HonorCodeCheckBox": false, "LegalName": "name"}, "expected": {"submitButtonActivated": false, "outcome": "submit button not activated", "status": "unsuccessful"}}, {"name": "Empty legal name", "description": "Verify that the system handles the case where legal name not provided.", "input": {"HonorCodeCheckBox": true, "LegalName": ""}, "expected": {"submitButtonActivated": false, "outcome": "submit button not activated", "status": "unsuccessful"}}]}
{"usecase": {"name": "Post or reply on discussion forums", "scenario": "Learner creates a new discussion.", "actors": "Student", "preconditions": "Student is enrolled in the course", "steps": ["Learner clicks create post button", "Learner add a Post title", "Learner add a Post body", "Learner select a forum"]}, "testcases": [{"name": "Valid new post", "description": "Verify that a learner can successfully create a new post.", "input": {"Title": "title", "Body": "Body", "Forum": "Week 4"}, "expected": {"outcome": "new post created", "status": "Successful"}}, {"name": "Empty Title", "description": "Verify that the system handles the case where the post title is empty.", "input": {"Title": "", "Body": "Body", "Forum": "Week 4"}, "expected": {"outcome": "Error: Please enter a longer title", "status": "failed"}}, {"name": "Empty Body", "description": "Verify that the system handles the case where the post description is empty.", "input": {"Title": "title", "Body": "", "Forum": "Week 4"}, "expected": {"outcome": "Error: Please enter a longer thread description", "status": "failed"}}]}
{"usecase": {"name": "Apply for financial aid", "scenario": "An user requests for financial aid for a specific course", "actors": "User", "preconditions": "User has an account and the account is logged in", "steps": ["User clicks on a paid course to enroll it", "User clicks on Financial aid available", "User provides the required information", "User clicks on Next button at the bottom of the form", "User provides the required information and response", "User clicks on Review button at the bottom"]}, "testcases": [{"name": "All the required information provided in the first step of a financial aid request", "description": "User provides all the reuired information for the first step of a financial aid request", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Information forwarded to the next step", "status": "Approved"}}, {"name": "Empty level of education", "description": "Verify that the system handles the case where level of education is not provided.", "input": {"Level of education": "", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Level of education must be provided", "status": "Rejected"}}, {"name": "empty annual income", "description": "Verify that the system handles the case where annual income field is empty.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "", "Currency": ""}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Annual income must be provided", "status": "Rejected"}}, {"name": "Empty Employment status.", "description": "Verify that the system handles the case where Employment status is not provided.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Employment status must be provided", "status": "Rejected"}}, {"name": "Empty Reason for applying", "description": "Verify that the system handles the case where reason for applying is not provoded.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": ""}, "expected": {"outcome": "Reason for applying must be provided", "status": "Rejected"}}, {"name": "All the required information provided in the second step", "description": "User provides all the reuired information for the second step of a financial aid request", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Information forwarded for reviewing", "status": "Approved"}}, {"name": "All the required information provided in the second step", "description": "User provides all the reuired information for the second step of a financial aid request", "input": {"Pay for your selected course": "0$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Information forwarded for reviewing", "status": "Approved"}}, {"name": "Empty reason for selecting course", "description": "Verify that the system handles the case where reason for selecting course not provided.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Reason for selecting the course must be provided", "status": "Rejected"}}, {"name": "Accurate information checkbox unchecked", "description": "Verify that the system handles the case where accurate information checkbox is unchecked.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": false, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "All checkboxes must checked", "status": "Rejected"}}, {"name": "Empty Required sentence", "description": "Verify that the system handles the case where required sentence is not provided.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": ""}, "expected": {"outcome": "Required sentence must be written", "status": "Rejected"}}]}
{"usecase": {"name": "Team's Course Registration", "scenario": "An user wants to register for a team-based course ", "actors": "User", "preconditions": "User has an account and is logged in", "steps": ["User choose number of users for a team", "User clicks on  Continue button in under plan details", "User provides the required information in the form that appears", "User clicks on the Continue button under account details"]}, "testcases": [{"name": "Invalid team member numbers", "description": "Verify that the system handles the case where team members number invalid or this field is empty", "input": {"Number of users": "2"}, "expected": {"outcome": "Minimum 5 users.", "status": "Failed"}}, {"name": "Valid team members number", "description": "Verify valid team members number", "input": {"Number of users": "10"}, "expected": {"outcome": "Plan details complete", "status": "Accepted"}}, {"name": "Valid account details", "description": "Verify valid account details", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Account details set up", "status": "Successful"}}, {"name": "Full name not provided", "description": "Verify that the system handles the case where full name field is empty.", "input": {"Full name": "", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Full name is required.", "status": "Failed"}}, {"name": "Empty/Invalid business email", "description": "Verify that the system handles the case where business email field is empty or invalid.", "input": {"Full name": "user", "Business email": "user.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Please enter a valid email.", "status": "Failed"}}, {"name": "Empty job title", "description": "Verify that the system handles the case where job title field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Job title is required.", "status": "Failed"}}, {"name": "Empty organization name", "description": "Verify that the system handles the case where organization name field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Organization name is required.", "status": "Failed"}}, {"name": "Not selected organization type", "description": "Verify that the system handles the case where organization type field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "", "Organization size": "1001-5000"}, "expected": {"outcome": "Organization type is required.", "status": "Failed"}}, {"name": "Not selected organization size", "description": "Verify that the system handles the case where organization size field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": ""}, "expected": {"outcome": "Organization size is required.", "status": "Failed"}}]}
{"usecase": {"name": "Add Education Credentials", "scenario": "An user adds their education credentials to their profile", "actors": "User", "preconditions": "User has an account and is logged in", "steps": ["User clicks on + Add button in the Credentials section under the Education Heading", "User provides the required information in the form that appears", "User clicks on the Save button to save the information"]}, "testcases": [{"name": "All Credentials entered", "description": "Verify that an user can successfully add their education credentials to their profile.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2026"}, "I currently study here": true, "Cumulative grade": "x.yz"}, "expected": {"outcome": "Credential added to profile", "status": "Approved"}}, {"name": "Only Institution name entered", "description": "User only provides Institution name", "input": {"Name of Institution": "BUET", "Degree": "", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Degree entered", "description": "User only provides Degree", "input": {"Name of Institution": "", "Degree": "Less than High School Diploma (or equivalent)", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Start date entered", "description": "User only provides Start date", "input": {"Name of Institution": "", "Degree": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Graduation date entered", "description": "User only provides Graduation date", "input": {"Name of Institution": "", "Degree": "", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "January", "Year": "2026"}, "I currently study here": true}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Start date is later than Graduation date", "description": "Verify that the system handles the case where an user enters a start date later than the graduation date.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "December", "Year": "2024"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2024"}, "I currently study here": true, "Cumulative grade": ""}, "expected": {"outcome": "Graduation date must be later than start date", "status": "Rejected"}}, {"name": "User selects 'I currently study here' but provides a Graduation date in the past", "description": "Verify that the system doesn't allow an user to select 'I currently study here' but provide a Graduation date in the past.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2024"}, "I currently study here": true, "Cumulative grade": ""}, "expected": {"outcome": "Please select a future date", "status": "Rejected"}}, {"name": "User doesn't select 'I currently study here' but provides a Graduation date in the future", "description": "Verify that the system doesn't allow an user to provide a Graduation date in the future without selecting 'I currently study here'.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2026"}, "I currently study here": false, "Cumulative grade": ""}, "expected": {"outcome": "Please select a date before today", "status": "Rejected"}}]}
{"author": "Student ID: 2005015", "usecase": {"name": "Project Intake", "scenario": "A user submits new project requests through a structured process that includes inputting details and prioritizing projects for review.", "actors": "User, Reviewer", "preconditions": "User has permission to submit project requests.", "steps": ["User navigates to the project intake section.", "User fills in the project details: title, description, and start date.", "User submits the project request.", "The request is routed to the appropriate reviewer for approval.", "Reviewer approves or rejects the project based on the details."]}, "testcases": [{"name": "Submit Project Request", "description": "Verify that a user can successfully submit a new project request with valid details.", "input": {"title": "Implement new customer support system", "description": "Research and select a suitable software solution.", "start_date": "2024-11-01"}, "expected": {"outcome": "Project request submitted successfully", "status": "Routed to reviewer"}}, {"name": "Missing Project Title", "description": "Verify that the system displays an error when the user attempts to submit a project request without a title.", "input": {"description": "Improve website performance and user experience.", "start_date": "2024-12-01"}, "expected": {"outcome": "Project request submission failed", "status": "Error", "error": "Title is required"}}, {"name": "Project Prioritization", "description": "Verify that when two project requests are submitted, the project with higher priority appears first in the list.", "input": {"project_request_1": {"title": "Launch new product line", "priority": "High"}, "project_request_2": {"title": "Upgrade company software", "priority": "Medium"}}, "expected": {"outcome": "High priority project appears first in the list", "status": "Success"}}, {"name": "Duplicate Project Submission", "description": "Verify that the system prevents a duplicate project request with the same title and start date from being submitted.", "input": {"title": "Implement new customer support system", "description": "Duplicate request of the same project", "start_date": "2024-11-01"}, "expected": {"outcome": "Duplicate project request submission failed", "status": "Error", "error": "Project with the same title and start date already exists"}}, {"name": "Set Project Start Date in the Past", "description": "Verify that the system does not allow a project request to be submitted with a start date in the past.", "input": {"title": "Revamp HR system", "description": "Plan to overhaul the HR system.", "start_date": "2023-10-01"}, "expected": {"outcome": "Project request submission failed", "status": "Error", "error": "Start date cannot be in the past"}}, {"name": "Valid Future Start Date", "description": "Verify that the system accepts a valid future start date for a project request.", "input": {"title": "Digital Marketing Campaign", "description": "Launch a digital marketing campaign for the new product.", "start_date": "2025-03-15"}, "expected": {"outcome": "Project request submitted successfully", "status": "Success"}}]}
{"author": "Student ID: 2005029", "usecase": {"name": "Resource Planning", "scenario": "A project manager identifies and allocates resources (team members, time, budget) to various tasks in a project.", "actors": "Project Manager, Team Members", "preconditions": "Project is created, and team members are available for resource allocation.", "steps": ["Project Manager navigates to the resource planning section of the project.", "Manager assigns a team member to a task and estimates the required effort.", "Manager reviews potential resource conflicts.", "The assigned tasks and resources are updated in the system."]}, "testcases": [{"name": "Resource Allocation", "description": "Verify that a project manager can assign a team member to a task and estimate the time required for its completion.", "input": {"task_id": "12345", "assignee": "Tausif", "estimated_time": "40 hours"}, "expected": {"outcome": "Resource allocated successfully", "status": "Reflected in team member's workload view"}}, {"name": "Resource Conflict", "description": "Verify that the system highlights a conflict when a team member is assigned to two tasks with overlapping deadlines.", "input": {"task_1_id": "12345", "task_2_id": "67890", "assignee": "Azmal", "task_1_due_date": "2024-10-15", "task_2_due_date": "2024-10-17"}, "expected": {"outcome": "Conflict warning displayed", "status": "Warning message: Resource conflict due to overlapping tasks"}}, {"name": "Track Resource Utilization", "description": "Verify that the system generates an accurate report on the workload and resource utilization of a team member over a specific time period.", "input": {"team_member": "Tamim", "time_period": "October 2024"}, "expected": {"outcome": "Report generated successfully", "status": "Reflects accurate resource utilization"}}, {"name": "Over-allocation Warning", "description": "Verify that the system warns the project manager when they attempt to assign more tasks to a team member than they can handle within the estimated time.", "input": {"task_id": "98765", "assignee": "Fuad", "estimated_time": "50 hours"}, "expected": {"outcome": "Over-allocation warning displayed", "status": "Warning message: Resource over-allocated"}}, {"name": "Unassigned Task", "description": "Verify that a task without an assigned team member is flagged for review.", "input": {"task_id": "11223", "assignee": null}, "expected": {"outcome": "Unassigned task flagged", "status": "Alert: Task not assigned to any resource"}}]}
{"author": "Student ID: 2005028", "usecase": {"name": "Task Management", "scenario": "A user creates, assigns, and manages tasks within a project, including modifying due dates.", "actors": "User, Team Members", "preconditions": "User is logged in, has access to the project, and permissions to manage tasks.", "steps": ["User navigates to the project and clicks 'Add Task'.", "User fills in task details, assigns it to a team member, and sets a due date.", "User can edit task details or modify the due date as required.", "System updates the task details and ensures all assignments are reflected."]}, "testcases": [{"name": "Valid Task Creation", "description": "Verify that the user can successfully create a task with valid details.", "input": {"taskName": "Design new homepage", "assignee": "Adibah", "dueDate": "2024-10-01"}, "expected": {"outcome": "Task created successfully", "status": "Success"}}, {"name": "Empty Task Name", "description": "Verify that the system prevents task creation with an empty task name.", "input": {"taskName": "", "assignee": "Mumu", "dueDate": "2024-10-01"}, "expected": {"outcome": "Task creation failed", "status": "Failure"}}, {"name": "Successful Task Assignment", "description": "Verify that the user can assign a task to another team member.", "input": {"taskID": "1234", "assignee": "Fuad"}, "expected": {"outcome": "Task assigned successfully", "status": "Success"}}, {"name": "Invalid Assignee", "description": "Verify that the system prevents assigning a task to a user who is not a member of the project.", "input": {"taskID": "1234", "assignee": "Nabil"}, "expected": {"outcome": "Task assignment failed", "status": "Failure", "error": "Assignee is not a project member"}}, {"name": "Successful Due Date Modification", "description": "Verify that the user can modify the due date of a task.", "input": {"taskID": "1234", "newDueDate": "2024-10-15"}, "expected": {"outcome": "Due date modified successfully", "status": "Success"}}, {"name": "Invalid Due Date in the Past", "description": "Verify that the system prevents a user from selecting a single due date in the past.", "input": {"taskID": "1234", "newDueDate": "2023-09-15"}, "expected": {"outcome": "Due date modification failed", "status": "Failure", "error": "Cannot set due date in the past"}}, {"name": "Valid Date Range", "description": "Verify that the user can successfully select a valid future date range for a task.", "input": {"taskID": "1234", "dateRange": {"startDate": "2024-11-01", "endDate": "2024-12-01"}}, "expected": {"outcome": "Due date range modified successfully", "status": "Success"}}, {"name": "Remove Assignee", "description": "Verify that the user can remove an assignee from a task, leaving the task unassigned.", "input": {"taskID": "1234", "assignee": ""}, "expected": {"outcome": "Assignee removed successfully", "status": "Success"}}, {"name": "Delete Existing Task", "description": "Verify that the system can delete an existing task", "input": {"taskID": "12345"}, "expected": {"outcome": "Task deleted", "status": "Success"}}, {"name": "Delete Non-Existent Task", "description": "Verify that the system prevents deletion of a task that does not exist.", "input": {"taskID": "0000"}, "expected": {"outcome": "Task deletion failed", "status": "Failure", "error": "Task does not exist"}}, {"name": "Delete Task with Dependencies", "description": "Verify that the system warns when attempting to delete a task that has dependencies.", "input": {"taskID": "1234", "dependentTasks": ["5678", "9101"]}, "expected": {"outcome": "Task deletion failed", "status": "Failure", "error": "Cannot delete task with active dependencies"}}, {"name": "Set Dependency on a Task", "description": "Verify that the system can set dependency on a task.", "input": {"taskID": "1234", "dependentTaskID": "5678"}, "expected": {"outcome": "Dependency setting successful", "status": "Success"}}, {"name": "Set Dependency on Completed Task", "description": "Verify that the system prevents setting a dependency on a task that is already completed.", "input": {"taskID": "1234", "dependentTaskID": "5678", "dependentTaskStatus": "Completed"}, "expected": {"outcome": "Dependency setting failed", "status": "Failure", "error": "Cannot set dependency on a completed task"}}, {"name": "Set Circular Task Dependencies", "description": "Verify that the system prevents setting circular dependencies between tasks.", "input": {"taskID": "1234", "dependentTaskID": "5678", "existingDependencies": [{"taskID": "5678", "dependentTaskID": "1234"}]}, "expected": {"outcome": "Dependency setting failed", "status": "Failure", "error": "Cannot set circular dependencies"}}, {"name": "Set Valid Priority Level", "description": "Verify that the system successfully sets a valid priority level for a task.", "input": {"taskID": "1234", "priority": "High"}, "expected": {"outcome": "Priority successfully set", "status": "Success"}}, {"name": "Invalid Priority Level", "description": "Verify that the system prevents setting an invalid priority level for a task.", "input": {"taskID": "1234", "priority": "Urgent"}, "expected": {"outcome": "Priority setting failed", "status": "Failure", "error": "Invalid priority level. Allowed values are: Low, Medium, High"}}]}
{"author": "Student ID: 2005052", "usecase": {"name": "Add Rules", "scenario": "A user adds automated rules to a project to trigger specific actions based on conditions.", "actors": "User", "preconditions": "User has access to the project and permission to manage rules.", "steps": ["User navigates to the project settings.", "User selects the 'Rules' tab.", "User clicks 'Add Rule' and selects a trigger (e.g., task moved to a section).", "User selects the corresponding action (e.g., assign task, mark task as complete).", "System saves the rule and applies it to the project."]}, "testcases": [{"name": "Successful Rule Addition", "description": "Verify that the user can successfully add a rule to a project.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Adibah'"}, "expected": {"outcome": "Rule added successfully", "status": "Success"}}, {"name": "Duplicate Rule", "description": "Verify that the system prevents adding a duplicate rule with the same trigger and action.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Adibah'"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Duplicate rule detected"}}, {"name": "Invalid Trigger", "description": "Verify that the system prevents adding a rule with an invalid or non-existent trigger.", "input": {"projectID": "5678", "trigger": "Invalid Trigger", "action": "Assign task to 'Mumu'"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Invalid trigger"}}, {"name": "Invalid Action", "description": "Verify that the system prevents adding a rule with an invalid or non-existent action.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Invalid Action"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Invalid action"}}, {"name": "Rule Without Permission", "description": "Verify that a user without proper permissions cannot add a rule to the project.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Mumu'", "userPermissions": "Read-only"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Insufficient permissions"}}, {"name": "Multiple Rules Addition", "description": "Verify that a user can successfully add multiple unique rules to a project.", "input": {"projectID": "5678", "rules": [{"trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Fuad'"}, {"trigger": "Task marked as complete", "action": "Move task to 'Completed'"}]}, "expected": {"outcome": "Multiple rules added successfully", "status": "Success"}}]}
{"author": "Student ID: 2005056", "usecase": {"name": "Custom Fields Management", "scenario": "A user adds, modifies, or deletes custom fields in a project to track additional task attributes.", "actors": "User", "preconditions": "User has access to the project and permission to manage custom fields.", "steps": ["User navigates to the project settings.", "User selects the 'Custom Fields' tab.", "User clicks 'Add Field' to create a new custom field with specific attributes (e.g., text, dropdown, number).", "User can also edit existing custom fields or remove them from the project.", "System saves or updates the custom fields and applies them to tasks within the project."]}, "testcases": [{"name": "Successful Custom Field Addition", "description": "Verify that a user can successfully add a custom field to a project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}}, "expected": {"outcome": "Custom field added successfully", "status": "Success"}}, {"name": "Custom Field Addition with Duplicate Name", "description": "Verify that the system prevents adding a custom field with a name that already exists in the project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}}, "expected": {"outcome": "Custom field addition failed", "status": "Failure", "error": "Custom field with this name already exists"}}, {"name": "Invalid Custom Field Type", "description": "Verify that the system prevents adding a custom field with an invalid type.", "input": {"projectID": "5678", "customField": {"name": "Deadline", "type": "InvalidType"}}, "expected": {"outcome": "Custom field addition failed", "status": "Failure", "error": "Invalid custom field type"}}, {"name": "Successful Custom Field Modification", "description": "Verify that a user can modify an existing custom field\u2019s attributes.", "input": {"projectID": "5678", "customField": {"fieldID": "1234", "newName": "Task Urgency", "newType": "Dropdown", "newOptions": ["Urgent", "Non-urgent"]}}, "expected": {"outcome": "Custom field modified successfully", "status": "Success"}}, {"name": "Custom Field Without Permission", "description": "Verify that a user without proper permissions cannot add, modify, or delete custom fields in the project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}, "userPermissions": "Read-only"}, "expected": {"outcome": "Custom field modification failed", "status": "Failure", "error": "Insufficient permissions"}}, {"name": "Successful Custom Field Addition with Rules", "description": "Verify that a user can successfully add a custom field and define rules that trigger actions based on custom field changes.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}, "rule": {"trigger": "Custom Field 'Priority' is set to 'High'", "action": "Assign task to 'Team Lead'"}}, "expected": {"outcome": "Custom field and rule added successfully", "status": "Success"}}]}
{"author": "Student ID: 2005050", "usecase": {"name": "Goal Management", "scenario": "A user creates and manages goals with clear objectives, deadlines, link tasks to goal and tracks progress towards goal completion.", "actors": "User", "preconditions": "User has permission to create and manage goals within the project.", "steps": ["User navigates to the Goals section in the project.", "User clicks on 'Create New Goal'.", "User fills in the goal details: title, description, and deadline.", "User clicks 'Save' to create the goal.", "User updates the goal's progress by tracking completed tasks related to the goal.", "User can edit, monitor, and adjust the goal status until completion."]}, "testcases": [{"name": "Valid Goal Creation", "description": "Verify that a user can create a new goal with a valid title, description, and deadline.", "input": {"title": "Achieve 20% increase in sales by Q4", "description": "Implement new marketing strategies and improve sales processes.", "deadline": "2024-12-31"}, "expected": {"outcome": "Goal created successfully", "status": "Success"}}, {"name": "Missing Title in Goal Creation", "description": "Verify that the system shows an error message if a user attempts to create a goal without a title.", "input": {"description": "Increase customer satisfaction by 15%.", "deadline": "2024-10-31"}, "expected": {"outcome": "Goal creation failed", "status": "Error", "error": "Title is required"}}, {"name": "Link Task to a Goal", "description": "Verify that the system successfully links a task to a specific goal.", "input": {"taskID": "5678", "goalID": "1234"}, "expected": {"outcome": "Task successfully linked to goal", "status": "Success"}}, {"name": "Link Non-Existent Task to a Goal", "description": "Verify that the system prevents linking a non-existent task to a goal.", "input": {"taskID": "0000", "goalID": "1234"}, "expected": {"outcome": "Task linking failed", "status": "Failure", "error": "Task does not exist"}}, {"name": "Link Task to Non-Existent Goal", "description": "Verify that the system prevents linking a task to a non-existent goal.", "input": {"taskID": "5678", "goalID": "0000"}, "expected": {"outcome": "Task linking failed", "status": "Failure", "error": "Goal does not exist"}}, {"name": "Link Task to Multiple Goals", "description": "Verify that the system supports linking a single task to multiple goals.", "input": {"taskID": "5678", "goalIDs": ["1234", "5679"]}, "expected": {"outcome": "Task successfully linked to multiple goals", "status": "Success"}}, {"name": "Unlink Task from Goal", "description": "Verify that the system successfully unlinks a task from a goal.", "input": {"taskID": "5678", "goalID": "1234"}, "expected": {"outcome": "Task successfully unlinked from goal", "status": "Success"}}, {"name": "Track Goal Progress", "description": "Verify that the system allows the user to update the progress of a goal as tasks are completed.", "input": {"goal_id": "12345", "progress": "50%"}, "expected": {"outcome": "Progress updated successfully", "status": "Success", "progressBar": "50%"}}, {"name": "Edit Goal Details", "description": "Verify that a user can modify the title, description, or deadline of an existing goal.", "input": {"goal_id": "12345", "newTitle": "Achieve 25% increase in sales by Q4", "newDeadline": "2024-11-30"}, "expected": {"outcome": "Goal details updated successfully", "status": "Success"}}, {"name": "Set Goal Deadline in the Past", "description": "Verify that the system prevents the user from setting a goal deadline in the past.", "input": {"title": "Reduce churn rate by 10%", "description": "Improve customer retention strategies.", "deadline": "2023-01-01"}, "expected": {"outcome": "Goal creation failed", "status": "Error", "error": "Deadline cannot be in the past"}}, {"name": "Valid Goal Deadline", "description": "Verify that the user can set a valid future deadline for a goal.", "input": {"title": "Launch new product line", "description": "Develop and launch a new range of eco-friendly products.", "deadline": "2025-05-01"}, "expected": {"outcome": "Goal created successfully", "status": "Success"}}, {"name": "Automatic Rule Trigger on Goal Completion", "description": "Verify that a predefined rule triggers when a goal's progress reaches 100%, for example, notifying the team.", "input": {"goal_id": "12345", "progress": "100%"}, "expected": {"outcome": "Rule triggered, notification sent to team", "status": "Success"}}]}
{"author": "Student ID: 2005015", "usecase": {"name": "Reporting and Analytics", "scenario": "A user generates reports for task completion rates, project deadlines, and overall project progress. The user can also create custom dashboards to track project performance metrics.", "actors": "User, System", "preconditions": "User has permission to access reporting features.", "steps": ["User navigates to the reporting and analytics section.", "User selects the type of report (e.g., task completion rate, project deadline overview).", "User configures the report parameters (e.g., date range, project selection).", "User generates the report and views the output.", "User customizes the dashboard to display key performance metrics."]}, "testcases": [{"name": "Generate Task Completion Rate Report", "description": "Verify that the system generates a task completion rate report for a given project within a selected date range.", "input": {"reportType": "Task Completion Rate", "projectID": "5678", "dateRange": {"start": "2024-09-01", "end": "2024-09-30"}}, "expected": {"outcome": "Task completion rate report generated successfully", "status": "Success"}}, {"name": "Generate Project Deadline Overview", "description": "Verify that the system generates a report showing the deadlines for all tasks in a project within a selected date range.", "input": {"reportType": "Project Deadline Overview", "projectID": "5678", "dateRange": {"start": "2024-09-01", "end": "2024-09-30"}}, "expected": {"outcome": "Project deadline overview report generated successfully", "status": "Success"}}, {"name": "Create Custom Performance Dashboard", "description": "Verify that the user can create a custom dashboard to track project performance metrics such as task completion rates and upcoming deadlines.", "input": {"dashboardName": "Project Performance", "widgets": [{"type": "Task Completion Rate", "projectID": "5678"}, {"type": "Upcoming Deadlines", "projectID": "5678"}]}, "expected": {"outcome": "Custom dashboard created successfully", "status": "Success"}}, {"name": "Invalid Date Range for Report", "description": "Verify that the system prevents generating a report when an invalid date range (e.g., start date after end date) is provided.", "input": {"reportType": "Task Completion Rate", "projectID": "5678", "dateRange": {"start": "2024-09-30", "end": "2024-09-01"}}, "expected": {"outcome": "Report generation failed", "status": "Failure", "error": "Invalid date range"}}]}
{"author": "Student ID: 2005028", "usecase": {"name": "Product Launches", "scenario": "A team creates and manages product launch roadmaps with key milestones, deadlines, and collaboration features.", "actors": "Product Manager, Team Members, Marketing Team", "preconditions": "Product concept is approved, and team members are assigned to the project.", "steps": ["Product Manager creates a product launch roadmap with key milestones and deadlines.", "Team members collaborate by assigning tasks and commenting on milestones.", "Milestones are tracked, and progress is updated based on completion."]}, "testcases": [{"name": "Roadmap Creation", "description": "Verify that a new product launch roadmap with key milestones and deadlines can be created successfully.", "input": {"product_name": "New Mobile App", "launch_date": "2024-12-01", "milestones": [{"title": "Design and prototyping", "deadline": "2024-09-30"}, {"title": "Development and testing", "deadline": "2024-11-15"}]}, "expected": {"outcome": "Roadmap created successfully", "status": "Displayed visually with clear milestones and progress tracking"}}, {"name": "Collaboration", "description": "Verify that team members can leave comments and assign tasks within the product launch roadmap, and that changes are visible to all collaborators.", "input": {"roadmap_id": "12345", "comment": "Need to discuss marketing strategy with the team.", "task_assignment": {"task_id": "67890", "assignee": "Adibah"}}, "expected": {"outcome": "Collaboration successful", "status": "Comments and task assignments are visible to all collaborators"}}, {"name": "Track Progress", "description": "Verify that marking a milestone as complete updates the overall roadmap progress.", "input": {"milestone_id": "12345"}, "expected": {"outcome": "Milestone marked as complete", "status": "Overall roadmap progress updated"}}, {"name": "Duplicate Milestone Prevention", "description": "Verify that the system prevents duplicate milestones with the same title and deadline in a single roadmap.", "input": {"milestone_title": "Design and prototyping", "deadline": "2024-09-30"}, "expected": {"outcome": "Duplicate milestone prevented", "status": "Error message: Duplicate milestone"}}, {"name": "Missed Deadline Notification", "description": "Verify that the system sends a notification when a milestone deadline is missed.", "input": {"milestone_id": "12345", "deadline": "2024-09-30", "current_date": "2024-10-01"}, "expected": {"outcome": "Notification sent", "status": "Alert: Milestone deadline missed"}}]}
{"author": "Student ID: 2005029", "usecase": {"name": "Permissions and Access Control", "scenario": "A user manages who can view, edit, or delete tasks/projects by configuring role-based access for different teams or individuals.", "actors": "Admin, User, Team", "preconditions": "Admin has permission to manage access control settings.", "steps": ["Admin navigates to the permissions settings of a project or task.", "Admin assigns roles (e.g., Viewer, Editor, Admin) to users or teams.", "Admin configures permissions for viewing, editing, or deleting tasks or projects.", "User actions are restricted based on their assigned roles.", "System prevents unauthorized actions like editing or deleting without the necessary permissions."]}, "testcases": [{"name": "Assign Viewer Role to User", "description": "Verify that the system allows the admin to assign the 'Viewer' role to a user, limiting them to view-only access.", "input": {"projectID": "1234", "userID": "5678", "role": "Viewer"}, "expected": {"outcome": "User assigned 'Viewer' role successfully", "status": "Success"}}, {"name": "Assign Editor Role to User", "description": "Verify that the system allows the admin to assign the 'Editor' role to a user, enabling them to edit tasks or projects.", "input": {"projectID": "1234", "userID": "5678", "role": "Editor"}, "expected": {"outcome": "User assigned 'Editor' role successfully", "status": "Success"}}, {"name": "Prevent Deletion by Viewer Role", "description": "Verify that a user with the 'Viewer' role is unable to delete tasks or projects.", "input": {"taskID": "4321", "userID": "5678", "action": "Delete Task"}, "expected": {"outcome": "Deletion action failed", "status": "Failure", "error": "User does not have permission to delete tasks"}}, {"name": "Prevent Editing by Non-Editor Role", "description": "Verify that a user without 'Editor' or 'Admin' roles cannot edit tasks or projects.", "input": {"taskID": "4321", "userID": "5678", "action": "Edit Task", "role": "Viewer"}, "expected": {"outcome": "Edit action failed", "status": "Failure", "error": "User does not have permission to edit tasks"}}, {"name": "Grant Admin Role to User", "description": "Verify that the system allows the admin to grant 'Admin' role to a user, enabling full control over tasks and projects.", "input": {"projectID": "1234", "userID": "5678", "role": "Admin"}, "expected": {"outcome": "User assigned 'Admin' role successfully", "status": "Success"}}, {"name": "Configure Role-Based Access for Teams", "description": "Verify that the system allows the admin to configure role-based access for entire teams (e.g., assign 'Editor' role to a team).", "input": {"projectID": "1234", "teamID": "7890", "role": "Editor"}, "expected": {"outcome": "Team assigned 'Editor' role successfully", "status": "Success"}}]}
{"author": "Student ID: 2005050", "usecase": {"name": "Integration with External Tools", "scenario": "A user links Asana with external tools such as Google Drive, Dropbox, GitHub, or Jira to enhance project collaboration and streamline workflows. The user can access files, sync issues, and automate task creation between Asana and third-party tools.", "actors": "User, System, External Tools (Google Drive, Dropbox, GitHub, Jira)", "preconditions": "User has appropriate permissions to configure external tool integrations.", "steps": ["User navigates to the integration settings in Asana.", "User selects an external tool (e.g., Google Drive, Dropbox, GitHub, Jira).", "User authorizes Asana to connect with the selected external tool by logging in or granting access.", "User configures integration settings, such as linking files, syncing tasks, or creating automated workflows.", "User verifies the successful integration by performing actions (e.g., attaching files from Google Drive or creating a task from GitHub issues)."]}, "testcases": [{"name": "Link Asana with Google Drive", "description": "Verify that the user can successfully link Google Drive with Asana and attach files to tasks.", "input": {"integrationTool": "Google Drive", "action": "Link Account"}, "expected": {"outcome": "Google Drive linked successfully", "status": "Success"}}, {"name": "Attach File from Google Drive to Task", "description": "Verify that a user can attach a file from Google Drive to an Asana task after linking the Google Drive account.", "input": {"taskID": "1234", "fileFrom": "Google Drive", "fileID": "abcd1234"}, "expected": {"outcome": "File successfully attached to task", "status": "Success"}}, {"name": "Link Asana with Dropbox", "description": "Verify that the user can successfully link Dropbox with Asana and attach files to tasks.", "input": {"integrationTool": "Dropbox", "action": "Link Account"}, "expected": {"outcome": "Dropbox linked successfully", "status": "Success"}}, {"name": "Create Task from GitHub Issue", "description": "Verify that a user can create an Asana task from a GitHub issue after linking the GitHub account to Asana.", "input": {"integrationTool": "GitHub", "action": "Create Task", "githubIssueID": "GH1234"}, "expected": {"outcome": "Task created from GitHub issue", "status": "Success"}}, {"name": "Link Asana with Jira", "description": "Verify that the user can successfully link Jira with Asana and synchronize tasks between both platforms.", "input": {"integrationTool": "Jira", "action": "Link Account"}, "expected": {"outcome": "Jira linked successfully", "status": "Success"}}, {"name": "Sync Jira Issues with Asana Tasks", "description": "Verify that a user can sync Jira issues with Asana tasks, ensuring that updates in Jira are reflected in Asana and vice versa.", "input": {"taskID": "5678", "jiraIssueID": "JIR1234", "action": "Sync"}, "expected": {"outcome": "Jira issue synced with Asana task", "status": "Success"}}, {"name": "Automate Workflow with External Tools", "description": "Verify that the user can automate a workflow, such as automatically creating an Asana task when a new GitHub issue is opened.", "input": {"workflow": "Create Task on GitHub Issue", "action": "Enable Automation"}, "expected": {"outcome": "Workflow automation enabled successfully", "status": "Success"}}, {"name": "Failed Integration with Invalid Credentials", "description": "Verify that the system prevents integration with external tools when invalid credentials are provided.", "input": {"integrationTool": "Google Drive", "action": "Link Account", "credentials": "Invalid"}, "expected": {"outcome": "Integration failed due to invalid credentials", "status": "Failure", "error": "Invalid credentials"}}]}
{"usecase": {"name": "View Price for Selected Route", "scenario": "User selects the pickup location and destination, and the system shows the ride price. If the user is not logged in, they are prompted to log in before viewing the price.", "actors": "User", "preconditions": ["User is on the ride booking page.", "Location and destination fields are available for selection."], "steps": ["User selects their pickup location.", "User selects their destination.", "System checks if the user is logged in.", {"condition": "User is not logged in", "steps": ["System prompts the user to log in.", "User provides login credentials.", "System verifies the login and, if valid, redirects to the price page."]}, {"condition": "User is logged in", "steps": ["System calculates the price for the selected route.", "System displays the price along with ride options (e.g., UberX, UberXL, etc.)."]}], "postconditions": "The price for the selected route is displayed if the user is logged in."}, "testcases": [{"name": "View Price After Logging In", "description": "Verify that a user can view the price after selecting location and destination when logged in.", "input": {"userId": "user123", "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka"}, "expected": {"outcome": "Price displayed successfully", "price": "150 taka", "rideOptions": ["UberX", "UberXL", "UberBlack"]}}, {"name": "Prompt to Log In When Not Logged In", "description": "Verify that the user is prompted to log in if they are not logged in when selecting location and destination.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka"}, "expected": {"outcome": "Prompt to log in", "loginPage": "Displayed", "status": "Not logged in"}}, {"name": "Failed Login When Viewing Price", "description": "Verify that the system rejects incorrect login details and doesn't display the price if login fails.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka", "loginCredentials": {"username": "user@example.com", "password": "wrongpassword"}}, "expected": {"outcome": "Login failed", "errorMessage": "Invalid username or password", "status": "Error recorded"}}, {"name": "View Price After Login with Correct Credentials", "description": "Verify that after logging in with correct credentials, the price is displayed for the selected route.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka", "loginCredentials": {"username": "user@example.com", "password": "correctpassword"}}, "expected": {"outcome": "Login successful and price displayed", "price": "150 taka", "rideOptions": ["UberX", "UberXL", "Motor Cycle"]}}]}
{"usecase": {"name": "Sign Up with Account Verification", "scenario": "The user tries to sign up for a new Uber account. The system checks if an account with the provided email or phone number already exists. If the account exists, the user is notified and cannot proceed. If the account does not exist, the signup is successful.", "actors": "User", "preconditions": ["User is on the sign-up page.", "User provides valid account information (email/phone number, password, and other required details)."], "steps": ["User enters the required account information (e.g., email, phone number, password).", "User submits the sign-up form.", "System checks if an account with the provided email or phone number already exists.", {"condition": "An account exists with the provided email or phone number", "steps": ["System displays an error message to the user: 'An account with this email/phone number already exists. Please log in.'", "User is prompted to log in or use a different email/phone number."]}, {"condition": "No account exists with the provided email or phone number", "steps": ["System successfully creates a new account.", "User is automatically logged in or directed to complete the sign-up process (e.g., email/phone verification)."]}], "postconditions": "The user either successfully creates a new account or receives an error if the account already exists."}, "testcases": [{"name": "Successful Sign-Up", "description": "Verify that the user can successfully sign up when no account exists with the provided email or phone number.", "input": {"email": "newuser@example.com", "phoneNumber": "01712345678", "accountStatus": "No existing account"}, "expected": {"outcome": "New account created", "status": "Sign-up successful"}}, {"name": "Failed Sign-Up: Account Already Exists", "description": "Verify that the system displays an error message if the user tries to sign up with an email or phone number that is already associated with an existing account.", "input": {"email": "existinguser@example.com", "phoneNumber": "01712345678", "accountStatus": "Account already exists"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "An account with this email/phone number already exists. Please log in."}}, {"name": "Invalid Email Format", "description": "Verify that the system displays an error when the user enters an invalid email format.", "input": {"email": "invalid-email-format", "phoneNumber": "01712345678"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please enter a valid email address."}}, {"name": "Missing Required Fields", "description": "Verify that the system prompts the user to fill in all required fields if they are left empty.", "input": {"email": "", "phoneNumber": "01712345678", "password": ""}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please complete all required fields."}}, {"name": "Invalid Phone Number Format", "description": "Verify that the system displays an error if the user enters an invalid phone number format during sign-up.", "input": {"email": "newuser@example.com", "phoneNumber": "invalid-phone"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please enter a valid phone number."}}]}
{"usecase": {"name": "Log in with QR Code", "scenario": "The user can log in by scanning a QR code displayed on their device using their phone\u2019s camera. Both devices must be connected to the same WiFi or hotspot, and the user must be logged in to the Uber app on their phone.", "actors": "User", "preconditions": ["User is on the login page on a desktop or another device (not the phone).", "A valid QR code is generated and displayed on the desktop/device.", "User has the Uber app installed on their phone and is logged in.", "Both devices (desktop and phone) are connected to the same WiFi network or hotspot."], "steps": ["User selects the 'Log in with QR code' option on the desktop/device.", "System generates and displays a QR code on the screen.", "User scans the QR code with their phone\u2019s camera.", "The Uber app on the phone detects the QR code and processes the login request.", "The phone app verifies if the devices are on the same WiFi or hotspot.", {"condition": "Both devices are on the same network", "steps": ["User is automatically logged in on the desktop/device.", "System redirects the user to the next page (e.g., dashboard or price page)."]}, {"condition": "Devices are not on the same network", "steps": ["System displays an error message to the user: 'Devices must be connected to the same WiFi or hotspot.'"]}], "postconditions": "The user is logged in on the desktop/device if the scan and verification are successful."}, "testcases": [{"name": "Successful Login with QR Code", "description": "Verify that the user can successfully log in using a QR code when both devices are connected to the same WiFi and the user is logged in to the Uber app on their phone.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Same", "uberAppStatus": "Logged in"}, "expected": {"outcome": "Login successful on desktop/device", "redirectPage": "Dashboard or price page"}}, {"name": "Failed Login with Different Networks", "description": "Verify that the system displays an error if the phone and desktop/device are not on the same WiFi or hotspot.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Different", "uberAppStatus": "Logged in"}, "expected": {"outcome": "Error message displayed", "errorMessage": "Devices must be connected to the same WiFi or hotspot", "status": "Login failed"}}, {"name": "Failed Login when Not Logged into Uber App", "description": "Verify that the system fails to log in if the user is not logged into the Uber app on their phone.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Same", "uberAppStatus": "Not logged in"}, "expected": {"outcome": "Login failed", "errorMessage": "Please log in to your Uber app to continue", "status": "Login not initiated"}}, {"name": "QR Code Scan Timeout", "description": "Verify that the system times out if the QR code is not scanned within a certain time.", "input": {"qrCode": "Valid QR code", "timeElapsed": "More than timeout duration"}, "expected": {"outcome": "QR code expired", "errorMessage": "QR code expired, please generate a new one", "status": "QR code invalidated"}}]}
{"usecase": {"name": "Request a Ride", "scenario": "Passengers request for a ride to reach their destination", "actors": "Passengers, Riders", "preconditions": "Passengers must be logged in to Uber", "steps": ["Passengers choose their preferred vehicle type", "Request a ride", "Riders confirm the ride"]}, "testcases": [{"name": "Valid pick-up and drop-off locations", "description": "Verify that passengers can request a ride with valid pick-up and drop-off locations.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Dhanmondi 9A"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request successful", "rideId": "abcdef12345", "driverAssigned": {"driverId": "driver98765", "driverName": "Abdul Kalam", "estimatedArrivalTime": "5 minutes"}, "estimatedFare": "250 taka", "status": "Driver assigned"}}, {"name": "Drop-off location too far", "description": "Verify the system shows an error when the drop-off location is too far.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Sylhet City"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request failed", "error": {"message": "Drop-off location is too far", "code": "LOCATION_TOO_FAR"}, "status": "Request denied"}}, {"name": "No drivers available", "description": "Verify user is notified if no drivers are available.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Dhanmondi 9A"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request failed", "error": {"message": "No drivers available at the moment", "code": "NO_DRIVERS_AVAILABLE"}, "status": "Request denied"}}]}
{"usecase": {"name": "Payment Option Selection", "scenario": "A user selects a preferred payment method for their Uber ride.", "actors": "Registered User", "preconditions": "The user has an active Uber account and is ready to request or complete a ride.", "steps": [{"scenario": "Before placing order", "description": "Select payment method before requesting a ride.", "steps": ["Open payment methods section in the app menu", "Select payment method"]}, {"scenario": "While placing order", "description": "Select payment method while requesting a ride.", "steps": ["Tap the payment icon next to the pickup address", "Select payment method"]}]}, "testcases": [{"name": "Before placing an order", "description": "User selects a payment method before placing an order (via app menu).", "inputs": {"action": "Select payment method", "time": "Before placing order", "paymentMethod": "Cash"}, "expected": {"paymentStatus": "Payment method saved", "selectedMethod": "Cash"}}, {"name": "While placing an order", "description": "User selects a payment method while placing an order (via payment icon).", "inputs": {"action": "Select payment method", "time": "While placing order", "paymentMethod": "Card"}, "expected": {"paymentStatus": "Payment method saved", "selectedMethod": "Card"}}, {"name": "Switching from cash to card during ride", "description": "User switches from cash to card during the ride.", "inputs": {"currentMethod": "Cash", "newMethod": "Card", "time": "During the ride"}, "expected": {"paymentStatus": "Success", "selectedMethod": "Card"}}, {"name": "Invalid switch from card to cash during ride", "description": "User attempts to switch from card to cash during the ride.", "inputs": {"currentMethod": "Card", "newMethod": "Cash", "time": "During the ride"}, "expected": {"paymentStatus": "Failure", "error": "Switching from card to cash not allowed"}}, {"name": "Card payment failure, automatic switch to cash", "description": "User's card is blocked or has insufficient funds; payment method changes automatically to cash.", "inputs": {"paymentMethod": "Card", "cardStatus": "Blocked or Insufficient funds"}, "expected": {"paymentStatus": "Switched to Cash", "notification": {"user": "Card issue, payment switched to cash", "driver": "User's payment method switched to cash"}}}]}
{"usecase": {"name": "Send Parcel with Uber Package System", "scenario": "A user wants to send a parcel to a specified destination through the Uber package delivery system. The system collects both the sender and receiver's information and asks for payment details, allowing either the sender or receiver to pay.", "actors": "Sender, Receiver, Uber System", "preconditions": ["The user is on the Uber app's parcel sending page.", "The user has the parcel details ready (e.g., parcel size, weight, and type)."], "steps": ["The sender selects the 'Send Parcel' option in the Uber app.", "The system asks for sender's information (name, phone number, pickup location).", "The sender fills in the required information.", "The system asks for receiver's information (name, phone number, delivery location).", "The sender enters the receiver's details.", "The system prompts for the payment method, with options for the sender or receiver to pay.", {"condition": "Sender opts to pay", "steps": ["The system asks for the sender's payment details.", "The sender provides payment information.", "The system verifies the payment method and processes the payment."]}, {"condition": "Receiver opts to pay", "steps": ["The system informs the receiver that payment is required upon delivery.", "The system completes the order, and the parcel is picked up from the sender."]}, "The system confirms the booking and sends a notification to both the sender and receiver."], "postconditions": "The parcel is scheduled for pickup, and both the sender and receiver receive confirmations. Payment is either processed immediately (if the sender pays) or upon delivery (if the receiver pays)."}, "testcases": [{"name": "Successful Parcel Sending with Sender Payment", "description": "Verify that the user can successfully send a parcel when the sender opts to pay.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Sender"}, "expected": {"outcome": "Parcel booking confirmed", "status": "Payment successfully processed by sender"}}, {"name": "Successful Parcel Sending with Receiver Payment", "description": "Verify that the parcel can be successfully booked when the receiver opts to pay upon delivery.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Receiver"}, "expected": {"outcome": "Parcel booking confirmed", "status": "Receiver will be charged upon delivery"}}, {"name": "Failed Parcel Sending: Invalid Receiver Phone Number", "description": "Verify that the system displays an error when the receiver's phone number is invalid.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Sender"}, "expected": {"outcome": "Parcel booking failed", "errorMessage": "Please enter a valid phone number for the receiver."}}]}
{"usecase": {"name": "Rent a Vehicle through Uber Rental System", "scenario": "A user wants to rent a vehicle for multiple stops with a custom pickup time. The system allows the user to select the pickup location, multiple destinations, and pick a time for pickup. The rental duration affects the price, and users can select a car model to determine the final cost.", "actors": "User, Uber System", "preconditions": ["The user is logged into their Uber account.", "The user has a clear idea of the pickup location, drop-off locations, and rental duration."], "steps": ["The user selects the 'Rent a Vehicle' option on the Uber app.", "The system prompts the user to select a pickup location.", "The user chooses a pickup location from available places or enters a custom address.", "The system asks for one or more destinations where the user wants to go.", "The user selects the destination(s) (one or multiple).", "The system prompts the user to select a pickup time.", "The user selects a custom pickup time (up to 90 days in advance).", "The system displays options for rental durations, allowing the user to select the time for how long they need the vehicle (e.g., 1 hour, 2 hours, 4 hours).", "The user chooses the rental time.", "The system calculates and shows the price based on the rental time.", "The system displays car options, along with prices based on the selected duration and vehicle type.", "The user selects a car.", "The system confirms the rental booking and provides details for both the pickup time and estimated cost.", "The user receives a confirmation notification with booking details."], "postconditions": "The vehicle is reserved, and the user receives a confirmation with the rental time, pickup time, and estimated fare."}, "testcases": [{"name": "Successful Vehicle Rental with Multiple Stops", "description": "Verify that the user can successfully rent a vehicle with multiple destinations and a custom pickup time.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhaka University", "Shahbagh", "Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "4 hours", "carType": "XL Rentals"}, "expected": {"outcome": "Vehicle rental confirmed", "status": "Price calculated for selected duration and car type"}}, {"name": "Failed Vehicle Rental: Invalid Pickup Time", "description": "Verify that the system displays an error if the user selects an invalid pickup time (outside of the 90-day range).", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "6 months from today"}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Pickup time must be within 90 days from today."}}, {"name": "Failed Vehicle Rental: Missing Pickup Location", "description": "Verify that the system displays an error if the user does not select a pickup location.", "input": {"pickupLocation": "", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "2 hours", "carType": "Go Rentals"}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Pickup location is required."}}, {"name": "Failed Vehicle Rental: No Car Selected", "description": "Verify that the system prevents the user from proceeding if no car is selected.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "2 hours", "carType": ""}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Please select a car to proceed with the booking."}}, {"name": "Successful Rental with Rental Time Price Increment", "description": "Verify that the price is incremented correctly based on the rental time selected.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "4 hours", "carType": "Premiere Rentals"}, "expected": {"outcome": "Price increased", "status": "Price reflects a 4-hour rental period for the selected car"}}]}
{"usecase": {"name": "Ride Payment", "scenario": "A user completes a ride and makes payment via card or mobile wallet.", "actors": "Passenger", "preconditions": "The passenger is logged in to Uber and requests a ride.", "steps": ["Passenger requests a ride and selects a payment method (card or mobile wallet).", "System assigns a driver and provides an estimated fare for the ride.", "Passenger completes the ride and reaches the drop-off location.", "System calculates the final fare based on the ride details (e.g., distance, time).", "Passenger confirms the payment method and initiates payment.", "System processes the payment through the selected method.", "System updates the ride status as completed and sends a payment confirmation to the passenger.", "Passenger receives a receipt via the app or email."]}, "testcases": [{"name": "Ride Payment using Credit Card", "description": "Verify user can pay for a completed ride using a valid credit card.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Credit Card", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123", "cardHolderName": "John Doe"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment successful", "receipt": {"rideId": "abcdef12345", "amountCharged": "250 taka", "paymentMethod": "Credit Card", "transactionId": "txn987654321"}, "status": "Payment processed, receipt sent"}}, {"name": "Ride Payment using Mobile Wallet", "description": "Verify user can pay for a completed ride using a mobile wallet.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Mobile Wallet", "walletDetails": {"walletProvider": "bkash", "email": "user@gmail.com"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment successful", "receipt": {"rideId": "abcdef12345", "amountCharged": "250 taka", "paymentMethod": "Mobile Wallet", "transactionId": "txn987654321"}, "status": "Payment processed, receipt sent"}}, {"name": "Payment Failure due to Expired Credit Card", "description": "Verify system shows an error when a user attempts to pay with an expired credit card.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Credit Card", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "01/23", "cardHolderName": "Abdul Kalam"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment failed", "error": {"message": "Expired card", "code": "CARD_EXPIRED"}, "status": "Ride completed but payment failed, new payment method required"}}]}
{"usecase": {"name": "Rate the Ride", "scenario": "User rates the driver and the ride experience after completion of a trip.", "actors": "Passenger, System", "preconditions": "Ride must be completed, and the user should have access to rating options on the app.", "steps": ["Passenger receives a notification after the ride to rate the driver.", "Passenger navigates to the rating screen in the app.", "Passenger selects a rating from 1 to 5 stars.", "Passenger can optionally add feedback or comments.", "System records the rating and feedback in the driver\u2019s profile."]}, "testcases": [{"name": "Successful rating", "description": "Verify that a passenger can successfully rate the ride after completion.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 5, "feedback": "Great ride!"}, "expected": {"outcome": "Rating submitted successfully", "driverRatingUpdated": true, "feedbackRecorded": true}}, {"name": "Rating without feedback", "description": "Verify that a passenger can submit a rating without additional feedback.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 3}, "expected": {"outcome": "Rating submitted successfully", "driverRatingUpdated": true, "feedbackRecorded": false}}, {"name": "Submit rating after timeout", "description": "Verify that a rating cannot be submitted after the allowed time period.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 4, "timeSinceRideCompletion": "48 hours"}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating period expired", "code": "RATING_TIMEOUT"}}}]}
{"usecase": {"name": "Rate the Passenger", "scenario": "Driver rates the passenger and their behavior after completion of a trip.", "actors": "Driver, System", "preconditions": "The ride must be completed, and the driver should have access to rating options on the app.", "steps": ["Driver receives a prompt or notification to rate the passenger after the ride is completed.", "Driver navigates to the rating screen in the app.", "Driver selects a rating from 1 to 5 stars.", "Driver can optionally add feedback or comments about the passenger's behavior.", "System records the rating and feedback in the passenger\u2019s profile."]}, "testcases": [{"name": "Successful rating", "description": "Verify that a driver can successfully rate the passenger after the trip.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 5, "feedback": "Passenger was polite and prompt."}, "expected": {"outcome": "Rating submitted successfully", "passengerRatingUpdated": true, "feedbackRecorded": true}}, {"name": "Rating without feedback", "description": "Verify that a driver can submit a rating without additional feedback.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 4}, "expected": {"outcome": "Rating submitted successfully", "passengerRatingUpdated": true, "feedbackRecorded": false}}, {"name": "Submit rating after timeout", "description": "Verify that a rating cannot be submitted after the allowed time period has passed.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 3, "timeSinceRideCompletion": "48 hours"}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating period expired", "code": "RATING_TIMEOUT"}}}, {"name": "Invalid rating value", "description": "Verify that an error is displayed if the driver tries to submit a rating outside the valid range (1-5).", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 6}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Invalid rating value", "code": "INVALID_RATING"}}}, {"name": "Rating for ride with disputes", "description": "Verify that the driver cannot submit a rating for a ride currently in dispute.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 2}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating not allowed due to active dispute", "code": "RATING_BLOCKED"}}}]}
{"usecase": {"name": "Cancel a Ride", "scenario": "User cancels a ride before or after a driver is assigned.", "actors": "User", "preconditions": ["User must be logged in", "User must have requested a ride", "Penalty rules must apply based on the cancellation time"], "steps": ["User navigates to their active ride request", "User selects the option to cancel the ride", "System checks if a driver has already been assigned or if the driver is en route", "System applies penalty if applicable", "System updates the ride status to canceled", "System sends a notification to the driver about the cancellation", "System confirms the cancellation to the user"]}, "testcases": [{"name": "Cancel ride before driver is assigned", "description": "Verify that the user can cancel a ride without penalty if no driver has been assigned.", "input": {"rideId": "ride12345", "userId": "1234567890", "driverAssigned": false}, "expected": {"outcome": "Ride canceled successfully", "penalty": "NONE", "status": "Ride canceled"}}, {"name": "Cancel ride after driver is assigned but before pick-up", "description": "Verify that the system applies a penalty if the user cancels the ride after the driver has been assigned but before the driver arrives.", "input": {"rideId": "ride12346", "userId": "1234567890", "driverAssigned": true, "driverEnRoute": true}, "expected": {"outcome": "Ride canceled successfully", "penalty": "10% of Fare", "status": "Ride canceled"}}, {"name": "Cancel ride after driver arrives at pick-up location", "description": "Verify that a higher penalty is applied if the user cancels the ride after the driver has arrived at the pick-up location.", "input": {"rideId": "ride12347", "userId": "1234567890", "driverAssigned": true, "driverAtPickupLocation": true}, "expected": {"outcome": "Ride canceled successfully", "penalty": "30% of Fare", "status": "Ride canceled"}}, {"name": "Cancel ride with invalid ride ID", "description": "Verify that the system handles cases where the user attempts to cancel a non-existent or invalid ride.", "input": {"rideId": "invalidRideId", "userId": "1234567890"}, "expected": {"outcome": "Cancellation failed", "error": "Invalid ride ID"}}, {"name": "Cancel ride while ongoing", "description": "Verify that the system prevents ride cancellation while it is ongoing", "input": {"rideId": "ride12351", "userId": "1234567890", "rideStatus": "ongoing"}, "expected": {"outcome": "Cancellation not allowed", "error": "Ride is ongoing"}}, {"name": "Cancel ride after ride is already completed", "description": "Verify that the system prevents ride cancellation after the ride has been completed.", "input": {"rideId": "ride12348", "userId": "1234567890", "rideStatus": "completed"}, "expected": {"outcome": "Cancellation not allowed", "error": "Ride is already completed."}}, {"name": "Cancel ride due to no driver availability", "description": "Verify that the user can cancel the ride without penalty if no driver is available to accept the ride.", "input": {"rideId": "ride12350", "userId": "1234567890", "driverAssigned": false}, "expected": {"outcome": "Ride canceled successfully", "penalty": "NONE", "status": "No drivers available, ride canceled"}}]}
{"usecase": {"name": "Access Help/Support Option", "scenario": "User seeks assistance through the Help section in the Uber app for ride-related issues, payment concerns, or account management.", "actors": "User", "preconditions": ["User must be logged in to the Uber app"], "steps": ["User navigates to the Help section from the menu", "User selects a help category (e.g., ride issues, payment, account, etc.)", "User chooses the relevant issue within the selected category", "System displays information or prompts user to provide details", "User submits a support request if the issue is not resolved by the information provided", "System sends a confirmation and assigns the issue to Uber support"]}, "testcases": [{"name": "Access Help for Ride Issues", "description": "Verify that the user can access relevant articles related to specific problems", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare discrepancy"}, "expected": {"outcome": "Ride issue support page displayed with relevant FAQs and articles", "status": "Support request initiated"}}, {"name": "Submit a query for unresolved issue", "description": "Verify that the user can submit a support request if the provided help information does not resolve the issue.", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare Discrepancy", "submitquery": true, "query": "During the ride, I noticed a significant discrepancy in the fare charged", "Attachment": "Screenshot.jpg"}, "expected": {"outcome": "Support request submitted successfully", "supportTicketId": "8916", "status": "Pending response"}}, {"name": "Submit a query with empty message or attachment", "description": "Verify that the system handles submissions with empty message fields or missing attachments appropriately.", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare Discrepancy", "submitquery": true, "query": "", "attachment": null}, "expected": {"outcome": "Submission failed", "error": "Message field cannot be empty", "status": "Error displayed to the user"}}, {"name": "Access Help without selecting a category", "description": "Verify that the system prompts the user to select a category if they try to proceed without choosing one.", "input": {"userId": "1234567890", "helpCategory": null}, "expected": {"outcome": "System prompts user to select a help category", "status": "No support request initiated"}}]}
{"usecase": {"name": "User Registration", "scenario": "A new user registers on the platform.", "actors": ["User", "System"], "preconditions": ["User must not already have an account.", "User must provide valid registration information."], "steps": ["User navigates to the registration page.", "User fills in the required details (email, password, etc.).", "System validates the details and creates a new user account."]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can register successfully.", "input": {"email": "user@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Registration successful", "status": "Account created, user redirected to login page."}}, {"name": "Duplicate Email", "description": "Verify that the system prevents registration with an existing email.", "input": {"email": "existinguser@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Registration failed", "status": "Email already in use error message displayed."}}]}
{"usecase": {"name": "User Login", "scenario": "A registered user logs into their account.", "actors": ["User", "System"], "preconditions": ["User must have a registered account.", "User must enter valid login credentials."], "steps": ["User navigates to the login page.", "User enters email and password.", "System validates the credentials and grants access to the account."]}, "testcases": [{"name": "Successful Login", "description": "Verify that a user can log in with valid credentials.", "input": {"email": "user@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Login successful", "status": "User is redirected to the homepage."}}, {"name": "Invalid Login", "description": "Verify that an error message is displayed when the user enters invalid credentials.", "input": {"email": "user@example.com", "password": "WrongPass"}, "expected": {"outcome": "Login failed", "status": "Invalid login credentials error message displayed."}}]}
{"usecase": {"name": "Product Search", "scenario": "A user searches for products on Amazon.", "actors": ["User", "System"], "preconditions": ["User must be on the homepage or product search page."], "steps": ["User enters a search term into the search bar.", "System fetches relevant products and displays them."]}, "testcases": [{"name": "Valid Search Term", "description": "Verify that the system returns products matching a valid search term.", "input": {"searchTerm": "laptop"}, "expected": {"outcome": "Products displayed", "status": "List of relevant products displayed."}}, {"name": "No Results Found", "description": "Verify that the system handles the case where no products match the search term.", "input": {"searchTerm": "xyz123"}, "expected": {"outcome": "No products found", "status": "No products matching search term message displayed."}}]}
{"usecase": {"name": "Add to Cart", "scenario": "A user adds a product to their shopping cart.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "Product must be in stock."], "steps": ["User selects a product.", "User clicks 'Add to Cart'.", "System adds the product to the user's cart."]}, "testcases": [{"name": "Product Successfully Added", "description": "Verify that a product is added to the cart successfully.", "input": {"productID": "P12345"}, "expected": {"outcome": "Product added", "status": "Product added to cart message displayed."}}, {"name": "Out of Stock", "description": "Verify that the system prevents adding out-of-stock products to the cart.", "input": {"productID": "P67890"}, "expected": {"outcome": "Product not added", "status": "Product out of stock message displayed."}}]}
{"usecase": {"name": "Checkout", "scenario": "A user proceeds to checkout with products in their cart.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "User must have items in their cart."], "steps": ["User clicks 'Proceed to Checkout'.", "System presents the shipping and payment options.", "User completes the order."]}, "testcases": [{"name": "Successful Checkout", "description": "Verify that a user can successfully complete a purchase.", "input": {"cartID": "C12345"}, "expected": {"outcome": "Order completed", "status": "Order confirmation page displayed."}}, {"name": "No Items in Cart", "description": "Verify that the system prevents checkout with an empty cart.", "input": {"cartID": "C67890"}, "expected": {"outcome": "Checkout failed", "status": "No items in cart message displayed."}}]}
{"usecase": {"name": "View Order History", "scenario": "A user views their past orders on Amazon.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "User must have placed at least one order."], "steps": ["User navigates to 'Account' and selects 'Order History'.", "System fetches the order history from the database.", "System displays the list of past orders."]}, "testcases": [{"name": "Valid Order History", "description": "Verify that a user can successfully view their past orders.", "input": {"userID": "U12345"}, "expected": {"outcome": "Order history displayed", "status": "List of past orders displayed."}}, {"name": "No Order History", "description": "Verify that the system handles the case where the user has no order history.", "input": {"userID": "U67890"}, "expected": {"outcome": "No order history", "status": "You have no past orders message displayed."}}]}
{"usecase": {"name": "Product Review Submission", "scenario": "A user submits a review for a product they purchased.", "actors": ["User", "System"], "preconditions": ["User must have purchased the product they are reviewing."], "steps": ["User selects a product from their order history.", "User writes and submits a review.", "System posts the review on the product page."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review for a product they purchased.", "input": {"productID": "P12345", "review": "Great product, highly recommended!", "rating": 5}, "expected": {"outcome": "Review submission successful", "status": "Review displayed on the product page."}}, {"name": "Invalid Rating Submission", "description": "Verify that the system handles the case where the user submits a review with an invalid rating.", "input": {"productID": "P12345", "review": "Not good.", "rating": 6}, "expected": {"outcome": "Review submission failed", "status": "Invalid rating error message."}}]}
{"usecase": {"name": "Cancel Order", "scenario": "A user cancels an order they have placed.", "actors": ["User", "System"], "preconditions": ["The order must not be shipped."], "steps": ["User navigates to 'Order History'.", "User selects an order and clicks 'Cancel Order'.", "System processes the cancellation."]}, "testcases": [{"name": "Valid Order Cancellation", "description": "Verify that a user can successfully cancel an order before it is shipped.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Order cancelled", "status": "Cancellation confirmation message displayed."}}, {"name": "Order Already Shipped", "description": "Verify that the system prevents the user from canceling an order that has already been shipped.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Cancellation failed", "status": "Order already shipped message displayed."}}]}
{"usecase": {"name": "Change Shipping Address", "scenario": "A user changes the shipping address for an upcoming order.", "actors": ["User", "System"], "preconditions": ["Order must not be shipped.", "User must provide a valid shipping address."], "steps": ["User navigates to 'Order History'.", "User selects an order and clicks 'Change Shipping Address'.", "User provides a new shipping address.", "System updates the shipping address."]}, "testcases": [{"name": "Shipping Address Successfully Updated", "description": "Verify that the user can change the shipping address before the order is shipped.", "input": {"orderID": "O12345", "newAddress": "123 New St, City, Country"}, "expected": {"outcome": "Shipping address updated", "status": "Confirmation message displayed."}}, {"name": "Order Already Shipped", "description": "Verify that the system prevents changing the shipping address after the order is shipped.", "input": {"orderID": "O67890", "newAddress": "123 New St, City, Country"}, "expected": {"outcome": "Update failed", "status": "Order already shipped message displayed."}}]}
{"usecase": {"name": "Apply Discount Code", "scenario": "A user applies a discount code to their purchase.", "actors": ["User", "System"], "preconditions": ["User must have a valid discount code.", "User must have items in their cart."], "steps": ["User enters a discount code during checkout.", "System validates the code and applies the discount."]}, "testcases": [{"name": "Valid Discount Code", "description": "Verify that the system applies a valid discount code successfully.", "input": {"cartID": "C12345", "discountCode": "DISCOUNT10"}, "expected": {"outcome": "Discount applied", "status": "Discount successfully applied to the cart."}}, {"name": "Expired Discount Code", "description": "Verify that the system handles expired discount codes appropriately.", "input": {"cartID": "C12345", "discountCode": "EXPIRED10"}, "expected": {"outcome": "Discount failed", "status": "Expired discount code error message displayed."}}]}
{"usecase": {"name": "Track Shipment", "scenario": "A user tracks the status of their shipment.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "Order must have been shipped."], "steps": ["User navigates to 'Order History'.", "User selects the shipped order and clicks 'Track Shipment'.", "System displays the current status of the shipment."]}, "testcases": [{"name": "Valid Shipment Tracking", "description": "Verify that the user can track the status of a shipped order.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Shipment tracking successful", "status": "Current shipment status displayed."}}, {"name": "Order Not Shipped Yet", "description": "Verify that the system prevents shipment tracking for orders that are not yet shipped.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Tracking failed", "status": "Order not shipped yet message displayed."}}]}
{"usecase": {"name": "Request Refund", "scenario": "A user requests a refund for an order they have received.", "actors": ["User", "System"], "preconditions": ["User must have received the order.", "Order must be eligible for a refund."], "steps": ["User navigates to 'Order History'.", "User selects the received order and clicks 'Request Refund'.", "System processes the refund request."]}, "testcases": [{"name": "Refund Request Approved", "description": "Verify that the system approves a refund request for an eligible order.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Refund approved", "status": "Refund request approved message displayed."}}, {"name": "Refund Request Denied", "description": "Verify that the system denies a refund request for an ineligible order.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Refund denied", "status": "Refund request denied message displayed."}}]}
{"usecase": {"name": "Search for Listings", "scenario": "A guest searches for available listings based on location, dates, and other filters.", "actors": "Guest", "preconditions": "The guest is on the Airbnb homepage or search page.", "steps": ["Guest enters a location in the search bar.", "Guest selects dates for the stay.", "Guest applies additional filters like number of guests, type of property, and amenities.", "System displays available listings that match the search criteria."]}, "testcases": [{"name": "Valid Search", "description": "Verify that a guest can successfully search for listings with valid location and dates.", "input": {"location": "New York", "checkIn": "2024-10-01", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Listings displayed", "status": "Success"}}, {"name": "No Listings Available", "description": "Verify that the system handles the case where no listings match the search criteria.", "input": {"location": "Atlantis", "checkIn": "2024-12-25", "checkOut": "2024-12-30", "guests": 4}, "expected": {"outcome": "No listings available message displayed", "status": "No Listings"}}, {"name": "Search with Invalid Dates", "description": "Verify that the system displays an error message when the guest selects an invalid date range.", "input": {"location": "Paris", "checkIn": "2024-10-10", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Error message displayed", "status": "Invalid Dates"}}], "author": "2005077"}
{"usecase": {"name": "Booking a Listing", "scenario": "A guest books a listing after selecting the property, dates, and number of guests.", "actors": "Guest", "preconditions": "Guest has selected a listing and dates are available for booking.", "steps": ["Guest selects a listing and enters booking details.", "System calculates the total price including service fees and taxes.", "Guest confirms the booking.", "System sends a confirmation to the guest and host."]}, "testcases": [{"name": "Valid Booking", "description": "Verify that a guest can successfully book a listing with valid information.", "input": {"listingID": "12345", "checkIn": "2024-10-01", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods during booking.", "input": {"listingID": "12345", "checkIn": "2024-11-10", "checkOut": "2024-11-15", "guests": 3, "paymentMethod": "ExpiredCard"}, "expected": {"outcome": "Booking failed", "status": "Payment Declined"}}, {"name": "Booking Unavailable Dates", "description": "Verify that the system restricts booking when the selected dates are unavailable.", "input": {"listingID": "12345", "checkIn": "2024-12-24", "checkOut": "2024-12-26", "guests": 2}, "expected": {"outcome": "Booking failed", "status": "Dates Unavailable"}}], "author": "2005070"}
{"usecase": {"name": "Cancel a Booking", "scenario": "A guest cancels a confirmed booking before the check-in date.", "actors": "Guest", "preconditions": "Guest has a confirmed booking.", "steps": ["Guest navigates to the booking details page.", "Guest selects the option to cancel the booking.", "System confirms the cancellation and updates the booking status."]}, "testcases": [{"name": "Valid Cancellation", "description": "Verify that the guest can successfully cancel a confirmed booking.", "input": {"bookingID": "12345"}, "expected": {"outcome": "Booking cancelled", "status": "Cancelled"}}, {"name": "Late Cancellation", "description": "Verify that the system applies the correct penalty for a late cancellation.", "input": {"bookingID": "12345", "cancellationTime": "1 day before check-in"}, "expected": {"outcome": "Booking cancelled with penalty", "status": "Late Cancellation Fee Applied"}}], "author": "2005083"}
{"usecase": {"name": "Host Listing Creation", "scenario": "A host creates a new listing by providing property details, pricing, and availability.", "actors": "Host", "preconditions": "Host is logged in and has completed the account verification process.", "steps": ["Host navigates to the create listing page.", "Host enters property details (e.g., location, size, amenities).", "Host sets pricing and availability.", "Host submits the listing for review."]}, "testcases": [{"name": "Valid Listing Creation", "description": "Verify that a host can successfully create a valid listing with complete details.", "input": {"location": "New York", "size": "2-bedroom apartment", "amenities": ["WiFi", "Kitchen", "Air Conditioning"], "pricePerNight": 150}, "expected": {"outcome": "Listing created successfully", "status": "Pending Review"}}, {"name": "Listing Without Price", "description": "Verify that the system prevents a host from submitting a listing without setting a price.", "input": {"location": "Los Angeles", "size": "Studio", "amenities": ["WiFi", "Heating"], "pricePerNight": null}, "expected": {"outcome": "Listing creation failed", "status": "Price Required"}}, {"name": "Invalid Location Format", "description": "Verify that the system handles cases where the host enters an invalid location format.", "input": {"location": "", "size": "2-bedroom apartment", "amenities": ["WiFi", "Kitchen", "Air Conditioning"], "pricePerNight": 150}, "expected": {"outcome": "Listing creation failed", "status": "Invalid Location"}}], "author": "2005080"}
{"usecase": {"name": "Host Reviews a Guest", "scenario": "A host leaves a review for a guest after their stay is complete.", "actors": "Host", "preconditions": "Guest has completed their stay.", "steps": ["Host navigates to the review section.", "Host enters a review and rating.", "Host submits the review.", "System publishes the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that the host can successfully submit a review for the guest.", "input": {"guestID": "G123", "rating": 4, "comments": "Respectful and clean guest."}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Review Without Rating", "description": "Verify that the system prevents the host from submitting a review without a rating.", "input": {"guestID": "G123", "rating": null, "comments": "Good guest."}, "expected": {"outcome": "Review submission failed", "status": "Rating Required"}}], "author": "2005082"}
{"usecase": {"name": "Guest Reviews a Host", "scenario": "A guest leaves a review for a host after their stay is complete.", "actors": "Guest", "preconditions": "Guest has completed their stay.", "steps": ["Guest navigates to the review section.", "Guest enters a review and rating.", "Guest submits the review.", "System publishes the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that the guest can successfully submit a review for the host.", "input": {"hostID": "H123", "rating": 5, "comments": "Great host, wonderful stay!"}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Review with Invalid Rating", "description": "Verify that the system handles cases where the guest enters an invalid rating (e.g., more than 5 stars).", "input": {"hostID": "H123", "rating": 6, "comments": "Amazing!"}, "expected": {"outcome": "Review submission failed", "status": "Invalid Rating"}}], "author": "2005082"}
{"usecase": {"name": "Guest Messaging Host", "scenario": "A guest sends a message to the host to inquire about a listing.", "actors": "Guest", "preconditions": "Guest has found a listing they are interested in.", "steps": ["Guest clicks on the message host button.", "Guest enters their message.", "Guest sends the message to the host.", "System delivers the message to the host."]}, "testcases": [{"name": "Valid Message", "description": "Verify that a guest can successfully send a message to the host.", "input": {"message": "Hi, is your listing available for these dates?"}, "expected": {"outcome": "Message delivered successfully", "status": "Sent"}}, {"name": "Empty Message", "description": "Verify that the system prevents the guest from sending an empty message.", "input": {"message": ""}, "expected": {"outcome": "Message not sent", "status": "Message Required"}}, {"name": "Excessively Long Message", "description": "Verify that the system handles messages that exceed the maximum allowed length.", "input": {"message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."}, "expected": {"outcome": "Message not sent", "status": "Message Too Long"}}], "author": "2005083"}
{"usecase": {"name": "Host Blocking Dates", "scenario": "A host blocks off dates on their listing to prevent bookings.", "actors": "Host", "preconditions": "Host has an active listing.", "steps": ["Host navigates to the calendar section of their listing.", "Host selects the dates to block.", "Host saves the changes.", "System updates the calendar to reflect the blocked dates."]}, "testcases": [{"name": "Valid Blocked Dates", "description": "Verify that a host can successfully block dates on their calendar.", "input": {"blockedDates": ["2024-10-10", "2024-10-12"]}, "expected": {"outcome": "Dates blocked successfully", "status": "Blocked"}}, {"name": "Overlapping Blocked Dates", "description": "Verify that the system handles attempts to block dates that overlap with existing bookings.", "input": {"blockedDates": ["2024-10-15", "2024-10-20"]}, "expected": {"outcome": "Blocking failed due to overlapping bookings", "status": "Overlap Error"}}], "author": "2005080"}
{"usecase": {"name": "View Booking History", "scenario": "A guest views their booking history.", "actors": "Guest", "preconditions": "Guest has past bookings.", "steps": ["Guest navigates to the booking history page.", "System displays a list of all past bookings."]}, "testcases": [{"name": "Valid History Retrieval", "description": "Verify that a guest can view their past bookings.", "input": {"guestID": "G123"}, "expected": {"outcome": "Booking history displayed", "status": "Success"}}, {"name": "No Past Bookings", "description": "Verify that the system handles guests with no past bookings appropriately.", "input": {"guestID": "G999"}, "expected": {"outcome": "No bookings found message displayed", "status": "No Bookings"}}], "author": "2005063"}
{"usecase": {"name": "Guest Payment Processing", "scenario": "A guest books a property on Airbnb, selects payment options, and completes the payment process. The system validates the payment details, processes the payment, and updates the booking status to confirmed or fails with an error message.", "actors": "Guest, Payment Gateway, Airbnb System", "preconditions": ["Guest has selected a property to book.", "Guest is on the payment page with booking details."], "steps": ["Guest selects a payment method (e.g., credit card, PayPal).", "Guest enters valid payment details.", "System validates the payment details.", "System sends payment details to the payment gateway.", "Payment Gateway processes the payment and returns the response.", "If successful, booking status is updated to 'confirmed' and a confirmation email is sent to the guest.", "If failed, the booking remains 'pending' and an error message is displayed to the guest."]}, "testcases": [{"name": "Successful Payment Processing", "description": "Verify that a guest can successfully make a payment and confirm their booking using valid payment details.", "input": {"paymentMethod": "CreditCard", "cardNumber": "4111 1111 1111 1111", "expiryDate": "12/25", "cvv": "123", "bookingID": "B12345"}, "expected": {"outcome": "Payment processed successfully, booking confirmed", "status": "Success"}}, {"name": "Failed Payment Due to Insufficient Funds", "description": "Verify that the system correctly handles a failed payment when the guest\u2019s card has insufficient funds.", "input": {"paymentMethod": "CreditCard", "cardNumber": "4000 0000 0000 9995", "expiryDate": "12/25", "cvv": "123", "bookingID": "B67890"}, "expected": {"outcome": "Payment failed, error message displayed, booking remains pending", "status": "Failed"}}], "author": "2005063"}
{"usecase": {"name": "Manage Wishlist", "scenario": "User adds listings to their wishlist to save for future reference. They can remove or view listings later.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User browses listings", "User adds a listing to the wishlist", "User removes a listing from the wishlist", "User views wishlist"]}, "testcases": [{"name": "Add to Wishlist", "description": "Verify that the user can successfully add a listing to their wishlist.", "input": {"listingID": "L12345"}, "expected": {"outcome": "Listing added to wishlist", "status": "Success"}}, {"name": "Remove from Wishlist", "description": "Verify that the user can successfully remove a listing from their wishlist.", "input": {"listingID": "L12345"}, "expected": {"outcome": "Listing removed from wishlist", "status": "Success"}}, {"name": "View Wishlist", "description": "Verify that the user can view their saved listings in the wishlist.", "input": {}, "expected": {"outcome": "Wishlist displayed", "listings": [{"listingID": "L12345", "name": "Oceanfront Villa"}, {"listingID": "L67890", "name": "Mountain Cabin"}]}}], "author": "2005070"}
{"usecase": {"name": "Redeem Airbnb Gift Card", "scenario": "A guest redeems an Airbnb gift card to add credit to their account, which can be used for future bookings.", "actors": "Guest, Airbnb System", "preconditions": ["Guest has an Airbnb gift card.", "Guest is logged into their Airbnb account."], "steps": ["Guest navigates to the gift card redemption page.", "Guest enters the gift card code.", "System validates the gift card code.", "If valid, system adds the gift card balance to the guest's account.", "If invalid, system displays an error message."]}, "testcases": [{"name": "Successful Gift Card Redemption", "description": "Verify that a guest can successfully redeem a valid Airbnb gift card and the balance is added to their account.", "input": {"giftCardCode": "ABC123456789", "accountID": "G12345"}, "expected": {"outcome": "Gift card redeemed successfully, balance added to account", "status": "Success"}}, {"name": "Invalid Gift Card Code", "description": "Verify that the system handles an invalid gift card code correctly by displaying an error message.", "input": {"giftCardCode": "INVALID123", "accountID": "G67890"}, "expected": {"outcome": "Gift card redemption failed, error message displayed", "status": "Failed"}}], "author": "2005077"}
{"usecase": {"name": "Buy Airbnb Gift Card", "scenario": "A guest purchases an Airbnb gift card to send to themselves or another recipient.", "actors": "Guest, Payment Gateway, Airbnb System", "preconditions": ["Guest is logged into their Airbnb account.", "Guest has a valid payment method."], "steps": ["Guest navigates to the gift card purchase page.", "Guest selects a gift card amount or customizes the amount.", "Guest provides recipient information (name, email, message) or chooses to send the card to themselves.", "Guest reviews the order and proceeds to payment.", "System processes the payment via the payment gateway.", "If successful, the system sends the gift card to the recipient via email.", "If payment fails, an error message is displayed, and the order is not completed."]}, "testcases": [{"name": "Successful Gift Card Purchase", "description": "Verify that a guest can successfully purchase a gift card and the recipient receives the card via email.", "input": {"giftCardAmount": 100, "recipientEmail": "recipient@example.com", "paymentMethod": "CreditCard", "cardNumber": "4111 1111 1111 1111", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Gift card purchased successfully, recipient receives email", "status": "Success"}}, {"name": "Failed Gift Card Purchase Due to Invalid Payment", "description": "Verify that the system correctly handles a failed gift card purchase due to an invalid payment method.", "input": {"giftCardAmount": 50, "recipientEmail": "recipient@example.com", "paymentMethod": "CreditCard", "cardNumber": "4000 0000 0000 9995", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Payment failed, error message displayed, gift card not sent", "status": "Failed"}}], "author": "2005077"}
{"usecase": {"name": "Admission Test Quiz Attempt", "author": "2005061", "scenario": "A registered user attempts a quiz of any unit.", "actors": "Registered User", "preconditions": "User is logged in and the quiz is available.", "steps": ["User chooses unit and a set", "User navigates to the quiz page", "User answers the questions", "User submits the quiz"]}, "testcases": [{"name": "Quiz Submission with all answers", "description": "Verify that a user can successfully submit a quiz with all answers.", "input": {"answers": {"Q1": "A", "Q2": "B", "Q3": "C", "Q4": "B", "Q5": "C"}}, "expected": {"outcome": "Quiz submitted successfully and score shown", "status": "Submitted"}}, {"name": "Quiz Submission with Missing Answers", "description": "Verify that the system handles quiz submissions with missing answers.", "input": {"answers": {"Q1": "A", "Q2": "", "Q3": "C", "Q4": "B", "Q5": ""}}, "expected": {"outcome": "Quiz submitted successfully and score shown", "status": "Submitted"}}, {"name": "Multiple Answer Selection for a Single Question", "description": "Verify that when a user selects multiple answers for a question, the system automatically unselects the previously selected answer and retains only the last selected answer.", "input": {"answers": {"Q1": ["B", "C"]}}, "expected": {"outcome": "The system unselects the previously selected answers (B) and retains only the last selected answer (C) for question Q1.", "status": "Submitted", "finalAnswer": {"Q1": "C"}}}, {"name": "Quiz Attempt without Login", "description": "Verify that the system prompts for login if a user tries to attempt a quiz without being logged in.", "input": {"action": "Click Admission Test Quiz Attempt button"}, "expected": {"outcome": "Quiz access denied", "status": "Login required"}}, {"name": "Quiz Attempt when user is logged in but not registered for quiz", "description": "Verify that the system prompts for quiz registration if a user tries to attempt a quiz when logged in but not registered.", "input": {"action": "Click Admission Test Quiz Attempt button"}, "expected": {"outcome": "Quiz access denied", "status": "Registration required"}}]}
{"usecase": {"name": "Course Enrollment", "author": "2005061", "scenario": "A registered user enrolls in a course on the 10 Minute School's website.", "actors": "Registered User", "preconditions": "User is logged in and the course is available for enrollment.", "steps": ["User selects course", "User navigates to the course page", "User clicks on the 'Buy course' button", "User confirms enrollment"]}, "testcases": [{"name": "Successful Enrollment to free course", "description": "Verify that a user can successfully enroll in a free course.", "input": {"action": "Click 'Buy course' button"}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Successful Enrollment to paid course", "description": "Verify that a user with sufficient balance in his/her account can successfully enroll in a paid course.", "input": {"promo code": "example promo code", "payment method": "bkash", "bkash number": "01711111111", "verification code": "123456", "pin": "12345"}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Attempt to enroll to paid course with wrong payment credentials(wrong pin/wrong verification code) or insufficient balance", "description": "Verify that a user with wrong payment credentials or insufficient balance cannot enroll in a paid course.", "input": {"promo code": "example promo code", "payment method": "bkash", "bkash number": "01711111111", "verification code": "123456", "pin": "12345"}, "expected": {"outcome": "Enrollment unsuccessful", "status": "Payment required"}}, {"name": "Enrollment Without Login", "description": "Verify that the system prompts for login if a user tries to enroll without being logged in.", "input": {"action": "Click 'Buy course' button"}, "expected": {"outcome": "Enrollment failed", "status": "Login required"}}]}
{"usecase": {"name": "Beta Tester Registration", "author": "2005069", "scenario": "User registers to become a beta tester by providing all required personal information and agreeing to be contacted for feedback.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User navigates to the 'Beta Tester Registration' page.", "User fills in the 'Full Name' field.", "User enters their 'Mobile Number'.", "User provides their 'Email Address'.", "User enters their 'Profession'.", "User selects their 'Segment' from the dropdown.", "User selects their 'District' from the dropdown.", "User provides their 'Thana'.", "User fills in their 'Address'.", "User shares ideas in the provided field.", "User shares feedback in the provided field.", "User selects their preference for being contacted.", "User clicks on the 'Submit' button.", "System validates all input fields and submits the registration."]}, "testcases": [{"name": "Successful Registration", "description": "Verify that the user can successfully register as a beta tester with valid information in all required fields.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik@example.com", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Missing Required Fields", "description": "Verify that the system does not allow registration when any required fields are left empty.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik@example.com", "profession": "", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Invalid Email Format", "description": "Verify that the system does not allow registration with an invalid email format.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "invalid-email", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Duplicate Mobile Number", "description": "Verify that the system does not allow registration with a mobile number already registered as a beta tester.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik2@example.com", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Provide in-app notifications.", "shareFeedback": "Add offline download support.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}
{"usecase": {"name": "Change Password", "author": "2005069", "scenario": "User changes their password by entering the old password, new password, and confirming the new password.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User navigates to the 'Change Password' page.", "User enters the current password in the 'Old Password' field.", "User enters the new password in the 'New Password' field.", "User re-enters the new password in the 'Confirm Password' field.", "User clicks on the 'Submit' button.", "System verifies the old password, checks if the new passwords match, and updates the password if valid."]}, "testcases": [{"name": "Successful Password Change", "description": "Verify that the user can successfully change their password by entering valid information.", "input": {"oldPassword": "oldPassword123", "newPassword": "newPassword456", "confirmPassword": "newPassword456"}, "expected": {"outcome": "Password changed successfully", "status": "Approved"}}, {"name": "Incorrect Old Password", "description": "Verify that the system does not allow the user to change the password when the old password is incorrect.", "input": {"oldPassword": "wrongOldPassword", "newPassword": "newPassword456", "confirmPassword": "newPassword456"}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}, {"name": "New Passwords Do Not Match", "description": "Verify that the system handles the case where the new password and the confirmation password do not match.", "input": {"oldPassword": "oldPassword123", "newPassword": "newPassword456", "confirmPassword": "newPassword789"}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}, {"name": "Empty Fields", "description": "Verify that the system handles the case where one or more fields are left empty.", "input": {"oldPassword": "", "newPassword": "newPassword456", "confirmPassword": ""}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}]}
{"usecase": {"name": "Book Purchase Process", "author": "2005072", "actors": "User, System", "scenario": "User selects books, adds them to the cart, provides personal details and payment method, and completes the purchase.", "preconditions": "User is on the bookstore page.", "steps": ["System displays a list of available books.", "User selects one or more books and adds them to the cart.", "User clicks 'Proceed to Checkout' and fills out their name, phone number, and delivery address.", "User selects a payment method", "User clicks 'Place Order' to complete the purchase."]}, "testcases": [{"name": "Valid Book Selection and Purchase", "description": "Verify that the user can successfully select books, add them to the cart, and complete the purchase.", "input": {"selectedBooks": ["Book A", "Book B"], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Bkash"}, "expected": {"outcome": "Purchase successful", "status": "Order confirmed"}}, {"name": "Incomplete Personal Information", "description": "Verify that the system prevents the user from placing an order with incomplete personal details.", "input": {"selectedBooks": ["Book A"], "userName": "", "phoneNumber": "0123456789", "paymentMethod": "Bkash"}, "expected": {"outcome": "Purchase failed", "status": "Error: Missing user name"}}, {"name": "Empty Cart", "description": "Verify that the system prevents the user from proceeding to checkout with an empty cart.", "input": {"selectedBooks": [], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Cash on Delivery"}, "expected": {"outcome": "Checkout failed", "status": "Error: Cart is empty"}}, {"name": "Duplicate Order Prevention", "description": "Verify that the system prevents the user from placing the same order multiple times.", "input": {"selectedBooks": ["Book A", "Book B"], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Bkash", "previousOrderExists": true}, "expected": {"outcome": "Purchase failed", "status": "Error: Duplicate order"}}]}
{"usecase": {"name": "Online Batch Admission Process", "author": "2005072", "actors": "User, System", "scenario": "User selects an HSC batch, chooses an available online course, fills in personal details, receives OTP for verification, provides city and address, selects payment method, and completes batch enrollment.", "preconditions": "User is on the online batch admission page.", "steps": ["User selects 'HSC Batch' from the batch options.", "System displays a list of available online courses.", "User selects one or more courses from the list.", "User fills in their name and phone number.", "System sends an OTP to the provided phone number for verification.", "User enters the OTP.", "User provides city and address details.", "User selects a payment method.", "User clicks 'Enroll' to complete the batch enrollment."]}, "testcases": [{"name": "Valid Batch Selection and Enrollment", "description": "Verify that the user can successfully select an HSC batch, choose an online course, and complete the enrollment after OTP verification.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment successful", "status": "Batch enrollment confirmed"}}, {"name": "OTP Verification Failed", "description": "Verify that the system prevents the user from proceeding if an incorrect OTP is provided.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "wrongOTP", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment failed", "status": "Error: Incorrect OTP"}}, {"name": "Incomplete Personal Information", "description": "Verify that the system prevents the user from submitting incomplete personal details.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics"], "userName": "", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment failed", "status": "Error: Missing user name"}}, {"name": "Duplicate Batch Enrollment", "description": "Verify that the system prevents the user from enrolling in the same batch multiple times.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash", "previousEnrollmentExists": true}, "expected": {"outcome": "Enrollment failed", "status": "Error: Already enrolled in this batch"}}]}
{"usecase": {"name": "Enroll in Free Online Demo Class", "author": "2005076", "scenario": "A student or guardian enrolls in a free online demo class, selects the desired time slot, and provides the necessary login credentials.", "actors": "Student, Guardian", "preconditions": "User must be a student or guardian and must have access to valid login credentials.", "steps": ["User selects their role as either a 'Student' or 'Guardian'.", "User selects their district from a drop-down menu or search bar.", "User selects the class/Batch (HSC 26 Batch or HSC 25 Batch).", "User selects an available time slot for the demo class (e.g., 29 Sept 8:30 PM, English: Completing Sentence).", "User provides their mobile number or email address for verification.", "User enters their password for authentication.", "Upon successful login, the user is enrolled in the demo class and can access previous recorded classes."]}, "testcases": [{"name": "Valid Role, District, and Class Selection", "description": "Verify that the user can successfully select their role, district, and class batch and proceed to the next page.", "input": {"role": "Student", "district": "Dhaka", "classBatch": "HSC 26 Batch"}, "expected": {"outcome": "Proceed to next page for time slot selection", "status": "Success"}}, {"name": "Invalid Mobile Number Format", "description": "Verify that the system handles the case where the user enters an invalid mobile number format and prevents proceeding.", "input": {"mobileNumber": "12345"}, "expected": {"outcome": "Unable to proceed, validation error for invalid mobile number format", "status": "Submission Failed"}}, {"name": "Valid Mobile Number and Time Slot Selection", "description": "Verify that the user can select a valid time slot for the demo class and provide a valid mobile number.", "input": {"mobileNumber": "017XXXXXXXX", "timeSlot": "29 Sept 8:30 PM, English: Completing Sentence"}, "expected": {"outcome": "Proceed to password entry page", "status": "Success"}}, {"name": "Invalid Password", "description": "Verify that the system shows an error when the user enters an incorrect password.", "input": {"password": "wrongpassword"}, "expected": {"outcome": "Failed, wrong password", "status": "Error Message Displayed"}}, {"name": "Successful Enrollment", "description": "Verify that the user is successfully enrolled in the demo class after providing the correct credentials.", "input": {"mobileNumber": "017XXXXXXXX", "password": "correctpassword"}, "expected": {"outcome": "Successfully enrolled in demo class", "status": "Success"}}, {"name": "Access Recorded Class After Enrollment", "description": "Verify that the user can access the option to view the previous recorded class after successful enrollment.", "input": {"mobileNumber": "017XXXXXXXX", "password": "correctpassword"}, "expected": {"outcome": "Option to view recorded classes appears", "status": "Success"}}]}
{"usecase": {"name": "Free Offline Course Booking", "author": "2005076", "scenario": "User selects a free Course Programme with suitable branch location, fills in their personal details, and completes the booking process.", "actors": "Student, System", "preconditions": "Student is on the free offline class booking page", "steps": ["Student selects 'IELTS Programme' from the two course options: 'IELTS Programme' and 'Spoken English'.", "Student selects a class location with available slots.", "Student fills out their name, mobile number, district, education level, and expected IELTS score.", "Student selects an expected IELTS class date.", "Student submits the booking form."]}, "testcases": [{"name": "Valid Course Selection", "description": "Verify that the user can successfully select the 'IELTS Programme' and a valid class location.", "input": {"selectedProgramme": "IELTS Programme", "selectedLocation": "Uttara, Sector 3, Dhaka"}, "expected": {"outcome": "Programme and location selection successful", "status": "Next step allowed"}}, {"name": "Valid Information Submission", "description": "Verify that the user can submit all valid personal details and complete the booking.", "input": {"studentName": "Kausar Parvej", "mobileNumber": "0123456789", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "DateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Booking form submission successful", "status": "Booking confirmed"}}, {"name": "Incomplete Form Submission", "description": "Verify that the system prevents the user from submitting the form with incomplete details.", "input": {"studentName": "", "mobileNumber": "0123456789", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "examDateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Form submission failed", "status": "Error: Missing student name"}}, {"name": "Invalid Mobile Number Format", "description": "Verify that the system handles invalid mobile number formats.", "input": {"studentName": "Kausar Parvej", "mobileNumber": "invalidNumber", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "examDateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Form submission failed", "status": "Error: Invalid mobile number format"}}, {"name": "Invalid User Account", "description": "Verify that the system handles the case where an unregistered user tries to book a free live class.", "input": {"selectedProgramme": "Spoken English", "selectedLocation": "Uttara, Sector 3, Dhaka", "userAccount": "InvalidUser"}, "expected": {"outcome": "Booking failed", "status": "Unauthorized"}}, {"name": "Duplicate Class Booking", "description": "Verify that the system prevents a user from booking the same live class multiple times.", "input": {"selectedProgramme": "IELTS Programme", "selectedLocation": "Uttara, Sector 3, Dhaka", "previousBookingExists": true}, "expected": {"outcome": "Booking failed", "status": "Already Booked"}}]}
{"usecase": {"name": "User Login", "author": "2005079", "scenario": "A user logs into their account on the 10 Minute School website or registers if they don't have an account.", "actors": "User", "preconditions": "User has access to the internet and a valid email address or mobile number.", "steps": ["User navigates to the login/registration page", "User enters required details (e.g., email, password, or mobile number, OTP if registering)", "User submits the login/registration form"]}, "testcases": [{"name": "Valid Login with email", "description": "Verify that a user can successfully log in with a valid email and password.", "input": {"email": "user@example.com", "password": "ValidPassword123"}, "expected": {"outcome": "Login successful", "status": "User logged in"}}, {"name": "Valid Login with mobile number", "description": "Verify that a user can successfully log in with a valid mobile number and password.", "input": {"mobile number": "+8801234567890", "password": "ValidPassword123"}, "expected": {"outcome": "Login successful", "status": "User logged in"}}, {"name": "Login with incorrect password (email)", "description": "Verify that the system denies access when a user enters an incorrect password during login with an email.", "input": {"email": "user@example.com", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "Login with incorrect password (mobile number)", "description": "Verify that the system denies access when a user enters an incorrect password during login with a mobile number.", "input": {"mobile number": "+8801234567890", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "New Registration with email", "description": "Verify that a user can register a new account with a valid email and OTP.", "input": {"email": "newuser@example.com", "OTP": "1234", "password": "Password123"}, "expected": {"outcome": "Registration successful", "status": "New account created"}}, {"name": "New Registration with mobile number", "description": "Verify that a user can register a new account with a valid mobile number and OTP.", "input": {"mobile number": "+8801234567890", "OTP": "1234", "password": "Password123"}, "expected": {"outcome": "Registration successful", "status": "New account created"}}, {"name": "Registration with incorrect OTP (email)", "description": "Verify that the system denies registration when a user enters an incorrect OTP during email registration.", "input": {"email": "newuser@example.com", "OTP": "9999", "password": "Password123"}, "expected": {"outcome": "Registration failed", "status": "Incorrect OTP"}}, {"name": "Registration with incorrect OTP (mobile number)", "description": "Verify that the system denies registration when a user enters an incorrect OTP during mobile number registration.", "input": {"mobile number": "+8801234567890", "OTP": "9999", "password": "Password123"}, "expected": {"outcome": "Registration failed", "status": "Incorrect OTP"}}]}
{"usecase": {"name": "Search Courses", "author": "2005079", "scenario": "A user searches for courses using keywords and filters.", "actors": "User", "preconditions": "User is on the search page.", "steps": ["User enters a keyword in the search bar", "User applies filters (e.g., class, course type, price)", "User submits the search", "System displays search results"]}, "testcases": [{"name": "Successful Search", "description": "Verify that the system returns relevant courses when a valid keyword is entered.", "input": {"keyword": "Python"}, "expected": {"outcome": "Search results displayed", "status": "Relevant courses shown"}}, {"name": "Search with No Results", "description": "Verify that the system handles searches that return no results.", "input": {"keyword": "NonExistentCourse"}, "expected": {"outcome": "Search results displayed", "status": "No courses found"}}, {"name": "Search with Class Filter", "description": "Verify that the system returns courses relevant to a specific class filter.", "input": {"keyword": "Math", "filters": {"class": "Class 11-12"}}, "expected": {"outcome": "Search results displayed", "status": "Relevant courses for Class 11-12 shown"}}, {"name": "Search with Course Type Filter", "description": "Verify that the system returns courses filtered by course type (e.g., free or premium).", "input": {"keyword": "Physics", "filters": {"courseType": "Live class"}}, "expected": {"outcome": "Search results displayed", "status": "Live classes for Physics shown"}}, {"name": "Search with Price Filter", "description": "Verify that the system returns courses within the specified price range.", "input": {"keyword": "Web Development", "filters": {"price": "Free"}}, "expected": {"outcome": "Search results displayed", "status": "Free courses on web development shown"}}, {"name": "Search with Multiple Filters", "description": "Verify that the system returns courses when multiple filters (e.g., class and course type) are applied.", "input": {"keyword": "Biology", "filters": {"class": "Admission", "courseType": "Recorded class", "price": "Paid"}}, "expected": {"outcome": "Search results displayed", "status": "Relevant paid courses with recorded class for admission category shown"}}, {"name": "Invalid Filter Combination", "description": "Verify that the system handles cases where no courses are found with the selected filters.", "input": {"keyword": "SSC", "filters": {"class": "Admission", "price": "Free"}}, "expected": {"outcome": "Search results displayed", "status": "No courses found with the selected filters"}}]}
{"usecase": {"name": "Free Session Booking", "author": "2005089", "scenario": "A user schedules a session with a student advisor. There are two types of sessions available: one for students in grades 6-12 and admission seekers, and another for individuals interested in skill development.", "actors": "User", "preconditions": "User is on the 'Book a free session page' of either types.", "steps": ["User either selects the class he/she is in or selects the 'Skill Development' option.", "User writes his/her full name.", "User enters his/her valid contact no.", "User chooses the time when a student advisor will call him."]}, "testcases": [{"name": "Successful booking for a student.", "description": "A student of grade 6-12 or an admission candidate successfully books a session with a student advisor.", "input": {"course": "Class 10", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "The booking was successful. The advisor will call you.", "status": "Booked"}}, {"name": "Successful booking for Skill Development", "description": "A user successfully books a session for skill development.", "input": {"course": "Freelancing", "name": "John Doe", "contact": "01711111111", "bookingTime": "Noon"}, "expected": {"outcome": "The booking was successful. The advisor will call you.", "status": "Booked"}}, {"name": "Invalid Contact No.", "description": "User enters an invalid contact number.", "input": {"course": "Class 9", "name": "John Doe", "contact": "017456789", "bookingTime": "Morning"}, "expected": {"outcome": "Enter a valid contact number.", "status": "Rejected"}}, {"name": "Empty Name Field", "description": "User leaves the name field empty.", "input": {"course": "Design and Creatives", "name": "", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "Empty name field.", "status": "Rejected"}}, {"name": "Duplicate Booking Attempt", "description": "User attempts to book the same session twice with identical details.", "input": {"course": "Class 11", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "A duplicate session booking.", "status": "Duplicate booking detected"}}, {"name": "No time selected", "description": "User doesn't choose a time for the session.", "input": {"course": "Admission Candidate", "name": "John Doe", "contact": "01711111111", "bookingTime": ""}, "expected": {"outcome": "Select a time before submitting the form.", "status": "Rejected"}}, {"name": "Empty Course Field", "description": "User leaves the class field empty.", "input": {"course": "", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "Select a course before submitting.", "status": "Rejected"}}]}
{"usecase": {"name": "Joining as a teacher", "author": "2005089", "scenario": "A user fills out the form to join as a teacher.", "actors": "User", "preconditions": "User is on the 'Join as a teacher' page.", "steps": ["User writes his/her full name.", "User inputs his/her email address.", "User enters his/her contact no.", "User selects his/her current location between Inside Dhaka and Outside Dhaka.", "User writes his/her current profession.", "User fills in his/her university name.", "User writes his/her department name.", "User specifies his/her current education year.", "User inputs his/her Facebook ID Link.", "User selects two subjects he/she is interested in teaching.", "User chooses the segment he/she is most comfortable teaching. The segments are: Class 6-10, HSC and University Admission and both.", "User can provide link to a LIVE or recorded class he/she has taken.", "User specifies if he/she has any teaching experience.", "User writes the years of experience he/she has.", "User can elaborate on his/her teaching experience along with other platform experience if any.", "User can summarize why he/she wants to teach there.", "User can upload his/her CV."]}, "testcases": [{"name": "Successful form submission", "description": "User successfully submits the form.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "North South University", "department": "Computer Science and Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "I have taught students of class 9 and 10 in Udvash.", "summary": "I want to teach because I love teaching.", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "The form was successfully submitted. The user will receive a confirmation email.", "status": "Submitted"}}, {"name": "Empty Name Field", "description": "User leaves the name field empty.", "input": {"name": "", "email": "johndoe@gmail.com", "contact": "1231233231", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "North South University", "department": "Civil Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "I have taught students of class 9 and 10 in Udvash.", "summary": "I want to teach because I love teaching.", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Fill in the name field.", "status": "Rejected"}}, {"name": "Invalid email address entered", "description": "User enters an invalid email address.", "input": {"name": "John Doe", "email": "johndoegmail.com", "contact": "018923130121", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "English", "educationYear": "4th year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["English", "HS"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Invalid email format.", "status": "Rejected"}}, {"name": "Not uploading CV properly", "description": "User uploads a file that is not a PDF or uploads a file that is too large.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "BRAC University", "department": "Computer Science and Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Both", "classLink": "", "experience": "Yes", "yearsOfExperience": "4", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.xlsx"}, "expected": {"outcome": "Invalid CV format.", "status": "Rejected"}}, {"name": "Not specifying University or Department or Education Year", "description": "User leaves the University and Department fields empty.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "", "department": "", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Fill in the required University or Department fields.", "status": "Rejected"}}, {"name": "Invalid Facebook ID Link", "description": "User enters an invalid or broken Facebook ID link.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "Physics", "educationYear": "3rd year", "facebookIDLink": "https//fb//doe", "subjects": ["Physics", "Mathematics"], "segment": "HSC", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Invalid Facebook ID link.", "status": "Rejected"}}, {"name": "Invalid options selection", "description": "User selects an invalid option in the form.", "input": {"name": "John Doe", "email": "johndoegmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "Physics", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Physics", "Mathematics"], "segment": "HSC", "classLink": "", "experience": "Choose", "yearsOfExperience": "Choose", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Select the options properly.", "status": "Rejected"}}]}
{"usecase": {"name": "Create a New Task", "scenario": "A user creates a new task in their Todoist account.", "actors": "User", "preconditions": "User is logged into their Todoist account.", "steps": ["User clicks on the 'Add Task' button.", "User enters the task name.", "User sets optional details such as due date, priority, labels.", "User saves the task.", "System adds the task to the user's task list."]}, "testcases": [{"name": "Create Task with Minimal Details", "description": "Verify that the user can create a task by only providing the task name.", "input": {"taskName": "Buy groceries"}, "expected": {"outcome": "Task created successfully", "status": "Success"}}, {"name": "Create Task with All Details", "description": "Verify that the user can create a task with a due date, priority, and labels.", "input": {"taskName": "Prepare presentation", "dueDate": "2024-10-20", "priority": "High", "labels": ["Work", "Urgent"]}, "expected": {"outcome": "Task created successfully with all details", "status": "Success"}}, {"name": "Create Task Without Task Name", "description": "Verify that the system prevents the user from creating a task without a name.", "input": {"taskName": ""}, "expected": {"outcome": "Task creation failed, error message displayed", "status": "Failure"}}], "author": "2005081"}
{"usecase": {"name": "Edit an Existing Task", "scenario": "A user edits the details of an existing task.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task from their task list.", "User clicks on the 'Edit' option.", "User modifies the task details.", "User saves the changes.", "System updates the task with new details."]}, "testcases": [{"name": "Edit Task Name", "description": "Verify that the user can edit the name of a task.", "input": {"taskID": "T123", "newTaskName": "Buy groceries and cook dinner"}, "expected": {"outcome": "Task updated successfully", "status": "Success"}}, {"name": "Edit Task to Remove Name", "description": "Verify that the system prevents the user from saving a task without a name when editing.", "input": {"taskID": "T123", "newTaskName": ""}, "expected": {"outcome": "Task update failed, error message displayed", "status": "Failure"}}], "author": "2005086"}
{"usecase": {"name": "Complete a Task", "scenario": "A user marks a task as completed.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User views their task list.", "User clicks on the checkbox next to the task.", "System marks the task as completed and moves it to the completed tasks list."]}, "testcases": [{"name": "Mark Task as Complete", "description": "Verify that the user can mark a task as completed.", "input": {"taskID": "T124"}, "expected": {"outcome": "Task marked as completed", "status": "Success"}}, {"name": "Complete Non-existent Task", "description": "Verify that the system handles attempts to complete a task that does not exist.", "input": {"taskID": "T999"}, "expected": {"outcome": "Task completion failed, error message displayed", "status": "Failure"}}], "author": "2005086"}
{"usecase": {"name": "Delete a Task", "scenario": "A user deletes a task from their task list.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task from their task list.", "User clicks on the 'Delete' option.", "System prompts for confirmation.", "User confirms the deletion.", "System deletes the task."]}, "testcases": [{"name": "Delete Task Successfully", "description": "Verify that the user can delete a task after confirming.", "input": {"taskID": "T125", "confirmDeletion": true}, "expected": {"outcome": "Task deleted successfully", "status": "Success"}}, {"name": "Cancel Task Deletion", "description": "Verify that the task is not deleted if the user cancels the deletion.", "input": {"taskID": "T125", "confirmDeletion": false}, "expected": {"outcome": "Task not deleted", "status": "Cancelled"}}], "author": "2005081"}
{"usecase": {"name": "Create a New Project", "scenario": "A user creates a new project to organize tasks.", "actors": "User", "preconditions": "User is logged in.", "steps": ["User clicks on the 'Add Project' button.", "User enters the project name.", "User selects a color and other optional settings.", "User saves the project.", "System adds the new project to the user's project list."]}, "testcases": [{"name": "Create Project with Name", "description": "Verify that the user can create a project by providing a name.", "input": {"projectName": "Work", "color": "Blue"}, "expected": {"outcome": "Project created successfully", "status": "Success"}}, {"name": "Create Project Without Name", "description": "Verify that the system prevents creating a project without a name.", "input": {"projectName": ""}, "expected": {"outcome": "Project creation failed, error message displayed", "status": "Failure"}}], "author": "2005087"}
{"usecase": {"name": "Share a Project with Another User", "scenario": "A user shares a project with another Todoist user for collaboration.", "actors": "User", "preconditions": "User is logged in and has a project to share.", "steps": ["User selects a project.", "User clicks on the 'Share' option.", "User enters the email address of the collaborator.", "User sends the invitation.", "System sends an invitation to the collaborator."]}, "testcases": [{"name": "Share Project with Valid User", "description": "Verify that a project can be shared with a valid Todoist user.", "input": {"projectID": "P123", "collaboratorEmail": "collab@example.com"}, "expected": {"outcome": "Invitation sent successfully", "status": "Success"}}, {"name": "Share Project with Non-existent User", "description": "Verify that the system handles sharing a project with an email that is not associated with a Todoist account.", "input": {"projectID": "P123", "collaboratorEmail": "nonexistent@example.com"}, "expected": {"outcome": "Invitation sent, user prompted to create an account", "status": "Success with Notification"}}, {"name": "Share Project with Invalid Email", "description": "Verify that the system prevents sharing a project when an invalid email format is provided.", "input": {"projectID": "P123", "collaboratorEmail": "invalid-email"}, "expected": {"outcome": "Invitation not sent, error message displayed", "status": "Failure"}}], "author": "2005075"}
{"usecase": {"name": "Set Reminders for Tasks", "scenario": "A user sets reminders for their tasks to receive notifications.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task.", "User adds a reminder to the task, specifying time and method (push notification, email).", "User saves the reminder.", "System schedules the reminder."]}, "testcases": [{"name": "Set Reminder Successfully", "description": "Verify that the user can set a reminder for a task.", "input": {"taskID": "T126", "reminderTime": "2024-10-20T09:00:00"}, "expected": {"outcome": "Reminder set successfully", "status": "Success"}}], "author": "2005087"}
{"usecase": {"name": "Assign Labels and Priorities to Tasks", "scenario": "A user assigns labels and priorities to tasks for better organization.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task.", "User assigns one or more labels to the task.", "User sets the priority level of the task.", "User saves the changes.", "System updates the task with labels and priority."]}, "testcases": [{"name": "Assign Labels and Priority", "description": "Verify that the user can assign multiple labels and set priority.", "input": {"taskID": "T127", "labels": ["Personal", "Errands"], "priority": "Medium"}, "expected": {"outcome": "Labels and priority assigned successfully", "status": "Success"}}, {"name": "Assign Non-existent Label", "description": "Verify that the system allows creating new labels when assigning to a task.", "input": {"taskID": "T127", "labels": ["NewLabel"], "priority": "Low"}, "expected": {"outcome": "New label created and assigned, priority set", "status": "Success"}}], "author": "2005075"}
{"usecase": {"name": "Use Filters to View Tasks", "scenario": "A user uses filters to view tasks based on specific criteria.", "actors": "User", "preconditions": "User is logged in and has tasks with various attributes.", "steps": ["User navigates to the filters section.", "User selects or creates a filter (e.g., tasks due today, high priority).", "System displays tasks matching the filter criteria."]}, "testcases": [{"name": "Create and Use Custom Filter", "description": "Verify that the user can create a custom filter and view tasks accordingly.", "input": {"filterName": "Work High Priority", "filterQuery": "##Work & p1"}, "expected": {"outcome": "Custom filter created, matching tasks displayed", "status": "Success"}}, {"name": "View Tasks Due Today", "description": "Verify that the user can view tasks that are due today.", "input": {"filter": "Due Today"}, "expected": {"outcome": "Tasks due today are displayed", "status": "Success"}}, {"name": "Use Invalid Filter Query", "description": "Verify that the system handles invalid filter queries appropriately.", "input": {"filterName": "Invalid Filter", "filterQuery": "???"}, "expected": {"outcome": "Filter created but shows error message displayed for invalid filter query", "status": "Failure"}}], "author": "2005075"}
{"usecase": {"name": "Search for Tasks", "scenario": "A user searches for tasks based on keywords, projects, labels, and other filters.", "actors": "User", "preconditions": "User is logged in and has tasks with various attributes.", "steps": ["User enters a search query in the search bar.", "System displays tasks that match the search criteria."]}, "testcases": [{"name": "Valid Search by Keyword", "description": "Verify that a user can successfully search for tasks using a valid keyword.", "input": {"searchQuery": "Report"}, "expected": {"outcome": "Tasks containing the keyword 'Report' are displayed.", "status": "Success"}}, {"name": "Search with No Matching Tasks", "description": "Verify that the system handles searches that yield no matching tasks.", "input": {"searchQuery": "UnicornTask123"}, "expected": {"outcome": "No tasks found message is displayed.", "status": "Failure"}}], "author": "1705083"}
{"usecase": {"name": "Integrate Todoist with Google Calendar", "scenario": "A user integrates their Todoist account with Google Calendar to synchronize tasks.", "actors": "User", "preconditions": "User is logged in to Todoist and has a Google account.", "steps": ["User navigates to the integrations settings.", "User selects Google Calendar integration.", "User authorizes Todoist to access their Google account.", "User configures synchronization settings.", "System syncs tasks with Google Calendar."]}, "testcases": [{"name": "Successful Integration", "description": "Verify that the user can successfully integrate Todoist with Google Calendar.", "input": {"googleAccountEmail": "user@gmail.com", "syncSettings": "Two-way sync"}, "expected": {"outcome": "Integration successful, tasks synchronized", "status": "Success"}}, {"name": "Failed Integration Due to Denied Permissions", "description": "Verify that the system handles cases where the user denies permissions during integration.", "input": {"googleAccountEmail": "user@gmail.com", "permissionsGranted": "false"}, "expected": {"outcome": "Integration failed, error message displayed", "status": "Failure"}}], "author": "2005078"}
{"usecase": {"name": "Product Search and Selection", "scenario": "User searches for products using a keyword and selects a desired product from the search results.", "actors": "User, System", "preconditions": "User is on the product search page, and the product catalog is loaded in the system.", "steps": ["User enters a product name or keyword in the search bar.", "System displays a list of products that match the entered keyword.", "User selects a product from the search results.", "System displays the product details page."]}, "testcases": [{"name": "Valid Product Search and Selection", "description": "Verify that a user can successfully search for a product with a valid name and select it from the search results.", "input": {"searchKeyword": "iPhone 15"}, "expected": {"outcome": "Product details page is displayed", "selectedProduct": "iPhone 15"}}, {"name": "No Results Found for Invalid Product Name", "description": "Verify that the system displays a 'No products found' message when a user searches for a product name that does not exist.", "input": {"searchKeyword": "NonExistentProduct"}, "expected": {"outcome": "No products found message is displayed", "selectedProduct": null}}, {"name": "Partial Match Product Search", "description": "Verify that the system displays products that partially match the entered keyword.", "input": {"searchKeyword": "iPhone"}, "expected": {"outcome": "List of products like 'iPhone 15', 'iPhone 16', etc., is displayed", "selectedProduct": null}}, {"name": "Special Characters in Search Keyword", "description": "Verify that the system can handle and return appropriate results for search queries containing special characters.", "input": {"searchKeyword": "iPhone 15 (2023)"}, "expected": {"outcome": "Product details page for 'iPhone 15 (2023)' is displayed", "selectedProduct": "iPhone 15 (2023)"}}, {"name": "Empty Search Query", "description": "Verify that the system prompts the user to enter a search keyword when the search bar is submitted empty.", "input": {"searchKeyword": ""}, "expected": {"outcome": "System displays a message prompting the user to enter a search keyword", "selectedProduct": null}}], "Author": "2005074"}
{"usecase": {"name": "Product Filtering", "scenario": "User filters products based on various attributes such as category, price range, brand, and rating to narrow down the search results.", "actors": "User, System", "preconditions": "User is on the product listing page, and the product catalog is loaded with attribute filters available.", "steps": ["User selects one or more filter attributes (e.g., category, price range, brand, rating).", "System updates the product listing based on the selected filters.", "User reviews the filtered product list.", "User can further refine the results by selecting additional filters or removing some filters."]}, "testcases": [{"name": "Filter by Category", "description": "Verify that the system correctly filters products based on the selected category.", "input": {"selectedFilters": {"category": "Electronics"}}, "expected": {"outcome": "Only products belonging to the 'Electronics' category are displayed.", "productCount": 25}}, {"name": "Filter by Price Range", "description": "Verify that the system correctly filters products within the specified price range.", "input": {"selectedFilters": {"priceRange": {"min": 100, "max": 500}}}, "expected": {"outcome": "Only products with prices between $100 and $500 are displayed.", "productCount": 15}}, {"name": "Filter by Brand", "description": "Verify that the system correctly filters products based on the selected brand.", "input": {"selectedFilters": {"brand": "Apple"}}, "expected": {"outcome": "Only products from the brand 'Apple' are displayed.", "productCount": 10}}, {"name": "Filter by Rating", "description": "Verify that the system correctly filters products with ratings equal to or greater than the specified value.", "input": {"selectedFilters": {"rating": 4}}, "expected": {"outcome": "Only products with a rating of 4 stars or higher are displayed.", "productCount": 20}}, {"name": "Filter by Multiple Attributes", "description": "Verify that the system correctly filters products based on multiple attributes: category, price range, and brand.", "input": {"selectedFilters": {"category": "Electronics", "priceRange": {"min": 100, "max": 1000}, "brand": "Sony"}}, "expected": {"outcome": "Only products from the category 'Electronics', within the price range $100-$1000, and of the brand 'Sony' are displayed.", "productCount": 5}}, {"name": "Clear All Filters", "description": "Verify that the system displays all products when all filters are cleared.", "input": {"selectedFilters": {}}, "expected": {"outcome": "All products in the catalog are displayed without any filters.", "productCount": 100}}], "Author": "2005074"}
{"usecase": {"name": "Add New Product", "scenario": "Seller adds a new product on the product list, with the available number", "actors": "Seller, Admin, System", "preconditions": "Seller is already registered in the application as a verified seller", "steps": ["Seller adds the name and price of the product he/she wants to add", "Seller gives additional informations about the product", "Seller submits his/her add product request", "System checks if his/her addition request is valid", "Admin approves or disapproves"]}, "testcases": [{"name": "Valid Add Product Request Submission", "description": "Verify that when a seller add every valid information needed about the product, the product request will be accepted.", "input": {"productName": "Western Digital Internal Green Sata III SSD", "productPrice": "$3,399", "productType": "Electronics", "deliveryOptions": ["Dhaka, Dhaka North", "Rajshahi, Ghoramara post Office", "Chattogram, Zero Point"], "productDetails": {"brand": "Western Digital", "modelNo": "WDS240G3G0A", "shockResistant": true, "colorFamily": ["Green"], "storageCapacity": ["240 GB", "512 GB"], "SLC": true, "Speed": "6 Gb/s", "Type": "SATA III", "Size": "2.5 inch/7 mm"}, "paymentAmount": ["https://cloudinary.com/home/WDS240G3G0A.png", "https://cloudinary.com/home/WDS240G3G0A(frontView).png"], "availibility": 100}, "expected": {"outcome": "Product Addition Request Successful", "status": "Request Accepted"}}, {"name": "Incomplete Product Addition Request", "description": "Verify that the system handles the case where a incomplete product addition request.", "input": {"productName": "Sandisk 128 GB Ultra Luxe USB 3.2 Flash Drive", "productPrice": "$1,550", "productType": null, "deliveryOptions": [null], "productDetails": {"brand": "Sandisk", "modelNo": "SDCZ74-128G-G46", "colorFamily": ["Silver"], "storageCapacity": ["128 GB"], "SLC": true, "Speed": "120 Mb/s", "Size": "5 cm"}, "productImage": [null], "availibility": 90}, "expected": {"outcome": "Product Addition Request Unsuccessful", "status": "Incomplete Request"}}, {"name": "Corrupted Product Request Submission", "description": "Verify that system checks if all the information provided by the seller is accessable.", "input": {"productName": "Russian Winter Ushanka Hat for Men", "productPrice": "-$33", "productType": "Accessories", "deliveryOptions": ["Rajshahi, Ghoramara post Office"], "productDetails": {"brand": "Unknown", "colorFamily": ["Black"], "size": "56 - 60 cm"}, "productImage": ["https://cloudinary.com/home/hat2VD334UI45IU45JK45J.png"], "availibility": -10}, "expected": {"outcome": "Product Information Corrupted", "status": "Request Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a product addition request.", "input": {"adminApproval": true}, "expected": {"outcome": "Product Addition Approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a product addition request.", "input": {"adminApproval": false}, "expected": {"outcome": "Product Addition Failed", "status": "Rejected"}}], "Author": "2005090"}
{"usecase": {"name": "Ask a Question.", "scenario": "Customers can ask questions about any specific product.", "actors": "Customer, System", "preconditions": ["Customer must be logged in as a valid and registered user.", "Customer must be in a product's page."], "steps": ["Customer selects a product.", "System shows all the Q&A about the specific product.", "Customer submits a new question about the specific product."]}, "testcases": [{"name": "Submit a Valid Question.", "description": "Customer submits a valid question for a specific product.", "input": {"productID": "N2N3J2NJ23", "question": "Is there any side effect of this product on skin?"}, "expected": {"outcome": "Question Submitted Successfully.", "status": "Success"}}, {"name": "Submit a Blank Question.", "description": "Customer submits an empty question.", "input": {"productID": "N2N3J2NJ23", "question": ""}, "expected": {"outcome": "Submission Failed. Question can't be empty.", "status": "Failure"}}], "Author": "2005084"}
{"usecase": {"name": "Answer a Question.", "scenario": "Seller or other customers can answer any specific question about any specific product.", "actors": "Customer, Seller, System", "preconditions": ["Customer or seller must be logged in as a valid and registered user.", "Customer or seller must select a question in a product page."], "steps": ["Customer or seller selects a product.", "System shows all the Q&A about the specific product.", "Customer or seller selects a specific question.", "Customer or seller submits an answer for the specific question."]}, "testcases": [{"name": "Submit a Valid Answer.", "description": "Customer submits a valid answer for a specific question of a specific product.", "input": {"productID": "N2N3J2NJ23", "questionID": "C2P3D2KL55", "answer": "The product does not have any side effects on skin."}, "expected": {"outcome": "Answer Submitted Successfully.", "status": "Success"}}, {"name": "Submit a Blank Answer.", "description": "Customer submits an empty answer.", "input": {"productID": "N2N3J2NJ23", "questionID": "C2P3D2KL55", "answer": ""}, "expected": {"outcome": "Submission Failed. Answer can't be empty.", "status": "Failure"}}], "Author": "2005084"}
{"usecase": {"name": "Add a New Product to the Cart", "scenario": "Customer adds a new product to his cart", "actors": "Customer", "preconditions": ["Customer must be in a product's page", "The product is available in stock", "If the product is already in the cart, the quantity is less than 5"], "steps": ["Customer goes to the product page", "Customer clicks the \"Add to Cart\" button"]}, "testcases": [{"name": "Add to Cart Request for an Available Product That Is Not Already in the Cart", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock and not already in the cart, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Addition to Cart Request Successful", "status": "Request Accepted", "message": "Added to cart successfully", "quantityOfTheProductInCart": 1}}, {"name": "Add to Cart Request for An Available Product That Is Already in The Cart with Quantity Less than 5", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock and already in the cart with quantity less than 5, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Addition to Cart Request Successful", "status": "Request Accepted", "message": "Added to cart successfully", "quantityOfTheProductInCart": 5}}, {"name": "Add to Cart Request for An Available Product That Is Already in The Cart with Quantity 5", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock but already in the cart with quantity 5, the request is rejected and appropriate message is shown.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 5}, "expected": {"outcome": "Addition to Cart Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, up to 5 items of the product can be purchased per order.", "quantityOfTheProductInCart": 5}}, {"name": "Add to Cart Request for An Unavailable Product", "description": "Verify that when a customer submits a Add to Cart request for a product that is not available in stock, the request is rejected.", "input": {"productID": "Product123", "availability": 0, "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Addition to Cart Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, the product is out of stock.", "quantityOfTheProductInCart": 0}}], "Author": "2005085"}
{"usecase": {"name": "Increase Quantity of A Product in The Cart", "scenario": "Customer increases quantity of a product in his cart", "actors": "Customer", "preconditions": ["Product must be in the cart", "The product is available in stock", "The quantity of the product in the cart is less than 5"], "steps": ["Customer goes to his cart page", "Customer clicks the \"+\" button for a product"]}, "testcases": [{"name": "Increase Request for An Available Product in The Cart with Quantity Less than 5", "description": "Verify that when a customer submits an increase quantity request for a product that is available in stock and has quantity in cart less than 5, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Increase Quantity Request Successful", "status": "Request Accepted", "quantityOfTheProductInCart": 5}}, {"name": "Increase Request for An Available Product in The Cart with Quantity 5", "description": "Verify that when a customer submits an increase quantity request for a product that is available in stock and has quantity in cart equals to 5, the request is rejected and appropriate message is shown.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 5}, "expected": {"outcome": "Increase Quantity Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, up to 5 items of the product can be purchased per order.", "quantityOfTheProductInCart": 5}}, {"name": "Increase Request for An Unavailable Product", "description": "Verify that when a customer submits an increase quantity request for a product that is not available in stock, the request is rejected.", "input": {"productID": "Product123", "availability": 0, "quantityOfTheProductInCart": 2}, "expected": {"outcome": "Increase Quantity Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, the product is out of stock.", "quantityOfTheProductInCart": 2}}], "Author": "2005085"}
{"usecase": {"name": "Decrease Quantity of A Product in The Cart", "scenario": "Customer decreases quantity of a product in his cart", "actors": "Customer", "preconditions": ["Product must be in the cart"], "steps": ["Customer goes to his cart page", "Customer clicks the \"-\" button for a product"]}, "testcases": [{"name": "Decrease Request for A Product in The Cart with Quantity Greater than 1", "description": "Verify that when a customer submits a decrease quantity request for a product with quantity in cart greater than 1, the quantity is decreased by 1.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Decrease Quantity Request Successful", "status": "Request Accepted", "quantityOfTheProductInCart": 3}}, {"name": "Decrease Request for A Product in The Cart with Quantity 1", "description": "Verify that when a customer submits a decrease quantity request for a product with quantity in cart equals to 1, the product is removed from cart.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 1}, "expected": {"outcome": "Decrease Quantity Request Successful", "status": "Request Accepted", "message": "Delete success!", "quantityOfTheProductInCart": 0}}], "Author": "2005085"}
{"usecase": {"name": "Remove A Product from The Cart", "scenario": "Customer removes a product from his cart", "actors": "Customer", "preconditions": ["Customer must be in his cart page", "The product is in the cart"], "steps": ["Customer goes to his cart page", "Customer selects the product", "Customer clicks the delete button", "Customer confirms deletion"]}, "testcases": [{"name": "Remove from Cart Request for A Product That Is in The Cart", "description": "Verify that when a customer submits a remove request for a product that is in the cart, the product is removed from the cart.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 2}, "expected": {"outcome": "Remove from Cart Request Successful", "status": "Request Accepted", "message": "Delete success!", "quantityOfTheProductInCart": 0}}, {"name": "Remove from Cart Request for A Product That Is Not in The Cart", "description": "Verify that when a customer submits a remove request for a product that is not in the cart, request is rejected.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Remove from Cart Request Unsuccessful", "status": "Request Rejected", "message": "The product is not in your cart."}}], "Author": "2005085"}
{"usecase": {"name": "Process a Payment", "scenario": "Customer completes the payment for an order.", "actors": "Customer, System, Payment Gateway", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer has added products to the cart.", "Customer has selected a payment method."], "steps": ["Customer proceeds to the checkout page.", "System displays the available payment options.", "Customer selects a payment method (e.g., Credit/Debit Card, bKash, Nagad, Rocket, Cash on Delivery).", "System redirects to the payment gateway if required (e.g., for Credit Card or bKash).", "Customer completes the payment process.", "Payment gateway confirms the payment status.", "System updates the order status to 'Payment Successful' or 'Payment Failed' or with necessary information.", "System sends confirmation of the order to the customer."]}, "testcases": [{"name": "Successful Payment with Credit/Debit Card", "description": "Verify that a customer can successfully make a payment using a credit/debit card.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Successful", "status": "Order Confirmed"}}, {"name": "Failed Payment due to Insufficient Funds", "description": "Verify that a customer cannot make a payment with a credit/debit card that has insufficient funds.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Insufficient Funds"}}, {"name": "Failed Payment due to Expired Card", "description": "Verify that a customer cannot make a payment using a credit/debit card that has expired.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/22", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Card Expired"}}, {"name": "Failed Payment due to Invalid Card Details", "description": "Verify that a customer cannot make a payment using invalid credit/debit card details.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "1234XYZ812345678", "expirationDate": "12/25", "cvv": "999", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Invalid Card Details"}}, {"name": "Successful Payment with Mobile Banking(Bkash, Nagad, Rocket etc.)", "description": "Verify that a customer can successfully make a payment using a mobile banking payment system.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "1234", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Successful", "status": "Order Confirmed"}}, {"name": "Failed Payment due to Incorrect Account Number", "description": "Verify that a customer cannot make a payment with an incorrect account number during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "018XY345678", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect Account Number"}}, {"name": "Failed Payment due to Incorrect OTP", "description": "Verify that a customer cannot make a payment with an incorrect OTP during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "000000", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect OTP"}}, {"name": "Failed Payment due to Incorrect PIN", "description": "Verify that a customer cannot make a payment with an incorrect PIN during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "XY00", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect PIN"}}, {"name": "Failed Payment due to Insufficient Balance in the Mobile Banking Account", "description": "Verify that a customer cannot make a payment with insufficient balance in the mobile banking account.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "bkashNumber": "01612345678", "otp": "654321", "amount": 5000, "orderID": "ORD24680"}, "expected": {"outcome": "Payment Failed", "status": "Insufficient Balance"}}, {"name": "Failed Payment due to Network Timeout in Credit/Debit Card Payment", "description": "Verify that a customer cannot make a payment when the network times out during the payment process.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Network Timeout"}}, {"name": "Failed Payment due to Network Timeout in Mobile Banking", "description": "Verify that a customer cannot make a payment when the network times out during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "1234", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Network Timeout"}}, {"name": "Unavailable Cash On Delivery Payment Method", "description": "Verify that Cash on Delivery is not available for the items in the cart", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "COD Unavailable", "status": "Cash on Delivery Unavailable For the Selected Items"}}, {"name": "Succesfull Cash on Delivery Payment Process", "description": "Customer selects Cash on Delivery and proceeds with the order.", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "Order Confirmed, Payment Pending", "status": "Cash on Delivery"}}, {"name": "Failed Cash on Delivery Payment Process", "description": "Verify that a customer cannot make a payment using Cash on Delivery if the payment is not received.", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "Payment Failed", "status": "Payment Not Received"}}], "Author": "2005067"}
{"usecase": {"name": "Track Order", "scenario": "Customer tracks the status of an order.", "actors": "Customer, System", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer has placed an order."], "steps": ["Customer goes to the Accounts section.", "Customer selects Track Package Slider.", "System displays the list of orders placed by the customer.", "Customer selects the order to track.", "System shows the current status of the order (e.g., Processing, Shipped, Delivered)."]}, "testcases": [{"name": "Track Order Status - Delivered", "description": "Verify that a customer can track the status of an order.", "input": {"orderID": "ORD12345"}, "expected": {"status": "Delivered", "estimatedDelivery": null, "trackingNumber": null}}, {"name": "Track Order Status - Processing", "description": "Verify that a customer can track the status of an order that is still being processed.", "input": {"orderID": "ORD67890"}, "expected": {"status": "Processing", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Processed and Ready to Ship", "description": "Verify that a customer can track the status of an order where the products are processed and ready to ship.", "input": {"orderID": "ORD13579"}, "expected": {"status": "Processed and Ready to Ship", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Reached The Logistics Facility", "description": "Verify that a customer can track the status of an order where the products have reached the logistics facility.", "input": {"orderID": "ORD54321"}, "expected": {"status": "Products Reached Logistics Facility", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Shipped", "description": "Verify that a customer can track the status of an order that has been shipped.", "input": {"orderID": "ORD24680"}, "expected": {"status": "Shipped", "estimatedDelivery": "2024-11-12", "trackingNumber": "LZ987654321CN"}}, {"name": "Track Order Status - Ready for Collection", "description": "Verify that a customer can track the status of an order where the products are ready for collection.", "input": {"orderID": "ORD97531"}, "expected": {"status": "Ready for Collection"}}, {"name": "Track Order Status - Out for Delivery", "description": "Verify that a customer can track an order that is out for delivery.", "input": {"orderID": "ORD97531"}, "expected": {"status": "Out for Delivery", "estimatedDelivery": "2024-11-12", "trackingNumber": "LZ987654321CN"}}, {"name": "Track Order Status- Returned and Refunded", "description": "Verify that a customer can track the status of an order that has been returned.", "input": {"orderID": "ORD24680"}, "expected": {"status": "Returned and Refunded", "refundAmount": "1000 BDT"}}, {"name": "Track Order Status - Cancelled", "description": "Verify that a customer can track the status of an order that has been cancelled.", "input": {"orderID": "ORD13579"}, "expected": {"status": "Cancelled"}}, {"name": "Track Order Status - Invalid Order ID", "description": "Verify that the system handles an invalid order ID properly.", "input": {"orderID": "ORDINVALID"}, "expected": {"status": "Error", "message": "Order not found"}}], "Author": "2005067"}
{"usecase": {"name": "Review a Product", "scenario": "Customer reviews a specific product.", "actors": "Customer, System, Admin", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer purchased the product."], "steps": ["Customer selects a product.", "System shows all the reviews about the specific product.", "Customer submits a review for the specific product.", "Admin approves or disapproves."]}, "testcases": [{"name": "Submit a Valid Review of Purchased", "description": "Customer submits a review which is valid as he already purchased the product.", "input": {"productID": "N2N3J2NJ23", "review": "The quality of the product was good and fulfilled my expectation."}, "expected": {"outcome": "Review Submitted Successfully.", "status": "Valid Review Addition Requested."}}, {"name": "Submit an Invalid Review of not Purchased", "description": "Customer submits a review which is invalid as he has not purchased the product.", "input": {"productID": "N2N3J2NJ23", "review": "The product quality was not upto the mark."}, "expected": {"outcome": "Submission Invalid. Can't review a product before purchase.", "status": "Invalid Review Addition Requested."}}, {"name": "Submit a Blank Review.", "description": "Customer submits an empty review.", "input": {"productID": "N2N3J2NJ23", "review": ""}, "expected": {"outcome": "Submission Invalid. Review can't be empty.", "status": "Blank Review Addition Requested."}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve to add a customer's product review.", "input": {"adminApproval": true}, "expected": {"outcome": "Review Addition Request Approved.", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject to add a customer's product review.", "input": {"adminApproval": false}, "expected": {"outcome": "Review Addition Request Rejected.", "status": "Rejected"}}], "Author": "2005084"}
{"usecase": {"name": "View Product Information", "scenario": "User navigates to the product page or searches for a product", "actors": "Customer,System", "preconditions": "User is logged in or browsing anonymously", "steps": ["User navigates to the product page or searches for a product", "System retrieves product details from the database", "System displays product information including title, description, price, availability, and images", "User views additional information such as reviews, ratings, and related products"]}, "testcases": [{"name": "Invalid Product Search", "description": "Verify that the system handles invalid or non-existent product searches gracefully.", "input": {"productId": "InvalidProduct999"}, "expected": {"message": "search no result"}}, {"name": "View Product Information Without Login", "description": "Verify that a user can view product details without logging in.", "input": {"productId": "ValidProduct789"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "Out of stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "enabled"}}, {"name": " Out of Stock Product", "description": "Verify that the system shows appropriate messaging when a product is out of stock.", "input": {"productId": "OutOfStockProduct456"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "Out of stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "Disabled"}}, {"name": "Valid Product Information Display", "description": "Verify that product information is displayed when a valid product is selected.", "input": {"productId": "ValidProduct123"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "In Stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "Enabled"}}], "Author": "2005088"}
{"usecase": {"name": "Apply Promo Code at Checkout", "scenario": "A customer wants to apply a discount promo code while completing their purchase to receive a reduced total price.", "actors": "User,System", "preconditions": ["Uder is logged in", "User has selected items to purchase", "Promo code is applicable to selected items"], "steps": ["User navigates to the checkout page after adding items to the cart.", "User enters the promo code in the designated promo code field.", "System validates the promo code (validity, expiration, applicability to products).", "If the promo code is valid, the system applies the discount to the total price and shows the updated total.", "User reviews the updated total price with the discount applied and proceeds with payment."]}, "testcases": [{"name": "Valid Promo Code Application", "description": "Verify that the promo code is applied successfully when a valid code is used during checkout.", "input": {"promoCode": "SAVE20", "cartItems": [{"itemId": "Product123", "price": "$100"}]}, "expectedOutput": {"discountApplied": true, "discountAmount": "$20", "newTotal": "$80", "message": "Promo code applied successfully"}}, {"name": "Expired Promo Code", "description": "Verify that the system displays an error message when an expired promo code is entered.", "input": {"promoCode": "EXPIRED30", "cartItems": [{"itemId": "Product123", "price": "$100"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$100", "message": "Promo code has expired"}}, {"name": "Invalid Promo Code", "description": "Verify that the system shows an appropriate error message when an invalid promo code is used.", "input": {"promoCode": "INVALIDCODE", "cartItems": [{"itemId": "Product789", "price": "$200"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$200", "message": "Invalid promo code"}}, {"name": "Promo Code Not Applicable to Cart Items", "description": "Verify that the system shows a message when a valid promo code is not applicable to the items in the cart.", "input": {"promoCode": "SAVE50", "cartItems": [{"itemId": "Product999", "price": "$300", "category": "Electronics"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$300", "message": "Promo code not applicable to selected items"}}], "Author": "2005088"}
{"usecase": {"name": "Update Information of a Product", "scenario": "A seller updates the information about a product, the systems checks if the update request is valid and send the request to the admin for approval", "actors": "Seller, Admin, System", "preconditions": "The Product is already added in the product list.", "steps": ["Seller selects the product to update information", "Seller updates all the information needed to be changed", "Seller submits his/her update request", "System checks if his/her update request is valid", "Admin approves or disapproves"]}, "testcases": [{"name": "Valid Update Request", "description": "Verify that the Seller can make a valid update request by filling all the necessary field.", "input": {"productID": "N2N3J2NJ23", "updateFields": {"productName": "Qiunery QX11 Smart Watch", "availibility": 30, "productPrice": "$100", "productDetails": {"brand": "Xiomi"}}}, "expected": {"outcome": "Update Request successful", "status": "Request Accepted"}}, {"name": "Incomplete Update Request", "description": "Verify that the system handles the case where the seller give a update request keeping incomplete information about the product.", "input": {"productID": "NJN34JN34J", "updateFields": {"productName": "GIGABYTE GeForce GTX 1650 D6 4G GDDR6 Graphics Card", "productType": null, "productPrice": null, "productDetails": {"brand": "Gigabyte", "Series": "GTX1650"}}}, "expected": {"outcome": "Update Request unsuccessful", "status": "Incomplete request"}}, {"name": "invalid Update Request", "description": "Verify that the system handles the case where the seller gives a request keeping invalid information about the product.", "input": {"productID": "D4OFKOERO44O5TMKO", "updateFields": {"productPrice": "-$40", "availibility": -10, "deliveryOptions": ["Russia, Moscow"]}}, "expected": {"outcome": "Update Request unsuccessful", "status": "Request Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a product update information request.", "input": {"adminApproval": true}, "expected": {"outcome": "Product information Update Approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a product update information request.", "input": {"adminApproval": false}, "expected": {"outcome": "Product Information Update Failed", "status": "Rejected"}}], "Author": "2005090"}
{"usecase": {"name": "Add Expense or Income Transaction in YNAB", "author": "Sumon", "scenario": "User adds a new transaction (expense or income) to track financial activity within their budget.", "actors": "User", "preconditions": "User is logged into their YNAB account and has an active budget with categories.", "steps": ["User navigates to the 'Budget' or 'Accounts' section.", "User selects 'Add Transaction' in a specific account.", "User inputs the transaction details including the payee, amount, date, and category.", "User saves the transaction.", "System updates the user's budget and account balance to reflect the new transaction."]}, "testcases": [{"name": "Valid Expense Transaction Entry", "description": "Verify that a user can add an expense transaction with valid details.", "input": {"type": "Expense", "account": "Checking Account", "category": "Groceries", "payee": "Supermarket", "transactionAmount": 100, "transactionDate": "2024-10-10", "memo": "Weekly groceries"}, "expected": {"outcome": "Transaction added successfully and the budget is updated.", "status": "Success"}}, {"name": "Valid Income Transaction Entry", "description": "Verify that a user can add an income transaction with valid details.", "input": {"type": "Income", "account": "Checking Account", "category": "To Be Budgeted", "payee": "Employer", "transactionAmount": 2000, "transactionDate": "2024-10-01", "memo": "October salary"}, "expected": {"outcome": "Income transaction added successfully and the budget is updated.", "status": "Success"}}, {"name": "Negative Transaction Amount", "description": "Verify that the system prevents adding a transaction with a negative amount.", "input": {"type": "Expense", "account": "Credit Card", "category": "Restaurants", "payee": "Cafe", "transactionAmount": -30, "transactionDate": "2024-10-15", "memo": "Lunch"}, "expected": {"outcome": "Transaction entry failed", "status": "Invalid amount"}}, {"name": "Missing Transaction Amount", "description": "Verify that the system handles the case where the user tries to add a transaction without specifying an amount.", "input": {"type": "Expense", "account": "Savings Account", "category": "Entertainment", "payee": "Movie Theater", "transactionAmount": null, "transactionDate": "2024-10-20", "memo": "Movie tickets"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Missing transaction amount"}}, {"name": "Future Transaction Date", "description": "Verify that the system prevents adding a transaction with a future date.", "input": {"type": "Expense", "account": "Checking Account", "category": "Utilities", "payee": "Electric Company", "transactionAmount": 150, "transactionDate": "2025-01-01", "memo": "Future bill payment"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Future transaction date not allowed"}}, {"name": "Invalid Category Selection", "description": "Verify that the system handles the case where the user tries to add a transaction without selecting a valid category.", "input": {"type": "Expense", "account": "Checking Account", "category": null, "payee": "Coffee Shop", "transactionAmount": 5, "transactionDate": "2024-10-20", "memo": "Coffee"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Missing or invalid category"}}, {"name": "Adding Split Transactions", "description": "Verify that the system supports adding split transactions under multiple categories.", "input": {"type": "Expense", "account": "Checking Account", "payee": "Supermarket", "transactionAmount": 150, "transactionDate": "2024-10-15", "splitTransactions": [{"category": "Groceries", "amount": 100, "memo": "Food items"}, {"category": "Household Items", "amount": 50, "memo": "Cleaning supplies"}]}, "expected": {"outcome": "Split transaction added successfully and the budget is updated.", "status": "Success"}}]}
{"usecase": {"name": "Manage Payees", "author": "Abdullah", "scenario": "The user manages payees by editing, merging, or deleting payees in the budget.", "actors": "User", "preconditions": "User must have an existing budget with transactions that contain payees.", "steps": ["User navigates to the 'Manage Payees' section.", "User selects a payee to edit, merge, or delete.", "User performs the desired action (edit, merge, or delete).", "The system updates the payee list and reflects changes in the budget."]}, "testcases": [{"name": "Edit Payee Name", "description": "Verify that the user can successfully rename a payee.", "input": {"originalPayee": "Grocery Store", "newPayee": "Supermarket"}, "expected": {"outcome": "The payee name is updated to 'Supermarket' in all related transactions.", "status": "Success"}}, {"name": "Merge Two Payees", "description": "Verify that the user can merge two payees into one.", "input": {"payee1": "Gas Station", "payee2": "Fuel Station"}, "expected": {"outcome": "All transactions with 'Gas Station' are updated to 'Fuel Station'.", "status": "Success"}}, {"name": "Delete Payee Without Transactions", "description": "Verify that the user can delete a payee with no transactions attached.", "input": {"payee": "Old Subscription"}, "expected": {"outcome": "Payee 'Old Subscription' is removed from the list.", "status": "Deleted"}}, {"name": "Delete Payee With Transactions", "description": "Verify that the system prevents deleting a payee that is linked to active transactions.", "input": {"payee": "Internet Provider"}, "expected": {"outcome": "The system does not allow deleting the payee and displays an error.", "status": "Error: Payee linked to transactions"}}, {"name": "Prevent Duplicate Payees", "description": "Verify that the system prevents creating a duplicate payee with an identical name.", "input": {"payee": "Supermarket"}, "expected": {"outcome": "The system prevents adding the duplicate payee and shows a warning.", "status": "Error: Duplicate payee"}}]}
{"usecase": {"name": "Set Savings Goal in YNAB", "author": "Tahsin", "scenario": "User sets a savings goal to allocate money for a specific purpose (e.g., vacation, emergency fund).", "actors": "User", "preconditions": "User is logged into their YNAB account and has an active budget with categories.", "steps": ["User navigates to the 'Budget' section.", "User selects a category to set a savings goal (e.g., 'Vacation').", "User clicks on 'Set Goal' option.", "User inputs the target amount and the target date for the goal.", "User saves the goal.", "System updates the budget to reflect the goal and tracks progress toward the savings goal."]}, "testcases": [{"name": "Valid Savings Goal Entry", "description": "Verify that the user can set a savings goal with valid details.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "targetDate": "2025-06-01"}, "expected": {"outcome": "Savings goal set successfully and reflected in the budget.", "status": "Success"}}, {"name": "Savings Goal with Past Date", "description": "Verify that the system prevents setting a savings goal with a target date in the past.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "targetDate": "2023-01-01"}, "expected": {"outcome": "Savings goal entry failed", "status": "Error: Target date cannot be in the past"}}, {"name": "Missing Target Amount", "description": "Verify that the system handles cases where the user attempts to set a savings goal without specifying a target amount.", "input": {"category": "Emergency Fund", "goalType": "Target by Date", "targetAmount": null, "targetDate": "2024-12-01"}, "expected": {"outcome": "Savings goal entry failed", "status": "Error: Missing target amount"}}, {"name": "Set Savings Goal with Flexible Date", "description": "Verify that the user can set a savings goal without a specific end date.", "input": {"category": "Emergency Fund", "goalType": "Target Balance", "targetAmount": 5000, "targetDate": null}, "expected": {"outcome": "Savings goal set successfully without a specific end date.", "status": "Success"}}, {"name": "View Progress on Savings Goal", "description": "Verify that the user can view their progress toward an existing savings goal.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "amountSaved": 1000}, "expected": {"outcome": "The system displays that 50% of the goal has been achieved.", "status": "Success"}}]}
{"usecase": {"name": "Create YNAB Together Group", "author": "Shanto", "scenario": "A user creates a YNAB Together group to share budgeting with family members.", "actors": "User", "preconditions": "User is logged into YNAB with an active subscription.", "steps": ["User navigates to the 'YNAB Together' section in the settings.", "User creates a new group and adds family members by email.", "Members receive an invite and accept the invitation.", "User and family members are linked under one YNAB Together group."]}, "testcases": [{"name": "Valid YNAB Together Group Creation", "description": "Verify that a user can create a YNAB Together group and invite valid members.", "input": {"groupName": "Family Budget Group", "emails": ["spouse@domain.com", "child@domain.com"]}, "expected": {"outcome": "YNAB Together group created successfully", "status": "Group and invitations sent"}}, {"name": "Invalid Email for Group Member", "description": "Verify that the system prevents inviting a user with an invalid email.", "input": {"groupName": "Family Budget Group", "emails": ["invalid-email"]}, "expected": {"outcome": "Group creation failed", "status": "Invalid email format"}}, {"name": "Empty Group Name", "description": "Verify that the system prevents creating a YNAB Together group without a group name.", "input": {"groupName": "", "emails": ["spouse@domain.com"]}, "expected": {"outcome": "Group creation failed", "status": "Missing group name"}}]}
{"usecase": {"name": "Collaborate on Shared Budget", "author": "Shanto", "scenario": "Members of a YNAB Together group work on a shared family budget.", "actors": "User, Family Members", "preconditions": "User and family members are part of a YNAB Together group.", "steps": ["User creates a shared family budget.", "Other members access the shared budget.", "Members can edit and view categories and budget allocations.", "Changes are updated in real time for all members."]}, "testcases": [{"name": "Valid Shared Budget Collaboration", "description": "Verify that users can collaborate on a shared family budget with valid inputs.", "input": {"budgetName": "Family Monthly Budget", "categories": [{"name": "Groceries", "amount": 500}, {"name": "Rent", "amount": 1500}]}, "expected": {"outcome": "Shared budget updated successfully", "status": "Changes reflected for all members"}}, {"name": "Edit Budget Category by Member", "description": "Verify that any member of the YNAB Together group can update budget categories.", "input": {"memberEmail": "spouse@domain.com", "categoryChanges": {"Groceries": 600}}, "expected": {"outcome": "Category updated successfully", "status": "Changes reflected in real-time"}}, {"name": "View Only Permission", "description": "Verify that users with view-only permission cannot edit the budget.", "input": {"memberEmail": "child@domain.com", "attemptedCategoryChange": {"Rent": 1200}}, "expected": {"outcome": "Category update failed", "status": "Insufficient permissions"}}]}
{"usecase": {"name": "Create a Budget", "author": "Shanto", "scenario": "User creates a new Budget to track income and expenses for a specific time period.", "actors": "User", "preconditions": "User is logged into their account.", "steps": ["User selects 'Create New Budget' from the dashboard.", "User provides the 'Budget Name', sets the currency, number format and sets the time period (monthly, yearly, etc.).", "User enters initial income sources and categories for the expenses (Bills, Needs, Wants, etc.).", "System saves the budget and returns the user to the dashboard."]}, "testcases": [{"name": "Valid Budget Creation", "description": "Verify that a user can successfully create a budget with valid details.", "input": {"budgetName": "September 2024", "timePeriod": "Monthly", "incomeSources": ["Salary"], "expenseCategories": ["Bills", "Rent/Mortgage", "Utilities"]}, "expected": {"outcome": "Budget created successfully", "status": "Success"}}, {"name": "Missing Budget Name", "description": "Verify that the system handles the case where the user tries to create a budget without providing the budget name", "input": {"budgetName": "", "timePeriod": "Monthly", "incomeSources": ["Freelance"], "expenseCategories": ["Entertainment"]}, "expected": {"outcome": "Budget creation failed", "status": "Error: Missing budget Name"}}, {"name": "Duplicate Budget Name", "description": "Verify that the sytem prevents the creation of multiple budgets with the same name", "input": {"budgetName": "September 2024", "timePeriod": "Monthly", "incomeSources": ["Salary"], "expenseCategories": ["Groceries", "Medical Emergencies", "Vacation", "YNAM Subscription"]}, "expected": {"outcome": "Budget creation failed", "status": "Error: Duplicate budget name"}}, {"name": "Successful Budget creation with default Categories", "description": "Create a new budget and check if the default spending categories (if any exist) are set up automatically.", "input": {"budgetName": "October 2024", "timePeriod": "Monthly", "incomeSources": ["Salary", "Freelance"], "expenseCategories": ""}, "expected": {"outcome": "The Budget is created successfully", "status": "Success"}}, {"name": "Max Character Limit for Budget Name", "description": "Try creating a budget name that exceeds the character limit", "input": {"budgetName": "Qwertyuiop asdfghjkl zxcvbnm qaz wsx edc rfv tgb", "timePeriod": "Monthly", "incomeSources": ["Selling Home stuffs"], "expenseCategories": ["Dining Out", "Internet", "Phone"]}, "expected": {"outcome": "Restrict the input", "status": "Warning: Budget Name exceeded the limit"}}]}
{"usecase": {"name": "Sync Bank Account", "author": "Rayan", "scenario": "User links their bank account to sync transactions automatically.", "actors": "User", "preconditions": "User must have an account with a supported bank.", "steps": ["User navigates to the 'Bank Accounts' section", "User selects their bank and provides authentication details", "System syncs the transactions"]}, "testcases": [{"name": "Valid Bank Sync", "description": "Verify that the user can sync their bank account successfully.", "input": {"bankName": "ExampleBank", "authDetails": {"username": "user123", "password": "pass123"}}, "expected": {"outcome": "Sync successful", "status": "Transactions synced"}}, {"name": "Invalid Bank Credentials", "description": "Verify that the system handles invalid bank credentials properly.", "input": {"bankName": "ExampleBank", "authDetails": {"username": "wronguser", "password": "wrongpass"}}, "expected": {"outcome": "Sync failed", "status": "Invalid credentials"}}]}
{"usecase": {"id": "by 2005091", "name": "Browse, Search Books and Filter", "scenario": "User browses and searches the website to find books based on categories, authors, titles and apply filters.", "actors": "User", "preconditions": "User accesses the Rokomari website.", "steps": ["User navigates to the books section.", "User selects categories or applies filters such as author, genre and publication.", "User searches by title, author, or category using the search bar.", "The system displays matching results based on search and filter criteria."]}, "testcases": [{"name": "Valid Book Search by Title", "description": "Verify that the user can search for a book by a valid title and browse results.", "input": {"searchQuery": "Math Olympiad"}, "expected": {"outcome": "Relevant books are displayed successfully.", "status": "Success"}}, {"name": "Search with No Results", "description": "Ensure that the system handles searches with no matching results.", "input": {"searchQuery": "Unknown Title"}, "expected": {"outcome": "No results found message is displayed.", "status": "No Results"}}, {"name": "Search with Special Characters", "description": "Ensure the system handles special characters in search queries correctly.", "input": {"searchQuery": "#$@%BookTitle"}, "expected": {"outcome": "No results found message is displayed.", "status": "No Results"}}, {"name": "Filter by Genre , Publication and Author", "description": "Verify that the system applies multiple filters and displays results accordingly.", "input": {"filters": {"author": "Rahim", "genre": "Fiction", "publication": "prothoma prokashon"}}, "expected": {"outcome": "Books matching the selected genre ,author and publication are displayed.", "status": "Success"}}, {"name": "Invalid Filter Input", "description": "Ensure that the system handles invalid filter inputs gracefully.", "input": {"filters": {"rating": "InvalidRating"}}, "expected": {"outcome": "No results found or error message is displayed.", "status": "Failed"}}]}
{"usecase": {"id": "by 2005091", "name": "Add to Cart", "scenario": "User adds a selected book to the shopping cart for future checkout.", "actors": "User", "preconditions": "User has found a book on Rokomari.com.", "steps": ["User selects a book and clicks on 'Add to Cart'.", "The system adds the book to the cart and confirms the addition."]}, "testcases": [{"name": "Valid Add to Cart", "description": "Verify that a book can be successfully added to the cart.", "input": {"bookID": "12345"}, "expected": {"outcome": "Book added to cart.", "status": "Success"}}, {"name": "Add Out of Stock Book", "description": "Verify the system's behavior when adding an out-of-stock book to the cart.", "input": {"bookID": "54321"}, "expected": {"outcome": "Out of stock message is displayed.", "status": "Failed"}}, {"name": "Add Multiple Copies", "description": "Ensure the system can handle adding multiple copies of the same book.", "input": {"bookID": "12345", "quantity": 5}, "expected": {"outcome": "Multiple copies added to cart.", "status": "Success"}}, {"name": "Add More Copies Than Available", "description": "Verify the system's behavior when trying to add more copies of a book than are available in stock.", "input": {"bookID": "12345", "quantity": 10}, "expected": {"outcome": "System adds only the available copies to the cart and displays a message indicating limited stock.", "status": "Partial Success"}}]}
{"usecase": {"id": "by 2005092", "name": "Complete Checkout and Payment", "scenario": "User checks out and completes payment.", "actors": "User", "preconditions": "User has books in the cart and proceeds to checkout.", "steps": ["User reviews the cart.", "User reviews account details and selects the delivery address", "User selects payment method.", "System processes payment and confirms order."]}, "testcases": [{"name": "Successful Payment", "description": "Verify payment completion with valid methods.", "input": {"paymentMethod": "Cash on Delivery", "amount": 348}, "expected": {"outcome": "Order placed. Order ID given 16193274886385.", "status": "Success"}}, {"name": "Payment Declined", "description": "Ensure proper handling of declined payment.", "input": {"paymentMethod": "bKash", "amount": 348, "Status": "Incorrect PIN entered"}, "expected": {"outcome": "Payment failed.", "status": "Failed"}}]}
{"usecase": {"id": "by 2005092", "name": "Track Order and Receive Notifications", "scenario": "User tracks the order and receives updates.", "actors": "User, System", "preconditions": "User has placed an order.", "steps": ["User checks 'My Orders'.", "User selects delivery status.", "User receives system notifications."]}, "testcases": [{"name": "Valid Order Tracking", "description": "Ensure users can track orders.", "input": {"orderID": "16193274886385"}, "expected": {"outcome": "Order status displayed.", "status": "Tracking Successful"}}, {"name": "Receive Notifications", "description": "Ensure notifications are shown correctly.", "input": {}, "expected": {"outcome": "Notifications displayed.", "status": "Success"}}]}
{"usecase": {"id": "by 2005093", "name": "Sign In/Sign Up", "scenario": "User  signs in or signs up using email/phone number or social media.", "actors": [{"role": "User ", "description": "The individual who wishes to access their account.", "goals": ["Access account features.", "Create a new account if not registered.", "Securely log out when finished."]}, {"role": "System", "description": "The application that authenticates the user and manages account creation.", "responsibilities": ["Verify user credentials.", "Send OTP for account creation.", "Grant access to authorized users.", "Maintain session security."]}, {"role": "Facebook", "description": "The social media platform that allows users to sign in with their Facebook account.", "responsibilities": ["Authenticate user credentials.", "Provide user data to the system."]}, {"role": "Google", "description": "The search engine platform that allows users to sign in with their Google account.", "responsibilities": ["Authenticate user credentials.", "Provide user data to the system."]}], "preconditions": ["User  has a compatible web browser or mobile app.", "User  has a valid Facebook or Google account (for social sign-in)."], "steps": ["User  clicks on 'Sign In' and is redirected to the Sign In/Sign Up page.", "User  selects either Google or Facebook login option or manual login.", "If manual login, then user enters their phone number or email.", "System checks if an account exists with the provided phone number or email.", "If no account exists, System sends an OTP to the corresponding number or email.", "User  enters the received OTP.", "If OTP is correct, System creates a new account and logs the user in automatically.", "If an account exists, user is prompted to enter their password.", "System verifies the password.", "If password is correct, System logs the user in automatically.", "User  can now access account features.", "User  clicks the 'Log Out' button.", "System logs the user out and redirects to the Sign In/Sign Up page.", "System invalidates the session to prevent unauthorized access."]}, "testcases": [{"name": "Valid Manual Login", "description": "Ensure users can log in with valid credentials.", "input": {"username": "2005093@gmail.com", "password": "password1234"}, "expected": {"outcome": "User  logged in successfully and redirected to the homepage", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Invalid Manual Login", "description": "Ensure users receive an error message when logging in with invalid credentials.", "input": {"username": "2005093@gmail.com", "password": "wrongpassword"}, "expected": {"outcome": "Login failed due to invalid credentials.", "status": "Failure", "errorMessage": "Invalid password."}, "postconditions": ["User  remains on the login page and can attempt to log in again.", "System does not establish a session."]}, {"name": "Facebook Log In", "description": "Ensure users can log in with their Facebook account.", "input": {"facebookToken": "facebook_token_1234"}, "expected": {"outcome": "User  logged in successfully with Facebook.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Google Log In", "description": "Ensure users can log in with their Google account.", "input": {"googleToken": "google_token_1234"}, "expected": {"outcome": "User  logged in successfully with Google.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Concurrent Log In Attempt", "description": "Ensure the system handles concurrent log in attempts from the same user.", "input": {"username": "2005093@gmail.com", "password": "password1234", "concurrentAttempt": true}, "expected": {"outcome": "System accepts concurrent log in attempts.", "status": "Success", "errorMessage": null}, "postconditions": ["Existing session remains active."]}, {"name": "Idle Session Expiration", "description": "Ensure the system logs out users after a prolonged period of inactivity (e.g., a few days).", "input": {"username": "2005093@gmail.com", "password": "password1234", "idleTimeout": 3}, "expected": {"outcome": "User  is logged out due to prolonged inactivity.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is redirected to the login page and cannot access account features.", "Session is invalidated to prevent unauthorized access."]}, {"name": "Successful Log Out", "description": "Ensure users can log out successfully.", "input": {}, "expected": {"outcome": "User  logged out successfully.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is redirected to the login page and cannot access account features.", "Session is invalidated to prevent unauthorized access."]}]}
{"usecase": {"id": "by 2005093", "name": "Apply Voucher or Promo Code", "scenario": "User  applies a voucher or promo code during checkout.", "actors": [{"role": "User ", "description": "The individual who wishes to apply a discount code."}, {"role": "System", "description": "The application that processes the discount code."}], "preconditions": ["User  has a valid account.", "User  has items in their cart.", "User  has a valid voucher or promo code."], "steps": ["User  enters the voucher or promo code during checkout.", "System checks if the code is valid.", "If the code is invalid, the system returns an error message.", "If the code is valid, the system checks if it is expired.", "If the code is expired, the system returns an error message.", "If the code is not expired, the system retrieves the discount percentage.", "System applies the discount to the original price.", "If multiple coupons are applied, system calculates the individual discounts.", "If total discounts exceed 100%, the purchase price is set to tk0 but shipping fees remain.", "If multiple invalid attempts are made, the system deducts all Rokomari Points from previous purchases."]}, "testcases": [{"name": "Invalid Discount Code", "description": "Ensure an error is returned for an invalid discount code.", "input": {"discountCode": "INVALID_CODE"}, "expected": {"outcome": "Error message returned: 'Invalid code.'", "status": "Failure"}}, {"name": "Expired Discount Code", "description": "Ensure an error is returned for an expired discount code.", "input": {"discountCode": "EXPIRED_CODE"}, "expected": {"outcome": "Error message returned: 'Code expire date over.'", "status": "Failure"}}, {"name": "Valid Discount Code", "description": "Ensure a valid discount code applies the correct discount.", "input": {"discountCode": "VALID_CODE", "originalPrice": 100.0, "discountPercentage": 20}, "expected": {"outcome": "Discount applied. New price is tk80.00.", "status": "Success"}}, {"name": "Multiple Valid Discount Codes", "description": "Ensure multiple valid discount codes apply correctly.", "input": {"discountCodes": ["VALID_CODE_1", "VALID_CODE_2"], "originalPrice": 150.0, "discountPercentages": [30, 20]}, "expected": {"outcome": "Total discount applied. New price is tk90.00.", "status": "Success"}}, {"name": "Total Discount Exceeds 100%", "description": "Ensure the purchase price is set to $0 when total discounts exceed 100%.", "input": {"discountCodes": ["VALID_CODE_1", "VALID_CODE_2"], "originalPrice": 50.0, "discountPercentages": [60, 50]}, "expected": {"outcome": "Total discount applied. Purchase price is tk0.00, but shipping fees apply.", "status": "Success"}}, {"name": "Multiple Invalid Attempts", "description": "Ensure penalty is applied after multiple invalid attempts.", "input": {"invalidAttempts": 5, "currentRewardPoints": 100}, "expected": {"outcome": "All reward points deducted. Current Rokomari Points are 0.", "status": "Success"}}]}
{"usecase": {"id": "by 2005099", "name": "Income by Affiliate Role", "scenario": "User recommends others any rokomari product and if anyone buys the product through the recommendation, the first user get a commission on the sale and later can withdraw the money following appropriate process.", "actors": "User, System, other user who buys the product", "preconditions": "User has an affiliate account and updated profile with compulsory information.", "steps": ["User takes any product link on rokomari.", "Generate recommendation link from the affiliate report page using the link copied before.", "Share the recommendation link.", "Someone buys the product from rokomari through the recommendation link.", "System adds the promised commossion money to the affiliate-account.", "Affiliate-user withdraws the money by the transaction method provided in profile."]}, "testcases": [{"name": "Successful Recommendation Link Generation", "description": "Verify that the user has updated all the compulsory profile information.", "input": {"productLink": "https://www.rokomari.com/electronics/98744/a4-tech-wired-optical-mouse-2x-click-usb-black-op-620d", "generateLinkButton": "ON"}, "expected": {"outcome": "Recommendation link generated. Share the link with others.", "status": "Success"}}]}
{"usecase": {"id": "by 2005099", "name": "Add to Wish List", "scenario": "User adds books/other items to a personal list for future order.", "actors": "User", "preconditions": "User is logged in successfully and has found a product.", "steps": ["User adds a product to their list.", "System confirms the addition."]}, "testcases": [{"name": "Add product to List", "description": "Ensure products can be added to the personal list.", "input": {"productID": "15342"}, "expected": {"outcome": "Book added to wishlist. You can visit your wishlist and check.", "status": "Success"}}]}
{"usecase": {"id": "by 2005100", "name": "Personalized Book Recommendations", "scenario": "System customizes the homepage with book recommendations based on user purchases, input genres, and past searches.", "actors": "User, System", "preconditions": "User has provided input genres, made searches, or has made purchases.", "steps": ["System prompts the user to select at least 3 genres.", "User selects genres and provides at least 5 books from those genres.", "System records the user's searches, input, and purchase history.", "System analyzes the combined data from purchases, genre input, and searches.", "System customizes the homepage with personalized recommendations based on the analysis."]}, "testcases": [{"name": "Personalized Homepage Recommendations Based on All Inputs", "description": "Ensure the system customizes the homepage based on user searches, input genres, and past purchases.", "input": {"userID": "U12345", "selectedGenres": ["Fiction", "Self-Help", "Science"], "selectedBooks": ["Amar Ache Jol", "You Can Win", "Rich Dad Poor Dad", "Cosmos", "Golpoguccho"], "pastPurchases": ["Fiction", "History"], "searchHistory": ["Science Fiction", "Biography"]}, "expected": {"outcome": "Homepage displays book recommendations relevant to the selected genres, books, searches, and past purchases.", "status": "Success"}}, {"name": "No Recommendations for New Users", "description": "Ensure that the system handles cases where no purchases, searches, or input genres exist.", "input": {"userID": "U67890", "selectedGenres": [], "selectedBooks": [], "pastPurchases": [], "searchHistory": []}, "expected": {"outcome": "System displays a message to prompt the user to select genres and books for personalized recommendations.", "status": "No Recommendations"}}, {"name": "Update Based on New User Preferences", "description": "Ensure that the homepage updates when the user selects new genres or books.", "input": {"userID": "U12345", "selectedGenres": ["Fantasy", "Mystery", "Romance"], "selectedBooks": ["The Complete Sherlock Holmes", "Na Hanyate", "Macbeth", "Harry Potter", "Arabian Nights"], "pastPurchases": ["Mystery"], "searchHistory": ["Romantic Novels"]}, "expected": {"outcome": "Homepage updates with new recommendations based on the updated genres and book selections along with past purchases and searches.", "status": "Success"}}]}
{"usecase": {"id": "by 2005100", "name": "Redeem and Apply Rokomari Reward Points", "scenario": "Users redeem points for discounts or offers and apply those offers during checkout.", "actors": "User, System", "preconditions": "User is logged in and has sufficient reward points for redemption. There are redeemable offers available.", "steps": ["User navigates to the 'Rokomari Points' section in their profile dashboard.", "System displays the user's available reward points balance and the list of redeemable offers.", "User selects an offer to redeem points (e.g., 40 TK discount for 400 points).", "System deducts the points from the user's balance and confirms the offer is successfully redeemed.", "The redeemed offer is stored in the user's account for future use.", "When the user checks out with items in the cart, the system applies the redeemed offer if the conditions are met (e.g., minimum order value).", "System updates the cart total, reflecting the redeemed offer (e.g., discount)."]}, "testcases": [{"name": "Successful Points Redemption", "description": "Ensure that the user can successfully redeem reward points for a discount offer.", "input": {"userID": "U12345", "availablePoints": 500, "offerSelected": {"offerID": "OFFER1", "pointsRequired": 400, "discount": "40 TK"}}, "expected": {"outcome": "The system deducts 400 points from the user's balance and applies the 40 TK discount during checkout.", "status": "Success"}}, {"name": "Insufficient Points for Redemption", "description": "Verify that the system prevents the user from redeeming points if they do not have enough points.", "input": {"userID": "U12345", "availablePoints": 100, "offerSelected": {"offerID": "OFFER1", "pointsRequired": 400}}, "expected": {"outcome": "The system displays an error message indicating insufficient points for redemption.", "status": "Failed"}}, {"name": "Apply Redeemed Offer During Checkout", "description": "Ensure that the redeemed offer is applied during the user's checkout process.", "input": {"userID": "U12345", "redeemedOffer": {"offerID": "OFFER1", "discount": "40 TK", "minimumOrderAmount": 200}, "cartTotal": 300}, "expected": {"outcome": "The system applies the 40 TK discount to the cart, reducing the total to 260 TK.", "status": "Success"}}, {"name": "Offer Not Applied If Minimum Order Not Met", "description": "Verify that the system does not apply the redeemed offer if the minimum order amount is not met.", "input": {"userID": "U12345", "redeemedOffer": {"offerID": "OFFER1", "discount": "40 TK", "minimumOrderAmount": 200}, "cartTotal": 150}, "expected": {"outcome": "The system does not apply the offer and displays a message indicating the minimum order amount is not met.", "status": "Failed"}}]}
{"usecase": {"id": "by 2005109", "name": "Register a New Account", "scenario": "User registers a new account on the platform.", "actors": "User,System", "preconditions": "User is not registered.", "steps": ["User selects registration method (email, phone number, Google, or Facebook).", "For phone number or email registration: User enters their phone number or email address.", "System sends an OTP (verification code) to the phone number.", "User enters the OTP.", "System verifies the code and completes the registration.", "For Google or Facebook: User logs in with their respective account.", "System retrieves user information and completes the registration."]}, "testcases": [{"name": "Successful Phone Registration", "description": "Ensure users can register using a phone number.", "input": {"phone": "+8801734567890"}, "expected": {"outcome": "Verification code sent to phone number. Account registered after code verification.", "status": "Success"}}, {"name": "Successful Email Registration", "description": "Ensure users can register using an email address.", "input": {"email": "noushinaoishy@gmail.com"}, "expected": {"outcome": "Verification code sent to email. Account registered after code verification.", "status": "Success"}}, {"name": "Successful Google Registration", "description": "Ensure users can register using a Google account.", "input": {"method": "Google"}, "expected": {"outcome": "User logged in with Google and account registered.", "status": "Success"}}, {"name": "Successful Facebook Registration", "description": "Ensure users can register using a Facebook account.", "input": {"method": "Facebook"}, "expected": {"outcome": "User logged in with Facebook and account registered.", "status": "Success"}}, {"name": "Email Already Registered", "description": "Ensure system does not allow account creation with an email that is already registered.", "input": {"email": "existinguser@example.com"}, "expected": {"outcome": "Error message displayed: 'Email already registered.'", "status": "Failure"}}, {"name": "Invalid Email Format", "description": "Ensure users cannot register with an invalid email format.", "input": {"email": "invalid-email-format"}, "expected": {"outcome": "Error message displayed: 'Invalid email format.'", "status": "Failure"}}, {"name": "Invalid Phone Number Format", "description": "Ensure users cannot register with an invalid phone number format.", "input": {"phone": "12345"}, "expected": {"outcome": "Error message displayed: 'Invalid phone number format.'", "status": "Failure"}}, {"name": "Incorrect Verification Code", "description": "Ensure users cannot complete registration with an incorrect email verification code.", "input": {"email": "noushinaoishy@gmail.com", "verificationCode": "wrongCode"}, "expected": {"outcome": "Error message displayed: 'Invalid verification code.'", "status": "Failure"}}, {"name": "Google Account Linking Error", "description": "Ensure system handles errors during Google account linking (e.g., failed login, denied permissions).", "input": {"method": "Google", "error": "Google login failed"}, "expected": {"outcome": "Error message displayed: 'Google login failed.'", "status": "Failure"}}, {"name": "Facebook Account Linking Error", "description": "Ensure system handles errors during Facebook account linking (e.g., failed login, denied permissions).", "input": {"method": "Facebook", "error": "Facebook login failed"}, "expected": {"outcome": "Error message displayed: 'Facebook login failed.'", "status": "Failure"}}]}
{"usecase": {"id": "by 2005109", "name": "Submit Review and Rating", "scenario": "User submits a review and rating for a book.", "actors": "User", "preconditions": "User may or may not have purchased the book.", "steps": ["User writes a review (at least 25 characters) and rates the book.", "User optionally uploads a photo with the review.", "If the user has purchased the book, the system marks the review as a 'Verified Purchase'.", "System confirms the submission."]}, "testcases": [{"name": "Submit Review with Verified Purchase and Optional Photo", "description": "Ensure reviews are posted with or without a photo when the user has purchased the book and the review meets the character limit.", "input": {"reviewText": "This book is amazing! The story and characters are fantastic.", "rating": 5, "purchaseStatus": "Verified", "photo": "book.jpg"}, "expected": {"outcome": "Review posted with 'Verified Purchase' label. Photo included if uploaded.", "status": "Success"}}, {"name": "Submit Review without Purchase and Optional Photo", "description": "Ensure reviews are posted with or without a photo even if the user has not purchased the book, as long as the review meets the character limit.", "input": {"reviewText": "The book has an interesting concept, but lacks depth in some areas.", "rating": 4, "purchaseStatus": "Not Verified", "photo": "book.jpg"}, "expected": {"outcome": "Review posted without 'Verified Purchase' label. Photo included if uploaded.", "status": "Success"}}, {"name": "Submit Review with Less than 25 Characters", "description": "Ensure system prevents reviews with less than 25 characters from being posted.", "input": {"reviewText": "Great book!", "rating": 5, "purchaseStatus": ["Verified", "Non Verified"]}, "expected": {"outcome": "Error message displayed: 'Review must be at least 25 characters long.'", "status": "Failure"}}]}
{"usecase": {"name": "Flight Search and Booking", "scenario": "A user searches for a flight between two destinations and proceeds to book the desired flight.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects flight search option.", "User inputs destination, travel dates, and number of passengers.", "User clicks 'Search' to view available flights.", "System displays available flights.", "User selects a flight and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes payment and confirms booking."]}, "testcases": [{"name": "Valid Flight Search", "description": "Verify that a user can successfully search for available flights between two valid destinations.", "input": {"departure": "Dhaka", "destination": "Bangkok", "date": "2024-12-10"}, "expected": {"outcome": "Available flights are shown.", "status": "Success"}}, {"name": "Invalid Destination Input", "description": "Verify that the system handles the case where the user inputs an invalid destination.", "input": {"departure": "Dhaka", "destination": "", "date": "2024-12-10"}, "expected": {"outcome": "Error message is displayed indicating invalid input.", "status": "Failure"}}, {"name": "Successful Flight Booking", "description": "Verify that a user can successfully book a flight after selecting it.", "input": {"selectedFlight": "Flight-XYZ123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Flight is booked successfully, and confirmation is sent.", "status": "Success"}}, {"name": "Failed Payment for Booking", "description": "Verify that the system handles failed payments during the booking process.", "input": {"selectedFlight": "Flight-XYZ123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, booking is not confirmed.", "status": "Failure"}}], "author": "2005094"}
{"usecase": {"name": "Hotel Search and Booking", "scenario": "A user searches for available hotels in a destination and proceeds to book a hotel.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects hotel search option.", "User inputs destination, travel dates, and number of rooms and guests.", "User clicks 'Search' to view available hotels.", "System displays available hotels.", "User selects a hotel and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes payment and confirms booking."]}, "testcases": [{"name": "Valid Hotel Search", "description": "Verify that a user can successfully search for available hotels in a valid destination.", "input": {"destination": "Cox's Bazar", "check_in_date": "2024-11-15", "check_out_date": "2024-11-20"}, "expected": {"outcome": "Available hotels are shown.", "status": "Success"}}, {"name": "Invalid Check-in Date", "description": "Verify that the system handles invalid check-in dates.", "input": {"destination": "Cox's Bazar", "check_in_date": "2023-01-15", "check_out_date": "2024-11-20"}, "expected": {"outcome": "Error message is displayed indicating invalid check-in date.", "status": "Failure"}}, {"name": "Successful Hotel Booking", "description": "Verify that a user can successfully book a hotel after selecting it.", "input": {"selectedHotel": "Hotel-ABC123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Hotel is booked successfully, and confirmation is sent.", "status": "Success"}}, {"name": "Hotel Booking Failed Payment", "description": "Verify that the system handles failed payments during the hotel booking process.", "input": {"selectedHotel": "Hotel-ABC123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, booking is not confirmed.", "status": "Failure"}}], "author": "2005107"}
{"usecase": {"name": "Cancel Flight Booking", "scenario": "A user cancels a booked flight.", "actors": "User, System", "preconditions": "User has booked a flight through the system.", "steps": ["User navigates to 'My Bookings' section.", "User selects the flight booking to cancel.", "User confirms the cancellation.", "System processes the cancellation and issues a refund."]}, "testcases": [{"name": "Valid Flight Cancellation", "description": "Verify that a user can successfully cancel a booked flight.", "input": {"bookingID": "XYZ123", "confirmation": true}, "expected": {"outcome": "Flight is canceled, refund is processed.", "status": "Success"}}, {"name": "Invalid Booking ID for Cancellation", "description": "Verify that the system handles invalid booking IDs during cancellation.", "input": {"bookingID": "Invalid123", "confirmation": true}, "expected": {"outcome": "Error message is displayed indicating invalid booking ID.", "status": "Failure"}}], "author": "2005116"}
{"usecase": {"name": "Apply Discount Code", "scenario": "A user applies a valid or invalid discount code during payment.", "actors": "User, System", "preconditions": "User has selected a flight or hotel and is at the payment stage.", "steps": ["User inputs discount code.", "System validates the discount code.", "System applies the discount if the code is valid."]}, "testcases": [{"name": "Valid Discount Code", "description": "Verify that a user can successfully apply a valid discount code.", "input": {"discountCode": "SAVE10"}, "expected": {"outcome": "Discount is applied successfully.", "status": "Success"}}, {"name": "Invalid Discount Code", "description": "Verify that the system handles invalid discount codes.", "input": {"discountCode": "INVALID50"}, "expected": {"outcome": "Error message is displayed indicating invalid discount code.", "status": "Failure"}}], "author": "2005116"}
{"usecase": {"name": "Rental Car Search and Booking", "scenario": "A user searches for rental cars at a destination and proceeds to book a car.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects the rental car search option.", "User inputs destination, pick-up/drop-off dates, and the type of car.", "User clicks 'Search' to view available rental cars.", "System displays available cars.", "User selects a car and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes the payment and confirms the car rental booking."]}, "testcases": [{"name": "Valid Car Search", "description": "Verify that a user can successfully search for available rental cars in a valid destination.", "input": {"destination": "Dhaka", "pick_up_date": "2024-12-01", "drop_off_date": "2024-12-05"}, "expected": {"outcome": "Available rental cars are shown.", "status": "Success"}}, {"name": "Invalid Pick-up Date", "description": "Verify that the system handles invalid pick-up dates.", "input": {"destination": "Dhaka", "pick_up_date": "2022-01-01", "drop_off_date": "2024-12-05"}, "expected": {"outcome": "Error message indicating the invalid pick-up date is displayed.", "status": "Failure"}}, {"name": "Successful Car Booking", "description": "Verify that a user can successfully book a rental car after selecting it.", "input": {"selectedCar": "Car-XYZ123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Car rental booking is confirmed, and confirmation is sent.", "status": "Success"}}, {"name": "Car Booking Failed Payment", "description": "Verify that the system handles failed payments during car booking.", "input": {"selectedCar": "Car-XYZ123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, and booking is not confirmed.", "status": "Failure"}}], "author": "2005094"}
{"usecase": {"name": "Travel Insurance Purchase", "scenario": "A user opts to purchase travel insurance while booking a flight or hotel.", "actors": "User, System, Insurance Provider", "preconditions": "User is booking a flight or hotel and the system offers travel insurance.", "steps": ["User selects the option to add travel insurance during booking.", "System displays available insurance plans.", "User selects an insurance plan and confirms purchase.", "System processes the payment for the insurance.", "Insurance provider sends confirmation details.", "System sends insurance confirmation to the user."]}, "testcases": [{"name": "Valid Insurance Purchase", "description": "Verify that a user can successfully purchase travel insurance during flight or hotel booking.", "input": {"selectedInsurancePlan": "Plan A", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Travel insurance is successfully purchased, and confirmation is sent.", "status": "Success"}}, {"name": "Failed Insurance Payment", "description": "Verify that the system handles failed payments for insurance.", "input": {"selectedInsurancePlan": "Plan A", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, and insurance is not purchased.", "status": "Failure"}}, {"name": "Insurance Not Selected", "description": "Verify that the system handles the scenario where the user does not select travel insurance.", "input": {"selectedInsurancePlan": null}, "expected": {"outcome": "No travel insurance is added to the booking.", "status": "Success"}}, {"name": "Invalid Insurance Plan", "description": "Verify that the system handles invalid insurance plan selections.", "input": {"selectedInsurancePlan": "Invalid Plan"}, "expected": {"outcome": "Error message indicating the invalid insurance plan is displayed.", "status": "Failure"}}], "author": "2005107"}
{"usecase": {"name": "Joining the Young Pilot Program", "scenario": "A user applies for the Young Pilot Program on the GoZayaan website.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has access to the GoZayaan website.", "The user has the required information (e.g., name, age, email, academic details)."], "steps": ["User visits the GoZayaan website.", "The user clicks 'Join Young Pilot Program.'", "The system displays an application form.", "The user fills out the form with personal details.", "The user uploads necessary documents.", "The user reviews and submits the form.", "The system sends a confirmation message or email.", "GoZayaan reviews the application.", "If accepted, the user is notified with further steps."]}, "testcases": [{"name": "Successful Application Submission", "description": "Verify the user can submit the application successfully.", "input": {"form": "Filled with valid information", "documents": "Uploaded correctly"}, "expected": {"outcome": "Application submitted with success message and acknowledgment email."}}, {"name": "Form Validation - Missing Required Fields", "description": "Verify the system prompts the user to complete all required fields.", "input": {"form": "Incomplete (missing required fields)"}, "expected": {"outcome": "Error message displayed indicating missing fields."}}, {"name": "Invalid Input - Email Format", "description": "Ensure the system validates the email format.", "input": {"email": "Incorrect format (e.g., 'user@domain')"}, "expected": {"outcome": "Error message prompting for a valid email."}}, {"name": "Document Upload Validation", "description": "Verify the system allows only specific document formats.", "input": {"file": "Unsupported format (e.g., .exe)"}, "expected": {"outcome": "Error message indicating valid file formats."}}, {"name": "Maximum File Size for Upload", "description": "Verify the system enforces a file size limit.", "input": {"file": "Larger than allowed size"}, "expected": {"outcome": "Error message indicating the file size is too large."}}, {"name": "Acknowledgment Message", "description": "Verify the user receives an acknowledgment message after submission.", "input": {"form": "Successfully submitted"}, "expected": {"outcome": "Success message displayed and email sent."}}, {"name": "Application Status Check", "description": "Verify the user can check their application status.", "input": {"login": "User logs into their account"}, "expected": {"outcome": "Application status displayed (e.g., 'Under Review', 'Accepted', 'Rejected')."}}], "author": "2005108"}
{"usecase": {"name": "Viewing and Managing Booked Trips", "scenario": "A user views, modifies, or cancels their booked trips on GoZayaan.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has an account on the GoZayaan platform.", "The user has previously booked a flight, hotel, or tour."], "steps": ["User logs into their GoZayaan account.", "The user navigates to the 'My Trips' section.", "The system displays a list of previously booked trips.", "The user selects a trip to view more details.", "The system shows trip details with options to modify or cancel.", "The user may modify or cancel the trip if allowed."]}, "testcases": [{"name": "View Booked Trips", "description": "Verify the user can view all previously booked trips.", "input": {"login": "User logs into their account"}, "expected": {"outcome": "List of booked trips displayed with details."}}, {"name": "Modify a Booked Trip", "description": "Verify the user can modify a booked trip if allowed.", "input": {"tripSelection": "Eligible trip selected for modification"}, "expected": {"outcome": "Trip details updated with modifications."}}, {"name": "Cancel a Booked Trip", "description": "Verify the user can cancel a booked trip if allowed.", "input": {"tripSelection": "Eligible trip selected for cancellation"}, "expected": {"outcome": "Trip canceled and confirmation sent to the user."}}, {"name": "View Trip Details", "description": "Verify the user can view detailed information of a specific trip.", "input": {"tripSelection": "User selects a specific trip"}, "expected": {"outcome": "Detailed trip information displayed."}}], "author": "2005112"}
{"usecase": {"name": "Requesting a Customized Tour", "scenario": "A user requests a customized tour through the GoZayaan platform.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has an account on the GoZayaan platform and is logged in.", "The user has location, travel date, and contact information ready."], "steps": ["User navigates to the 'Customized Tour' section.", "The system displays a form for tour details.", "The user fills in location, date, and contact information.", "The user adds any additional requirements.", "The user submits the form.", "A GoZayaan travel expert reviews the request and contacts the user.", "The travel expert sends a customized plan to the user.", "The user reviews the plan and proceeds with booking."]}, "testcases": [{"name": "Successful Customized Tour Request", "description": "Verify the user can submit a tour request successfully.", "input": {"form": "Filled with valid details"}, "expected": {"outcome": "Request submitted and confirmation message displayed."}}, {"name": "Form Validation - Missing Required Fields", "description": "Verify the system shows an error for missing fields.", "input": {"form": "Missing required fields"}, "expected": {"outcome": "Error message indicating missing fields."}}, {"name": "Invalid Date Format", "description": "Verify the system validates date format.", "input": {"date": "Incorrect format"}, "expected": {"outcome": "Error message prompting for valid date."}}, {"name": "Invalid Contact Information", "description": "Verify the system validates contact information.", "input": {"contact": "Invalid phone number or email"}, "expected": {"outcome": "Error message indicating invalid contact information."}}, {"name": "Acknowledgment Message", "description": "Verify the system sends acknowledgment after submission.", "input": {"form": "Successfully submitted"}, "expected": {"outcome": "Confirmation message displayed, and user is informed that a travel expert will contact them."}}, {"name": "Additional Requirements Input", "description": "Verify the user can add extra requirements.", "input": {"form": "Filled with additional requirements"}, "expected": {"outcome": "System accepts input and displays confirmation."}}], "author": "2005108"}
{"usecase": {"name": "Requesting a Refund for a Canceled Booking", "scenario": "A user requests a refund for a canceled booking through the GoZayaan platform.", "actors": ["User", "GoZayaan System", "Payment Processor"], "preconditions": ["The user has an account on the GoZayaan platform.", "The user has canceled a booking eligible for a refund."], "steps": ["User logs into their GoZayaan account.", "The user navigates to the 'My Trips' section.", "The system displays eligible canceled trips.", "The user selects a trip and requests a refund.", "The system processes the request and informs the user of the status.", "The refund is processed through the payment processor and credited to the user's payment method."]}, "testcases": [{"name": "Successful Refund Request", "description": "Verify the user can request a refund successfully.", "input": {"tripStatus": "Canceled and eligible for a refund"}, "expected": {"outcome": "Refund request submitted, confirmation message displayed, and user notified."}}, {"name": "Refund Eligibility Check", "description": "Verify the system allows refunds only for eligible bookings.", "input": {"tripStatus": "Canceled but not eligible for a refund"}, "expected": {"outcome": "Error message indicating ineligibility for a refund."}}, {"name": "Refund Confirmation Message", "description": "Verify the user receives a confirmation message after requesting a refund.", "input": {"refundRequest": "Successfully submitted"}, "expected": {"outcome": "Confirmation message displayed and email sent to the user."}}, {"name": "Refund Processing Time", "description": "Verify the system informs the user about the expected refund processing time.", "input": {"refundRequest": "Submitted"}, "expected": {"outcome": "Estimated processing time displayed and email notification sent."}}], "author": "2005112"}
{"usecase": {"name": "User Registration", "scenario": "A user registers on eBay by providing personal information and agreeing to terms and conditions.", "actors": "User", "preconditions": "User has not previously registered on eBay.", "steps": ["User provides email, password, and other required details.", "User agrees to terms and conditions.", "User submits the registration form.", "System sends a confirmation email."], "author": "2005096"}, "testcases": [{"name": "Valid User Registration", "description": "Verify that a user can successfully register with valid information.", "input": {"email": "user@example.com", "password": "Password@123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration successful", "status": "Confirmation email sent"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents registration when the email is in invalid format", "input": {"email": "user@invalid", "password": "Password123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Invalid email format'"}}, {"name": "Weak Password", "description": "Verify that the system prevents registration with a weak password.", "input": {"email": "user@example.com", "password": "123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Password is too weak'"}}, {"name": "Missing Mandatory Fields", "description": "Verify that the system prevents registration when required fields are missing.", "input": {"email": "user@example.com", "password": "", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Password is missing!'"}}]}
{"usecase": {"name": "User Login", "scenario": "A registered user logs in to their account using valid credentials.", "actors": "User", "preconditions": "User is already registered on eBay.", "steps": ["User provides email and password.", "User submits the login form.", "System validates the credentials.", "User is logged in and redirected to homepage."], "author": "2005096"}, "testcases": [{"name": "Valid Login", "description": "Verify that the user is logged in with valid credentials.", "input": {"email": "user@example.com", "password": "Password123"}, "expected": {"outcome": "Login successful!", "status": "Redirected to homepage"}}, {"name": "Invalid Password", "description": "Verify that the system prevents login with an incorrect password.", "input": {"email": "user@example.com", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Error message: 'Password is incorrect'"}}, {"name": "Unregistered Email", "description": "Verify that the system prevents login if the email is unregistered", "input": {"email": "unregistered@example.com", "password": "Password123"}, "expected": {"outcome": "Login failed", "status": "Error message: 'Email not found'"}}]}
{"usecase": {"name": "Password Reset", "scenario": "A user resets their password after forgetting it.", "actors": "User", "preconditions": "User has an existing account and access to the registered email.", "steps": ["User clicks on 'Forgot Password'.", "User provides the registered email.", "System sends a password reset link to the user's email.", "User clicks the link and resets the password."], "author": "2005096"}, "testcases": [{"name": "Valid Password Reset", "description": "Verify that a user can reset their password successfully using a valid email.", "input": {"email": "john.doe@example.com", "newPassword": "NewPassword123"}, "expected": {"outcome": "Password reset successful.", "status": "Success"}}, {"name": "Invalid Email for Password Reset", "description": "Verify that the system does not send a reset link if the email is not registered.", "input": {"email": "unknown@example.com"}, "expected": {"outcome": "Reset failed. Email not registered.", "status": "Failed"}}]}
{"usecase": {"name": "Search for Items", "scenario": "User searches for items by entering keywords into the search bar.", "actors": "User", "preconditions": "User is on the eBay homepage or search page.", "steps": ["User enters keywords into the search bar.", "User submits the search query.", "System displays a list of matching items."], "author": "2005095"}, "testcases": [{"name": "Valid Search", "description": "Verify that the system returns relevant search results for valid keywords.", "input": {"searchQuery": "laptop"}, "expected": {"outcome": "Search results displayed", "status": "Items matching 'laptop' are shown"}}, {"name": "No Search Results", "description": "Verify that the system handles cases where no items match the search query.", "input": {"searchQuery": "rareitemxyz"}, "expected": {"outcome": "No results displayed", "status": "Message: 'No items found for rareitemxyz'"}}]}
{"usecase": {"name": "Purchase Item (Buy It Now)", "scenario": "User purchases an item using the 'Buy It Now' option.", "actors": "User", "preconditions": "User is logged in and viewing an item available for 'Buy It Now'.", "steps": ["User selects 'Buy It Now' option.", "User confirms the purchase.", "System processes the payment.", "Purchase is confirmed, and the item is marked as sold."], "author": "2005095"}, "testcases": [{"name": "Successful Purchase", "description": "Verify that the user can successfully purchase an item using 'Buy It Now'.", "input": {"itemID": "12345", "paymentMethod": "Credit Card", "buyItNowPrice": 150}, "expected": {"outcome": "Purchase successful", "status": "Item marked as sold"}}, {"name": "Insufficient Funds", "description": "Verify that the system handles cases where the user has insufficient funds for the purchase.", "input": {"itemID": "12345", "paymentMethod": "Credit Card", "buyItNowPrice": 150, "accountBalance": 100}, "expected": {"outcome": "Purchase failed", "status": "Error message: 'Insufficient funds'"}}]}
{"usecase": {"name": "Bid on an Auction", "scenario": "A user places a bid on an auction for a product. The bid must be higher than the current highest bid, and the auction should still be open.", "actors": "User, System", "preconditions": "The auction is active, and the user is logged in.", "steps": ["User views the product and the auction details", "User places a bid that is higher than the current highest bid", "System accepts the bid and updates the auction"], "author": "2005095"}, "testcases": [{"name": "Successful Bid", "description": "Verify that a user can successfully place a valid bid on an active auction.", "input": {"currentHighestBid": 50, "userBid": 60}, "expected": {"outcome": "Bid placed successfully", "auctionStatus": "Bid Accepted"}}, {"name": "Bid Lower than Current Highest Bid", "description": "Verify that the system rejects a bid that is lower than the current highest bid.", "input": {"currentHighestBid": 70, "userBid": 65}, "expected": {"outcome": "Bid rejected", "auctionStatus": "Bid Too Low"}}, {"name": "Auction Closed", "description": "Verify that the system rejects a bid placed on a closed auction.", "input": {"auctionStatus": "Closed", "userBid": 100}, "expected": {"outcome": "Bid rejected", "auctionStatus": "Auction Closed"}}]}
{"usecase": {"name": "Message Seller", "scenario": "A user sends a message to the seller regarding a product.", "actors": "User, Seller", "preconditions": "User is logged in and viewing a product page.", "steps": ["User clicks on 'Contact Seller'.", "User composes a message and sends it.", "System forwards the message to the seller."], "author": "2005113"}, "testcases": [{"name": "Valid Message to Seller", "description": "Verify that a user can successfully send a message to the seller.", "input": {"productID": "12345", "message": "Is this product available in blue?"}, "expected": {"outcome": "Message sent successfully.", "status": "Success"}}, {"name": "Empty Message", "description": "Verify that the system prevents sending an empty message to the seller.", "input": {"productID": "12345", "message": ""}, "expected": {"outcome": "Message sending failed. Empty message error displayed.", "status": "Failed"}}]}
{"usecase": {"name": "Adding to Cart", "scenario": "User adds a product to their shopping cart.", "actors": "User", "preconditions": "User is logged in and viewing a product page.", "steps": ["User selects a product and clicks 'Add to Cart'.", "System confirms the product is added to the cart."], "author": "2005113"}, "testcases": [{"name": "Add Valid Product to Cart", "description": "Verify that a user can add a valid product to their cart.", "input": {"productID": "12345"}, "expected": {"outcome": "Product added to cart.", "status": "Success"}}, {"name": "Add Out-of-Stock Product", "description": "Verify that the system prevents adding an out-of-stock product to the cart.", "input": {"productID": "54321"}, "expected": {"outcome": "Product not added. Out of stock message displayed.", "status": "Failed"}}]}
{"usecase": {"name": "Placing an Order", "scenario": "User completes the checkout process to place an order.", "actors": "User", "preconditions": "User has items in their cart and is logged in.", "steps": ["User reviews their cart.", "User proceeds to checkout.", "User enters payment details and shipping address.", "User confirms the order.", "System processes the order and displays an order confirmation."], "author": "2005113"}, "testcases": [{"name": "Successful Order Placement", "description": "Verify that the user can successfully place an order with valid payment and shipping details.", "input": {"cartItems": ["Product1", "Product2"], "paymentDetails": {"cardNumber": "4111111111111111", "expiry": "12/25", "CVV": "123"}, "shippingAddress": "123 Main St, City, Country"}, "expected": {"outcome": "Order placed successfully.", "status": "Confirmed"}}, {"name": "Failed Order Due to Invalid Payment", "description": "Verify that the order placement fails if the payment details are invalid.", "input": {"cartItems": ["Product1", "Product2"], "paymentDetails": {"cardNumber": "0000000000000000", "expiry": "12/25", "CVV": "123"}, "shippingAddress": "123 Main St, City, Country"}, "expected": {"outcome": "Order failed. Invalid payment details.", "status": "Failed"}}]}
{"usecase": {"name": "Track Order", "scenario": "User tracks the status of their order after purchase.", "actors": "User", "preconditions": "User has placed an order and is logged into their account.", "steps": ["User navigates to 'My Orders'.", "User selects the order to track.", "System displays the current tracking status."], "author": "2005111"}, "testcases": [{"name": "Valid Order Tracking", "description": "Verify that a user can successfully track the status of their order.", "input": {"orderID": "123ABC"}, "expected": {"outcome": "Tracking information displayed successfully.", "status": "Success"}}, {"name": "Invalid Order ID", "description": "Verify that the system handles an invalid order ID during tracking.", "input": {"orderID": "XYZ123"}, "expected": {"outcome": "Order not found. Tracking failed.", "status": "Failed"}}]}
{"usecase": {"name": "Leave feedback and rating", "scenario": "A user is giving review and rating of a product.", "actors": "User", "preconditions": "The user must buy the product.", "steps": ["User navigates to order history", "User selects the order to review", "User writes a review", "User gives a product rating", "User submits the review"], "author": "2005111"}, "testcases": [{"name": "Successful Review Submission", "description": "Verify that the user submitted product rating and the review textbox is not empty.", "input": {"orderId": "order123"}, "expected": {"outcome": "Review submitted successfully", "status": "Success"}}, {"name": "Empty review textbox", "description": "Verify that the system prevents submission of empty review textbox.", "input": {"orderId": "order456"}, "expected": {"outcome": "Review submission failed", "status": "Failed to post review"}}, {"name": "No rating selected", "description": "Verify that the system prevents submission of unselected rating stars.", "input": {"orderId": "order45645"}, "expected": {"outcome": "Rating submission null", "status": "Failed to select rating stars"}}]}
{"usecase": {"name": "Create a Listing", "scenario": "A user creates a new listing for a product to sell. The system processes the listing and makes it visible to potential buyers.", "actors": "User, System", "preconditions": "The user is logged in and eligible to create listings.", "steps": ["User navigates to 'Sell' and fills out the product details", "User submits the listing", "System processes the listing and publishes it"], "author": "2005111"}, "testcases": [{"name": "Successful Listing Creation", "description": "Verify that a user can successfully create a listing for a product.", "input": {"productName": "Vintage Watch", "productPrice": 250, "listingType": "Auction"}, "expected": {"outcome": "Listing created successfully", "listingStatus": "Published"}}, {"name": "Missing Product Details", "description": "Verify that the system rejects listing creation when required product details are missing.", "input": {"productName": "", "productPrice": null, "listingType": "Auction"}, "expected": {"outcome": "Listing creation failed", "listingStatus": "Rejected"}}]}
{"usecase": {"name": "Cancel a Bid", "scenario": "A user cancels their bid on an active auction before the auction ends. The system removes the bid and updates the auction.", "actors": "User, System", "preconditions": "The auction is still active, and the user is the current highest bidder.", "steps": ["User navigates to the auction page", "User cancels their bid", "System removes the bid and updates the auction"], "author": "2005114"}, "testcases": [{"name": "Successful Bid Cancellation", "description": "Verify that a user can successfully cancel their bid on an active auction.", "input": {"auctionStatus": "Active", "userIsHighestBidder": true}, "expected": {"outcome": "Bid cancelled successfully", "auctionStatus": "Updated"}}, {"name": "Bid Cancellation After Auction End", "description": "Verify that the system rejects bid cancellations after the auction has ended.", "input": {"auctionStatus": "Closed", "userIsHighestBidder": true}, "expected": {"outcome": "Bid cancellation failed", "auctionStatus": "Auction Closed"}}]}
{"usecase": {"name": "Add Item to Watchlist", "scenario": "A user adds an item to their watchlist to monitor it for future bidding or purchasing.", "actors": "User, System", "preconditions": "The user is logged in, and the item is available for purchase or bidding.", "steps": ["User navigates to the product page", "User clicks 'Add to Watchlist'", "System adds the item to the user's watchlist"], "author": "2005114"}, "testcases": [{"name": "Successfully Add Item to Watchlist", "description": "Verify that a user can add an available item to their watchlist.", "input": {"itemStatus": "Available", "userAction": "Add to Watchlist"}, "expected": {"outcome": "Item added to watchlist successfully", "watchlistStatus": "Item Added"}}, {"name": "Add Unavailable Item to Watchlist", "description": "Verify that the system prevents adding an unavailable item to the watchlist.", "input": {"itemStatus": "Unavailable", "userAction": "Add to Watchlist"}, "expected": {"outcome": "Failed to add item to watchlist", "watchlistStatus": "Item Unavailable"}}]}
{"usecase": {"name": "Update Payment Method", "scenario": "A user updates their default payment method for future purchases.", "actors": "User, System", "preconditions": "The user is logged in, and has an existing payment method linked to their account.", "steps": ["User navigates to their account settings", "User selects 'Update Payment Method'", "User enters new payment information", "System verifies and updates the payment method"], "author": "2005114"}, "testcases": [{"name": "Successfully Update Payment Method", "description": "Verify that a user can successfully update their payment method.", "input": {"existingPaymentMethod": "Visa", "newPaymentMethod": "MasterCard"}, "expected": {"outcome": "Payment method updated successfully", "paymentStatus": "Updated"}}, {"name": "Invalid Payment Information", "description": "Verify that the system rejects an invalid payment method during the update.", "input": {"existingPaymentMethod": "Visa", "newPaymentMethod": "Invalid Card"}, "expected": {"outcome": "Payment update failed", "paymentStatus": "Invalid Information"}}]}
{"usecase": {"name": "Apply a Coupon Code", "scenario": "A user applies a discount coupon code during checkout to receive a discount on their purchase.", "actors": "User, System", "preconditions": "The user is logged in, has items in their cart, and a valid coupon code.", "steps": ["User proceeds to checkout with items in their cart", "User enters the coupon code", "System validates the coupon and applies the discount"], "author": "2005119"}, "testcases": [{"name": "Successful Coupon Application", "description": "Verify that a valid coupon code can be applied, and the discount is reflected in the total amount.", "input": {"couponCode": "SAVE10", "cartTotal": 100}, "expected": {"outcome": "Coupon applied successfully", "discount": 10, "newTotal": 90}}, {"name": "Expired Coupon Code", "description": "Verify that the system rejects an expired coupon code and does not apply the discount.", "input": {"couponCode": "EXPIRED20", "cartTotal": 100}, "expected": {"outcome": "Coupon application failed", "discount": 0, "newTotal": 100}}]}
{"usecase": {"name": "Add Item to Wishlist", "scenario": "User adds a product to their wishlist for future reference.", "actors": "User", "preconditions": "User is logged in and viewing a product page.", "steps": ["User selects a product and clicks 'Add to Wishlist'.", "System confirms that the product is added to the wishlist."], "author": "2005119"}, "testcases": [{"name": "Valid Wishlist Addition", "description": "Verify that a user can successfully add a product to their wishlist.", "input": {"productID": "54321"}, "expected": {"outcome": "Product added to wishlist.", "status": "Success"}}, {"name": "Adding Out-of-Stock Product to Wishlist", "description": "Verify that the system allows adding an out-of-stock product to the wishlist.", "input": {"productID": "98765"}, "expected": {"outcome": "Product added to wishlist.", "status": "Success"}}]}
{"usecase": {"name": "Request Refund", "scenario": "A user requests a refund for an item they purchased, and the system processes the refund request.", "actors": "User, Seller, System", "preconditions": "The user has completed the purchase and the refund window is open.", "steps": ["User navigates to their order history", "User selects the item and clicks 'Request Refund'", "System processes the refund request"], "author": "2005119"}, "testcases": [{"name": "Successful Refund Request", "description": "Verify that a user can successfully request a refund for an eligible item.", "input": {"purchaseStatus": "Completed", "refundEligibility": true}, "expected": {"outcome": "Refund request submitted successfully", "refundStatus": "Pending"}}, {"name": "Refund Request Outside Window", "description": "Verify that the system prevents a refund request\n"}]}
{"usecase": {"name": "Create a Board", "scenario": "A user creates a new board to organize their tasks or projects.", "actors": "User", "preconditions": "User has a Trello account and is logged in.", "steps": ["User navigates to the dashboard", "User clicks on 'Create New Board'", "User enters the board name and optional settings like background or team visibility", "User clicks 'Create' to finalize the board creation"]}, "testcases": [{"name": "Valid Board Creation", "description": "Verify that a user can successfully create a new board with valid details.", "input": {"boardName": "Project X", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board created successfully", "status": "Active"}}, {"name": "Empty Board Name", "description": "Verify that the system handles the case where the user attempts to create a board without entering a name.", "input": {"boardName": "", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board creation failed", "status": "Error: Name required"}}, {"name": "Duplicate Board Name", "description": "Verify that the system allows the creation of a board with a name that already exists.", "input": {"boardName": "Project X", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board created successfully", "status": "Active"}}]}
{"usecase": {"name": "Add a New List", "scenario": "A user adds a new list to a board to organize tasks or items.", "actors": "User", "preconditions": "User has created or has access to a board.", "steps": ["User selects a board", "User clicks on 'Add a list' at the end of the lists on the board", "User enters a name for the new list", "User clicks 'Add List' to confirm"]}, "testcases": [{"name": "Valid List Addition", "description": "Verify that a user can successfully add a new list with a valid name.", "input": {"board": "Project X", "listName": "To Do"}, "expected": {"outcome": "List added successfully", "status": "Visible"}}, {"name": "Empty List Name", "description": "Verify that the system handles the case where the user attempts to add a list without providing a name.", "input": {"board": "Project X", "listName": ""}, "expected": {"outcome": "List addition failed", "status": "Error: Name required"}}, {"name": "Duplicate List Name", "description": "Verify that the system allows the addition of a list with a name that already exists on the board.", "input": {"board": "Project X", "listName": "To Do"}, "expected": {"outcome": "List added successfully", "status": "Visible"}}, {"name": "Exceed Maximum Open Lists", "description": "Verify that the system prevents adding a new list when the board already has 475 open lists.", "input": {"board": "Project X", "listName": "New List"}, "expected": {"outcome": "List addition failed", "status": "Error: Maximum number of open lists reached"}}, {"name": "Exceed Maximum Total Lists", "description": "Verify that the system prevents adding a new list when the board has 2850 total lists (including archived).", "input": {"board": "Project X", "listName": "New List"}, "expected": {"outcome": "List addition failed", "status": "Error: Maximum number of total lists reached"}}]}
{"usecase": {"name": "Add a Task (Card) to a List", "scenario": "A user adds a new task (card) to a specific list on a Trello board to organize tasks.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to an existing board with at least one list."], "steps": ["User navigates to a specific board.", "User selects a list where they want to add a task.", "User clicks on 'Add a card' at the bottom of the list.", "User enters the name of the task in the input field.", "User clicks 'Add Card' or presses Enter to finalize the task addition."]}, "testcases": [{"name": "Valid Task Addition", "description": "Verify that the user can successfully add a new task with valid details to a list.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "Task is added to the 'To Do' list.", "status": "Task added successfully."}}, {"name": "Empty Task Name", "description": "Verify that the system prevents adding a task without a name.", "input": {"board": "Project Board", "list": "To Do", "taskName": ""}, "expected": {"outcome": "The system shows an error or prevents the task from being added.", "status": "Task addition failed with a required field error."}}, {"name": "Duplicate Task Name in the Same List", "description": "Verify that the system allows adding tasks with duplicate names in the same list.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "The system allows the task with the same name to be added.", "status": "Task added successfully with duplicate name."}}, {"name": "Exceed Maximum Task Length", "description": "Verify that the system handles the case where the task name exceeds the maximum character limit.", "input": {"board": "Project Board", "list": "To Do", "taskName": "<string_exceeding_max_length>"}, "expected": {"outcome": "The system displays an error message indicating the task name is too long.", "status": "Task addition failed with a length error."}}, {"name": "Add Task to a Full List", "description": "Verify that the system prevents adding a task when the list has reached the maximum number of cards allowed.", "input": {"board": "Project Board", "list": "To Do", "taskName": "New Task"}, "expected": {"outcome": "The system shows an error message indicating the maximum number of tasks in the list has been reached.", "status": "Task addition failed with an error indicating list capacity is full."}}, {"name": "Task Addition Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to add a task without an active internet connection.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups", "connection": "Offline"}, "expected": {"outcome": "The system shows an error indicating that an internet connection is required to add the task.", "status": "Task addition failed due to lack of internet connection."}}, {"name": "Task Addition with Special Characters", "description": "Verify that the system allows adding a task name with special characters, including emojis and symbols.", "input": {"board": "Project Board", "list": "To Do", "taskName": "\ud83d\udcbb Fix UI bugs #urgent"}, "expected": {"outcome": "The system successfully adds the task with special characters.", "status": "Task added successfully with special characters."}}]}
{"usecase": {"name": "Add Labels to a Card", "scenario": "User adds color-coded labels to categorize or prioritize cards.", "actors": "User", "preconditions": "User must be logged in and have access to a board with cards."}, "testcases": [{"name": "Add a label to a card successfully", "description": "Verify that a user can successfully add a label to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User logs in to Trello.", "User navigates to the desired board.", "User selects the card to add a label.", "User clicks on 'Labels' and selects 'Priority' label with 'Green' color.", "User applies the label."], "expected": {"outcome": "Label 'Priority' with color 'Green' is successfully added to the card.", "status": "done"}}, {"name": "Add multiple labels to a card", "description": "Verify that a user can successfully add multiple labels to a card.", "input": {"labels": [{"label_name": "Priority", "label_color": "Green"}, {"label_name": "Bug", "label_color": "Red"}]}, "steps": ["User logs in to Trello.", "User selects the card to add labels.", "User clicks on 'Labels' and selects both 'Priority' and 'Bug' labels.", "User applies both labels."], "expected": {"outcome": "Labels 'Priority' and 'Bug' are added to the card.", "status": "done"}}, {"name": "Attempt to add a label without selecting a label", "description": "Verify that an error message is displayed when attempting to add a label without selecting one.", "input": {}, "steps": ["User selects the card to add a label.", "User clicks on 'Labels' but does not select a label.", "User attempts to apply a label without choosing any."], "expected": {"outcome": "Error message: 'Please select a label before applying.'", "status": "failed"}}, {"name": "Attempt to add a label to a non-existent card", "description": "Verify that an error message is displayed when attempting to add a label to a non-existent card.", "input": {"card_id": "invalid_card_id"}, "steps": ["User attempts to add a label to a card that does not exist."], "expected": {"outcome": "Error message: 'Card not found.'", "status": "failed"}}, {"name": "Add an empty label to a card", "description": "Verify that an error message is displayed when attempting to create a label without a name or color.", "input": {"label_name": "", "label_color": ""}, "steps": ["User selects a card.", "User clicks on 'Labels' and tries to apply a label without entering a name or selecting a color."], "expected": {"outcome": "Error message: 'Label name and color are required.'", "status": "failed"}}, {"name": "Add a label to a card as a non-logged-in user", "description": "Verify that a user cannot add labels to a card without being logged in.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["Non-logged-in user attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Please log in to perform this action.'", "status": "failed"}}, {"name": "Add a label to a card without sufficient permissions", "description": "Verify that a user with view-only access cannot add labels to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User with view-only access attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Insufficient permissions to add labels.'", "status": "failed"}}, {"name": "Add a duplicate label to a card", "description": "Verify that an error message is displayed when attempting to add a duplicate label to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User selects the card and tries to add the same label twice."], "expected": {"outcome": "Error message: 'Label already applied to this card.'", "status": "failed"}}, {"name": "Add a label to a card while network is disconnected", "description": "Verify that an error message is displayed when attempting to add a label without an internet connection.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User disconnects from the internet and attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Network error. Please check your connection.'", "status": "failed"}}, {"name": "Remove a label from a card", "description": "Verify that a user can successfully remove a label from a card.", "input": {"label_name": "Priority"}, "steps": ["User selects a card with the 'Priority' label applied.", "User clicks on 'Labels' and removes the 'Priority' label."], "expected": {"outcome": "'Priority' label is successfully removed from the card.", "status": "done"}}]}
{"usecase": {"name": "Add a Comment to a Card", "scenario": "A user adds a comment to a card to provide feedback.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a card."], "steps": ["User navigates to the specific card.", "User clicks on the comment section.", "User types the comment.", "User clicks 'Add Comment.'"]}, "testcases": [{"name": "Valid Comment Addition", "description": "Verify that the user can successfully add a comment to a card.", "input": {"card": "Design Mockup", "comment": "Looks great! Please make the text larger."}, "expected": {"outcome": "Comment is added and visible on the card.", "status": "Comment added successfully."}}, {"name": "Empty Comment Submission", "description": "Verify that the system shows an error when trying to submit an empty comment.", "input": {"card": "Design Mockup", "comment": ""}, "expected": {"outcome": "System displays error: 'Comment cannot be empty.'", "status": "Comment submission failed."}}, {"name": "Edit a Comment", "description": "Verify that the user can edit an existing comment.", "input": {"card": "Design Mockup", "originalComment": "Looks great!", "editedComment": "Looks great! Please make the text larger."}, "expected": {"outcome": "Comment is updated with the new text.", "status": "Comment edited successfully."}}, {"name": "Delete a Comment", "description": "Verify that the user can delete a comment from a card.", "input": {"card": "Design Mockup", "comment": "Looks great!"}, "expected": {"outcome": "Comment is removed from the card.", "status": "Comment deleted successfully."}}]}
{"usecase": {"name": "Attach a File to a Task", "scenario": "A user attaches a file to a specific task (card) to provide additional resources or context.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card).", "The file is accessible on the user's device."], "steps": ["User navigates to a specific board.", "User selects a task (card) from a list.", "User clicks on 'Attach' or 'Upload File' in the task's details.", "User selects a file from their device and clicks 'Open' to upload.", "User confirms the upload and the file is attached to the task."]}, "testcases": [{"name": "Valid File Attachment", "description": "Verify that the user can successfully attach a file to a task.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf"}, "expected": {"outcome": "File 'requirements.pdf' is successfully attached to the task.", "status": "File attached successfully."}}, {"name": "Attach File with Unsupported Format", "description": "Verify that the system prevents attaching a file with an unsupported format.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "malicious.exe"}, "expected": {"outcome": "System displays error: 'Unsupported file format.'", "status": "File attachment failed."}}, {"name": "Attach File with Large Size", "description": "Verify that the system prevents attaching a file that exceeds the maximum size limit.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "large_video.mp4"}, "expected": {"outcome": "System displays error: 'File size exceeds the maximum limit.'", "status": "File attachment failed."}}, {"name": "Remove Attached File", "description": "Verify that the user can remove an attached file from a task.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf"}, "expected": {"outcome": "File 'requirements.pdf' is successfully removed from the task.", "status": "File removed successfully."}}, {"name": "Attach File Without Internet Connection", "description": "Verify that the system handles cases where the user attempts to attach a file while offline.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "File attachment failed."}}]}
{"usecase": {"name": "Set Due Date for a Task", "scenario": "A user sets a due date for a task (card) to track deadlines.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card)."], "steps": ["User navigates to a specific board.", "User selects a task (card) from a list.", "User clicks on 'Due Date' in the task's details.", "User selects a date and time from the calendar.", "User clicks 'Save' to apply the due date."]}, "testcases": [{"name": "Valid Due Date Assignment", "description": "Verify that the user can successfully assign a valid due date to a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2024-10-01"}, "expected": {"outcome": "Due date '2024-10-01' is successfully assigned to the task.", "status": "Due date set successfully."}}, {"name": "Set Past Due Date", "description": "Verify that the system prevents setting a past due date for a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2023-09-01"}, "expected": {"outcome": "System displays error: 'Cannot set a due date in the past.'", "status": "Due date setting failed."}}, {"name": "Set Due Date Without Selecting a Date", "description": "Verify that the system handles cases where the user tries to set a due date without selecting a date.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation"}, "expected": {"outcome": "System displays error: 'Please select a due date.'", "status": "Due date setting failed."}}, {"name": "Change Due Date", "description": "Verify that the user can change an existing due date for a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "newDueDate": "2024-10-05"}, "expected": {"outcome": "Due date is successfully changed to '2024-10-05'.", "status": "Due date updated successfully."}}, {"name": "Set Due Date Without Internet Connection", "description": "Verify that the system handles cases where the user attempts to set a due date while offline.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2024-10-01", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Due date setting failed."}}]}
{"usecase": {"name": "Search for a Card", "scenario": "User searches for a specific card within a board by entering keywords in the search bar.", "actors": "User", "preconditions": "User must be logged in and have access to a board with existing cards."}, "testcases": [{"name": "Search for an existing card by exact title", "description": "Verify that a user can successfully search for a card by its exact title.", "input": {"search_query": "Fix bug in login system"}, "steps": ["User logs in to Trello.", "User navigates to the board.", "User enters 'Fix bug in login system' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Card with the title 'Fix bug in login system' is displayed.", "status": "done"}}, {"name": "Search for a card using a partial keyword", "description": "Verify that a user can successfully search for a card using a partial keyword.", "input": {"search_query": "bug"}, "steps": ["User enters 'bug' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "All cards containing the keyword 'bug' are displayed.", "status": "done"}}, {"name": "Search for a card using a keyword that does not exist", "description": "Verify that a 'No results' message is displayed when searching for a non-existent card.", "input": {"search_query": "nonexistent keyword"}, "steps": ["User enters 'nonexistent keyword' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed.", "status": "done"}}, {"name": "Search for a card in an empty board", "description": "Verify that a 'No results' message is displayed when searching in an empty board.", "input": {"search_query": "Any search term"}, "steps": ["User enters any search term in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed.", "status": "done"}}, {"name": "Search for a card using special characters", "description": "Verify that the system handles searches with special characters properly.", "input": {"search_query": "@#$%"}, "steps": ["User enters special characters '@#$%' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed if no card contains special characters.", "status": "done"}}, {"name": "Search for a card with an empty search query", "description": "Verify that an error message is displayed when searching with an empty query.", "input": {"search_query": ""}, "steps": ["User leaves the search bar empty.", "User presses 'Search'."], "expected": {"outcome": "Message 'Please enter a search term' is displayed.", "status": "failed"}}, {"name": "Search for a card with a long search query", "description": "Verify that an error message is displayed when entering a search query longer than allowed.", "input": {"search_query": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, "steps": ["User enters a very long search query.", "User presses 'Search'."], "expected": {"outcome": "Message 'Search term too long' is displayed.", "status": "failed"}}, {"name": "Search for a card while not logged in", "description": "Verify that an error message is displayed when attempting to search without logging in.", "input": {"search_query": "Fix bug in login system"}, "steps": ["Non-logged-in user attempts to search for a card using 'Fix bug in login system' as the query."], "expected": {"outcome": "Error message 'Please log in to perform this action' is displayed.", "status": "failed"}}, {"name": "Search for a card with network issues", "description": "Verify that an error message is displayed when searching while disconnected from the internet.", "input": {"search_query": "Fix bug in login system"}, "steps": ["User disconnects from the internet.", "User attempts to search for a card using 'Fix bug in login system' as the query."], "expected": {"outcome": "Error message 'Network error. Please check your connection' is displayed.", "status": "failed"}}]}
{"usecase": {"name": "Move a Task (Card) from One List to Another", "scenario": "A user moves a task (card) from one list to another to update the task's status or progress.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least two lists and one task."], "steps": ["User navigates to a specific board.", "User selects the task (card) they want to move.", "User clicks on the 'Move' option from the task's options menu.", "User selects the target list from the dropdown menu.", "User clicks 'Move' to confirm the action."]}, "testcases": [{"name": "Valid Task Movement", "description": "Verify that the user can successfully move a task from one list to another.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Design mockups"}, "expected": {"outcome": "The task 'Design mockups' is moved from 'To Do' to 'In Progress'.", "status": "Task moved successfully."}}, {"name": "Move Task to Same List", "description": "Verify that the system handles the case where the user attempts to move a task to the same list.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "The system allows the task to stay in the same list without any issues.", "status": "Task remains in the same list."}}, {"name": "Move Nonexistent Task", "description": "Verify that the system handles the case where the user attempts to move a task that no longer exists.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Nonexistent Task"}, "expected": {"outcome": "The system shows an error message indicating that the task no longer exists.", "status": "Task move failed with an error."}}, {"name": "Move Task to a Full List", "description": "Verify that the system prevents moving a task to a list that has reached its maximum capacity for tasks.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "Completed", "taskName": "Design mockups"}, "expected": {"outcome": "The system shows an error message indicating that the target list is full.", "status": "Task move failed due to list capacity."}}, {"name": "Move Task Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to move a task without an active internet connection.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Design mockups", "connection": "Offline"}, "expected": {"outcome": "The system shows an error message indicating that an internet connection is required to move the task.", "status": "Task move failed due to lack of internet connection."}}, {"name": "Move Task to a List with Special Characters in Name", "description": "Verify that the system allows moving a task to a list that contains special characters in its name.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "\ud83d\udca1 Ideas", "taskName": "Design mockups"}, "expected": {"outcome": "The system successfully moves the task to the list with special characters in its name.", "status": "Task moved successfully."}}]}
{"usecase": {"name": "Invite Team Members to a Board", "scenario": "A user invites team members to collaborate on a project board.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board they want to share."], "steps": ["User navigates to the specific board.", "User clicks on the 'Invite' button.", "User enters the email addresses of team members.", "User clicks 'Send Invitation.'"]}, "testcases": [{"name": "Valid Team Member Invitation", "description": "Verify that the user can successfully invite valid email addresses.", "input": {"board": "Project Board", "emails": ["team_member1@example.com", "team_member2@example.com"]}, "expected": {"outcome": "Invitations are sent successfully.", "status": "Invitations sent."}}, {"name": "Invite Team Member with Invalid Email", "description": "Verify that the system shows an error when trying to invite an invalid email address.", "input": {"board": "Project Board", "emails": ["invalid-email"]}, "expected": {"outcome": "System displays error: 'Invalid email address.'", "status": "Invitation failed."}}, {"name": "Invite Team Member Without Email", "description": "Verify that the system shows an error when trying to invite without an email.", "input": {"board": "Project Board", "emails": [""]}, "expected": {"outcome": "System displays error: 'Please enter an email address.'", "status": "Invitation failed."}}]}
{"usecase": {"name": "Assign a Task to a User", "scenario": "A user assigns a task (card) to a specific team member to ensure accountability.", "actors": "User, Team Member", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card).", "Team members are added to the board."], "steps": ["User navigates to a specific board.", "User selects the task (card) they want to assign.", "User clicks on 'Members' in the task's details.", "User selects the team member to assign the task to.", "User clicks 'Save' or 'Close' to finalize the assignment."]}, "testcases": [{"name": "Valid Task Assignment", "description": "Verify that the user can successfully assign a task to a valid team member.", "input": {"board": "Development Board", "taskName": "Complete API documentation", "member": "John Doe"}, "expected": {"outcome": "Task is assigned to John Doe.", "status": "Assignment successful."}}, {"name": "Assign Task to Multiple Users", "description": "Verify that the user can assign a task to multiple users simultaneously.", "input": {"board": "Development Board", "taskName": "Design Landing Page", "members": ["John Doe", "Jane Smith"]}, "expected": {"outcome": "Task is assigned to both John Doe and Jane Smith.", "status": "Assignment successful."}}, {"name": "Assign Task Without Selecting a Member", "description": "Verify that the system shows an error when attempting to assign a task without selecting a team member.", "input": {"board": "Development Board", "taskName": "Fix Bugs"}, "expected": {"outcome": "System displays error: 'Please select a member to assign the task.'", "status": "Assignment failed."}}, {"name": "Assign Task to Nonexistent Member", "description": "Verify that the system prevents assigning a task to a nonexistent or removed team member.", "input": {"board": "Development Board", "taskName": "Update UI", "member": "Invalid User"}, "expected": {"outcome": "System displays error: 'Member not found.'", "status": "Assignment failed."}}, {"name": "Assign Task Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to assign a task without an active internet connection.", "input": {"board": "Development Board", "taskName": "Optimize Database", "member": "John Doe", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Assignment failed."}}]}
{"usecase": {"name": "Receive Notifications for Card Updates", "scenario": "A user receives notifications for updates made to cards they are watching.", "actors": "User", "preconditions": ["User is logged into Trello.", "User is watching a card."], "steps": ["User navigates to the specific card.", "User clicks on the 'Watch' button to start watching the card.", "Another user makes an update to the card.", "User receives a notification for the update."]}, "testcases": [{"name": "Notification for Card Update", "description": "Verify that the user receives a notification when the card they are watching is updated.", "input": {"card": "Design Mockup", "update": "Change due date"}, "expected": {"outcome": "User receives notification: 'Design Mockup has been updated.'", "status": "Notification received."}}, {"name": "No Notification for Unwatched Card", "description": "Verify that the user does not receive notifications for cards they are not watching.", "input": {"card": "To Do", "update": "Change status to 'In Progress'"}, "expected": {"outcome": "No notification is sent to the user.", "status": "No notification received."}}]}
{"usecase": {"name": "Create a Rule in a List", "scenario": "A user creates a rule that automatically moves tasks between lists based on specific conditions.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one list and tasks (cards)."], "steps": ["User navigates to a specific board.", "User selects the list where the rule will be applied.", "User clicks on 'Rules' or 'Automations' in the list's options.", "User selects 'Create a Rule'.", "User defines the trigger (e.g., due date approaching, label added).", "User specifies the action (e.g., move card to another list).", "User saves the rule."]}, "testcases": [{"name": "Valid Rule Creation", "description": "Verify that the user can successfully create a valid rule.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day", "action": "Move to 'In Progress'"}, "expected": {"outcome": "Rule is created and will move tasks from 'To Do' to 'In Progress' when the due date is in 1 day.", "status": "Rule creation successful."}}, {"name": "Create Rule Without Trigger", "description": "Verify that the system shows an error when trying to create a rule without a trigger.", "input": {"board": "Marketing Board", "list": "To Do", "action": "Move to 'In Progress'"}, "expected": {"outcome": "System displays error: 'Please specify a trigger for the rule.'", "status": "Rule creation failed."}}, {"name": "Create Rule Without Action", "description": "Verify that the system shows an error when trying to create a rule without an action.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day"}, "expected": {"outcome": "System displays error: 'Please specify an action for the rule.'", "status": "Rule creation failed."}}, {"name": "Create Rule with Invalid Trigger", "description": "Verify that the system prevents creating a rule with an invalid trigger.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Invalid Trigger", "action": "Move to 'In Progress'"}, "expected": {"outcome": "System displays error: 'Invalid trigger specified.'", "status": "Rule creation failed."}}, {"name": "Create Rule Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to create a rule without an active internet connection.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day", "action": "Move to 'In Progress'", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Rule creation failed."}}]}
{"usecase": {"name": "Archive a List", "scenario": "A user archives a list to remove it from the board without deleting its contents.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one list containing tasks (cards)."], "steps": ["User navigates to a specific board.", "User selects the list they want to archive.", "User clicks on the 'More' button (three dots) next to the list's name.", "User selects 'Archive this List' from the dropdown menu.", "User confirms the action when prompted."]}, "testcases": [{"name": "Valid List Archiving", "description": "Verify that the user can successfully archive a list.", "input": {"board": "Project Board", "list": "Completed Tasks"}, "expected": {"outcome": "List 'Completed Tasks' is successfully archived and no longer visible on the board.", "status": "Archiving successful."}}, {"name": "Archive Already Archived List", "description": "Verify that the system handles an attempt to archive a list that is already archived.", "input": {"board": "Project Board", "list": "Archived List"}, "expected": {"outcome": "System displays error: 'List is already archived.'", "status": "Archiving failed."}}, {"name": "Archive List Without Confirmation", "description": "Verify that the system shows an error when the user tries to archive a list without confirming.", "input": {"board": "Project Board", "list": "To Do", "confirm": false}, "expected": {"outcome": "System displays message: 'Archiving canceled.'", "status": "Archiving action aborted."}}, {"name": "Archive List Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to archive a list without an active internet connection.", "input": {"board": "Project Board", "list": "Ongoing Tasks", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Archiving failed."}}, {"name": "Archive List with Active Cards", "description": "Verify that the system allows archiving a list even if it contains active cards.", "input": {"board": "Project Board", "list": "In Progress"}, "expected": {"outcome": "List 'In Progress' is successfully archived with all cards retained in the archive.", "status": "Archiving successful."}}]}
{"usecase": {"name": "Account Registration", "author": 2005103, "scenario": "A user registers for an account on the platform with their mobile number, receives an OTP code for verification, fills in personal details like name, gender, HSC year, and sets a password.", "actors": "User", "preconditions": "User must have a valid mobile number", "steps": ["User enters their mobile number", "System sends OTP code to the user's mobile", "User enters the OTP code for verification", "User fills in personal profile details (name, gender, HSC year)", "User sets a password to complete registration"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a user can successfully register with valid details.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "ValidPassword123"}, "expected": {"outcome": "Registration successful", "status": "Registered"}}, {"name": "Invalid OTP", "description": "Verify that registration fails when an incorrect OTP is provided.", "input": {"mobileNumber": "01712345678", "otpCode": "654321", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "ValidPassword123"}, "expected": {"outcome": "Registration failed", "status": "OTP Invalid"}}, {"name": "Empty Personal Details", "description": "Verify that registration fails when personal details are not provided.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "", "gender": "", "hscYear": "", "password": "ValidPassword123"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Profile"}}, {"name": "Weak Password", "description": "Verify that registration fails when a weak password is provided.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "123"}, "expected": {"outcome": "Registration failed", "status": "Weak Password"}}]}
{"usecase": {"name": "Course Enrollment", "author": 2005103, "scenario": "A user enrolls in a course by selecting a course from the available options, applying a promo code (if any), agreeing to terms and conditions, and paying via an online payment gateway.", "actors": "User", "preconditions": "User must have an account and be logged in", "steps": ["User navigates to the course page", "User checks available ongoing and future programs", "User selects a course to enroll in", "User applies a promo code (optional)", "User agrees to terms and conditions", "User selects a payment method and proceeds to payment"]}, "testcases": [{"name": "Valid Course Enrollment with Promo Code", "description": "Verify that a user can successfully enroll in a course with a valid promo code.", "input": {"selectedCourse": "Math101", "promoCode": "PROMO50", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 100}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Valid Course Enrollment without Promo Code", "description": "Verify that a user can successfully enroll in a course without applying a promo code.", "input": {"selectedCourse": "English202", "promoCode": "", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 200}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Enrollment without Agreeing to Terms", "description": "Verify that the system prevents enrollment if the user does not agree to the terms and conditions.", "input": {"selectedCourse": "History150", "promoCode": "", "termsAgreed": false, "paymentMethod": "Online Payment Gateway", "paymentAmount": 150}, "expected": {"outcome": "Enrollment failed", "status": "Terms not agreed"}}, {"name": "Invalid Promo Code", "description": "Verify that the system handles invalid promo codes properly during course enrollment.", "input": {"selectedCourse": "Physics301", "promoCode": "INVALIDPROMO", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 250}, "expected": {"outcome": "Promo code invalid", "status": "Promo Rejected"}}, {"name": "Enrollment with Failed Payment", "description": "Verify that the system handles payment failure and prevents enrollment in a course.", "input": {"selectedCourse": "Chemistry201", "promoCode": "", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 300, "paymentStatus": "Failed"}, "expected": {"outcome": "Enrollment failed", "status": "Payment Failed"}}]}
{"usecase": {"name": "Taking a Chapter Quiz", "author": 2005110, "scenario": "A user wants to take a practice MCQ quiz for a specific chapter and report any question if necessary.", "actors": "Student", "preconditions": "The student must be logged in and enrolled in the course. The quiz must be available for the selected chapter.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Practice MCQ' from the dashboard.", "System navigates to a new page displaying the rules for taking the quiz.", "Student clicks on the 'Start Test' button.", "System navigates to the first question page.", "Student answers the first question and clicks 'Go Ahead'.", "System navigates to the next question.", "Student repeats this process until all questions are answered.", "On the last question page, the student clicks 'Submit'.", "System navigates to a new page displaying the student's score, the time taken, and two buttons: 'See the Solve' and 'Give the Test Again'.", "If the student clicks 'Give the Test Again', they are taken back to the start page of the test.", "If the student clicks 'See the Solve', they are shown the solutions for each question one by one.", "While viewing the solution for each question, the student has the option to click a 'Report' button for any problematic question.", "When the student clicks 'Report', the system navigates to a new page displaying options for reporting the question (e.g., 'Incorrect Answer', 'Question Unclear', etc.).", "Student selects a reason for reporting the question and clicks 'Submit'.", "The system submits the report and returns the student to the solution page."]}, "testcases": [{"name": "Successful Quiz Completion", "description": "Verify that a student successfully take a quiz homework", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "The student successfully completes the quiz, views the score, and can access the options to retake the quiz or view the solutions.", "status": "Quiz Completed"}}, {"name": "Retaking the Quiz", "description": "Verify that a student retakes a quiz", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "After completing the quiz, the student clicks 'Give the Test Again' and is redirected to the start page to retake the quiz.", "status": "Retake Test Initiated"}}, {"name": "Viewing Solutions", "description": "Verify that a student successfully see all the solutions of the quiz", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "After completing the quiz, the student clicks 'See the Solve' and is shown the solutions to each question one by one.", "status": "Viewing Solutions"}}, {"name": "Reporting a Question", "description": "Verify that a student successfully submit a report about a question", "input": {"userId": "stu_12345", "chapterId": "Chapter1", "questionId": "Question_3", "reportReason": "Incorrect Answer"}, "expected": {"outcome": "The student clicks the 'Report' button while viewing the solution, selects a report reason, submits the report, and the system successfully processes the report.", "status": "Report Submitted"}}]}
{"usecase": {"name": "Accessing and Adding Notes in Smart Notes", "author": 2005110, "scenario": "A user wants to view and add Smart Notes for a specific subject.", "actors": "Student", "preconditions": "The student must be logged in and enrolled in the course. Smart Notes must be available for the selected subject.", "steps": ["Student logs in and navigates to their dashboard.", "Student clicks on the 'Smart Notes' button from the dashboard.", "System navigates to a new page displaying all the subjects the student is enrolled in.", "Student clicks on a specific subject (e.g., Bangla).", "System navigates to a new page displaying all the Smart Notes available for that subject.", "Student reviews the existing Smart Notes for different chapters.", "Student clicks on the 'Add Note' button if they want to add their own note.", "System opens a form where the student can input their custom note.", "Student writes a note and clicks 'Submit'.", "System saves the note and displays it alongside the existing notes for the selected subject."]}, "testcases": [{"name": "Viewing of Smart Notes", "description": "Verify that a student successfully see all the smart notes", "input": {"userId": "stu_12345", "subjectId": "Bangla101"}, "expected": {"outcome": "The Smart Notes for the selected subject are displayed, and the student can view all notes organized by chapter.", "status": "Smart Notes Displayed"}}, {"name": "Adding a New Note", "description": "Verify that a student added a new note", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "noteContent": "This is my custom note for Chapter 1."}, "expected": {"outcome": "The student successfully adds a new note, and the system displays it alongside the existing notes for that subject.", "status": "Note Added"}}, {"name": "Adding an Empty Note", "description": "Verify that a student added a empty note", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "noteContent": ""}, "expected": {"outcome": "The system displays an error message prompting the student to enter note content before submitting.", "status": "Note Addition Failed"}}]}
{"usecase": {"name": "Viewing Progress Report", "author": 2005106, "scenario": "A student wants to view their progress report after completing chapters in a course.", "actors": "Student", "preconditions": "The student must be logged in, enrolled in the course, and have completed the chapters.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Report Card' from the dashboard.", "System navigates to a new page displaying all the student's enrolled courses.", "Student selects the course they want to view progress for (e.g., Bangla).", "System navigates to a new page showing all the chapters in the selected course.", "Student selects a specific chapter to view the report for that chapter.", "System fetches and displays the student's progress report for the selected chapter."]}, "testcases": [{"name": "Viewing Progress Report", "description": "Verify that a student successfully see the progress report of a chapter", "input": {"userId": "stu_12345", "courseId": "Bangla101", "chapterId": "chapter_1"}, "expected": {"outcome": "The progress report is displayed with the correct statistics for the selected chapter, including quiz scores and lesson completion status.", "status": "Progress Retrieved Successfully"}}, {"name": "Progress Report Unavailable - Not Enrolled", "description": "Verify that progress report of a student is unavailable when the student is not enrolled in that course or subject", "input": {"userId": "stu_12345", "courseId": "Math101", "chapterId": "chapter_1"}, "expected": {"outcome": "Error message stating 'As you are not enrolled, you have no report.'", "status": "Progress Retrieval Failed - Not Enrolled"}}, {"name": "Progress Report Unavailable - Incomplete Lessons", "description": "Verify that progress report of a student is unavailable when the student is not completed the course lessons in that course or subject", "input": {"userId": "stu_12345", "courseId": "Bangla101", "chapterId": "chapter_2"}, "expected": {"outcome": "Error message stating 'As you did not complete the lesson, you have no report.'", "status": "Progress Retrieval Failed - Incomplete Lessons"}}]}
{"usecase": {"name": "Downloading eBook", "author": 2005106, "scenario": "A user wants to download an eBook for a specific chapter in a subject.", "actors": "Student", "preconditions": "The student must be logged in and have access to the eBooks for their enrolled subjects.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'eBook' from the dashboard.", "System navigates to a new page displaying all subjects available to the student.", "Student selects the subject they want to view (e.g., Bangla).", "System navigates to a new page showing all chapters for the selected subject.", "Student selects a specific chapter to download the eBook.", "System starts the download process for the eBook of the selected chapter."]}, "testcases": [{"name": "Successful eBook Download", "description": "Verify that a student successfully download the ebooks", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "chapterId": "chapter_1"}, "expected": {"outcome": "The eBook for the selected chapter is downloaded successfully to the student's device.", "status": "Download Successful"}}, {"name": "eBook Not Available for Chapter", "description": "Verify that a student fails to see when the ebook is not avaiable", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "chapterId": "chapter_2"}, "expected": {"outcome": "Error message stating 'eBook not available for this chapter.'", "status": "Download Failed - eBook Not Available"}}]}
{"usecase": {"name": "Viewing and Downloading Course Material", "author": 2005105, "scenario": "A registered user, enrolled in a specific course, attempts to access the course materials.", "actors": "User", "preconditions": "The user must have a registered account and be enrolled in the course. The course materials must be available for viewing and downloading.", "steps": ["The user logs into their account using valid credentials.", "The user navigates to the dashboard of the enrolled course.", "The user enters the Course Materials section.", "The user applies filters to find the desired material.", "The user clicks on 'View' to preview the selected material.", "The user clicks on 'Download' to download the selected material."]}, "testcases": [{"name": "Successful Access and Download of Course Material", "description": "Verify that a user can successfully view and download course materials.", "input": {"userId": "user_12345", "courseId": "English101", "courseMaterialID": "note_456"}, "expected": {"outcome": "Successful access and download of the desired material.", "status": "Material is available/downloaded."}}, {"name": "Failed Download due to Invalid ID", "description": "Verify that a user cannot view or download course materials if the course or material ID is invalid.", "input": {"userId": "user_12345", "courseId": "English10", "courseMaterialID": "note.456"}, "expected": {"outcome": "An error message stating 'Course material not available.'", "status": "Material access denied."}}, {"name": "Failed Download due to Unavailability", "description": "Verify that a user cannot view or download course materials if the course or material is no longer available.", "input": {"userId": "user_12345", "courseId": "English101", "courseMaterialID": "note_455"}, "expected": {"outcome": "An error message stating 'Course material is no longer available.'", "status": "Material access denied."}}]}
{"usecase": {"name": "Accessing Guidelines for Extra-Curricular Activities", "author": 2005105, "scenario": "A registered user, interested in enhancing skills beyond traditional coursework, seeks access to resources such as freelancing, skill development, or career-building guidelines.", "actors": "User", "preconditions": "Relevant guidelines and materials for the chosen activity must be available.", "steps": ["User visits the homepage.", "User navigates to the Skills section and is directed to an external website for further resources.", "User selects the appropriate course or guideline based on interest.", "User accesses free or paid resources to learn about opportunities and best practices.", "User receives certification upon completing the course or assigned tasks"]}, "testcases": [{"name": "Successful Access to Guidelines", "description": "Ensure that the user can access the selected guidelines for extra-curricular activities without any issues.", "input": {"userId": "user_54321", "guidelineCategory": "Freelancing", "guidelineID": "Freelance_303"}, "expected": {"outcome": "Guidelines are successfully accessed.", "status": "Guideline available"}}, {"name": "Failed Access due to Unavailability", "description": "Verify that the user receives an error message when attempting to access a guideline that is not available.", "input": {"userId": "user_54321", "guidelineCategory": "Asset Management"}, "expected": {"outcome": "Error message stating 'Guideline not available.'", "status": "Guideline unavailable"}}, {"name": "Certification Upon Task Completion", "description": "Ensure that the user receives certification after successfully completing the required tasks or course.", "input": {"userId": "user_54321", "guidelineCategory": "Freelancing", "guidelineID": "Freelance_303", "TaskMarks": ["94%", "87%", "88%", "92%"]}, "expected": {"outcome": "Success message: 'Course completed' and certification granted.", "status": "Course completed"}}]}
{"usecase": {"name": "Participating in Live Classes", "author": 2005097, "scenario": "A student wants to join a scheduled live class session for a course they are enrolled in.", "actors": "Student", "preconditions": "The student must be logged in, enrolled in the course, and the live class must be scheduled.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Live Classes' from the dashboard.", "System displays the schedule of upcoming live classes.", "Student selects the scheduled live class they want to join.", "At the scheduled time, the 'Join' button becomes active.", "Student clicks 'Join' to enter the live class session.", "System connects the student to the live video stream.", "Student participates in the live class."]}, "testcases": [{"name": "Successful Live Class Participation", "description": "Verify that a student can successfully join a live class at the scheduled time.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T10:00:00Z"}, "expected": {"outcome": "Student successfully joins the live class session.", "status": "Live Class Joined"}}, {"name": "Attempting to Join Before Scheduled Time", "description": "Verify that the student cannot join the live class before the scheduled time.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T09:50:00Z"}, "expected": {"outcome": "Error message 'Class has not started yet' is displayed.", "status": "Cannot Join Before Scheduled Time"}}, {"name": "Attempting to Join After Class Ended", "description": "Verify that the student cannot join the live class after it has ended.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T11:30:00Z"}, "expected": {"outcome": "Error message 'Class has ended' is displayed.", "status": "Cannot Join After Class Ended"}}, {"name": "Not Enrolled in Course", "description": "Verify that a student cannot join a live class for a course they are not enrolled in.", "input": {"userId": "stu_12345", "courseId": "Chemistry101", "liveClassId": "live_002", "currentTime": "2024-09-27T10:00:00Z"}, "expected": {"outcome": "Error message 'You are not enrolled in this course' is displayed.", "status": "Access Denied - Not Enrolled"}}]}
{"usecase": {"name": "Accessing Recorded Lectures", "author": 2005097, "scenario": "A student wants to access and watch recorded lectures for a course they are enrolled in.", "actors": "Student", "preconditions": "Student must be logged in, enrolled in the course, and recorded lectures must be available.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Recorded Lectures' from the course menu.", "System displays a list of available recorded lectures organized by date or topic.", "Student selects a lecture to watch.", "System streams the selected lecture video.", "Student can pause, rewind, or fast-forward the lecture.", "Student can take notes while watching the lecture."]}, "testcases": [{"name": "Successful Lecture Playback", "description": "Verify that a student can successfully play a recorded lecture.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_010"}, "expected": {"outcome": "Lecture video plays without issues.", "status": "Lecture Played Successfully"}}, {"name": "Accessing Lecture Without Enrollment", "description": "Verify that a student cannot access recorded lectures for a course they are not enrolled in.", "input": {"userId": "stu_12345", "courseId": "Biology101", "lectureId": "lecture_005"}, "expected": {"outcome": "Error message 'You are not enrolled in this course' is displayed.", "status": "Access Denied"}}, {"name": "Lecture Not Available", "description": "Verify that the system handles cases where a lecture is not available.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_999"}, "expected": {"outcome": "Error message 'Lecture not available' is displayed.", "status": "Lecture Not Found"}}, {"name": "Video Playback Issues", "description": "Verify that the system handles video playback errors gracefully.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_010", "networkStatus": "Poor Connection"}, "expected": {"outcome": "Video pauses and displays a buffering icon; an optional message 'Experiencing network issues' may be displayed.", "status": "Playback Interrupted"}}]}
{"usecase": {"name": "Changing current class", "author": 2005115, "scenario": "A user wants to change the current class", "actors": "user", "preconditions": "User must login and answered the question asked to confirm his current class", "steps": ["User logs in to his account", "User navigates to his dashboard", "User clicks on the button to change current class", "User answers the qestion asked to confirm his current class (i.e Updated current class?, Updated Group?, Updated Batch?)"]}, "testcases": [{"name": "Successful Class Change", "description": "Verify that a user can successfully change his current class", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 11", "updatedGroup": "Science", "updatedBatch": "2023"}, "expected": {"outcome": "Class change successful", "status": "Class Changed"}}, {"name": "Failed Class Change", "description": "Verify that a user cannot change his current class if any of the provided information is empty", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 11", "updatedGroup": null, "updatedBatch": "2023"}, "expected": {"outcome": "Class change failed", "status": "Incorrect Information"}}, {"name": "Failed Class Change", "description": "Verify that a user cannot change his current class if the updated class is the same as the current class", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 10", "updatedGroup": "Science", "updatedBatch": "2023"}, "expected": {"outcome": "Class change failed", "status": "Same Class"}}]}
{"usecase": {"name": "Changing Personal Information", "author": 2005115, "scenario": "A user wants to change or update his personal information", "actors": "User", "preconditions": "User must login to his account", "steps": ["User logs in to his account", "User navigates to his profile settings", "User clicks on the button to edit personal information", "User updates the personal information (i.e Name, Gender, Birthday, Class Shift, Institution, Guadian's Name, Guadian's Mobile Number, )"]}, "testcases": [{"name": "Successful Personal Information Update", "description": "Verify that a user can successfully update his personal information", "input": {"userId": "user_12345", "name": "John Doe", "gender": "Male", "birthday": "1990-01-01", "classShift": "Morning", "institution": "ABC School", "guardianName": "Jane Doe", "guardianMobile": "01712345678"}, "expected": {"outcome": "Personal information update successful", "status": "Information Updated"}}, {"name": "Failed Personal Information Update", "description": "Verify that a user cannot update his personal information if any of the provided information is empty", "input": {"userId": "user_12345", "name": "John Doe", "gender": null, "birthday": "1990-01-01", "classShift": "Morning", "institution": "ABC School", "guardianName": "Jane Doe", "guardianMobile": "01712345678"}, "expected": {"outcome": "Personal information update failed", "status": "Incorrect Information"}}]}
