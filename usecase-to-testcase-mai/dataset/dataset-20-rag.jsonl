{"usecase": {"author": "Pramananda Sarkar", "id": "2005002", "name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}], "rag-example": {"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}]}}
{"usecase": {"author": "Turjoy Dey", "id": "2005016", "name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "View a Single Event", "description": "User attempts to view a single Event", "actor": "User", "precondition": "User is logged in and user has access to the Event", "steps": ["User Clicks on a event"]}, "testcases": [{"name": "Valid Event Fetch Request", "description": "User requests for a Event with valid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event viewed successfully", "status": "Approved"}}, {"name": "Invalid Event Fetch Request", "description": "User requests for a Event with invalid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event not found", "access": "Denied"}}, {"name": "Unauthorized Event Fetch Request", "description": "User requests for a Event for which user does not have access", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User does not have access to the Event", "access": "Denied"}}]}}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "rag-example": {"usecase": {"name": "Flight Route Selection", "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel", "actors": "Users", "preconditions": "", "steps": ["Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for ", "System responds with a list of airlines avaiable as per their Selection"]}, "testcases": [{"name": "Selection of Routes with Available Flights", "description": "Verify that the route user has selected has airlines available ( direct or indirect) ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "17-02-23"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Selection of Routes with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available as per selected parametres ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "04-02-23"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}]}}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}], "rag-example": {"usecase": {"name": "Flight Route Selection", "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel", "actors": "Users", "preconditions": "", "steps": ["Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for ", "System responds with a list of airlines avaiable as per their Selection"]}, "testcases": [{"name": "Selection of Routes with Available Flights", "description": "Verify that the route user has selected has airlines available ( direct or indirect) ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "17-02-23"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Selection of Routes with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available as per selected parametres ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "04-02-23"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}]}}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}], "rag-example": {"usecase": {"name": "Flight Route Selection", "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel", "actors": "Users", "preconditions": "", "steps": ["Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for ", "System responds with a list of airlines avaiable as per their Selection"]}, "testcases": [{"name": "Selection of Routes with Available Flights", "description": "Verify that the route user has selected has airlines available ( direct or indirect) ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "17-02-23"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Selection of Routes with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available as per selected parametres ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "04-02-23"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}]}}
{"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}], "rag-example": {"usecase": {"name": "Create an Event", "scenario": "User creates an event", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters event information", "User submits the event"]}, "testcases": [{"name": "Valid Event Information - RAG Concert", "description": "User enters valid Event information", "input": {"event": {"title": "RAG Concert", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "host": "Interval 18", "location": "BUET ECE cafeteria", "category": "seminar", "type": "Offline", "description": "There will be a Concert on ......", "division": "forum", "subDivision": "General", "bands": [{"name": "Band 1", "time": "7PM"}, {"name": "Band 2", "time": "8PM"}], "restrictions": ["Gates Closed at 7pm.After that only BUETIAN and ALUMNI will be allowed.ID card/Teams/BIIS will be checked", "Guests not allowed after 7pm", "No smoking/vaping allowed in open", "No bikes/cars allowed"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Valid Event Information - Seminar", "description": "User enters valid Event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "category": "seminar", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "files": ["file1", "file2"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Invalid Event Information - Missing title", "description": "User enters invalid event information", "input": {"event": {"startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing title", "status": "Rejected"}}, {"name": "Invalid Event Information - Missing location", "description": "User enters invalid event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing location", "status": "Rejected"}}]}}
{"usecase": {"author": "Gourab Biswas", "id": "2005034", "name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}], "rag-example": {"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}]}}
{"usecase": {"author": "Fahim Hasan", "id": "2005043", "name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}], "rag-example": {"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}]}}
{"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}], "rag-example": {"usecase": {"name": "Ticket Purchase", "scenario": "A student can purchase a ticket for bus trip", "actors": "Student, Bus Company", "preconditions": "Student is enrolled in the university ", "steps": ["Student selects the number of tickets", "Student submits the request"]}, "testcases": [{"name": "Valid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases a valid number of tickets.", "input": {"numberOfTickets": 1, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket purchased"}}, {"name": "Invalid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases an invalid number of tickets.", "input": {"numberOfTickets": 0, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket not purchased", "reason": "Invalid number of tickets"}}]}}
{"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}], "rag-example": {"usecase": {"name": "Seat Selection", "scenario": "Users select the seat they prefer from the availability list", "actors": "Users", "preconditions": "Users have selected their choice of airline prefered and landed on the flight layout", "steps": ["Users select their prefered seat from the grid that pops up on selecting the airline", "Users can select exactly that many seats that they claimed to have required", "System redirects to payment page upon seat request submission"]}, "testcases": [{"name": "Selection of available seat ", "description": "Verify that the user can select available seats ", "input": {"1": "A3", "2": "H4"}, "expected": {"outcome": "System redirects to payment page", "status": "200"}}, {"name": "Selection of number of seats that are claimed exactly on putting request in first place", "description": "Verify that the system handles the case where user selects less seats or more than they demanded for in the first place", "input": {"1": "A3"}, "expected": {"outcome": "You have not chosen enough seats / You have chosen more seats", "status": "404"}}]}}
{"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}], "rag-example": {"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}]}}
{"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}], "rag-example": {"usecase": {"title": "User Account Creation", "description": "A consumer creates an account on the platform using a valid email and phone number.", "actors": ["Consumer"], "preconditions": ["The platform is accessible.", "The consumer is on the account creation page."], "steps": ["Consumer enters valid email address and phone number.", "Consumer sets a secure password.", "Consumer agrees to terms and conditions.", "Consumer submits the registration form."]}, "testcases": [{"name": "ValidUserAccountCreation", "description": "Test the successful creation of a user account using valid email, phone number, and a secure password.", "input": {"email": "user@example.com", "phone": "1234567890", "password": "SecurePass123"}, "expected": {"success": true, "message": "User account is created successfully. Consumer is redirected to the logged-in state."}}, {"name": "DuplicateEmail", "description": "Test if the system handles a scenario where a user tries to create an account with an email that already exists in the system.", "input": {"email": "existing_user@example.com", "phone": "9876543210", "password": "NewPass456"}, "expected": {"success": false, "message": "System displays an error message indicating that the email is already registered. User account is not created."}}, {"name": "MissingPhoneNumber", "description": "Test if the system handles a scenario where a user tries to create an account without providing a phone number.", "input": {"email": "user@example.com", "password": "PassWithoutPhone"}, "expected": {"success": false, "message": "System displays an error message indicating that the phone number is required. User account is not created."}}, {"name": "TermsAndConditionsAgreement", "description": "Test if the system requires users to agree to terms and conditions during account creation.", "input": {"email": "user@example.com", "phone": "7890123456", "password": "StrongPass789", "agreeToTerms": false}, "expected": {"success": false, "message": "System displays an error message indicating that terms and conditions must be agreed to. User account is not created."}}]}}
{"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}], "rag-example": {"usecase": {"name": "Direct Messaging", "scenario": "User engages in a private conversation with another user", "actors": ["User"], "preconditions": "Users are logged in the app", "steps": ["User sends a direct message"]}, "testcases": [{"name": "Successful Message", "description": "User successfully sends a direct message to another user", "input": {"recipient": "d6897068-bb17-4376-b433-60def50e624d", "messageContent": "Hello, how are you?"}, "expected": {"outcome": "Message successfully sent", "status": "Successful"}}, {"name": "Message Failed - Invalid Recipient", "description": "System handles the case where a user tries to send a message to a non-existent user", "input": {"messageContent": "Hello, how are you?", "recipient": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid recipient", "status": "Failed"}}, {"name": "Successful Reply", "description": "User successfully replies to a direct message", "input": {"messageContent": "I'm doing great, thanks for asking!", "recipient": "d6897068-bb17-4376-b433-60def50e624d", "parentMessage": "d6897068-bb17-4376-b433-60def50e624d"}, "expected": {"outcome": "Reply successful", "status": "Successful"}}]}}
{"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}], "rag-example": {"usecase": {"name": "Create a Group", "scenario": "A user creates a group with a name ,profile Photo  description", "Actors": "Any valid user", "precondition": "User is logged in", "steps": ["User clicks on create group button", "User enters the group name", "User enters the group description", "User selects the group profile photo", "User clicks on create group button"]}, "testcases": [{"name": "Valid Group Creation", "description": "Verify that a group is created successfully with valid data", "input": {"name": "Test Group", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation", "description": "Verify that a group is not created with invalid data", "input": {"name": "", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}]}}
{"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}], "rag-example": {"usecase": {"name": "Add Team Members to a Task", "scenario": "Admin wants to add team members to an existing Task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the Task.", "steps": ["Admin selects team members to add", "Admin submits the team member addition form"]}, "testcases": [{"name": "Valid Team Member Addition", "description": "Verify that an Admin can successfully add team members to a task.", "input": {"task": "name", "teamMembers": ["User123", "User456"]}, "expected": {"outcome": "Team members added successfully", "status": "Added", "notification": "Notification sent to users to whom the task is assigned"}}, {"name": "Adding Nonexistent User", "description": "Verify that the system handles adding a nonexistent user to the task.", "input": {"task": "name", "teamMembers": ["NonexistentUser"]}, "expected": {"outcome": "Team member addition failed", "status": "NonexistentUser"}}, {"name": "User Already in task", "description": "Verify that the system handles adding a team member who is already part of the task.", "input": {"task": "name", "teamMembers": ["User123"]}, "expected": {"outcome": "Team member addition failed", "status": "AlreadyInTask"}}]}}
{"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}], "rag-example": {"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}}
{"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}], "rag-example": {"usecase": {"name": "View Assets in Asset Group", "scenario": "User wants to view the existing crypto assets within asset groups.", "actors": "User", "preconditions": "User is registered in the system and has at least one crypto asset group with assets.", "steps": ["User navigates to the 'Asset Groups' section of the application", "User selects a specific asset group to view", "User views the details of the selected asset group, including its name, description, and associated assets"]}, "testcases": [{"name": "View Specific Asset Group", "description": "Verify that the user can successfully view the details of a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets"}, "expected": {"outcome": "Asset group details viewed successfully", "access": "Allowed"}}, {"name": "View Assets in a Group", "description": "Verify that the user can successfully view the assets within a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets", "selectedAsset": "Bitcoin"}, "expected": {"outcome": "Asset within the group viewed successfully", "access": "Allowed"}}]}}
{"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}], "rag-example": {"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}]}}
{"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}], "rag-example": {"usecase": {"name": "Payment", "scenario": "Users pay for the flight they are going to board", "actors": "Users", "preconditions": "Users have booked seats in the airlines they prefered", "steps": ["Users book their prefered seat from the layout and system redirects to payment page", "System calculates the amount that has to be paid for the seat", "Users make the payment", "System updates the payment status of the user"]}, "testcases": [{"name": "Valid Payment", "description": "Verify that the user can successfully make a valid payment for the booked seat", "input": {"systemCalculatedFee": 200, "paymentAmount": 200}, "expected": {"outcome": "Payment successful", "status": "200"}}, {"name": "Zero Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount of zero.", "input": {"systemCalculatedFee": 100, "paymentAmount": 0}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount less than the calculated fee.", "input": {"systemCalculatedFee": 100, "paymentAmount": 50}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Overpayment", "description": "Verify that the system handles the case where the user tries to make an overpayment.", "input": {"systemCalculatedFee": 100, "paymentAmount": 250}, "expected": {"outcome": "Payment failed", "status": "404"}}]}}
{"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}], "rag-example": {"usecase": {"name": "Admin Monitoring and Profile Management", "scenario": "The admin wants to observe total transactions on the platform and has the authority to shut down any user profile or allow a new seller.", "actors": ["Admin"], "preconditions": ["The admin is logged in to the admin dashboard.", "There are existing user profiles and ongoing transactions on the platform."], "steps": [{"stepId": 1, "description": "Observe Total Transactions.", "input": "Admin views the total number and details of transactions on the platform."}, {"stepId": 2, "description": "Review User Profiles.", "input": "Admin has the option to review user profiles, including sellers and buyers."}, {"stepId": 3, "description": "Take Action on Profile.", "input": "Admin can take actions such as shutting down a profile or allowing a new seller based on their review."}]}, "testcases": [{"name": "Observe Total Transactions", "description": "Verify that the admin can observe the total number and details of transactions on the platform.", "input": {}, "expected": {"outcome": "Admin successfully views total transactions details."}}, {"name": "Allow New Seller", "description": "Verify that the admin can allow a new seller to register on the platform.", "input": {"newSellerRequest": "mobarokSeller"}, "expected": {"outcome": "Admin approves the new seller request, allowing them to register."}}, {"name": "Shutdown User Profile", "description": "Verify that the admin can shut down a user profile.", "input": {"profileToShutdown": "Seller123"}, "expected": {"outcome": "Admin successfully shuts down the specified user profile."}}]}}
{"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}], "rag-example": {"usecase": {"name": "Profile Details", "scenario": "Users can set and edit their profile details which will be propagated to their portfolios", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters email and password", "User enters full/partial details", "User decides whether he/she wants to edit profile details", "User edits details"]}, "testcases": [{"name": "Empty e-mail/password", "description": "Verify if the user has provided email and password", "input": {"email": "user@gmail.com", "password": "xyz123456"}, "expected": {"outcome": "Successful account creation", "status": "Success"}}, {"name": "Invalid User Details", "description": "Verify that the system handles the case where a user tries to submit an invalid profile information", "input": {"github_link": 123}, "expected": {"outcome": "Invalid input", "status": "Error"}}]}}
{"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}], "rag-example": {"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}]}}
{"usecase": {"author": "2005004", "name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "Posting Property for Rent or Sell", "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.", "actors": "User, System, Agent", "preconditions": "User is logged in", "steps": ["The user selects the 'Sell/Rent' option", "The user fills in property details (e.g., location, price, for rent/sell, contact information, photos)", "User submits the property for validation", "Agent validates the property and approves the listing", "System displays the property to the users"]}, "testcases": [{"name": "Post Valid Property for Rent", "description": "User posts a valid property for rent", "input": {"property info": ["location: Dhaka", "price: 50,000", "for: rent", "contact: 017xxxxxxxx", "email : abc@gmail.com", "photos: 3"]}, "expected": {"outcome": "Property approved by agent and posted for rent", "status": "Success"}}, {"name": "Post Invalid Property for Sell", "description": "User posts an invalid property for sell", "input": {"property info": ["location: afhweuhu", "price: 50,000", "for: sell", "contact: 017xxxxxxxx", "email :"]}, "expected": {"outcome": "Invalid location, property not approved", "status": "Failed"}}]}}
{"usecase": {"author": "2005026", "name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}], "rag-example": {"usecase": {"name": "Posting Property for Rent or Sell", "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.", "actors": "User, System, Agent", "preconditions": "User is logged in", "steps": ["The user selects the 'Sell/Rent' option", "The user fills in property details (e.g., location, price, for rent/sell, contact information, photos)", "User submits the property for validation", "Agent validates the property and approves the listing", "System displays the property to the users"]}, "testcases": [{"name": "Post Valid Property for Rent", "description": "User posts a valid property for rent", "input": {"property info": ["location: Dhaka", "price: 50,000", "for: rent", "contact: 017xxxxxxxx", "email : abc@gmail.com", "photos: 3"]}, "expected": {"outcome": "Property approved by agent and posted for rent", "status": "Success"}}, {"name": "Post Invalid Property for Sell", "description": "User posts an invalid property for sell", "input": {"property info": ["location: afhweuhu", "price: 50,000", "for: sell", "contact: 017xxxxxxxx", "email :"]}, "expected": {"outcome": "Invalid location, property not approved", "status": "Failed"}}]}}
{"usecase": {"author": "2005008", "name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}], "rag-example": {"usecase": {"name": "Buyer-Seller Chat", "scenario": "A buyer wants to communicate with a seller using the chat option on the platform.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer is logged in to the website.", "The buyer has initiated communication with a specific seller."], "steps": [{"stepId": 1, "description": "Open Chat Interface.", "input": "Buyer clicks on the 'Chat' option within the seller's profile or product page."}, {"stepId": 2, "description": "Send Message.", "input": "Buyer enters a message and clicks 'Send' to communicate with the seller."}, {"stepId": 3, "description": "Receive Reply.", "input": "Seller receives the message and replies to the buyer's inquiry."}]}, "testcases": [{"name": "Send Message to Seller", "description": "Verify that the buyer can send a message to the seller.", "input": {"message": "Hi, I'm interested in purchasing your product. Can you provide more details?"}, "expected": {"outcome": "Message is sent successfully to the seller."}}, {"name": "Chat Notifications", "description": "Verify that both the buyer and seller receive notifications for new chat messages.", "input": {"newMessage": "Hello, I have a question about your product."}, "expected": {"outcome": "Both buyer and seller receive notifications for new chat messages."}}]}}
{"usecase": {"author": "2005003", "name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}], "rag-example": {"usecase": {"name": "Employer Job Posting", "scenario": "Employer posts job openings and manages posted jobs on the Jobify platform.", "actors": "Employer", "preconditions": "Employer is logged into the Jobify platform.", "steps": ["Employer navigates to the job posting section.", "Employer fills in job details including title, description, requirements, and application deadline.", "Employer previews the job posting.", "Employer submits the job posting."]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a job opening.", "input": {"jobDetails": {"title": "Data Scientist", "description": "Seeking a skilled data scientist for analytics team.", "requirements": "Master's degree in data science, experience with Python and machine learning.", "applicationDeadline": "2024-03-15"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}, {"name": "Incomplete Job Posting", "description": "Verify that the system handles the case where an employer tries to post a job with incomplete information.", "input": {"jobDetails": {"title": "Frontend Developer", "description": "Seeking a frontend developer for web application project."}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}]}}
{"usecase": {"author": "2005007", "name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}], "rag-example": {"usecase": {"name": "Apply for Jobs", "scenario": "Employee submits job applications through the platform.", "actors": "Employee", "preconditions": "Employee has selected a job to apply for.", "steps": ["Employee uploads resume and cover letter.", "Employee submits the application."]}, "testcases": [{"name": "Valid Job Application", "description": "Verify that an employee can successfully submit a job application.", "input": {"jobID": "67890", "resume": "employee_resume.pdf", "coverLetter": "cover_letter.txt"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Coverpage", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "coverLetter": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}]}}
{"usecase": {"author": "2005003", "name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}], "rag-example": {"usecase": {"name": "Apply for Jobs", "scenario": "Employee submits job applications through the platform.", "actors": "Employee", "preconditions": "Employee has selected a job to apply for.", "steps": ["Employee uploads resume and cover letter.", "Employee submits the application."]}, "testcases": [{"name": "Valid Job Application", "description": "Verify that an employee can successfully submit a job application.", "input": {"jobID": "67890", "resume": "employee_resume.pdf", "coverLetter": "cover_letter.txt"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Coverpage", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "coverLetter": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}]}}
{"usecase": {"author": "2005018", "name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}], "rag-example": {"usecase": {"name": "Registration", "scenario": "When a user wants to sign up our website", "actors": "User , Admin", "steps": ["users have to submit a form mentioning unique email,password,name,photo,phone,role,gender and birth type", "admin cross check these infos and give a activation of that user"]}, "testcases": [{"name": "valid registration", "description": "varify that user successfully register to the website ", "input": {"email": "have to give a unique email", "password": "have to give a strong password with at least 6 character", "name": "name is also required", "photo": "Photo of the user have required", "phone": "Have to give a phone number", "role": ["Doctor", "Patient"]}, "expected": {"outcome": "registration is successfully completed", "status": "approved"}}, {"name": "invalid Registration", "description": "varify that user gives all the required information to the website properly ", "expected": {"outcome": "Registration Failed", "status": "Rejected"}}, {"name": "Admin approval", "description": "varify that admin can successfully approves a user registration", "input": {"adminApproval": "true"}, "expected": {"outcome": "Registration Approved", "status": "approved"}}, {"name": "Admin rejection", "description": "varify that admin can reject a user registration", "input": {"adminApproval": "false"}, "expected": {"outcome": "Registration rejected", "status": "rejected"}}]}}
{"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}], "rag-example": {"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}}
{"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}], "rag-example": {"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}}
{"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}], "rag-example": {"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}]}}
{"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}]}}
{"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}]}}
{"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "Flight Review Deletion", "scenario": "Users can delete reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users delete reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Delete Reviews for a Flight", "description": "Users can delete reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012"}, "expected": {"outcome": "Review deleted successfully", "status": "204"}}]}}
{"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}], "rag-example": {"usecase": {"name": "Task Completion", "scenario": "A team member completes a task assigned to them.", "actors": "Team Member", "preconditions": "Team member is logged into the system and has been assigned tasks.", "steps": ["Team member selects a task assigned to them.", "Team member marks the task as completed."]}, "testcases": [{"name": "Valid Task Completion", "description": "Verify that a team member can successfully mark a task as completed.", "input": {"task_id": "12345"}, "expected": {"outcome": "Task marked as completed successfully", "status": "Completed", "notification": "Notification sent to users involved in the task"}}, {"name": "Incomplete Task Completion", "description": "Verify that the system handles the case where a team member tries to mark an incomplete task as completed.", "input": {"task_id": "54321"}, "expected": {"outcome": "Task completion failed", "status": "Not Completed"}}]}}
{"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}], "rag-example": {"usecase": {"name": "Profile Creation", "scenario": "User creates an account on several social media marketing platform.", "actors": "User, Entrepreneur", "preconditions": "User is not already registered on the platform and has a valid email/phone number.", "steps": ["User provides necessary information for account creation on the platform", "User verifies email/phone number", "User sets up account details (username, password, etc.)"]}, "testcases": [{"name": "Valid Account Creation", "description": "Verify that a user can successfully create an account.", "input": {"username": "john_doe", "email": "john@example.com", "password": "secure_password"}, "expected": {"outcome": "Account created successfully", "status": "Active"}}, {"name": "Invalid Email Verification", "description": "Verify that the system handles the case where the user provides an invalid email for verification.", "input": {"username": "invalid_user", "email": "invalid_email", "password": "weak_password"}, "expected": {"outcome": "Account creation failed", "status": "Inactive"}}]}}
{"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "admin downloads health data", "scenerio": "admin looks for downloading heath related data for further analysis", "actors": "Admin", "preconditions": "Admin is registered and logged in. Admin has access for the related data", "steps": ["admin searches for relevant data", "admin downloads the csv file"]}, "testcases": [{"name": "Authorized admin downloads data", "description": "verify that authorized admins can download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download successful", "status": "accepted"}}, {"name": "Unauthorized admin downloads data", "description": "verify that unauthorized admins cannot download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download failed", "status": "denied"}}]}}
{"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}], "rag-example": {"usecase": {"name": "Add Team Members to a Task", "scenario": "Admin wants to add team members to an existing Task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the Task.", "steps": ["Admin selects team members to add", "Admin submits the team member addition form"]}, "testcases": [{"name": "Valid Team Member Addition", "description": "Verify that an Admin can successfully add team members to a task.", "input": {"task": "name", "teamMembers": ["User123", "User456"]}, "expected": {"outcome": "Team members added successfully", "status": "Added", "notification": "Notification sent to users to whom the task is assigned"}}, {"name": "Adding Nonexistent User", "description": "Verify that the system handles adding a nonexistent user to the task.", "input": {"task": "name", "teamMembers": ["NonexistentUser"]}, "expected": {"outcome": "Team member addition failed", "status": "NonexistentUser"}}, {"name": "User Already in task", "description": "Verify that the system handles adding a team member who is already part of the task.", "input": {"task": "name", "teamMembers": ["User123"]}, "expected": {"outcome": "Team member addition failed", "status": "AlreadyInTask"}}]}}
{"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}], "rag-example": {"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}]}}
{"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "admin downloads health data", "scenerio": "admin looks for downloading heath related data for further analysis", "actors": "Admin", "preconditions": "Admin is registered and logged in. Admin has access for the related data", "steps": ["admin searches for relevant data", "admin downloads the csv file"]}, "testcases": [{"name": "Authorized admin downloads data", "description": "verify that authorized admins can download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download successful", "status": "accepted"}}, {"name": "Unauthorized admin downloads data", "description": "verify that unauthorized admins cannot download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download failed", "status": "denied"}}]}}
{"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}], "rag-example": {"usecase": {"name": "Flight Review Editing System", "scenario": "Users can edit reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users edit reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Edit Reviews for a Flight", "description": "Users can edit reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012", "rating": 4.7, "comment": "Updated comment here!", "timestamp": "2024-02-04T14:00:00Z"}, "expected": {"outcome": "Review edited successfully", "status": "200"}}]}}
{"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}], "rag-example": {"usecase": {"name": "Product Recommendations", "scenario": "User receives personalized product recommendations based on their previous interactions with the website.", "actors": "User, Recommendation Engine", "preconditions": "User is registered and logged in, has previous interactions with the website", "steps": ["User logs in with their credentials", "User views the homepage or a dedicated recommendations section", "Recommendation Engine analyzes user's browsing history", "User receives personalized product recommendations"]}, "testcases": [{"name": "View Recommended Products", "description": "Verify that a user can view personalized product recommendations.", "input": {}, "expected": {"outcome": "Recommended products displayed", "status": "Viewed recommendations"}}, {"name": "Relevance of Recommendations", "description": "Verify that recommended products are relevant to the user's browsing history.", "input": {}, "expected": {"outcome": "Relevant recommendations", "status": "Products align with user's preferences"}}, {"name": "Dynamic Recommendations", "description": "Verify that recommended products dynamically update based on the user's ongoing interactions.", "input": {"userInteractions": ["Viewed products in the 'Electronics' category"]}, "expected": {"outcome": "Dynamic recommendations", "status": "Updated based on recent interactions"}}]}}
{"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}], "rag-example": {"usecase": {"name": "Approve a Post", "scenario": "A group member posts a post and the group admin approves the post", "actors": "Group Member, Group Admin", "preconditions": "Group member is logged in and is a member of the group and there is a group admin", "postconditions": "Post is visible to all group members", "steps": ["Group member selects images to post", "Group member add relevant tags to the images", "Group member adds a description to the post", "Group member clicks on post button", "A notification is sent to admin about the post", "Group admin approves the post", "A notification is sent to the group member about the approval"]}, "testcases": [{"name": "Valid Image Post with Correct Tags", "description": "Verify that a group member can successfully post images with correct tags", "input": {"selectedImages": ["Nature.jpg", "Travel.jpg"], "tags": ["Nature", "Travel"]}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Image post with incorrect Tags", "description": "Verify that the system handles the case where a group member posts images with incorrect tags, and the admin modifies the tags before approving the post.", "input": {"selectedImages": ["Art.jpg", "Culture.jpg"], "tags": ["Artwork", "History"]}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Empty Image Post ", "description": "Verify that the system handles the case where a group member tries to submit an empty post", "input": {"selectedImages": "", "tags": ""}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a member's post  with valid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Admin Modification of Tags", "description": "Verify that the admin can modify the tags of a member's post  with invalid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a member's post ", "input": {"advisorApproval": false}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}]}}
{"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}], "rag-example": {"usecase": {"name": "Adding Resources to a Course", "scenario": "A student adds various resources to a course.", "actors": "Student", "preconditions": "User is registered and logged in. A course exists under a session.", "steps": ["User navigates to the desired course.", "User selects to add a new resource.", "User specifies the type of resource to add: lecture video, PDF, link, or notes.", "User uploads or provides the necessary information for the selected resource type.", "User adds the resource to the course."]}, "testcases": [{"name": "Add Lecture Video", "description": "Verify that a student can add a lecture video to a course.", "input": {"resource_type": "lecture_video", "video_title": "Introduction to Software Development", "video_url": "https://example.com/lecture1"}, "expected": {"outcome": "Lecture video added successfully to the course", "status": "Success"}}, {"name": "Add PDF Resource", "description": "Verify that a student can add a PDF resource to a course.", "input": {"resource_type": "pdf", "pdf_title": "Software Development Basics", "pdf_file": "example.pdf"}, "expected": {"outcome": "PDF resource added successfully to the course", "status": "Success"}}, {"name": "Add Link", "description": "Verify that a student can add a link to a course.", "input": {"resource_type": "link", "link_title": "Software Development Tutorial", "link_url": "https://example.com/tutorial"}, "expected": {"outcome": "Link added successfully to the course", "status": "Success"}}, {"name": "Add Notes", "description": "Verify that a student can add personal class notes or pictures to a course.", "input": {"resource_type": "notes", "notes_title": "Class Notes - Week 1", "notes_file": "notes_week1.pdf"}, "expected": {"outcome": "Notes added successfully to the course", "status": "Success"}}]}}
{"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}], "rag-example": {"usecase": {"name": "Highlighting Quotations", "scenario": "User highlights and saves quotations from a book.", "actors": "User", "preconditions": "User is registered, logged in, and reading a book.", "steps": ["User selects a quotation from the book", "User highlights and saves the quotation"]}, "testcases": [{"name": "Valid Quotation Highlighting", "description": "Verify that a user can successfully highlight and save a quotation.", "input": {"selectedQuotation": "Divergent"}, "expected": {"outcome": "Highlighting successful", "status": "Saved"}}, {"name": "Highlighting Non-existent Quotation", "description": "Verify the response when a user tries to highlight a non-existent quotation.", "input": {"selectedQuotation": "NonExistentQuotation"}, "expected": {"outcome": "Highlighting failed", "status": "Error"}}]}}
{"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}], "rag-example": {"usecase": {"name": "Highlighting Quotations", "scenario": "User highlights and saves quotations from a book.", "actors": "User", "preconditions": "User is registered, logged in, and reading a book.", "steps": ["User selects a quotation from the book", "User highlights and saves the quotation"]}, "testcases": [{"name": "Valid Quotation Highlighting", "description": "Verify that a user can successfully highlight and save a quotation.", "input": {"selectedQuotation": "Divergent"}, "expected": {"outcome": "Highlighting successful", "status": "Saved"}}, {"name": "Highlighting Non-existent Quotation", "description": "Verify the response when a user tries to highlight a non-existent quotation.", "input": {"selectedQuotation": "NonExistentQuotation"}, "expected": {"outcome": "Highlighting failed", "status": "Error"}}]}}
{"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}], "rag-example": {"usecase": {"name": "Content Analytics", "scenario": "User views analytics for their posted content on social media platforms.", "actors": "User", "preconditions": "User is logged in and has posted content on selected social media platforms", "steps": ["User navigates to the analytics section", "User selects a specific content or time range", "User views analytics data for engagement, reach, and interactions"]}, "testcases": [{"name": "Content Analytics", "description": "Verify that a user can successfully view analytics for their posted content.", "input": {"selectedContent": "Post123", "timeRange": "Last 7 days"}, "expected": {"outcome": "Content analytics retrieved successfully", "metrics": {"engagement": 1500, "reach": 5000, "interactions": 200}}}, {"name": "Invalid Content Selection", "description": "Verify that the system handles the case where the user selects invalid or non-existent content for analytics.", "input": {"selectedContent": "InvalidPost", "timeRange": "Last 30 days"}, "expected": {"outcome": "Content analytics retrieval failed", "error": "Invalid content selection"}}]}}
{"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}], "rag-example": {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}}
{"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}], "rag-example": {"usecase": {"name": "Note Taker", "scenario": "Users can create,update and share their notes on our platform through this feature", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic notes details", "User selects the appropriate tags for the note", "User decides whether he/she wants to make the post public/private", "User writes note in markdown"]}, "testcases": [{"name": "Valid note details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Note Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Publicize Note", "description": "Verify that the public notes are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}]}}
{"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}], "rag-example": {"usecase": {"name": "Author Course Management", "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.", "actors": "Author", "preconditions": "The author is registered and logged in to the platform as an author.", "steps": ["Author navigates to the analytics dashboard to view statistics of their existing courses.", "Author decides to create a new course.", "Author enters course details, including title, description, and objectives.", "Author adds lessons and content to the course.", "Author reviews and edits lessons within the course.", "Author submits the completed course to an admin or moderator for review."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an author can view analytics of their existing courses.", "input": {}, "expected": {"outcome": "Analytics displayed", "status": "Successful"}}, {"name": "Create a New Course", "description": "Verify that an author can create a new course.", "input": {"courseDetails": {"title": "Permutation and Combination", "description": "A comprehensive guide to permutations and combinations", "objectives": ["Understand permutations and combinations", "Solve related problems"]}}, "expected": {"outcome": "Course created successfully", "status": "Created"}}, {"name": "Edit Lessons in a Course", "description": "Verify that an author can edit lessons within a course.", "input": {"selectedCourse": "Permutation and Combination", "lessonEdits": {"Lesson 1": "Updated content on permutations", "Lesson 2": "Added examples on combinations"}}, "expected": {"outcome": "Lessons edited successfully", "status": "Edited"}}, {"name": "Submit Course for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course submitted for review", "status": "Submitted"}}]}}
{"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}], "rag-example": {"usecase": {"name": "Create a post", "scenario": "User creates a post", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters post information", "User submits post"]}, "testcases": [{"name": "Valid Post Information", "description": "User enters valid post information", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Valid Post Information - With Poll", "description": "User enters valid post information with poll", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": true, "options": ["option1", "option2"], "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Invalid Post Information - Missing title", "description": "User enters invalid post information", "input": {"post": {"content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is not created - Missing title", "status": "Rejected"}}]}}
{"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}], "rag-example": {"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}]}}
{"usecase": {"name": "Managing Database Pages", "scenario": "User manages individual pages within a database, adding, opening, and editing them.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to add and edit database pages."], "steps": ["User navigates to the database and clicks on 'New' to add a new page.", "User enters the details for the new page and saves it.", "User opens an existing page to edit its content.", "User modifies properties or adds new content to the page."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New Database Page", "description": "Verify that the user can create a new page within the database.", "input": {"pageName": "New Task", "properties": {"Status": "To-Do", "Due Date": "2024-10-20"}}, "expected": {"outcome": "New page created successfully in the database.", "status": "Page Created"}}, {"name": "Editing Existing Page Content", "description": "Verify that the user can edit an existing page's content in the database.", "input": {"pageName": "Task 1", "newContent": "Updated task details."}, "expected": {"outcome": "Page content updated successfully.", "status": "Updated"}}, {"name": "Deleting a Database Page", "description": "Verify that the user can delete a page from the database.", "input": {"pageName": "Old Task"}, "expected": {"outcome": "Page deleted successfully from the database.", "status": "Deleted"}}], "rag-example": {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}}
{"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}], "rag-example": {"usecase": {"name": "Task Completion", "scenario": "A team member completes a task assigned to them.", "actors": "Team Member", "preconditions": "Team member is logged into the system and has been assigned tasks.", "steps": ["Team member selects a task assigned to them.", "Team member marks the task as completed."]}, "testcases": [{"name": "Valid Task Completion", "description": "Verify that a team member can successfully mark a task as completed.", "input": {"task_id": "12345"}, "expected": {"outcome": "Task marked as completed successfully", "status": "Completed", "notification": "Notification sent to users involved in the task"}}, {"name": "Incomplete Task Completion", "description": "Verify that the system handles the case where a team member tries to mark an incomplete task as completed.", "input": {"task_id": "54321"}, "expected": {"outcome": "Task completion failed", "status": "Not Completed"}}]}}
{"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}], "rag-example": {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}}
{"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}], "rag-example": {"usecase": {"name": "View user profile", "description": "User attempts to view a user profile", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on a user profile"]}, "testcases": [{"name": "Valid User Profle Fetch Request", "description": "User requests for a User Profle with valid User id", "input": {"params": {"id": "1905010@cse.buet.ac.bd"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile viewed successfully", "status": "Approved"}}, {"name": "Invalid User Profile Fetch Request", "description": "User requests for a User Profile with invalid User id", "input": {"params": {"id": "not_a_valid_id"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile not found", "access": "Denied"}}, {"name": "Invalid User Profile Fetch Request - Invalid Token", "description": "User requests for a User Profile with invalid token", "input": {"params": {"id": "123"}, "cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain user profiles", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view this user profile", "access": "Denied"}}]}}
{"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Posting Property for Rent or Sell", "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.", "actors": "User, System, Agent", "preconditions": "User is logged in", "steps": ["The user selects the 'Sell/Rent' option", "The user fills in property details (e.g., location, price, for rent/sell, contact information, photos)", "User submits the property for validation", "Agent validates the property and approves the listing", "System displays the property to the users"]}, "testcases": [{"name": "Post Valid Property for Rent", "description": "User posts a valid property for rent", "input": {"property info": ["location: Dhaka", "price: 50,000", "for: rent", "contact: 017xxxxxxxx", "email : abc@gmail.com", "photos: 3"]}, "expected": {"outcome": "Property approved by agent and posted for rent", "status": "Success"}}, {"name": "Post Invalid Property for Sell", "description": "User posts an invalid property for sell", "input": {"property info": ["location: afhweuhu", "price: 50,000", "for: sell", "contact: 017xxxxxxxx", "email :"]}, "expected": {"outcome": "Invalid location, property not approved", "status": "Failed"}}]}}
{"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Property Search with Selected Criteria", "scenario": "Users can search for properties based on various filters such as location, price range, beds and baths, perks.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Search' option on the website", "User inputs the search criteria: location, price range, beds and baths, perks", "System retrieves the properties from database that match the search criteria", "System displays the properties to the user"]}, "testcases": [{"name": "Search with Valid Results", "description": "User inputs valid search criteria and gets valid results", "input": {"search_criteria": ["location: Dhaka", "price range: 500,000 - 1,000,000", "beds: 3", "baths: 2", "perks: pool, mosque"]}, "expected": {"outcome": "Valid search results displayed", "status": "Success"}}, {"name": "Search with No Results", "description": "User inputs valid search criteria but gets no results. No property in the database match the criteria", "input": {"search_criteria": ["location: Dhaka", "price range: 50,000 - 100,000", "beds: 3", "baths: 6", "perks: park, mosque"]}, "expected": {"outcome": "No search results displayed", "status": "Failed"}}]}}
{"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Course Enrollment and Management", "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.", "actors": "User", "preconditions": "The user is registered and logged in to the website.", "steps": ["User navigates to the list of available courses.", "User browses and selects a course to enroll in.", "User enrolls in the selected course.", "User accesses the course page and views the lessons and quizzes.", "User attends the quizzes within the course.", "User completes the course and gives a rating to the course.", "User views their user profile to track course progress and ratings."]}, "testcases": [{"name": "View Available Courses", "description": "Verify that a user can view all available courses.", "input": {}, "expected": {"outcome": "Courses are displayed", "status": "Successful"}}, {"name": "Enroll in a Course", "description": "Verify that a user can enroll in a course.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "User successfully enrolled", "status": "Enrolled"}}, {"name": "View Lessons in a Course", "description": "Verify that a user can view lessons within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Lessons are accessible", "status": "Successful"}}, {"name": "Attend Quizzes in a Course", "description": "Verify that a user can attend quizzes within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Quizzes are accessible", "status": "Successful"}}, {"name": "Rate a Course", "description": "Verify that a user can rate a course after completing it.", "input": {"selectedCourse": "Algebra", "rating": 4}, "expected": {"outcome": "Course rated successfully", "status": "Rated"}}, {"name": "View User Profile", "description": "Verify that a user can view their profile to track progress and ratings.", "input": {}, "expected": {"outcome": "User profile is accessible", "status": "Successful"}}]}}
{"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Property Search with Selected Criteria", "scenario": "Users can search for properties based on various filters such as location, price range, beds and baths, perks.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Search' option on the website", "User inputs the search criteria: location, price range, beds and baths, perks", "System retrieves the properties from database that match the search criteria", "System displays the properties to the user"]}, "testcases": [{"name": "Search with Valid Results", "description": "User inputs valid search criteria and gets valid results", "input": {"search_criteria": ["location: Dhaka", "price range: 500,000 - 1,000,000", "beds: 3", "baths: 2", "perks: pool, mosque"]}, "expected": {"outcome": "Valid search results displayed", "status": "Success"}}, {"name": "Search with No Results", "description": "User inputs valid search criteria but gets no results. No property in the database match the criteria", "input": {"search_criteria": ["location: Dhaka", "price range: 50,000 - 100,000", "beds: 3", "baths: 6", "perks: park, mosque"]}, "expected": {"outcome": "No search results displayed", "status": "Failed"}}]}}
{"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Profile Details", "scenario": "Users can set and edit their profile details which will be propagated to their portfolios", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters email and password", "User enters full/partial details", "User decides whether he/she wants to edit profile details", "User edits details"]}, "testcases": [{"name": "Empty e-mail/password", "description": "Verify if the user has provided email and password", "input": {"email": "user@gmail.com", "password": "xyz123456"}, "expected": {"outcome": "Successful account creation", "status": "Success"}}, {"name": "Invalid User Details", "description": "Verify that the system handles the case where a user tries to submit an invalid profile information", "input": {"github_link": 123}, "expected": {"outcome": "Invalid input", "status": "Error"}}]}}
{"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Course Enrollment and Management", "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.", "actors": "User", "preconditions": "The user is registered and logged in to the website.", "steps": ["User navigates to the list of available courses.", "User browses and selects a course to enroll in.", "User enrolls in the selected course.", "User accesses the course page and views the lessons and quizzes.", "User attends the quizzes within the course.", "User completes the course and gives a rating to the course.", "User views their user profile to track course progress and ratings."]}, "testcases": [{"name": "View Available Courses", "description": "Verify that a user can view all available courses.", "input": {}, "expected": {"outcome": "Courses are displayed", "status": "Successful"}}, {"name": "Enroll in a Course", "description": "Verify that a user can enroll in a course.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "User successfully enrolled", "status": "Enrolled"}}, {"name": "View Lessons in a Course", "description": "Verify that a user can view lessons within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Lessons are accessible", "status": "Successful"}}, {"name": "Attend Quizzes in a Course", "description": "Verify that a user can attend quizzes within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Quizzes are accessible", "status": "Successful"}}, {"name": "Rate a Course", "description": "Verify that a user can rate a course after completing it.", "input": {"selectedCourse": "Algebra", "rating": 4}, "expected": {"outcome": "Course rated successfully", "status": "Rated"}}, {"name": "View User Profile", "description": "Verify that a user can view their profile to track progress and ratings.", "input": {}, "expected": {"outcome": "User profile is accessible", "status": "Successful"}}]}}
{"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}], "rag-example": {"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}]}}
{"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Search and Sort Products", "scenario": "A user wants to search for crops and have the ability to sort the search results by name, rate, and popularity.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The website has a variety of crops listed in the marketplace."], "steps": [{"stepId": 1, "description": "Enter search criteria.", "input": "User enters the desired search criteria (e.g., crop name or category) into the search bar."}, {"stepId": 2, "description": "Initiate search.", "input": "User clicks on the 'Search' button to initiate the search."}, {"stepId": 3, "description": "Sort search results.", "input": "User selects sorting options such as 'Sort by Name,' 'Sort by Rate,' or 'Sort by Popularity.'"}]}, "testcases": [{"name": "Search for a Specific Crop", "description": "Verify that the user can search for a specific crop by entering its name.", "input": {"searchCriteria": "Tomatoes"}, "expected": {"outcome": "Search results display the specified crop."}}, {"name": "Search for Crops by Category", "description": "Verify that the user can search for crops by selecting a specific category.", "input": {"searchCriteria": "Fruits"}, "expected": {"outcome": "Search results display crops within the selected category."}}, {"name": "Sort Search Results by Popularity", "description": "Verify that the user can sort the search results by crop popularity.", "input": {"sortingOption": "Popularity"}, "expected": {"outcome": "Search results are displayed in order of decreasing crop popularity."}}]}}
{"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Create a Group", "scenario": "A user creates a group with a name ,profile Photo  description", "Actors": "Any valid user", "precondition": "User is logged in", "steps": ["User clicks on create group button", "User enters the group name", "User enters the group description", "User selects the group profile photo", "User clicks on create group button"]}, "testcases": [{"name": "Valid Group Creation", "description": "Verify that a group is created successfully with valid data", "input": {"name": "Test Group", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation", "description": "Verify that a group is not created with invalid data", "input": {"name": "", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}]}}
{"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}}
{"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}], "rag-example": {"usecase": {"name": "Author Course Management", "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.", "actors": "Author", "preconditions": "The author is registered and logged in to the platform as an author.", "steps": ["Author navigates to the analytics dashboard to view statistics of their existing courses.", "Author decides to create a new course.", "Author enters course details, including title, description, and objectives.", "Author adds lessons and content to the course.", "Author reviews and edits lessons within the course.", "Author submits the completed course to an admin or moderator for review."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an author can view analytics of their existing courses.", "input": {}, "expected": {"outcome": "Analytics displayed", "status": "Successful"}}, {"name": "Create a New Course", "description": "Verify that an author can create a new course.", "input": {"courseDetails": {"title": "Permutation and Combination", "description": "A comprehensive guide to permutations and combinations", "objectives": ["Understand permutations and combinations", "Solve related problems"]}}, "expected": {"outcome": "Course created successfully", "status": "Created"}}, {"name": "Edit Lessons in a Course", "description": "Verify that an author can edit lessons within a course.", "input": {"selectedCourse": "Permutation and Combination", "lessonEdits": {"Lesson 1": "Updated content on permutations", "Lesson 2": "Added examples on combinations"}}, "expected": {"outcome": "Lessons edited successfully", "status": "Edited"}}, {"name": "Submit Course for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course submitted for review", "status": "Submitted"}}]}}
{"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Note Taker", "scenario": "Users can create,update and share their notes on our platform through this feature", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic notes details", "User selects the appropriate tags for the note", "User decides whether he/she wants to make the post public/private", "User writes note in markdown"]}, "testcases": [{"name": "Valid note details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Note Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Publicize Note", "description": "Verify that the public notes are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}]}}
{"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "Get All User Boards", "scenario": "User retrieves a list of all their boards for display on the dashboard page.", "actors": "User", "preconditions": "User is registered, logged in, and has created or is a member of one or more boards.", "steps": ["User requests to view all boards", "System retrieves and displays all boards associated with the user"]}, "testcases": [{"name": "Successful Retrieval of Boards", "description": "Verify that a user can successfully retrieve all boards they are associated with.", "input": {}, "expected": {"outcome": "Boards retrieval successful", "status": "Retrieved", "response": [{"board_id": 1, "board_name": "CSE408 Software Project | TaskFlow", "board_description": "This board oversees the progress of the CSE408 Software Project", "created_at": "2023-10-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.45}, {"board_id": 2, "board_name": "CSE406 Security Project | Wazuh", "board_description": "This board oversees the progress of the CSE406 Security Project", "created_at": "2023-11-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "risenfromashes", "board_overall_progress": 0.12}, {"board_id": 3, "board_name": "Thesis | Language Model of Phylogenetic Trees", "board_description": "Tune here to be in sync with the progress of our thesis work", "created_at": "2023-10-23T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.09}]}}, {"name": "Internal Server Error During Boards Retrieval", "description": "Verify that the system provides an appropriate response in case of an internal server error during board retrieval.", "input": {}, "expected": {"outcome": "Boards retrieval failed", "status": "Error", "error": "Internal Server Error"}}, {"name": "No Boards Available", "description": "Verify that the system handles cases where the user has no boards associated with their account.", "input": {}, "expected": {"outcome": "No boards to retrieve", "status": "No Content", "response": []}}]}}
{"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}], "rag-example": {"usecase": {"name": "View Saved Events", "description": "User attempts to view his saved Events", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on My Saved Events Tab"]}, "testcases": [{"name": "Valid Saved Events Fetch Request", "description": "User requests for saved Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all of his saved Events", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User only views Events he is not banned from viewing", "access": "Denied"}}]}}
{"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}], "rag-example": {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}}
{"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}], "rag-example": {"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}]}}
{"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}], "rag-example": {"usecase": {"name": "Team Operations", "scenario": "User can create a new Team under an Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization", "steps": ["User creates an Team", "User adds members to Team", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that an Team can be created with a valid name in the Organization", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created team", "teamid": "Team id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Team admin can add members to an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to team", "teamid": "Team id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Team admin can send notice to all members in an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in team", "teamid": "Team id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "teamid": "Team id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "teamid": "Team id", "status": "Unavailable User"}}]}}
{"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}], "rag-example": {"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}]}}
{"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}], "rag-example": {"usecase": {"name": "Session Creation with Visibility Settings", "scenario": "A student creates a session and sets its visibility.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects to create a new session.", "User enters the session title.", "User selects the visibility setting: public, private, or publish.", "User creates the session."]}, "testcases": [{"name": "Create Public Session", "description": "Verify that a student can create a session with public visibility.", "input": {"session_title": "4-1", "visibility": "public"}, "expected": {"outcome": "Session creation successful with public visibility", "status": "Success"}}, {"name": "Create Private Session", "description": "Verify that a student can create a session with private visibility.", "input": {"session_title": "4-2", "visibility": "private"}, "expected": {"outcome": "Session creation successful with private visibility", "status": "Success"}}, {"name": "Publish Session", "description": "Verify that a student can publish a session to make it visible to others.", "input": {"session_title": "4-1", "visibility": "publish"}, "expected": {"outcome": "Session successfully published", "status": "Success"}}]}}
{"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}], "rag-example": {"usecase": {"name": "Collaborator Submits Offers/Events", "scenario": "Collaborator submits offers or events to be featured as top offers or events.", "actors": "Collaborator, Admin", "preconditions": "Collaborator is registered and authenticated, Admin is authenticated", "steps": ["Collaborator logs in with their credentials", "Collaborator navigates to the collaboration dashboard", "Collaborator submits details of the offer or event, including product details, discount information, and validity period", "Admin reviews and approves the submitted offer or event", "Approved offer or event is displayed as a top offer or event on the Website"]}, "testcases": [{"name": "Collaborator Submits Offer", "description": "Verify that a collaborator can successfully submit an offer to be displayed as a top offer on the website.", "input": {"offerType": "Discount", "productName": "Smart TV", "discountPercentage": 20, "validityPeriod": "2024-03-01 to 2024-03-15"}, "expected": {"outcome": "Offer submitted successfully", "status": "Pending admin approval"}}, {"name": "Collaborator Submits Event", "description": "Verify that a collaborator can successfully submit an event to be displayed as an event on the website.", "input": {"eventType": "Launch Event", "productName": "New Smartphone Model", "eventDescription": "Join us for the exclusive launch of our latest smartphone model.", "eventDate": "2024-04-01"}, "expected": {"outcome": "Event submitted successfully", "status": "Pending admin approval"}}, {"name": "Admin Approval", "description": "Verify that the admin can review and approve the submitted offer or event.", "input": {"adminApproval": true}, "expected": {"outcome": "Offer or event approved", "status": "Displayed as top offer or event"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject the submitted offer or event.", "input": {"adminApproval": false}, "expected": {"outcome": "Offer or event rejected", "status": "Not displayed"}}]}}
{"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}], "rag-example": {"usecase": {"name": "Discussion Forum Participation", "scenario": "User engages in the discussion forum.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User posts a discussion topic", "User replies to a discussion topic"]}, "testcases": [{"name": "Valid Discussion Post", "description": "Verify that a user can successfully post a discussion topic.", "input": {"userId": "user123", "topic": "Discussing prompt creation techniques", "content": "Share your experiences and tips!"}, "expected": {"outcome": "Discussion post successful", "status": "Posted"}}, {"name": "Invalid Discussion Post", "description": "Verify that the system handles the case where a user tries to post an invalid discussion topic.", "input": {"userId": "user456", "topic": "", "content": "Invalid content"}, "expected": {"outcome": "Discussion post failed", "status": "Not Posted"}}, {"name": "Discussion Reply", "description": "Verify that a user can successfully reply to a discussion topic.", "input": {"userId": "user789", "topicId": "topic123", "content": "Great insights!"}, "expected": {"outcome": "Discussion reply successful", "status": "Replied"}}]}}
{"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}], "rag-example": {"usecase": {"name": "Prompt Approval by Admin", "scenario": "Admin reviews and approves prompts submitted by sellers.", "actors": "Admin", "preconditions": "Admin is logged in.", "steps": ["Admin reviews submitted prompts", "Admin approves or rejects the prompts"]}, "testcases": [{"name": "Valid Prompt Approval", "description": "Verify that the admin can successfully approve a submitted prompt.", "input": {"adminId": "admin123", "promptId": "prompt456"}, "expected": {"outcome": "Prompt approved successfully", "status": "Approved"}}, {"name": "Valid Prompt Rejection", "description": "Verify that the admin can successfully reject a submitted prompt.", "input": {"adminId": "admin456", "promptId": "prompt789"}, "expected": {"outcome": "Prompt rejected successfully", "status": "Rejected"}}, {"name": "Invalid Prompt Approval", "description": "Verify that the system handles the case where the admin tries to approve an invalid prompt.", "input": {"adminId": "admin789", "promptId": "invalidPrompt"}, "expected": {"outcome": "Prompt approval failed", "status": "Not Approved"}}]}}
{"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}], "rag-example": {"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}]}}
{"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}], "rag-example": {"usecase": {"name": "User Profile Management", "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Profile' option", "The user can update personal information, change password, view activity history, wishlist", "User presses the 'Save' button", "System updates the user profile"]}, "testcases": [{"name": "Change Password", "description": "User changes their password", "input": {"password": ["old password: abc123", "new password: neha124", "confirm password: neha124"]}, "expected": {"outcome": "Password changed successfully", "status": "Success"}}, {"name": "Update Profile with Invalid Email", "description": "User tries to update their profile with an invalid email", "input": {"profile info": ["name: Neha", "email: neha", "phone: 017xxxxxxxx"]}, "expected": {"outcome": "Invalid email, profile not updated", "status": "Failed"}}]}}
{"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}], "rag-example": {"usecase": {"name": "User Profile Management", "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Profile' option", "The user can update personal information, change password, view activity history, wishlist", "User presses the 'Save' button", "System updates the user profile"]}, "testcases": [{"name": "Change Password", "description": "User changes their password", "input": {"password": ["old password: abc123", "new password: neha124", "confirm password: neha124"]}, "expected": {"outcome": "Password changed successfully", "status": "Success"}}, {"name": "Update Profile with Invalid Email", "description": "User tries to update their profile with an invalid email", "input": {"profile info": ["name: Neha", "email: neha", "phone: 017xxxxxxxx"]}, "expected": {"outcome": "Invalid email, profile not updated", "status": "Failed"}}]}}
{"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}], "rag-example": {"usecase": {"name": "User Profile Management", "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Profile' option", "The user can update personal information, change password, view activity history, wishlist", "User presses the 'Save' button", "System updates the user profile"]}, "testcases": [{"name": "Change Password", "description": "User changes their password", "input": {"password": ["old password: abc123", "new password: neha124", "confirm password: neha124"]}, "expected": {"outcome": "Password changed successfully", "status": "Success"}}, {"name": "Update Profile with Invalid Email", "description": "User tries to update their profile with an invalid email", "input": {"profile info": ["name: Neha", "email: neha", "phone: 017xxxxxxxx"]}, "expected": {"outcome": "Invalid email, profile not updated", "status": "Failed"}}]}}
{"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}], "rag-example": {"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}}
{"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}], "rag-example": {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}}
{"usecase": {"name": "Search for Restaurants", "scenario": "Customer searches for restaurants using keywords such as cuisine type, restaurant name, or dish name.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer clicks on the search bar", "Customer enters a keyword or phrase", "System displays search results based on the keyword or phrase", "Customer selects a restaurant from the search results"]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that the system shows the correct restaurant options when a valid restaurant name is entered.", "input": {"searchQuery": "Burger King"}, "expected": {"outcome": "Search results display Burger King and related options", "status": "Success"}}, {"name": "Search with Popular Dish Name", "description": "Verify that the system shows relevant restaurants when a popular dish name is entered.", "input": {"searchQuery": "Pizza"}, "expected": {"outcome": "Search results display restaurants offering pizza", "status": "Success"}}, {"name": "Search with Invalid Query", "description": "Verify that the system handles invalid or unknown queries appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "Show no search result and display we're not in your area yet. NO resturants matches the slected criteria", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify that the system handles empty search queries gracefully.", "input": {"searchQuery": ""}, "expected": {"outcome": "No search results", "status": "Error"}}], "id": "2005005", "rag-example": {"usecase": {"name": "Search Food", "scenario": "Customer and Guest can search food.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of food", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search food by name", "input": {"name": "Burger"}, "expected": {"outcome": "Food Found", "status": "okay"}}, {"name": "search by filter", "description": "User can search food by filter", "input": {"category": "Fast Food", "rating": "3.5", "min_price": "100", "max_price": "200"}, "expected": {"outcome": "Food not Found", "status": "okay"}}]}}
{"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "id": "2005019", "rag-example": {"usecase": {"name": "Search Restaurant", "scenario": "Customer and Guest can search Restaurant.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of Restaurant", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search restaurant by name", "input": {"name": "abcd Hotel"}, "expected": {"outcome": "Restaurant Found", "status": "okay"}}, {"name": "search by Location or type", "description": "User can search restaurant by Location or type", "input": {"Location": "Lalbagh", "rating": "3.5", "type": "Fast Food"}, "expected": {"outcome": "Restaurant not Found", "status": "okay"}}]}}
{"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "id": "2005021", "rag-example": {"usecase": {"name": "Product Recommendations", "scenario": "User receives personalized product recommendations based on their previous interactions with the website.", "actors": "User, Recommendation Engine", "preconditions": "User is registered and logged in, has previous interactions with the website", "steps": ["User logs in with their credentials", "User views the homepage or a dedicated recommendations section", "Recommendation Engine analyzes user's browsing history", "User receives personalized product recommendations"]}, "testcases": [{"name": "View Recommended Products", "description": "Verify that a user can view personalized product recommendations.", "input": {}, "expected": {"outcome": "Recommended products displayed", "status": "Viewed recommendations"}}, {"name": "Relevance of Recommendations", "description": "Verify that recommended products are relevant to the user's browsing history.", "input": {}, "expected": {"outcome": "Relevant recommendations", "status": "Products align with user's preferences"}}, {"name": "Dynamic Recommendations", "description": "Verify that recommended products dynamically update based on the user's ongoing interactions.", "input": {"userInteractions": ["Viewed products in the 'Electronics' category"]}, "expected": {"outcome": "Dynamic recommendations", "status": "Updated based on recent interactions"}}]}}
{"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "id": "2005024", "rag-example": {"usecase": {"name": "Customer cart", "scenario": "Customer adding food to cart and viewing cart", "actors": "Customer", "precondition": "Customer must be logged in", "steps": ["Customer select the quantity of the food", "Customer add it to the cart"]}, "testcases": [{"name": "valid quantity", "description": "Customer selects valid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart", "status": "Added"}}, {"name": "invalid quantity", "description": "Customer selects invalid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": -1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 0, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable food", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": "unavailable", "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable restaurant", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "Unavailable hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}]}}
{"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "id": "2005027", "rag-example": {"usecase": {"name": "Search Food", "scenario": "Customer and Guest can search food.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of food", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search food by name", "input": {"name": "Burger"}, "expected": {"outcome": "Food Found", "status": "okay"}}, {"name": "search by filter", "description": "User can search food by filter", "input": {"category": "Fast Food", "rating": "3.5", "min_price": "100", "max_price": "200"}, "expected": {"outcome": "Food not Found", "status": "okay"}}]}}
{"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "id": "2005030", "rag-example": {"usecase": {"name": "Customer Track the Order", "scenario": "Customer can track status of the active order and see the prvious order", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Restaurant approved the order", "Delivery person update the status", "Customer view the status"]}, "testcases": [{"name": "Active order", "description": "Customer can track only active order", "input": {"orderid": "222"}, "expected": {"outcome": "Food is on the way", "status": "not delivered"}}, {"name": "Previous Order", "description": "Customer cannot track the previous order which has already been delivered", "input": {"orderid": "222"}, "expected": {"outcome": "Already Delivered", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Customer cannot track the order beause the order is cancelled", "input": {"orderid": "222"}, "expected": {"outcome": "Order Cancelled", "status": "cancelled"}}]}}
{"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "id": "2005005", "rag-example": {"usecase": {"name": "Customer Track the Order", "scenario": "Customer can track status of the active order and see the prvious order", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Restaurant approved the order", "Delivery person update the status", "Customer view the status"]}, "testcases": [{"name": "Active order", "description": "Customer can track only active order", "input": {"orderid": "222"}, "expected": {"outcome": "Food is on the way", "status": "not delivered"}}, {"name": "Previous Order", "description": "Customer cannot track the previous order which has already been delivered", "input": {"orderid": "222"}, "expected": {"outcome": "Already Delivered", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Customer cannot track the order beause the order is cancelled", "input": {"orderid": "222"}, "expected": {"outcome": "Order Cancelled", "status": "cancelled"}}]}}
{"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005021", "rag-example": {"usecase": {"name": "Customer cart", "scenario": "Customer adding food to cart and viewing cart", "actors": "Customer", "precondition": "Customer must be logged in", "steps": ["Customer select the quantity of the food", "Customer add it to the cart"]}, "testcases": [{"name": "valid quantity", "description": "Customer selects valid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart", "status": "Added"}}, {"name": "invalid quantity", "description": "Customer selects invalid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": -1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 0, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable food", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": "unavailable", "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable restaurant", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "Unavailable hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}]}}
{"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005024", "rag-example": {"usecase": {"name": "Place Order", "scenario": "Customer place the order from cart", "actors": "Customer", "precondition": "Customer must be logged in and cart must not be empty", "steps": ["Customer finalize the order", "Customer gives necessary info like location, phone number", "System show the total price", "Customer orders the food"]}, "testcases": [{"name": "cash on delivery order", "description": "Customer orders food and pay after delivery", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "success"}}, {"name": "Online payment order", "description": "Customer orders food and pay via online", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "1abcd2", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "paid"}}, {"name": "Invalid online payment order", "description": "Customer orders food and pay via online using invalid trxid", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "invalid", "cartid": "222"}, "expected": {"outcome": "Order did not place", "status": "Rejected"}}]}}
