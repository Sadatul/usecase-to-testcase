{"usecase": {"name": "File Upload", "scenario": "User uploads a file, then it is signed with user's private key in browser side, then the file is uploaded to server side. User can view file after a successful upload.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User chooses a file from file browser", "File is digitally signed.", "The file is sent in 1 MB chunks to the server.", "After last chunk is sent successfully, the file signature is sent to the server."]}, "testcases": [{"name": "Empty File Upload", "description": "Verify that the system handles the case where no file is sent to the server with api call", "input": {"userFile": null}, "expected": {"outcome": "No file detected", "status": "failed"}}, {"name": "Valid File Upload", "description": "Verify that a file upload is successful", "input": {"userid": "uuid", "fileChunk": ["file data in binary format"]}, "expected": {"outcome": "Successful file upload", "status": "Success", "fileid": "uuid", "file_signatureid": "uuid"}}, {"name": "Missing File Chunk", "description": "Verify that a file upload is not completed if last chunk is not sent", "input": {"userid": "uuid", "lastChunk": []}, "expected": {"outcome": "File not uploaded yet", "status": "Uploading"}}, {"name": "Valid File Viewing", "description": "Verify that a user can view his file data after a successful upload", "input": {"fileid": "uuid", "userid": "uuid"}, "expected": {"filedata": "file data", "fileLink": "url", "status": "Success"}}]}
{"usecase": {"name": "Verify A File Signature", "scenario": "User can upload a file and it's signature and verify if the signature is authentic.", "actors": "User", "preconditions": "User is logged in the website and has the file, the signature and the public key.", "steps": ["User uploads the file, the signature, the public key.", "System authenticates the signature", "User views the result"]}, "testcases": [{"name": "Valid File Signature", "description": "Verify that an authentic file signature returns successful in test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Authentic File Signature", "status": "Success"}}, {"name": "Invalid File Signature", "description": "Verify that an inauthenticate file signature fails authentication test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Inauthentic File Signature", "status": "Failure"}}]}
{"usecase": {"name": "Organization Operations", "scenario": "User can create a new Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User creates an Organization", "User adds members to Organization", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Organization Creation", "description": "Verify that an Organization can be created with a valid name", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created organization", "orgid": "Organization id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Organization admin can add members to an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to organization", "orgid": "Organization id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Organization admin can send notice to all members in an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in organization", "orgid": "Organization id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in organization.", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "orgid": "Organization id", "status": "Unauthorized"}}]}
{"usecase": {"name": "Team Operations", "scenario": "User can create a new Team under an Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization", "steps": ["User creates an Team", "User adds members to Team", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that an Team can be created with a valid name in the Organization", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created team", "teamid": "Team id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Team admin can add members to an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to team", "teamid": "Team id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Team admin can send notice to all members in an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in team", "teamid": "Team id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "teamid": "Team id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "teamid": "Team id", "status": "Unavailable User"}}]}
{"usecase": {"name": "Thread Operations", "scenario": "User can create a new Thread under an Team, add members to it, send notices to all members and add files to the thread.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization and a Team", "steps": ["User creates an Thread", "User adds members to Thread", "User sends a notice to all members", "User adds a file to the thread"]}, "testcases": [{"name": "Valid Thread Creation", "description": "Verify that an Thread can be created with a valid name in the Team", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created thread", "threadid": "Thread id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Thread admin can add members to an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to thread", "threadid": "Thread id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Thread admin can send notice to all members in an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in thread", "threadid": "Thread id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "threadid": "Thread id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "threadid": "Thread id", "status": "Unavailable User"}}, {"name": "Valid File Addition", "description": "Verify that a member of a thread can add a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileData": ["file data in binary format"]}, "expected": {"outcome": "File successfully added in the thread", "threadid": "Thread id", "fileid": "file id", "status": "Success"}}, {"name": "Valid File Viewing", "description": "Verify that a member of a thread can view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "File data successfully returned", "threadid": "Thread id", "fileid": "file id", "fileData": "file data", "fileLink": "url", "status": "Success"}}, {"name": "Invalid File Viewing", "description": "Verify that a non-member of a thread cannot view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "User unauthorized in this thread", "threadid": "Thread id", "status": "Unauthorized"}}]}
{"usecase": {"name": "Register Retailer", "scenario": "Retailer wants to register with the platform to place orders for products from different manufacturers.", "actors": "Retailer", "preconditions": "Retailer is not registered with the platform.", "steps": ["Retailer visits the platform website", "Retailer fills the registration form", "Retailer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a retailer can successfully register with the platform.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a retailer tries to register with invalid details, like invalid email, invalid nid, or phone number", "input": {"retailerDetails": {"name": "ABC Retail", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-239, Karwan Bazar, Dhaka", "nid": "aadffa", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a retailer tries to register with a phone number that is already registered.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because the phone number is already registered", "status": "Rejected"}}]}
{"usecase": {"name": "Place Order", "scenario": "Retailer places an order for products from different manufacturers, the order requires confirmation from each manufacturer.", "actors": "Retailer, Manufacturers", "preconditions": "Retailer is registered with the platform and has selected products from different manufacturers.", "steps": ["Retailer selects products from various manufacturers to include in the order", "Retailer submits the order", "Each manufacturer confirms and processes their part of the order"]}, "testcases": [{"name": "Valid Product Selection", "description": "Verify that a retailer can successfully select and place an order for valid products from different manufacturers.", "input": {"selectedProducts": [{"manufacturer": "ABC Electronics", "productCode": "Laptop123", "quantity": 2}, {"manufacturer": "XYZ Appliances", "productCode": "Refrigerator456", "quantity": 1}, {"manufacturer": "FashionHub", "productCode": "Apparel789", "quantity": 5}]}, "expected": {"outcome": "Order placed successfully", "status": "Pending Manufacturer Confirmation"}}, {"name": "Empty Product Selection", "description": "Verify that the system handles the case where a retailer tries to submit an empty product selection in the order.", "input": {"selectedProducts": []}, "expected": {"outcome": "Order placement failed", "status": "Rejected"}}, {"name": "Manufacturer Confirmation", "description": "Verify that each manufacturer can successfully confirm and process their part of the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": true, "FashionHub": true}}, "expected": {"outcome": "Order confirmed and processed", "status": "Completed"}}, {"name": "Partial Manufacturer Confirmation", "description": "Verify that the system handles the case where some manufacturers confirm and others do not for the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": false, "FashionHub": true}}, "expected": {"outcome": "Partial order confirmation", "status": "Partially Completed"}}]}
{"usecase": {"name": "Track Order", "scenario": "Retailer wants to track the status of an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer selects the order to track", "Retailer views the status of the order"]}, "testcases": [{"name": "Valid Order Tracking", "description": "Verify that a retailer can successfully track the status of an order placed with different manufacturers.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order status retrieved successfully", "status": "Partially Completed"}}, {"name": "Invalid Order Tracking", "description": "Verify that the system handles the case where a retailer tries to track an order that does not exist.", "input": {"orderID": "67890"}, "expected": {"outcome": "Order status retrieval failed", "status": "Not Found"}}, {"name": "Order Completed", "description": "The ordered products have reached the retailer and the order is completed.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order Has reached the retailer", "status": "Completed"}}]}
{"usecase": {"name": "Make Payment", "scenario": "Retailer wants to make payment for an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer proceeds to make payment after the order is confirmed and processed by the manufacturers", "Retailer makes the payment"]}, "testcases": [{"name": "Full Payment", "description": "Verify that a retailer can successfully make payment for an order placed with different manufacturers.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment successful", "status": "Completed"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where a retailer tries to make an insufficient payment for the order without taking a loan.", "input": {"orderID": "12345", "paymentDetails": {"amount": 10000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment failed, insufficient amount", "status": "Rejected"}}, {"name": "Loan Payment", "description": "Verify that the system handles the case where a retailer takes a loan to make the payment for the order.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "Pay Later"}}, "expected": {"outcome": "Partial Payment successful", "status": "Partially Completed"}}]}
{"usecase": {"name": "Register Manufacturer", "scenario": "Manufacturer wants to register with the platform to sell their products to retailers.", "actors": "Manufacturer", "preconditions": "Manufacturer is not registered with the platform.", "steps": ["Manufacturer visits the platform website", "Manufacturer fills the registration form", "Manufacturer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a manufacturer can successfully register with the platform.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with invalid details, like invalid email, or phone number", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with an email that is already registered.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because the email is already registered", "status": "Rejected"}}]}
{"usecase": {"name": "Manage Products", "scenario": "Manufacturer wants to manage their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new product", "Manufacturer updates an existing product", "Manufacturer deletes a product"]}, "testcases": [{"name": "Add New Product", "description": "Verify that a manufacturer can successfully add a new product to the platform.", "input": {"productDetails": {"productCode": "Laptop123", "productName": "Laptop", "unitPrice": 500, "description": "Laptop with 8GB RAM and 1TB HDD", "weight": "2.5kg", "category": "Electronics", "image": "laptop.jpg", "minimumOrderQuantity": 20, "minimumDiscount": 5.0, "maximumDiscount": 10.0}}, "expected": {"outcome": "Product added successfully", "status": "Success"}}, {"name": "Update Product", "description": "Verify that a manufacturer can successfully update an existing product on the platform.", "input": {"productDetails": {"productCode": "Laptop123", "unitPrice": 600, "description": "Laptop with 16GB RAM and 1TB HDD", "weight": "2.7kg", "image": "laptop1.jpg", "minimumOrderQuantity": 40, "minimumDiscount": 7.0, "maximumDiscount": 12.0}}, "expected": {"outcome": "Product updated successfully", "status": "Success"}}, {"name": "Delete Product", "description": "Verify that a manufacturer can successfully delete a product from the platform.", "input": {"productCode": "Laptop123"}, "expected": {"outcome": "Product deleted successfully", "status": "Success"}}]}
{"usecase": {"name": "Manage Orders", "scenario": "Manufacturer wants to manage the orders placed for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has received orders for their products.", "steps": ["Manufacturer logs in to the platform", "Manufacturer views the list of orders", "Manufacturer updates the status of an order"]}, "testcases": [{"name": "View Orders", "description": "Verify that a manufacturer can successfully view the list of orders placed for their products.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Orders retrieved successfully", "status": "Success"}}, {"name": "Update Order Status", "description": "Verify that a manufacturer can successfully update the status of an order placed for their products.", "input": {"orderID": "12345", "status": "Shipped"}, "expected": {"outcome": "Order status updated successfully", "status": "Shipped"}}]}
{"usecase": {"name": "Manage Inventory", "scenario": "Manufacturer wants to manage the inventory of their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added products to their inventory.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new inventory", "Manufacturer views the list of products in their inventory", "Manufacturer adds a new batch of stock"]}, "testcases": [{"name": "Add New Inventory", "description": "Verify that a manufacturer can successfully add a new inventory.", "input": {"inventoryDetails": {"inventoryName": "Inventory1", "type": "Warehouse", "location": "A-23, Industrial Area, Tejgaon, Dhaka", "capacity": "1000 sq. ft."}}, "expected": {"outcome": "Inventory added successfully", "status": "Success"}}, {"name": "View Inventory Products", "description": "Verify that a manufacturer can successfully view the list of products in their inventory.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Inventory Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of stock", "description": "Verify that a manufacturer can successfully add a new batch of product in their inventory.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100, "marketStatus": "Available"}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}]}
{"usecase": {"name": "Manage Production House", "scenario": "Manufacturer wants to manage the production house for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added production houses.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new production house", "Manufacturer views the list of products in their production houses", "Manufacturer adds a new batch of product in a production house"]}, "testcases": [{"name": "Add New Production House", "description": "Verify that a manufacturer can successfully add a new production house.", "input": {"productionHouseDetails": {"productionHouseName": "ProductionHouse1", "type": "Juice, Beverage, and Snacks Production House", "location": "B-23, Industrial Area, Tejgaon, Dhaka", "capacity": "5000 sq. ft."}}, "expected": {"outcome": "Production House added successfully", "status": "Success"}}, {"name": "View Production House Products", "description": "Verify that a manufacturer can successfully view the list of products in their production houses.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Production House Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of product in a production house", "description": "Verify that a manufacturer can successfully add a new batch of product in a production house.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}]}
{"usecase": {"name": "Give lease an inventory", "scenario": "Manufacturer wants to give lease an empty inventory to another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer sets the lease terms and conditions"]}, "testcases": [{"name": "Lease Inventory", "description": "Verify that a manufacturer can successfully lease an empty inventory to another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to lease an inventory that is not empty.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory lease failed, because the inventory is not empty", "status": "Rejected"}}]}
{"usecase": {"name": "Take lease an inventory", "scenario": "Manufacturer wants to take lease an empty inventory from another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer agrees to the lease terms and conditions"]}, "testcases": [{"name": "Take Lease", "description": "Verify that a manufacturer can successfully take lease an empty inventory from another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to take lease an inventory using invalid details, like taking lease for more than lease duration, not paying full payment.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "8 months", "leaseAmount": 5000}}, "expected": {"outcome": "Inventory lease failed, because the manufacturer did not agree to the lease terms and conditions", "status": "Rejected"}}]}
{"usecase": {"name": "Manage Manufacturer Status", "scenario": "Admin wants to manage the status of manufacturers on the platform.", "actors": "Admin", "preconditions": "Admin and manufacturer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of manufacturers", "Admin gives top batch to a manufacturer", "Admin bans a manufacturer", "Admin gives warning to a manufacturer", "Admin unbans a manufacturer"]}, "testcases": [{"name": "View Manufacturers", "description": "Verify that an admin can successfully view the list of manufacturers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Manufacturers retrieved successfully", "status": "Success"}}, {"name": "Give Top Batch", "description": "Verify that an admin can successfully give top batch to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Top batch given successfully", "status": "Success"}}, {"name": "Ban Manufacturer", "description": "Verify that an admin can successfully ban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Manufacturer", "description": "Verify that an admin can successfully unban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer unbanned successfully", "status": "Success"}}]}
{"usecase": {"name": "Manage Retailer Status", "scenario": "Admin wants to manage the status of retailers on the platform.", "actors": "Admin", "preconditions": "Admin and retailer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of retailers", "Admin bans a retailer", "Admin gives warning to a retailer", "Admin unbans a retailer"]}, "testcases": [{"name": "View Retailers", "description": "Verify that an admin can successfully view the list of retailers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Retailers retrieved successfully", "status": "Success"}}, {"name": "Ban Retailer", "description": "Verify that an admin can successfully ban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Retailer", "description": "Verify that an admin can successfully unban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer unbanned successfully", "status": "Success"}}]}
{"usecase": {"name": "Adding a new Category", "scenario": "Admin wants to add a new category to the platform.", "actors": "Admin", "preconditions": "Admin is registered with the platform and the category is not currently registered.", "steps": ["Admin logs in to the platform", "Admin submits new category details", "Admin adds a new category"]}, "testcases": [{"name": "Add New Category", "description": "Verify that an admin can successfully add a new category to the platform.", "input": {"categoryDetails": {"categoryName": "Furniture", "image": "furniture.jpg"}}, "expected": {"outcome": "Category added successfully", "status": "Success"}}, {"name": "Duplicate Category", "description": "Verify that the system handles the case where an admin tries to add a category that is already registered.", "input": {"categoryDetails": {"categoryName": "Electronics", "image": "electronics.jpg"}}, "expected": {"outcome": "Category addition failed, because the category is already registered", "status": "Rejected"}}]}
{"usecase": {"name": "Prompt Creation and Marketplace", "scenario": "User creates a prompt and engages in the marketplace.", "actors": "Seller, Buyer, Admin", "preconditions": "User is registered and logged in.", "steps": ["Seller creates a new prompt", "Seller uploads prompt details and files", "Admin approves the prompt", "Buyer purchases the approved prompt"]}, "testcases": [{"name": "Valid Prompt Creation", "description": "Verify that a seller can successfully create a prompt.", "input": {"title": "Engaging Prompt", "description": "An exciting prompt description.", "type": "Inspiration", "price": 5.99, "prompt": "Write something engaging!", "engine": "GPT-3", "tipsToUse": "Follow the instructions carefully."}, "expected": {"outcome": "Prompt created successfully", "status": "Approved"}}, {"name": "Invalid Prompt Creation", "description": "Verify that the system handles the case where a seller tries to create an invalid prompt.", "input": {"title": "", "description": "An invalid prompt without a title.", "type": "Miscellaneous", "price": 2.99, "prompt": "Write something miscellaneous.", "engine": "DALL-E"}, "expected": {"outcome": "Prompt creation failed", "status": "Rejected"}}, {"name": "Prompt Purchase", "description": "Verify that a buyer can successfully purchase an approved prompt.", "input": {"promptId": "prompt123", "userId": "user456"}, "expected": {"outcome": "Prompt purchased successfully", "status": "Purchased"}}]}
{"usecase": {"name": "VIP Membership Purchase", "scenario": "User purchases a VIP membership.", "actors": "User, Admin", "preconditions": "User is registered and logged in.", "steps": ["User purchases a VIP membership", "Admin approves the VIP membership"]}, "testcases": [{"name": "Valid VIP Membership Purchase", "description": "Verify that a user can successfully purchase a VIP membership.", "input": {"membershipId": "vip123", "userId": "user789"}, "expected": {"outcome": "VIP membership purchased successfully", "status": "Approved"}}, {"name": "Invalid VIP Membership Purchase", "description": "Verify that the system handles the case where a user tries to purchase an invalid VIP membership.", "input": {"membershipId": "invalidVIP", "userId": "user456"}, "expected": {"outcome": "VIP membership purchase failed", "status": "Rejected"}}]}
{"usecase": {"name": "User Rating", "scenario": "User rates a prompt seller.", "actors": "Buyer, Seller", "preconditions": "User has purchased a prompt.", "steps": ["Buyer rates the prompt seller"]}, "testcases": [{"name": "Valid Rating", "description": "Verify that a buyer can successfully rate a prompt seller.", "input": {"reviewerId": "user123", "promptId": "prompt789", "rating": 4, "comment": "Great seller!"}, "expected": {"outcome": "Rating submitted successfully", "status": "Submitted"}}, {"name": "Invalid Rating", "description": "Verify that the system handles the case where a buyer tries to submit an invalid rating.", "input": {"reviewerId": "user789", "promptId": "prompt123", "rating": 6}, "expected": {"outcome": "Rating submission failed", "status": "Rejected"}}]}
{"usecase": {"name": "Search and Filter", "scenario": "User searches for prompts and applies filters.", "actors": "User", "preconditions": "User is logged in.", "steps": ["User enters search criteria", "User applies filters"]}, "testcases": [{"name": "Valid Search and Filter", "description": "Verify that a user can successfully search for prompts and apply filters.", "input": {"searchQuery": "Engaging prompts", "filters": {"type": "Inspiration", "price": 5.99, "engine": "GPT-3"}}, "expected": {"outcome": "Search and filter successful", "results": "Found prompts matching criteria"}}, {"name": "Invalid Search and Filter", "description": "Verify that the system handles the case where a user enters invalid search criteria.", "input": {"searchQuery": "", "filters": {"type": "InvalidType"}}, "expected": {"outcome": "Search and filter failed", "results": "No matching prompts"}}]}
{"usecase": {"name": "Discussion Forum Participation", "scenario": "User engages in the discussion forum.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User posts a discussion topic", "User replies to a discussion topic"]}, "testcases": [{"name": "Valid Discussion Post", "description": "Verify that a user can successfully post a discussion topic.", "input": {"userId": "user123", "topic": "Discussing prompt creation techniques", "content": "Share your experiences and tips!"}, "expected": {"outcome": "Discussion post successful", "status": "Posted"}}, {"name": "Invalid Discussion Post", "description": "Verify that the system handles the case where a user tries to post an invalid discussion topic.", "input": {"userId": "user456", "topic": "", "content": "Invalid content"}, "expected": {"outcome": "Discussion post failed", "status": "Not Posted"}}, {"name": "Discussion Reply", "description": "Verify that a user can successfully reply to a discussion topic.", "input": {"userId": "user789", "topicId": "topic123", "content": "Great insights!"}, "expected": {"outcome": "Discussion reply successful", "status": "Replied"}}]}
{"usecase": {"name": "Prompt Approval by Admin", "scenario": "Admin reviews and approves prompts submitted by sellers.", "actors": "Admin", "preconditions": "Admin is logged in.", "steps": ["Admin reviews submitted prompts", "Admin approves or rejects the prompts"]}, "testcases": [{"name": "Valid Prompt Approval", "description": "Verify that the admin can successfully approve a submitted prompt.", "input": {"adminId": "admin123", "promptId": "prompt456"}, "expected": {"outcome": "Prompt approved successfully", "status": "Approved"}}, {"name": "Valid Prompt Rejection", "description": "Verify that the admin can successfully reject a submitted prompt.", "input": {"adminId": "admin456", "promptId": "prompt789"}, "expected": {"outcome": "Prompt rejected successfully", "status": "Rejected"}}, {"name": "Invalid Prompt Approval", "description": "Verify that the system handles the case where the admin tries to approve an invalid prompt.", "input": {"adminId": "admin789", "promptId": "invalidPrompt"}, "expected": {"outcome": "Prompt approval failed", "status": "Not Approved"}}]}
{"usecase": {"name": "Asset Group Creation", "scenario": "User creates a new crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, User must have coins in the wallet to add an initial token.", "steps": ["User enters the name for the new crypto asset group", "User adds a description", "User adds an initial token (Optional)"]}, "testcases": [{"name": "Valid Asset Group Creation", "description": "Verify that a user can successfully create a new crypto asset group.", "input": {"assetGroupDetails": {"name": "MyAssetGroup", "description": "A diversified portfolio of crypto assets", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation successful", "status": "Created"}}, {"name": "Asset Group Creation with Initial Coin", "description": "Verify that a user can create an asset group with an initial coin.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin successful", "status": "Created"}}, {"name": "Empty Asset Group Details", "description": "Verify that the system handles the case where a user submits an empty asset group creation request.", "input": {"assetGroupDetails": {"name": "", "description": "", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Initial Coin not in Wallet", "description": "Verify that the system handles the case where a user submits an asset group creation request with a token that is not present in the wallet.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Incorrect Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an incorrect wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "IncorrectWallet"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Empty Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an empty wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}]}
{"usecase": {"name": "Add Tokens to Asset Group", "scenario": "User adds valid tokens to an existing crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, has an existing crypto asset group, and possesses the necessary wallet(s).", "steps": ["User selects an existing crypto asset group", "User adds valid tokens to the selected asset group"]}, "testcases": [{"name": "Valid Token Addition - Same Wallet", "description": "Verify that the user can successfully add valid tokens from the same wallet to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}, {"name": "Cardano", "symbol": "ADA", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Valid Token Addition - Different Wallets", "description": "Verify that the user can successfully add valid tokens from different wallets to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet456"}, {"name": "Litecoin", "symbol": "LTC", "walletAddress": "UserWallet789"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Empty Token List", "description": "Verify that the system handles the case where the user tries to add an empty list of tokens to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": []}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Token Not in Wallet", "description": "Verify that the system handles the case where the user tries to add tokens not present in their wallet to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "InvalidToken", "symbol": "INV", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Empty Wallet Address", "description": "Verify that the system handles the case where the user tries to add tokens with empty wallet address to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}]}
{"usecase": {"name": "View Assets in Asset Group", "scenario": "User wants to view the existing crypto assets within asset groups.", "actors": "User", "preconditions": "User is registered in the system and has at least one crypto asset group with assets.", "steps": ["User navigates to the 'Asset Groups' section of the application", "User selects a specific asset group to view", "User views the details of the selected asset group, including its name, description, and associated assets"]}, "testcases": [{"name": "View Specific Asset Group", "description": "Verify that the user can successfully view the details of a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets"}, "expected": {"outcome": "Asset group details viewed successfully", "access": "Allowed"}}, {"name": "View Assets in a Group", "description": "Verify that the user can successfully view the assets within a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets", "selectedAsset": "Bitcoin"}, "expected": {"outcome": "Asset within the group viewed successfully", "access": "Allowed"}}]}
{"usecase": {"name": "Asset Management Request", "scenario": "User requests an experienced personal to manage user's assets.", "actors": "User, System", "preconditions": "User is registered in the system.", "steps": ["User selects token type(s) to be invested in", "User enters the amount to invest", "User selects the expected profit percentage", "System dynamically populates the list of available experienced personals based on user's selections", "User selects an experienced personal from the provided list", "User submits the asset management request"]}, "testcases": [{"name": "Valid Asset Management Request", "description": "Verify that a user can successfully request an experienced personal to manage user's assets.", "input": {"tokenTypes": ["Bitcoin", "Ethereum"], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedExperiencedPersonal": "JohnDoe123"}, "expected": {"outcome": "Asset management request submitted successfully", "status": "Submitted"}}, {"name": "Empty Token Types", "description": "Verify that the system handles the case where the user tries to submit a request without specifying token types.", "input": {"tokenTypes": [], "investmentAmount": 5000, "expectedProfitPercentage": 8, "selectedExperiencedPersonal": "JohnDoe456"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Negative Investment Amount", "description": "Verify that the system handles the case where the user enters a negative investment amount.", "input": {"tokenTypes": ["Bitcoin"], "investmentAmount": -2000, "expectedProfitPercentage": 12, "selectedExperiencedPersonal": "JohnDoe789"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Invalid Expected Profit Percentage", "description": "Verify that the system handles the case where the user selects an invalid expected profit percentage.", "input": {"tokenTypes": ["Ethereum"], "investmentAmount": 8000, "expectedProfitPercentage": null, "selectedExperiencedPersonal": "JohnDoe101"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "Responds to Asset Management Request", "scenario": "Experienced personal receives an asset management request and responds to either accept or reject the request.", "actors": "Experienced Personal", "preconditions": "Experienced personal is registered in the system and has received an asset management request.", "steps": ["Experienced personal receives the asset management request notification", "Experienced personal reviews the details of the request including token types, investment amount, and expected profit percentage", "Experienced personal decides to either accept or reject the request", "Experienced personal provides additional comments (optional)", "Experienced personal submits the response"]}, "testcases": [{"name": "Experienced Personal Accepts Request", "description": "Verify that an experienced personal can successfully accept an asset management request.", "input": {"requestID": "12345", "response": "Accept", "comments": "I am excited to manage your assets!"}, "expected": {"outcome": "Asset management request accepted successfully", "status": "Accepted"}}, {"name": "Experienced Personal Rejects Request", "description": "Verify that an experienced personal can successfully reject an asset management request.", "input": {"requestID": "67890", "response": "Reject", "comments": "I am currently unable to take on new clients."}, "expected": {"outcome": "Asset management request rejected successfully", "status": "Rejected"}}, {"name": "Missing Response", "description": "Verify that the system handles the case where the experienced personal submits a response without specifying accept or reject.", "input": {"requestID": "24680", "comments": "I am currently evaluating the request."}, "expected": {"outcome": "Asset management request response unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "User Assigns or Refuses Accepted Personal to Manage Assets", "scenario": "User either assigns or refuses the experienced personal who has accepted the asset management request to actually manage the user's assets.", "actors": "User", "preconditions": "User has received an acceptance response from an experienced personal for the asset management request.", "steps": ["User receives the acceptance notification from the experienced personal", "User reviews the details of the acceptance including personal's details and comments", "User decides to either confirm the assignment or refuse it", "If confirming, user provides additional instructions or preferences (optional)", "User submits the assignment or refusal"]}, "testcases": [{"name": "Confirm Assignment", "description": "Verify that the user can successfully confirm the assignment of the accepted experienced personal to manage the assets.", "input": {"requestID": "12345", "decision": "Confirm", "acceptedPersonal": "JohnDoe123", "additionalInstructions": "Please focus on long-term growth."}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}, {"name": "Refuse Assignment", "description": "Verify that the user can successfully refuse the assignment of the accepted experienced personal.", "input": {"requestID": "12345", "decision": "Refuse", "acceptedPersonal": "JohnDoe123"}, "expected": {"outcome": "Assignment refused successfully", "status": "Refused"}}, {"name": "Invalid Request ID", "description": "Verify that the system handles the case where an invalid request ID is provided.", "input": {"requestID": "InvalidID", "decision": "Confirm", "acceptedPersonal": "JohnDoe456", "additionalInstructions": "Please focus on short-term gains."}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Missing Decision", "description": "Verify that the system handles the case where the user tries to submit without specifying the decision.", "input": {"requestID": "67890", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Empty Additional Instructions", "description": "Verify that the user can successfully submit an assignment without providing additional instructions.", "input": {"requestID": "13579", "decision": "Confirm", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}]}
{"usecase": {"name": "Registration", "scenario": "User signs up for an account on Jobify platform.", "actors": "User", "preconditions": "User visits Jobify platform for the first time.", "steps": ["User provides required information including username, email, password, full name, profile details, contact information, privacy settings, and job preferences.", "User submits the registration form."]}, "testcases": [{"name": "Valid User Registration", "description": "Verify that a user can successfully register with valid information.", "input": {"username": "john_doe", "email": "john.doe@example.com", "password": "securehashedpassword123", "fullName": "John Doe", "profile": {"location": "City, Country", "skills": ["Java", "JavaScript", "SQL"], "education": "Bachelor's in Computer Science"}, "contact": {"phone": "123-456-7890", "email": "john.doe@example.com"}, "privacySettings": {"notifications": true, "publicProfile": true}, "job_preferences": {"locations": "New York", "salary_range": "$10k", "job_type": ["Software Engineer", "Web Developer", "ML Engineer"]}}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Incomplete User Registration", "description": "Verify that the system handles the case where a user tries to register with incomplete information.", "input": {"username": "jane_smith", "email": "jane.smith@example.com"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}
{"usecase": {"name": "Login", "scenario": "Registered user logs in to the Jobify platform.", "actors": "User", "preconditions": "User is registered on the Jobify platform.", "steps": ["User enters username and password.", "User submits the login form."]}, "testcases": [{"name": "Valid User Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "john_doe", "password": "securehashedpassword123"}, "expected": {"outcome": "Login successful", "status": "Authenticated"}}, {"name": "Invalid User Login", "description": "Verify that the system handles the case where a user tries to log in with incorrect credentials.", "input": {"username": "john_doe", "password": "incorrectpassword"}, "expected": {"outcome": "Login failed", "status": "Unauthenticated"}}]}
{"usecase": {"name": "Job Search", "scenario": "User searches for jobs based on preferences and applies for suitable positions.", "actors": "User", "preconditions": "User is logged into the Jobify platform.", "steps": ["User enters search criteria including job type, location, and salary range.", "User views the list of jobs matching the search criteria.", "User selects a job to view details."]}, "testcases": [{"name": "Valid Job Search", "description": "Verify that a user can successfully search for jobs and apply for suitable positions.", "input": {"searchCriteria": {"jobType": "Software Engineer", "location": "New York", "salaryRange": "$80k - $100k"}}, "expected": {"outcome": "Job search and application successful", "status": "Completed"}}, {"name": "Empty Job Search Results", "description": "Verify that the system handles the case where the job search yields no results.", "input": {"searchCriteria": {"jobType": "Data Analyst", "location": "Los Angeles", "salaryRange": "$70k - $90k"}}, "expected": {"outcome": "Job search yielded no results", "status": "No jobs found"}}]}
{"usecase": {"name": "Apply for Jobs", "scenario": "Employee submits job applications through the platform.", "actors": "Employee", "preconditions": "Employee has selected a job to apply for.", "steps": ["Employee uploads resume and cover letter.", "Employee submits the application."]}, "testcases": [{"name": "Valid Job Application", "description": "Verify that an employee can successfully submit a job application.", "input": {"jobID": "67890", "resume": "employee_resume.pdf", "coverLetter": "cover_letter.txt"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Coverpage", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "coverLetter": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}]}
{"usecase": {"name": "Employer Job Posting", "scenario": "Employer posts job openings and manages posted jobs on the Jobify platform.", "actors": "Employer", "preconditions": "Employer is logged into the Jobify platform.", "steps": ["Employer navigates to the job posting section.", "Employer fills in job details including title, description, requirements, and application deadline.", "Employer previews the job posting.", "Employer submits the job posting."]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a job opening.", "input": {"jobDetails": {"title": "Data Scientist", "description": "Seeking a skilled data scientist for analytics team.", "requirements": "Master's degree in data science, experience with Python and machine learning.", "applicationDeadline": "2024-03-15"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}, {"name": "Incomplete Job Posting", "description": "Verify that the system handles the case where an employer tries to post a job with incomplete information.", "input": {"jobDetails": {"title": "Frontend Developer", "description": "Seeking a frontend developer for web application project."}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}]}
{"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}]}
{"usecase": {"name": "Interview Scheduling", "scenario": "Employer schedules interviews with selected candidates and manages interview details.", "actors": "Employer, Candidate", "preconditions": "Employer has posted job openings and candidates have applied.", "steps": ["Employer reviews job applications and selects candidates for interviews.", "Employer sends interview invitations to selected candidates.", "Candidate accepts the interview invitation.", "Employer schedules the interview date, time, and medium (e.g., Zoom)."]}, "testcases": [{"name": "Select Candidates for Interview", "description": "Verify that an employer can successfully select candidates for interviews.", "input": {"selectedCandidates": ["CandidateA", "CandidateB", "CandidateC"]}, "expected": {"outcome": "Candidates selected for interview", "status": "Candidates notified"}}, {"name": "Send Interview Invitations", "description": "Verify that an employer can successfully send interview invitations to selected candidates.", "input": {"interviewDetails": {"date": "2024-03-20", "time": "10:00 AM", "medium": "Zoom"}}, "expected": {"outcome": "Interview invitations sent", "status": "Candidates notified"}}]}
{"usecase": {"name": "Create a Group", "scenario": "A user creates a group with a name ,profile Photo  description", "Actors": "Any valid user", "precondition": "User is logged in", "steps": ["User clicks on create group button", "User enters the group name", "User enters the group description", "User selects the group profile photo", "User clicks on create group button"]}, "testcases": [{"name": "Valid Group Creation", "description": "Verify that a group is created successfully with valid data", "input": {"name": "Test Group", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation", "description": "Verify that a group is not created with invalid data", "input": {"name": "", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}]}
{"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Approve a Post", "scenario": "A group member posts a post and the group admin approves the post", "actors": "Group Member, Group Admin", "preconditions": "Group member is logged in and is a member of the group and there is a group admin", "postconditions": "Post is visible to all group members", "steps": ["Group member selects images to post", "Group member add relevant tags to the images", "Group member adds a description to the post", "Group member clicks on post button", "A notification is sent to admin about the post", "Group admin approves the post", "A notification is sent to the group member about the approval"]}, "testcases": [{"name": "Valid Image Post with Correct Tags", "description": "Verify that a group member can successfully post images with correct tags", "input": {"selectedImages": ["Nature.jpg", "Travel.jpg"], "tags": ["Nature", "Travel"]}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Image post with incorrect Tags", "description": "Verify that the system handles the case where a group member posts images with incorrect tags, and the admin modifies the tags before approving the post.", "input": {"selectedImages": ["Art.jpg", "Culture.jpg"], "tags": ["Artwork", "History"]}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Empty Image Post ", "description": "Verify that the system handles the case where a group member tries to submit an empty post", "input": {"selectedImages": "", "tags": ""}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a member's post  with valid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Admin Modification of Tags", "description": "Verify that the admin can modify the tags of a member's post  with invalid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a member's post ", "input": {"advisorApproval": false}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}]}
{"usecase": {"name": " Perform Similar Search Operation", "scenario": "A user performs a search operation within a group to find specific contens.", "actors": "User", "preconditions": "The user is a member of the group", "steps": ["User navigates to the group's search functionality", "User enters search criteria (keywords, member names,location etc.)", "System processes the search query and presents relevant results"]}, "testcases": [{"name": "Content Search", "description": "Verify that the user can successfully search for specific content within the group.", "input": {"searchCriteria": "location"}, "expected": {"outcome": "Relevant content is displayed", "status": "Displayed"}}, {"name": "Member Search", "description": "Verify that the user can search for specific members within the group.", "input": {"searchCriteria": "JohnDoe"}, "expected": {"outcome": "Member profile is displayed", "status": "Displayed"}}, {"name": "Empty Search", "description": "Verify that the system handles the case where the user performs an empty search within the group.", "input": {"searchCriteria": ""}, "expected": {"outcome": "No relevant results found", "status": "Failed"}}]}
{"usecase": {"name": "Modify Admin Moderator Role", "scenario": "Group admin can add other group members as an admin and may also resign from adminship ", "actors": "Group Admin, Group Member", "preconditions": "There is an existing group admin", "steps": ["Group admin selects a member to suggest for admin role", "Admin suggests the member for adminship", "Suggested member receives the admin offer through a notification", "Suggested member accepts the offer"]}, "testcases": [{"name": "Admin Role offer - Acceptance", "description": "Verify that the current admin can successfully suggest a member for adminship, and the member accepts the offer.", "input": {"selectedMember": "JohnDoe", "adminOffer": true}, "expected": {"outcome": "Admin role assigned", "status": "Accepted"}}, {"name": "Admin Role offer - Rejection", "description": "Verify that the current admin can suggest a member for adminship, and the member rejects the offer.", "input": {"selectedMember": "JaneDoe", "adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Member accepts Admin Role offer", "description": "Verify that the member can accept the admin role offer.", "input": {"adminOffer": true}, "expected": {"outcome": "Admin role  assigned", "status": "Accepted"}}, {"name": "Member rejects Admin Role offer", "description": "Verify that the member can reject the admin role offer.", "input": {"adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Admin Resignation", "description": "Verify that the current admin can resign from adminship.", "input": {"resignation": true}, "expected": {"outcome": "Admin role resigned", "status": "Resigned"}}]}
{"usecase": {"name": "Session Creation", "scenario": "A student creates a session for a specific academic term.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects the academic term for which they want to create a session.", "User enters the session title (e.g., '4-1' for level 4, term 1).", "User creates the session."]}, "testcases": [{"name": "Valid Session Creation", "description": "Verify that a student can successfully create a session for a specific academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation successful", "status": "Success"}}, {"name": "Duplicate Session Title", "description": "Verify that the system handles the case where a student tries to create a session with a title that already exists for the same academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}, {"name": "Empty Session Title", "description": "Verify that the system handles the case where a student tries to create a session without a title.", "input": {"session_title": ""}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "Session Creation with Visibility Settings", "scenario": "A student creates a session and sets its visibility.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects to create a new session.", "User enters the session title.", "User selects the visibility setting: public, private, or publish.", "User creates the session."]}, "testcases": [{"name": "Create Public Session", "description": "Verify that a student can create a session with public visibility.", "input": {"session_title": "4-1", "visibility": "public"}, "expected": {"outcome": "Session creation successful with public visibility", "status": "Success"}}, {"name": "Create Private Session", "description": "Verify that a student can create a session with private visibility.", "input": {"session_title": "4-2", "visibility": "private"}, "expected": {"outcome": "Session creation successful with private visibility", "status": "Success"}}, {"name": "Publish Session", "description": "Verify that a student can publish a session to make it visible to others.", "input": {"session_title": "4-1", "visibility": "publish"}, "expected": {"outcome": "Session successfully published", "status": "Success"}}]}
{"usecase": {"name": "Course Creation Under Session", "scenario": "A student creates a course under a session.", "actors": "Student", "preconditions": "User is registered and logged in. A session exists.", "steps": ["User navigates to the desired session.", "User selects to create a new course.", "User enters the course title.", "User creates the course."]}, "testcases": [{"name": "Create Course Under Session", "description": "Verify that a student can create a course under a session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Introduction to Software Development"}, "expected": {"outcome": "Course creation successful under session", "status": "Success"}}, {"name": "Duplicate Course Added Under Same Session", "description": "Verify that the system handles the case where a student tries to create a course with a duplicate title under the same session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Advanced Software Development"}, "expected": {"outcome": "Course creation unsuccessful due to duplicate title", "status": "Failed"}}, {"name": "Empty Course Title", "description": "Verify that the system handles the case where a student tries to create a course without a title.", "input": {"session_title": "4-1", "course_title": ""}, "expected": {"outcome": "Course creation unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "Adding Resources to a Course", "scenario": "A student adds various resources to a course.", "actors": "Student", "preconditions": "User is registered and logged in. A course exists under a session.", "steps": ["User navigates to the desired course.", "User selects to add a new resource.", "User specifies the type of resource to add: lecture video, PDF, link, or notes.", "User uploads or provides the necessary information for the selected resource type.", "User adds the resource to the course."]}, "testcases": [{"name": "Add Lecture Video", "description": "Verify that a student can add a lecture video to a course.", "input": {"resource_type": "lecture_video", "video_title": "Introduction to Software Development", "video_url": "https://example.com/lecture1"}, "expected": {"outcome": "Lecture video added successfully to the course", "status": "Success"}}, {"name": "Add PDF Resource", "description": "Verify that a student can add a PDF resource to a course.", "input": {"resource_type": "pdf", "pdf_title": "Software Development Basics", "pdf_file": "example.pdf"}, "expected": {"outcome": "PDF resource added successfully to the course", "status": "Success"}}, {"name": "Add Link", "description": "Verify that a student can add a link to a course.", "input": {"resource_type": "link", "link_title": "Software Development Tutorial", "link_url": "https://example.com/tutorial"}, "expected": {"outcome": "Link added successfully to the course", "status": "Success"}}, {"name": "Add Notes", "description": "Verify that a student can add personal class notes or pictures to a course.", "input": {"resource_type": "notes", "notes_title": "Class Notes - Week 1", "notes_file": "notes_week1.pdf"}, "expected": {"outcome": "Notes added successfully to the course", "status": "Success"}}]}
{"usecase": {"name": "Writing Educational Blogs with Tags", "scenario": "A user writes an educational blog and adds tags to it.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Blogs' section.", "User selects to create a new blog post.", "User writes the content of the blog post.", "User adds relevant tags to the blog post.", "User publishes the blog post."]}, "testcases": [{"name": "Write Blog with Tags", "description": "Verify that a user can write an educational blog with tags.", "input": {"blog_title": "Introduction to Machine Learning", "blog_content": "In this blog post, we discuss the basics of machine learning...", "tags": ["machine learning", "artificial intelligence", "data science"]}, "expected": {"outcome": "Blog post created successfully with tags", "status": "Success"}}, {"name": "Empty Blog Title", "description": "Verify that the system handles the case where a user tries to create a blog post without a title.", "input": {"blog_title": "", "blog_content": "Lorem ipsum dolor sit amet...", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Blog Content", "description": "Verify that the system handles the case where a user tries to create a blog post without content.", "input": {"blog_title": "Sample Blog", "blog_content": "", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Tags", "description": "Verify that the system handles the case where a user tries to create a blog post without adding any tags.", "input": {"blog_title": "Sample Blog", "blog_content": "Lorem ipsum dolor sit amet...", "tags": []}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "Team creation for a contest", "scenario": "A user registers for a contest by creatting a team", "actors": "Team leader", "preconditions": "Contest has not started yet and team members are not part of any other team.", "steps": ["User creates a team", "User is assigned as the team leader"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that the contest has not started yet and the user is not already part of another team.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User1"}, "expected": {"outcome": "Team registration successful", "status": "Team Created"}}, {"name": "Duplicate Team Name", "description": "Verify that the system handles the case where a team with the same name already exists for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User2"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "Contest Already Started", "description": "Verify that the system handles the case where the contest has already started.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team2", "Team Leader": "User3"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "User Already Part of Another Team", "description": "Verify that the system handles the case where the user is already part of another team for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team3", "Team Leader": "User1"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}]}
{"usecase": {"name": "Submission of a problem solution in a contest", "scenario": "A member team submits a solution for a problem in a contest", "actors": "Team member", "preconditions": "Contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "steps": ["User submits a solution for a problem", "System evaluates the solution", "System updates the scoreboard", "Team unlocks the new problems"]}, "testcases": [{"name": "Correct Flag Submission", "description": "Verify that the contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "Solution1"}, "expected": {"outcome": "Submission successful", "status": "Accepted"}}, {"name": "Incorrect Flag Submission", "description": "Verify that the system handles the case where the submitted flag is incorrect.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "IncorrectSolution"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Maximum Submissions Reached", "description": "Verify that the system handles the case where the maximum number of submissions for the problem is reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P2", "Solution": "Solution2"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Finished Contest Upsolving", "description": "Verify that the system handles the case where the contest is not ongoing.", "input": {"Contest Name": "BUETCTF", "User": "User1", "Problem ID": "P3", "Solution": "Solution3"}, "expected": {"outcome": "Verdict is given but scoreboard is not updated", "status": "Verdict Given"}}]}
{"usecase": {"name": "Asking for clarification in a contest", "scenario": "A team member asks for clarification for a problem in a contest", "actors": "Team member, Contest organizer", "preconditions": "Contest is ongoing and the team is registered for the contest.", "steps": ["User asks for clarification for a problem", "Contest organizer answers the clarification"]}, "testcases": [{"name": "Valid Clarification Request", "description": "Verify that the contest is ongoing and the team is registered for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1"}, "expected": {"outcome": "Clarification request successful", "status": "Asked"}}, {"name": "Valid Clarification Response", "description": "Verify that the contest organizer can successfully answer the clarification.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1", "Answer": "Answer1"}, "expected": {"outcome": "Clarification response successful", "status": "Answered"}}]}
{"usecase": {"name": "Enter in the contest", "scenario": "A user enters in a contest section", "actors": "Team member, regular users of the system", "preconditions": "Contest is ongoing or finished.", "steps": ["register or unregistered users try to enter into the contest section", "system verifies contest status and allows users to enter into the contest section", "users can see problems, standings, and other contest related information"]}, "testcases": [{"name": "Contest is ongoing or finished", "description": "Verify that the contest is ongoing or finished.", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users redirected to the contest section", "status": "successful"}}, {"name": "contest is upcoming", "description": "verify the contest status", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users promted with remaining time for the contest to start", "status": "failed to enter"}}]}
{"usecase": {"name": "Creation of a contest", "scenario": "Admin creates a contest", "actors": "Admin", "preconditions": "user must be an admin of the system and the contest name must be unique", "steps": ["Admin creates a contest with a unique name and type of contest", "System verifies user role and contest name and type", "After sucessful creation of a contest admin can add problems and other specification, set time and date for the contest"]}, "testcases": [{"name": "user is an admin and contest name is unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is created successfully, authorized by the admin", "status": "Contest creation successful"}}, {"name": "user is not an admin", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "user1", "User role": "user"}, "expected": {"outcome": "User is not authorized to create a contest and no contest is created", "status": "Contest creation failed"}}, {"name": "contest name is not unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is not created, contest name is not unique", "status": "Contest creation failed"}}]}
{"usecase": {"name": "User Registration", "scenario": "A new user registers on the TravelBee website.", "actors": "User", "steps": ["User provides valid registration details", "User submits the registration form"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register.", "input": {"name": "John Doe", "email": "john@example.com", "password": "StrongPassword123"}, "expected": {"outcome": "Registration successful"}}, {"name": "Existing Email", "description": "Verify that registration fails for an email already in use.", "input": {"name": "Jane Doe", "email": "john@example.com", "password": "SecurePassword456"}, "expected": {"outcome": "Registration failed", "message": "Email is already in use"}}, {"name": "Weak Password", "description": "Verify that registration fails for a weak password.", "input": {"name": "Bob Smith", "email": "bob@example.com", "password": "weak"}, "expected": {"outcome": "Registration failed", "message": "Password strength requirements not met"}}]}
{"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}]}
{"usecase": {"name": "Hotel Booking", "scenario": "User books a hotel for accommodation.", "actors": "User", "steps": ["User provides valid hotel details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a hotel.", "input": {"location": "Beach City", "dates": "2024-04-15 to 2024-04-20", "roomType": "Deluxe", "numOfRooms": 1}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Location", "description": "Verify that booking fails for an invalid hotel location.", "input": {"location": "Nonexistent City", "dates": "2024-06-01 to 2024-06-05", "roomType": "Standard", "numOfRooms": 2}, "expected": {"outcome": "Booking failed", "message": "Invalid hotel location"}}, {"name": "No Available Rooms", "description": "Verify that booking fails when no rooms are available for the selected dates.", "input": {"location": "City Z", "dates": "2024-08-10 to 2024-08-15", "roomType": "Suite", "numOfRooms": 3}, "expected": {"outcome": "Booking failed", "message": "No available rooms for the selected dates"}}]}
{"usecase": {"name": "User Search", "scenario": "User searches for flights or hotels based on specific criteria.", "actors": "User", "steps": ["User provides valid search criteria"]}, "testcases": [{"name": "Successful Flight Search", "description": "Verify that the system returns relevant flight options for a valid search.", "input": {"departure": "City M", "destination": "City N", "date": "2024-07-01"}, "expected": {"outcome": "Flight options retrieved successfully"}}, {"name": "Successful Hotel Search", "description": "Verify that the system returns relevant hotel options for a valid search.", "input": {"location": "Mountain View", "dates": "2024-09-10 to 2024-09-15", "roomType": "Standard"}, "expected": {"outcome": "Hotel options retrieved successfully"}}, {"name": "No Results", "description": "Verify that the system returns no results for an invalid or uncommon search.", "input": {"departure": "Unknown City", "destination": "Mysterious Town", "date": "2025-01-01"}, "expected": {"outcome": "No results found", "message": "No options match the provided criteria"}}]}
{"usecase": {"name": "Admin Flight Management", "scenario": "Admin adds or removes flights from the system.", "actors": "Admin", "steps": ["Admin adds a new flight", "Admin removes an existing flight"]}, "testcases": [{"name": "Add New Flight", "description": "Verify that the admin can successfully add a new flight.", "input": {"flightDetails": {"flightNumber": "TB123", "departure": "City U", "destination": "City V", "date": "2024-10-01", "availableSeats": 150}}, "expected": {"outcome": "New flight added successfully"}}, {"name": "Remove Existing Flight", "description": "Verify that the admin can successfully remove an existing flight.", "input": {"flightID": "TB456"}, "expected": {"outcome": "Existing flight removed successfully"}}, {"name": "Invalid Flight Details", "description": "Verify that adding a flight fails for invalid or incomplete details.", "input": {"flightDetails": {"departure": "City W", "date": "2024-12-01", "availableSeats": 100}}, "expected": {"outcome": "Adding flight failed", "message": "Incomplete or invalid flight details"}}]}
{"usecase": {"name": "Admin Hotel Management", "scenario": "Admin manages hotels by adding/removing hotels and adding rooms to hotels.", "actors": "Admin", "steps": ["Admin adds a new hotel", "Admin adds a new room to an existing hotel", "Admin removes an existing hotel"]}, "testcases": [{"name": "Add New Hotel", "description": "Verify that the admin can successfully add a new hotel.", "input": {"hotelDetails": {"hotelName": "Luxury Resort", "location": "Beachfront Paradise", "availableRooms": 50}}, "expected": {"outcome": "New hotel added successfully"}}, {"name": "Add Room to Hotel", "description": "Verify that the admin can successfully add a room to an existing hotel.", "input": {"hotelID": "H789", "roomDetails": {"roomNumber": "101", "roomType": "Suite", "price": 200}}, "expected": {"outcome": "Room added to hotel successfully"}}, {"name": "Remove Existing Hotel", "description": "Verify that the admin can successfully remove an existing hotel.", "input": {"hotelID": "H456"}, "expected": {"outcome": "Existing hotel removed successfully"}}, {"name": "Invalid Hotel Details", "description": "Verify that adding a hotel fails for invalid or incomplete details.", "input": {"hotelDetails": {"location": "Mountain View", "availableRooms": 100}}, "expected": {"outcome": "Adding hotel failed", "message": "Incomplete or invalid hotel details"}}, {"name": "Invalid Room Details", "description": "Verify that adding a room fails for invalid or incomplete details.", "input": {"hotelID": "H123", "roomDetails": {"roomType": "InvalidType", "price": -50}}, "expected": {"outcome": "Adding room failed", "message": "Incomplete or invalid room details"}}]}
{"usecase": {"name": "Problem Publication", "scenario": "Setter publishes a problem and Admin approves or rejects", "actors": "Setter, Admin", "preconditions": "Setter is an admin approved setter in our system", "steps": ["Setter designs a problem and saves it", "Setter submits the problem for approval", "Admin approves or rejects the problem"]}, "testcases": [{"name": "Valid Problem Submission", "description": "Verify that a setter can successfully design and submit a problem for approval.", "input": {"problemId": 1}, "expected": {"outcome": "Problem submitted for approval", "status": "Approved"}}, {"name": "Empty Canvas Submission", "description": "Verify that the system handles the case where a setter tries to submit a problem without any canvas.", "input": {"problemId": 1}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a problem.", "input": {"adminApproval": true}, "expected": {"outcome": "Problem approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject a problem.", "input": {"adminApproval": false}, "expected": {"outcome": "Problem rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Problem Setter Registration", "scenario": "A user intends to become a problem setter and registers for the role. Admin reviews and approves/rejects the registration.", "actors": "User, Admin", "preconditions": "", "steps": ["User expresses the intention to become a problem setter", "User submits the registration request", "Admin reviews the registration request and makes a decision (approve/reject)"]}, "testcases": [{"name": "Valid Registration Request", "description": "Verify that a user can successfully submit a valid registration request to become a problem setter.", "input": {"name": "Mahir Labib Dihan", "email": "mahirlabibdihan@gmail.com"}, "expected": {"outcome": "Registration request submitted for approval", "status": "Pending Approval"}}, {"name": "Empty Registration Details", "description": "Verify that the system handles the case where a user tries to submit an empty registration request.", "input": {}, "expected": {"outcome": "Registration request failed", "status": "Rejected"}}, {"name": "Administrator Approval", "description": "Verify that the administrator can successfully approve a submitted problem setter registration request.", "input": {"adminApproval": true}, "expected": {"outcome": "Registration approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the administrator can reject a submitted problem setter registration request.", "input": {"adminApproval": false}, "expected": {"outcome": "Registration rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Problem Solution Submission", "scenario": "A registered user intends to solve a problem available on the platform. The user successfully solves the problem, and the system records the solution.", "actors": "User", "preconditions": "User is registered and logged into the system", "steps": ["User navigates to the list of available problems", "User selects a specific problem to solve", "User provides a solution to the problem", "User submits the solution", "System checks the solution, gives verdict and updates the user's solving history"]}, "testcases": [{"name": "Valid Problem Solution", "description": "Verify that a user can successfully solve a problem and submit a valid solution.", "input": {"problemId": 1, "solutionJson": "solution.json", "checkerJson": "answer.json", "checkerCode": "code.js"}, "expected": {"outcome": "Solution submitted successfully", "status": "Recorded"}}, {"name": "Solution acceptd", "description": "database will be updated as the solution is matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "accepted"}, "expected": {"outcome": "Solution submission acccpted", "status": "Recorded"}}, {"name": "wrong answer", "description": "database will be updated as the solution isn't matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "wrong answer"}, "expected": {"outcome": "Solution submission rejected", "status": "Recorded"}}]}
{"usecase": {"name": "Add Problem To Contest", "scenario": "A contest owner or collaborators can add own designed problems to the contest", "actors": "contest setter", "preconditions": "contest setter should be a registered setter in our system. contest id should be a valid contest id and the problem also should be a valid one", "steps": ["Setter navigates to the list of his/her owned or contributed conetests", "Setter selects a specific contest to add problem in", "Setter choose a problem of his/her own and add to the contest"]}, "testcases": [{"name": "Valid problem addition", "description": "a problem is being added into contest ", "input": {"contestId": 1, "problemId": 1}, "expected": {"outcome": "problem added to contest", "status": "approved"}}]}
{"usecase": {"name": "Contest Submission for Approval", "scenario": "A contest organizer wants to submit a complete contest for approval. The organizer arranges the contest, including multiple problems, and submits it for approval. An administrator reviews and approves/rejects the submitted contest.", "actors": "Contest Setter, Admin", "preconditions": "Contest Setter is registered as a setter in our system.", "steps": ["Contest Organizer creates a new contest with multiple problems", "Contest Organizer submits the complete contest for approval", "Administrator reviews and approves/rejects the submitted contest"]}, "testcases": [{"name": "Valid Contest Submission", "description": "Verify that a contest organizer can successfully create and submit a valid contest with multiple problems for approval.", "input": {"contestId": 2}, "expected": {"outcome": "Contest submitted for approval", "status": "Pending Approval"}}, {"name": "Administrator Approval", "description": "Verify that the contest can be published.", "input": {"adminApproval": true}, "expected": {"outcome": "Contest approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the contest is rejected.", "input": {"adminApproval": false}, "expected": {"outcome": "Contest rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Bus Tracking", "scenario": "Admin can track a live bus.", "actors": "Admin, Driver", "preconditions": "Driver must initiate an allocated trip ", "steps": ["Admin navigates to Tracking module", "Admin selects a live trip from the list", "System shows the trace of the trip using map api"]}, "testcases": [{"name": "Live Trip Tracking", "description": "Verify that Admin can select a valid live trip id to view the bus's path on the map.", "input": {"id": "1931"}, "expected": {"outcome": "Bus path visible on map", "status": "Success"}}, {"name": "Bus Tracking Finished", "description": "Verify that Admin cannot select a finished trip, which is not displayed.", "input": {"id": "1931"}, "expected": {"outcome": "Path not displayed on map", "status": "Finished"}}]}
{"usecase": {"name": "Add a trip allocation", "scenario": "Admin defines a new trip allocation", "actors": "Admin", "preconditions": "Dependencies between Routes, Buses and Bus Staffs are not violated.", "steps": ["Admin navigates to Upcoming Trips module", "Admin enters details for a new trip e.g. route, driver, bus, date and shift", "Admin submits single trip allocation", "Admin submits bulk trip allocation", "System adds the allocation to the database"]}, "testcases": [{"name": "Single Trip Allocation", "description": "Verify that Admin can add a single allocation to the database.", "input": {"route": "Badda", "driver": "altaf68", "helper": "hossain43", "bus": "Ba-12-5555", "shift": "morning", "time": "2023-10-15T08:00:00Z", "admin": "mashroor"}, "expected": {"outcome": "Trip added to database", "status": "Added"}}, {"name": "Bulk Trip Allocation", "description": "Verify that Admin can make bulk allocation of all trips due for the next day.", "input": {"date": "2023-10-16", "admin": "mashroor"}, "expected": {"outcome": "Bulk Allocation saved successfully", "status": "Success"}}, {"name": "Empty Trip Data Selection", "description": "Verify that the system handles the case where an Admin fails to submit an allocation with empty fields.", "input": {"route": "", "driver": "", "helper": "", "bus": "Ba-12-5555", "shift": "", "time": "", "admin": "mashroor"}, "expected": {"outcome": "Error saving bulk allocation", "status": "Failure"}}]}
{"usecase": {"name": "View lists of user, bus, route, staff etc", "scenario": "Authorized Admin can view list of all buses, routes, users and staff", "actors": "Admin", "preconditions": "Route, Bus and Bus Staff etc data are available.", "steps": ["Admin navigates to the respective section (user, bus, route, bus_staff) in Database module", "Admin views a list of entities in the selected list", "Admin clicks on an entity to view its full details"]}, "testcases": [{"name": "View Users List", "description": "Verify that Admin can view the list of all users.", "input": {}, "expected": {"outcome": "User list displayed", "status": "Success"}}, {"name": "View Buses List", "description": "Verify that Admin can view the list of all buses.", "input": {}, "expected": {"outcome": "Bus list displayed", "status": "Success"}}, {"name": "View Routes List", "description": "Verify that Admin can view the list of all Routes.", "input": {}, "expected": {"outcome": "Route list displayed", "status": "Success"}}, {"name": "View Staff List", "description": "Verify that Admin can view the list of all staff.", "input": {}, "expected": {"outcome": "Staff list displayed", "status": "Success"}}]}
{"usecase": {"name": "Add data to user, bus, route, staff etc database", "scenario": "Authorized Admin can add new buses, routes, users and staff", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the clicks on respective buttons to add users, buses, routes, or staff", "Admin fills in the required fields for the new entity", "Admin submits the request to add the new entity", "System validates the data and adds the entity to the database"]}, "testcases": [{"name": "New User Addition", "description": "Verify that Admin can add a new user to the database.", "input": {"id": "201905069", "name": "John Doe", "email": "johndoe@example.com", "phone": "01912345678", "role": "student"}, "expected": {"outcome": "New user added", "status": "Success"}}, {"name": "New User Addition Missing Field", "description": "Admin attempts to add a new user with a missing mandatory field.", "input": {"id": "", "name": "John Doe", "email": "johndoe@example.com", "phone": "", "role": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}, {"name": "New Bus Addition", "description": "Verify that Admin can add a new Bus to the database.", "input": {"id": "Ba-12-1234", "type": "minibus", "capacity": "60"}, "expected": {"outcome": "New bus added", "status": "Success"}}, {"name": "New Bus Addition Missing Field", "description": "Admin attempts to add a new bus with a missing mandatory field.", "input": {"id": "", "capacity": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}]}
{"usecase": {"name": "Feedbacks from clients and respond", "scenario": "Authorized Admin can view and respond to client feedbacks", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the Feedback module.", "Admin views all feedbacks from clients", "Admin selects a feedback to read", "Admin responds to the feedback", "System updates the feedback status and optionally notifies the client"]}, "testcases": [{"name": "Feedback List", "description": "Verify that Admin can view all client's feedback.", "input": {}, "expected": {"outcome": "Feedback List Shown", "status": "Success"}}, {"name": "Feedback Details", "description": "Verify that Admin can view a specific client's feedback.", "input": {"feedbackId": "183"}, "expected": {"outcome": "Feedback Details Shown", "status": "Success"}}, {"name": "Feedback Response", "description": "Verify that Admin can respond to client's feedback.", "input": {"feedbackId": "183", "response": "the concerned issue is being looked into soon."}, "expected": {"outcome": "Feedback Responded", "status": "Success"}}]}
{"usecase": {"name": "Requisition from teachers and respond", "scenario": "Authorized Admin can view and respond to teacher requisition requests.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin logs into the system", "Admin navigates to the requisition requests section", "Admin views all requisition requests from teachers", "Admin selects a request to view details", "Admin approves or rejects the request", "System updates the request status"]}, "testcases": [{"name": "Requisition List", "description": "Verify that Admin can view all Teacher requisitions.", "input": {}, "expected": {"outcome": "Requisition List Shown", "status": "Success"}}, {"name": "Requisition Approval", "description": "Admin views and approves a teacher's requisition request.", "input": {"requestId": "123", "busId": "Ba-14-5739", "date": "24-02-2024"}, "expected": {"outcome": "Request approved", "status": "Approved"}}, {"name": "Requisition Rejection", "description": "Admin views and rejects a teacher's requisition request.", "input": {"requestId": "456"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}
{"usecase": {"name": "Stock Management", "scenario": "Inventory managers/lab assistants stocks equipments according to need.", "actors": "Inventory Manager, Lab Assistant", "preconditions": "Inventory manager is assigned to an inventory and lab assistant is assigned to a lab", "steps": ["Inventory manager/lab assistant checks own location for equipments that are below the threshold", "Inventory manager/lab assistant restocks the equipments which are running low and high in demand", "Inventory manager/lab assistant discards damaged equipments", "Inventory manager/lab assistant updates the stock in the system"]}, "testcases": [{"name": "Valid Location Selection", "description": "Verify that inventory manager/lab assistant has access to that location", "input": {"selectedLocation": "validLocation"}, "expected": {"outcome": "validLocation is selected", "status": "Success"}}, {"name": "Invalid Location Selection", "description": "Verify that the system handles the case where an inventory manager/lab assistant tries to access other inventory/lab", "input": {"selectedLocation": "invalidLocation"}, "expected": {"outcome": "access denied", "status": "Rejected"}}, {"name": "Valid quantity entry", "description": "Verify that the system accepts valid quantity", "input": {"equipment": "Breadboard", "quantity": "10"}, "expected": {"outcome": "Stock updated", "status": "Success"}}, {"name": "Invalid quantity entry", "description": "Verify that the system rejects invalid quantity", "input": {"equipment": "Breadboard", "quantity": -5}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}, {"name": "Empty quantity entry", "description": "Verify that the system rejects empty quantity", "input": {"equipment": "Breadboard", "quantity": ""}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}]}
{"usecase": {"name": "Request Processing", "scenario": "Student/Lab Assistant requests for equipments and the request is forwarded to required authority and finally the request is accepted/rejected", "actors": "Student, Lab Assistant, Inventory Manager, Lab Supervisor, Department Head", "preconditions": "Student is enrolled in the university, Lab Assistant is assigned to a lab, Inventory Manager is assigned to an inventory, Lab Supervisor is assigned to a lab, Department Head is assigned to a department", "steps": ["Student/Lab Assistant requests for equipments", "Lab Assistant forwards students' request to lab supervisor if required, otherwise accept/reject/modify it", "Lab Supervisor forwards the request to Department Head if required, otherwise accept/reject/modify it", "Inventory Manager/Department Head accepts/rejects the request"]}, "testcases": [{"name": "Valid Request", "description": "Verify that the system accepts valid request", "input": {"selectedEquipments": ["Breadboard", "Atmega32"], "quantity": ["10", "5"], "selectedLocation": "validLocation"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Invalid Request", "description": "Verify that the system rejects invalid request", "input": {"selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["-10", ""], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Request", "description": "Verify that the system rejects empty request", "input": {"selectedEquipments": "", "quantity": "", "selectedLocation": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Accept Request", "description": "Verify that the lab assistant/lab supervisor/department head can accept a student's request and an inventory manager can accept a lab assistant's request", "input": {"requestState": "Accepted"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Reject Request", "description": "Verify that the lab assistant/lab supervisor/department head can reject a student's request and an inventory manager can reject a lab assistant's request", "input": {"requestState": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Request", "description": "Verify that the lab assistant/lab supervisor can forward a student's request", "input": {"requestState": "Forwarded", "forwardTo": "Lab Supervisor"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Modify Request", "description": "Verify that the lab assistant/lab supervisor/department head can modify a student's request and an inventory manager can modify a lab assistant's request", "input": {"requestState": "Modified", "selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["10", "5"], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Request modified", "status": "Success"}}]}
{"usecase": {"name": "Due Management", "scenario": "Lab Assistant/Super Admin monitors dues and takes necessary actions to recover them", "actors": "Lab Assistant, Student, Super Admin", "preconditions": "Lab Assistant is assigned to a lab, Student is enrolled in the university", "steps": ["Lab Assistant monitors dues", "Lab Assistant sends reminders to students with dues", "Lab Assistant updates the system with the status of dues", "Super Admin monitors the dues", "Students return their dues or report lost/damaged", "Lab Assistant updates the system with the status of dues", "Lab Assistant clears the dues after receiving the equipments"]}, "testcases": [{"name": "Valid Due Creation", "description": "Verify that the system creates a valid due for a student and lab assistant can monitor it", "input": {"studentId": "validStudentId", "equipment": "Breadboard", "quantity": "5", "dueDate": "2024-02-28", "location": "validLocation"}, "expected": {"outcome": "Due created", "status": "Success"}}, {"name": "Invalid Due Creation", "description": "Verify that the system rejects invalid due creation", "input": {"studentId": "invalidStudentId", "equipment": "Invalid Equipment", "quantity": "-5", "dueDate": "2024-02-28", "location": "invalidLocation"}, "expected": {"outcome": "Invalid due", "status": "Rejected"}}, {"name": "Empty Due Creation", "description": "Verify that the system rejects empty due creation", "input": {"studentId": "", "equipment": "", "quantity": "", "dueDate": "", "location": ""}, "expected": {"outcome": "Empty due", "status": "Rejected"}}, {"name": "Send Reminder", "description": "Verify that the lab assistant can send reminders to students with dues", "input": {"reminder": "Reminder sent"}, "expected": {"outcome": "Reminder sent", "status": "Success"}}, {"name": "Update Due Status", "description": "Verify that the lab assistant can update the system with the status of dues", "input": {"status": "Returned"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Monitor Due", "description": "Verify that the lab assistant/super admin can monitor the dues", "input": {"monitor": "Dues monitored"}, "expected": {"outcome": "Dues monitored", "status": "Success"}}, {"name": "Return Due", "description": "Verify that the student can return the due", "input": {"status": "Returned"}, "expected": {"outcome": "Due returned", "status": "Success"}}, {"name": "Report Lost/Damaged", "description": "Verify that the student can report lost/damaged due", "input": {"status": "Lost/Damaged"}, "expected": {"outcome": "Due reported", "status": "Success"}}, {"name": "Create Monetary Due", "description": "Verify that the system creates a monetary due for a student", "input": {"studentId": "validStudentId", "amount": "500", "dueDate": "2024-02-28"}, "expected": {"outcome": "Monetary due created", "status": "Success"}}, {"name": "Update Monetary Due Status", "description": "Verify that the lab assistant can update the system with the status of monetary dues", "input": {"status": "Paid"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Clear Due", "description": "Verify that the lab assistant can clear the due after receiving the equipments", "input": {"status": "Cleared"}, "expected": {"outcome": "Due cleared", "status": "Success"}}]}
{"usecase": {"name": "Clearance Management", "scenario": "Student requests for clearance, superadmin verifies the request and forwards it to the department head, department head gives clearance.", "actors": "Student, Super Admin, Department Head", "preconditions": "Student is enrolled in the university, Super Admin is assigned to the university, Department Head is assigned to a department", "steps": ["Student requests for clearance", "Super Admin verifies the request and forwards it to the department head", "Department Head gives clearance"]}, "testcases": [{"name": "Valid Clearance Request", "description": "Verify that the system accepts valid clearance request", "input": {"studentId": "validStudentId", "level": "Final level", "term": "Final Term"}, "expected": {"outcome": "Request accepted", "status": "Pending"}}, {"name": "Invalid Clearance Request", "description": "Verify that the system rejects invalid clearance request", "input": {"studentId": "invalidStudentId", "level": "Invalid level", "term": "Invalid Term"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Clearance Request", "description": "Verify that the system rejects empty clearance request", "input": {"studentId": "", "level": "", "term": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Verify Clearance Request", "description": "Verify that the super admin can verify the clearance request", "input": {"studentId": "validStudentId", "dues": ""}, "expected": {"outcome": "Request verified", "status": "Success"}}, {"name": "Reject Clearance Request", "description": "Verify that the super admin can reject the clearance request", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Clearance Request", "description": "Verify that the super admin can forward the clearance request to the department head", "input": {"forward": "Forwarded"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Give Clearance", "description": "Verify that the department head can give clearance", "input": {"clearance": "Cleared"}, "expected": {"outcome": "Cleared", "status": "Success"}}, {"name": "Reject Clearance", "description": "Verify that the department head can reject the clearance", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Rejected", "status": "Rejected"}}]}
{"usecase": {"name": "User Management", "scenario": "Super Admin assigns labs to lab assistants and lab supervisors, assigns inventory to inventory managers", "actors": "Super Admin", "preconditions": "Super Admin is assigned to the university", "steps": ["Super Admin assigns labs to lab assistants and lab supervisors", "Super Admin assigns inventory to inventory managers"]}, "testcases": [{"name": "Assign Lab", "description": "Verify that the super admin can assign labs to lab assistants and lab supervisors", "input": {"lab": "Lab1", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Lab assigned", "status": "Success"}}, {"name": "Assign Invalid Lab", "description": "Verify that the super admin cannot assign invalid labs to lab assistants and lab supervisors", "input": {"lab": "Invalid Lab", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Invalid lab", "status": "Rejected"}}, {"name": "Assign Inventory", "description": "Verify that the super admin can assign inventory to inventory managers", "input": {"inventory": "Inventory1", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Inventory assigned", "status": "Success"}}, {"name": "Assign Invalid Inventory", "description": "Verify that the super admin cannot assign invalid inventory to inventory managers", "input": {"inventory": "Invalid Inventory", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Invalid inventory", "status": "Rejected"}}]}
{"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}]}
{"usecase": {"name": "Course Enrollment and Management", "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.", "actors": "User", "preconditions": "The user is registered and logged in to the website.", "steps": ["User navigates to the list of available courses.", "User browses and selects a course to enroll in.", "User enrolls in the selected course.", "User accesses the course page and views the lessons and quizzes.", "User attends the quizzes within the course.", "User completes the course and gives a rating to the course.", "User views their user profile to track course progress and ratings."]}, "testcases": [{"name": "View Available Courses", "description": "Verify that a user can view all available courses.", "input": {}, "expected": {"outcome": "Courses are displayed", "status": "Successful"}}, {"name": "Enroll in a Course", "description": "Verify that a user can enroll in a course.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "User successfully enrolled", "status": "Enrolled"}}, {"name": "View Lessons in a Course", "description": "Verify that a user can view lessons within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Lessons are accessible", "status": "Successful"}}, {"name": "Attend Quizzes in a Course", "description": "Verify that a user can attend quizzes within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Quizzes are accessible", "status": "Successful"}}, {"name": "Rate a Course", "description": "Verify that a user can rate a course after completing it.", "input": {"selectedCourse": "Algebra", "rating": 4}, "expected": {"outcome": "Course rated successfully", "status": "Rated"}}, {"name": "View User Profile", "description": "Verify that a user can view their profile to track progress and ratings.", "input": {}, "expected": {"outcome": "User profile is accessible", "status": "Successful"}}]}
{"usecase": {"name": "Author Course Management", "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.", "actors": "Author", "preconditions": "The author is registered and logged in to the platform as an author.", "steps": ["Author navigates to the analytics dashboard to view statistics of their existing courses.", "Author decides to create a new course.", "Author enters course details, including title, description, and objectives.", "Author adds lessons and content to the course.", "Author reviews and edits lessons within the course.", "Author submits the completed course to an admin or moderator for review."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an author can view analytics of their existing courses.", "input": {}, "expected": {"outcome": "Analytics displayed", "status": "Successful"}}, {"name": "Create a New Course", "description": "Verify that an author can create a new course.", "input": {"courseDetails": {"title": "Permutation and Combination", "description": "A comprehensive guide to permutations and combinations", "objectives": ["Understand permutations and combinations", "Solve related problems"]}}, "expected": {"outcome": "Course created successfully", "status": "Created"}}, {"name": "Edit Lessons in a Course", "description": "Verify that an author can edit lessons within a course.", "input": {"selectedCourse": "Permutation and Combination", "lessonEdits": {"Lesson 1": "Updated content on permutations", "Lesson 2": "Added examples on combinations"}}, "expected": {"outcome": "Lessons edited successfully", "status": "Edited"}}, {"name": "Submit Course for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course submitted for review", "status": "Submitted"}}]}
{"usecase": {"name": "Admin Course Management", "scenario": "An admin can view analytics of a course, send feedback on a submitted course, approve the submitted course, and view analytics about authors.", "actors": "Admin", "preconditions": "The admin is registered and logged in to the platform as an admin.", "steps": ["Admin navigates to the analytics dashboard to view statistics of a specific course.", "Admin reviews the submitted course and sends feedback to the author.", "Admin evaluates the submitted course and decides to approve or reject it.", "Admin views analytics about authors to track their performance."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an admin can view analytics of a specific course.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course analytics displayed", "status": "Successful"}}, {"name": "Send Feedback on Submitted Course", "description": "Verify that an admin can send feedback on a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "feedback": "Please provide more examples on combinations."}, "expected": {"outcome": "Feedback sent successfully", "status": "Sent"}}, {"name": "Approve Submitted Course", "description": "Verify that an admin can approve a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "approvalStatus": "Approved"}, "expected": {"outcome": "Course approved successfully", "status": "Approved"}}, {"name": "View Author Analytics", "description": "Verify that an admin can view analytics about authors.", "input": {}, "expected": {"outcome": "Author analytics displayed", "status": "Successful"}}]}
{"usecase": {"name": "Lesson Content with Interactive Elements", "scenario": "Lessons in the website can contain interactive graphs, callouts, questions, and links. The website should properly display them.", "actors": "User", "preconditions": "The user is logged in and accessing a lesson.", "steps": ["User navigates to a lesson containing interactive elements.", "User views the interactive graphs, callouts, questions, and links within the lesson.", "User interacts with the elements as required."]}, "testcases": [{"name": "Display Interactive Graphs", "description": "Verify that the website properly displays interactive graphs within a lesson.", "input": {}, "expected": {"outcome": "Interactive graphs displayed correctly", "status": "Successful"}}, {"name": "Show Callouts", "description": "Verify that the website properly shows callouts within a lesson.", "input": {}, "expected": {"outcome": "Callouts displayed properly", "status": "Successful"}}, {"name": "Present Questions", "description": "Verify that the website properly presents questions within a lesson.", "input": {}, "expected": {"outcome": "Questions displayed correctly", "status": "Successful"}}, {"name": "Handle Links", "description": "Verify that the website properly handles links within a lesson.", "input": {}, "expected": {"outcome": "Links are functional and clickable", "status": "Successful"}}, {"name": "Display Quizzes", "description": "Verify that quizzes within a lesson are properly displayed.", "input": {}, "expected": {"outcome": "Quizzes displayed correctly", "status": "Successful"}}, {"name": "Check Quiz Answers", "description": "Verify that the website checks quiz answers accurately.", "input": {"quizAnswers": {"Question 1": "Option A", "Question 2": "Option C", "Question 3": "Option D"}}, "expected": {"outcome": "Quiz answers checked properly", "status": "Successful"}}]}
{"usecase": {"name": "Add Product", "scenario": "Manager adds a product in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the product", "Manager submits the product"]}, "testcases": [{"name": "Valid add product", "description": "Verify that a manager can successfully add a product", "input": {"category": "Sweet", "name": "Lalmohon", "price": "350", "quantity": "50", "image": "img1.jpg"}, "expected": {"outcome": "Add product Successful", "status": "Approved"}}, {"name": "Empty field add product", "description": "Verify that the system handles the case where manager tries to add a product with an empty field", "input": {"category": "curd", "name": "shahi curd", "price": "", "quantity": "30", "image": "img2.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add a product with invalid data", "input": {"category": "curd", "name": "shahi curd", "price": "-10", "quantity": "40", "image": "img3.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}]}
{"usecase": {"name": "Generate a sale", "scenario": "Showroom manager enters the details of a customer and the products and quantity s/he buys.", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid Sale generate", "description": "Verify that a showroom manager can successfully sale some products", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 6}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry successful", "status": "Approved"}}, {"name": "Empty field Sale generate", "description": "Verify that the system handles the case where showroom manager tries to generate a sale with an empty field", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}, {"name": "Inalid Sale generate", "description": "Verify that the system handles the case where showroom manager tries to genarate a sale with an invalid data", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}]}
{"usecase": {"name": "Generate an order to factory", "scenario": "Showroom manager enters the products and quantity s/he wants to order to factory", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid order generate", "description": "Verify that a showroom manager can successfully order some products to factory", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Order successful", "status": "Approved"}}, {"name": "Inalid Order generate", "description": "Verify that the system handles the case where showroom manager tries to order a product with an invalid data", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 5}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": -2}]}, "expected": {"outcome": "Order failed", "status": "Rejected"}}]}
{"usecase": {"name": "Generate a transfer to showroom", "scenario": "Factory manager enters the products and quantity s/he wants to transfer to showroom", "actors": "Factory manager", "preconditions": "Factory manager is approved", "steps": ["Factory manager adds the product to the cart", "Factory manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid transfer generate", "description": "Verify that a Factory manager can successfully transfer some products from factory to showroom", "input": {"showroom_id": "17", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer successful", "status": "Approved"}}, {"name": "Empty field transfer generate", "description": "Verify that the system handles the case where factory manager tries to generate a transfer with an empty field", "input": {"showroom_id": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}, {"name": "Inalid transfer generate", "description": "Verify that the system handles the case where factory manager tries to genarate a transfer with an invalid data", "input": {"showroom_id": "-4", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}]}
{"usecase": {"name": "Add Employee", "scenario": "Manager adds an employee in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the employee", "Manager submits the information"]}, "testcases": [{"name": "Valid add employee", "description": "Verify that a manager can successfully add an employee", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "15000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee Successful", "status": "Approved"}}, {"name": "Empty field add employee", "description": "Verify that the system handles the case where manager tries to add an employee with an empty field", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add an employee with invalid data", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "-30000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}]}
{"usecase": {"name": "Purchase Crop", "scenario": "A buyer wants to buy a specific kind of crop from a seller in the agriculture platform. The system facilitates the transaction between the buyer and the seller.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer and seller are registered users on the platform.", "The seller has listed the crop for sale."], "steps": [{"stepId": 1, "description": "Buyer selects the desired crop.", "input": "Buyer navigates to the marketplace and chooses a specific kind of crop they want to purchase."}, {"stepId": 2, "description": "View crop details.", "input": "System displays detailed information about the selected crop."}]}, "testcases": {"name": "Successful Crop Purchase", "description": "Verify that a buyer can successfully purchase a specific kind of crop from a seller.", "input": {"selectedCrop": "Organic Tomatoes", "seller": "mobarok", "buyer": "rahim", "transactionAmount": 50.0}, "expected": {"outcome": "Transaction successful", "status": "Completed"}}}
{"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}]}
{"usecase": {"name": "Search and Sort Products", "scenario": "A user wants to search for crops and have the ability to sort the search results by name, rate, and popularity.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The website has a variety of crops listed in the marketplace."], "steps": [{"stepId": 1, "description": "Enter search criteria.", "input": "User enters the desired search criteria (e.g., crop name or category) into the search bar."}, {"stepId": 2, "description": "Initiate search.", "input": "User clicks on the 'Search' button to initiate the search."}, {"stepId": 3, "description": "Sort search results.", "input": "User selects sorting options such as 'Sort by Name,' 'Sort by Rate,' or 'Sort by Popularity.'"}]}, "testcases": [{"name": "Search for a Specific Crop", "description": "Verify that the user can search for a specific crop by entering its name.", "input": {"searchCriteria": "Tomatoes"}, "expected": {"outcome": "Search results display the specified crop."}}, {"name": "Search for Crops by Category", "description": "Verify that the user can search for crops by selecting a specific category.", "input": {"searchCriteria": "Fruits"}, "expected": {"outcome": "Search results display crops within the selected category."}}, {"name": "Sort Search Results by Popularity", "description": "Verify that the user can sort the search results by crop popularity.", "input": {"sortingOption": "Popularity"}, "expected": {"outcome": "Search results are displayed in order of decreasing crop popularity."}}]}
{"usecase": {"name": "Buyer-Seller Chat", "scenario": "A buyer wants to communicate with a seller using the chat option on the platform.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer is logged in to the website.", "The buyer has initiated communication with a specific seller."], "steps": [{"stepId": 1, "description": "Open Chat Interface.", "input": "Buyer clicks on the 'Chat' option within the seller's profile or product page."}, {"stepId": 2, "description": "Send Message.", "input": "Buyer enters a message and clicks 'Send' to communicate with the seller."}, {"stepId": 3, "description": "Receive Reply.", "input": "Seller receives the message and replies to the buyer's inquiry."}]}, "testcases": [{"name": "Send Message to Seller", "description": "Verify that the buyer can send a message to the seller.", "input": {"message": "Hi, I'm interested in purchasing your product. Can you provide more details?"}, "expected": {"outcome": "Message is sent successfully to the seller."}}, {"name": "Chat Notifications", "description": "Verify that both the buyer and seller receive notifications for new chat messages.", "input": {"newMessage": "Hello, I have a question about your product."}, "expected": {"outcome": "Both buyer and seller receive notifications for new chat messages."}}]}
{"usecase": {"name": "Admin Monitoring and Profile Management", "scenario": "The admin wants to observe total transactions on the platform and has the authority to shut down any user profile or allow a new seller.", "actors": ["Admin"], "preconditions": ["The admin is logged in to the admin dashboard.", "There are existing user profiles and ongoing transactions on the platform."], "steps": [{"stepId": 1, "description": "Observe Total Transactions.", "input": "Admin views the total number and details of transactions on the platform."}, {"stepId": 2, "description": "Review User Profiles.", "input": "Admin has the option to review user profiles, including sellers and buyers."}, {"stepId": 3, "description": "Take Action on Profile.", "input": "Admin can take actions such as shutting down a profile or allowing a new seller based on their review."}]}, "testcases": [{"name": "Observe Total Transactions", "description": "Verify that the admin can observe the total number and details of transactions on the platform.", "input": {}, "expected": {"outcome": "Admin successfully views total transactions details."}}, {"name": "Allow New Seller", "description": "Verify that the admin can allow a new seller to register on the platform.", "input": {"newSellerRequest": "mobarokSeller"}, "expected": {"outcome": "Admin approves the new seller request, allowing them to register."}}, {"name": "Shutdown User Profile", "description": "Verify that the admin can shut down a user profile.", "input": {"profileToShutdown": "Seller123"}, "expected": {"outcome": "Admin successfully shuts down the specified user profile."}}]}
{"usecase": {"name": "User Registration", "scenario": "A new user registers an account in the website.", "actors": "New User", "preconditions": "User does not already have an account in the website", "steps": ["New User navigates to the registration page of the website", "New User fills in the required registration details (e.g., username, email, password)", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account or rejects the registration if details are invalid or already in use"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account providing unique and valid details.", "input": {"username": "NewUser123", "email": "newuser123@example.com", "password": "SecurePassword123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Duplicate Email", "description": "Verify that the system prevents registration with an email address already in use.", "input": {"username": "NewUser456", "email": "existingemail@example.com", "password": "AnotherSecurePassword456"}, "expected": {"outcome": "Registration failed", "status": "Email already in use"}}, {"name": "Unsuccessful Registration - Duplicate Username", "description": "Verify that the system prevents registration with a username that is already in use.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "UniquePassword789"}, "expected": {"outcome": "Registration failed", "status": "Username already in use"}}, {"name": "Unsuccessful Registration - Weak Password", "description": "Verify that the system prevents registration with a password that does not fulfill the necessary requirements.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "abcdef"}, "expected": {"outcome": "Registration failed", "status": "Password must be at least 8 characters long and contain a mix of letters and numbers"}}]}
{"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in the CineConnect website.", "actors": "Registered User", "preconditions": "User must have a registered account and know their login credentials", "steps": ["Registered User navigates to the login page of the forum", "Registered User enters their login credentials (e.g., username, password)", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "RegisteredUser", "password": "CorrectPassword"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "RegisteredUser", "password": "WrongPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "NonexistentUser", "password": "AnyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}]}
{"usecase": {"name": "Search Movies, MoviePersons, Users, Awards", "scenario": "Users can search for movies, movie-persons, other users, or movie awards like the Oscars within the platform.", "actors": "User", "preconditions": "User must be on the platform with access to the search functionality", "steps": ["User accesses the search feature on the CineConnect platform", "User enters a search query (it could be a movie title, username, or award name)", "The system processes the search query", "The system displays the search results relevant to the query"]}, "testcases": [{"name": "Successful Movie Search", "description": "Verify that the system can successfully return relevant movie results based on the search query.", "input": {"search_query": "Inception"}, "expected": {"outcome": "Search successful", "results_type": "Movies", "results_count": "1 or more", "results_content": "Relevant to 'Inception'"}}, {"name": "Successful User Search", "description": "Verify that the system can successfully return user profiles based on the search query.", "input": {"search_query": "JohnDoe"}, "expected": {"outcome": "Search successful", "results_type": "Users", "results_count": "1 or more", "results_content": "Relevant to 'JohnDoe'"}}, {"name": "Successful Awards Search", "description": "Verify that the system can successfully return information on movie awards based on the search query.", "input": {"search_query": "Oscars 2023"}, "expected": {"outcome": "Search successful", "results_type": "Awards", "results_count": "1 or more", "results_content": "Relevant to 'Oscars 2023'"}}, {"name": "Unsuccessful Search - No Results", "description": "Verify that the system can handle cases where no results are found for the search query.", "input": {"search_query": "NonexistentQuery"}, "expected": {"outcome": "Search unsuccessful", "results_type": "Movies", "results_count": "0", "results_content": "No results found for 'NonexistentQuery'"}}]}
{"usecase": {"name": "Add Movies to Watchlist and Watched List", "scenario": "A user adds movies to their watchlist or marks them as watched on their profile.", "actors": "User", "preconditions": "User must be logged in and have a movie in mind to add to their watchlist or watched list", "steps": ["User searches for a movie using the platform's search feature", "User selects the movie from the search results", "User clicks on 'Add to Watchlist' or 'Mark as Watched'", "The system updates the user's profile with the movie added to the specified list"]}, "testcases": [{"name": "Successful Addition to Watchlist", "description": "Verify that a user can successfully add a movie to their watchlist.", "input": {"movie_title": "Inception", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition successful", "list_updated": "Watchlist", "movies_in_list": "1 or more", "confirmation_message": "Inception added to Watchlist"}}, {"name": "Successful Addition to Watched List", "description": "Verify that a user can successfully mark a movie as watched.", "input": {"movie_title": "The Matrix", "action": "Mark as Watched"}, "expected": {"outcome": "Addition successful", "list_updated": "Watched List", "movies_in_list": "1 or more", "confirmation_message": "The Matrix marked as Watched"}}, {"name": "Unsuccessful Addition - User Not Authenticated", "description": "Verify that the system prevents unauthenticated users from adding movies to their watchlist or watched list.", "input": {"movie_title": "Interstellar", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition failed", "reason": "User not authenticated", "error_message": "Please log in to add movies to your lists."}}]}
{"usecase": {"name": "Rate a Movie", "scenario": "User submits a rating for a specific movie identified by ID.", "actors": "User", "preconditions": "User has a valid account and is authenticated and the movie identified by movieId exists in the system.", "steps": ["User selects a movie by movieId to rate.", "User submits a rating for the movie.", "System validates the user's authentication and permission to rate the movie.", "System updates the movie with the new rating.", "System confirms the rating update to the user."]}, "testcases": [{"name": "Successful Movie Rating", "description": "Validate that a user can successfully submit a rating for a movie.", "input": {"movieId": "Valid movie ID", "rating": 4}, "expected": {"message": "Movie successfully rated", "status": "Created"}}, {"name": "Invalid Movie ID", "description": "Verify the system's response when an invalid `movieId` is provided.", "input": {"movieId": "Invalid ID", "rating": 3}, "expected": {"message": "Invalid input provided", "status": "Bad Request"}}, {"name": "Unauthorized Rating Submission", "description": "Validate the system's response when the request is made without authentication.", "input": {"movieId": "Valid movie ID", "rating": 5}, "expected": {"message": "Authentication required", "status": "Unauthorized"}}, {"name": "Insufficient Permissions", "description": "Test the response when a user attempts to rate a movie but lacks the necessary permissions.", "input": {"movieId": "Valid movie ID", "rating": 2}, "expected": {"message": "Insufficient permissions", "status": "Unauthorized"}}]}
{"usecase": {"name": "Create New Post in Movie Discussion Forum", "scenario": "A user creates a new post within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum", "steps": ["User navigates to the desired movie discussion forum", "User clicks on 'Create New Post'", "User enters the content, and adds images related to the post", "User submits the post for publication"]}, "testcases": [{"name": "Successful Post Creation", "description": "Verify that a user can successfully create and submit a new post when they provide a valid content, and optional images related to the post.", "input": {"content": "Exploring how sci-fi movies have evolved over the decades, highlighting key films and directors that have shaped the genre.", "created_at": "2024-02-03T10:00:00Z", "author": "JohnDoe", "images": ["sci-fi_movie_posters.jpg", "director_interviews.jpg"]}, "expected": {"outcome": "Post creation successful", "status": "Published"}}, {"name": "Unsuccessful Post Submission - Empty Content", "description": "Verify that the system prevents a post from being submitted if the content or the list of submitted images is empty.", "input": {"content": "", "created_at": "2024-02-03T11:00:00Z", "author": "JaneDoe", "images": []}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Post Submission - Not a Member", "description": "Verify that the system prevents a user from creating a post if they are not a forum member, regardless of the post's content quality.", "input": {"content": "A deep dive into some of the most underrated movies from the past decade and why they deserve more recognition.", "created_at": "2024-02-03T12:00:00Z", "author": "NonMemberUser", "images": ["underrated_movies.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Post Submission - Inappropriate Content", "description": "Verify that the system prevents a post from being submitted if the content is flagged as inappropriate, even if it's related to movies.", "input": {"title": "Controversial Movie Opinions", "content": "Content that violates forum rules or is deemed inappropriate for the community.", "created_at": "2024-02-03T13:00:00Z", "author": "RebelUser", "images": ["controversial_scenes.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to inappropriate content"}}]}
{"usecase": {"name": "Create New Comment or Reply in Movie Discussion Forum", "scenario": "A user comments on an existing post or replies to another comment within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum and the post or comment must exist", "steps": ["User navigates to an existing post within the movie discussion forum", "User clicks on 'Comment' or 'Reply' to engage with the post or an existing comment", "User enters the content of their comment or reply", "User submits the comment or reply for publication"]}, "testcases": [{"name": "Successful Comment Creation", "description": "Verify that a user can successfully create and submit a new comment on a post when they provide valid content.", "input": {"content": "I completely agree with your points on the evolution of sci-fi movies, especially the part about 2000s innovations.", "created_at": "2024-02-04T10:00:00Z", "author": "JaneDoe", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation successful", "status": "Published"}}, {"name": "Unsuccessful Comment Submission - Empty Content", "description": "Verify that the system prevents a comment from being submitted if the content is empty.", "input": {"content": "", "created_at": "2024-02-04T12:00:00Z", "author": "EmptyContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Comment Submission - Not a Member", "description": "Verify that the system prevents a user from creating a comment if they are not a forum member.", "input": {"content": "Absolutely love this movie, and the points you've made!", "created_at": "2024-02-04T13:00:00Z", "author": "NonMemberUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Comment Submission - Inappropriate Content", "description": "Verify that the system prevents a comment from being submitted if the content is flagged as inappropriate.", "input": {"content": "Inappropriate content that violates forum rules.", "created_at": "2024-02-04T14:00:00Z", "author": "InappropriateContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to inappropriate content"}}]}
{"usecase": {"name": "Vote on a Post/Comment/Reply in Movie Discussion Forum", "scenario": "A user votes on an existing post, comment, or reply within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum, and the post, comment, or reply must exist", "steps": ["User navigates to an existing post, comment, or reply within the movie discussion forum", "User decides to upvote, downvote, or undo a previous vote", "User clicks on 'Upvote', 'Downvote', or 'Undo Vote' button", "The system updates the vote count accordingly"]}, "testcases": [{"name": "Successful Upvote", "description": "Verify that a user can successfully upvote a post, comment, or reply.", "input": {"action": "Upvote", "created_at": "2024-02-05T10:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Upvote successful", "new_upvote_count": "Increased by 1"}}, {"name": "Successful Downvote", "description": "Verify that a user can successfully downvote a post, comment, or reply.", "input": {"action": "Downvote", "created_at": "2024-02-05T11:00:00Z", "author": "User456", "post_id": "67890"}, "expected": {"outcome": "Downvote successful", "new_downvote_count": "Increased by 1"}}, {"name": "Successful Vote Undo", "description": "Verify that a user can successfully undo a previous vote on a post, comment, or reply.", "input": {"action": "Undo Vote", "created_at": "2024-02-05T12:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Vote undo successful", "new_vote_count": "Decreased by 1"}}, {"name": "Unsuccessful Vote - Not a Member", "description": "Verify that the system prevents a user from voting if they are not a forum member.", "input": {"action": "Upvote", "created_at": "2024-02-05T13:00:00Z", "author": "NonMemberUser", "post_id": "11111"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Vote - Voting Both Ways", "description": "Verify that the system prevents a user from both upvoting and downvoting the same post.", "input": {"action": "Upvote then Downvote", "created_at": "2024-02-05T14:00:00Z", "author": "User789", "post_id": "12345"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to attempting both upvote and downvote"}}]}
{"usecase": {"name": "Report a Post", "scenario": "A user reports a post in the discussion forum for violating community guidelines or other specific reasons.", "actors": "User, Moderator", "preconditions": "User must be logged in and have identified a post they believe violates the forum's rules or is otherwise inappropriate.", "steps": ["User navigates to the post they wish to report", "User clicks on the 'Report' button associated with the post", "User selects a reason for reporting the post from a predefined list or specifies a custom reason in the provided text area", "User submits the report", "The system acknowledges the report and forwards it to moderators for review"]}, "testcases": [{"name": "Successful Post Report - Predefined Reason", "description": "Verify that a user can successfully report a post for a predefined reason.", "input": {"post_id": "12345", "reason": "Harassment", "description": "The post contains harassing content towards an individual or group."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Successful Post Report - Custom Reason", "description": "Verify that a user can successfully report a post for a custom reason.", "input": {"post_id": "67890", "reason": "Other", "description": "The post promotes false information."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Unsuccessful Post Report - Not Authenticated", "description": "Verify that the system prevents a user from reporting a post if they are not logged in.", "input": {"post_id": "11223", "reason": "Spam", "description": "This post is unsolicited advertising and not relevant to the forum."}, "expected": {"outcome": "Report submission failed", "reason": "User not authenticated", "error_message": "Please log in to report a post."}}, {"name": "Unsuccessful Post Report - Post Not Found", "description": "Verify that the system handles cases where the post to be reported does not exist or has already been removed.", "input": {"post_id": "404NotFound", "reason": "Inappropriate Content", "description": "The content of this post is inappropriate for the forum."}, "expected": {"outcome": "Report submission failed", "reason": "Post not found", "error_message": "The post you are trying to report could not be found. It may have already been removed."}}]}
{"usecase": {"name": "Send CineFellow Request", "scenario": "A user sends a CineFellow request to another user to connect within the platform.", "actors": "User, Recipient User", "preconditions": "Both users must have a registered account on the platform. The sender must be logged in.", "steps": ["Sender navigates to the profile of the user they wish to connect with", "Sender clicks on the 'Send CineFellow Request' button", "The system sends a request to the recipient user", "The recipient user receives a notification of the CineFellow request"]}, "testcases": [{"name": "Successful CineFellow Request", "description": "Verify that a user can successfully send a CineFellow request to another user.", "input": {"sender_username": "User123", "recipient_username": "User456"}, "expected": {"outcome": "CineFellow request successful", "confirmation_message": "CineFellow request sent to User456"}}, {"name": "Unsuccessful CineFellow Request - Not Authenticated", "description": "Verify that the system prevents a user from sending a CineFellow request if they are not logged in.", "input": {"sender_username": "Anonymous", "recipient_username": "User789"}, "expected": {"outcome": "CineFellow request failed", "reason": "Sender not authenticated", "error_message": "Please log in to send CineFellow requests."}}, {"name": "Unsuccessful CineFellow Request - Recipient Not Found", "description": "Verify that the system prevents a user from sending a CineFellow request to some non-existent user.", "input": {"sender_username": "User789", "recipient_username": "NonExistentUser"}, "expected": {"outcome": "CineFellow request failed", "reason": "Recipient does not exist", "error_message": "Please send request to a registered user."}}]}
{"usecase": {"name": "Accept or Reject CineFellow Request", "scenario": "A user responds to a CineFellow request from another user by either accepting or rejecting it.", "actors": "Recipient User", "preconditions": "Recipient User must have received a CineFellow request and must be logged in to respond.", "steps": ["Recipient User navigates to their notifications or CineFellow requests section", "Recipient User views the CineFellow request", "Recipient User chooses to 'Accept' or 'Reject' the request", "The system updates the CineFellow status based on the user's decision"]}, "testcases": [{"name": "Successful CineFellow Request Acceptance", "description": "Verify that a user can successfully accept a CineFellow request.", "input": {"request_id": "12345", "action": "Accept"}, "expected": {"outcome": "CineFellow request acceptance successful", "confirmation_message": "CineFellow request accepted. You are now CineFellows."}}, {"name": "Successful CineFellow Request Rejection", "description": "Verify that a user can successfully reject a CineFellow request.", "input": {"request_id": "67890", "action": "Reject"}, "expected": {"outcome": "CineFellow request rejection successful", "confirmation_message": "CineFellow request rejected."}}, {"name": "Unsuccessful CineFellow Request Response - Not Authenticated", "description": "Verify that the system prevents a user from responding to a CineFellow request if they are not logged in.", "input": {"request_id": "11223", "action": "Accept"}, "expected": {"outcome": "CineFellow request response failed", "reason": "User not authenticated", "error_message": "Please log in to respond to CineFellow requests."}}, {"name": "Unsuccessful CineFellow Request Response - Request Expired", "description": "Verify that the system handles cases where the CineFellow request has expired or been withdrawn before the user could respond.", "input": {"request_id": "33445", "action": "Accept"}, "expected": {"outcome": "CineFellow request response failed", "reason": "Request expired", "error_message": "This CineFellow request has expired or been withdrawn."}}]}
{"usecase": {"name": "Add or Modify a Movie", "scenario": "A verified user adds a new movie to the platform or modifies details of an existing movie.", "actors": "Verified User", "preconditions": "User must be logged in as a verified account. For modification, the movie must already exist in the database.", "steps": ["Verified User navigates to the 'Add Movie' or 'Edit Movie' section", "Verified User fills in the movie details: title, release date, plot summary, poster URL, trailer URL, duration, language, country of first release, certification, awards, and casts", "Verified User submits the form", "The system validates the input and updates the database with the new or modified movie details"]}, "testcases": [{"name": "Successful Movie Addition", "description": "Verify that a verified user can successfully add a new movie with all required details.", "input": {"title": "New Sci-Fi Movie", "release_date": "2024-07-03", "plot_summary": "A thrilling journey through space to discover new worlds.", "poster_url": "http://example.com/poster.jpg", "trailer_url": "http://example.com/trailer.mp4", "duration_in_mins": 120, "language": "English", "country_of_first_release": "USA", "certification": "PG-13", "awards": ["Best Visual Effects"], "casts": ["Actor A", "Actor B"], "genres": ["Sci-Fi", "Adventure"]}, "expected": {"outcome": "Movie addition successful", "confirmation_message": "New Sci-Fi Movie has been successfully added to the platform."}}, {"name": "Successful Movie Modification", "description": "Verify that a verified user can successfully modify details of an existing movie.", "input": {"movie_id": "12345", "updates": {"plot_summary": "An updated thrilling journey through space.", "awards": ["Best Visual Effects", "Best Director"]}}, "expected": {"outcome": "Movie modification successful", "confirmation_message": "The movie details have been successfully updated."}}, {"name": "Unsuccessful Movie Addition - Missing Required Fields", "description": "Verify that the system prevents movie addition if required fields are missing.", "input": {"title": "Incomplete Movie", "release_date": "", "plot_summary": "A story about something.", "poster_url": "http://example.com/poster.jpg", "trailer_url": "http://example.com/trailer.mp4", "duration_in_mins": 120, "language": "English", "country_of_first_release": "USA", "certification": "PG-13", "awards": ["Best Visual Effects"], "casts": ["Actor A", "Actor B"], "genres": ["Sci-Fi", "Adventure"]}, "expected": {"outcome": "Movie addition failed", "reason": "Missing required fields", "error_message": "Please complete all required fields before submitting."}}, {"name": "Unsuccessful Movie Modification - Not Authenticated", "description": "Verify that the system prevents modification of movie details if the user is not verified or logged in.", "input": {"movie_id": "67890", "updates": {"duration_in_mins": 120}}, "expected": {"outcome": "Movie modification failed", "reason": "User not authenticated or verified", "error_message": "You must be a verified user to modify movie details."}}]}
{"usecase": {"name": "Update Showtimes for Existing Theater", "scenario": "Theater manager updates the showtimes for a specific theater identified by ID.", "actors": "Theater Manager", "preconditions": "Theater manager has valid credentials to access the system and the theater identified by theaterId exists in the system.", "steps": ["Theater manager selects a theater by theaterId to update its showtimes.", "Theater manager provides new showtime details for one or more movies.", "System updates the showtimes for the specified theater.", "System confirms the successful update to the theater manager."]}, "testcases": [{"name": "Successful Showtime Update", "description": "Validate that showtimes are successfully updated when valid input is provided.", "input": {"theaterId": 1, "showtimeDetails": [{"hall_id": 101, "movie_id": 201, "time": "2024-01-15 18:30", "ticket_price": 12.5}, {"hall_id": 102, "movie_id": 202, "time": "2024-01-16 19:00", "ticket_price": 15.0}]}, "expected": {"outcome": "Showtimes updated successfully", "status": "Success"}}, {"name": "Invalid Theater ID", "description": "Verify the system's response when an invalid `theaterId` is provided.", "input": {"theaterId": "Invalid ID"}, "expected": {"message": "Theater not found", "status": "Not Found"}}, {"name": "Unauthorized Access", "description": "Validate the system's response when the request is made without valid credentials.", "input": {"theaterId": 1}, "expected": {"message": "Unauthorized - Missing or invalid credentials", "status": "Unauthorized"}}, {"name": "Invalid Input Data", "description": "Verify the system's response to improperly formatted showtime details.", "input": {"theaterId": 1, "showtimeDetails": [{"hall_id": "101", "movie_id": "202", "time": "invalid-time-format", "ticket_price": "invalid-price-format"}]}, "expected": {"message": "Invalid input data", "status": "Bad Request"}}, {"name": "Forbidden Access", "description": "Test the response when the theater manager attempts to update showtimes for a theater they do not have permission to access.", "input": {"theaterId": 1}, "expected": {"message": "Forbidden - Access to the resource is forbidden", "status": "Forbidden"}}]}
{"usecase": {"name": "Post New Product in Marketplace", "scenario": "User submits a new product to the marketplace.", "actors": "User", "preconditions": "User has a registered and approved account on the marketplace and is logged in and has permission to list new products.", "steps": ["User prepares the new product details according to the marketplace guidelines.", "User navigates to the product submission section and inputs the new product details.", "System validates the submitted product details.", "System adds the new product to the marketplace.", "System confirms the successful submission to the user."]}, "testcases": [{"name": "Successful Product Submission", "description": "Validate that a user can successfully submit a new product when all required details are provided correctly.", "input": {"productDetails": {"name": "Stranger Things Notebook", "description": "Limited edition notebook with themed cover art.", "price": 9.99, "category": "Stationery", "tags": ["notebook", "Stranger Things", "TV show", "limited edition"]}}, "expected": {"message": "Product successfully submitted", "status": "Created"}}, {"name": "Incomplete Product Details", "description": "Verify that the system rejects the submission if required product details are missing.", "input": {"productDetails": {"name": "Friends Laptop Sleeve", "description": ""}}, "expected": {"message": "Submission failed: Missing required product details", "status": "Bad Request"}}, {"name": "Invalid Product Details", "description": "Validate that the system rejects submissions with invalid product details.", "input": {"productDetails": {"name": "The Office Desk Organizer", "description": "Organize your desk with a touch of Dunder Mifflin.", "price": -20.0}}, "expected": {"message": "Submission failed: Invalid product details", "status": "Bad Request"}}, {"name": "Unauthorized Submission", "description": "Test the system's response when an unauthorized user attempts to submit a new product.", "input": {"productDetails": {"name": "Game of Thrones Keychain", "description": "Carry the sigil of your favorite house with this keychain.", "price": 5.99}}, "expected": {"message": "Unauthorized: You do not have permission to submit products", "status": "Unauthorized"}}, {"name": "Duplicate Product Submission", "description": "Ensure the system rejects a submission if the product already exists in the marketplace.", "input": {"productDetails": {"name": "Stranger Things Notebook", "description": "Limited edition notebook with themed cover art.", "price": 9.99}}, "expected": {"message": "Submission failed: Duplicate product", "status": "Bad Request"}}]}
{"usecase": {"name": "Ticket Purchase", "scenario": "A student can purchase a ticket for bus trip", "actors": "Student, Bus Company", "preconditions": "Student is enrolled in the university ", "steps": ["Student selects the number of tickets", "Student submits the request"]}, "testcases": [{"name": "Valid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases a valid number of tickets.", "input": {"numberOfTickets": 1, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket purchased"}}, {"name": "Invalid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases an invalid number of tickets.", "input": {"numberOfTickets": 0, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket not purchased", "reason": "Invalid number of tickets"}}]}
{"usecase": {"name": "Ticket scanning", "scenario": "A bus staff can scan the ticket of student for bus trip", "actors": "Bus Staff, Student", "preconditions": "Student is enrolled in the university ", "steps": ["Student shows the ticket to the Bus Staff", "Bus Staff scans the ticket"]}, "testcases": [{"name": "Valid Ticket Scanning", "description": "Verify that the system handles the case where a bus staff scans a valid ticket.", "input": {"ticketId": "123456789", "studentId": "1905121"}, "expected": {"outcome": "Ticket scanned successfully"}}, {"name": "Invalid Ticket Scanning", "description": "Verify that the system handles the case where a bus staff scans an invalid ticket.", "input": {"ticketId": "123456789", "studentId": "1905121"}, "expected": {"outcome": "Ticket not scanned", "reason": "Invalid ticket"}}]}
{"usecase": {"name": "Route Time Calendar", "scenario": "A student can view the future bus trips", "actors": "Student, Admin", "preconditions": "Student is enrolled in the university", "steps": ["Student selects the date", "Student selects the route", "Student submits the request"]}, "testcases": [{"name": "Valid Route Time Calendar", "description": "Verify that the system handles the case where a student selects a valid date and route.", "input": {"date": "2024-05-12", "route": "BUET to Farmgate"}, "expected": {"outcome": "Route time calendar displayed"}}, {"name": "Invalid Route Time Calendar", "description": "Verify that the system handles the case where a student selects an invalid date and route.", "input": {"date": "1998-05-12", "route": "BUET to Farmgate"}, "expected": {"outcome": "Route time calendar not displayed", "reason": "Invalid date or route"}}]}
{"usecase": {"name": "Feedback Submission", "scenario": "A student can submit feedback about their bus trip experience", "actors": "Student, Admin", "preconditions": "Student is enrolled in the university", "steps": ["Student selects the date and time of the bus trip", "Student provides feedback on various aspects such as cleanliness, punctuality, and comfort", "Student submits the feedback form"]}, "testcases": [{"name": "Valid Feedback Submission", "description": "Verify that the system accepts valid feedback submission", "input": {"date": "2024-05-15", "time": "14:00", "feedback": "The bus was not clean and the seats were uncomfortable"}, "expected": {"outcome": "Feedback submitted successfully"}}, {"name": "Invalid Feedback Submission", "description": "Verify that the system rejects invalid feedback submissions", "input": {"date": "2030-05-15", "time": "14:00", "feedback": "The bus was not clean and the seats were uncomfortable"}, "expected": {"outcome": "Feedback not submitted", "reason": "Invalid date"}}]}
{"usecase": {"name": "Tracking", "scenario": "A student can track the location of the bus in real-time", "actors": "Student, Bus Driver, Admin", "preconditions": "Student is enrolled in the university, Bus has GPS tracking enabled", "steps": ["Driver enables GPS tracking on the bus", "Student opens the tracking page or app", "Student selects the bus route", "Student views the real-time location of the bus on the map"]}, "testcases": [{"name": "Valid Tracking", "description": "Verify that the system accurately displays the real-time location of the bus", "input": {"route": "Farmgate to BUET"}, "expected": {"outcome": "Bus location displayed on the map"}}, {"name": "Invalid Tracking", "description": "Verify that the system handles invalid tracking requests appropriately", "input": {"route": "Invalid Route"}, "expected": {"outcome": "Bus location not displayed", "reason": "Invalid route selected"}}]}
{"usecase": {"name": "Bus Requisition", "scenario": "A teacher can request various types of buses for specific dates for their own reasons", "actors": "Teacher, Admin", "preconditions": "Teacher is employed by the university", "steps": ["Teacher logs into the bus requisition system", "Teacher selects the date for the bus requisition", "Teacher selects the type of bus required (e.g., shuttle bus, coach, mini-van)", "Teacher provides the reason for the bus requisition", "Teacher submits the bus requisition request"]}, "testcases": [{"name": "Valid Bus Requisition", "description": "Verify that the system accepts a valid bus requisition request from the teacher", "input": {"date": "2024-06-10", "busType": "Micro Bus", "reason": "Field trip with students"}, "expected": {"outcome": "Bus requisition request submitted successfully"}}, {"name": "Invalid Bus Requisition", "description": "Verify that the system rejects an invalid bus requisition request from the teacher", "input": {"date": "2024-06-10", "busType": "", "reason": ""}, "expected": {"outcome": "Bus requisition request not submitted", "reason": "Missing required information: bus type and reason"}}]}
{"usecase": {"name": "Repair and Request for parts from inventory", "scenario": "A bus driver can request for repair and parts from the inventory", "actors": "Bus Driver, Admin", "preconditions": "Bus is in need of repair and parts", "steps": ["Bus Driver logs into the system", "Bus Driver selects the bus that needs repair", "Bus Driver selects the parts required from the inventory", "Bus Driver submits the repair and parts request"]}, "testcases": [{"name": "Valid Repair and Request for parts", "description": "Verify that the system accepts a valid repair and parts request from the bus driver", "input": {"busId": "123", "parts": ["Engine Oil", "Brake Pads"]}, "expected": {"outcome": "Repair and parts request submitted successfully"}}, {"name": "Invalid Repair and Request for parts", "description": "Verify that the system rejects an invalid repair and parts request from the bus driver", "input": {"busId": "", "parts": []}, "expected": {"outcome": "Repair and parts request not submitted", "reason": "Missing required information: bus id and parts"}}]}
{"usecase": {"name": "Reading Book Summaries", "scenario": "User reads summaries called bytes of books.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User browses the list of book summaries", "User selects and reads a summary"]}, "testcases": [{"name": "Valid Summary Reading", "description": "Verify that a user can successfully read a book summary.", "input": {"selectedSummary": "Delirium"}, "expected": {"outcome": "Reading successful", "status": "Completed"}}, {"name": "Invalid Summary Selection", "description": "Verify the system's response when a user selects a non-existent summary.", "input": {"selectedSummary": "NonExistentSummary"}, "expected": {"outcome": "Reading failed", "status": "Error"}}]}
{"usecase": {"name": "Managing Favorites", "scenario": "User saves books to and manages their favorites list.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User selects a book or summary", "User adds the selection to their favorites list"]}, "testcases": [{"name": "Add to Favorites", "description": "Verify that a user can successfully add a book/summary to their favorites.", "input": {"selectedBook": "Requiem"}, "expected": {"outcome": "Added to favorites", "status": "Success"}}, {"name": "Add Non-existent Book to Favorites", "description": "Verify the response when a user tries to add a non-existent book to favorites.", "input": {"selectedBook": "NonExistentBook"}, "expected": {"outcome": "Addition failed", "status": "Error"}}]}
{"usecase": {"name": "Highlighting Quotations", "scenario": "User highlights and saves quotations from a book.", "actors": "User", "preconditions": "User is registered, logged in, and reading a book.", "steps": ["User selects a quotation from the book", "User highlights and saves the quotation"]}, "testcases": [{"name": "Valid Quotation Highlighting", "description": "Verify that a user can successfully highlight and save a quotation.", "input": {"selectedQuotation": "Divergent"}, "expected": {"outcome": "Highlighting successful", "status": "Saved"}}, {"name": "Highlighting Non-existent Quotation", "description": "Verify the response when a user tries to highlight a non-existent quotation.", "input": {"selectedQuotation": "NonExistentQuotation"}, "expected": {"outcome": "Highlighting failed", "status": "Error"}}]}
{"usecase": {"name": "Reporting Vulgar Content", "scenario": "User reports vulgar or inappropriate content in a book or summary.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User encounters vulgar content", "User reports the content"]}, "testcases": [{"name": "Valid Content Reporting", "description": "Verify that a user can successfully report vulgar content.", "input": {"reportedContent": "Insurgent"}, "expected": {"outcome": "Report successful", "status": "Acknowledged"}}, {"name": "Reporting Non-existent Content", "description": "Verify the response when a user tries to report content that doesn't exist.", "input": {"reportedContent": "NonExistentContent"}, "expected": {"outcome": "Report failed", "status": "Error"}}]}
{"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}
{"usecase": {"name": "Complaint Submission", "scenario": "Student submits a complaint to the hall authority and the hall authority responds to the complaint", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student inputs the complaint title and details", "Student submits the complaint", "Hall authority receives the complaint"]}, "testcases": [{"name": "Valid Complaint Submission", "description": "Verify that a student can successfully submit a complaint.", "input": {"title": "Noisy Neighbours", "details": "My neighbours are too noisy at night."}, "expected": {"outcome": "Complaint submitted", "status": "Submitted"}}, {"name": "Invalid Complaint Submission", "description": "Verify that a student cannot submit a complaint without a title.", "input": {"title": "", "details": "My neighbours are too noisy at night."}, "expected": {"outcome": "Complaint not submitted", "status": "Not Submitted"}}, {"name": "Valid Complaint Response", "description": "Verify that the hall authority can successfully respond to a complaint.", "input": {"response": "We will look into the matter."}, "expected": {"outcome": "Complaint responded to", "status": "Responded"}}, {"name": "Invalid Complaint Response", "description": "Verify that the hall authority cannot respond to a complaint without a response.", "input": {"response": ""}, "expected": {"outcome": "Complaint not responded to", "status": "Not Responded"}}, {"name": "Valid Complaint Status", "description": "Verify that a student can view the status of a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint status viewed", "status": "Viewed"}}, {"name": "Invalid Complaint Status", "description": "Verify that a student cannot view the status of a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint status not viewed", "status": "Not Viewed"}}, {"name": "Valid Complaint History", "description": "Verify that a student can view the history of a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint history viewed", "status": "Viewed"}}, {"name": "Invalid Complaint History", "description": "Verify that a student cannot view the history of a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint history not viewed", "status": "Not Viewed"}}, {"name": "Valid Complaint Deletion", "description": "Verify that a student can delete a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint deleted", "status": "Deleted"}}, {"name": "Invalid Complaint Deletion", "description": "Verify that a student cannot delete a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint not deleted", "status": "Not Deleted"}}, {"name": "Valid Complaint Search", "description": "Verify that a student can search for a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint found", "status": "Found"}}, {"name": "Invalid Complaint Search", "description": "Verify that a student cannot search for a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint not found", "status": "Not Found"}}]}
{"usecase": {"name": "Seat Allocation", "scenario": "Student applies for a seat in the hall and the hall authority allocates a seat to the student", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student applies for a seat", "Hall authority allocates a seat to the student"]}, "testcases": [{"name": "Valid Seat Application", "description": "Verify that a student can successfully apply for a seat.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat applied for", "status": "Applied"}}, {"name": "Invalid Seat Application", "description": "Verify that a student cannot apply for a seat that does not exist.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat not applied for", "status": "Not Applied"}}, {"name": "Valid Seat Allocation", "description": "Verify that the hall authority can successfully allocate a seat to a student.", "input": {"room number": "A101", "seat number": "1", "student_id": "1234"}, "expected": {"outcome": "Seat allocated", "status": "Allocated"}}, {"name": "Invalid Seat Allocation", "description": "Verify that the hall authority cannot allocate a seat that does not exist.", "input": {"room number": "A101", "seat number": "1", "student_id": "1234"}, "expected": {"outcome": "Seat not allocated", "status": "Not Allocated"}}, {"name": "Valid Seat History", "description": "Verify that a student can view the history of seats allocated.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat history viewed", "status": "Viewed"}}, {"name": "Invalid Seat History", "description": "Verify that a student cannot view the history of seats allocated that does not exist.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat history not viewed", "status": "Not Viewed"}}]}
{"usecase": {"name": "Notice Board", "scenario": "Hall authority posts notices on the notice board and students view the notices", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Hall authority posts a notice", "Student views the notice"]}, "testcases": [{"name": "Valid Notice Posting", "description": "Verify that the hall authority can successfully post a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice posted", "status": "Posted"}}, {"name": "Invalid Notice Posting", "description": "Verify that the hall authority cannot post an invalid notice.", "input": {"notice": null}, "expected": {"outcome": "Notice not posted", "status": "Not Posted"}}, {"name": "Valid Notice Viewing", "description": "Verify that a student can successfully view a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice viewed", "status": "Viewed"}}, {"name": "Invalid Notice Viewing", "description": "Verify that a student cannot view a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not viewed", "status": "Not Viewed"}}, {"name": "Valid Notice History", "description": "Verify that a student can view the history of notices posted.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice history viewed", "status": "Viewed"}}, {"name": "Invalid Notice History", "description": "Verify that a student cannot view the history of notices posted that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice history not viewed", "status": "Not Viewed"}}, {"name": "Valid Notice Deletion", "description": "Verify that the hall authority can successfully delete a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice deleted", "status": "Deleted"}}, {"name": "Invalid Notice Deletion", "description": "Verify that the hall authority cannot delete a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not deleted", "status": "Not Deleted"}}, {"name": "Valid Notice Search", "description": "Verify that a student can search for a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice found", "status": "Found"}}, {"name": "Invalid Notice Search", "description": "Verify that a student cannot search for a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not found", "status": "Not Found"}}, {"name": "Valid Notice Update", "description": "Verify that the hall authority can successfully update a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice updated", "status": "Updated"}}, {"name": "Invalid Notice Update", "description": "Verify that the hall authority cannot update a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not updated", "status": "Not Updated"}}]}
{"usecase": {"name": "Dining Management", "scenario": "Student takes lunch and dinner meals from the dining hall and the dining hall authority manages the daily meal records", "actors": "Student, Dining Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student takes lunch", "Student takes dinner", "Dining hall authority records the meals taken by the student"]}, "testcases": [{"name": "Valid Lunch Meal", "description": "Verify that a student can successfully take a lunch meal.", "input": {"lunch_taken": true}, "expected": {"outcome": "Lunch meal taken", "status": "Taken"}}, {"name": "Invalid Lunch Meal", "description": "Verify that a student cannot take a lunch meal", "input": {"lunch_taken": false}, "expected": {"outcome": "Lunch meal not taken", "status": "Not Taken"}}, {"name": "Valid Dinner Meal", "description": "Verify that a student can successfully take a dinner meal.", "input": {"dinner_taken": true}, "expected": {"outcome": "Dinner meal taken", "status": "Taken"}}, {"name": "Invalid Dinner Meal", "description": "Verify that a student cannot take a dinner meal", "input": {"dinner_taken": false}, "expected": {"outcome": "Dinner meal not taken", "status": "Not Taken"}}, {"name": "Valid Meal Record", "description": "Verify that the dining hall authority can successfully record the meals taken by a student.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Lunch meal record taken", "status": "Taken"}}, {"name": "Valid Meal History", "description": "Verify that a student can view the history of meals taken.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Meal history viewed", "status": "Viewed"}}, {"name": "Invalid Meal History", "description": "Verify that a student cannot view the history of meals taken that does not exist.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Meal history not viewed", "status": "Not Viewed"}}]}
{"usecase": {"name": "Mess Managing By Most Senior Batch Students", "scenario": "2 or 3 students from most senior batch manages a mess month and the hall authority facilitates the mess management", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["2 or 3 students from most senior batch manages the mess month", "Hall authority facilitates the mess management"]}, "testcases": [{"name": "Apply for Mess Management", "description": "2 or 3 students from most senior batch apply to manage the mess for a month.", "input": {"applicants": [["1234", "5678", "91011"], ["23394", "13030"]]}, "expected": {"outcome": "Mess management applied for", "status": "Applied"}}, {"name": "Select a group of students for Mess Management", "description": "Hall authority selects a group of students from most senior batch to manage the mess for a month.", "input": {"applicants": ["1234", "5678", "91011"]}, "expected": {"outcome": "Mess management selected", "status": "Selected"}}, {"name": "Daily Mess Management Record", "description": "Mess managers records the daily mess management activities.", "input": {"managers": ["1234", "5678", "91011"], "lunch menu": {"Rice": "100 kg", "Fish": "50 kg", "Chicken": "100 kg", "Vegetables": "50 kg"}, "dinner menu": {"Rice": "100 kg", "Fish": "50 kg", "Chicken": "100 kg", "Vegetables": "50 kg"}, "lunch": {"lunch served": 200, "lunch taken": 150}, "dinner": {"dinner served": 200, "dinner taken": 150}}, "expected": {"outcome": "Mess management recorded", "status": "Recorded"}}, {"name": "Mess Management History", "description": "Verify that a student can view the history of mess management activities.", "input": {"mess month": "January", "year": "2021"}, "expected": {"outcome": "Mess management history viewed", "status": "Viewed"}}, {"name": "Invalid Mess Management History", "description": "Verify that a student cannot view the history of mess management activities that does not exist.", "input": {"mess month": "January", "year": "2021"}, "expected": {"outcome": "Mess management history not viewed", "status": "Not Viewed"}}]}
{"usecase": {"name": "Posting in Community Forums", "scenario": "User shares experiences or seeks advice in the community forums, upvotes and comments on posts", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User enters the post title and content", "User adds tags and other attachments to their post"]}, "testcases": [{"name": "Successful Post", "description": "User successfully creates a new forum post", "input": {"title": "My first post", "content": "This is a test post.", "tags": []}, "expected": {"outcome": "Post successfully published", "status": "Successful"}}, {"name": "Unsuccessful - Empty Title", "description": "System prevents a user from submitting a post with an empty title", "input": {"title": "", "postContent": "This is another sample post"}, "expected": {"outcome": "Empty post title", "status": "Failed"}}, {"name": "Successful Comment", "description": "User successfully comments on a post", "input": {"postId": "11c8b19e-d021-42a1-bea8-a21f82996665", "parentComment": "53502922-a529-4016-ac6e-095f6ab8f5d2", "comment": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel..."}, "expected": {"outcome": "Comment successfully published", "status": "Successful"}}, {"name": "Unsuccessful Comment - Invalid Post Id", "description": "User attempts to comment on a post that is unavailable", "input": {"postId": "00000000-0000-0000-0000-000000000000", "parentComment": "00000000-0000-0000-0000-000000000000", "comment": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel..."}, "expected": {"outcome": "Invalid Post Id", "status": "Failed"}}, {"name": "Successful Upvote", "description": "User successfully upvotes a post", "input": {"postId": "11c8b19e-d021-42a1-bea8-a21f82996665", "upvote": true}, "expected": {"outcome": "Upvote successful", "status": "Successful"}}, {"name": "Unsuccessful Upvote - Invalid Post Id", "description": "User attempts to upvote a post that is unavailable", "input": {"postId": "00000000-0000-0000-0000-000000000000", "upvote": true}, "expected": {"outcome": "Invalid Post Id", "status": "Failed"}}]}
{"usecase": {"name": "Direct Messaging", "scenario": "User engages in a private conversation with another user", "actors": ["User"], "preconditions": "Users are logged in the app", "steps": ["User sends a direct message"]}, "testcases": [{"name": "Successful Message", "description": "User successfully sends a direct message to another user", "input": {"recipient": "d6897068-bb17-4376-b433-60def50e624d", "messageContent": "Hello, how are you?"}, "expected": {"outcome": "Message successfully sent", "status": "Successful"}}, {"name": "Message Failed - Invalid Recipient", "description": "System handles the case where a user tries to send a message to a non-existent user", "input": {"messageContent": "Hello, how are you?", "recipient": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid recipient", "status": "Failed"}}, {"name": "Successful Reply", "description": "User successfully replies to a direct message", "input": {"messageContent": "I'm doing great, thanks for asking!", "recipient": "d6897068-bb17-4376-b433-60def50e624d", "parentMessage": "d6897068-bb17-4376-b433-60def50e624d"}, "expected": {"outcome": "Reply successful", "status": "Successful"}}]}
{"usecase": {"name": "Seeking Expert Opinion", "scenario": "User seeks expert advice by posting a question for healthcare professionals", "actors": ["User", "Experts"], "preconditions": ["User is logged in the app", "Expert is logged in and verified"], "steps": ["User posts a question for expert opinion", "Expert can reply to the question"]}, "testcases": [{"name": "Question post successful", "description": "User successfully posts a question for expert opinion", "input": {"title": "How should I manage my diet?", "content": "This is a test post.", "tags": ["question", "diet"]}, "expected": {"outcome": "Question successfully posted for expert responses", "status": "Successful"}}, {"name": "Successful Reply", "description": "Verified Expert successfully replies to a question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": true}, "expected": {"outcome": "Expert response successful", "status": "Successful"}}, {"name": "Reply Failed - Expert not verified", "description": "System prevents unverified experts from replying to a question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": false}, "expected": {"outcome": "Unverified expert", "status": "Failed"}}, {"name": "Reply Failed - Invalid Question Id", "description": "System handles the case where an expert tries to reply to a non-existent question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": true, "questionId": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid question id", "status": "Failed"}}, {"name": "Reply Failed - Empty Response", "description": "System prevents an expert from replying with an empty response", "input": {"expertResponse": "", "isVerifiedExpert": true}, "expected": {"outcome": "Empty response", "status": "Failed"}}]}
{"usecase": {"name": "Tracking Routine Entries", "scenario": "User tracks routine entries including blood sugar levels, insulin dosage and blood pressure", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User selects the type of entry", "User inputs the entry date, time and details"]}, "testcases": [{"name": "Successful Entry - Blood Sugar", "description": "User successfully adds a blood sugar level entry", "input": {"bloodSugarLevel": 6.7, "testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Blood Pressure", "description": "User successfully adds a blood pressure entry", "input": {"systolic": 120, "diastolic": 80, "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Insulin Dosage", "description": "User successfully adds a insuline dosage entry", "input": {"insulinDosage": 10, "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Unsuccessful Entry - Invalid Blood Sugar Level", "description": "System prevents the user from adding an invalid blood sugar level", "input": {"bloodSugarLevel": -1, "testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Invalid blood sugar level", "status": "Failed"}}, {"name": "Unsuccessful Entry - Empty Entry", "description": "System prevents the user from adding an entry with an empty value", "input": {"testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Empty entry", "status": "Failed"}}]}
{"usecase": {"name": "Planning Routine Entries", "scenario": "User tracks routine entries including medicine and diet/calories", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User selects the type of entry", "User inputs the planned date, time and details"]}, "testcases": [{"name": "Successful Entry - Medicine", "description": "User successfully adds a medicine entry", "input": {"medicineName": "Aspirin", "dosage": "500mg", "instruction": "one tablet after breakfast", "frequency": "daily", "repeat": "1 week"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Diet", "description": "User successfully adds a diet entry", "input": {"mealType": "Breakfast", "calories": 300, "allowedFoods": ["Eggs", "Bread", "Milk"], "bannedFoods": ["Sweets", "Beef"]}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Unsuccessful Entry - Empty Medicine Name", "description": "System prevents the user from adding a medicine entry with an empty name", "input": {"medicineName": "", "dosage": "500mg", "instruction": "one tablet after breakfast", "frequency": "daily", "repeat": "1 week"}, "expected": {"outcome": "Empty medicine name", "status": "Failed"}}, {"name": "Unsuccessful Entry - Empty Diet", "description": "System prevents the user from adding a diet entry with an empty value", "input": {"mealType": "Breakfast", "calories": 300, "allowedFoods": [], "bannedFoods": []}, "expected": {"outcome": "Empty diet entry", "status": "Failed"}}]}
{"usecase": {"name": "Emergency Contacts", "scenario": "User manages emergency contacts for quick access during urgent situations", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User adds emergency contacts with relevant information"]}, "testcases": [{"name": "Successful Addition", "description": "User successfully adds an emergency contact with relevant information", "input": {"name": "Emergency Contact 1", "phone": "123-456-7890"}, "expected": {"outcome": "Contact successfully added", "status": "Successful"}}, {"name": "Unsuccessful Addition - Missing Information", "description": "System prevents the user from adding an emergency contact with missing information", "input": {"name": "Emergency Contact 2"}, "expected": {"outcome": "Incomplete contact information", "status": "Failed"}}, {"name": "Successful Deletion", "description": "User successfully deletes an emergency contact", "input": {"contactId": "11c8b19e-d021-42a1-bea8-a21f82996665"}, "expected": {"outcome": "Contact successfully deleted", "status": "Successful"}}, {"name": "Unsuccessful Deletion - Invalid Contact Id", "description": "System handles the case where a user tries to delete a non-existent contact", "input": {"contactId": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid contact id", "status": "Failed"}}]}
{"usecase": {"name": "Expert Verification", "scenario": "Experts add their credentials and get verified by the admin", "actors": ["Expert", "Admin"], "preconditions": "Expert is logged in the app", "steps": ["Expert adds their credentials", "Admin verifies or rejects the expert"]}, "testcases": [{"name": "Successful Addition", "description": "Expert successfully adds their credentials", "input": {"degree": "MD", "specialization": "Cardiology", "institution": "Johns Hopkins University", "year": 2015, "certificate": "certificate.pdf"}, "expected": {"outcome": "Credentials successfully added", "status": "Pending Verification"}}, {"name": "Successful Verification", "description": "Admin successfully verifies the expert", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": true}, "expected": {"outcome": "Expert successfully verified", "status": "Verified"}}, {"name": "Unsuccessful Verification - Invalid Credentials", "description": "System prevents the admin from verifying an expert with invalid credentials", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": false}, "expected": {"outcome": "Invalid credentials", "status": "Rejected"}}, {"name": "Unsuccessful Verification - Invalid Expert Id", "description": "System handles the case where an admin tries to verify a non-existent expert", "input": {"expertId": "00000000-0000-0000-0000-000000000000", "isVerified": true}, "expected": {"outcome": "Invalid expert id", "status": "Failed"}}, {"name": "Unsuccessful Verification - Empty Credentials", "description": "System prevents the admin from verifying an expert with empty credentials", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": true}, "expected": {"outcome": "Empty credentials", "status": "Failed"}}]}
{"usecase": {"name": "Custom Puzzle Selection", "scenario": "User selects different modes of the tensor puzzle game and the system generates a tensor puzzle accordingly.", "actors": "Both registered and unregistered users", "preconditions": "none", "steps": ["User selects appropriate tensor generator functions", "User selects appropriate tensor manipulation functions", "User chooses the difficulty level", "User selects the number of problems in the set", "The system generates a tensor puzzle accordingly", "The system displays the tensor puzzle to the user, along with the timer"]}, "testcases": [{"name": "Valid Custom Puzzle Selection", "description": "Verify that a user can successfully select the appropriate tensor generator functions, tensor manipulation functions, difficulty level, and number of problems in the set to generate a tensor puzzle.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3}, "expected": {"outcome": "Problem generation successful"}}, {"name": "Default Puzzle Selection", "description": "Verify that the system handles the case where the user does not select anything, so the system generates a default tensor puzzle.", "input": {"manipulators": [], "how_many": 0, "depth": 0}, "expected": {"outcome": "Tensor puzzle generated successfully"}}]}
{"usecase": {"name": "Solving a Puzzle", "scenario": "User solves the tensor puzzle generated by the system.", "actors": "User", "preconditions": "A tensor puzzle should be generated by the system.", "steps": ["User inputs code to solve the tensor puzzle", "The system runs the code", "The system checks if the output of the code matches the expected output", "The system displays the result to the user", "The system displays the next problem to the user"]}, "testcases": [{"name": "Valid and correct code", "description": "Verify that the system accepts valid and correct code from the user.", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unique(o_tensor, dim=0)\ntensor = o_tensor"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 1, "result": {"0": {"status": "success", "correct": true}}}}, {"name": "Valid but incorrect code", "description": "Verify that the system handles the case where the user inputs valid but incorrect code.", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unique(o_tensor, dim=0)\ntensor = o_tensor + 1"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 0, "result": {"0": {"status": "failed", "correct": false}}}}, {"name": "Invalid code", "description": "Verify that the system handles the case where the user inputs invalid code. (e.g., syntax error)", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unOaque(o_tensor, dim=0)\ntensor = o_tensor + 1"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 0, "result": {"0": {"status": "failed", "correct": false}}}}]}
{"usecase": {"name": "Addition of a user-define tensor puzzle", "scenario": "User adds a user-defined tensor puzzle to the system.", "actors": "User", "preconditions": "User should be a registered user and should be logged in.", "steps": ["User inputs the tensor puzzle", "The system checks if the tensor puzzle is valid", "The system adds the tensor puzzle to the system"]}, "testcases": [{"name": "Valid tensor puzzle", "description": "Verify that the system accepts a valid tensor puzzle from the user.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True)"}, "expected": {"outcome": "Tensor puzzle added successfully", "status": "Approved"}}, {"name": "Invalid tensor puzzle (Does no\u2020 match the expected output)", "description": "Verify that the system handles the case where the user inputs an invalid tensor puzzle.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True) + 1"}, "expected": {"outcome": "Tensor puzzle addition failed", "status": "Rejected"}}, {"name": "Invalid tensor puzzle (Invalid input)", "description": "Verify that the system handles the case where the user inputs an invalid input tensor for the puzzle.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3, [4, 5, 6]]) + 1", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True)"}, "expected": {"outcome": "Tensor puzzle addition failed", "status": "Rejected"}}]}
{"usecase": {"name": "Additon of a question on a tensor manipulation problem", "scenario": "User adds a question on a tensor manipulation problem to the system.", "actors": "User", "preconditions": "User should be a registered user and should be logged in.", "steps": ["User inputs the question", "The system checks if the question is valid", "The system adds the question to the system"]}, "testcases": [{"name": "Valid question", "description": "Verify that the system accepts a valid question from the user.", "input": {"title": "Test Question", "description": "This is a test question", "image_url": "https://i.imgur.com/3QXm2oF.png", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])"}, "expected": {"outcome": "Question added successfully", "status": "Approved"}}, {"name": "Invalid question (Invalid input/output tensors)", "description": "Verify that the system handles the case where the user inputs an invalid solution code for the question.", "input": {"title": "Test Question", "description": "This is a test question", "image_url": "https://i.imgur.com/3QXm2oF.png", "input": "torch.tensor([[1, 2, 3, [4, 5, asdfas]]) + 1", "output": "torch.tensor([[6, 15awt])"}, "expected": {"outcome": "Question addition failed", "status": "Rejected"}}]}
{"usecase": {"name": "Initiation of a 1v1 custom tensor puzzle game", "scenario": "User initiates a 1v1 custom tensor puzzle game.", "actors": "User1, User2", "preconditions": "User1 and User2 should be registered users and should be logged in.", "steps": ["User1 selects the appropriate tensor generator functions", "User1 selects the appropriate tensor manipulation functions", "User1 chooses the difficulty level", "User1 selects the number of problems in the set", "User1 selects the opponent", "User1 initiates the game", "The system generates a tensor puzzle accordingly", "The system displays the tensor puzzle to User1, along with the timer", "User2 receives a notification about the game", "User2 accepts the game", "The system displays the tensor puzzle to User2, along with the timer"]}, "testcases": [{"name": "Game initiation successful", "description": "Verify that the system successfully initiates a 1v1 custom tensor puzzle game.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": true}, "expected": {"outcome": "Game initiation successful", "game_id": "1234"}}, {"name": "Game initiation failed (User2 rejects the game)", "description": "Verify that the system handles the case where User2 rejects the game.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": false}, "expected": {"outcome": "Game initiation failed", "game_id": "1234"}}, {"name": "Game initiation failed (User2 does not respond)", "description": "Verify that the system handles the case where User2 does not respond to the game request.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": null}, "expected": {"outcome": "Game initiation failed", "game_id": "1234"}}]}
{"usecase": {"name": "Order Medicine", "scenario": "User orders medicine from the online pharmacy.", "actors": "User, Admin", "preconditions": "User is registered and logged in, Admin manages the system.", "steps": ["User selects the medicine to order", "User submits the order", "Admin processes the order"]}, "testcases": [{"name": "Valid Medicine Order", "description": "Verify that a user can successfully order medicine from the online pharmacy.", "input": {"selectedMedicine": [{"name": "Paracetamol", "quantity": 2, "price": 3.99}, {"name": "Aspirin", "quantity": 1, "price": 2.49}, {"name": "Amoxicillin", "quantity": 3, "price": 5.99}], "orderAmount": 24.45}, "expected": {"outcome": "Order placed successfully", "status": "Processed"}}, {"name": "Empty Medicine Order", "description": "Verify that the system handles the case where a user tries to submit an empty medicine order.", "input": {"selectedMedicine": [], "orderAmount": 0}, "expected": {"outcome": "Order failed", "status": "Not Processed"}}, {"name": "Admin Order Processing", "description": "Verify that the admin can successfully process a user's medicine order.", "input": {"adminProcessing": true}, "expected": {"outcome": "Order processed", "status": "Processed"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject a user's medicine order.", "input": {"adminProcessing": false}, "expected": {"outcome": "Order rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Add New Medicine", "scenario": "Admin adds new medicine to the online pharmacy.", "actors": "Admin", "preconditions": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.", "steps": ["Admin adds the details of the new medicine", "Admin submits the new medicine details"]}, "testcases": [{"name": "Valid Medicine Addition", "description": "Verify that the admin can successfully add a new medicine to the online pharmacy.", "input": {"medicineDetails": {"name": "Ibuprofen", "quantity": 100, "price": 5.99}}, "expected": {"outcome": "Medicine added successfully", "status": "Added"}}, {"name": "Invalid Medicine Addition", "description": "Verify that the system handles the case where the admin tries to add invalid medicine details (e.g., missing fields).", "input": {"medicineDetails": {"name": "", "quantity": 50, "price": 5.99}}, "expected": {"outcome": "Medicine addition failed", "status": "Not Added"}}]}
{"usecase": {"name": "Remove Banned Medicine", "scenario": "Admin removes banned medicine from the online pharmacy.", "actors": "Admin", "preconditions": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.", "steps": ["Admin selects the medicine to remove", "Admin confirms the removal of the medicine", "Admin reconfirms the removal"]}, "testcases": [{"name": "Valid Medicine Removal", "description": "Verify that the admin can successfully remove medicine from the online pharmacy.", "input": {"selectedMedicine": "Amoxicillin", "confirmRemoval": true, "reconfirmation": true}, "expected": {"outcome": "Medicine removed successfully", "status": "Removed"}}, {"name": "Invalid Medicine Removal", "description": "Verify that the system handles the case where the admin tries to remove non-existent medicine.", "input": {"selectedMedicine": "NonExistentMedicine", "confirmRemoval": true}, "expected": {"outcome": "Medicine removal failed", "status": "Not Removed"}}, {"name": "Mistakenly Medicine Removal", "description": "Verify that the system handles the case where the admin mistakenly tries to remove a medicine.", "input": {"selectedMedicine": "Ibuprofen", "confirmRemoval": true, "reconfirmation": false}, "expected": {"outcome": "Medicine removal cancelled", "status": "Not Removed"}}]}
{"usecase": {"name": "Return Expired Medicine", "scenario": "Admin returns expired medicines back to the pharmaceutical company.", "actors": "Admin", "preconditions": "Admin manages the system and there are expired medicines.", "steps": ["Admin identifies the expired medicine", "Admin returns the expired medicine", "Admin reconfirms the return"]}, "testcases": [{"name": "Valid Medicine Return", "description": "Verify that the admin can successfully return expired medicine.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine returned successfully", "status": "Returned"}}, {"name": "Invalid Medicine Return", "description": "Verify that the system handles the case where the admin tries to restore non-existent expired medicine.", "input": {"selectedMedicine": [{"name": "AmoxicillinNonExistent", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine return failed", "status": "Not Returned"}}, {"name": "Missing Information on Medicine Return", "description": "Verify that the system handles the case where the admin tries to return expired medicine without proper information.", "input": {"selectedMedicine": [{"name": "AmoxicillinNonExistent", "quantity": null}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine return failed", "status": "Not Returned"}}]}
{"usecase": {"name": "Order Medicine to Update Stock", "scenario": "Admin orders medicine from the pharmaceutical company to update the online pharmacy stock.", "actors": "Admin", "preconditions": "Admin manages the system and there's a need to update stock.", "steps": ["Admin selects the medicines to order from the company", "Admin submits the order to the company"]}, "testcases": [{"name": "Valid Order Submission", "description": "Verify that the admin can successfully submit an order for medicine from the pharmaceutical company.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}], "orderAmount": 250.75}, "expected": {"outcome": "Order submitted successfully", "status": "Submitted"}}, {"name": "Empty Order Submission", "description": "Verify that the system handles the case where the admin tries to submit an empty order.", "input": {"selectedMedicine": [], "orderAmount": 0}, "expected": {"outcome": "Order submission failed", "status": "Not Submitted"}}, {"name": "Negative Amount Order Submission", "description": "Verify that the system handles the case where the admin tries to submit an order of negative amount.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}], "orderAmount": -250.75}, "expected": {"outcome": "Order submission failed", "status": "Not Submitted"}}]}
{"usecase": {"name": "Get All User Boards", "scenario": "User retrieves a list of all their boards for display on the dashboard page.", "actors": "User", "preconditions": "User is registered, logged in, and has created or is a member of one or more boards.", "steps": ["User requests to view all boards", "System retrieves and displays all boards associated with the user"]}, "testcases": [{"name": "Successful Retrieval of Boards", "description": "Verify that a user can successfully retrieve all boards they are associated with.", "input": {}, "expected": {"outcome": "Boards retrieval successful", "status": "Retrieved", "response": [{"board_id": 1, "board_name": "CSE408 Software Project | TaskFlow", "board_description": "This board oversees the progress of the CSE408 Software Project", "created_at": "2023-10-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.45}, {"board_id": 2, "board_name": "CSE406 Security Project | Wazuh", "board_description": "This board oversees the progress of the CSE406 Security Project", "created_at": "2023-11-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "risenfromashes", "board_overall_progress": 0.12}, {"board_id": 3, "board_name": "Thesis | Language Model of Phylogenetic Trees", "board_description": "Tune here to be in sync with the progress of our thesis work", "created_at": "2023-10-23T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.09}]}}, {"name": "Internal Server Error During Boards Retrieval", "description": "Verify that the system provides an appropriate response in case of an internal server error during board retrieval.", "input": {}, "expected": {"outcome": "Boards retrieval failed", "status": "Error", "error": "Internal Server Error"}}, {"name": "No Boards Available", "description": "Verify that the system handles cases where the user has no boards associated with their account.", "input": {}, "expected": {"outcome": "No boards to retrieve", "status": "No Content", "response": []}}]}
{"usecase": {"name": "Create a New Board", "scenario": "User creates a new task board with specific details such as board name, description, deadline, and members.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User provides board details including name, description, deadline, and members.", "User submits the request to create a new board."]}, "testcases": [{"name": "Valid Board Creation", "description": "Verify that a user can create a new board with all required and valid details.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2024-12-05T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}, {"user_id": "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r", "user_name": "BRAINIAC77", "member_role": 2}, {"user_id": "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r", "user_name": "shattik420", "member_role": 2}, {"user_id": "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t", "user_name": "Tahmid-404"}, {"user_id": "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u", "user_name": "shitdroid"}, {"user_id": "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v", "user_name": "amirulislamalif"}]}, "expected": {"outcome": "Board creation successful", "status": "Created", "response": {"board_id": 5, "board_name": "ISD Project | ExploreMate", "created_at": "2024-08-23T00:00:00.000Z"}}}, {"name": "Invalid Board Creation - Missing Details", "description": "Verify that the system handles cases where a user tries to create a board with missing details such as board name or members.", "input": {"board_description": "Missing board name and members", "board_deadline": "2024-12-05T00:00:00.000Z"}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Invalid Board Creation - Invalid Deadline", "description": "Verify that the system handles cases where a user tries to create a board with an invalid deadline format.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "invalid-date-format", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Invalid Board Creation - Past Deadline", "description": "Verify that the system prevents board creation with a deadline that is in the past.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2022-01-01T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Server Error During Board Creation", "description": "Verify that the system provides an appropriate response in case of an internal server error during board creation.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2023-12-05T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Internal Server Error"}}]}
{"usecase": {"name": "Get Board Content", "scenario": "User retrieves the content of a specific board, including lists and tasks for the board view page.", "actors": "User", "preconditions": "User is registered, logged in, and has access to the specified board.", "steps": ["User selects a board by its ID", "System retrieves and displays all lists and tasks associated with the board"]}, "testcases": [{"name": "Successful Retrieval of Board Content", "description": "Verify that a user can successfully retrieve all content of a board they have access to.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval successful", "status": "Retrieved", "response": {"board_id": 1, "board_name": "CSE408 Software Project | TaskFlow", "board_lists": [{"list_id": 1, "list_name": "Project Scope Presentation", "list_tasks": [{"task_id": 1, "task_name": "Research to find a suitable project", "task_deadline": "2023-10-05T00:00:00.000Z", "task_label_color": "#FF0000", "task_overall_progress": 1.0}, {"task_id": 2, "task_name": "Do a meeting for project finalization", "task_deadline": "2023-10-06T00:00:00.000Z", "task_label_color": "#123456", "task_overall_progress": 1.0}, {"task_id": 3, "task_name": "Prepare the presentation slides", "task_deadline": "2023-10-08T00:00:00.000Z", "task_label_color": "#654321", "task_overall_progress": 1.0}]}, {"list_id": 2, "list_name": "Mock UI Design", "list_tasks": [{"task_id": 4, "task_name": "Sketch the design in a meeting", "task_deadline": "2023-10-10T00:00:00.000Z", "task_label_color": "#F2A541", "task_overall_progress": 1.0}, {"task_id": 5, "task_name": "Design the home page", "task_deadline": "2023-10-10T00:00:00.000Z", "task_label_color": "#F23A41", "task_overall_progress": 1.0}, {"task_id": 6, "task_name": "Design the profile settings page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#F2F541", "task_overall_progress": 1.0}, {"task_id": 7, "task_name": "Design the board view page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#41F2F5", "task_overall_progress": 1.0}, {"task_id": 8, "task_name": "Design the task view page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#41F2A5", "task_overall_progress": 1.0}]}]}}}, {"name": "Unauthorized Board Content Access", "description": "Verify that the system prevents access to a board's content if the user does not have the necessary access rights.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Board Content Retrieval for Non-Existent Board", "description": "Verify that the system handles cases where a user tries to retrieve content for a non-existent board.", "input": {"board_id": 999}, "expected": {"outcome": "Board content retrieval failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Content Retrieval", "description": "Verify that the system provides an appropriate response in case of an internal server error during board content retrieval.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval failed", "status": "Error", "error": "Internal Server Error"}}]}
{"usecase": {"name": "Add a List to a Board", "scenario": "User adds a new list to an existing board with specific details such as list name, description, and deadline.", "actors": "User", "preconditions": "User is registered, logged in, and has access to the board.", "steps": ["User selects a board by its ID", "User provides list details including name, description, and deadline", "User submits the request to add the new list to the selected board"]}, "testcases": [{"name": "Valid List Addition", "description": "Verify that a user can add a new list with all required and valid details to an existing board.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition successful", "status": "Added", "response": {"list_id": 12, "list_name": "API & Architecture Presentation"}}}, {"name": "Unauthorized List Addition", "description": "Verify that the system prevents adding a list to a board if the user does not have the necessary access rights.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "List Addition to Non-Existent Board", "description": "Verify that the system handles cases where a user tries to add a list to a non-existent board.", "input": {"board_id": 999, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Conflicting Input During List Addition", "description": "Verify that the system handles cases where the list deadline conflicts with the board's deadline.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2025-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Conflicting Input", "message": "List deadline cannot be further than board deadline"}}, {"name": "Internal Server Error During List Addition", "description": "Verify that the system provides an appropriate response in case of an internal server error during list addition.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Internal Server Error"}}]}
{"usecase": {"name": "Update Board Settings", "scenario": "User updates the settings of an existing board, including the board name, description, and deadline.", "actors": "User", "preconditions": "User is registered, logged in, and has admin rights to the specified board.", "steps": ["User selects a board by its ID", "User provides updated settings for the board", "User submits the request to update the board settings"]}, "testcases": [{"name": "Successful Board Settings Update", "description": "Verify that a user with admin rights can successfully update the settings of a board.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "This board is created for coordination of the Wazuh research project", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update successful", "status": "Updated"}}, {"name": "Unauthorized Board Settings Update", "description": "Verify that the system prevents updating settings of a board by a user without admin rights.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "Unauthorized update attempt", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Update Settings for Non-Existent Board", "description": "Verify that the system handles cases where a user tries to update settings for a non-existent board.", "input": {"board_id": 999, "board_name": "Non-Existent Board", "board_description": "Invalid board", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Settings Update", "description": "Verify that the system provides an appropriate response in case of an internal server error during board settings update.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "This board is created for coordination of the Wazuh research project", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Error", "error": "Internal Server Error"}}]}
{"usecase": {"name": "Delete Board", "scenario": "Board owner deletes a specific board.", "actors": "User (Board Owner)", "preconditions": "User is registered, logged in, and is the owner of the board to be deleted.", "steps": ["User selects a board by its ID", "User requests to delete the board"]}, "testcases": [{"name": "Successful Board Deletion", "description": "Verify that the board owner can successfully delete their board.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion successful", "status": "Deleted"}}, {"name": "Unauthorized Board Deletion", "description": "Verify that the system prevents deleting a board by a user who is not the owner.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Deletion of Non-Existent Board", "description": "Verify that the system handles cases where a user tries to delete a non-existent board.", "input": {"board_id": 999}, "expected": {"outcome": "Board deletion failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Deletion", "description": "Verify that the system provides an appropriate response in case of an internal server error during board deletion.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion failed", "status": "Error", "error": "Internal Server Error"}}]}
{"usecase": {"name": "Create New Project", "scenario": "Project Manager wants to create a new project in the project management tool.", "actors": "Project Manager", "preconditions": "Project Manager is logged in to the system.", "steps": ["Project Manager provides project details", "Project Manager submits the project creation form"]}, "testcases": [{"name": "Valid Project Creation", "description": "Verify that a user can successfully create a new project with valid details.", "input": {"projectDetails": {"name": "New Project", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Project created successfully", "status": "Created"}}, {"name": "Incomplete Project Details", "description": "Verify that the system handles incomplete project details during creation.", "input": {"projectDetails": {"name": "Incomplete Project", "startDate": "2024-02-01"}}, "expected": {"outcome": "Project creation failed", "status": "Incomplete"}}, {"name": "Duplicate Project Name", "description": "Verify that the system handles the case where a project with the same name already exists.", "input": {"projectDetails": {"name": "Existing Project", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Project creation failed", "status": "DuplicateName"}}]}
{"usecase": {"name": "Create Tasks for an project", "scenario": "Admin creates tasks ", "actors": "Admin", "preconditions": "Admin is logged in and has access to the project.", "steps": ["Admin creates tasks with details", "Admin submits the task creation form"]}, "testcases": [{"name": "Create Tasks Successfully", "description": "Verify that an Admin can successfully create tasks for a project", "input": {"project": "name", "tasks": [{"name": "Task1", "startDate": "10-12-2020", "deadline": "10-12-2022"}, {"name": "Task2", "startDate": "20-12-2020", "deadline": "20-12-2022"}]}, "expected": {"outcome": "Tasks created successfully", "status": "Created"}}, {"name": "Incomplete Task Details", "description": "Verify that the system handles incomplete task details during creation.", "input": {"project": "name", "tasks": [{"name": "IncompleteTask", "startDate": "10-12-2020"}]}, "expected": {"outcome": "Task creation failed", "status": "Incomplete"}}, {"name": "Creating Task for non Existing Project", "description": "Verify that the system handles assigning task to a non existent Project.", "input": {"project": "name", "tasks": [{"name": "Task1", "startDate": "10-12-2020", "deadline": "10-12-2022"}]}, "expected": {"outcome": "Task creation failed", "status": "NonExistingProject"}}, {"name": "Duplicate Task Name", "description": "Verify that the system handles the case where a task with the same name in the project already exists.", "input": {"project": "name", "taskDetails": {"name": "Existing Task", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Task creation failed", "status": "DuplicateName"}}]}
{"usecase": {"name": "Add Team Members to a Task", "scenario": "Admin wants to add team members to an existing Task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the Task.", "steps": ["Admin selects team members to add", "Admin submits the team member addition form"]}, "testcases": [{"name": "Valid Team Member Addition", "description": "Verify that an Admin can successfully add team members to a task.", "input": {"task": "name", "teamMembers": ["User123", "User456"]}, "expected": {"outcome": "Team members added successfully", "status": "Added", "notification": "Notification sent to users to whom the task is assigned"}}, {"name": "Adding Nonexistent User", "description": "Verify that the system handles adding a nonexistent user to the task.", "input": {"task": "name", "teamMembers": ["NonexistentUser"]}, "expected": {"outcome": "Team member addition failed", "status": "NonexistentUser"}}, {"name": "User Already in task", "description": "Verify that the system handles adding a team member who is already part of the task.", "input": {"task": "name", "teamMembers": ["User123"]}, "expected": {"outcome": "Team member addition failed", "status": "AlreadyInTask"}}]}
{"usecase": {"name": "Track Project Progress", "scenario": "Monitor and track the progress of tasks within a project.", "actors": "Project Manager", "preconditions": "Project manager is logged in and has access to the project.", "steps": ["Project manager accesses the project dashboard and gantt chart"]}, "testcases": [{"name": "View Project Progress and Gantt Chart", "description": "Verify that a project manager can successfully view the progress of tasks within a project.", "input": {}, "expected": {"outcome": "Project progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Project", "description": "Verify that the system restricts access to project progress for unauthorized users.", "input": {}, "expected": {"outcome": "Project progress view failed", "status": "UnauthorizedAccess"}}]}
{"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}
{"usecase": {"name": "Task Completion", "scenario": "A team member completes a task assigned to them.", "actors": "Team Member", "preconditions": "Team member is logged into the system and has been assigned tasks.", "steps": ["Team member selects a task assigned to them.", "Team member marks the task as completed."]}, "testcases": [{"name": "Valid Task Completion", "description": "Verify that a team member can successfully mark a task as completed.", "input": {"task_id": "12345"}, "expected": {"outcome": "Task marked as completed successfully", "status": "Completed", "notification": "Notification sent to users involved in the task"}}, {"name": "Incomplete Task Completion", "description": "Verify that the system handles the case where a team member tries to mark an incomplete task as completed.", "input": {"task_id": "54321"}, "expected": {"outcome": "Task completion failed", "status": "Not Completed"}}]}
{"usecase": {"name": "User Sign-Up", "scenario": "Users sign up on the eLearning platform as either a student or a content creator by providing necessary information.", "actors": "Student, Content Creator", "preconditions": "User has access to the internet and the eLearning website.", "steps": ["User navigates to the sign-up page", "User selects the type of account (Student or Content Creator)", "User fills in the required information", "User submits the sign-up form"]}, "testcases": [{"name": "Valid Student Sign-Up", "description": "Verify that a user can successfully sign up as a student by providing all necessary information.", "input": {"accountType": "Student", "information": {"name": "John Doe", "email": "john@example.com", "password": "password123", "institution": "University", "experience": "Beginner", "goal": "Learn programming", "preference": ["Python", "Programming", "Data Science"]}}, "expected": {"outcome": "Sign-Up successful", "accountType": "Student"}}, {"name": "Valid Content Creator Sign-Up", "description": "Verify that a user can successfully sign up as a content creator by providing all necessary information.", "input": {"accountType": "Content Creator", "information": {"name": "Alice Smith", "email": "alice@example.com", "password": "securePass456", "specialization": "Data Science"}}, "expected": {"outcome": "Sign-Up successful", "accountType": "Content Creator"}}, {"name": "Incomplete Sign-Up Information", "description": "Verify that the system handles cases where the user submits the sign-up form with missing information.", "input": {"accountType": "Student", "information": {"name": "", "email": "incomplete@example.com", "password": "incompletePass"}}, "expected": {"outcome": "Sign-Up failed", "error": "Missing information"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an email address that does not conform to standard formatting rules.", "input": {"accountType": "Content Creator", "information": {"name": "Bob Smith", "email": "bob[at]example[dot]com", "password": "securePassword789", "specialization": "Web Development"}}, "expected": {"outcome": "Sign-Up failed", "error": "Invalid email format"}}]}
{"usecase": {"name": "Course Browsing and Enrollment", "scenario": "Students browse available courses, view details, and enroll in courses of their choice.", "actors": "Student", "preconditions": "Student is signed in to the platform.", "steps": ["Student navigates to the courses page", "Student views popular, recommended, and all courses", "Student selects a course", "Student views course details and enrolls"]}, "testcases": [{"name": "Successful Course Enrollment", "description": "Verify that a student can successfully enroll in a course after viewing its details.", "input": {"courseID": "CS101", "studentID": "S12345"}, "expected": {"outcome": "Enrollment successful", "courseID": "CS101", "status": "Enrolled"}}, {"name": "Enrollment in Nonexistent Course", "description": "Verify that the system handles cases where a student attempts to enroll in a course that does not exist.", "input": {"courseID": "InvalidCourse", "studentID": "S12345"}, "expected": {"outcome": "Enrollment failed", "error": "Course not found"}}, {"name": "Course Already Enrolled", "description": "Verify that the system notifies the student if they attempt to enroll in a course in which they are already enrolled.", "input": {"courseID": "CS101", "studentID": "S12345"}, "expected": {"outcome": "Enrollment failed", "error": "Already enrolled in this course"}}]}
{"usecase": {"name": "Interaction with Edurika Chatbot", "scenario": "Students interact with the Edurika chatbot to ask questions or get help on various topics.", "actors": "Student", "preconditions": "Student is signed in and is on the platform where the chatbot is accessible.", "steps": ["Student initiates chat with the Edurika chatbot", "Student types a question or request", "Chatbot processes the query and provides an answer or guidance"]}, "testcases": [{"name": "Valid Chatbot Interaction", "description": "Verify that a student can successfully interact with the chatbot and receive relevant responses.", "input": {"studentID": "S12345", "query": "How do I start with Python programming?"}, "expected": {"outcome": "Interaction successful", "response": "To start with Python programming, you can enroll in our Python for Beginners course."}}, {"name": "Unsupported Query", "description": "Verify that the chatbot handles unsupported or irrelevant queries gracefully.", "input": {"studentID": "S12345", "query": "What's the weather like?"}, "expected": {"outcome": "Interaction handled", "response": "I'm here to help with your learning. For weather updates, please check the weather service."}}]}
{"usecase": {"name": "Taking Exams or Quizzes", "scenario": "Students take exams or quizzes related to their courses, which can be in MCQ or written formats.", "actors": "Student", "preconditions": "Student is enrolled in a course and has reached the exam or quiz section.", "steps": ["Student navigates to the exam or quiz section of the course", "Student completes the MCQs and/or written questions", "Student submits the exam or quiz for evaluation", "System evaluates the submission and provides instant feedback or grades"]}, "testcases": [{"name": "Successful Exam Submission", "description": "Verify that a student can successfully complete and submit an exam.", "input": {"examID": "EX101", "studentID": "S12345", "answers": {"Q1": "A", "Q2": "B", "Q3": "C"}}, "expected": {"outcome": "Submission successful", "grade": "Pending evaluation"}}, {"name": "Quiz Submission with Hints", "description": "Verify that a student can request hints during a quiz and submit their answers.", "input": {"quizID": "QZ101", "studentID": "S12345", "requestsHint": true, "answers": {"Q1": "True", "Q2": "False"}}, "expected": {"outcome": "Submission successful", "hintsProvided": true}}, {"name": "Late Exam Submission", "description": "Verify that the system handles cases where a student attempts to submit an exam past the deadline.", "input": {"examID": "EX102", "studentID": "S12345", "answers": {"Q1": "A", "Q2": "B"}}, "expected": {"outcome": "Submission failed", "error": "Past deadline"}}, {"name": "Quiz Retake Restriction", "description": "Verify that the system enforces rules regarding quiz retakes, preventing students from retaking quizzes they've already passed.", "input": {"quizID": "QZ103", "studentID": "S12350", "previousAttempts": ["Passed"]}, "expected": {"outcome": "Retake failed", "error": "Quiz already passed, retake not allowed"}}, {"name": "Incomplete Exam Submission", "description": "Verify that the system prompts the student if they attempt to submit an exam without answering all mandatory questions.", "input": {"examID": "EX103", "studentID": "S12346", "answers": {"Q1": "A", "Q2": ""}}, "expected": {"outcome": "Submission failed", "error": "Mandatory questions must be answered"}}, {"name": "Invalid Answer Format", "description": "Verify that the system validates the format of the answers submitted by the student, especially for written responses.", "input": {"examID": "EX104", "studentID": "S12347", "answers": {"Q1": "<script>alert('Test');</script>"}}, "expected": {"outcome": "Submission failed", "error": "Invalid answer format"}}, {"name": "Correct Answers Auto-Grade", "description": "Verify that the system can automatically grade MCQ-based quizzes immediately upon submission.", "input": {"quizID": "QZ102", "studentID": "S12348", "answers": {"Q1": "True", "Q2": "False"}}, "expected": {"outcome": "Submission successful", "grade": "100%"}}]}
{"usecase": {"name": "Content Creation", "scenario": "Content creators upload course materials, including course name, block names, lesson names, lecture videos, and PDFs.", "actors": "Content Creator", "preconditions": "Content creator is signed in and has permissions to upload course materials.", "steps": ["Content creator navigates to the course creation section", "Content creator inputs course details and uploads materials", "Content creator submits the course for review or publishes directly if authorized"]}, "testcases": [{"name": "Successful Course Upload", "description": "Verify that a content creator can successfully upload a new course with all required materials, adhering to the hierarchical structure of course content.", "input": {"creatorID": "CC12345", "courseDetails": {"courseName": "Advanced Python", "blocks": [{"blockName": "Introduction", "lectures": [{"lectureName": "Python Basics", "lessons": [{"lessonName": "Getting Started with Python", "materials": {"video": "python_basics.mp4", "pdf": "getting_started_with_python.pdf"}}, {"lessonName": "Variables and Data Types", "materials": {"video": "variables_and_data_types.mp4", "pdf": "variables_and_data_types.pdf"}}]}]}]}}, "expected": {"outcome": "Course upload successful", "status": "Under Review"}}, {"name": "Incomplete Course Material Upload", "description": "Verify that the system handles cases where a content creator tries to upload a course with incomplete materials.", "input": {"creatorID": "CC12345", "courseDetails": {"courseName": "Machine Learning Basics", "blocks": []}}, "expected": {"outcome": "Course upload failed", "error": "Incomplete materials"}}, {"name": "Duplicate Course Name", "description": "Verify that the system prevents content creators from uploading a course with a name that already exists in the system.", "input": {"creatorID": "CC12347", "courseDetails": {"courseName": "Advanced Python", "blocks": [{"blockName": "Advanced Topics", "lessons": [{"lessonName": "Decorators in Python", "lectureName": "Understanding Decorators", "video": "decorators.mp4", "pdf": "decorators.pdf"}]}]}}, "expected": {"outcome": "Course upload failed", "error": "Course name already exists"}}, {"name": "Invalid File Format Upload", "description": "Verify that the system rejects course material uploads in unsupported file formats.", "input": {"creatorID": "CC12348", "courseDetails": {"courseName": "Data Structures in Java", "blocks": [{"blockName": "Introduction", "lessons": [{"lessonName": "Java Setup", "lectureName": "Java Installation", "video": "java_setup.exe", "pdf": "java_installation_guide.pdf"}]}]}}, "expected": {"outcome": "Course upload failed", "error": "Unsupported file format for video"}}]}
{"usecase": {"name": "Participation in Discussion Forum", "scenario": "Users participate in the discussion forum by posting questions, answering, liking, and disliking posts.", "actors": "Student, Content Creator", "preconditions": "User is signed in to the platform.", "steps": ["User navigates to the discussion forum", "User posts a new question or browses existing questions", "User responds to questions, likes, or dislikes posts"]}, "testcases": [{"name": "Successful Question Post", "description": "Verify that a user can successfully post a new question in the discussion forum.", "input": {"userID": "U12345", "postContent": "What is polymorphism in Object-Oriented Programming?"}, "expected": {"outcome": "Post successful", "postID": "GeneratedPostID"}}, {"name": "Successful Response to Question", "description": "Verify that a user can successfully respond to a question in the discussion forum.", "input": {"userID": "U67890", "postID": "QuestionPostID", "responseContent": "Polymorphism allows objects of different classes to be treated as objects of a common super class."}, "expected": {"outcome": "Response successful", "responseID": "GeneratedResponseID"}}, {"name": "Invalid Post Content", "description": "Verify that the system handles cases where a user attempts to post an empty question or response.", "input": {"userID": "U12345", "postContent": ""}, "expected": {"outcome": "Post failed", "error": "Content cannot be empty"}}]}
{"usecase": {"name": "Course Request by Student", "scenario": "Students can request new courses they are interested in, which content creators can review and potentially create.", "actors": "Student, Content Creator", "preconditions": "Student is signed in to the platform.", "steps": ["Student navigates to the course request section", "Student fills out and submits a course request form", "Content Creator reviews the request"]}, "testcases": [{"name": "Successful Course Request", "description": "Verify that a student can successfully submit a request for a new course.", "input": {"studentID": "S23456", "courseRequestDetails": {"courseTitle": "Introduction to Quantum Computing", "description": "A beginner's guide to quantum computing concepts and principles."}}, "expected": {"outcome": "Request submitted successfully", "status": "Under Review"}}, {"name": "Empty Course Request", "description": "Verify that the system handles cases where a student submits an empty course request form.", "input": {"studentID": "S23456", "courseRequestDetails": {"courseTitle": "", "description": ""}}, "expected": {"outcome": "Request submission failed", "error": "Course title and description required"}}]}
{"usecase": {"name": "Administrative Oversight", "scenario": "Admin reviews course content, user activities, and site statistics for quality control and site management.", "actors": "Admin", "preconditions": "Admin is signed in with administrative privileges.", "steps": ["Admin navigates to the administrative dashboard", "Admin reviews course content submissions, user activities, and site statistics", "Admin takes necessary actions like approving courses, issuing warnings, or removing inappropriate content"]}, "testcases": [{"name": "Course Content Approval", "description": "Verify that an admin can successfully review and approve submitted course content.", "input": {"adminID": "A34567", "courseID": "CS201", "approvalStatus": true}, "expected": {"outcome": "Course approved successfully", "courseID": "CS201", "status": "Approved"}}, {"name": "Remove Inappropriate Content", "description": "Verify that an admin can identify and remove inappropriate content from the platform.", "input": {"adminID": "A34567", "contentID": "InappropriatePost123", "action": "Remove"}, "expected": {"outcome": "Content removed successfully", "contentID": "InappropriatePost123"}}, {"name": "Review Site Statistics", "description": "Verify that an admin can access and review site statistics for monitoring purposes.", "input": {"adminID": "A34567"}, "expected": {"outcome": "Statistics reviewed successfully", "dataPresent": true}}, {"name": "Invalid Course Content Approval", "description": "Verify that the system prevents an admin from approving non-existent or already approved course content.", "input": {"adminID": "A34567", "courseID": "NonExistentCourse", "approvalStatus": true}, "expected": {"outcome": "Course approval failed", "error": "Course not found or already approved"}}, {"name": "Failed Content Removal", "description": "Verify that the system handles cases where an admin attempts to remove content that does not exist or has already been removed.", "input": {"adminID": "A34567", "contentID": "NonExistentPost", "action": "Remove"}, "expected": {"outcome": "Content removal failed", "error": "Content not found or already removed"}}, {"name": "Inaccessible Site Statistics", "description": "Verify that the system handles cases where site statistics are not available due to a system error or maintenance.", "input": {"adminID": "A34567"}, "expected": {"outcome": "Statistics review failed", "error": "Statistics temporarily unavailable"}}, {"name": "Unauthorized Administrative Action", "description": "Verify that the system prevents users without administrative privileges from performing administrative actions.", "input": {"adminID": "NonAdminUser", "courseID": "CS201", "approvalStatus": true}, "expected": {"outcome": "Action failed", "error": "User lacks administrative privileges"}}]}
{"usecase": {"name": "User Feedback on Courses", "scenario": "Students provide feedback on courses they've completed, including ratings and comments.", "actors": "Student", "preconditions": "Student is signed in and has completed at least one course.", "steps": ["Student navigates to the completed course page", "Student submits a rating and optional comments", "System records and aggregates the feedback"]}, "testcases": [{"name": "Successful Feedback Submission", "description": "Verify that a student can successfully submit feedback for a completed course.", "input": {"studentID": "S56789", "courseID": "CS404", "rating": 5, "comments": "Great course, well-structured and informative!"}, "expected": {"outcome": "Feedback submitted successfully", "feedbackID": "GeneratedFeedbackID"}}, {"name": "Feedback Without Comments", "description": "Verify that a student can submit feedback with just a rating and no comments.", "input": {"studentID": "S56789", "courseID": "CS404", "rating": 4, "comments": ""}, "expected": {"outcome": "Feedback submitted successfully", "feedbackID": "GeneratedFeedbackID"}}, {"name": "Feedback on Incomplete Course", "description": "Verify that the system prevents students from submitting feedback on courses they haven't completed.", "input": {"studentID": "S56789", "courseID": "IncompleteCourse101", "rating": 3, "comments": "Couldn't complete the course, but it seems good."}, "expected": {"outcome": "Feedback submission failed", "error": "Course not completed"}}]}
{"usecase": {"name": "Advanced Content Management by Creators", "scenario": "Content creators update existing courses, add new lessons or resources, and respond to student feedback for continuous improvement.", "actors": "Content Creator", "preconditions": "Content Creator is signed in and has published content on the platform.", "steps": ["Content Creator selects a course to update", "Content Creator adds new lessons, updates existing content, or adds additional resources", "Content Creator publishes the updates", "Content Creator reviews and responds to student feedback"]}, "testcases": [{"name": "Course Update with New Lessons", "description": "Verify that a content creator can add new lessons to an existing course and update it successfully.", "input": {"creatorID": "CC78901", "courseID": "CS606", "updates": {"newLessons": ["Advanced Algorithms", "Machine Learning Applications"]}}, "expected": {"outcome": "Course updated successfully", "updatedCourseID": "CS606"}}, {"name": "Responding to Student Feedback", "description": "Verify that a content creator can review and respond to student feedback on their courses.", "input": {"creatorID": "CC78901", "feedbackID": "Feedback123", "response": "Thank you for your valuable feedback! We've added more examples as you suggested."}, "expected": {"outcome": "Response to feedback successful", "responseID": "GeneratedResponseID"}}, {"name": "Unauthorized Course Update", "description": "Verify that the system prevents content creators from updating courses they do not own or have rights to.", "input": {"creatorID": "CC78902", "courseID": "CS606", "updates": {"newLessons": ["Quantum Computing Basics"]}}, "expected": {"outcome": "Update failed", "error": "Unauthorized access to course content"}}]}
{"usecase": {"name": "Product Price Comparison", "scenario": "User compares prices for multiple products from different online retailers.", "actors": "User", "steps": ["User enters search criteria for a product", "User views the list of product results with prices from multiple retailers", "User selects a product to view detailed information", "User compares prices and retailer ratings", "User adds the selected product to the cart"]}, "testcases": [{"name": "Valid Product Search", "description": "Verify that a user can successfully search for a product and view prices from multiple retailers.", "input": {"searchQuery": "mobiles"}, "expected": {"outcome": "Product search successful", "status": "Viewed results"}}, {"name": "Product Comparison", "description": "Verify that the user can compare prices and ratings for a selected product.", "input": {"selectedProduct": "iPhone 15"}, "expected": {"outcome": "Product comparison successful", "status": "Viewed prices and ratings"}}, {"name": "Add to Cart", "description": "Verify that the user can add a product to the shopping cart.", "input": {"selectedProduct": "iPhone 15"}, "expected": {"outcome": "Product added to cart", "status": "Added to cart"}}]}
{"usecase": {"name": "Price Drop Alerts", "scenario": "User sets up price drop alerts for specific products.", "actors": "User", "steps": ["User navigates to the product details page", "User sets up a price drop alert for the selected product"]}, "testcases": [{"name": "Set Price Drop Alert", "description": "Verify that the user can successfully set up a price drop alert for a selected product.", "input": {"selectedProduct": "AMD Ryzen 5 2400G Desktop PC", "targetPrice": 20000.0}, "expected": {"outcome": "Price drop alert set", "status": "Alert active"}}, {"name": "Invalid Target Price", "description": "Verify that the system handles the case where the user sets an invalid target price.", "input": {"selectedProduct": "iPhone 15", "targetPrice": -50.0}, "expected": {"outcome": "Invalid target price", "status": "Alert not set"}}]}
{"usecase": {"name": "View Product Details", "scenario": "User explores detailed information about a specific product.", "actors": "User", "steps": ["User enters search criteria for a product", "User selects a product from the search results", "User views detailed information about the selected product"]}, "testcases": [{"name": "Valid Product Selection", "description": "Verify that a user can successfully select a product and view its detailed information.", "input": {"selectedProduct": "HP 14 Laptop"}, "expected": {"outcome": "Product details viewed", "status": "Details displayed"}}, {"name": "Invalid Product Selection", "description": "Verify that the system handles the case where the user tries to view details for a non-existing product.", "input": {"selectedProduct": "Nonexistent Product"}, "expected": {"outcome": "Product details not found", "status": "Details not displayed"}}]}
{"usecase": {"name": "Product Recommendations", "scenario": "User receives personalized product recommendations based on their previous interactions with the website.", "actors": "User, Recommendation Engine", "preconditions": "User is registered and logged in, has previous interactions with the website", "steps": ["User logs in with their credentials", "User views the homepage or a dedicated recommendations section", "Recommendation Engine analyzes user's browsing history", "User receives personalized product recommendations"]}, "testcases": [{"name": "View Recommended Products", "description": "Verify that a user can view personalized product recommendations.", "input": {}, "expected": {"outcome": "Recommended products displayed", "status": "Viewed recommendations"}}, {"name": "Relevance of Recommendations", "description": "Verify that recommended products are relevant to the user's browsing history.", "input": {}, "expected": {"outcome": "Relevant recommendations", "status": "Products align with user's preferences"}}, {"name": "Dynamic Recommendations", "description": "Verify that recommended products dynamically update based on the user's ongoing interactions.", "input": {"userInteractions": ["Viewed products in the 'Electronics' category"]}, "expected": {"outcome": "Dynamic recommendations", "status": "Updated based on recent interactions"}}]}
{"usecase": {"name": "Admin Adds Website for Product Integration", "scenario": "Admin adds a new website to integrate its products.", "actors": "Admin", "preconditions": "Admin is authenticated and has appropriate permissions", "steps": ["Admin logs in with admin credentials", "Admin navigates to the admin dashboard", "Admin selects the option to add a new website for integration", "Admin provides details of the new website, such as name, URL", "Admin saves the new website configuration"]}, "testcases": [{"name": "Successful Website Addition", "description": "Verify that the admin can successfully add a new website for product integration.", "input": {"websiteName": "NewElecStore", "websiteURL": "https://www.newelecstore.com"}, "expected": {"outcome": "Website added successfully", "status": "Integration configured"}}, {"name": "Invalid Website URL", "description": "Verify that the system handles the case where the admin provides an invalid website URL.", "input": {"websiteName": "InvalidStore", "websiteURL": "invalid-url"}, "expected": {"outcome": "Invalid website URL", "status": "Integration not configured"}}]}
{"usecase": {"name": "Collaborator Submits Offers/Events", "scenario": "Collaborator submits offers or events to be featured as top offers or events.", "actors": "Collaborator, Admin", "preconditions": "Collaborator is registered and authenticated, Admin is authenticated", "steps": ["Collaborator logs in with their credentials", "Collaborator navigates to the collaboration dashboard", "Collaborator submits details of the offer or event, including product details, discount information, and validity period", "Admin reviews and approves the submitted offer or event", "Approved offer or event is displayed as a top offer or event on the Website"]}, "testcases": [{"name": "Collaborator Submits Offer", "description": "Verify that a collaborator can successfully submit an offer to be displayed as a top offer on the website.", "input": {"offerType": "Discount", "productName": "Smart TV", "discountPercentage": 20, "validityPeriod": "2024-03-01 to 2024-03-15"}, "expected": {"outcome": "Offer submitted successfully", "status": "Pending admin approval"}}, {"name": "Collaborator Submits Event", "description": "Verify that a collaborator can successfully submit an event to be displayed as an event on the website.", "input": {"eventType": "Launch Event", "productName": "New Smartphone Model", "eventDescription": "Join us for the exclusive launch of our latest smartphone model.", "eventDate": "2024-04-01"}, "expected": {"outcome": "Event submitted successfully", "status": "Pending admin approval"}}, {"name": "Admin Approval", "description": "Verify that the admin can review and approve the submitted offer or event.", "input": {"adminApproval": true}, "expected": {"outcome": "Offer or event approved", "status": "Displayed as top offer or event"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject the submitted offer or event.", "input": {"adminApproval": false}, "expected": {"outcome": "Offer or event rejected", "status": "Not displayed"}}]}
{"usecase": {"name": "customer signup", "scenario": "customer creates account in the website", "actors": "Customer,System", "precondition": "User cannot have any account using same email", "steps": ["Customer fills necessary information", "Customer submit the necessary information", "System provides verifying link", "Customer verifies himself using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "info.com", "password": "abcxyz", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}
{"usecase": {"name": "customer login", "scenario": "customer log in to the account in the website", "actors": "Customer,System", "precondition": "User must have an account", "steps": ["Customer fills necessary information", "Customer submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}
{"usecase": {"name": "Customer cart", "scenario": "Customer adding food to cart and viewing cart", "actors": "Customer", "precondition": "Customer must be logged in", "steps": ["Customer select the quantity of the food", "Customer add it to the cart"]}, "testcases": [{"name": "valid quantity", "description": "Customer selects valid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart", "status": "Added"}}, {"name": "invalid quantity", "description": "Customer selects invalid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": -1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 0, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable food", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": "unavailable", "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable restaurant", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "Unavailable hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}]}
{"usecase": {"name": "Place Order", "scenario": "Customer place the order from cart", "actors": "Customer", "precondition": "Customer must be logged in and cart must not be empty", "steps": ["Customer finalize the order", "Customer gives necessary info like location, phone number", "System show the total price", "Customer orders the food"]}, "testcases": [{"name": "cash on delivery order", "description": "Customer orders food and pay after delivery", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "success"}}, {"name": "Online payment order", "description": "Customer orders food and pay via online", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "1abcd2", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "paid"}}, {"name": "Invalid online payment order", "description": "Customer orders food and pay via online using invalid trxid", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "invalid", "cartid": "222"}, "expected": {"outcome": "Order did not place", "status": "Rejected"}}]}
{"usecase": {"name": "Customer Track the Order", "scenario": "Customer can track status of the active order and see the prvious order", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Restaurant approved the order", "Delivery person update the status", "Customer view the status"]}, "testcases": [{"name": "Active order", "description": "Customer can track only active order", "input": {"orderid": "222"}, "expected": {"outcome": "Food is on the way", "status": "not delivered"}}, {"name": "Previous Order", "description": "Customer cannot track the previous order which has already been delivered", "input": {"orderid": "222"}, "expected": {"outcome": "Already Delivered", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Customer cannot track the order beause the order is cancelled", "input": {"orderid": "222"}, "expected": {"outcome": "Order Cancelled", "status": "cancelled"}}]}
{"usecase": {"name": "Customer profile update", "scenario": "Customer can update his necessary info", "actors": "Cutomer,System", "precondition": "Customer must be logged in.", "steps": ["Customer fills the field which is to be updated", "Customer clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Customer update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Customer update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant signup", "scenario": "Restaurant can add category", "actors": "Restaurant,System", "precondition": "User cannot have any account using same email", "steps": ["Restaurant fills necessary information", "Restaurant submit the necessary information", "System provides verifying link", "Restaurant verifies using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka", "opening time": "8:00 am", "closing time": "8:30 pm"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "existing", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka", "opening time": "8:00 am", "closing time": "8:30 pm"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant login", "scenario": "Restaurant log in to the account in the website", "actors": "Restaurant,System", "precondition": "User must have an account", "steps": ["Restaurant fills necessary information", "Restaurant submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant Adding Food", "scenario": "Restaurant can add food under category", "actors": "Restaurant", "precondition": "Restaurant must be logged in.", "steps": ["Restaurant add category if necessary", "Restaurant fills information about food", "Restaurant add the food by clicking submit button"]}, "testcases": [{"name": "Valid Input", "description": "Category must be present under which food will be added and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food Added", "status": "In stock"}}, {"name": "Negative or zero price", "description": "Restaurant added invalid price", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "-150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food is not added", "status": "Rejected"}}, {"name": "Category does not exist", "description": "Restaurant added food with non-existent category", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Invalid", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food is not added", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant Adding Category", "scenario": "Restaurant can add category", "actors": "Restaurant", "precondition": "Restaurant must be logged in and category must not exist", "steps": ["Restaurant fills information about category", "Restaurant add the category by clicking submit button"]}, "testcases": [{"name": "Valid Input", "description": "Category will be added and this category must not exit", "input": {"Category Id": "1", "name": "Burger", "description": "Delicious Burger for you"}, "expected": {"outcome": "Category Added", "status": "Approved"}}, {"name": "Category Already Exist", "description": "Restaurant added already wxisted category", "input": {"Category Id": "1", "name": "Already existed", "description": "Delicious Burger for you"}, "expected": {"outcome": "Category did not added", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant Order", "scenario": "Restaurant,Customer ", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Customer order the foods", "Restaurant making the food", "Restaurant completed the order"]}, "testcases": [{"name": "Active order", "description": "Restaurant can only approve active order", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval accepted", "status": "Approved"}}, {"name": "Previous Order", "description": "Restaurant cannot approve the previous order which has already been delivered", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Restaurant cannot approve the order beause the order is cancelled", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "cancelled"}}, {"name": "Unauthorized Owner", "description": "Unauthorized Restaurant cannot approve or track the order beause the order is cancelled", "input": {"Restaurant ID": "Unauthorized", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant Updating Food", "scenario": "Restaurant can update food", "actors": "Restaurant", "precondition": "Restaurant must be logged in and food must be exist", "steps": ["Restaurant fills ne information about food", "Restaurant add the food by clicking submit button"]}, "testcases": [{"name": "Update Price", "description": "Food must be present and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "200", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food Updated", "status": "Approved"}}, {"name": "update category", "description": "Food must be present and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Noodles", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Category Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Updated info cannot be invalid", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Invalid", "price": "-150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food did not updated", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurants Collaborating", "scenario": "Restaurant can collaborate with each other if they want", "actors": "Restaurant", "precondition": "Restaurants must be logged in", "steps": ["One restaurant send request for collaboration", "Other restaurant accept the request"]}, "testcases": [{"name": "Sending request", "description": "Resturant send collaboration request", "input": {"Restaurant Id1": "1", "Restaurant Id2": "2", "Message": "Let's Do collaborate"}, "expected": {"outcome": "Request Sent", "status": "Pending"}}, {"name": "Accepting Request", "description": "Restaurant accept collaboration request", "input": {"Restaurant Id1": "1", "Restaurant Id2": "2", "Message": "Okay"}, "expected": {"outcome": "Request Accepted", "status": "Approved"}}, {"name": "Unauthorized request", "description": "Unauthorized restaurant cannot sent or accept request", "input": {"Restaurant Id1": "unauthorized", "Restaurant Id2": "2", "Message": "Okay"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Home Kitchen or Cloud Kitchen", "scenario": "Restaurant owner or sole business owner can open a home kitchen", "actors": "Restaurant, System", "precondition": "Restaurants must be logged in.Home kitchen cannot should not exist", "steps": ["One restaurant or business owner send request for becoming a home kitchen", "Systems accept the request"]}, "testcases": [{"name": "Sending request", "description": "Resturant send home kitchen request", "input": {"Restaurant Id": "1", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Sent", "status": "Pending"}}, {"name": "Accepting Request", "description": "System accept request", "input": {"Restaurant Id": "1", "Jome kitchen Id": "3", "Is Home Kitchen": "Yes"}, "expected": {"outcome": "Request Accepted", "status": "Approved"}}, {"name": "Unauthorized request", "description": "Unauthorized restaurant cannot sent request", "input": {"Restaurant Id": "unauthorized", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}, {"name": "Redundant request", "description": "Already a home kitchen cannot sent request", "input": {"Restaurant Id": "1", "Home kitchen": "3", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}]}
{"usecase": {"name": "Restaurant profile update", "scenario": "Restaurant can update necessary info", "actors": "Restaurant,System", "precondition": "Customer must be logged in.", "steps": ["Customer fills the field which is to be updated", "Customer clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Restaurant update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Restaurant update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}
{"usecase": {"name": "Delivery Person signup", "scenario": "Delivery Person creates account in the website", "actors": "Delivery Person,System", "precondition": "User cannot have any account using same email", "steps": ["Delivery Person fills necessary information", "Delivery Person submit the necessary information", "System provides verifying link", "Delivery Person verifies himself using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka", "preferred delivery location": "palashi"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "info.com", "password": "abcxyz", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka", "preferred delivery location": "palashi"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}
{"usecase": {"name": "Delivery Person login", "scenario": "Delivery Person log in to the account in the website", "actors": "Delivery Person,System", "precondition": "User must have an account", "steps": ["Delivery Person fills necessary information", "Delivery Person submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}
{"usecase": {"name": "Delivery Person Order", "scenario": "Delivery Person accept an order if he is free.He can take multiple order too if the locations are near but not more than three", "actors": "Delivery Person,System", "precondition": "User must have an account", "steps": ["System finds a delivery person and assigned the order", "Delivery Person accept the request", "System approves"]}, "testcases": [{"name": "valid request", "description": "Delivery Person is free", "input": {"order id": "1", "status": "accepted", "order count": "1"}, "expected": {"outcome": "Request Accepted", "status": "Accepted"}}, {"name": "valid request", "description": "Delivery Person is not free but order count is not more than free", "input": {"order id": ["1", "2"], "status": "accepted", "order count": "2"}, "expected": {"outcome": "Request Accepted", "status": "Accepted"}}, {"name": "Invalid request", "description": "Delivery Person cannot accept the request as the no of order is more than three", "input": {"order id": ["1", "2", "3", "4"], "status": "not accepted", "order count": "4"}, "expected": {"outcome": "More than three order", "status": "Rejected"}}, {"name": "Invalid request", "description": "Delivery Person is free but location is too far", "input": {"order id": ["1", "2"], "status": "not accepted", "location": "too far", "order count": "2"}, "expected": {"outcome": "Location too far", "status": "Rejected"}}, {"name": "valid request", "description": "Delivery Person is not available", "input": {"order id": ["1", "2"], "status": "not accepted", "order count": "2"}, "expected": {"outcome": "Not available", "status": "Rejected"}}]}
{"usecase": {"name": "Delivery Person Update Orders", "scenario": "Delivery Person update the status of the orders", "actors": "Delivery Person, Customer", "precondition": "User must have an account", "steps": ["Delivery Person upddate the status", "Customer see the status"]}, "testcases": [{"name": "Order on the way", "description": "Order is not delivered but it is on the way ", "input": {"oder id": "1", "status": "on the way"}, "expected": {"outcome": "Update successful", "status": "on the way"}}, {"name": "Order delivered", "description": "Order is on the cusomers's hand", "input": {"oder id": "1", "status": "delivered"}, "expected": {"outcome": "Update successful", "status": "on the way"}}, {"name": "Order Cancelling", "description": "Delivery Person cannot cancel an order", "input": {"oder id": "1", "status": "cancelled"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}, {"name": "Previous Order", "description": "Delivery Person cannot update previous order which is already been delivered", "input": {"oder id": "delivered", "status": "on the way"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}, {"name": "Cancelled Order", "description": "Delivery Person cannot update cancelled order which is already been delivered", "input": {"oder id": "cencelled", "status": "on the way"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}]}
{"usecase": {"name": "Delivery Person profile update", "scenario": "Delivery Person can update necessary info", "actors": "Delivery Person,System", "precondition": "Delivery Person must be logged in.", "steps": ["Delivery Person fills the field which is to be updated", "Delivery Person clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Delivery Person update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Delivery Person update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}
{"usecase": {"name": "Messenger", "scenario": "Different user can send and receive messages with some restriction", "actors": "Customer, Restaurant, Delivery Person", "precondition": "User must have an account", "steps": ["one user send nessage to another user", "another user reply to the meesage"]}, "testcases": [{"name": "Customer-Delivery Person", "description": "Customer and Delivery Person can send message to each other", "input": {"message": "I am on my way"}, "expected": {"outcome": "Message Sent", "status": "Sent"}}, {"name": "Customer-Restaurant", "description": "Customer and Restaurant can not send message to each other. As they can contact and take the food orders via other medium. Thus systems can be hampered.", "input": {"message": "Food is good"}, "expected": {"outcome": "Message not sent", "status": "rejected"}}, {"name": "Restaurant-Delivery Person", "description": "Restaurant and Delivery Person can send message to each other", "input": {"message": "When I can take food?"}, "expected": {"outcome": "Message Sent", "status": "Sent"}}]}
{"usecase": {"name": "Search Food", "scenario": "Customer and Guest can search food.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of food", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search food by name", "input": {"name": "Burger"}, "expected": {"outcome": "Food Found", "status": "okay"}}, {"name": "search by filter", "description": "User can search food by filter", "input": {"category": "Fast Food", "rating": "3.5", "min_price": "100", "max_price": "200"}, "expected": {"outcome": "Food not Found", "status": "okay"}}]}
{"usecase": {"name": "Search Restaurant", "scenario": "Customer and Guest can search Restaurant.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of Restaurant", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search restaurant by name", "input": {"name": "abcd Hotel"}, "expected": {"outcome": "Restaurant Found", "status": "okay"}}, {"name": "search by Location or type", "description": "User can search restaurant by Location or type", "input": {"Location": "Lalbagh", "rating": "3.5", "type": "Fast Food"}, "expected": {"outcome": "Restaurant not Found", "status": "okay"}}]}
{"usecase": {"name": "Conference Creation", "scenario": "Conference Chair creates a conference.", "actors": "Conference Chair", "preconditions": "User is registered as conference Chair in the website", "steps": ["Conference Chair enters conference title", "Conference Chair enters conference description", "Conference Chair enters conference webpage", "Conference Chair enters conference venue", "Conference Chair selects conference start date, end date", "Conference Chair selects submission deadline", "Conference Chair enters research track", "Conference Chair creates the conference"]}, "testcases": [{"name": "Valid Conference Creation", "description": "Verify that a conference chair has successfully created a conference.", "input": {"conference_title": "saydg rence", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation successful", "status": "Success"}}, {"name": "Unauthorized conference chair", "description": "Verify that the system handles the case where an unauthorized user tries to create a conference", "input": {"conference_title": "saydg rence", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}, {"name": "Empty Conference Title", "description": "Verify that the system handles the case where a chair tries to create a conference without title", "input": {"conference_title": "", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}, {"name": "Empty research track", "description": "Verify that the system handles the case where a chair tries to create a conference without any research track", "input": {"conference_title": "", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": []}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}]}
{"usecase": {"name": "Paper Submission", "scenario": "Users submit a paper in a conference.", "actors": "Users", "preconditions": "User is registered in the website", "steps": ["User enters paper title", "User selects co-authors", "User selects reaseach track", "User enters abstract", "User uploads pdf of the paper", "User submits the paper"]}, "testcases": [{"name": "Valid Paper Submission", "description": "Verify that a user has successfully submitted a paper.", "input": {"paper_title": "paper on graph", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission successful", "status": "Success"}}, {"name": "Empty Paper Title Submission", "description": "Verify that the system handles the case where a user tries to submit an empty paper title", "input": {"paper_title": "", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}, {"name": "Empty Paper Abstract Submission", "description": "Verify that the system handles the case where a user tries to submit an empty paper abstract", "input": {"paper_title": "Paper title here", "abstract": "", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}, {"name": "No pdf file uploaded", "description": "Verify that the system handles the case where a user tries to submit without uploading paper pdf", "input": {"paper_title": "paper on graph", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}]}
{"usecase": {"name": "Paper Review", "scenario": "Reviewer reviews a paper.", "actors": "Reviewer", "preconditions": "User is assigned as a reviewer", "steps": ["Reviewer enters paper rating", "Reviewer enters paper review", "Reviewer submits the paper review"]}, "testcases": [{"name": "Valid paper review Submission", "description": "Verify that a reviewer has successfully submitted a paper review.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": 7, "review": "very very very One of the paper"}, "expected": {"outcome": "Submission successful", "status": "Success"}}, {"name": "Empty paper rating submission", "description": "Verify that a reviewer has submitted a paper review without rating.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": null, "review": "very very very One of the paper"}, "expected": {"outcome": "Submission failed", "status": "Failed"}}, {"name": "Empty paper review submission", "description": "Verify that a reviewer has submitted a paper review without review.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": 6, "review": ""}, "expected": {"outcome": "Submission failed", "status": "Failed"}}]}
{"usecase": {"name": "Reviewer assignment", "scenario": "Conference Chair assign reviewrs in papers of a conference while satisfying constraints", "actors": "Conference Chair", "preconditions": "User is registered as conference chair in the website", "steps": ["Conference Chair enters conference page", "Conference Chair selects reviewer from suggestions and request for review"]}, "testcases": [{"name": "Valid Reviewer assignment", "description": "Verify that system has successfuly asssigned reviewers while satisfying constraints.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment successful", "status": "Success"}}, {"name": "Assinged reviewer is in conflict of interest", "description": "Verify that the system handles the case where chair tries to assign reviewer who is in conflict of interest.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment failed", "status": "Failed"}}, {"name": "Assinged reviewer is in co-authors", "description": "Verify that the system handles the case where chair tries to assign reviewer who is a co-author.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment failed", "status": "Failed"}}]}
{"usecase": {"name": "View Published Papers", "scenario": "Verify that a user can successfully view his/her own published papers.", "actors": "Users", "preconditions": "User is registered in the website", "steps": ["User enters his profile", "User goes on published papers"]}, "testcases": [{"name": "User views own published papers", "description": "Verify that a user can successfully view his/her own published papers..", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Published papers viewed successfully", "status": "Allowed"}}, {"name": "Conference chair views published papers", "description": "Verify that an conference chair can successfully view published papers", "input": {"conference_id": "A98765"}, "expected": {"outcome": "Published papers viewed successfully", "access": "Allowed"}}, {"name": "User views reviews on his submitted paper", "description": "Verify that a user head can successfully view the reviews on his paper.", "input": {"paper_id": "D45678"}, "expected": {"outcome": "Reviews viewed successfully", "access": "Allowed"}}, {"name": "Invalid user ID", "description": "Verify that the system handles the case where an invalid user ID is provided for published papers viewing.", "input": {"user_id": "InvalidID"}, "expected": {"outcome": "Published paper viewing failed", "access": "Denied"}}]}
{"usecase": {"name": "Search and Book", "scenario": "Guest searches with appropriate filters, selects a property, adds a payment method, adds meals if meal option is on for that property, negotiates (optional), makes payment, and completes the booking.", "actors": "Guest, Host", "preconditions": "For booking, Guest is registered in the system", "steps": ["Guest performs a search with appropriate filters", "Guest selects a property from the search results", "Guest adds a payment method", "If meal option is on for the property, guest adds meals (optional)", "Guest negotiates with the host (optional)", "Guest makes payment", "Booking is confirmed upon successful payment"]}, "testcases": [{"name": "Search and Book - Standard Booking", "description": "Verify that the guest can successfully search, select, and book a property without negotiation or additional meals.", "input": {"searchFilters": {"location": "City Center", "priceRange": "$100 - $200", "propertyType": "Apartment"}, "selectedProperty": "City View Apartment", "paymentMethod": "CreditCard123"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Search and Book - Negotiation and Meals", "description": "Verify that the guest can search, select, negotiate, add meals, and book a property.", "input": {"searchFilters": {"location": "Seaside", "priceRange": "$150 - $300", "propertyType": "Villa"}, "selectedProperty": "Beachfront Villa", "paymentMethod": "PayPal456", "meals": [{"foodId": "B001", "count": 2}, {"foodId": "L002", "count": 1}, {"foodId": "D003", "count": 1}], "negotiation": {"proposedFare": 250}}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles the case where the guest provides an invalid payment method.", "input": {"searchFilters": {"location": "Downtown", "priceRange": "$80 - $120", "propertyType": "Studio"}, "selectedProperty": "Urban Studio", "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Invalid Payment Method"}}, {"name": "Property Not Available for Booking", "description": "Verify that the system handles the case where the selected property is not available for booking.", "input": {"searchFilters": {"location": "Mountain", "priceRange": "$200 - $400", "propertyType": "Cabin"}, "selectedProperty": "Mountain Retreat", "paymentMethod": "CreditCard789"}, "expected": {"outcome": "Booking failed", "status": "Property Not Available"}}, {"name": "Invalid Check-In Check-Out Date", "description": "Verify that the system handles the case where the guest enters an invalid check-in and Check-Out date.", "input": {"location": "Suburb", "checkInDate": "2024-01-20", "checkOutDate": "2024-01-15", "guests": 1}, "expected": {"outcome": "Search failed", "results": "No available accommodations"}}]}
{"usecase": {"name": "Negotiation", "scenario": "Guest starts a negotiation after selecting a property. Host may agree to the guest's proposal, propose another fare, or stick to the actual price. Guest may accept or reject the host's response.", "actors": "Guest, Host", "preconditions": "Guest and Host are registered in the system, Property is available for booking and selected by Guest", "steps": ["Guest selects a property for booking", "Guest initiates negotiation by proposing a fare", "Host receives negotiation proposal", "Host may agree, propose another fare, or stick to the actual price", "Guest accepts or rejects the host's response"]}, "testcases": [{"name": "Guest Initiates Negotiation", "description": "Verify that the guest can successfully initiate a negotiation after selecting a property by proposing a fare.", "input": {"selectedProperty": "Cosy Cabin", "systemsFare": 1000, "proposedFare": 950}, "expected": {"outcome": "Negotiation initiated", "status": "Pending Host response"}}, {"name": "Host Agrees to Guest's Proposal", "description": "Verify that the host can agree to the guest's proposed fare during the negotiation.", "input": {"negotiationID": "N12345", "response": "Agree"}, "expected": {"outcome": "Negotiation agreed", "status": "Confirmed"}}, {"name": "Host Proposes Another Fare", "description": "Verify that the host can propose another fare during the negotiation.", "input": {"negotiationID": "N12345", "response": "ProposeAnother", "systemsFare": 1000, "proposedFare": 950, "newFare": 980}, "expected": {"outcome": "Host proposes another fare", "status": "Pending Guest response"}}, {"name": "Host Sticks to Actual Price", "description": "Verify that the host can stick to the actual price during the negotiation.", "input": {"negotiationID": "N12345", "response": "StickToActual"}, "expected": {"outcome": "Host sticks to actual price", "status": "Pending guest response"}}, {"name": "Guest Accepts Host's Response", "description": "Verify that the guest can accept the host's response during the negotiation.", "input": {"negotiationID": "N12345", "response": "Accept"}, "expected": {"outcome": "Negotiation accepted", "status": "Confirmed"}}, {"name": "Guest Rejects Host's Response", "description": "Verify that the guest can reject the host's response during the negotiation.", "input": {"negotiationID": "N12345", "response": "Reject"}, "expected": {"outcome": "Negotiation rejected", "status": "Rejected"}}, {"name": "Invalid Negotiation Proposal", "description": "Verify that the system handles the case where the guest provides an invalid negotiation proposal.", "input": {"selectedProperty": "Modern Loft", "proposedFare": -60}, "expected": {"outcome": "Negotiation failed", "status": "Invalid proposal"}}]}
{"usecase": {"name": "Meal Options", "scenario": "Guest, after selecting a property, chooses meals for breakfast, lunch, and/or dinner. The selection can be empty. After selection, the system calculates the total meal price and adds it to the total amount to pay.", "actors": "Guest, System", "preconditions": "Guest is registered in the system, Property is selected for booking", "steps": ["Guest selects a property for booking", "Guest chooses meals for breakfast, lunch, and/or dinner (optional)", "System calculates the total meal price", "System adds the total meal price to the total amount to pay"]}, "testcases": [{"name": "Select Meals for All Three Times", "description": "Verify that the guest can select meals for breakfast, lunch, and dinner, and the system calculates the total meal price correctly.", "input": {"selectedProperty": "Charming Cottage", "selectedMeals": {"breakfast": [{"foodId": 1, "count": 2}], "lunch": [{"foodId": 1, "count": 2}], "dinner": [{"foodId": 1, "count": 2}]}}, "expected": {"outcome": "Meals selected successfully", "totalMealPrice": 60, "totalAmountToPay": "Property cost + Total Meal Price"}}, {"name": "Select Meals for Breakfast Only", "description": "Verify that the guest can select meals for breakfast only, and the system calculates the total meal price correctly.", "input": {"selectedProperty": "Rustic Cabin", "selectedMeals": {"breakfast": [{"foodId": 1, "count": 2}]}}, "expected": {"outcome": "Meals selected successfully", "totalMealPrice": 15, "totalAmountToPay": "Property cost + Total Meal Price"}}, {"name": "Select No Meals", "description": "Verify that the guest can choose not to select any meals, and the system adjusts the total amount to pay accordingly.", "input": {"selectedProperty": "Seaside Villa", "selectedMeals": {}}, "expected": {"outcome": "No meals selected", "totalMealPrice": 0, "totalAmountToPay": "Property cost"}}, {"name": "Invalid Meal Selection", "description": "Verify that the system handles the case where the guest provides an invalid meal selection.", "input": {"selectedProperty": "Urban Loft", "selectedMeals": {"lunch": [{"foodId": 1, "count": -2}]}}, "expected": {"outcome": "Meal selection failed", "status": "Invalid selection"}}]}
{"usecase": {"name": "Paying Guest Booking", "scenario": "Guest searches for and selects a property that allows paying guest. If auto book is on for that property, the guest makes a payment, and the booking is confirmed. If auto book is off, the host can accept or reject the booking. If accepted, the payment is done, and the booking is confirmed.", "actors": "Guest, Host", "preconditions": "Guest and Host are registered in the system, Property allows paying guest", "steps": ["Guest searches for properties allowing paying guest", "Guest selects a property", "If auto book is on, the guest makes payment and booking is confirmed", "If auto book is off, the host can accept or reject the booking", "If accepted, payment is done, and the booking is confirmed"]}, "testcases": [{"name": "Auto Book Enabled - Payment Successful", "description": "Verify that the guest can successfully book a property with auto book enabled and the payment is successful.", "input": {"selectedProperty": "City View Apartment", "autoBook": true, "paymentMethod": "CreditCard123"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Auto Book Enabled - Payment Failed", "description": "Verify that the system handles the case where the guest cannot make a payment with auto book enabled.", "input": {"selectedProperty": "Beachfront Villa", "autoBook": true, "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Payment Failed"}}, {"name": "Auto Book Disabled - Host Accepts", "description": "Verify that the host can accept the booking when auto book is disabled.", "input": {"selectedProperty": "Mountain Retreat", "autoBook": false, "hostResponse": "Accept", "paymentMethod": "CreditCard567"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Auto Book Disabled - Host Rejects", "description": "Verify that the host can reject the booking when auto book is disabled.", "input": {"selectedProperty": "Lakeside Cabin", "autoBook": false, "hostResponse": "Reject"}, "expected": {"outcome": "Booking failed", "status": "Rejected"}}, {"name": "Auto Book Disabled - Invalid Payment Method", "description": "Verify that the system handles the case where the guest provides an invalid payment method when auto book is disabled.", "input": {"selectedProperty": "Rural Cottage", "autoBook": false, "hostResponse": "Accept", "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Payment Failed"}}]}
{"usecase": {"name": "Payment", "scenario": "Guest initiates payment for a booking only when the booking is in the 'Ready for Payment' state.", "actors": "Guest", "preconditions": "Guest is registered in the system, Booking is in 'Ready for Payment' state", "steps": ["Guest selects a booking in 'Ready for Payment' state", "Guest initiates the payment process", "System processes the payment", "Booking is confirmed upon successful payment"]}, "testcases": [{"name": "Payment for Booking in 'Ready for Payment' State", "description": "Verify that the guest can successfully make a payment for a booking in the 'Ready for Payment' state.", "input": {"bookingID": "B12345"}, "expected": {"outcome": "Payment successful", "status": "Confirmed"}}, {"name": "Invalid Booking ID", "description": "Verify that the system handles the case where the guest provides an invalid booking ID.", "input": {"bookingID": "InvalidBookingID"}, "expected": {"outcome": "Payment failed", "status": "Invalid Booking ID"}}, {"name": "Booking Not in 'Ready for Payment' State", "description": "Verify that the system prevents payment for a booking that is not in the 'Ready for Payment' state.", "input": {"bookingID": "B67890"}, "expected": {"outcome": "Payment failed", "status": "Not Ready for Payment"}}]}
{"usecase": {"name": "Property Registration", "scenario": "Host registers a property by providing photos and other mandatory fields. If the host turns on the meal option, they have to add meals for breakfast with names, photos, and prices. If the host allows paying guests, they have to add a description of the meal and the price.", "actors": "Host", "preconditions": "Host is registered in the system", "steps": ["Host initiates property registration", "Host provides mandatory property details such as name, location, type, and photos", "If meal option is turned on, host adds meals for breakfast with names, photos, and prices", "If allowing paying guests, host adds a description of the meal and the price", "Host completes the property registration"]}, "testcases": [{"name": "Basic Property Registration", "description": "Verify that the host can successfully register a property with mandatory details and photos.", "input": {"propertyDetails": {"name": "City View Apartment", "location": "Downtown", "type": "Apartment", "photos": ["photo1.jpg", "photo2.jpg"]}, "mealOption": false, "allowPayingGuest": false}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Property Registration with Meals", "description": "Verify that the host can register a property with meals for breakfast when the meal option is turned on.", "input": {"propertyDetails": {"name": "Seaside Villa", "location": "Beachfront", "type": "Villa", "photos": ["photo3.jpg", "photo4.jpg"]}, "mealOption": true, "meals": {"breakfast": [{"name": "Healthy Start", "photo": "healthy_start.jpg", "price": 20}], "dinner": [{"name": "Healthy Start", "photo": "healthy_start.jpg", "price": 20}]}, "allowPayingGuest": false}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Property Registration with Paying Guest Option", "description": "Verify that the host can register a property with a description of the meal and the price when allowing paying guests.", "input": {"propertyDetails": {"name": "Mountain Retreat", "location": "Mountain", "type": "Cabin", "photos": ["photo5.jpg", "photo6.jpg"]}, "mealOption": true, "meals": [{"name": "Hearty Breakfast", "photo": "hearty_breakfast.jpg", "price": 18}], "allowPayingGuest": true, "payingGuestDetails": {"mealDescription": "A delightful breakfast with a variety of options", "mealPrice": 25}}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Missing Mandatory Fields", "description": "Verify that the system handles the case where the host tries to register a property with missing mandatory fields.", "input": {"propertyDetails": {"name": "Incomplete Villa", "location": "Incomplete Location"}, "mealOption": false, "allowPayingGuest": false}, "expected": {"outcome": "Property registration failed", "status": "Missing Mandatory Fields"}}]}
{"usecase": {"name": "Student Registration", "scenario": "Student is registered in the oncampus system", "actors": "Admin", "preconditions": "Student is enrolled in the university and admin is logged in", "steps": ["Admin enters student information", "Admin submits the registration"]}, "testcases": [{"name": "Valid Student Information", "description": "Verify that the admin can successfully register a student with valid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Gaming Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Invalid Student Information", "description": "Verify that the system handles the case where the admin tries to register a student with invalid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Gaming Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration failed.Same id already exists", "status": "Rejected"}}, {"name": "Invalid Student Information - invalid club role", "description": "Verify that the system handles the case where the admin tries to register a student with invalid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Not Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration failed.Invalid club role", "status": "Rejected"}}]}
{"usecase": {"name": "Club Creation", "scenario": "A club is created in the oncampus system.", "actors": "Admin", "preconditions": "There is not a club with the same name already and Admin is logged in", "steps": ["Admin enters club information", "Admin submits the club information"]}, "testcases": [{"name": "Valid Club Information", "description": "Verify that the admin can successfully create a club with valid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "PRESIDENT", "email": "1905020@cse.buet.ac.bd"}, {"role": "VICE_PRESIDENT", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation successful", "status": "Approved"}}, {"name": "Invalid Club Information", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Debating Club", "members": [{"role": "PRESIDENT", "email": "1905020@cse.buet.ac.bd"}, {"role": "VICE_PRESIDENT", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Same club name already exists", "status": "Rejected"}}, {"name": "Invalid Club Information - invalid member ", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "NotARole", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Invalid member role", "status": "Rejected"}}, {"name": "Invalid Club Information - invalid id ", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "PRESIDENT", "email": "-23@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Invalid member id", "status": "Rejected"}}]}
{"usecase": {"name": "Create a post", "scenario": "User creates a post", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters post information", "User submits post"]}, "testcases": [{"name": "Valid Post Information", "description": "User enters valid post information", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Valid Post Information - With Poll", "description": "User enters valid post information with poll", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": true, "options": ["option1", "option2"], "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Invalid Post Information - Missing title", "description": "User enters invalid post information", "input": {"post": {"content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is not created - Missing title", "status": "Rejected"}}]}
{"usecase": {"name": "View a Single Post", "description": "User attempts to view a single post", "actor": "User", "precondition": "User is logged in and user has access to the post", "steps": ["User Clicks on a post"]}, "testcases": [{"name": "Valid Post Fetch Request", "description": "User requests for a post with valid post id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post viewed successfully", "status": "Approved"}}, {"name": "Invalid Post Fetch Request", "description": "User requests for a post with invalid post id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post not found", "access": "Denied"}}, {"name": "Unauthorized Post Fetch Request", "description": "User requests for a post for which user does not have access", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User does not have access to the post", "access": "Denied"}}]}
{"usecase": {"name": "View All General Post", "description": "User attempts to view all general posts", "actor": "User", "precondition": "User is logged in and user has access to the general posts", "steps": ["User Clicks on the General Posts Tab"]}, "testcases": [{"name": "Valid General Post Fetch Request", "description": "User requests for all general posts", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all general posts", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User does not have access to the general posts", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing general posts", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view general posts", "access": "Denied"}}]}
{"usecase": {"name": "Create an Event", "scenario": "User creates an event", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters event information", "User submits the event"]}, "testcases": [{"name": "Valid Event Information - RAG Concert", "description": "User enters valid Event information", "input": {"event": {"title": "RAG Concert", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "host": "Interval 18", "location": "BUET ECE cafeteria", "category": "seminar", "type": "Offline", "description": "There will be a Concert on ......", "division": "forum", "subDivision": "General", "bands": [{"name": "Band 1", "time": "7PM"}, {"name": "Band 2", "time": "8PM"}], "restrictions": ["Gates Closed at 7pm.After that only BUETIAN and ALUMNI will be allowed.ID card/Teams/BIIS will be checked", "Guests not allowed after 7pm", "No smoking/vaping allowed in open", "No bikes/cars allowed"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Valid Event Information - Seminar", "description": "User enters valid Event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "category": "seminar", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "files": ["file1", "file2"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Invalid Event Information - Missing title", "description": "User enters invalid event information", "input": {"event": {"startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing title", "status": "Rejected"}}, {"name": "Invalid Event Information - Missing location", "description": "User enters invalid event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing location", "status": "Rejected"}}]}
{"usecase": {"name": "View a Single Event", "description": "User attempts to view a single Event", "actor": "User", "precondition": "User is logged in and user has access to the Event", "steps": ["User Clicks on a event"]}, "testcases": [{"name": "Valid Event Fetch Request", "description": "User requests for a Event with valid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event viewed successfully", "status": "Approved"}}, {"name": "Invalid Event Fetch Request", "description": "User requests for a Event with invalid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event not found", "access": "Denied"}}, {"name": "Unauthorized Event Fetch Request", "description": "User requests for a Event for which user does not have access", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User does not have access to the Event", "access": "Denied"}}]}
{"usecase": {"name": "View All Events", "description": "User attempts to view all Events", "actor": "User", "precondition": "User is logged in and user has access to the Events", "steps": ["User Clicks on the All Events Tab"]}, "testcases": [{"name": "Valid All Event Fetch Request", "description": "User requests for all Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all Events", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view Events", "access": "Denied"}}]}
{"usecase": {"name": "View Saved Events", "description": "User attempts to view his saved Events", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on My Saved Events Tab"]}, "testcases": [{"name": "Valid Saved Events Fetch Request", "description": "User requests for saved Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all of his saved Events", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User only views Events he is not banned from viewing", "access": "Denied"}}]}
{"usecase": {"name": "View user profile", "description": "User attempts to view a user profile", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on a user profile"]}, "testcases": [{"name": "Valid User Profle Fetch Request", "description": "User requests for a User Profle with valid User id", "input": {"params": {"id": "1905010@cse.buet.ac.bd"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile viewed successfully", "status": "Approved"}}, {"name": "Invalid User Profile Fetch Request", "description": "User requests for a User Profile with invalid User id", "input": {"params": {"id": "not_a_valid_id"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile not found", "access": "Denied"}}, {"name": "Invalid User Profile Fetch Request - Invalid Token", "description": "User requests for a User Profile with invalid token", "input": {"params": {"id": "123"}, "cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain user profiles", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view this user profile", "access": "Denied"}}]}
{"usecase": {"name": "Flight Route Selection", "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel", "actors": "Users", "preconditions": "", "steps": ["Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for ", "System responds with a list of airlines avaiable as per their Selection"]}, "testcases": [{"name": "Selection of Routes with Available Flights", "description": "Verify that the route user has selected has airlines available ( direct or indirect) ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "17-02-23"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Selection of Routes with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available as per selected parametres ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "04-02-23"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}]}
{"usecase": {"name": "Airline Selection", "scenario": "Users select the airlines they prefer from the availability list", "actors": "Users", "preconditions": "Users have selected their endpoint airports, travel date, number of seats to be booked and a specific class", "steps": ["Users select their prefered airline from the list that pops up on selecting travel details", "Users can sort the list by categories like, cheapest flight, quickest flight, or by their takeoff time", "Users can also filter the list by categories like, cheapest flight or quickest flight", "System responds with a grid shaped airline layout for that flight"]}, "testcases": [{"name": "Selection of Airline with no sort or filter", "description": "Verify that the user can select an airline from the list ", "input": {"source": "DAC", "dest": "CGP", "Flight_ID": "BG88", "Flight_Name": "Bangladesh Biman", "Take_off_Date": "17-02-23", "Take_off_Time": "12:00:00", "Landing_Date": "17-02-23", "Landing_Time": "14:00:00", "via": "", "duration": "2 hours"}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with sort and filter", "description": "Verify that the system handles the case where flights are sorted and filtered based on expected parametres", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with sort on filter", "description": "Verify that the system handles the case where flights are sorted on the filtered results", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with filter on filter", "description": "Verify that the system handles the case where flights are filtered on the filtered results", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}]}
{"usecase": {"name": "Seat Selection", "scenario": "Users select the seat they prefer from the availability list", "actors": "Users", "preconditions": "Users have selected their choice of airline prefered and landed on the flight layout", "steps": ["Users select their prefered seat from the grid that pops up on selecting the airline", "Users can select exactly that many seats that they claimed to have required", "System redirects to payment page upon seat request submission"]}, "testcases": [{"name": "Selection of available seat ", "description": "Verify that the user can select available seats ", "input": {"1": "A3", "2": "H4"}, "expected": {"outcome": "System redirects to payment page", "status": "200"}}, {"name": "Selection of number of seats that are claimed exactly on putting request in first place", "description": "Verify that the system handles the case where user selects less seats or more than they demanded for in the first place", "input": {"1": "A3"}, "expected": {"outcome": "You have not chosen enough seats / You have chosen more seats", "status": "404"}}]}
{"usecase": {"name": "Payment", "scenario": "Users pay for the flight they are going to board", "actors": "Users", "preconditions": "Users have booked seats in the airlines they prefered", "steps": ["Users book their prefered seat from the layout and system redirects to payment page", "System calculates the amount that has to be paid for the seat", "Users make the payment", "System updates the payment status of the user"]}, "testcases": [{"name": "Valid Payment", "description": "Verify that the user can successfully make a valid payment for the booked seat", "input": {"systemCalculatedFee": 200, "paymentAmount": 200}, "expected": {"outcome": "Payment successful", "status": "200"}}, {"name": "Zero Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount of zero.", "input": {"systemCalculatedFee": 100, "paymentAmount": 0}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount less than the calculated fee.", "input": {"systemCalculatedFee": 100, "paymentAmount": 50}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Overpayment", "description": "Verify that the system handles the case where the user tries to make an overpayment.", "input": {"systemCalculatedFee": 100, "paymentAmount": 250}, "expected": {"outcome": "Payment failed", "status": "404"}}]}
{"usecase": {"name": "Flight Review Submission System", "scenario": "Users can submit reviews for their flight experiences ", "actors": "Users", "preconditions": "Users have booked and completed a flight.", "steps": ["Users submit reviews for their flights, providing ratings and optional comments.", "System responds with a valid response"]}, "testcases": [{"name": "Submit a Review", "description": "Users can submit reviews for their recent flights.", "input": {"userId": "123456", "ticketId": "789012", "rating": 4.5, "comment": "Great experience! The flight was on time, and the service was excellent.", "timestamp": "2024-02-04T12:30:00Z"}, "expected": {"outcome": "Review submitted successfully", "status": "201"}}]}
{"usecase": {"name": "Flight Review Viewing System", "scenario": "Users can view reviews for specific flights ", "actors": "Users", "preconditions": "", "steps": ["Users search reviews for specific flight", "System responds with a list fo available reviews"]}, "testcases": [{"name": "View Reviews for a Ticket", "description": "Users can view reviews submitted for a specific flight", "input": {"Flight_Name": "Bangladesh Biman"}, "expected": {"outcome": "List of reviews displayed", "status": "200"}}]}
{"usecase": {"name": "Flight Review Editing System", "scenario": "Users can edit reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users edit reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Edit Reviews for a Flight", "description": "Users can edit reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012", "rating": 4.7, "comment": "Updated comment here!", "timestamp": "2024-02-04T14:00:00Z"}, "expected": {"outcome": "Review edited successfully", "status": "200"}}]}
{"usecase": {"name": "Flight Review Deletion", "scenario": "Users can delete reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users delete reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Delete Reviews for a Flight", "description": "Users can delete reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012"}, "expected": {"outcome": "Review deleted successfully", "status": "204"}}]}
{"usecase": {"name": "Profile Creation", "scenario": "User creates an account on several social media marketing platform.", "actors": "User, Entrepreneur", "preconditions": "User is not already registered on the platform and has a valid email/phone number.", "steps": ["User provides necessary information for account creation on the platform", "User verifies email/phone number", "User sets up account details (username, password, etc.)"]}, "testcases": [{"name": "Valid Account Creation", "description": "Verify that a user can successfully create an account.", "input": {"username": "john_doe", "email": "john@example.com", "password": "secure_password"}, "expected": {"outcome": "Account created successfully", "status": "Active"}}, {"name": "Invalid Email Verification", "description": "Verify that the system handles the case where the user provides an invalid email for verification.", "input": {"username": "invalid_user", "email": "invalid_email", "password": "weak_password"}, "expected": {"outcome": "Account creation failed", "status": "Inactive"}}]}
{"usecase": {"title": "User Account Creation", "description": "A consumer creates an account on the platform using a valid email and phone number.", "actors": ["Consumer"], "preconditions": ["The platform is accessible.", "The consumer is on the account creation page."], "steps": ["Consumer enters valid email address and phone number.", "Consumer sets a secure password.", "Consumer agrees to terms and conditions.", "Consumer submits the registration form."]}, "testcases": [{"name": "ValidUserAccountCreation", "description": "Test the successful creation of a user account using valid email, phone number, and a secure password.", "input": {"email": "user@example.com", "phone": "1234567890", "password": "SecurePass123"}, "expected": {"success": true, "message": "User account is created successfully. Consumer is redirected to the logged-in state."}}, {"name": "DuplicateEmail", "description": "Test if the system handles a scenario where a user tries to create an account with an email that already exists in the system.", "input": {"email": "existing_user@example.com", "phone": "9876543210", "password": "NewPass456"}, "expected": {"success": false, "message": "System displays an error message indicating that the email is already registered. User account is not created."}}, {"name": "MissingPhoneNumber", "description": "Test if the system handles a scenario where a user tries to create an account without providing a phone number.", "input": {"email": "user@example.com", "password": "PassWithoutPhone"}, "expected": {"success": false, "message": "System displays an error message indicating that the phone number is required. User account is not created."}}, {"name": "TermsAndConditionsAgreement", "description": "Test if the system requires users to agree to terms and conditions during account creation.", "input": {"email": "user@example.com", "phone": "7890123456", "password": "StrongPass789", "agreeToTerms": false}, "expected": {"success": false, "message": "System displays an error message indicating that terms and conditions must be agreed to. User account is not created."}}]}
{"usecase": {"name": "Content Creation and Posting", "scenario": "User creates content and posts it on selected social media platforms.", "actors": "User", "preconditions": "User is logged in and has active social media accounts", "steps": ["User creates promotional content (text, image, video, etc.)", "User specifies the product/service to be promoted and target audience", "User schedules the content for posting (optional)", "User selects social media platforms for posting", "User posts the content"]}, "testcases": [{"name": "Valid Content Posting", "description": "Verify that a user can successfully create and post content on selected social media platforms.", "input": {"content": "Check out our latest product!", "selectedPlatforms": ["Facebook", "Twitter", "Instagram", "LinkedIn"], "schedule": "Wednesday, 10:00 AM"}, "expected": {"outcome": "Content posted successfully", "status": "Published"}}, {"name": "Invalid Content Posting", "description": "Verify that the system handles the case where the user tries to post invalid content or selects unsupported platforms.", "input": {"content": "invalid_content", "selectedPlatforms": ["WhatsApp"], "schedule": null}, "expected": {"outcome": "Content posting failed", "status": "Not Published"}}]}
{"usecase": {"name": "Content Analytics", "scenario": "User views analytics for their posted content on social media platforms.", "actors": "User", "preconditions": "User is logged in and has posted content on selected social media platforms", "steps": ["User navigates to the analytics section", "User selects a specific content or time range", "User views analytics data for engagement, reach, and interactions"]}, "testcases": [{"name": "Content Analytics", "description": "Verify that a user can successfully view analytics for their posted content.", "input": {"selectedContent": "Post123", "timeRange": "Last 7 days"}, "expected": {"outcome": "Content analytics retrieved successfully", "metrics": {"engagement": 1500, "reach": 5000, "interactions": 200}}}, {"name": "Invalid Content Selection", "description": "Verify that the system handles the case where the user selects invalid or non-existent content for analytics.", "input": {"selectedContent": "InvalidPost", "timeRange": "Last 30 days"}, "expected": {"outcome": "Content analytics retrieval failed", "error": "Invalid content selection"}}]}
{"usecase": {"name": "Profile Analytics", "scenario": "User views analytics for their social media profiles connected to the platform.", "actors": "User", "preconditions": "User is logged in and has connected social media accounts", "steps": ["User navigates to the profile analytics section", "User selects a specific social media profile", "User views analytics data for followers, engagement, and growth"]}, "testcases": [{"name": "Profile Analytics", "description": "Verify that a user can successfully view analytics for their connected social media profile.", "input": {"selectedProfile": "Facebook", "timeRange": "Last month"}, "expected": {"outcome": "Profile analytics retrieved successfully", "metrics": {"followers": 10000, "engagementRate": 5.8, "growth": 500}}}, {"name": "Invalid Profile Selection", "description": "Verify that the system handles the case where the user selects an invalid or non-existent social media profile for analytics.", "input": {"selectedProfile": "InvalidProfile", "timeRange": "Last week"}, "expected": {"outcome": "Profile analytics retrieval failed", "error": "Invalid profile selection"}}]}
{"usecase": {"name": "Community Communication", "scenario": "Users within the community (sellers and buyers of similar products) communicate and share information.", "actors": "Seller, Buyer", "preconditions": "Users are logged in and have joined the relevant community", "steps": ["User navigates to the community section", "User selects a specific community related to their product niche", "User posts a message, question, or information within the community", "Other users within the community can view and respond to the post"]}, "testcases": [{"name": "Valid Community Communication", "description": "Verify that users can successfully communicate within the community.", "input": {"selectedCommunity": "Electronics Sellers", "postContent": "Has anyone tried the new XYZ product? Share your experiences!", "responses": ["Yes, I've tried it. It works great!", "No, but I'm interested in learning more.", "I have a similar product, let's collaborate."]}, "expected": {"outcome": "Community communication successful", "interactionCount": 3}}, {"name": "Invalid Community Selection", "description": "Verify that the system handles the case where a user tries to communicate in an invalid or non-existent community.", "input": {"selectedCommunity": "InvalidCommunity", "postContent": "This is an invalid community post."}, "expected": {"outcome": "Community communication failed", "error": "Invalid community selection"}}, {"name": "Empty Post", "description": "Verify that the system handles the case where a user tries to post an empty message within the community.", "input": {"selectedCommunity": "Fashion Enthusiasts", "postContent": ""}, "expected": {"outcome": "Community communication failed", "error": "Empty post content"}}]}
{"usecase": {"name": "Project Showcase", "scenario": "Users can showcase their created projects on our platform through this feature.", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic project details", "User selects the appropriate tags for the post", "User decides whether he/she wants to make the post public/private", "User decides whether he/she wants to make the post it on marketplace", "User adds different types of blocks to the post with necessary details"]}, "testcases": [{"name": "Valid project details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true, "marketplace": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Project Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Portfolio Showcase", "description": "Verify that the public posts are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}, {"name": "Marketplace Visibility", "description": "Verify that the public posts are available on marketplace", "input": {"marketplace": true}, "expected": {"outcome": "Post visible on marketplace", "status": "Success"}}]}
{"usecase": {"name": "Note Taker", "scenario": "Users can create,update and share their notes on our platform through this feature", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic notes details", "User selects the appropriate tags for the note", "User decides whether he/she wants to make the post public/private", "User writes note in markdown"]}, "testcases": [{"name": "Valid note details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Note Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Publicize Note", "description": "Verify that the public notes are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}]}
{"usecase": {"name": "Chatbot Setup", "scenario": "Users can choose different models that they want to chat with", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters chatbot", "User adds documents", "User creates prompts to chat"]}, "testcases": [{"name": "Model not selected", "description": "Verify if the user has selected a model", "input": {"model_name": "gpt-3.5-turbo"}, "expected": {"outcome": "Model loaded", "status": "Success"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}, {"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}]}
{"usecase": {"name": "Profile Details", "scenario": "Users can set and edit their profile details which will be propagated to their portfolios", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters email and password", "User enters full/partial details", "User decides whether he/she wants to edit profile details", "User edits details"]}, "testcases": [{"name": "Empty e-mail/password", "description": "Verify if the user has provided email and password", "input": {"email": "user@gmail.com", "password": "xyz123456"}, "expected": {"outcome": "Successful account creation", "status": "Success"}}, {"name": "Invalid User Details", "description": "Verify that the system handles the case where a user tries to submit an invalid profile information", "input": {"github_link": 123}, "expected": {"outcome": "Invalid input", "status": "Error"}}]}
{"usecase": {"name": "Summarizer inference", "scenario": "Users prompt the plugin with the content they want to summarize", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters summarizer", "User creates prompt to summarize"]}, "testcases": [{"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}]}
{"usecase": {"name": "Paraphraser inference", "scenario": "Users prompt the plugin with the content they want to paraphrase", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters paraphraser", "User creates prompt to paraphrase"]}, "testcases": [{"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}]}
{"usecase": {"name": "Place Purchase Order Request", "scenario": "Distributor places a purchase order request to the warehouse via the central system", "actors": ["Warehouse", "Distributor", "Central System"], "precondition": "Distributor has enough balance to cover the purchase order value", "steps": [{"step": "(a) Distributor selects his required products for purchase order", "action": "Distributor selects products for the purchase order", "expected_result": "Distributor's selected products are ready for order placement"}, {"step": "(b) After confirmation from Distributor's end, purchase order is sent to the central system", "action": "Distributor confirms the selected products, and the purchase order is forwarded to the central system", "expected_result": "Purchase order is successfully transmitted to the central system"}, {"step": "(c) If requested products are available in the warehouse, confirmation is sent to the corresponding warehouse", "action": "Central system checks product availability and sends confirmation to the warehouse if products are available", "expected_result": "Warehouse receives confirmation and proceeds to check the load fill condition"}, {"step": "(d) Warehouse checks whether the goods in the purchase order satisfy the load fill condition. If the condition is satisfied, the purchase order is approved. If the condition is not satisfied, the purchase order is put on hold for combined orders", "action": "Warehouse evaluates load fill condition for the goods in the purchase order", "expected_result": "Purchase order is approved if load fill condition is satisfied; otherwise, it is put on hold for combined orders"}]}, "testcases": [{"request_body": {"purchase_order_request": {"distributor_id": "D123", "products": [{"product_id": "P001", "quantity": 100}, {"product_id": "P002", "quantity": 50}], "confirmation": true}}, "response_body": {"purchase_order_response": {"status": "success", "message": "Purchase order request successfully received and processed.", "order_details": {"order_id": "PO123", "status": "approved"}}}}, {"request_body": {"purchase_order_request": {"distributor_id": "D123", "products": [{"product_id": "P001", "quantity": -50}, {"product_id": "P002", "quantity": 30}], "confirmation": true}}, "response_body": {"purchase_order_response": {"status": "error", "message": "Invalid request. Quantity must be a positive integer.", "error_details": [{"field": "products[0].quantity", "error_message": "Quantity for product P001 must be a positive integer."}]}}}]}
{"usecase": {"name": "Purchase order to shipment", "description": "Warehouse confirms one or multiple incoming purchase orders, and the central system converts them to a shipment.", "actors": ["Warehouse", "Central System"], "steps": [{"step": "(a) Confirmation or hold status of purchase order is forwarded to central system", "action": "Warehouse forwards confirmation or hold status of the purchase order to the central system", "expected_result": "Central system receives and processes the confirmation or hold status"}, {"step": "(b) Central system checks load fill of pending purchase orders whether they can be combined and processes confirmed purchase orders to create a shipment", "action": "Central system checks load fill of pending purchase orders, combines eligible orders, and processes confirmed purchase orders to create a shipment", "expected_result": "Shipment is created with the combined purchase orders"}, {"step": "(c) Shipments are forwarded to corresponding transport agencies for vehicle confirmation", "action": "Shipment is forwarded to corresponding transport agencies for vehicle confirmation", "expected_result": "Transport agencies confirm the availability of vehicles for the shipments"}]}, "testcases": [{"request_body": {"purchase_orders": [{"order_id": "PO123", "status": "confirmed"}, {"order_id": "PO124", "status": "confirmed"}, {"order_id": "PO125", "status": "on_hold"}]}, "response_body": {"shipment": {"shipment_id": "SH123", "status": "created", "combined_orders": ["PO123", "PO124"]}, "transport_confirmation": {"status": "pending", "details": "Shipment SH123 forwarded to transport agencies for vehicle confirmation"}}}, {"request_body": {"purchase_orders": [{"order_id": "PO123", "status": "confirmed"}, {"order_id": "PO124"}, {"status": "on_hold"}]}, "response_body": {"error": {"code": "400", "message": "Invalid request. Some purchase orders are on hold, and cannot be processed for shipment creation.", "details": [{"order_id": "PO125", "error_message": "Purchase order on hold, cannot be included in the shipment."}]}}}]}
{"usecase": {"name": "Load a shipment to vehicle", "description": "List of products in a shipment is provided to the person in charge. After successful load of all products in a shipment, transport acknowledges that shipment is en route.", "actors": ["Warehouse", "Transport"], "precondition": "A valid shipment with products in stock for warehouse", "steps": [{"step": "(a) Warehouse in-charge receives a list of products to be loaded", "action": "receive_list_of_products", "actor": "Warehouse"}, {"step": "(b) Product status is updated one by one while loading a vehicle", "action": "update_product_status", "actor": "Warehouse"}, {"step": "(c) After loading of shipment, transport acknowledges that he has received the products without any issue", "action": "acknowledge_shipment_en_route", "actor": "Transport"}]}, "testcases": [{"request_body": {"action": "load_shipment_to_vehicle", "shipment_id": "12345", "products": [{"product_id": "P001", "status": "loaded"}, {"product_id": "P002", "status": "loaded"}, {"product_id": "P003", "status": "loaded"}]}, "response_body": {"status": "success", "message": "Shipment successfully loaded to the vehicle. En route acknowledgment sent."}}, {"request_body": {"action": "load_shipment_to_vehicle", "shipment_id": "67890", "products": [{"product_id": "P004", "status": "loaded"}, {"product_id": "P005", "status": "not_in_stock"}, {"product_id": "P006", "status": "loaded"}]}, "response_body": {"status": "error", "message": "Failed to load shipment. Product with ID P005 is not in stock."}}]}
{"usecase": {"name": "Choose the best route for combined town", "description": "Central system has multiple pending purchase orders with tonnage less than loadfill quantity. It has to combine multiple orders to save transport cost.", "actors": ["Central system"], "precondition": "Purchase order contains weight less than loadfill", "steps": [{"step": "(a) Central system lists the destination towns and checks which two towns can be combined", "action": "list_destination_towns", "actor": "Central system"}, {"step": "(b) For each possible combination, it checks which pair incurs less amount of transportation bill", "action": "check_best_combination", "actor": "Central system"}]}, "testcases": [{"request_body": {"action": "choose_best_route", "purchase_orders": [{"order_id": "PO001", "weight": 500, "destination_town": "Town_A"}, {"order_id": "PO002", "weight": 300, "destination_town": "Town_B"}, {"order_id": "PO003", "weight": 200, "destination_town": "Town_C"}]}, "response_body": {"status": "success", "message": "Best route identified. Combined orders for transportation cost savings.", "combined_towns": ["Town_A", "Town_C"]}}, {"request_body": {"action": "choose_best_route", "purchase_orders": [{"order_id": "PO004", "weight": 700, "destination_town": "Town_D"}, {"order_id": "PO005", "weight": 600, "destination_town": "Town_E"}]}, "response_body": {"status": "error", "message": "Unable to find a valid combination. Individual orders exceed loadfill quantity."}}]}
{"usecase": {"name": "Generate sales report", "description": "Sales report can be generated based on various attributes like sales volume, revenue generated by brand or category", "actors": ["Central System", "Distributor"], "precondition": "Distributor has regularly updated its sales quantity and product stock", "steps": [{"step": "(a) Central system requests sales data from distributor", "action": "request_sales_data", "actor": "Central System"}, {"step": "(b) Distributor provides data to generate report", "action": "provide_sales_data", "actor": "Distributor"}, {"step": "(c) Central system generates report according to his preference", "action": "generate_report", "actor": "Central System"}]}, "testcases": [{"request_body": {"action": "generate_sales_report", "attributes": ["sales_volume", "revenue"], "preference": "by_brand", "time_period": "last_month"}, "response_body": {"status": "success", "message": "Sales report generated successfully.", "report_data": {"brandwise_data": {"Brand_A": {"sales_volume": 1500, "revenue": 50000}, "Brand_B": {"sales_volume": 1200, "revenue": 45000}}, "time_period": "last_month"}}}, {"request_body": {"action": "generate_sales_report", "attributes": ["sales_volume", "revenue"], "preference": "by_brand", "time_period": "specific_month", "month": "January"}, "response_body": {"status": "error", "message": "Sales data not available for the requested month.", "error_details": "Distributor does not have sales data for the month of January."}}]}
{"usecase": {"name": "Pet Adoption Process", "scenario": "A user browses through available pets for adoption, selects a pet, and submits an adoption application. The system reviews the application and approves or rejects it based on predefined criteria.", "actors": "Adopter (User), System, PetOwner", "preconditions": "The user is registered and logged into the system. There are pets available for adoption.", "steps": ["User browses available pets.", "User selects a pet and views detailed information.", "User submits an adoption application for the pet.", "System validates the application.", "PetOwner reviews and approves or rejects the application."]}, "testcases": [{"name": "Valid Adoption Application", "description": "Verify that the system accepts a valid adoption application.", "input": {"selectedPet": "Pet1", "applicationDetails": "User provided all necessary information."}, "expected": {"outcome": "Application accepted.", "status": "Pending Review"}}, {"name": "Invalid Adoption Application (Missing Information)", "description": "Verify that the system rejects an adoption application with missing information.", "input": {"selectedPet": "Pet2", "applicationDetails": "User missed some necessary information."}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "PetOwner Approval of Adoption Application", "description": "Verify that the PetOwner can successfully approve a valid adoption application.", "input": {"petOwnerApproval": true, "applicationId": "12345"}, "expected": {"outcome": "Application approved.", "status": "Approved"}}, {"name": "PetOwner Rejection of Adoption Application", "description": "Verify that the PetOwner can reject an adoption application.", "input": {"petOwnerApproval": false, "applicationId": "12345"}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Invalid Adoption Application (False Information)", "description": "Verify that the system handles the case where a user provides false information in the adoption application.", "input": {"selectedPet": "Pet3", "applicationDetails": "User provided false or misleading information."}, "expected": {"outcome": "Application failed.", "status": "Rejected"}}]}
{"usecase": {"name": "Donation Process", "scenario": "A user decides to donate to a cause or a specific pet's care. The user enters donation details and submits the donation. The system confirms the donation and updates the donation status.", "actors": "Donor (User), System", "preconditions": "The user is registered and logged into the system.", "steps": ["User selects a donation cause or a specific pet for donation.", "User enters donation amount and details.", "User submits the donation.", "System processes the donation and updates the donation status."]}, "testcases": [{"name": "Valid Donation Submission", "description": "Verify that the system accepts a valid donation.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 100, "method": "Mobile Banking"}, "expected": {"outcome": "Donation successful.", "status": "Received"}}, {"name": "Zero Donation Amount", "description": "Verify that the system handles the case where a user tries to donate a zero amount.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 0, "method": "Mobile Banking"}, "expected": {"outcome": "Donation failed.", "status": "Rejected"}}, {"name": "Donation to Non-Existent Cause", "description": "Verify that the system handles the case where a user tries to donate to a non-existent cause.", "input": {"selectedCause": "NonExistentCause", "donationAmount": 50}, "expected": {"outcome": "Donation failed.", "status": "Cause Not Found"}}, {"name": "Exceeding Donation Limit", "description": "Verify that the system handles the case where a user tries to donate more than the needed amount for a cause.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 15000}, "expected": {"outcome": "Donation failed.", "status": "Exceeded Needed Amount"}}, {"name": "Donation Confirmation", "description": "Verify that the user receives a confirmation after a successful donation.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 100}, "expected": {"outcome": "Donation confirmed.", "status": "Confirmed"}}]}
{"usecase": {"name": "Pet Profile Update", "scenario": "A pet owner or an admin updates the profile of a pet, including details like name, breed, health status, and other pertinent information.", "actors": "Pet Owner, System", "preconditions": "The pet is registered in the system, and the user has the necessary permissions to update the pet's profile.", "steps": ["User selects a pet to update.", "User edits pet details.", "User submits the updated pet profile.", "System validates and saves the updated profile."]}, "testcases": [{"name": "Valid Pet Profile Update", "description": "Verify that the system accepts a valid update to a pet's profile.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update successful.", "status": "Updated"}}, {"name": "Invalid Pet Profile Update (Missing Information)", "description": "Verify that the system rejects a profile update with missing information.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update failed.", "status": "Rejected"}}, {"name": "Unauthorized Profile Update Attempt", "description": "Verify that the system prevents unauthorized users from updating a pet's profile.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}, "userId": "User987"}, "expected": {"outcome": "Profile update failed.", "status": "Unauthorized"}}, {"name": "Update Non-Existent Pet Profile", "description": "Verify that the system handles the case where a user tries to update a non-existent pet's profile.", "input": {"petId": "NonExistentPet", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update failed.", "status": "Pet Not Found"}}]}
{"usecase": {"name": "Rescuer Application Process", "scenario": "A user applies to become a rescuer at the animal shelter. The system reviews the application and approves or rejects it based on predefined criteria.", "actors": "Applicant (User), System, Admin", "preconditions": "The user is registered and logged into the system.", "steps": ["User fills out the rescuer application form.", "User submits the application.", "System validates the application.", "Admin reviews and approves or rejects the application."]}, "testcases": [{"name": "Valid rescuer Application", "description": "Verify that the system accepts a valid rescuer application.", "input": {"applicationDetails": "User provided all necessary information."}, "expected": {"outcome": "Application accepted.", "status": "Pending Review"}}, {"name": "Incomplete rescuer Application", "description": "Verify that the system rejects an incomplete rescuer application.", "input": {"applicationDetails": "User missed some necessary information."}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Admin Approval of rescuer Application", "description": "Verify that the admin can successfully approve a valid rescuer application.", "input": {"adminApproval": true, "applicationId": "12345"}, "expected": {"outcome": "Application approved.", "status": "Approved"}}, {"name": "Admin Rejection of rescuer Application", "description": "Verify that the admin can reject a rescuer application.", "input": {"adminApproval": false, "applicationId": "12345"}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Invalid rescuer Application (False Information)", "description": "Verify that the system handles the case where a user provides false information in the rescuer application.", "input": {"applicationDetails": "User provided false or misleading information."}, "expected": {"outcome": "Application failed.", "status": "Rejected"}}]}
{"usecase": {"name": "Pet Health Record Management", "scenario": "A veterinarian updates the health records of pets after check-ups or treatments. The system stores and displays the updated health records.", "actors": "Veterinarian, System", "preconditions": "The pet is registered in the system, and the veterinarian is logged in and assigned to the pet.", "steps": ["Veterinarian selects a pet to update health records.", "Veterinarian enters the details of the check-up or treatment.", "Veterinarian submits the updated health records.", "System stores and confirms the update."]}, "testcases": [{"name": "Valid Health Record Update", "description": "Verify that the system accepts a valid update to a pet's health record.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update successful.", "status": "Updated"}}, {"name": "Incomplete Health Record Update", "description": "Verify that the system rejects an incomplete health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Rejected"}}, {"name": "Incomplete Health Record Update", "description": "Verify that the system rejects an incomplete health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2001-02-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Rejected"}}, {"name": "Unauthorized Veterinarian Attempt", "description": "Verify that the system prevents unauthorized veterinarians from updating a pet's health records.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}, "veterinarianId": "Vet987"}, "expected": {"outcome": "Health record update failed.", "status": "Unauthorized"}}, {"name": "Update Health Record for Non-Existent Pet", "description": "Verify that the system handles the case where a veterinarian tries to update the health record for a non-existent pet.", "input": {"petId": "NonExistentPet", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Pet Not Found"}}, {"name": "Health Record Update Confirmation", "description": "Verify that the veterinarian receives a confirmation after a successful health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record updated and confirmed.", "status": "Confirmed"}}]}
{"usecase": {"name": "User Registration", "scenario": "Farmers, SMEs, or Vendors register in Pushti.", "actors": "Farmers/SMEs/Vendors", "preconditions": "The individual is a Bangladeshi adult citizen and intends to use Pushti for agricultural business activities.", "steps": ["New user selects their account type (Farmer, SME, Vendor).", "If the user is a farmer, they also specify their farmer type.", "User selects their geographic location including division, district, upazila, and union.", "User provides personal and contact information including name, phone number, email, and address.", "User creates a password, confirms it, and sets up their account security.", "User reviews all provided information and submits the registration form."]}, "testcases": [{"name": "Valid Information Submission", "description": "Ensure the system successfully registers a user who provides all required and valid information for account creation.", "input": {"Name": "John Doe", "AccountType": "Farmer", "FarmerType": "Dairy", "Division": "Sylhet", "District": "Moulvibazar", "Upazilla": "Kamalganj", "Union": "Fulpur", "NID": 1234567890, "Phone": "01700000000", "Email": "djohn@gmail.com", "Address": "13/2 Fulpur, Kamalganj, Moulvibazar", "DOB": "01/01/1990", "Password": "123456", "ConfirmPassword": "123456"}, "expected": {"outcome": "Registration successful", "status": "Completed"}}, {"name": "Incomplete Information Submission", "description": "Test if the system appropriately rejects the registration when any required field is left empty or incomplete.", "input": {"Name": "John Doe", "AccountType": "Farmer", "FarmerType": "Dairy", "Division": "Sylhet", "District": "Moulvibazar", "Upazilla": "Kamalganj", "Union": "Fulpur", "NID": "", "Phone": "01700000000", "Email": "djohn@gmail.com", "Address": "13/2 Fulpur, Kamalganj, Moulvibazar", "DOB": "01/01/1990", "Password": "123456", "ConfirmPassword": "123456"}, "expected": {"outcome": "Registration failed", "status": "Incomplete information"}}, {"name": "Duplicate National ID Submission", "description": "Test if the system rejects a registration attempt when the provided National ID (NID) matches an existing user's NID in the system.", "input": {"Name": "Jane Smith", "AccountType": "SME", "Division": "Chittagong", "District": "Cox's Bazar", "Upazilla": "Teknaf", "Union": "Hnila", "NID": 1234567890, "Phone": "01710000000", "Email": "janesmith@gmail.com", "Address": "45/A Hnila, Teknaf, Cox's Bazar", "DOB": "02/02/1990", "Password": "654321", "ConfirmPassword": "654321"}, "expected": {"outcome": "Registration failed", "status": "Duplicate NID"}}, {"name": "Invalid Email Format Submission", "description": "Ensure the system denies registration when the email provided does not match standard email formatting.", "input": {"Name": "Alice Johnson", "AccountType": "Vendor", "Division": "Khulna", "District": "Satkhira", "Upazilla": "Shyamnagar", "Union": "Padmapukur", "NID": 9876543210, "Phone": "01720000000", "Email": "alice.johnsonatgmail.com", "Address": "98/B Padmapukur, Shyamnagar, Satkhira", "DOB": "03/03/1985", "Password": "789123", "ConfirmPassword": "789123"}, "expected": {"outcome": "Registration failed", "status": "Invalid email format"}}, {"name": "Password and Confirm Password Mismatch", "description": "Verify that the system prevents registration if the 'Password' and 'Confirm Password' fields do not match.", "input": {"Name": "Omar Faruk", "AccountType": "Farmer", "Division": "Barisal", "District": "Bhola", "Upazilla": "Borhanuddin", "Union": "Bapta", "NID": 4567891230, "Phone": "01730000000", "Email": "omarfaruk@example.com", "Address": "12/C Bapta, Borhanuddin, Bhola", "DOB": "04/04/1988", "Password": "123abc", "ConfirmPassword": "abc123"}, "expected": {"outcome": "Registration failed", "status": "Password fields mismatch"}}]}
{"usecase": {"name": "Loan Application", "scenario": "The scenario involves a Farmer or Small and Medium-sized Enterprise (SME) applying for a loan.", "actors": "Farmer or SME.", "preconditions": "The Farmer or SME is registered under an Agent.", "steps": ["The Farmer or SME logs into the system and submits a loan application.", "The system processes the loan application."]}, "testcases": [{"name": "Valid Loan Application", "description": "Verify that a Farmer or SME can successfully apply for a loan.", "input": {"min": 4000, "max": 5000, "description": "The requested loan is for the purchase of new cows."}, "expected": {"outcome": "The loan application is successful.", "loanStatus": "Pending"}}, {"name": "Loan Application with Empty Description", "description": "Verify that the system handles a loan application with an empty description appropriately.", "input": {"min": 4000, "max": 5000, "description": ""}, "expected": {"outcome": "The loan application failed", "status": "Empty description"}}, {"name": "Loan Application with Negative Loan Amount", "description": "Verify that the system handles a loan application with a negative loan amount appropriately.", "input": {"min": -4000, "max": 5000, "description": "The loan is needed for equipment purchase."}, "expected": {"outcome": "The loan application is rejected due to invalid input.", "status": "Negative loan amount"}}, {"name": "Loan Application with Special Characters in Description", "description": "Verify that the system handles a loan application with special characters in the description field appropriately.", "input": {"min": 4000, "max": 5000, "description": "Loan for @#$% project"}, "expected": {"outcome": "The loan application is rejected due to invalid input.", "status": "Special characters in description"}}]}
{"usecase": {"name": "Loan Approval Process", "scenario": "An agent reviews and makes a decision on loan applications submitted by registered farmers or SMEs.", "actors": "Agent", "preconditions": "A loan application has been submitted by a farmer or SME who is registered under the agent.", "steps": ["Agent accesses the system and reviews the list of pending loan requests.", "Agent evaluates the loan request considering the applicant's details and the requested amount.", "Based on the assessment and available budget, the agent either approves or rejects the loan."]}, "testcases": [{"name": "Successful Loan Approval", "description": "Test to confirm that an agent can approve a loan request when the requested amount is within the permissible limits and aligns with the applicant's profile.", "input": {"loan_id": 10, "approvedAmount": 5000}, "expected": {"outcome": "Loan approval successful", "status": "Approved"}}, {"name": "Loan Application Rejection", "description": "Evaluate the agent's ability to reject a loan application based on criteria such as insufficient documentation or unsatisfactory credit history.", "input": {"loan_id": 10}, "expected": {"outcome": "Loan rejection successful", "status": "Rejected"}}, {"name": "Loan Approval Budget Limitation", "description": "Assess the system's functionality to prevent loan approval if the requested amount exceeds the available budget.", "input": {"loan_id": 10, "approvedAmount": 50000}, "expected": {"outcome": "Loan approval failed", "status": "Rejected - Budget Limitation"}}]}
{"usecase": {"name": "Buy Request and Approval", "scenario": "An agent generates a buy request for products, which is then reviewed and approved or rejected by the farmer or SME.", "actors": "Agent, Farmer/SME", "preconditions": "The farmer or SME is registered under the agent and has products available for sale.", "steps": ["Agent assesses the available products and inputs their details along with the desired quantities.", "Agent generates and sends a buy request to the farmer or SME.", "Farmer or SME reviews the buy request and either approves or rejects it."]}, "testcases": [{"name": "Successful Buy Request Approval", "description": "Ensure that an agent can generate a valid buy request and that it can be successfully approved by the farmer or SME.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 10}]}, "expected": {"outcome": "Buy request approved", "status": "Approved"}}, {"name": "Rejected Buy Request", "description": "Test the functionality where a farmer or SME can reject a buy request generated by the agent.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 2}]}, "expected": {"outcome": "Buy request rejected", "status": "Rejected"}}, {"name": "Buy Request Exceeds Budget", "description": "Verify if the system appropriately handles scenarios where the total cost of the buy request exceeds the available budget of the agent.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 50}, {"product_id": 24, "name": "Beef", "quantity": 30}]}, "expected": {"outcome": "Buy request denied", "status": "Denied - Exceeds budget"}}]}
{"usecase": {"name": "Sell Request and Approval", "scenario": "An agent creates a sell request for products, which is then reviewed and either approved or rejected by the vendor or SME.", "actors": "Agent/Vendor/SME", "preconditions": "The vendor or SME is registered under the agent and is interested in purchasing products from the agent.", "steps": ["Agent compiles a list of items available for sale along with their quantities.", "Agent formally generates a sell request and sends it to the vendor or SME.", "Vendor or SME reviews the sell request and decides to approve or reject it."]}, "testcases": [{"name": "Successful Sell Request Approval", "description": "Confirm that an agent can generate a valid sell request and that it is successfully approved by the vendor or SME.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 10}]}, "expected": {"outcome": "Sell request approved", "status": "Completed"}}, {"name": "Rejected Sell Request", "description": "Evaluate if a vendor or SME can effectively reject a sell request generated by the agent.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 2}]}, "expected": {"outcome": "Sell request rejected", "status": "Rejected"}}, {"name": "Insufficient Inventory for Sell Request", "description": "Verify the system's response when the sell request contains a quantity that exceeds the agent's available inventory.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 100, "name": "Beef", "quantity": 200}]}, "expected": {"outcome": "Sell request denied", "status": "Denied - Insufficient inventory"}}]}
{"usecase": {"name": "New Product Addition Process", "scenario": "An administrative user adds a new product to the system's inventory.", "actors": "Admin", "preconditions": "Admin has the necessary privileges to add new products.", "steps": ["Admin logs into the system with appropriate credentials.", "Admin navigates to the product management section.", "Admin inputs the details of the new product and submits the information."]}, "testcases": [{"name": "Successful New Product Addition", "description": "Confirm that an admin can successfully add a new product to the system, provided that the product does not already exist in the inventory.", "input": {"productName": "Milk", "unitPrice": 50, "taxPercentage": 3}, "expected": {"outcome": "Product addition successful", "status": "Added"}}, {"name": "Duplicate Product Addition Prevention", "description": "Test the system's capability to prevent the addition of a product that already exists in the inventory to avoid duplication.", "input": {"productName": "Milk", "unitPrice": 50, "taxPercentage": 3}, "expected": {"outcome": "Product addition failed", "status": "Duplicate - Product already exists"}}, {"name": "Product Addition with Incomplete Details", "description": "Assess the system's response when attempting to add a new product with incomplete or missing details.", "input": {"productName": "Butter", "unitPrice": null, "taxPercentage": 5}, "expected": {"outcome": "Product addition failed", "status": "Failed - Incomplete product details"}}]}
{"usecase": {"name": "Buy Plant", "scenario": "A user wants to buy a plant from an online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user has access to the online plant store.", "The user is logged into their account."], "steps": ["The user navigates through the plant catalog to explore available plants.", "The user selects a specific plant they wish to purchase.", "The user adds the selected plant to their shopping cart.", "The user reviews the contents of their shopping cart, ensuring it includes the desired plant.", "The user proceeds to the checkout process.", "The user enters the required shipping information, such as address and contact details.", "The user selects a preferred payment method (e.g., credit card, bKash, cash on delivery).", "The user completes the purchase by confirming the order and making the payment.", "The user receives an order confirmation with details of the purchased plant and the transaction."]}, "testcases": [{"name": "Valid Plant Selection", "description": "Verify that a user can successfully select and buy a plant.", "input": {"selectedPlant": "RubyLime"}, "expected": {"outcome": "Order successful", "status": "Processing"}}, {"name": "Empty Cart Handling", "description": "Verify that the system handles the case where a user tries to submit an empty cart.", "input": {"selectedPlant": null}, "expected": {"outcome": "Order failed", "status": "Failed"}}, {"name": "Payment Authorization", "description": "Verify that the user's payment method is properly authorized.", "input": {"selectedPlant": "RubyLime", "paymentMethod": "bKash"}, "expected": {"outcome": "Payment authorized", "status": "Payment Authorized"}}, {"name": "Order Confirmation Email", "description": "Verify that the user receives an order confirmation email after completing the purchase.", "input": {"selectedPlant": "RubyLime", "paymentMethod": "bKash"}, "expected": {"outcome": "User receives an order confirmation email", "status": "Processing"}}]}
{"usecase": {"name": "Add Plant", "scenario": "An admin wants to add a new plant to the online plant store.", "actors": ["Admin", "Plant Store"], "preconditions": ["The admin has access to the admin panel of the online plant store.", "The admin is logged into their admin account."], "steps": ["The admin navigates to the plant management section in the admin panel.", "The admin selects the option to add a new plant.", "The admin provides details of the new plant, such as name, description, price, and stock quantity.", "The admin uploads images of the plant for display in the store.", "The admin specifies the category or tags associated with the plant for better organization.", "The admin reviews the entered information to ensure accuracy.", "The admin submits the new plant details for addition to the plant catalog.", "The admin receives a confirmation message indicating that the plant has been successfully added."]}, "testcases": [{"name": "Valid Plant Addition", "description": "Verify that an admin can successfully add a new plant to the catalog.", "input": {"newPlantDetails": {"name": "Sun Cactus", "description": "Beautiful cactus with vibrant colors.", "price": 19.99, "stock": 50, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Plant addition successful", "status": "Confirmed"}}, {"name": "Incomplete Plant Details", "description": "Verify that the system handles the case where an admin tries to add a plant with incomplete details.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Cactus with no specified price and stock."}}, "expected": {"outcome": "Plant addition failed", "status": "Failed"}}, {"name": "Image Upload", "description": "Verify that the admin can successfully upload images of the new plant.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Resilient and drought-resistant, Moon Cactus thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "stock": 30, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Image upload successful", "status": "Images Uploaded"}}, {"name": "Confirmation Message", "description": "Verify that the admin receives a confirmation message after adding the new plant.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Resilient and drought-resistant, Moon Cactus thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "stock": 40, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Admin receives confirmation message", "status": "Confirmed"}}]}
{"usecase": {"name": "Sell Plant", "scenario": "A user wants to sell a plant through the online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user has an active account on the online plant store.", "The user is logged into their account."], "steps": ["The user navigates to the 'Sell Plant' section in their profile.", "The user provides details of the plant they want to sell, such as name, description, and price.", "The user uploads images of the plant for display in the store.", "The user specifies the category associated with the plant for better organization.", "The user reviews the entered information to ensure accuracy.", "The user submits the plant details for listing in the online store.", "The user receives a confirmation message indicating that the plant has been successfully listed for approval from admin."]}, "testcases": [{"name": "Valid Plant Listing for approval", "description": "Verify that a user can successfully initiate a plant sale request.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 14.99, "images": ["succulent_image1.jpg", "succulent_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Indoor"]}}, "expected": {"outcome": "Plant request successful", "status": "Listed"}}, {"name": "Incomplete Plant Details", "description": "Verify that the system handles the case where a user tries to request a plant with incomplete details.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Bonsai with no specified price."}}, "expected": {"outcome": "Plant request failed", "status": "Failed"}}, {"name": "Image Upload", "description": "Verify that the user can successfully upload images of the plant for sale.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "images": ["bonsai_image1.jpg", "bonsai_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Outdoor"]}}, "expected": {"outcome": "Image upload successful", "status": "Images Uploaded"}}, {"name": "Confirmation Message", "description": "Verify that the user receives a confirmation message after listing the plant for sale.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "images": ["bonsai_image1.jpg", "bonsai_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Indoor"]}}, "expected": {"outcome": "User receives confirmation message", "status": "Listed for approval"}}]}
{"usecase": {"name": "Approve Plant Selling Request", "scenario": "An admin needs to review and approve a user's request to sell a plant on the online plant store.", "actors": ["Admin", "Plant Store"], "preconditions": ["The admin has access to the admin panel of the online plant store.", "A user has submitted a request to sell a plant."], "steps": ["The admin logs into the admin panel.", "The admin navigates to the 'Pending Requests' section.", "The admin views details of the pending plant selling request, including plant information and user details.", "The admin reviews the uploaded images of the plant.", "The admin evaluates the completeness and accuracy of the information provided by the user.", "The admin decides whether to approve or reject the plant selling request.", "If approved, the plant is listed in the online store; if rejected, the user is notified of the decision."]}, "testcases": [{"name": "Approve Plant Selling Request", "description": "Verify that the admin can successfully approve a user's request to sell a plant.", "input": {"requestDetails": {"user": "john_doe@example.com", "plantDetails": {"name": "Spider Plant", "description": "Spider plant with hanging clusters of baby plants.", "price": 12.99, "images": ["spider_plant_image1.jpg", "spider_plant_image2.jpg"], "category": "Indoor", "tags": ["Spider Plant", "Hanging", "Indoor"]}}}, "expected": {"outcome": "Request approval successful", "status": "Approved"}}, {"name": "Reject Plant Selling Request", "description": "Verify that the admin can successfully reject a user's request to sell a plant.", "input": {"requestDetails": {"user": "jane_smith@example.com", "plantDetails": {"name": "Bamboo Plant", "description": "Bamboo plant known for its fast growth.", "price": 15.99, "images": ["bamboo_plant_image1.jpg", "bamboo_plant_image2.jpg"], "category": "Outdoor Plants", "tags": ["Bamboo Plant", "Fast-growing", "Outdoor"]}}}, "expected": {"outcome": "Request rejection successful", "status": "Rejected"}}, {"name": "Incomplete Information", "description": "Verify that the admin can handle the case where the user's request has incomplete information.", "input": {"requestDetails": {"user": "mary_jones@example.com", "plantDetails": {"name": "Hazlemount", "description": "Hazlemount with no specified price."}}}, "expected": {"outcome": "Request rejection due to incomplete information", "status": "Rejected"}}]}
{"usecase": {"name": "Place Bid on a Plant", "scenario": "A user wants to participate in a bidding process for a specific plant available on the online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user is registered and logged into their account.", "The online plant store is conducting a bidding event for the specified plant."], "steps": ["The user navigates to the 'Bidding Events' section of the online plant store.", "The user selects the plant for which they want to place a bid.", "The user views detailed information about the selected plant, including images and current highest bid.", "The user enters their bid amount in the provided input field.", "The user submits the bid for review.", "The system validates the bid amount and ensures it meets the minimum bid increment criteria.", "If the bid is valid, it is recorded, and the user is notified of the successful bid placement; if not, the user is notified of the error.", "The user can view their placed bids and the status of each bid in their account."]}, "testcases": [{"name": "Place Valid Bid", "description": "Verify that the user can successfully place a valid bid on a specific plant.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 20.5}, "expected": {"outcome": "Bid placement successful", "status": "Valid Bid"}}, {"name": "Place Invalid Bid (Below Minimum Increment)", "description": "Verify that the system rejects a bid that does not meet the minimum bid increment criteria.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 5.0}, "expected": {"outcome": "Bid placement failed", "status": "Invalid Bid (Below Minimum Increment)"}}, {"name": "Place Invalid Bid (Equal to Current Highest Bid)", "description": "Verify that the system rejects a bid that is equal to the current highest bid.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 20.5}, "expected": {"outcome": "Bid placement failed", "status": "Invalid Bid (Equal to Current Highest Bid)"}}, {"name": "View Placed Bids", "description": "Verify that the user can view their placed bids and the status of each bid in their account.", "input": {}, "expected": {"outcome": "Viewing placed bids successful", "status": "Bids Displayed"}}]}
{"usecase": {"name": "Property Search with Selected Criteria", "scenario": "Users can search for properties based on various filters such as location, price range, beds and baths, perks.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Search' option on the website", "User inputs the search criteria: location, price range, beds and baths, perks", "System retrieves the properties from database that match the search criteria", "System displays the properties to the user"]}, "testcases": [{"name": "Search with Valid Results", "description": "User inputs valid search criteria and gets valid results", "input": {"search_criteria": ["location: Dhaka", "price range: 500,000 - 1,000,000", "beds: 3", "baths: 2", "perks: pool, mosque"]}, "expected": {"outcome": "Valid search results displayed", "status": "Success"}}, {"name": "Search with No Results", "description": "User inputs valid search criteria but gets no results. No property in the database match the criteria", "input": {"search_criteria": ["location: Dhaka", "price range: 50,000 - 100,000", "beds: 3", "baths: 6", "perks: park, mosque"]}, "expected": {"outcome": "No search results displayed", "status": "Failed"}}]}
{"usecase": {"name": "Posting Property for Rent or Sell", "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.", "actors": "User, System, Agent", "preconditions": "User is logged in", "steps": ["The user selects the 'Sell/Rent' option", "The user fills in property details (e.g., location, price, for rent/sell, contact information, photos)", "User submits the property for validation", "Agent validates the property and approves the listing", "System displays the property to the users"]}, "testcases": [{"name": "Post Valid Property for Rent", "description": "User posts a valid property for rent", "input": {"property info": ["location: Dhaka", "price: 50,000", "for: rent", "contact: 017xxxxxxxx", "email : abc@gmail.com", "photos: 3"]}, "expected": {"outcome": "Property approved by agent and posted for rent", "status": "Success"}}, {"name": "Post Invalid Property for Sell", "description": "User posts an invalid property for sell", "input": {"property info": ["location: afhweuhu", "price: 50,000", "for: sell", "contact: 017xxxxxxxx", "email :"]}, "expected": {"outcome": "Invalid location, property not approved", "status": "Failed"}}]}
{"usecase": {"name": "Post a Blog", "scenario": "Users can post blogs about real estate, sharing their experiences, tips, and advice.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Create Post' option", "The user fills in the blog details: title, content, photos", "User presses the 'Post' button", "System displays the blog to the users"]}, "testcases": [{"name": "Post a Blog with Title and Content", "description": "User posts a blog with title and content", "input": {"blog info": ["title: New buyer in town", "content: Hello, I'm a new buyer in town and I'm looking for a house. Any suggestions?"]}, "expected": {"outcome": "Blog posted successfully", "status": "Success"}}, {"name": "Post a Blog with No Title", "description": "User tries to post a blog with no title", "input": {"blog info": ["title: ", "content: Hello, I'm a new buyer in town and I'm looking for a house. Any suggestions?"]}, "expected": {"outcome": "Blog not posted, 'title is required' warning displayed", "status": "Failed"}}]}
{"usecase": {"name": "Messaging System", "scenario": "Buyers and sellers or renters and landlords can communicate with each other through the messaging system.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Send message' option", "The user fills in the message details: recipient, subject, content", "User presses the 'Send' button", "System delivers the message to the recipient", "Recipient receives the message and can reply"]}, "testcases": [{"name": "Send successful message", "description": "User sends a message to another user", "input": {"message info": ["recipient: user123", "subject: Property no #46034 Inquiry", "content: Hi, I'm interested in your property. Can we discuss further?"]}, "expected": {"outcome": "Message sent successfully", "status": "Success"}}, {"name": "Send message with no recipient", "description": "User tries to send a message without specifying a recipient", "input": {"message info": ["recipient: ", "subject: Property no #46034 Inquiry", "content: Hi, I'm interested in your property. Can we discuss further?"]}, "expected": {"outcome": "Message not sent, 'recipient is required' warning displayed", "status": "Failed"}}]}
{"usecase": {"name": "User Profile Management", "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Profile' option", "The user can update personal information, change password, view activity history, wishlist", "User presses the 'Save' button", "System updates the user profile"]}, "testcases": [{"name": "Change Password", "description": "User changes their password", "input": {"password": ["old password: abc123", "new password: neha124", "confirm password: neha124"]}, "expected": {"outcome": "Password changed successfully", "status": "Success"}}, {"name": "Update Profile with Invalid Email", "description": "User tries to update their profile with an invalid email", "input": {"profile info": ["name: Neha", "email: neha", "phone: 017xxxxxxxx"]}, "expected": {"outcome": "Invalid email, profile not updated", "status": "Failed"}}]}
{"usecase": {"name": "Recipe Upload", "scenario": "Registered user can update the recipe", "actors": "User", "preconditions": "The user must be registered", "steps": ["User updates the form for the recipe update", "User submits the recipe form", "The recipe can be seen now from my_recipe section"]}, "testcases": [{"name": "Valid Recipe Upload", "description": "Verify that the recipe upload successful", "input": {"title": "Pasta with Creamy Tomato Sauce", "cooking_time": "30", "difficulty_level": "easy", "ingredients": [{"amount": 1, "unit": "box", "ingredient": "pasta"}, {"amount": 2, "unit": "cans", "ingredient": "diced tomatoes"}], "tags": ["pasta", "tomato", "snack", "lunch", "easy", "beginners", "vegetarian"], "meal_type": "breakfast", "image": null, "video": null, "steps": [{"order": 1, "step": "Cook the pasta according to package directions.", "image": null}, {"order": 2, "step": "Heat olive oil in a pan over medium heat. Add garlic and cook until fragrant.", "image": null}]}, "expected": {"outcome": "Recipe Upload successful", "status": "Success"}}, {"name": "Recipe with no steps", "description": "If the user tries to upload a recipe with no steps", "input": {"title": "Pasta with Creamy Tomato Sauce", "cooking_time": "30", "difficulty_level": "easy", "ingredients": [{"amount": 1, "unit": "box", "ingredient": "pasta"}, {"amount": 2, "unit": "cans", "ingredient": "diced tomatoes"}], "tags": ["pasta", "tomato", "snack", "lunch", "easy", "beginners", "vegetarian"], "meal_type": "breakfast", "image": null, "video": null, "steps": []}, "expected": {"outcome": "Upload failed: No steps provided", "status": "Error"}}]}
{"usecase": {"name": "Upload Blog", "scenario": "Registered users want to upload a blog", "actors": "User", "preconditions": "The user is registered and logged into the platform.", "steps": ["User selects 'Upload Blog' from the profile menu.", "User creates and drafts the content of the blog.", "User adds a title, description, and any relevant media (images, videos) to the blog.", "User specifies relevant tags for the blog.", "User initiates the upload process."]}, "testcases": [{"name": "Valid Blog Upload", "description": "Verify that a user can successfully upload a blog with valid content.", "input": {"title": "The Art of Cooking", "summary": "Lorem ipsum dolor...", "steps": "Lorem ipsum dolor sit amet, consectetur", "image": "https://firebasestorage.googleapis.com/v0/b/recipe\u2026=media&token=c8f1bf3b-917f-44ad-a6d0-1aa80a228938", "tags": ["Olive Oil", "Food", "Healthy recipe"]}, "expected": {"outcome": "Blog upload successful", "visibility": "Visible to other users"}}, {"name": "Empty Blog Upload", "description": "Verify that the system handles the case where a user tries to upload an empty blog.", "input": {"title": "", "summary": "Lorem ipsum dolor...", "steps": "", "image": "", "tags": []}, "expected": {"outcome": "Blog upload failed", "prompt": "System prompts the user to provide valid content"}}, {"name": "Draft Mode", "description": "Verify that a user can save a blog as a draft without publishing it immediately.", "input": {"title": "Drafting Ideas", "summary": "Lorem ipsum dolor...", "steps": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus...", "tags": ["diet", "healthy", "Vegetarian"], "draftMode": true}, "expected": {"outcome": "Blog saved as draft", "action": "User can continue editing and publish later"}}]}
{"usecase": {"name": "Recipe from Photo", "scenario": "User takes a photo of a food item, uploads it to the system, and receives a list of recipes based on the identified ingredients.", "actors": "User", "preconditions": "User is logged in to the platform.", "steps": ["User takes a photo of a food item", "User uploads the photo to the system", "System identifies ingredients using Clarifai Food Item Recognition", "System retrieves recipes using Spoonacular API based on identified ingredients", "User views a list of recommended recipes"]}, "testcases": [{"name": "Valid Photo Upload", "description": "Verify that the system successfully processes a valid photo upload and provides accurate recipe recommendations.", "input": {"url": "https://example.com/food-photo.jpg"}, "expected": {"outcome": "Recipe recommendations displayed", "accuracy": "Ingredients accurately identified", "userPrompt": "User can view and choose recipes from the list"}}, {"name": "Empty Photo Upload", "description": "Verify that the system handles the case where the user tries to upload an empty or non-identifiable photo.", "input": {"url": ""}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user to upload a clear photo of a food item"}}, {"name": "Invalid Photo Format", "description": "Verify that the system handles the case where the user uploads a photo in an unsupported format.", "input": {"url": "https://example.com/invalid-format.doc"}, "expected": {"outcome": "Invalid photo format", "userPrompt": "System prompts the user to upload a photo in a supported format (e.g., JPEG, PNG)"}}, {"name": "No Identified Ingredients", "description": "Verify that the system handles the case where no ingredients are identified from the uploaded photo.", "input": {"url": "https://example.com/no-ingredients.jpg"}, "expected": {"outcome": "No identified ingredients", "userPrompt": "System prompts the user to upload a clear photo of a food item with recognizable ingredients"}}]}
{"usecase": {"name": "Recipe from Ingredients", "scenario": "User provides a list of ingredients, and the system returns a list of recipes that can be created using those ingredients.", "actors": "User", "preconditions": "User is logged to the platform.", "steps": ["User enters a list of ingredients", "System retrieves recipes using Spoonacular API based on provided ingredients", "User views a list of recommended recipes"]}, "testcases": [{"name": "Valid Ingredients", "description": "Verify that the system successfully processes a valid list of ingredients and provides accurate recipe recommendations.", "input": {"ingredients": ["chicken", "broccoli", "soy sauce", "garlic", "ginger"]}, "expected": {"outcome": "Recipe recommendations displayed", "accuracy": "Recipes include provided ingredients", "userPrompt": "User can view and choose recipes from the list"}}, {"name": "Empty Ingredients", "description": "Verify that the system handles the case where the user submits an empty list of ingredients.", "input": {"ingredients": []}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user to enter ingredients to find recipes"}}, {"name": "Invalid Ingredients", "description": "Verify that the system handles the case where the user enters invalid or non-existent ingredients.", "input": {"ingredients": ["xyz meat", "dust"]}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user that entered ingredients are not recognized"}}]}
{"usecase": {"name": "Meal Plan as per Calorie Intake", "scenario": "User provides their details and calorie target. The system generates a meal plan based on the user's calorie requirements.", "actors": "User", "preconditions": "User is logged in and has access to the Meal Plan as per Calorie Intake feature.", "steps": ["User enters personal details (age, gender, height, weight) and calorie target", "System calculates the daily calorie requirement using a calorie calculator API", "System generates a meal plan using Spoonacular API based on the user's calorie target and preferences", "User views the recommended meal plan"]}, "testcases": [{"name": "Valid Calorie Intake", "description": "Verify that the system successfully calculates and generates a meal plan based on a valid calorie target and user details.", "input": {"age": 30, "gender": "female", "height": 160, "weight": 60, "level": "level_3", "timeFrame": "day", "targetCalories": 1800, "diet": "vegetarian", "exclude": ["shellfish", "nuts"]}, "expected": {"outcome": "Meal plan generated successfully", "userPrompt": "User can view and follow the recommended meal plan"}}, {"name": "Invalid Calorie Intake", "description": "Verify that the system handles the case where the user enters an unrealistic or invalid calorie target.", "input": {"age": 25, "gender": "male", "height": 180, "weight": 70, "level": "level_2", "timeFrame": "day", "targetCalories": 500, "diet": "paleo", "exclude": ["dairy"]}, "expected": {"outcome": "Calorie target too low", "userPrompt": "System prompts the user to enter a realistic calorie target"}}, {"name": "API Error Handling", "description": "Verify that the system gracefully handles errors from external APIs (calorie calculator and Spoonacular).", "input": {"age": 40, "gender": "female", "height": 170, "weight": 65, "level": "level_4", "timeFrame": "day", "targetCalories": 2000, "diet": "vegan", "exclude": ["gluten"]}, "expected": {"outcome": "Error handling", "userPrompt": "System displays a friendly error message and guides the user to retry"}}]}
{"usecase": {"name": "Registration", "scenario": "When a user wants to sign up our website", "actors": "User , Admin", "steps": ["users have to submit a form mentioning unique email,password,name,photo,phone,role,gender and birth type", "admin cross check these infos and give a activation of that user"]}, "testcases": [{"name": "valid registration", "description": "varify that user successfully register to the website ", "input": {"email": "have to give a unique email", "password": "have to give a strong password with at least 6 character", "name": "name is also required", "photo": "Photo of the user have required", "phone": "Have to give a phone number", "role": ["Doctor", "Patient"]}, "expected": {"outcome": "registration is successfully completed", "status": "approved"}}, {"name": "invalid Registration", "description": "varify that user gives all the required information to the website properly ", "expected": {"outcome": "Registration Failed", "status": "Rejected"}}, {"name": "Admin approval", "description": "varify that admin can successfully approves a user registration", "input": {"adminApproval": "true"}, "expected": {"outcome": "Registration Approved", "status": "approved"}}, {"name": "Admin rejection", "description": "varify that admin can reject a user registration", "input": {"adminApproval": "false"}, "expected": {"outcome": "Registration rejected", "status": "rejected"}}]}
{"usecase": {"name": "login", "scenario": "When a user wants to login to the website ", "actors": "User", "steps": ["user have to give email , password and role"]}, "testcases": [{"name": "Valid Log in", "description": "varify that user successfully log in to the website ", "input": {"Credentials": {"Email": "valid Email", "password": "valid Password", "Role": "Doctor, User, Admin"}}, "expected": {"outcome": "Successful Log in", "status": "Log in approved"}}, {"name": "invalid Log in", "description": "varify that user gives proper log in information ", "expected": {"outcome": "Unsuccessful Log in", "status": "Log in failed"}}]}
{"usecase": {"name": "find a doctor", "description": "User can search for doctors, analyze their ratings,reviews etc", "actors": "User", "steps": ["User have to go find a doctor page.", "User can filter doctor by their specialization , slot availability , fee  and reviews", "User can serach for doctors by their names"]}, "testcases": [{"name": "specialization filter successfull", "scenario": "When a user filter doctors by their specialization", "expected": {"outcome": "specialized doctors info"}}, {"name": "fee filter successfull", "scenario": "When a user filter doctors by their fee", "expected": {"outcome": "filtered doctors info"}}, {"name": "slot availability filter successfull", "scenario": "When a user filter doctors by their slot availabity", "expected": {"outcome": "filtered doctors info"}}, {"name": "review filter successfull", "scenario": "When a user filter doctors by their review", "expected": {"outcome": "filtered doctors info"}}, {"name": "search by name successfull", "scenario": "When a user search doctors by their name", "expected": {"outcome": "specific doctors info"}}]}
{"usecase": {"name": "Medishop", "description": "User can see vairous types of medicine and appropiate medicine for  appropiate deseases", "steps": ["User have to go medishop page."]}, "testcases": [{"name": "Medishop page successfull", "scenario": "When a user go to medishop page", "expected": {"outcome": "medishop page"}}]}
{"usecase": {"name": "Appoinment Creation", "description": "When a user create appointment.", "actors": "User , doctors", "steps": ["Users have to go create appioint page", "He/She has to fix slot,name,address, fee", "User submits the form and doctor approves it"]}, "testcases": [{"name": "appointment successfull", "scenario": "varify that user can successfully create an appointment.", "input": {"name": "Have to submit user name", "Phone Number": "have to give user phone number", "slot": "have to give desired slot"}, "expected": {"outcome": "Apointment successfull", "status": "appointment complete"}}]}
{"usecase": {"name": "MediLab", "description": "User can search for labtest, analyze their ratings,reviews etc", "actors": "User", "steps": ["User have to go MediLab page.", "User can filter Lab by their specialization , slot availability , fee  and reviews", "User can serach for Lab by their names"]}, "testcases": [{"name": "specialization filter successfull", "scenario": "When a user filter lab by their specialization", "expected": {"outcome": "specialized lab test info"}}, {"name": "fee filter successfull", "scenario": "When a user filter lab test by their fee", "expected": {"outcome": "filtered lab test info"}}, {"name": "slot availability filter successfull", "scenario": "When a user filter Lab by their slot availabity", "expected": {"outcome": "filtered lab info"}}, {"name": "review filter successfull", "scenario": "When a user filter lab test by their review", "expected": {"outcome": "filtered doctors info"}}, {"name": "search by name successfull", "scenario": "When a user search lab by their name", "expected": {"outcome": "specific lab info"}}]}
{"usecase": {"name": "Prescription Upload", "scenario": "Doctor uploads a prescription for a patient under a current treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. A treatment between the doctor and patient is present", "steps": ["Doctor navigates to the 'Prescription Upload' section.", "Doctor uploads the prescription", "System confirms the upload and updates the patient's medical history"]}, "testcases": [{"name": "Valid Prescription Upload", "description": "Verify that the system accepts a valid prescription upload.", "input": {"age": 20, "weight": 70, "height": 180, "bp": "80/120", "doctor name": "Zarif Hossain", "specialist": "Medicine", "clinic": "abcd", "continuation": "yes", "date": "2024-23-01", "symptoms": ["fever", "headache"], "tests": ["dengue", "cbc"], "diagnosis": ["typhoid"], "advices": ["bed rest for 21 days", "don't take outside food"], "medicines": [{"name": "Napa", "duration": 7, "meal timing": "after", "breakfast": "yes", "lunch": "yes", "dinner": "yes", "interval": 0}]}, "expected": {"outcome": "Prescription upload successful", "status": "Approved"}}, {"name": "Invalid Prescription Upload", "description": "Verify that the system rejects an invalid prescription upload.", "input": {"age": 20, "height": 180, "weight": 65}, "expected": {"outcome": "Prescription upload failed", "status": "Rejected"}}]}
{"usecase": {"name": "requesting patient patient data", "scenerio": "doctor requests access to incoming patient's health history to do proper treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. The doctor currently doesn't have access to the patient's data", "steps": ["Doctor searches for the patient", "Doctor sends access request"]}, "testcases": [{"name": "valid access request", "description": "verify that the system can accept a valid access request", "input": {"doctor_username": "zarif", "patient_username": "tomal", "date": "2024-12-01"}, "expected": {"outcome": "access request created", "status": "accepted"}}]}
{"usecase": {"name": "search for doctors", "scenerio": "patient searches for doctors based on department, name, visiting location and designation", "actors": "Patient", "preconditions": "Patient is registered and logged in", "steps": ["Patient goes to the 'Search for Doctors' section", "Patient enters search criteria"]}, "testcases": [{"name": "valid search by department and area", "description": "Verify that patients can successfully search for doctors by department and area", "input": {"area": "Mohammadpur", "department": "Medicine"}, "expected": {"outcome": "doctors are fetched", "status": "accepted"}}, {"name": "valid search by department", "description": "Verify that patients can successfully search for doctors by department", "input": {"department": "Medicine"}, "expected": {"outcome": "doctors are fetched", "status": "accepted"}}]}
{"usecase": {"name": "doctor views patient's treatments", "scenerio": "doctor views patient's health history before proceeding to do treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in. Patient is registered. Doctor has access to Patient health history", "steps": ["Doctor searches for the patient", "Doctor goes to patient's current treatments section"]}, "testcases": [{"name": "Authorized doctor views patient's treatments", "description": "verify that authorized doctors can view patient's health history", "input": {"doctor_username": "zarif", "patient_username": "tomal"}, "expected": {"outcome": "treatments are fetched", "status": "accepted"}}, {"name": "Unauthorized doctor views patient's treatments", "description": "verify that unauthorized doctors cannot view patient's health history", "input": {"doctor_username": "zarif", "patient_username": "tomal"}, "expected": {"outcome": "treatments fetching failed", "status": "denied"}}]}
{"usecase": {"name": "admin downloads health data", "scenerio": "admin looks for downloading heath related data for further analysis", "actors": "Admin", "preconditions": "Admin is registered and logged in. Admin has access for the related data", "steps": ["admin searches for relevant data", "admin downloads the csv file"]}, "testcases": [{"name": "Authorized admin downloads data", "description": "verify that authorized admins can download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download successful", "status": "accepted"}}, {"name": "Unauthorized admin downloads data", "description": "verify that unauthorized admins cannot download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download failed", "status": "denied"}}]}
{"usecase": {"name": "Add a new task in To Do list", "description": "User should be able to add a new task", "preconditions": "User should be logged in", "steps": ["User should be logged in", "User should be on the To Do list page", "User should click on the Add button", "User should enter the task name and description", "User should choose the Deadline", "User should set the importance of the task on a scale of 1 to 10", "User should click on the Submit button"]}, "testcases": [{"name": "Correctly add a new task", "description": "User should be able to add a new task", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-31", "importance": "5"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}, {"name": "Given Deadline is in the past", "description": "User should not be able to set the deadline in the past", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2021-01-01", "importance": "5"}, "expected": {"outcome": "The deadline is in the past", "status": "Fail"}}, {"name": "The Deadline is in the future", "description": "User should be able to set the deadline in the future", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "5"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}, {"name": "The Importance is set to negative", "description": "User should not be able to set the importance to a negative value", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "-5"}, "expected": {"outcome": "The importance is set to a negative value", "status": "Fail"}}, {"name": "The Importance is set to 0", "description": "User should not be able to set the importance to 0", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "0"}, "expected": {"outcome": "The importance is set to 0", "status": "Fail"}}, {"name": "The Importance is set to 1 to 10", "description": "User should be able to set the importance to a value between 1 to 10", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "10"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}]}
{"usecase": {"name": "Chat with AI bot", "description": "Every user can chat with an AI bot and take help from it", "preconditions": "User should be logged in", "steps": ["User should be logged in", "User should be on the chat page", "User can type in the chat box and get the response from the bot"]}, "testcases": [{"name": "Empty text submit", "description": "Verify the response when user submits empty text", "input": {"chatText": ""}, "expected": {"outcome": "Won't send the empty text", "status": "Fail"}}, {"name": "Text more than 1000 characters", "description": "Check the response when user submits text more than 1000 characters", "input": {"value": " 'a' * 1001"}, "expected": {"outcome": "Incomplete Response. First 1000 characters will be sent and the user will be notified about the limit", "status": "Fail"}}, {"name": "Text less than 1000 characters", "description": "Check the response when user submits text less than 1000 characters", "input": {"value": " 'a' * 999"}, "expected": {"outcome": "Complete Response", "status": "Pass"}}]}
{"usecase": {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "preconditions": ["The student has completed the quiz", "The student has submitted the quiz", "The trainer is logged in and has access to the quiz"], "steps": ["The trainer should be able to view the student's answers", "The trainer should be able to grade the student's answers", "The trainer should be able to view the student's score", "The trainer should be able to edit the student's performance"]}, "testcases": [{"name": "Over grading", "description": "The grade shoudln't exceed the maximum grade", "input": {"grade": "4.25"}, "expected": {"outcome": " The grade should not be greater than 4.00", "status": "Fail"}}, {"name": "Under grading", "description": "The grade shoudln't be less than the minimum grade", "input": {"grade": "1.25"}, "expected": {"outcome": " The grade should not be less than 2.00", "status": "Fail"}}, {"name": "Correct grading", "description": "The grade should be within the range of 2.00 to 4.00", "input": {"grade": "3.25"}, "expected": {"outcome": "The grade is within the range of 2.00 to 4.00", "status": "Pass"}}, {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "input": {"grade": "3.25", "status": "Contest is Running"}, "expected": {"outcome": "The quiz has not been completed yet", "status": "Fail"}}, {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "input": {"grade": "3.25", "status": "Completed"}, "expected": {"outcome": "Successfully graded the student", "status": "Pass"}}]}
{"usecase": {"name": "Learner Sign Up", "description": "A learner can sign up to the platform, by mail and password, or by Google or by Discord", "preconditions": ["The learner is not signed in", "The learner has access to the internet", "The learner has a valid email id or Google account or Discrod account", "The learner has not used the same email or account to sign up before"], "steps": ["The learner opens the platform", "The learner clicks on the sign up button", "The learner chooses the sign up method", "The learner enters the email id and password or selects the Google or Discord account", "The learner clicks on the sign up button", "The learner verifies the email id or Google or Discord account", "The learner is registered to the platform", "The learner is signed in to the platform"]}, "testcases": [{"name": "Sign Up by previously used email id", "description": "A learner has to use a email id that is not used before to sign up", "input": {"email": "raihan@gmail.com", "password": "123456"}, "expected": {"outcome": "The email was used before", "status": "Rejected"}}, {"name": "Learner Sign Up unique email id", "description": "A learner has to use a email id that is not used before to sign up", "input": {"email": "random12@gmail.com", "password": "123456"}, "expected": {"outcome": "The email was not used before", "status": "Accepted"}}, {"name": "Learner Sign Up by previously used Google account", "description": "A learner has to use a Google account that is not used before to sign up", "input": {"gmail": "raihan@gmail.com"}, "expected": {"outcome": "The gmail was used before", "status": "Rejected"}}, {"name": "Learner Sign Up by unique Google Account", "description": "A learner has to use a Google account that is not used before to sign up", "input": {"gmail": "random1234@gmail.com"}, "expected": {"outcome": "The gmail was not used before", "status": "Accepted"}}, {"name": "Learner Sign Up by previously used Google account", "description": "A learner has to use a Discord account that is not used before to sign up", "input": {"discord account": "random#1234"}, "expected": {"outcome": "The discord account was used before", "status": "Rejected"}}, {"name": "Learner Sign Up by unique Discord Account", "description": "A learner has to use a Discord account that is not used before to sign up", "input": {"discord account": "random#12345"}, "expected": {"outcome": "The discord account was not used before", "status": "Accepted"}}]}
{"usecase": {"name": "Review and Rating Check", "description": ["Only who has taken the class can review the class", "The review should be a maximum of 50 characters", "The rating should be between 1 and 5"], "preconditions": ["Learner is logged in", "Learner has taken the class"], "steps": ["Learner clicks on the review button", "Learner writes the review", "Learner submits the review"]}, "testcases": [{"name": "Unenrolled student gives review of the class", "description": "Verify that the learner has taken the class", "input": {"Review": "This is a Bad class", "rating": "2", "enrolled": "No"}, "expected": {"outcome": "The Learner has not taken the class, hence he is not authorized to review the class", "status": "Fail"}}, {"name": "Enrolled student gives review of the class", "description": "Verify that the learner has taken the class", "input": {"Review": "This is a Good class", "rating": "4", "enrolled": "Yes"}, "expected": {"outcome": "The Learner has taken the class, hence he is authorized to review the class", "status": "Pass"}}, {"name": "Review given with more than 50 characters", "description": "Verify that the review is a maximum of 50 characters", "input": {"Review": "This is a Bad class, I did not like it at all, I would not recommend it to anyone, it was a waste of time and money", "rating": "2"}, "expected": {"outcome": "The review is more than 50 characters", "status": "Fail"}}, {"name": "Review given with less than 50 characters", "description": "Verify that the review is a maximum of 50 characters", "input": {"Review": "This is a Bad class", "rating": "2"}, "expected": {"outcome": "The review is less than 50 characters", "status": "Pass"}}, {"name": "Negative rating given", "description": "Verify that the rating is between 1 and 5", "input": {"Review": "This is a Bad class", "rating": "-5"}, "expected": {"outcome": "The rating is not between 1 and 5", "status": "Fail"}}, {"name": "Valid rating given", "description": "Verify that the rating is between 1 and 5", "input": {"Review": "This is a Good class", "rating": "4"}, "expected": {"outcome": "The rating is between 1 and 5", "status": "Pass"}}]}
{"usecase": {"name": "Adding a new class", "description": "This use case is used to add a new class to the system by the trainer ", "preconditions": "The trainer should be logged in", "steps": ["The trainer should click on the add class button", "The trainer should enter the class details", "The trainer should click on the save button"]}, "testcases": [{"name": "Added with valid start and end time", "description": "This test case is used to verify a new class with valid details", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-01-01", "class_end_date": "2025-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": " The class should be added successfully", "status": "Pass"}}, {"name": "Both The start time and end time is in the past", "description": "The start and end time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The start and end time is not in the future", "status": "Fail"}}, {"name": "The start time is in the past", "description": "The start time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2025-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The start time is not in the future", "status": "Fail"}}, {"name": "The end time is not in the future", "description": "The end time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The end time is not in the future", "status": "Fail"}}, {"name": "Inconsistent start and end time", "description": "The end time should be greater than the start time", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-03-01", "class_end_date": "2025-2-28", "class_start_time": "12:00", "class_end_time": "10:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The end time is not greater than the start time", "status": "Fail"}}, {"name": "Old class name given", "description": "The class name should be unique", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The class name is not unique", "status": "Fail"}}, {"name": "Given class name is unique", "description": "The class name should be unique", "input": {"class_name": "Java_02", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The class name is unique", "status": "Pass"}}]}
{"usecase": {"name": "Trainer Add Blogs", "description": "Trainer should be able to add blogs", "preconditions": ["Trainer should be logged in", "The blog post should not exceed 1000 words"], "steps": ["Trainer will click My Articles from the left menu", "Trainer will click Add New Post", "Trainer will fill the required fields", "Trainer will click Done With Editing"]}, "testcases": [{"name": "Large blog post added", "description": "The length of the blog post should not 1000 words", "input": {"title": "Test Blog", "short description": "This is a test blog", "time to read": "5", "tags": "test, blog", "content": "This is a test .... 5000 words"}, "expected": {"outcome": "The blog post exceeds 1000 words", "status": "Fail"}}, {"name": "Valid blog post added", "description": "The length of the blog post should not 1000 words", "input": {"title": "Test Blog", "short description": "This is a test blog", "time to read": "5", "tags": "test, blog", "content": "This is a test .... 500 words"}, "expected": {"outcome": "The blog post is added successfully", "status": "Pass"}}]}
{"usecase": {"name": "Sign Up as a Trainer", "scenario": "A trainer has to give his details to sign up", "actors": "Trainer", "preconditions": ["The trainer is not signed in.", "The trainer should have access to the internet.", "The trainer should have a valid email id and a contact number", "The learner has not used the same email or account to sign up before"], "steps": ["The trainer has to go to the sign up page", "The trainer has to fill in the details", "The trainer has to verify the email", "The trainer has to wait for the approval"]}, "testcases": [{"name": "Extremely Short name given", "description": "Verify that the name is of at least 3 characters", "input": {"Name": "AB"}, "expected": {"outcome": "Name is required and at least of length 3", "status": "Rejected"}}, {"name": "Name given correclty", "description": "Verify that the name is of at least 3 characters", "input": {"Name": "Raihan"}, "expected": {"outcome": "Name is of correct length", "status": "Approved"}}, {"name": "Date of Birth is in the future", "description": "Verify that the date of birth is in the past", "input": {"Date of Birth ": ["01/01/2025"]}, "expected": {"outcome": "Date of birth must be in the past", "status": "Rejected"}}, {"name": "Empty Date of Birth", "description": "Verify that the date of birth is not empty", "input": {"Date of Birth": ["Not Selected"]}, "expected": {"outcome": "Date of birth is required", "status": "Rejected"}}, {"name": "Date of birth is in the past and not 18 years ago", "description": "Verify that the date of birth is in the past and the trainer is at least 18 years old", "input": {"Date of Birth": ["01/01/2021"]}, "expected": {"outcome": "The trainer is less than 18 years old", "status": "Rejected"}}, {"name": "Date of birth is in the past and 18 years ago", "description": "Verify that the date of birth is in the past and the trainer is at least 18 years old", "input": {"Date of Birth": ["01/01/2003"]}, "expected": {"outcome": "Date of birth is in the past and the trainer is at least 18 years old", "status": "Approved"}}, {"name": "Empty Gender Selection", "description": "Verify that the trainer has selected his/her gender", "input": {"Gender": ["Not Selected"]}, "expected": {"outcome": "Required", "status": "Rejected"}}, {"name": "Correct gender selection", "description": "Verify that the trainer has selected his/her gender", "input": {"Gender": "male"}, "expected": {"outcome": "Correct", "status": "Approved"}}, {"name": "Contact number format invalid", "description": "Verify the format of the contact number, it should be of 11 digits and should start with 01", "input": {"Contact Number": ["1234567"]}, "expected": {"outcome": "Phone number must be exactly 11 digits and start with 01", "status": "Rejected"}}, {"name": "Contact number format valid", "description": "Verify the format of the contact number, it should be of 11 digits and should start with 01", "input": {"Contact Number": ["01853320911"]}, "expected": {"outcome": "Phone number is exactly 11 digits and start with 01", "status": "Approved"}}, {"name": "Empty or Invalid Email", "description": "Verify that the email is not empty and is in the correct format", "input": {"Email": ["abc.com"]}, "expected": {"outcome": "Invalid email address, email address is required", "status": "Rejected"}}, {"name": "Empty or Invalid Password", "description": "Verify that the password is not empty and is of at least 7 characters containing at least 1 uppercase letter, 1 special character, 1 number", "input": {"Password": ["abc"]}, "expected": {"outcome": "Password must be at least 7 characters long and contain at least 1 uppercase letter, 1 special character, 1 number", "status": "Rejected"}}, {"name": "Empty or Invalid Confirm Password", "description": "Verify that the confirm password is not empty and is same as the password", "input": {"Confirm Password": ["abc"]}, "expected": {"outcome": "Password and confirm password must match", "status": "Rejected"}}, {"name": "Verify teaching information", "description": "The reasoning should be of at least 15 characters", "input": {"Reason": ["abc"]}, "expected": {"outcome": "Reason must be at least 15 characters long", "status": "Rejected"}}, {"name": "Verify the mail ", "description": "Verify that the email is not previously used", "input": {"Email": ["raihan@gmail.com"]}, "expected": {"outcome": "Email already exists", "status": "Rejected"}}, {"name": "Verify All Details", "description": "Verify that all the details are correct and the email is verified", "input": {"Details": ["Correct"]}, "expected": {"outcome": "Details are correct and email is verified", "status": "Approved"}}]}
