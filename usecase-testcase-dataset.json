[{"usecase": {"name": "User Enters Patient Notes", "scenario": "A user enters patient notes in an Automated AI-based Clinical Coding App for medical coding.", "actors": ["User"], "preconditions": "User has access to the Clinical Coding App and patient notes are available for coding.", "steps": ["User navigates to the patient notes section in the App.", "User enters the patient notes including relevant medical information.", "User saves the entered patient notes."]}, "testcases": [{"name": "Successful Entry of Patient Notes", "description": "User successfully enters patient notes with relevant medical information", "input": {"notes": "Patient complained of persistent headache for the past week. No history of head injury. Advised to undergo MRI for further investigation."}, "expected": {"outcome": "Patient notes saved successfully", "status": "Successful"}}, {"name": "Unsuccessful Entry of Patient Notes - Empty Entry", "description": "System prevents the user from saving empty patient notes", "input": {"notes": ""}, "expected": {"outcome": "Empty patient notes entry", "status": "Failed"}}, {"name": "Entry of irrelevant or meaningless notes/text", "description": "System requests the user to update their note entry, pointing out the issues in his current note", "input": {"notes": "Patient's name is Bryan. He is a student of Geography."}, "expected": {"outcome": "Incomplete patient notes entry. Please include the medical issue or updates of the patient.", "status": "Failed"}}]}, {"usecase": {"name": "Patient Notes Added in Data Service", "scenario": "The patient notes entered by the user in an Automated AI-based Clinical Coding App for medical coding are added in the Data Service for further processing.", "actors": ["System"], "preconditions": "Patient notes are successfully entered in the App.", "steps": ["The entered patient notes are automatically sent to the Data Service for processing.", "Data Service processes and stores the patient notes for further analysis."]}, "testcases": [{"name": "Successful Addition of Patient Notes", "description": "Verify that the patient notes are successfully added in the Data Service for further processing", "input": {"notes": "Patient complained of headache and dizziness.", "timestamp": "2021-08-15T08:30:00"}, "expected": {"outcome": "Patient notes successfully processed and stored", "status": "Success"}}, {"name": "Missing notes", "description": "Verify that the patient notes are not missing or incomplete", "input": {"notes": "", "timestamp": "2021-08-15T08:30:00"}, "expected": {"outcome": "Patient notes are required.", "status": "Failure"}}, {"name": "Data Corruption before Storage", "description": "Verify that the patient notes are not corrupted", "input": {"notes": "Corrupted data...", "timestamp": "2021-08-15T08:30:00"}, "expected": {"outcome": "Patient notes were corrupted, please try again.", "status": "Failure"}}]}, {"usecase": {"name": "Assignment of ICD Codes to patient notes using Language Classification Model for an Automated AI-based Clinical Coding App", "scenario": "ICD codes are assigned to the patient notes using a language classification model from the AI center.", "actors": ["AI Center"], "preconditions": "Patient notes are available in the Data Service for processing.", "steps": ["The AI center's language classification model processes the patient notes.", "The model assigns ICD codes based on the information extracted from the patient notes."]}, "testcases": [{"name": "Valid language model processing", "description": "Verify that the language classification model can successfully process patient notes and assign ICD codes", "input": {"patient_notes": "Patient's notes in the required format"}, "expected": {"outcome": "ICD codes assigned successfully", "status": "processed"}}, {"name": "Invalid patient notes format", "description": "Verify that the language classification model handles invalid patient notes format appropriately", "input": {"patient_notes": "Incomplete or incorrectly formatted patient notes"}, "expected": {"outcome": "Error in processing", "status": "failed"}}]}, {"usecase": {"name": "Review of Assigned ICD Codes to Patient Notes in An Automated AI-based Clinical Coding App by Medical Coder", "scenario": "The assigned ICD codes are reviewed by a medical coder in the UiPath Action Center.", "actors": ["Medical Coder"], "preconditions": "ICD codes have been assigned to the patient notes and are available for review in the Action Center of the app.", "steps": ["Medical coder accesses the assigned ICD codes in the Action Center.", "Medical coder reviews the assigned codes and verifies their accuracy and relevance.", "Medical coder either approves or rejects the assigned ICD codes."]}, "testcases": [{"name": "Valid code review and approval", "description": "Verify that the medical coder can successfully review and approve the assigned ICD codes", "input": {"coder_username": "johndoe", "action_center_id": "AC-12345", "reviewed_codes": ["ICD-10-Code-A", "ICD-10-Code-B"], "approval_status": "approved"}, "expected": {"outcome": "Codes approved and marked as reviewed", "status": "success"}}, {"name": "Invalid code review and rejection", "description": "Verify that the medical coder can reject the assigned ICD codes if they are inaccurate or irrelevant", "input": {"coder_username": "janedoe", "action_center_id": "AC-67890", "reviewed_codes": ["ICD-10-Code-C", "ICD-10-Code-D"], "approval_status": "rejected", "reason": "Inaccuracy in code assignment"}, "expected": {"outcome": "Codes rejected with proper reasoning", "status": "success"}}]}, {"usecase": {"name": "Data Entry in Legacy Application by Robot", "scenario": "A user enters patient notes in an Automated AI-based Clinical Coding App for medical coding. After it is assgined ICD code by AI, it is approved or rejected by the medical coder. If the assigned codes are approved by the medical coder, the data is entered in the legacy application by a robot.", "actors": ["Robot"], "preconditions": "The assigned ICD codes have been approved by the medical coder in the Action Center.", "steps": ["Robot fetches the approved ICD codes and associated patient notes from the Data Service.", "Robot enters the data including the approved ICD codes into the legacy application for further processing."]}, "testcases": [{"name": "Successful Data Entry", "description": "Verify that the robot can successfully enter data in the legacy application after receiving approved ICD codes and patient notes.", "input": {"icd_codes": ["A12.0", "B15.8"], "patient_notes": "Patient is experiencing mild fever and cough.", "expected_date": "2022-01-15"}, "expected": {"outcome": "Data successfully entered in legacy application", "status": "Success"}}, {"name": "Unsuccessful Data Entry - Invalid ICD Codes", "description": "Verify that the robot cannot enter data if the approved ICD codes are invalid.", "input": {"icd_codes": ["Z99.9", "InvalidCode"], "patient_notes": "Patient has no significant symptoms.", "expected_date": "2022-01-15"}, "expected": {"outcome": "Invalid ICD codes provided", "status": "Failed"}}]}, {"usecase": {"name": "Blood Test Report Extraction (ai-enabled-blood-test-report-analysis project)", "description": "Automated extraction of required fields from the lab report for a specific type of blood test.", "actors": ["RPA Robot", "Lab Clinician", "Doctor"], "preconditions": "Lab reports are available in a format readable by the RPA robot and the UiPath Document Understanding is able to classify the reports.", "steps": ["RPA robot fetches the lab report for a specific type of blood test.", "RPA robot uses UiPath Document Understanding to classify the lab report for the type of test.", "RPA robot extracts the required fields from the report.", "RPA robot saves the extracted data in a global database without any Personally Identifiable Information (PII)."]}, "testcases": [{"name": "Valid Blood Test Report Extraction", "description": "Verify that the RPA robot successfully extracts required fields from the lab report for a specific type of blood test and saves it in a global database without PII.", "input": {"report_type": "CBC", "report_content": "Sample CBC report content here..."}, "expected": {"outcome": "Extraction successful and data saved in database", "status": "Success"}}, {"name": "Unreadable Lab Report Format", "description": "Verify that system handles the case when the lab report format is not readable by the RPA robot and UiPath Document Understanding.", "input": {"report_type": "Lipid Profile", "report_content": "Sample unreadable lipid profile report content here..."}, "expected": {"outcome": "Extraction failed", "status": "Unreadable format"}}, {"name": "Lab Report Misclassification", "description": "Verify that system handles the case when the lab report is misclassified by the UiPath Document Understanding.", "input": {"report_type": "Glucose Test", "report_content": "Sample misclassified glucose test report content here..."}, "expected": {"outcome": "Extraction failed", "status": "Misclassification"}}, {"name": "PII Data Extraction", "description": "Verify that the system prevents extraction of Personally Identifiable Information (PII) from the lab report.", "input": {"report_type": "Hemoglobin A1c Test", "report_content": "Sample Hemoglobin A1c test report with PII content here..."}, "expected": {"outcome": "Extraction failed", "status": "PII prevention"}}]}, {"usecase": {"name": "Blood Test Report Analysis using ML Models (ai-enabled-blood-test-report-analysis project)", "description": "Analysis of blood test reports using ML models hosted in the UiPath AI Center to derive prescriptive observations.", "actors": ["RPA Robot", "ML Model", "Lab Clinician", "Doctor"], "preconditions": "Automatically extracted data from the lab report is available in the global database, and ML models for different types of blood tests are available in the UiPath AI Center.", "steps": ["RPA robot sends the report parameters to the ML models hosted in the UiPath AI Center.", "ML models analyze the report parameters and derive prescriptive observations.", "Prescriptive observations are attached to the test report and sent to the lab clinician."]}, "testcases": [{"name": "Successful Blood Test Report Analysis", "description": "Verify successful analysis of blood test report using ML models and transmission to lab clinician.", "input": {"report_parameters": "blood_test_report_parameters", "ML_model_type": "complete_blood_count"}, "expected": {"outcome": "Prescriptive observations attached to the test report", "status": "Report sent to lab clinician"}}, {"name": "Unavailability of Lab Report Data", "description": "Verify behavior when lab report data is not available in the global database.", "input": {"report_parameters": "unavailable_report_parameters", "ML_model_type": "lipid_panel"}, "expected": {"outcome": "No prescriptive observations derived", "status": "Error: Lab report data not available"}}, {"name": "ML Model Unavailability", "description": "Verify behavior when the required ML model is not available in the UiPath AI Center.", "input": {"report_parameters": "blood_test_report_parameters", "ML_model_type": "liver_function_tests"}, "expected": {"outcome": "No prescriptive observations derived", "status": "Error: Required ML model not available"}}]}, {"usecase": {"name": "Highlight Similar Cases (ai-enabled-blood-test-report-analysis project)", "description": "Highlighting similar cases of a test report found in the database for the specific hospital or laboratory to the lab clinician.", "actors": ["RPA Robot", "Lab Clinician", "Doctor"], "preconditions": "Data on similar cases is available in the database and is accessible by the RPA robot.", "steps": ["RPA robot identifies similar cases for the specific hospital or laboratory based on the test report.", "Lab clinician or doctor receives information on similar cases found in the database."]}, "testcases": [{"name": "Valid similar cases identified", "description": "Verify that the RPA robot can successfully identify similar cases based on the test report for the specific hospital or laboratory.", "input": {"robot_id": "RPA001", "hospital_id": "H001", "test_report": "xyz"}, "expected": {"outcome": "similar cases identified", "status": "success"}}, {"name": "No similar cases identified", "description": "Verify that the RPA robot does not identify any similar cases based on the test report for the specific hospital or laboratory.", "input": {"robot_id": "RPA002", "hospital_id": "H002", "test_report": "abc"}, "expected": {"outcome": "no similar cases identified", "status": "success"}}, {"name": "Lab clinician receives similar cases information", "description": "Verify that the lab clinician receives information on similar cases found in the database.", "input": {"clinician_id": "LC001", "hospital_id": "H001"}, "expected": {"outcome": "similar cases info received", "status": "success"}}, {"name": "Doctor receives similar cases information", "description": "Verify that the doctor receives information on similar cases found in the database.", "input": {"doctor_id": "DOC001", "hospital_id": "H001"}, "expected": {"outcome": "similar cases info received", "status": "success"}}]}, {"usecase": {"name": "Review Past Blood Test Reports (ai-enabled-blood-test-report-analysis project)", "description": "Provide additional recommendations based on a test report on changes observed over time by reviewing past blood test reports of the same patient.", "actors": ["RPA Robot", "Lab Clinician", "Doctor"], "preconditions": "Past blood test reports of the same patient are available in the database and accessible by the RPA robot.", "steps": ["RPA robot retrieves past blood test reports of the same patient.", "Lab clinician or doctor receives additional recommendations based on changes observed over time."]}, "testcases": [{"name": "Retrieve Past Blood Test Reports - Valid", "description": "Verify that RPA robot can successfully retrieve past blood test reports of the same patient", "input": {"patient_id": "12345"}, "expected": {"outcome": "Past blood test reports retrieved", "status": "Success"}}, {"name": "Retrieve Past Blood Test Reports - Invalid Patient ID", "description": "Verify that RPA robot cannot retrieve past blood test reports with an invalid patient ID", "input": {"patient_id": "invalid_id"}, "expected": {"outcome": "Failed to retrieve past blood test reports", "status": "Error"}}, {"name": "Receive Additional Recommendations - Valid", "description": "Verify that lab clinician or doctor can receive additional recommendations based on changes observed over time in the blood test reports", "input": {"changes_observed": "significant_changes"}, "expected": {"outcome": "Additional recommendations provided", "status": "Success"}}, {"name": "Receive Additional Recommendations - No Significant Changes", "description": "Verify that lab clinician or doctor does not receive additional recommendations when no significant changes are observed over time", "input": {"changes_observed": "no_significant_changes"}, "expected": {"outcome": "No additional recommendations provided", "status": "Success"}}]}, {"usecase": {"name": "Customer Registration in Online AI Assisted Grocery Store for Elderly", "scenario": "A new customer registers an account on the online grocery store platform.", "actors": ["New Customer"], "preconditions": "Customer does not have an existing account on the platform.", "steps": ["New Customer navigates to the registration page of the online grocery store platform.", "New Customer fills in the required registration details such as name, contact details, and preferred language.", "The system validates the provided details and creates a new customer account."]}, "testcases": [{"name": "Valid Customer Registration", "description": "Verify that a new customer can successfully register an account on the online grocery store platform.", "input": {"name": "John Doe", "email": "john.doe@example.com", "contactNumber": "1234567890", "language": "English"}, "expected": {"outcome": "Customer account created successfully", "status": "Active"}}, {"name": "Invalid Registration Details", "description": "Verify that the system rejects the registration if the customer provides incomplete or invalid registration details.", "input": {"name": "Invalid User", "email": "invalid_email", "contactNumber": "12345abc", "language": "French"}, "expected": {"outcome": "Customer registration failed due to invalid details", "status": "Inactive"}}, {"name": "Duplicate Email Address", "description": "Verify that the system rejects the registration attempt if the email address is already associated with an existing account.", "input": {"name": "Jane Smith", "email": "john.doe@example.com", "contactNumber": "0987654321", "language": "Spanish"}, "expected": {"outcome": "Customer registration failed due to duplicate email", "status": "Inactive", "message": "Email address is already in use"}}, {"name": "Missing Required Fields", "description": "Verify that the system handles the scenario where required registration fields are missing.", "input": {"name": "", "email": "newuser@example.com", "contactNumber": "", "language": "English"}, "expected": {"outcome": "Customer registration failed due to missing required fields", "status": "Inactive", "message": "Name and contact number are required fields"}}, {"name": "Weak Password Error", "description": "Verify that the system rejects the registration if the customer provides a weak password.", "input": {"name": "New Customer", "email": "new.customer@example.com", "contactNumber": "1234567890", "language": "English", "password": "123"}, "expected": {"outcome": "Customer registration failed due to weak password", "status": "Inactive", "message": "Password does not meet security requirements"}}]}, {"usecase": {"name": "Vendor Registration to Online AI Assisted Grocery Store for Elderly", "scenario": "A new vendor registers an account on the online grocery store platform.", "actors": ["New Vendor"], "preconditions": "Vendor does not have an existing account on the platform.", "steps": ["New Vendor navigates to the registration page of the online grocery store platform.", "New Vendor fills in the required registration details such as business name, contact details, and preferred language for communication.", "New Vendor submits any required licenses or certifications for verification.", "The system validates the provided details, creates a new vendor account, and enables the vendor to receive and process orders."]}, "testcases": [{"name": "Valid Vendor Registration", "description": "Verify that a new vendor can successfully register an account on the platform with valid details and receive the ability to process orders.", "input": {"vendorDetails": {"businessName": "Fresh Supplies", "contactPerson": "John Doe", "email": "john.doe@freshsupplies.com", "phoneNumber": "1234567890", "language": "English", "licenses": ["Business License", "Food Safety Certification"]}}, "expected": {"outcome": "Vendor account created successfully", "status": "Enabled to receive and process orders"}}, {"name": "Invalid Vendor Registration", "description": "Verify that the system handles the case where a new vendor tries to register with invalid details or missing required information.", "input": {"vendorDetails": {"businessName": "Invalid Supplies", "contactPerson": "Jane Smith", "email": "invalid_email", "phoneNumber": "9876543210", "language": "English", "licenses": []}}, "expected": {"outcome": "Vendor registration failed due to invalid or incomplete details", "status": "Not Enabled to receive and process orders"}}, {"name": "Duplicate Vendor Registration", "description": "Verify that the system prevents a vendor from registering with an email address that is already associated with an existing vendor account.", "input": {"vendorDetails": {"businessName": "Duplicate Vendor", "contactPerson": "Alice Johnson", "email": "john.doe@freshsupplies.com", "phoneNumber": "0987654321", "language": "Spanish", "licenses": ["Business License"]}}, "expected": {"outcome": "Vendor registration failed due to duplicate email", "status": "Not Enabled to receive and process orders", "message": "Email address is already in use"}}, {"name": "Missing Required License", "description": "Verify that the system handles the case where a vendor does not provide the required licenses or certifications during registration.", "input": {"vendorDetails": {"businessName": "Unlicensed Vendor", "contactPerson": "Robert Green", "email": "robert.green@unlicensedvendor.com", "phoneNumber": "5678901234", "language": "French", "licenses": []}}, "expected": {"outcome": "Vendor registration failed due to missing required licenses", "status": "Not Enabled to receive and process orders", "message": "Required licenses or certifications are missing"}}, {"name": "Invalid Contact Details", "description": "Verify that the system rejects the vendor registration when invalid contact details are provided.", "input": {"vendorDetails": {"businessName": "Contact Error Vendor", "contactPerson": "Sarah Lee", "email": "sarah.lee@vendor.com", "phoneNumber": "invalid_phone_number", "language": "English", "licenses": ["Business License"]}}, "expected": {"outcome": "Vendor registration failed due to invalid contact details", "status": "Not Enabled to receive and process orders", "message": "Invalid phone number format"}}]}, {"usecase": {"name": "Customer Places an Order on the Online AI Assisted Grocery Store for Elderly", "scenario": "A customer submits a grocery order on the online store platform using an image of their handwritten list.", "actors": ["Customer"], "preconditions": "Customer is logged in.", "steps": ["Customer uploads an image of the grocery list or selects a previously uploaded list from their profile.", "The system generates a list from the image.", "Customer reviews and confirms the items listed based on the translated content.", "Customer proceeds to checkout.", "The system triggers the checkout process and notifies the vendor about the new order using Twilio API."]}, "testcases": [{"name": "Valid Grocery Order Submission", "description": "Verify that a customer can successfully submit a grocery order using an uploaded handwritten list.", "input": {"customer": "John Doe", "loggedIn": true, "uploadedList": "grocery_list_image_123", "confirmedItems": ["Milk", "Eggs", "Bread", "Apples"], "proceedToCheckout": true, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order placed successfully", "status": "Notification sent to vendor"}}, {"name": "Empty Uploaded Grocery List", "description": "Verify that the system handles the case where a customer tries to submit an empty grocery list.", "input": {"customer": "Jane Smith", "loggedIn": true, "uploadedList": "", "confirmedItems": [], "proceedToCheckout": true, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order placement failed", "status": "Empty list error"}}, {"name": "Invalid Confirmation of Items", "description": "Verify that the system handles the case where a customer tries to confirm items that do not match the translated content.", "input": {"customer": "Michael Johnson", "loggedIn": true, "uploadedList": "grocery_list_image_789", "confirmedItems": ["Butter", "Soda"], "proceedToCheckout": false, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order confirmation failed", "status": "Invalid items confirmation"}}, {"name": "Customer Not Logged In", "description": "Verify that the system prevents a customer from placing an order if they are not logged in.", "input": {"customer": "Anna Lee", "loggedIn": false, "uploadedList": "grocery_list_image_456", "confirmedItems": ["Bananas", "Oranges"], "proceedToCheckout": true, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order placement failed", "status": "Login required"}}, {"name": "Twilio API Failure", "description": "Verify that the system handles the case when the Twilio API fails to send the order notification to the vendor.", "input": {"customer": "Evelyn White", "loggedIn": true, "uploadedList": "grocery_list_image_654", "confirmedItems": ["Chicken", "Rice"], "proceedToCheckout": true, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order placed successfully, but vendor notification failed", "status": "Order processing with notification error", "message": "Vendor notification via Twilio failed. Please contact support."}}, {"name": "Image Upload Failure", "description": "Verify that the system handles the case where the customer tries to upload a grocery list image but the upload fails.", "input": {"customer": "Sophia Green", "loggedIn": true, "uploadedList": "failed_upload", "confirmedItems": [], "proceedToCheckout": false, "vendorNotificationMethod": "Twilio"}, "expected": {"outcome": "Order placement failed", "status": "Image upload error", "message": "Failed to upload the grocery list image. Please try again."}}]}, {"usecase": {"name": "Vendor Processes an Order", "scenario": "A vendor receives and fulfills a customer's grocery order on the online store platform.", "actors": "Vendor", "preconditions": "Vendor is logged in and has received a new order notification.", "steps": ["Vendor reviews the details of the customer's order including the translated content.", "Vendor confirms the availability of the listed items and determines the delivery or pickup options.", "Vendor marks the order as processed and ready for delivery or pickup."]}, "testcases": [{"name": "Valid Order Processing", "description": "Verify that a vendor can successfully review, confirm, and mark an order as processed for delivery or pickup.", "input": {"orderDetails": {"orderID": "98765", "customerName": "John Doe", "items": [{"itemName": "Organic Apples", "quantity": 2}, {"itemName": "Whole Wheat Bread", "quantity": 1}, {"itemName": "Greek Yogurt", "quantity": 3}], "deliveryOption": "Home Delivery"}, "availabilityConfirmation": true, "deliveryOrPickup": "Delivery"}, "expected": {"outcome": "Order marked as processed and ready for delivery", "status": "Processed"}}, {"name": "Invalid Availability Confirmation", "description": "Verify that the system handles the case where a vendor cannot confirm the availability of the listed items in the order.", "input": {"orderDetails": {"orderID": "54321", "customerName": "Jane Smith", "items": [{"itemName": "Fresh Salmon", "quantity": 2}], "deliveryOption": "Store Pickup"}, "availabilityConfirmation": false, "deliveryOrPickup": "Pickup"}, "expected": {"outcome": "Order cannot be processed due to unavailability of items", "status": "Not Available"}}]}, {"usecase": {"name": "Automated Language Translation in Online AI Assisted Grocery Store for Elderly", "scenario": "The system automatically translates the handwritten grocery list image into the preferred language for both customers and vendors.", "actors": "System", "preconditions": "Handwritten grocery list image is uploaded by the customer or received by the vendor.", "steps": ["The system processes the uploaded image using Google Cloud Vision API to extract the text content.", "The system translates the extracted text into the preferred language selected by the customer or vendor.", "The translated content is displayed for review and confirmation by the respective user."]}, "testcases": [{"name": "Valid Image Translation", "description": "Verify that the system accurately translates the handwritten grocery list image into the preferred language.", "input": {"imageURL": "https://example.com/handwritten-list.jpg", "language": "Spanish"}, "expected": {"outcome": "Text successfully translated into Spanish", "reviewRequired": true}}, {"name": "Unsupported Image Format", "description": "Verify that the system handles unsupported image formats during translation processing.", "input": {"imageURL": "https://example.com/unsupported-format.doc", "language": "French"}, "expected": {"outcome": "Unsupported image format", "userPrompt": "System prompts the user to upload a supported image format (e.g., JPEG, PNG)"}}, {"name": "Invalid Language Selection", "description": "Verify that the system handles invalid language selections during translation processing.", "input": {"imageURL": "https://example.com/handwritten-list.jpg", "language": "InvalidLanguage"}, "expected": {"outcome": "Invalid language selection", "userPrompt": "System prompts the user to select a valid language for translation"}}]}, {"usecase": {"name": "Customer Support via Twilio on Online AI Assisted Grocery Store for Elderly", "scenario": "The system provides customer support and order notifications using Twilio API.", "actors": "System, Customer", "preconditions": "Customer places an order or requires assistance.", "steps": ["The system sends order confirmation and updates to the customer via SMS using Twilio API.", "The system notifies the customer about the order status, delivery details, and other relevant updates through automated messages."]}, "testcases": [{"name": "Send Order Confirmation via Twilio", "description": "Verify that the system successfully sends order confirmation to the customer via SMS using Twilio API.", "input": {"orderDetails": {"orderID": "12345", "customerPhoneNumber": "123-456-7890", "messageContent": "Thank you for placing your order with us. Your order #12345 has been confirmed."}}, "expected": {"outcome": "Order confirmation message sent successfully", "status": "Success"}}, {"name": "Send Order Status Update via Twilio", "description": "Verify that the system can notify the customer about the order status and delivery details through automated messages using Twilio API.", "input": {"orderStatusUpdate": {"orderID": "12345", "customerPhoneNumber": "123-456-7890", "messageContent": "Your order #12345 is out for delivery. Expected delivery time is 3:00 PM today."}}, "expected": {"outcome": "Order status update message sent successfully", "status": "Success"}}]}, {"usecase": {"name": "Receive Input Excel File (Module: Currency Conversion in Banking Backend using Google Live Data)", "scenario": "The currency conversion team receives an input Excel file containing currency conversion data.", "actors": ["Currency Conversion Team"], "preconditions": "An input Excel file containing currency conversion data is available.", "steps": ["The currency conversion team obtains the input Excel file from the source.", "The team verifies the integrity and correctness of the data within the Excel file."]}, "testcases": [{"name": "Obtain Input Excel File Successfully", "description": "Verify that the currency conversion team can successfully obtain the input Excel file from the source.", "input": {"fileLocation": "/data/source/currency_conversion_data.xlsx"}, "expected": {"outcome": "Input Excel file obtained successfully", "status": "File available for verification"}}, {"name": "File Not Found Error", "description": "Verify the system handles the case where the input Excel file is not found at the specified location.", "input": {"fileLocation": "/data/source/missing_file.xlsx"}, "expected": {"outcome": "Failed to obtain Excel file", "status": "File not found error"}}, {"name": "Verify Data Integrity Successfully", "description": "Verify that the currency conversion team can successfully verify the integrity and correctness of the data within the Excel file.", "input": {"fileData": "Valid currency conversion data with no errors"}, "expected": {"outcome": "Data integrity verified", "status": "Data ready for currency conversion"}}, {"name": "Data Corruption Error", "description": "Verify the system handles the case where the Excel file data is corrupted or contains unreadable information.", "input": {"fileData": "Corrupted data with unreadable content"}, "expected": {"outcome": "Data integrity verification failed", "status": "Data corruption error"}}, {"name": "Invalid Data Format Error", "description": "Verify the system handles the case where the Excel file contains data in an incorrect format that cannot be processed.", "input": {"fileData": "Data with invalid currency codes or incorrect numerical values"}, "expected": {"outcome": "Data verification failed", "status": "Invalid data format error"}}, {"name": "Empty Excel File", "description": "Verify that the system handles the case where the input Excel file is empty.", "input": {"fileData": "Empty Excel file with no content"}, "expected": {"outcome": "Data integrity verification failed", "status": "Empty file error"}}]}, {"usecase": {"name": "Retrieve Live Data from Google (Module: Currency Conversion in Banking Backend using Google Live Data)", "scenario": "The system retrieves live currency conversion data from Google.", "actors": ["System"], "preconditions": "The system is connected to the internet and has access to Google's live data.", "steps": ["The system triggers a request to Google for live currency conversion data.", "Google's live data is fetched and validated for accuracy and reliability."]}, "testcases": [{"name": "Valid Currency Conversion Request", "description": "Verify that the system can trigger a valid request to Google for live currency conversion data.", "input": {"currencyPairs": ["USD/EUR", "CAD/USD"], "googleAPIEndpoint": "https://api.google.com/currency_conversion", "requestTimestamp": "2024-10-16T08:00:00Z"}, "expected": {"outcome": "Request successful", "status": "Data fetched from Google"}}, {"name": "Invalid Internet Connection", "description": "Verify the system's response when the internet connection is unavailable during a data retrieval attempt.", "input": {"currencyPairs": ["USD/JPY"], "internetConnectionStatus": "Disconnected", "requestTimestamp": "2024-10-16T08:05:00Z"}, "expected": {"outcome": "Request failed", "status": "No response from Google due to lack of connectivity"}}, {"name": "Inaccurate Data Validation", "description": "Verify the system's response when the live data fetched from Google is inaccurate or does not match expected values.", "input": {"currencyPairs": ["GBP/USD"], "fetchedDataAccuracy": "Data Inaccurate", "requestTimestamp": "2024-10-16T08:10:00Z"}, "expected": {"outcome": "Data validation failed", "status": "Inaccurate data identified from Google"}}, {"name": "Invalid or Incomplete input", "description": "Verify the system's response when input data is invalid or incomplete.", "input": {"currencyPairs": ["ABCD/XYZA"], "fetchedDataAccuracy": "Currency not found", "requestTimestamp": "2024-10-16T08:10:00Z"}, "expected": {"outcome": "Invalid input", "status": "Input was invalid"}}]}, {"usecase": {"name": "Automatic Currency Conversion in a Currency Conversion Module in Banking Backend using Google Live Data", "scenario": "The system automatically processes the currency conversion based on the retrieved live data (specified by user by an Excel file).", "actors": "System", "preconditions": "Input Excel file and live currency conversion data from Google are available.", "steps": ["The system reads the currency conversion data from the input Excel file.", "Using the live data from Google, the system performs the currency conversion for each entry in the Excel file.", "The converted currency values are recorded and validated by the system."]}, "testcases": [{"name": "Valid Currency Conversion", "description": "Verify that the system accurately processes the currency conversion based on live exchange data.", "input": {"excelFile": "currency_data.xlsx", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=EUR"}, "expected": {"outcome": "Currency conversion successful", "validation": "Currency values recorded and validated"}}, {"name": "Missing Excel File", "description": "Verify that the system handles the case where the input Excel file is missing.", "input": {"excelFile": "", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=EUR"}, "expected": {"outcome": "Currency conversion failed", "validation": "No currency values recorded"}}, {"name": "Invalid Live Currency Data", "description": "Verify that the system handles the case where the live currency data from Google is invalid or inaccessible.", "input": {"excelFile": "currency_data.xlsx", "liveCurrencyData": "InvalidURL"}, "expected": {"outcome": "Currency conversion failed", "validation": "No currency values recorded"}}, {"name": "Corrupted Excel File", "description": "Verify the system's behavior when the input Excel file is corrupted or unreadable.", "input": {"excelFile": "corrupted_currency_data.xlsx", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=EUR"}, "expected": {"outcome": "Currency conversion failed", "validation": "Error message displayed: 'Unable to read Excel file'"}}, {"name": "Currency Mismatch in Excel and Live Data", "description": "Verify the system's response when the currency pairs in the Excel file do not match the live currency data from Google.", "input": {"excelFile": "currency_data_with_mismatch.xlsx", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=JPY"}, "expected": {"outcome": "Currency conversion failed", "validation": "Mismatch error: Currency pairs do not align with the data from Google"}}, {"name": "Network Timeout During Data Retrieval", "description": "Verify the system's behavior when there is a network timeout while trying to retrieve live data from Google.", "input": {"excelFile": "currency_data.xlsx", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=EUR", "networkStatus": "Timeout"}, "expected": {"outcome": "Currency conversion failed", "validation": "Error message displayed: 'Network timeout while retrieving live data'"}}, {"name": "Partial Data Availability", "description": "Verify the system's response when only partial live currency data is available during conversion.", "input": {"excelFile": "currency_data_partial.xlsx", "liveCurrencyData": "https://www.google.com/finance/converter?from=USD&to=EUR", "dataCompleteness": "Partial"}, "expected": {"outcome": "Currency conversion partially successful", "validation": "Warning message displayed: 'Partial data retrieved, conversion results may be incomplete'"}}]}, {"usecase": {"name": "Validate Currency Conversion Results (Module: Currency Conversion in Banking Backend using Google Live Data)", "scenario": "The system validates the results of the automated currency conversion.", "actors": "System", "preconditions": "Automated currency conversion tasks have been completed.", "steps": ["The system performs a validation check on the converted currency values.", "Any discrepancies or potential errors are flagged for review.", "Validated currency conversion results are ready for further processing."]}, "testcases": [{"name": "Valid Currency Conversion Validation", "description": "Verify that the system accurately validates the converted currency values.", "input": {"convertedCurrencies": {"USD": 100, "EUR": 85}}, "expected": {"outcome": "Validation successful", "status": "Ready for Further Processing"}}, {"name": "Flagged Potential Errors", "description": "Verify that the system flags potential errors in the currency conversion validation process.", "input": {"convertedCurrencies": {"USD": 100, "EUR": 60}}, "expected": {"outcome": "Potential errors flagged", "status": "Flagged for Review"}}, {"name": "Missing Conversion Data", "description": "Verify that the system handles missing currency conversion data appropriately.", "input": {"convertedCurrencies": {"USD": 100, "EUR": null}}, "expected": {"outcome": "Validation failed", "status": "Missing data flagged for review"}}, {"name": "Negative Conversion Value", "description": "Verify that the system correctly identifies and handles negative currency conversion values.", "input": {"convertedCurrencies": {"USD": 100, "EUR": -85}}, "expected": {"outcome": "Validation failed", "status": "Negative values flagged for review"}}, {"name": "Zero Conversion Value", "description": "Verify the system's behavior when a currency conversion value is zero.", "input": {"convertedCurrencies": {"USD": 100, "EUR": 0}}, "expected": {"outcome": "Validation failed", "status": "Zero value flagged for review"}}, {"name": "Unusually High Conversion Value", "description": "Verify that the system flags unusually high currency conversion values as potential errors.", "input": {"convertedCurrencies": {"USD": 100, "EUR": 10000}}, "expected": {"outcome": "Potential errors flagged", "status": "High values flagged for review"}}]}, {"usecase": {"name": "Search and Download Journals", "scenario": "A user searches defined websites for specific topics and downloads journals and white papers.", "actors": ["User", "System"], "preconditions": "User has access to the system and defined websites for journal search and download.", "steps": ["User enters the specified search topics or keywords for journals and white papers.", "The system retrieves the relevant journals and white papers from the defined websites.", "User selects the journals and white papers to download."]}, "testcases": [{"name": "Valid Journal Search and Download", "description": "Verify that a user can successfully search for specific topics and download journals and white papers.", "input": {"search_topics": "machine learning", "websites": ["www.journal1.com", "www.journal2.com"]}, "expected": {"outcome": "Journals and white papers downloaded successfully", "status": "Downloaded"}}, {"name": "Empty Search Topics", "description": "Verify that the system handles the case where the user performs a search without entering any topics or keywords.", "input": {"search_topics": "", "websites": ["www.journal1.com"]}, "expected": {"outcome": "No relevant journals or white papers found", "status": "Failed"}}, {"name": "Invalid Website", "description": "Verify that the system handles the case where the defined website for journal search is invalid.", "input": {"search_topics": "data analysis", "websites": ["invalidwebsite"]}, "expected": {"outcome": "No relevant journals or white papers found", "status": "Failed"}}]}, {"usecase": {"name": "Extract Journal Publication Details", "scenario": "The system extracts specific details from downloaded journals and white papers (provided by user).", "actors": ["System"], "preconditions": "Journals and white papers are downloaded and accessible for extraction.", "steps": ["The system extracts the Date of Publication, Author, Heading/Topic, and Year of Publish from the downloaded journals.", "The system identifies the Country of Publish for each journal.", "The system summarizes the content of the entire journal or paper.", "The system organizes the extracted details into an excel file."]}, "testcases": [{"name": "Valid Journal Details Extraction", "description": "Verify that the system successfully extracts required details from the downloaded journal.", "input": {"journal_file": "journal.pdf"}, "expected": {"outcome": "Extraction successful", "details_extracted": {"date_of_publication": "2022-01-15", "author": "John Doe", "heading_topic": "Advancements in AI", "year_of_publish": 2022, "country_of_publish": "United States", "content_summary": "This is a summary of the content."}}}, {"name": "Invalid Journal File", "description": "Verify that the system handles the case where an invalid or unsupported file format is provided for extraction.", "input": {"journal_file": "journal.docx"}, "expected": {"outcome": "Extraction failed", "reason": "Unsupported file format"}}, {"name": "Missing Author Information", "description": "Verify that the system handles the case where the author information is missing in the journal.", "input": {"journal_file": "journal.pdf"}, "expected": {"outcome": "Extraction failed", "reason": "Missing author information"}}, {"name": "Empty Journal File", "description": "Verify that the system handles the case where an empty journal file is provided for extraction.", "input": {"journal_file": ""}, "expected": {"outcome": "Extraction failed", "reason": "Empty journal file"}}]}, {"usecase": {"name": "Receive Business Travel Information", "scenario": "The 'Easy Business Tour' system receives business travel information of an employee or group of employees via email.", "actors": "System, Employee/Group of Employees", "preconditions": "The email containing business travel information must be sent to the specified email address or system.", "steps": ["System monitors the specified email address for incoming travel information emails.", "System parses the email content to extract date, time range, source, destination, and number of passengers for the travel.", "System validates the received travel information data."]}, "testcases": [{"name": "Valid Business Travel Information Received", "description": "Verify that the system successfully receives and processes valid business travel information email content.", "input": {"emailContent": "From: company@abc.com, To: travel@company.com, Date: 2024-08-05, Time Range: 09:00-16:00, Source: City A, Destination: City B, Passengers: 1"}, "expected": {"outcome": "Travel information processed successfully", "status": "Email content validated"}}, {"name": "Invalid Business Travel Information Received", "description": "Verify that the system handles invalid or improperly formatted business travel information emails.", "input": {"emailContent": "Subject: Urgent Travel, Body: Details attached"}, "expected": {"outcome": "Invalid travel information received", "status": "Error parsing email content"}}, {"name": "Empty Email Content", "description": "Verify that the system handles an email with empty content gracefully.", "input": {"emailContent": ""}, "expected": {"outcome": "No travel information found", "status": "Error: Email content is empty"}}, {"name": "Missing Required Fields", "description": "Verify that the system handles emails that are missing essential fields like date or destination.", "input": {"emailContent": "From: company@abc.com, To: travel@company.com, Time Range: 09:00-16:00, Source: City A, Passengers: 1"}, "expected": {"outcome": "Travel information incomplete", "status": "Error: Missing required fields (e.g., Date, Destination)"}}, {"name": "Invalid Date Format", "description": "Verify that the system handles an email with an improperly formatted date.", "input": {"emailContent": "From: company@abc.com, To: travel@company.com, Date: August 5th, 2024, Time Range: 09:00-16:00, Source: City A, Destination: City B, Passengers: 1"}, "expected": {"outcome": "Invalid date format", "status": "Error: Unable to parse the date"}}, {"name": "Non-numeric Passengers Field", "description": "Verify that the system handles cases where the number of passengers is not a numeric value.", "input": {"emailContent": "From: company@abc.com, To: travel@company.com, Date: 2024-08-05, Time Range: 09:00-16:00, Source: City A, Destination: City B, Passengers: one"}, "expected": {"outcome": "Invalid number of passengers", "status": "Error: Passengers field must be numeric"}}]}, {"usecase": {"name": "Display Available Flights", "scenario": "A system named 'Easy Business Tour' receives travel information (source, destination, people count, date range) through email, parses the info. Now the system displays available flights for the specified date, time range, source, and destination.", "actors": "System, Employee/Group of Employees", "preconditions": "The travel information must be successfully received and validated.", "steps": ["System processes the received travel information to search for available flights matching the criteria.", "System retrieves and displays a list of available flights with relevant details such as airlines, departure/arrival times, and seat availability."]}, "testcases": [{"name": "Valid Display of Available Flights", "description": "Verify that the system displays available flights for the specified date, time range, source, and destination when valid travel information is received.", "input": {"source": "SFO", "destination": "JFK", "date": "2023-08-15", "timeRange": "morning to afternoon"}, "expected": {"outcome": "Available flights displayed", "details": "List of flights with relevant details shown", "status": 200}}, {"name": "No Flights Available", "description": "Verify that the system handles the scenario where no flights are available for the specified criteria.", "input": {"source": "ABC", "destination": "XYZ", "date": "2024-01-01", "timeRange": "evening"}, "expected": {"outcome": "No flights available", "message": "No flights matched the specified criteria", "status": 404}}]}, {"usecase": {"name": "Reserve Ticket for Customer(s)", "scenario": "The 'Easy Business Tour' system reserves the flight ticket for the customer(s) based on the selected flight from the options provided by the system after it was provided the source, destination, and date range.", "actors": "System, Employee/Group of Employees", "preconditions": "Available flights must be displayed and a specific flight must be selected by the employee/group of employees.", "steps": ["Employee/Group of Employees selects a flight from the displayed available options.", "System processes the reservation request and updates the seat availability for the selected flight.", "System completes the ticket reservation for the customer(s) based on the provided details."]}, "testcases": [{"name": "Successful Reservation", "description": "Verify that the system successfully reserves the ticket for the customer(s) based on the selected flight.", "input": {"selectedFlight": "ABC123", "customerDetails": {"name": "John Doe", "seatNumber": "A3", "class": "Business"}}, "expected": {"outcome": "Reservation successful", "status": "Confirmed", "seatAvailabilityUpdated": true}}, {"name": "Invalid Flight Selection", "description": "Verify that the system handles the case where an invalid or non-existent flight is selected.", "input": {"selectedFlight": "InvalidFlight", "customerDetails": {"name": "Jane Smith", "seatNumber": "B7", "class": "Economy"}}, "expected": {"outcome": "Reservation failed", "status": "Invalid flight selected", "seatAvailabilityUpdated": false}}]}, {"usecase": {"name": "Send Flight Ticket", "scenario": "The 'Easy Business Tour' system sends the reserved flight ticket to the concerned email-id from where the booking request was sent.", "actors": "System, Employee/Group of Employees", "preconditions": "The flight ticket must be successfully reserved for the customer(s).", "steps": ["System generates the flight ticket with all necessary details for the reserved booking.", "System sends the flight ticket to the email address from which the initial booking request was received."]}, "testcases": [{"name": "Successful Ticket Send", "description": "Verify that the system successfully sends the flight ticket to the customer's email after a valid booking.", "input": {"reservationId": "R12345", "emailAddress": "customer@example.com"}, "expected": {"outcome": "Ticket sent successfully", "status": "Success"}}, {"name": "Invalid Reservation ID", "description": "Verify the system's response when trying to send a ticket with an invalid reservation ID.", "input": {"reservationId": "invalid_id", "emailAddress": "customer@example.com"}, "expected": {"outcome": "Invalid reservation ID", "status": "Failed"}}, {"name": "Invalid Email Address", "description": "Verify the system's response when trying to send a ticket to an invalid email address.", "input": {"reservationId": "R54321", "emailAddress": "invalid_email"}, "expected": {"outcome": "Invalid email address", "status": "Failed"}}]}, {"usecase": {"name": "Request New Proposal of Date/Time", "scenario": "If the booking request cannot be processed successfully by 'Easy Business Tour' system (automated flight ticket booking based on passanger info), the system requests a new proposal of date/time from the requesting team.", "actors": "System, Employee/Group of Employees", "preconditions": "The system must encounter an issue while processing the booking request.", "steps": ["System identifies the issue in the received travel information or reservation process.", "System sends a request to the employee/group of employees for a new proposal of date/time due to the encountered issue."]}, "testcases": [{"name": "Successful Processing of Booking Request", "description": "Verify that the system successfully processes the booking request without encountering any issues, and no new proposal of date/time is requested.", "preconditions": "No issues encountered while processing the booking request", "input": {"issueEncountered": "No", "travelInformation": "Valid travel details"}, "expected": {"outcome": "Booking request processed successfully", "newProposalRequested": "No"}}, {"name": "Failed Processing of Booking Request - New Proposal Requested", "description": "Verify that the system requests a new proposal of date/time when encountering an issue while processing the booking request.", "preconditions": "Issue encountered while processing the booking request", "input": {"issueEncountered": "Yes", "issueDetails": "Invalid travel date"}, "expected": {"outcome": "New proposal of date/time requested", "reason": "Issue encountered in the travel information or reservation process"}}]}, {"usecase": {"name": "User Enrollment in Facial Recognition System", "scenario": "A user enrolls in the facial recognition system for the first time.", "actors": "User", "preconditions": "User intends to enroll in the facial recognition system.", "steps": ["User initiates enrollment process in the system.", "User provides personal biometric data (e.g., facial scan, iris scan).", "System validates and stores the biometric data associated with the user's identity."]}, "testcases": [{"name": "Valid User Enrollment", "description": "Verify that a user can successfully enroll in the facial recognition system by providing valid biometric data.", "input": {"biometricData": {"facialScan": "valid facial scan data", "irisScan": "valid iris scan data"}}, "expected": {"outcome": "Enrollment successful", "status": "Validated"}}, {"name": "Invalid User Enrollment - Missing Biometric Data", "description": "Verify that the system rejects user enrollment when biometric data is missing.", "input": {"biometricData": {"facialScan": "", "irisScan": "valid iris scan data"}}, "expected": {"outcome": "Enrollment failed", "error": "Missing biometric data"}}, {"name": "Invalid User Enrollment - Invalid Biometric Data", "description": "Verify that the system rejects user enrollment when invalid biometric data is provided.", "input": {"biometricData": {"facialScan": "unclear image", "irisScan": "unsupported format"}}, "expected": {"outcome": "Enrollment failed", "error": "Invalid biometric data"}}]}, {"usecase": {"name": "User Authentication using Facial Recognition System", "scenario": "A registered user is authenticated using facial recognition.", "actors": "User", "preconditions": "User is registered in the facial recognition system.", "steps": ["User stands before the facial recognition device for authentication.", "Facial recognition system captures and processes user's facial features.", "System compares the captured features with the stored biometric data of the user.", "System grants access if the features match within a certain threshold."]}, "testcases": [{"name": "Successful Facial Authentication", "description": "Verify that a registered user can successfully authenticate using facial recognition.", "input": {"user": "registered_user_id", "facialFeatures": "captured_facial_data"}, "expected": {"outcome": "User successfully authenticated", "status": "Access granted"}}, {"name": "Facial Authentication Threshold", "description": "Verify that the system denies access if the facial features do not match within the specified threshold.", "input": {"user": "registered_user_id", "facialFeatures": "different_captured_facial_data"}, "expected": {"outcome": "Facial features do not match within threshold", "status": "Access denied"}}]}, {"usecase": {"name": "Real-Time Identification of Individual Using Facial Recognition", "scenario": "The facial recognition system identifies individuals in real-time.", "actors": "Facial Recognition System", "preconditions": "System is operational and actively monitoring for individuals.", "steps": ["Facial recognition system continuously scans the environment for faces.", "Upon detection of a face, the system captures facial features and processes them.", "System matches the captured features against the stored biometric data of enrolled users.", "If a match is found, the system identifies the individual in real-time."]}, "testcases": [{"name": "Valid Individual Identification", "description": "Verify that the system correctly identifies a recognized individual in real-time.", "input": {"scenario": "Recognition of an enrolled user's face", "biometricData": "Enrolled user's facial features"}, "expected": {"outcome": "Individual successfully identified in real-time", "status": "Match found"}}, {"name": "Invalid Individual Identification", "description": "Verify that the system handles unenrolled/unrecognized individual appropriately.", "input": {"scenario": "Recognition of an unenrolled/unrecognized face", "biometricData": "Unenrolled/unrecognized individual's facial features"}, "expected": {"outcome": "Individual not identified in real-time", "status": "No match found"}}]}, {"usecase": {"name": "Secure and Swift Verification using Facial Recognition", "scenario": "The facial recognition system verifies individuals swiftly and securely.", "actors": "Facial Recognition System", "preconditions": "System is available for verification purposes.", "steps": ["Individual presents themselves before the facial recognition device for verification.", "Facial recognition system swiftly captures and processes the facial features.", "System compares the features with the stored biometric data of the individual.", "If the features match within the defined threshold, the system securely verifies the individual."]}, "testcases": [{"name": "Successful Verification", "description": "Verify that the facial recognition system can securely and swiftly verify an individual with matching biometric data.", "input": {"capturedFacialFeatures": "facial data in binary format"}, "expected": {"outcome": "Individual successfully verified", "status": "Verified"}}, {"name": "Failed Verification", "description": "Verify that the facial recognition system fails to verify an individual with non-matching biometric data.", "input": {"capturedFacialFeatures": "facial data in binary format"}, "expected": {"outcome": "Individual verification failed", "status": "Not Verified"}}]}, {"usecase": {"name": "Automated Offer Letter Generation (Automated Salary Hike Handling Software)", "scenario": "HR initiates the process of generating offer letters for the salary hike cycle.", "actors": ["HR"], "preconditions": "HR has received and validated the results shared from the managers for the salary hike cycle.", "steps": ["HR triggers the bot to generate offer letters for the salary hike.", "The bot accepts the results shared from the managers.", "The bot checks all pre-defined validations, such as years of experience, allowed percentage hike, and any missed employees for appraisal.", "The bot creates action tickets for HR to follow up on highlighted cases and requests responses from the managers.", "All evidence and communication are stored in the bot's system.", "The bot processes the generation of offer letters in a multi-architecture-based approach to ensure completion within a day."]}, "testcases": [{"name": "Trigger Bot for Offer Letter Generation", "description": "Verify that HR can successfully trigger the bot to generate offer letters for the salary hike cycle.", "input": {"triggeredBy": "HR", "timestamp": "2024-10-19T10:00:00Z"}, "expected": {"outcome": "Bot triggered successfully", "status": "Processing", "responseTime": "Within a few seconds"}}, {"name": "Failed Validation Check - Missed Employee", "description": "Verify that the bot handles the validation failure when an employee is missed for appraisal.", "input": {"employeeData": {"id": "E123", "experienceYears": 3, "appraisalPercentage": 8, "appraisalStatus": "Missed"}}, "expected": {"outcome": "Validation failure detected", "actionRequired": "Create action ticket for HR follow-up", "status": "Pending"}}, {"name": "Failed Validation Check - Invalid Hike Percentage", "description": "Verify that the bot handles validation failure when the appraisal percentage exceeds the allowed limit.", "input": {"employeeData": {"id": "E456", "experienceYears": 5, "appraisalPercentage": 25, "appraisalStatus": "Eligible"}}, "expected": {"outcome": "Validation failure detected (allowed limit of appraisal percentage exceeded)", "actionRequired": "Create action ticket for HR follow-up on invalid hike percentage", "status": "Pending"}}, {"name": "Generation of Offer Letters", "description": "Verify that the bot processes the generation of offer letters within the defined timeframe.", "input": {"architectureType": "Multi-architecture", "employeeBatch": [{"id": "E123", "name": "John Doe"}, {"id": "E456", "name": "Jane Smith"}]}, "expected": {"outcome": "Offer letters generated successfully", "processingTime": "Within a day", "status": "Completed"}}, {"name": "Evidence and Communication Storage", "description": "Verify that the bot stores all relevant evidence and communication related to the offer letter generation process.", "input": {"transactionID": "T7890", "communicationLogs": ["Email sent to manager", "Follow-up action recorded"]}, "expected": {"outcome": "All evidence and communication stored successfully", "status": "Archived"}}]}, {"usecase": {"name": "Employee Detail Update using Automated Salary Hike Handling Software", "scenario": "Updating employee details and mailing all candidates about the salary hike.", "actors": "HR", "preconditions": "Offer letters for the salary hike cycle have been generated.", "steps": ["HR initiates the update of employee details in the system with the new salary and designation.", "HR triggers the bot to send out emails to all the candidates about the salary hike process.", "The bot updates the employee details in the system with the new salary and designation.", "The bot sends out emails to all the candidates about the salary hike."]}, "testcases": [{"name": "Valid Employee Detail Update", "description": "HR updates employee details with new salary and designation", "input": {"employeeDetails": {"employeeID": "E12345", "newSalary": 75000, "newDesignation": "Senior Software Engineer"}, "emailTrigger": "true"}, "expected": {"outcome": "Employee details updated and emails sent to candidates", "updatedDetails": {"employeeID": "E12345", "newSalary": 75000, "newDesignation": "Senior Software Engineer"}, "emailStatus": "Sent"}}, {"name": "Invalid Employee Detail Update", "description": "HR attempts to update employee details without triggering email", "input": {"employeeDetails": {"employeeID": "E54321", "newSalary": 80000, "newDesignation": "Lead Developer"}, "emailTrigger": "false"}, "expected": {"outcome": "Employee details updated but emails not sent", "updatedDetails": {"employeeID": "E54321", "newSalary": 80000, "newDesignation": "Lead Developer"}, "emailStatus": "Not Sent"}}]}, {"usecase": {"name": "Validation Checks in Automated Salary Hike Handling Software", "scenario": "The bot performs validation checks on the salary hike parameters and employee details.", "actors": ["Bot"], "preconditions": "Results for the salary hike cycle are shared by the managers.", "steps": ["The bot checks all the validation rules set for the salary hike process, including years of experience, allowed percentage hike, and any missed employees for appraisal.", "The bot highlights cases that do not meet the pre-defined validations and creates action tickets for HR to follow up.", "The bot requests responses from the managers for the highlighted cases.", "All evidence and communication related to the validation checks are stored in the bot's system."]}, "testcases": [{"name": "Valid Salary Hike Parameters", "description": "Verify the bot's response when all salary hike parameters meet the validation rules.", "input": {"yearsOfExperience": 5, "percentageHike": 10, "missedEmployees": false}, "expected": {"outcome": "All parameters validated successfully.", "status": "Success", "actionTaken": "No action ticket created"}}, {"name": "Invalid Salary Hike Parameters - Low Experience", "description": "Check the bot's action when the employee's experience does not meet the required threshold for a hike.", "input": {"yearsOfExperience": 1, "percentageHike": 15, "missedEmployees": false}, "expected": {"outcome": "Validation failed due to insufficient experience.", "status": "Pending", "actionTaken": "Action ticket created for HR follow-up"}}, {"name": "Invalid Salary Hike Parameters - Missed Employee", "description": "Verify the bot's handling when an employee is missed during the appraisal process.", "input": {"yearsOfExperience": 3, "percentageHike": 8, "missedEmployees": true}, "expected": {"outcome": "Validation failed due to missed appraisal.", "status": "Pending", "actionTaken": "Action ticket created for HR follow-up on missed employee"}}, {"name": "Invalid Salary Hike Parameters - Multiple Issues", "description": "Check how the bot handles cases where multiple validation issues are present for an employee.", "input": {"yearsOfExperience": 0, "percentageHike": 20, "missedEmployees": true}, "expected": {"outcome": "Multiple validation failures detected.", "status": "Pending", "actionTaken": "Action ticket created for HR follow-up on all issues"}}, {"name": "Managers' Response Request", "description": "Verify the bot's behavior when requesting responses from managers for the highlighted cases.", "input": {"highlightedCases": ["EmployeeA", "EmployeeB"], "requestType": "Follow-up inquiry"}, "expected": {"outcome": "Response request sent to managers successfully.", "status": "Pending", "actionTaken": "Awaiting manager's input"}}, {"name": "Storage of Evidence and Communication", "description": "Ensure the bot properly stores all evidence and communication related to validation checks.", "input": {"evidenceType": "Email", "communicationDetails": "Summary of validation issues and action items"}, "expected": {"outcome": "Evidence and communication stored successfully.", "status": "Success", "location": "Bot's secure storage system"}}, {"name": "Data Security Verification", "description": "Verify that all stored evidence and communications are secured in the bot's system.", "input": {"dataAccess": "Unauthorized access attempt"}, "expected": {"outcome": "Access denied", "status": "Success", "securityMeasure": "Data encrypted and protected"}}]}, {"usecase": {"name": "Multi-Architecture Processing in Automated Salary Hike Handling Software", "scenario": "The bot initiates multi-architecture processing for completing the salary hike process.", "actors": "Bot", "preconditions": "All required validations and employee details are updated and verified.", "steps": ["The bot starts the multi-architecture based processing to ensure completion of the salary hike process within a day's time."]}, "testcases": [{"name": "Valid multi-architecture processing", "description": "Verify that the bot can successfully initiate multi-architecture processing for completing the salary hike process", "input": {"processingType": "multi-architecture"}, "expected": {"outcome": "Processing initiated successfully", "status": "Completed within expected time"}}]}, {"usecase": {"name": "Collect Resumes", "scenario": "Human resources collect resumes from various sources.", "actors": ["Human Resources"], "preconditions": "There should be a source of resumes available for collection.", "steps": ["Human Resources access various sources such as job portals, career fairs, and online submissions to collect resumes.", "Resumes are gathered and stored in the company's database or a designated location."]}, "testcases": [{"name": "Valid Resume Collection", "description": "Verify that human resources can successfully collect resumes from various sources.", "input": {"sources": ["Job Portal", "Career Fair", "Online Submissions"]}, "expected": {"outcome": "Resumes collected successfully", "status": "Stored in company's database"}}, {"name": "No Available Resumes", "description": "Verify that the system handles the case where there are no resumes available for collection.", "input": {"sources": []}, "expected": {"outcome": "No resumes available for collection", "status": "Database or designated location remains unchanged"}}, {"name": "Source Connection Failure", "description": "Verify the system's behavior when it cannot connect to a resume source (e.g., job portal) due to network or service issues.", "input": {"sources": ["Job Portal", "Career Fair"]}, "expected": {"outcome": "Failed to connect to Job Portal", "status": "Error: Unable to access resume source"}}, {"name": "Invalid Resume Format", "description": "Verify that the system handles resumes that are in an unsupported or corrupted format.", "input": {"sources": ["Online Submissions"], "resumeFormat": "CorruptedFile.docx"}, "expected": {"outcome": "Invalid or corrupted resume format", "status": "Error: Resume could not be processed"}}, {"name": "Duplicate Resume Detected", "description": "Verify that the system handles duplicate resumes from the same or different sources.", "input": {"sources": ["Job Portal", "Career Fair"], "resumeData": {"applicantName": "John Doe", "resumeID": "12345"}}, "expected": {"outcome": "Duplicate resume detected", "status": "Resume already exists in the database"}}, {"name": "Insufficient Permissions to Access Resume Source", "description": "Verify the system's behavior when human resources do not have the required permissions to access a resume source.", "input": {"sources": ["Job Portal"]}, "expected": {"outcome": "Access denied to Job Portal", "status": "Error: Insufficient permissions"}}, {"name": "Resume Source Unavailable", "description": "Verify the system's behavior when a resume source (e.g., job portal) is temporarily down or unavailable.", "input": {"sources": ["Job Portal"]}, "expected": {"outcome": "Job Portal is currently unavailable", "status": "Error: Resume source not reachable"}}]}, {"usecase": {"name": "Determine Candidates from a list of resumes", "scenario": "The system determines potential candidates from a set of resumes collected from several job portals.", "actors": ["System"], "preconditions": "Resumes must be available in the company's database or designated location.", "steps": ["The system uses OCR (Optical Character Recognition) and UiPath to extract relevant information from the resumes.", "ChatGPT is employed to analyze the extracted information and identify potential candidates based on predefined criteria.", "The system utilizes Amazon Web Services to assist in processing and analyzing the candidate data.", "A list of potential candidates is generated based on the analysis and presented to the human resources team for review."]}, "testcases": [{"name": "Extract Resume Information", "description": "Verify that the system can successfully extract relevant information from the resumes using OCR and UiPath.", "input": {"resumes": "resumes_folder_path"}, "expected": {"outcome": "Information extracted successfully", "status": "Success"}}, {"name": "ChatGPT Analysis", "description": "Verify that the system can accurately identify potential candidates using ChatGPT to analyze the extracted information based on predefined criteria.", "input": {"extractedInfo": "extracted_info.json", "criteria": "criteria_file.json"}, "expected": {"outcome": "Potential candidates identified", "status": "Success"}}, {"name": "AWS Candidate Data Analysis", "description": "Verify that the system can effectively utilize Amazon Web Services to process and analyze the candidate data.", "input": {"candidateData": "candidate_data.json"}, "expected": {"outcome": "Candidate data analyzed", "status": "Success"}}, {"name": "Generate Potential Candidates List", "description": "Verify that a list of potential candidates is correctly generated and presented to the human resources team for review.", "input": {"analysisResults": "analysis_results.json"}, "expected": {"outcome": "List of potential candidates generated", "status": "Success"}}]}, {"usecase": {"name": "Improve Hiring Process of Company", "scenario": "The company implements an assistant software to enhance the hiring process.", "actors": ["Company"], "preconditions": "The assistant software must be developed and integrated into the hiring process.", "steps": ["The company utilizes UiPath, OCR, ChatGPT, and Amazon Web Services to create an assistant software.", "The assistant software streamlines the hiring process by automating repetitive tasks such as resume parsing, candidate evaluation, and initial communications.", "The software assists in scheduling interviews, sending automated updates to candidates, and maintaining candidate engagement throughout the hiring process.", "Human resources team leverages the assistant software to efficiently manage the workflow and improve overall hiring effectiveness."]}, "testcases": [{"name": "Utilize Technologies to Create Assistant Software", "description": "Verify that the company successfully utilizes specified technologies to create the assistant software for the hiring process.", "input": {"technologiesUsed": ["UiPath", "OCR", "ChatGPT", "Amazon Web Services"]}, "expected": {"outcome": "Assistant software developed and integrated into the hiring process", "status": "Ready for use"}}, {"name": "Streamline Hiring Process with Assistant Software", "description": "Verify that the assistant software effectively streamlines the hiring process by automating tasks such as resume parsing, candidate evaluation, and initial communications.", "input": {"automatedTasks": ["resume parsing", "candidate evaluation", "initial communications"]}, "expected": {"outcome": "Hiring process streamlined", "status": "Efficient automation"}}, {"name": "Assist in Interview Scheduling and Candidate Updates", "description": "Verify that the assistant software effectively assists in scheduling interviews, sends automated updates to candidates, and maintains candidate engagement throughout the hiring process.", "input": {"interviewScheduling": true, "automatedUpdates": true, "candidateEngagement": true}, "expected": {"outcome": "Efficient interview scheduling and candidate engagement", "status": "Improved communication"}}, {"name": "Human Resources Workflow Management", "description": "Verify that the human resources team effectively leverages the assistant software to manage the workflow and improve overall hiring effectiveness.", "input": {"utilizationByHR": true}, "expected": {"outcome": "Improved hiring effectiveness", "status": "Efficient workflow management"}}]}, {"usecase": {"name": "Negotiation Facilitation in Online Second-hand Car-Buying System", "scenario": "User negotiates the price of a vehicle through the Trusted Wheels application.", "actors": ["User", "Seller"], "preconditions": "User must be logged in and have selected a vehicle of interest.", "steps": ["User selects a vehicle for purchase", "User initiates negotiation for the price of the vehicle", "The system facilitates the negotiation process by providing a platform for communication between the user and the seller", "Seller responds with a counteroffer or acceptance of the user's proposal", "User and seller reach an agreement on the price"]}, "testcases": [{"name": "Initiate Negotiation", "description": "Verify that the user can initiate a negotiation for the price of a selected vehicle.", "input": {"vehicleID": "V12345", "vehicleSelection": "Honda Civic 2021", "initialOffer": 20000, "userID": "User001"}, "expected": {"outcome": "Negotiation initiated (ID: N56789)", "status": "Negotiation in progress"}}, {"name": "Facilitate Communication", "description": "Verify that the system facilitates communication between the user and the seller during the negotiation process.", "input": {"negotiationID": "N56789", "userID": "User001", "sellerID": "Seller123", "messages": ["User: Can we discuss the price?", "Seller: Sure, what's your offer?"], "timestamp": "2023-10-19T10:30:00Z"}, "expected": {"outcome": "Communication facilitated", "status": "Negotiation ongoing"}}, {"name": "Seller Responds with Counteroffer", "description": "Verify that the seller can respond to the user's proposal with a counteroffer.", "input": {"negotiationID": "N56789", "sellerID": "Seller123", "responseType": "Counteroffer", "counterOfferPrice": 22000, "userID": "User001", "previousOffer": 20000}, "expected": {"outcome": "Counteroffer made", "status": "Negotiation ongoing"}}, {"name": "Seller Accepts User's Proposal", "description": "Verify that the seller can accept the user's proposal for the price of the vehicle.", "input": {"negotiationID": "N56789", "sellerID": "Seller123", "responseType": "Acceptance", "acceptedPrice": 20000}, "expected": {"outcome": "User's proposal accepted", "status": "Negotiation successful"}}, {"name": "Invalid Vehicle Selection", "description": "Verify that the system handles the case when the user attempts to negotiate without selecting a vehicle.", "input": {"initialOffer": 25000, "userID": "User001"}, "expected": {"outcome": "Negotiation failed", "status": "Invalid vehicle selection"}}]}, {"usecase": {"name": "Document Verification in Online Second-hand Car-Buying System", "scenario": "User validates all documents related to the purchased vehicle using the Trusted Wheels application.", "actors": ["User"], "preconditions": "User must have purchased a vehicle after negotiating with the seller through the Trusted Wheels application.", "steps": ["User navigates to the purchased vehicle's profile", "User accesses the documents section", "The system displays the list of documents associated with the vehicle, including invoices, warranty, and claims", "User verifies the authenticity of each document"]}, "testcases": [{"name": "Valid Document Verification", "description": "Verify that the user can successfully authenticate all purchased vehicle documents.", "input": {"vehicleProfileID": "ABC123", "userID": "User001", "documents": [{"documentName": "invoice.pdf", "documentType": "Invoice", "documentHash": "abc123hashvalue", "authenticityStatus": "Valid"}, {"documentName": "warranty.pdf", "documentType": "Warranty", "documentHash": "def456hashvalue", "authenticityStatus": "Valid"}, {"documentName": "claims.pdf", "documentType": "Claims", "documentHash": "ghi789hashvalue", "authenticityStatus": "Valid"}]}, "expected": {"outcome": "All documents are authentic", "status": "Success"}}, {"name": "Invalid Document Verification", "description": "Verify that the user is unable to authenticate a forged or tampered document in the purchased vehicle's profile.", "input": {"vehicleProfileID": "XYZ789", "userID": "User002", "documents": [{"documentName": "invoice.pdf", "documentType": "Invoice", "documentHash": "xyz987hashvalue", "authenticityStatus": "Valid"}, {"documentName": "forged_warranty.pdf", "documentType": "Warranty", "documentHash": "forgedhashvalue123", "authenticityStatus": "Forgery Detected"}, {"documentName": "claims.pdf", "documentType": "Claims", "documentHash": "lmn012hashvalue", "authenticityStatus": "Valid"}]}, "expected": {"outcome": "Forgery detected in one or more documents", "status": "Failure"}}, {"name": "Missing Document Verification", "description": "Verify that the system handles the case when some required documents are missing for the purchased vehicle.", "input": {"vehicleProfileID": "LMN456", "userID": "User003", "documents": [{"documentName": "invoice.pdf", "documentType": "Invoice", "documentHash": "mnop123hashvalue", "authenticityStatus": "Valid"}]}, "expected": {"outcome": "Missing required documents (warranty and claims)", "status": "Incomplete"}}, {"name": "Partial Document Verification", "description": "Verify that the user can partially verify some documents if others are pending verification or flagged as suspicious.", "input": {"vehicleProfileID": "QRS678", "userID": "User004", "documents": [{"documentName": "invoice.pdf", "documentType": "Invoice", "documentHash": "qrst567hashvalue", "authenticityStatus": "Valid"}, {"documentName": "warranty.pdf", "documentType": "Warranty", "documentHash": "pendinghashvalue890", "authenticityStatus": "Pending Verification"}, {"documentName": "claims.pdf", "documentType": "Claims", "documentHash": "suspicioushashvalue345", "authenticityStatus": "Suspicious"}]}, "expected": {"outcome": "Partial verification completed with some documents flagged for review", "status": "Partial Success"}}]}, {"usecase": {"name": "Secure Payment in Online Second-hand Car-Buying System", "scenario": "User makes a payment for a vehicle through the Trusted Wheels application.", "actors": ["User", "Payment Gateway"], "preconditions": "User must have agreed to purchase a vehicle and be ready to make the payment.", "steps": ["User selects the payment option", "User enters the payment details", "The system redirects the user to a secure payment gateway", "User completes the payment using a secure channel", "Payment gateway confirms the transaction"]}, "testcases": [{"name": "Valid Payment for Vehicle Purchase", "description": "Verify that the user can successfully make a secure payment for purchasing a vehicle through the Trusted Wheels application.", "input": {"negotiationID": "N56789", "transactionID": "TXN123456", "paymentDetails": {"amount": 25000, "paymentMethod": "Credit Card"}}, "expected": {"outcome": "Payment successful", "status": "Transaction confirmed"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles the case where the user tries to use an invalid payment method.", "input": {"negotiationID": "N56790", "transactionID": "TXN123457", "paymentDetails": {"amount": 25000, "paymentMethod": "Barter System"}}, "expected": {"outcome": "Payment failed", "status": "Invalid payment method"}}, {"name": "Payment Timeout", "description": "Verify that the system handles the case where the user exceeds the time limit for completing the payment.", "input": {"negotiationID": "N56791", "transactionID": "TXN123458", "paymentDetails": {"amount": 25000, "paymentMethod": "PayPal"}}, "expected": {"outcome": "Payment failed", "status": "Payment timeout"}}]}, {"usecase": {"name": "Vehicle Condition Validation in Online Second-hand Car-Buying System", "scenario": "User validates the condition of a vehicle using the Trusted Wheels application.", "actors": ["User"], "preconditions": "User must have selected a vehicle for potential purchase.", "steps": ["User accesses the vehicle's profile", "The system utilizes AI Object Detection to present an analysis of the vehicle's condition", "User examines the AI analysis to understand the vehicle's condition", "User makes an informed decision based on the analysis"]}, "testcases": [{"name": "Access Vehicle Profile", "description": "Verify that the user can access the profile of the selected vehicle.", "input": {"vehicleID": "V12345"}, "expected": {"outcome": "Vehicle profile accessed", "status": "Success"}}, {"name": "AI Analysis Presentation", "description": "Ensure the system presents an analysis of the vehicle's condition using AI Object Detection.", "input": {"vehicleID": "V12345"}, "expected": {"outcome": "AI analysis presented", "status": "Success"}}, {"name": "Examine AI Analysis", "description": "Confirm that the user can effectively examine the AI analysis to understand the vehicle's condition.", "input": {"vehicleID": "V12345", "aiAnalysisResult": {"damageDetected": false, "mileageEstimate": 30000, "paintCondition": "Good"}}, "expected": {"outcome": "AI analysis examined", "status": "Success"}}, {"name": "Informed Decision", "description": "Validate that the user can make an informed decision based on the AI analysis of the vehicle's condition.", "input": {"vehicleID": "V12345", "aiAnalysisResult": {"damageDetected": false, "mileageEstimate": 30000, "paintCondition": "Good"}}, "expected": {"outcome": "Informed decision made", "status": "Success"}}, {"name": "AI Analysis Failure", "description": "Ensure that the system handles cases where the AI analysis fails or does not provide conclusive results.", "input": {"vehicleID": "V67890"}, "expected": {"outcome": "AI analysis failed", "status": "Error: Unable to analyze vehicle condition"}}, {"name": "Unclear AI Analysis Results", "description": "Verify that the system alerts the user if the AI analysis results are unclear or inconclusive.", "input": {"vehicleID": "V12345", "aiAnalysisResult": {"damageDetected": "Uncertain", "mileageEstimate": "Unknown", "paintCondition": "Inconclusive"}}, "expected": {"outcome": "Unclear AI analysis results", "status": "Warning: AI analysis inconclusive"}}]}, {"usecase": {"name": "Transparency in Trade in Online Second-hand Car-Buying System", "scenario": "User engages in a trade for a vehicle through the Trusted Wheels application.", "actors": ["User", "Seller"], "preconditions": "User must have agreed to purchase a vehicle and be ready to engage in the trade.", "steps": ["User and seller agree on the terms of the trade", "The system facilitates the trade process, ensuring transparency in the transaction", "User and seller complete the trade as agreed", "The system updates the status of the transaction"]}, "testcases": [{"name": "Agree on Trade Terms", "description": "Verify that the user and seller can agree on the terms of the trade.", "input": {"negotiationID": "N45678", "terms": "User agrees to purchase a 2018 Toyota Camry for $15,000 with a full vehicle history report."}, "expected": {"outcome": "Trade terms agreed upon successfully", "status": "Success"}}, {"name": "Transparency in Transaction", "description": "Verify that the system ensures transparency in the trade process.", "input": {"transactionID": "T12345"}, "expected": {"outcome": "Transaction process facilitated with transparency", "status": "Success"}}, {"name": "Complete Trade as Agreed", "description": "Verify that the user and seller can successfully complete the trade as agreed.", "input": {"transactionID": "T12345", "paymentDetails": {"amount": 15000, "paymentMethod": "Credit Card"}}, "expected": {"outcome": "Trade completed as agreed", "status": "Success"}}, {"name": "Update Transaction Status", "description": "Verify that the system updates the status of the transaction.", "input": {"transactionID": "T12345"}, "expected": {"outcome": "Transaction status updated successfully", "status": "Success"}}]}, {"usecase": {"name": "Download Source Files", "scenario": "Downloading source files from multiple locations like shared location, email, etc. of predetermined types", "actors": ["System"], "preconditions": "Availability of source files in the specified locations", "steps": ["System accesses the shared location and downloads the source files", "System retrieves source files from emails and downloads them", "System verifies the integrity of the downloaded files"]}, "testcases": [{"name": "Access Shared Location", "description": "Verify that the system can access the shared location and download the source files", "input": {"location": "shared_location_path", "credentials": "valid_credentials"}, "expected": {"outcome": "Source files downloaded successfully", "status": "Success"}}, {"name": "Retrieve Source Files from Emails", "description": "Verify that the system can retrieve source files from emails and download them", "input": {"email_account": "email_address", "credentials": "valid_credentials"}, "expected": {"outcome": "Source files from emails downloaded successfully", "status": "Success"}}, {"name": "Integrity Verification of Downloaded Files", "description": "Verify that the system can verify the integrity of the downloaded files", "input": {"downloaded_files": ["file1", "file2", "file3"]}, "expected": {"outcome": "Downloaded files integrity verified", "status": "Success"}}, {"name": "Invalid Shared Location Path", "description": "Verify that the system handles an invalid or inaccessible shared location path correctly.", "input": {"location": "invalid_shared_location_path", "credentials": "valid_credentials"}, "expected": {"outcome": "Failed to access shared location", "status": "Error: Invalid or inaccessible location"}}, {"name": "Invalid Credentials for Shared Location", "description": "Verify that the system handles cases where the credentials provided for accessing the shared location are incorrect.", "input": {"location": "shared_location_path", "credentials": "invalid_credentials"}, "expected": {"outcome": "Authentication failed for shared location", "status": "Error: Invalid credentials"}}, {"name": "Email Account Authentication Failure", "description": "Verify that the system handles authentication failure when retrieving source files from emails.", "input": {"email_account": "email_address", "credentials": "invalid_credentials"}, "expected": {"outcome": "Failed to authenticate email account", "status": "Error: Invalid email credentials"}}, {"name": "Email Attachment Missing", "description": "Verify that the system handles scenarios where the expected source file attachments are missing in the email.", "input": {"email_account": "email_address", "credentials": "valid_credentials", "attachments": "none"}, "expected": {"outcome": "No source file attachments found", "status": "Error: Missing attachments in email"}}, {"name": "Corrupted Downloaded File", "description": "Verify that the system handles cases where the downloaded source files are corrupted or incomplete.", "input": {"downloaded_files": ["corrupted_file1", "file2"]}, "expected": {"outcome": "File integrity check failed", "status": "Error: Downloaded file is corrupted"}}, {"name": "Network Interruption During Download", "description": "Verify the system's behavior when there is a network interruption during the download of source files.", "input": {"location": "shared_location_path", "network_status": "disconnected"}, "expected": {"outcome": "Download interrupted", "status": "Error: Network connection lost"}}, {"name": "Unsupported File Type", "description": "Verify that the system handles files with unsupported types that are not allowed to be downloaded.", "input": {"downloaded_files": ["unsupported_file_type.exe"]}, "expected": {"outcome": "Unsupported file type detected", "status": "Error: File type not allowed"}}, {"name": "Insufficient Storage Space", "description": "Verify the system's behavior when there is insufficient storage space to download the source files.", "input": {"location": "shared_location_path", "storage_space": "low"}, "expected": {"outcome": "Download failed due to insufficient storage space", "status": "Error: Not enough disk space"}}]}, {"usecase": {"name": "Data Cleaning and Filtering for Automated Invoice Generation", "scenario": "Cleaning the supplied/downloaded data and filtering rows based on predefined conditions to exclude rows that are not to be billed", "actors": ["System"], "preconditions": "Availability of downloaded source files", "steps": ["System cleans the data from the downloaded files", "System applies predefined conditions to filter out rows that are not to be billed", "System creates an intermediate file with the filtered data"]}, "testcases": [{"name": "Valid Data Cleaning and Filtering", "description": "Verify that the system successfully cleans and filters the data based on predefined conditions", "input": {"source_files": ["file1.csv", "file2.csv"], "predefined_conditions": ["condition1", "condition2"]}, "expected": {"outcome": "Data cleaning and filtering successful", "status": "Complete", "intermediate_file": "filtered_data.csv"}}, {"name": "Missing Source Files", "description": "Verify that the system handles the case when no source files are available for data cleaning and filtering", "input": {"source_files": [], "predefined_conditions": ["condition1", "condition2"]}, "expected": {"outcome": "Data cleaning and filtering failed", "status": "Incomplete", "error_message": "No source files available"}}, {"name": "No Predefined Conditions", "description": "Verify that the system handles the case when no predefined conditions are provided for data filtering", "input": {"source_files": ["file1.csv", "file2.csv"], "predefined_conditions": []}, "expected": {"outcome": "Data cleaning and filtering failed", "status": "Incomplete", "error_message": "No predefined conditions provided"}}]}, {"usecase": {"name": "Calculate Quantity and Amount for Billing from a List of Filterd Billing Files/Sheets", "scenario": "Calculating Quantity and Amount based on given charge rate from the intermediate files (after preprocessing initial files based on preconditions)", "actors": ["System"], "preconditions": "Availability of the intermediate file with filtered data", "steps": ["System retrieves the filtered data from the intermediate file", "System calculates the Quantity and Amount based on the provided charge rates", "System records the calculated Quantity and Amount for each entity"]}, "testcases": [{"name": "Retrieve Filtered Data", "description": "System retrieves the filtered data from the intermediate file", "input": {}, "expected": {"outcome": "Filtered data retrieved successfully", "status": "Success"}}, {"name": "Calculate Quantity and Amount - Valid Charge Rates", "description": "System calculates the Quantity and Amount based on the provided valid charge rates", "input": {"entity": "A", "charge_rate": 10}, "expected": {"outcome": "Quantity and Amount calculated successfully", "status": "Success"}}, {"name": "Calculate Quantity and Amount - Invalid Charge Rates", "description": "System calculates the Quantity and Amount based on the provided invalid charge rates", "input": {"entity": "B", "charge_rate": -5}, "expected": {"outcome": "Invalid charge rate provided", "status": "Error"}}]}, {"usecase": {"name": "Create Invoices from Source Files Containing Quantity and Amount", "scenario": "Creating invoices for each entity in the source file and inserting data into pre-defined invoice templates", "actors": ["System"], "preconditions": "Availability of calculated Quantity and Amount for each entity", "steps": ["System generates individual invoices for each entity using pre-defined templates", "System inserts the calculated Quantity and Amount data into the respective invoice templates", "System validates the created invoices"]}, "testcases": [{"name": "Generate Invoices Without Errors", "description": "Verify that the system can successfully generate invoices for each entity using pre-defined templates and insert calculated Quantity and Amount data without errors.", "input": {"entities": "source_file.csv", "predefinedTemplates": "template_directory"}, "expected": {"outcome": "Invoices generated and validated without errors", "status": "Success"}}, {"name": "Missing Quantity or Amount Data", "description": "Verify that the system handles the scenario where Quantity or Amount data is missing for any entity.", "input": {"entities": "source_file_missing_data.csv", "predefinedTemplates": "template_directory"}, "expected": {"outcome": "Invoice generation failed due to missing Quantity or Amount data", "status": "Failure"}}, {"name": "Invalid Template Directory", "description": "Verify that the system handles the case where the predefined template directory is invalid or inaccessible.", "input": {"entities": "source_file.csv", "predefinedTemplates": "invalid_template_directory"}, "expected": {"outcome": "Invoice generation failed due to invalid template directory", "status": "Failure"}}]}, {"usecase": {"name": "Upload Automatically Generated Invoices to Database", "scenario": "Uploading the created invoices into the database using excel add-ins and generating a transaction number", "actors": ["System"], "preconditions": "Availability of validated invoices", "steps": ["System utilizes excel add-ins to upload the invoices to the database", "System ensures the successful upload of the invoices", "System generates a unique transaction number for each uploaded invoice"]}, "testcases": [{"name": "Valid Invoice Upload", "description": "System uploads validated invoices into the database using excel add-ins and generates a unique transaction number for each invoice.", "input": {"fileFormat": "Excel", "invoices": "validated_invoices.xlsx"}, "expected": {"outcome": "Invoices successfully uploaded and unique transaction numbers generated", "status": "Success"}}, {"name": "Invalid Invoice Format", "description": "System handles the case where an invalid invoice format is used for uploading.", "input": {"fileFormat": "PDF", "invoices": "invalid_format_invoices.pdf"}, "expected": {"outcome": "Invalid invoice format, upload failed", "status": "Failed"}}, {"name": "Corrupted Invoice File", "description": "Verify the system's behavior when attempting to upload a corrupted invoice file.", "input": {"fileFormat": "Excel", "invoices": "corrupted_invoices.xlsx"}, "expected": {"outcome": "Invoice file is corrupted, upload failed", "status": "Error: Corrupted file"}}, {"name": "Database Connection Failure", "description": "Verify the system's response when there is a database connection failure during the invoice upload process.", "input": {"fileFormat": "Excel", "invoices": "validated_invoices.xlsx", "databaseStatus": "disconnected"}, "expected": {"outcome": "Failed to connect to the database", "status": "Error: Database connection error"}}, {"name": "Duplicate Invoice Detection", "description": "Verify the system's handling of duplicate invoices that are already present in the database.", "input": {"fileFormat": "Excel", "invoices": "duplicate_invoices.xlsx"}, "expected": {"outcome": "Duplicate invoices detected, upload aborted", "status": "Failed: Duplicate records"}}, {"name": "Insufficient Permissions for Upload", "description": "Verify the system's behavior when the user does not have the necessary permissions to upload invoices to the database.", "input": {"fileFormat": "Excel", "invoices": "validated_invoices.xlsx", "userPermissions": "insufficient"}, "expected": {"outcome": "Insufficient permissions to upload invoices", "status": "Error: Permission denied"}}]}, {"usecase": {"name": "Send Summary File to the Department", "scenario": "Sending a summary file containing details of the submitted invoices to the department", "actors": ["System"], "preconditions": "Completion of the entire invoicing process", "steps": ["System compiles a summary file with details of the submitted invoices", "System sends the summary file to the respective department for reconciliation"]}, "testcases": [{"name": "Valid Summary File Compilation and Sending", "description": "Verify that the system successfully compiles a summary file and sends it to the department.", "input": {"submittedInvoices": true}, "expected": {"outcome": "Summary file sent to the department", "status": "Success"}}, {"name": "No Invoices Submitted", "description": "Verify that the system handles the case where no invoices have been submitted before compiling the summary file.", "input": {"submittedInvoices": false}, "expected": {"outcome": "No invoices found for compilation", "status": "Failure", "message": "No submitted invoices found to compile the summary"}}, {"name": "File Compilation Error", "description": "Verify that the system handles errors that occur during the summary file compilation process.", "input": {"submittedInvoices": true, "compilationError": true}, "expected": {"outcome": "Error occurred during summary file compilation", "status": "Failure", "message": "Summary file compilation failed due to a system error"}}, {"name": "Department Email Not Configured", "description": "Verify that the system handles the case where the department email address is not configured properly.", "input": {"submittedInvoices": true, "departmentEmailConfigured": false}, "expected": {"outcome": "Failed to send summary file", "status": "Error", "message": "Department email address is not configured"}}, {"name": "Network Issue During Sending", "description": "Verify the system's behavior when a network issue occurs while sending the summary file to the department.", "input": {"submittedInvoices": true, "networkStatus": "disconnected"}, "expected": {"outcome": "Failed to send summary file due to network issue", "status": "Failure", "message": "Unable to send file: Network connectivity error"}}, {"name": "File Corruption Detected", "description": "Verify that the system handles the scenario where the compiled summary file is corrupted before sending.", "input": {"submittedInvoices": true, "fileIntegrity": "corrupted"}, "expected": {"outcome": "Summary file is corrupted and cannot be sent", "status": "Failure", "message": "File integrity check failed"}}, {"name": "Partial Invoice Data", "description": "Verify that the system handles the case where some invoice data is incomplete or missing during the compilation of the summary file.", "input": {"submittedInvoices": true, "invoiceDataCompleteness": "partial"}, "expected": {"outcome": "Partial invoice data detected, summary file compilation halted", "status": "Failure", "message": "Incomplete invoice data, unable to compile summary"}}]}, {"usecase": {"name": "Automated Email Monitoring", "scenario": "The system monitors finance emails for vendor bills and validates them using Document Understanding and AI Centre.", "actors": ["Bot"], "preconditions": "The system has access to the finance emails and the Document Understanding and AI Centre.", "steps": ["The bot checks all the emails received for vendor bills.", "Whitelisted vendors' bills are processed automatically, while other bills are moved to the action center for processing.", "In the action center, the end user can choose to pay the bill or neglect it based on their understanding of the situation.", "If the bot notices a spike in expense from a whitelisted vendor, it moves the expense to the action center for further review."]}, "testcases": [{"name": "Email with Whitelisted Vendor Bill", "description": "Bot receives an email with a vendor bill from a whitelisted vendor.", "input": {"emailContent": "Vendor: ABC Corp\nAmount: $500\nDue Date: 2023-08-31"}, "expected": {"outcome": "Bill processed automatically", "status": "Success"}}, {"name": "Email with Non-Whitelisted Vendor Bill", "description": "Bot receives an email with a vendor bill from a non-whitelisted vendor.", "input": {"emailContent": "Vendor: XYZ Inc\nAmount: $800\nDue Date: 2023-09-15"}, "expected": {"outcome": "Bill moved to action center", "status": "Success"}}, {"name": "Review Spike in Expense", "description": "Bot notices a spike in expense from a whitelisted vendor.", "input": {"expenseDetails": {"vendor": "ABC Corp", "totalExpense": "$10000", "reason": "Spike in expense"}}, "expected": {"outcome": "Expense moved to action center", "status": "Success"}}, {"name": "Email with Invalid Format", "description": "Bot receives an email with a vendor bill in an invalid format.", "input": {"emailContent": "Vendor: ABC Corp\nInvalid Data"}, "expected": {"outcome": "Error detected: Invalid email format", "status": "Failure"}}, {"name": "Bill from Unrecognized Vendor", "description": "Bot receives an email with a vendor bill from an unrecognized vendor.", "input": {"emailContent": "Vendor: Unknown Inc\nAmount: $600\nDue Date: 2023-09-20"}, "expected": {"outcome": "Bill moved to action center for manual review", "status": "Success"}}, {"name": "No Emails Received", "description": "Bot checks for vendor bills but no emails are received.", "input": {"emailContent": ""}, "expected": {"outcome": "No vendor bills to process", "status": "Success"}}, {"name": "High Expense Trigger", "description": "Bot identifies a high expense that triggers a review alert.", "input": {"expenseDetails": {"vendor": "ABC Corp", "totalExpense": "$20000", "reason": "High expense trigger"}}, "expected": {"outcome": "Expense flagged for review in action center", "status": "Success"}}, {"name": "Multiple Bills from the Same Vendor", "description": "Bot processes multiple bills from the same whitelisted vendor.", "input": {"emailContents": ["Vendor: ABC Corp\nAmount: $500\nDue Date: 2023-08-31", "Vendor: ABC Corp\nAmount: $700\nDue Date: 2023-09-10"]}, "expected": {"outcome": "All bills processed automatically", "status": "Success"}}]}, {"usecase": {"name": "Expense Tracking and Monitoring in a Monthly Payment Automation System", "scenario": "The system uses historical expense data to track and monitor the expenses incurred by the company.", "actors": ["Bot"], "preconditions": "The system has access to historical expense data and is integrated with the finance dashboard.", "steps": ["The bot utilizes historical expense data to track and monitor the expenses incurred by the company during the financial years.", "The data is stored in a database and made visible on a dashboard for the finance team for real-time monitoring.", "Real-time monitoring allows the finance team to minutely watch the expenses and avoid late payments."]}, "testcases": [{"name": "Valid Historical Expense Tracking", "description": "Verify that the system successfully utilizes historical expense data to track and monitor the expenses incurred by the company.", "input": {"financialYear": "2021-2022", "expectedExpenses": {"total": 500000, "categoryBreakdown": {"marketing": 150000, "operations": 200000, "R&D": 100000, "other": 50000}}}, "expected": {"outcome": "Historical expense data utilized for tracking and monitoring", "status": "Success"}}, {"name": "Dashboard Visibility", "description": "Ensure that the historical expense data is stored in a database and made visible on a dashboard for real-time monitoring by the finance team.", "input": {"databaseStatus": "Connected", "dashboardUserRole": "Finance Team", "dashboardExpectedView": "Total Expenses, Category Breakdown, Recent Transactions"}, "expected": {"outcome": "Expense data visible on the dashboard for real-time monitoring", "status": "Visible"}}, {"name": "Real-time Monitoring Accuracy", "description": "Validate that the real-time monitoring feature allows the finance team to minutely watch the expenses and avoid late payments.", "input": {"expenseThreshold": 10000, "notificationEnabled": true, "reportingFrequency": "Daily"}, "expected": {"outcome": "Finance team can minutely watch expenses and avoid late payments", "status": "Accurate"}}]}, {"usecase": {"name": "Monthly Bill Payment Processing in a Monthly Payment Automation System", "scenario": "The system processes the monthly bills received from vendors to avoid late fee fines.", "actors": ["Bot", "End User"], "preconditions": "The system has access to the received monthly bills and is integrated with the payment processing capabilities.", "steps": ["The bot processes the bills received from vendors to ensure timely payments.", "Whitelisted vendors' bills are processed automatically, while others are moved to the action center for processing by the end user.", "The end user in the action center can pay the bill or neglect it based on their understanding.", "If any spike in expense from a whitelisted vendor is noticed, the bot moves the expense to the action center for further review."]}, "testcases": [{"name": "Automatic Processing for Whitelisted Vendor", "description": "Verify that the system automatically processes the monthly bill from a whitelisted vendor.", "input": {"vendor": "WhitelistedVendor", "billAmount": 500, "billID": "B12345", "dueDate": "2023-10-31", "paymentStatus": "Unpaid"}, "expected": {"outcome": "Bill processed automatically", "status": "Success"}}, {"name": "Manual Processing for Non-Whitelisted Vendor", "description": "Verify that the system moves the monthly bill from a non-whitelisted vendor to the action center for manual processing by the end user.", "input": {"vendor": "NonWhitelistedVendor", "billAmount": 700, "billID": "B54321", "dueDate": "2023-11-15", "paymentStatus": "Unpaid"}, "expected": {"outcome": "Bill moved to action center", "status": "Pending"}}, {"name": "Payment by End User", "description": "Verify that the end user in the action center can successfully pay the bill.", "input": {"billID": "B98765", "paymentMethod": "CreditCard", "paymentAmount": 500, "userID": "User123", "confirmationStatus": "Pending"}, "expected": {"outcome": "Bill paid by end user", "status": "Completed"}}, {"name": "Neglecting Payment by End User", "description": "Verify that the end user in the action center can neglect to pay the bill.", "input": {"billID": "B98765", "userID": "User123", "neglectReason": "Pending review", "timestamp": "2023-10-19T12:00:00Z"}, "expected": {"outcome": "Bill neglected by end user", "status": "Pending"}}, {"name": "Review by Bot for Spike in Expense", "description": "Verify that the bot moves the expense from a whitelisted vendor to the action center for further review when a spike in expense is noticed.", "input": {"vendor": "WhitelistedVendor", "amountSpent": 1500, "previousAmount": 300, "reasonForSpike": "Unusual activity detected"}, "expected": {"outcome": "Expense moved to action center for review", "status": "Pending"}}]}, {"usecase": {"name": "Integration with Billing System for Automated Retail Inventory Manager System", "scenario": "Integration of the UiPath inventory manager bot with the shop's billing system to trigger the bot in orchestrator upon completion of a billing transaction at the counter.", "actors": ["UiPath Inventory Manager Bot", "Billing System"], "preconditions": "The shop uses a specific billing system that can be integrated with the UiPath inventory manager bot.", "steps": ["The billing system completes a transaction at the counter.", "Upon transaction completion, the billing system triggers the UiPath inventory manager bot in orchestrator."]}, "testcases": [{"name": "Successful Integration Trigger", "description": "Verify that the Billing System successfully triggers the UiPath Inventory Manager Bot upon completion of a billing transaction.", "input": {"transactionID": "TRX987"}, "expected": {"outcome": "Bot triggered successfully", "status": "Completed"}}, {"name": "Invalid Transaction ID", "description": "Verify that the system handles the case where an invalid transaction ID is provided for triggering the bot.", "input": {"transactionID": "InvalidTransactionID"}, "expected": {"outcome": "Bot trigger failed", "status": "Invalid Transaction ID"}}, {"name": "Integration Trigger Error", "description": "Verify that the Billing System triggers the UiPath Inventory Manager Bot in case of an error during transaction completion.", "input": {"transactionID": "TRX123"}, "expected": {"outcome": "Bot triggered due to error", "status": "Completed with errors"}}]}, {"usecase": {"name": "Maintain Centralized Product Repository for an Automated Retail Inventory Manager System with Help from UiPath Inventory Manager Bot", "scenario": "Maintenance of a centralized repository containing the count for all products in the retail shop.", "actors": ["UiPath Inventory Manager Bot"], "preconditions": "A centralized repository system exists to store the count for all the products in the retail shop.", "steps": ["The UiPath inventory manager bot updates the count of items in the centralized repository.", "The repository is regularly synchronized with the actual inventory count in the shop."]}, "testcases": [{"name": "Update Product Count", "description": "Verify the UiPath Inventory Manager Bot can update the count of items in the centralized repository.", "input": {"productID": "P123", "updatedCount": 150}, "expected": {"outcome": "Product count updated in the centralized repository", "status": "Success"}}, {"name": "Synchronize Inventory Count", "description": "Verify that the centralized repository is successfully synchronized with the actual inventory count in the shop.", "input": {}, "expected": {"outcome": "Inventory count in the centralized repository synchronized with actual inventory count", "status": "Success"}}, {"name": "Invalid Product ID", "description": "Verify that the system handles updates when an invalid product ID is provided.", "input": {"productID": "INVALID_ID", "updatedCount": 100}, "expected": {"outcome": "Product ID not found", "status": "Failure"}}, {"name": "Negative Product Count Update", "description": "Verify that the system correctly handles attempts to update a product with a negative count.", "input": {"productID": "P123", "updatedCount": -10}, "expected": {"outcome": "Invalid count value", "status": "Failure"}}, {"name": "Zero Product Count Update", "description": "Verify that the system processes a product count update to zero correctly.", "input": {"productID": "P123", "updatedCount": 0}, "expected": {"outcome": "Product count updated to zero in the centralized repository", "status": "Success"}}, {"name": "System Downtime During Synchronization", "description": "Verify the behavior of the system if synchronization fails due to a system downtime or connectivity issue.", "input": {"synchronizationStatus": "Failed"}, "expected": {"outcome": "Synchronization failed", "status": "Retry or Alert Triggered"}}, {"name": "Concurrent Updates to the Same Product", "description": "Verify how the system handles concurrent updates to the count of the same product in the centralized repository.", "input": {"productID": "P123", "concurrentUpdates": [{"updatedCount": 200}, {"updatedCount": 250}]}, "expected": {"outcome": "Concurrent update conflict handled", "status": "Latest update applied or conflict resolved"}}]}, {"usecase": {"name": "Automated Purchase Order Placement in an Automated Retail Inventory Manager System", "scenario": "Automatic placement of a purchase order for a specific item when its count in the repository reaches a pre-defined threshold value.", "actors": ["UiPath Inventory Manager Bot", "Vendor"], "preconditions": "The UiPath inventory manager bot has access to vendor information and can place automated purchase orders.", "steps": ["The UiPath inventory manager bot monitors the item counts in the repository.", "When the count of a specific item reaches the pre-defined threshold value, the bot automatically places a purchase order for that item with the specific vendor."]}, "testcases": [{"test_case": "Monitor Item Counts", "description": "Verify that the UiPath inventory manager bot monitors the item counts in the repository.", "input": {}, "expected": {"outcome": "Item counts are being monitored", "status": "Success"}}, {"test_case": "Threshold Reached", "description": "Verify that the bot detects when the count of a specific item reaches the pre-defined threshold value.", "input": {"item_id": "ITM123", "threshold_value": 50, "current_value": 46}, "expected": {"outcome": "Threshold value reached for item ITM123", "status": "Success"}}, {"test_case": "Automated Purchase Order Placement", "description": "Verify that the bot automatically places a purchase order with the specific vendor when the count of a specific item reaches the pre-defined threshold value.", "input": {"item_id": "ITM123", "vendor_id": "VEND456"}, "expected": {"outcome": "Purchase order placed with vendor VEND456 for item ITM123", "status": "Success"}}, {"test_case": "No Vendor Found", "description": "Verify that the bot handles the scenario where no vendor is available for the item when a purchase order is needed.", "input": {"item_id": "ITM789", "vendor_id": ""}, "expected": {"outcome": "Purchase order not placed", "status": "Failure - No vendor available"}}, {"test_case": "Threshold Not Reached", "description": "Verify that the bot does not place a purchase order if the item count does not reach the pre-defined threshold value.", "input": {"item_id": "ITM123", "threshold_value": 100, "current_count": 80}, "expected": {"outcome": "No purchase order placed", "status": "Success - Threshold not met"}}, {"test_case": "Concurrent Order Placements", "description": "Verify how the system handles concurrent purchase order requests for the same item due to simultaneous threshold breaches.", "input": {"item_id": "ITM123", "vendor_id": "VEND456", "concurrentOrders": 2}, "expected": {"outcome": "One purchase order placed with vendor VEND456 for item ITM123", "status": "Success - Duplicate orders avoided"}}, {"test_case": "Invalid Item ID", "description": "Verify that the system handles an invalid item ID when attempting to monitor or place a purchase order.", "input": {"item_id": "INVALID_ITEM_ID"}, "expected": {"outcome": "Error detected", "status": "Failure - Invalid item ID"}}]}, {"usecase": {"name": "CCTV Footage Analysis", "scenario": "The system detects and analyzes accidents in real-time using CCTV footage.", "actors": ["System"], "preconditions": "CCTV footage of the area is available and accessible to the system.", "steps": ["The system continuously monitors the CCTV footage for any signs of accidents.", "Upon identifying a potential accident, the system captures relevant footage for analysis.", "The system employs computer vision and image processing algorithms, utilizing AI models for efficient accident detection."]}, "testcases": [{"name": "Accident Detection", "description": "Verify the system can successfully detect and capture footage of an accident", "input": {"footageType": "CCTV", "location": "Intersection", "time": "2022-01-01T12:00:00", "duration": "10 seconds"}, "expected": {"outcome": "Accident footage captured and flagged for analysis"}}, {"name": "Continuous Monitoring", "description": "Verify the system continuously monitors the CCTV footage for signs of accidents", "input": {"area": "Highway"}, "expected": {"outcome": "System detects and flags potential accidents in real-time"}}, {"name": "Algorithm Efficiency", "description": "Verify the efficiency of computer vision and image processing algorithms in accident detection", "input": {"footageType": "CCTV", "sceneType": "Urban"}, "expected": {"outcome": "Accurate and rapid accident detection using AI models"}}]}, {"usecase": {"name": "Location Mapping", "scenario": "The system integrates with the CCTV database to retrieve the precise location of the accident for accurate reporting and response.", "actors": ["System"], "preconditions": "The system has access to the CCTV database and coordinates of accident locations.", "steps": ["The system retrieves the geographic coordinates of the accident from the CCTV database.", "The system utilizes the obtained coordinates for accurate reporting and emergency response purposes."]}, "testcases": [{"name": "Valid Accident Location Mapping", "description": "Verify that the system accurately retrieves and utilizes the geographic coordinates of the accident for reporting and emergency response.", "input": {}, "expected": {"outcome": "Precise coordinates of the accident retrieved and utilized", "status": "Success"}}, {"name": "Invalid Accident Location Mapping", "description": "Verify that the system handles invalid or inaccessible CCTV database for accident location mapping.", "input": {}, "expected": {"outcome": "Unable to retrieve or utilize accident coordinates", "status": "Failure"}}]}, {"usecase": {"name": "Automated Reporting", "scenario": "The system automatically generates detailed accident reports, including relevant data, for aiding the investigation.", "actors": ["System"], "preconditions": "The system has detected and confirmed an accident through CCTV footage analysis.", "steps": ["The system compiles relevant data such as date, time, and location of the accident.", "The system generates a detailed accident report based on the compiled data."]}, "testcases": [{"name": "Automated Reporting - Positive", "description": "Verify the generation of a detailed accident report when the system has confirmed an accident.", "input": {}, "expected": {"outcome": "Detailed accident report generated", "status": "Success"}}, {"name": "Automated Reporting - Negative", "description": "Verify the system does not generate a detailed accident report when no accident is confirmed.", "input": {}, "expected": {"outcome": "No detailed accident report generated", "status": "Failure"}}]}, {"usecase": {"name": "Automated Calls", "scenario": "The system triggers automated calls to local authorities for real-time alerts and emergency response.", "actors": ["System"], "preconditions": "The system has detected and confirmed an accident, and the required data for alerting authorities is available.", "steps": ["The system initiates automated calls to the designated local police stations or emergency services.", "The system delivers real-time alerts with relevant accident details to the authorities."]}, "testcases": [{"name": "Successful Automated Call Initiation", "description": "The system successfully initiates automated calls to the designated local police stations or emergency services.", "input": {}, "expected": {"outcome": "Automated calls initiated successfully", "status": "Success"}}, {"name": "Automated Call Initiation - No Data Available", "description": "The system attempts to initiate automated calls without the required data for alerting authorities", "input": {}, "expected": {"outcome": "No data available for automated call initiation", "status": "Failed"}}]}, {"usecase": {"name": "Fax Notification", "scenario": "The system integrates with fax services to send detailed accident reports and images to designated police stations for quick response and dispatch of emergency services.", "actors": ["System"], "preconditions": "The system has generated a detailed accident report and captured relevant images.", "steps": ["The system sends the comprehensive accident report and images to the designated police stations via fax services.", "The system ensures that map coordinates are included in the report for quick response and dispatch of emergency services."]}, "testcases": [{"name": "Successful Fax Transmission", "description": "The system successfully integrates with fax services to send accident report and images to police stations", "input": {"reportDetails": "Detailed accident report", "images": "Captured relevant images", "faxNumber": "123-456-7890", "mapCoordinates": "latitude: 40.7128, longitude: -74.0060"}, "expected": {"outcome": "Fax sent successfully with all details", "status": "Success"}}]}, {"usecase": {"name": "Train ML Model", "scenario": "Training the machine learning model with different existing datasets from hospitals and other sources.", "actors": ["AI System"], "preconditions": "Availability of diverse datasets for training the ML model.", "steps": ["Collecting diverse lab report datasets from hospitals and other sources.", "Preprocessing and cleaning the collected datasets.", "Training the machine learning model using the preprocessed datasets."]}, "testcases": [{"name": "Valid dataset collection", "description": "Verify that the system can collect diverse lab report datasets", "input": {"sources": ["Hospital A", "Hospital B", "Other sources"]}, "expected": {"outcome": "datasets collected successfully", "status": "success"}}, {"name": "Preprocessing and cleaning successful", "description": "Verify that the system can preprocess and clean the collected datasets", "input": {"datasets": ["hospital_A_data.csv", "hospital_B_data.csv", "other_data.csv"]}, "expected": {"outcome": "datasets preprocessed and cleaned", "status": "success"}}, {"name": "Model training successful", "description": "Verify that the system can successfully train the machine learning model", "input": {"preprocessed_datasets": ["hospital_A_preprocessed.csv", "hospital_B_preprocessed.csv", "other_preprocessed.csv"]}, "expected": {"outcome": "model trained successfully", "status": "success"}}]}, {"usecase": {"name": "Predict Disease Likelihood", "scenario": "Using the trained ML model to predict the likelihood of chronic diseases for a patient based on their lab report data and lifestyle information.", "actors": ["AI System"], "preconditions": "Availability of the patient's lab report data and lifestyle information.", "steps": ["Receiving the lab report data and lifestyle information of the patient.", "Pushing the data to the ML model to predict the likelihood of chronic diseases.", "Comparing the results with lifestyle data and making the prediction."]}, "testcases": [{"name": "Valid prediction request", "description": "Verify that the system can make a valid prediction based on the provided lab report data and lifestyle information", "input": {"lab_report": "path/to/lab_report_file", "lifestyle_data": {"age": 35, "smoker": false, "exercise_hours_per_week": 3, "diet": "balanced"}}, "expected": {"outcome": "prediction generated", "status": "success"}}, {"name": "Invalid lab report file format", "description": "Verify that the system handles invalid lab report file formats properly", "input": {"lab_report": "invalid_file_format.docx", "lifestyle_data": {"age": 45, "smoker": true, "exercise_hours_per_week": 1, "diet": "high_fat"}}, "expected": {"outcome": "invalid file format error", "status": "failed"}}, {"name": "Prediction without lifestyle data", "description": "Verify that the system requires lifestyle data for making predictions", "input": {"lab_report": "path/to/lab_report_file", "lifestyle_data": null}, "expected": {"outcome": "lifestyle data missing error", "status": "failed"}}]}, {"usecase": {"name": "Send Report for Doctor Validation", "scenario": "Sending the lab report data to the doctor for validation in case of any alarming prediction.", "actors": ["AI System", "Doctor"], "preconditions": "Detection of an alarming prediction from the ML model.", "steps": ["Sending the report data to the doctor via an automated email for validation.", "Doctor accessing the UiPath App to approve or disapprove the reading.", "Doctor's input sent to the ML model for refining future predictions."]}, "testcases": [{"name": "Valid Report Sent for Doctor Validation", "description": "Verify that the lab report data is successfully sent to the doctor for validation in case of alarming prediction.", "input": {"report_id": "LAB2023001", "patient_id": "P001", "prediction_type": "Alarming", "prediction_details": "High likelihood of cardiovascular issue"}, "expected": {"outcome": "Report data sent to the doctor", "status": "Pending Doctor Validation"}}, {"name": "Invalid Report Sent for Doctor Validation", "description": "Verify that the lab report data is not sent to the doctor if no alarming prediction is detected.", "input": {"report_id": "LAB2023002", "patient_id": "P002", "prediction_type": "Normal", "prediction_details": "No alarming prediction detected"}, "expected": {"outcome": "Report data not sent to the doctor", "status": "No Doctor Validation Required"}}, {"name": "Doctor Approves Report Validation", "description": "Verify that the doctor can approve the lab report validation using the UiPath App.", "input": {"report_id": "LAB2023001", "doctor_id": "D001", "validation_status": "Approved"}, "expected": {"outcome": "Doctor approved the report validation", "status": "Report validation approved"}}, {"name": "Doctor Disapproves Report Validation", "description": "Verify that the doctor can disapprove the lab report validation using the UiPath App.", "input": {"report_id": "LAB2023001", "doctor_id": "D001", "validation_status": "Disapproved"}, "expected": {"outcome": "Doctor disapproved the report validation", "status": "Report validation disapproved"}}]}, {"usecase": {"name": "Inform Patient about Susceptibility", "scenario": "Informing the patient immediately if the doctor confirms their susceptibility to a chronic disease based on the AI prediction.", "actors": ["AI System", "Doctor", "Patient"], "preconditions": "Confirmation from the doctor regarding the patient's susceptibility to a chronic disease.", "steps": ["Sending an immediate notification to the patient about their susceptibility to a chronic disease.", "Providing the patient with information to take corrective actions as soon as possible."]}, "testcases": [{"name": "Patient Susceptibility Confirmed", "description": "Verify that the AI system can inform the patient about their susceptibility to a chronic disease when confirmed by the doctor.", "input": {"patient_id": "P001", "disease": "Diabetes"}, "expected": {"outcome": "Notification sent to patient", "action_required": "Patient provided with information for corrective actions"}}]}, {"usecase": {"name": "Accessing Crop Recommendation System", "scenario": "A user accesses the Crop Recommendation system to get suggestions for suitable crops to grow based on soil and environmental parameters.", "actors": ["User"], "preconditions": "User has access to the Crop Recommendation system and has the required soil and environmental parameter values (N, P, K, temperature, humidity, pH, rainfall) available.", "steps": ["User navigates to the Predict section of the UiPath Apps", "User enters the corresponding nutrient values of the soil, i.e., N, P, K ratios", "User enters the temperature in degrees Celsius, relative humidity in percentage, pH value of the soil, and the rainfall in mm", "The system processes the entered values", "The Crop Recommender system suggests the type of crop/fruit to grow in order to increase production based on the entered parameters"]}, "testcases": [{"name": "Access Crop Recommendations with Valid Parameters", "description": "Verify that the system suggests suitable crops when the user provides valid soil and environmental parameter values.", "input": {"nutrientValues": {"N": 5, "P": 10, "K": 7}, "temperature": 28, "humidity": 60, "phValue": 6.5, "rainfall": 100}, "expected": {"outcome": "System suggests suitable crops for the provided parameters.", "recommendation": "Rice, Maize, Sunflower"}}, {"name": "Access Crop Recommendations with Empty Parameters", "description": "Verify that the system reponses for empty parameters.", "input": {"nutrientValues": {"N": null, "P": null, "K": null}, "temperature": 28, "humidity": 60, "phValue": "6.5", "rainfall": 100}, "expected": {"outcome": "System messages that there is a wrong parameter type in input fields", "recommendation": "None"}}, {"name": "Access Crop Recommendations with Invalid Parameter Type", "description": "Verify that the system reponses for invalid input characters for parameters.", "input": {"nutrientValues": {"N": "abc", "P": ".", "K": 7}, "temperature": null, "humidity": null, "phValue": null, "rainfall": null}, "expected": {"outcome": "System prompts for mandatory inputs", "recommendation": "None"}}, {"name": "Access Crop Recommendations with Invalid pH Value", "description": "Check the system's behavior when the user enters an invalid pH value", "input": {"nutrientValues": {"N": 8, "P": 12, "K": 5}, "temperature": 30, "humidity": 70, "phValue": 14, "rainfall": 150}, "expected": {"outcome": "System rejects the input due to an invalid pH value.", "error": "Invalid pH value. Please enter a value between 0 to 14."}}, {"name": "Access Crop Recommendations with Extreme Temperature", "description": "Evaluate system response to extreme temperature values", "input": {"nutrientValues": {"N": 6, "P": 8, "K": 10}, "temperature": 50, "humidity": 80, "phValue": 6.8, "rainfall": 200}, "expected": {"outcome": "System advises based on extreme temperature.", "recommendation": "Cactus, Date Palm"}}]}, {"usecase": {"name": "Updating Soil and Environmental Parameter Values", "scenario": "A user updates the soil and environmental parameter values to get updated recommendations for suitable crops to grow.", "actors": ["User"], "preconditions": "User has accessed the Crop Recommendation system and has previously entered the soil and environmental parameter values.", "steps": ["User navigates to the section for updating soil and environmental parameter values in the Crop Recommendation system", "User modifies the existing values of N, P, K ratios, temperature, humidity, pH, and rainfall", "User submits the updated values", "The system processes the updated values", "The Crop Recommender system provides new crop recommendations based on the modified parameters"]}, "testcases": [{"name": "Update Soil and Environmental Parameters with Valid Values", "description": "User updates the soil and environmental parameter values with valid inputs", "input": {"parameters": {"NRatio": 40, "PRatio": 30, "KRatio": 20, "temperature": 25, "humidity": 60, "pH": 6.5, "rainfall": 100}}, "expected": {"outcome": "New crop recommendations generated", "status": "Success"}}, {"name": "Update Soil and Environmental Parameters with Empty Parameters", "description": "System Reponses if one or more parameters are empty", "input": {"parameters": {"NRatio": null, "PRatio": 30, "KRatio": null, "temperature": 25, "humidity": 60, "pH": 6.5, "rainfall": 100}}, "expected": {"outcome": "System only updates parameters which are given in the input", "status": "Success"}}, {"name": "Update Soil and Environmental Parameters with previous value of Parameters", "description": "User tries to update the parameters with one or more of previous values", "input": {"parameters": {"NRatio": 8, "PRatio": 12, "KRatio": 5, "temperature": 30, "humidity": 70, "pH": 12, "rainfall": 150}}, "expected": {"outcome": "System Notifies the user that the new value is same as the old one for the paramter applicable", "status": "Success or Failure in case every paramter is updated with previous values"}}, {"name": "Update Soil and Environmental Parameters with Invalid Parameter Type", "description": "Verify that the system reponses for invalid input characters for parameters.", "input": {"nutrientValues": {"N": "abc", "P": ".", "K": 7}, "temperature": null, "humidity": null, "phValue": null, "rainfall": null}, "expected": {"outcome": "System prompts for mandatory inputs", "status": "Failed"}}, {"name": "Update Soil and Environmental Parameters with Invalid pH Value", "description": "User tries to update the soil and environmental parameter values with an invalid pH value", "input": {"parameters": {"NRatio": 50, "PRatio": 30, "KRatio": 20, "temperature": 28, "humidity": 70, "pH": 14, "rainfall": 150}}, "expected": {"outcome": "Invalid pH value, parameters not accepted", "status": "Failed"}}]}, {"usecase": {"name": "Viewing Recommended Crops", "scenario": "A user views the list of recommended crops/fruits generated by the Crop Recommendation system based on the entered soil and environmental parameters.", "actors": ["User"], "preconditions": "User has entered the soil and environmental parameter values and has accessed the Crop Recommendation system.", "steps": ["User navigates to the section for viewing recommended crops/fruits in the Crop Recommendation system", "The system displays the list of recommended crops/fruits along with relevant details such as expected yield or suitability for the specified conditions"]}, "testcases": [{"name": "View Recommended Crops with Valid Parameters", "description": "Verify that a user can view recommended crops/fruits based on valid soil and environmental parameters.", "input": {"soilType": "Loam", "temperature": "25\u00b0C", "humidity": "60%", "accessedSection": "Recommended crops/fruits"}, "expected": {"outcome": "List of recommended crops/fruits displayed", "detailsDisplayed": "Expected yield or suitability for specified conditions"}}, {"name": "View Recommended Crops with Invalid Parameters", "description": "Verify that a user cannot view recommended crops/fruits based on invalid or unsupported soil and environmental parameters.", "input": {"soilType": "Rocky", "temperature": "10\u00b0C", "humidity": "80%", "accessedSection": "Recommended crops/fruits"}, "expected": {"outcome": "No recommended crops/fruits displayed", "detailsDisplayed": "No results due to invalid parameters"}}]}, {"usecase": {"name": "Data Collection", "scenario": "UiPath robots collect sales data from various sources for demand forecasting.", "actors": "UiPath robots", "preconditions": "UiPath robots are operational and have access to the required data sources.", "steps": ["UiPath robots initiate data collection from POS systems, e-commerce platforms, and social media.", "Data collection process captures historical sales data and relevant factors.", "Collected data is stored in a designated repository for further processing."]}, "testcases": [{"name": "Valid Data Collection", "description": "Verify that UiPath robots can successfully collect data from all specified sources.", "input": {"sources": ["POS systems", "e-commerce platforms", "social media"]}, "expected": {"outcome": "Data collection successful", "status": "Complete"}}, {"name": "Missing Data Sources", "description": "Verify that the system handles the case where some specified sources are unavailable for data collection.", "input": {"sources": ["POS systems", "e-commerce platforms"]}, "expected": {"outcome": "Data collection incomplete", "status": "Partial"}}, {"name": "Data Capture", "description": "Verify that the data collection process captures historical sales data and relevant factors accurately.", "input": {"capturedData": "historical sales data, relevant factors"}, "expected": {"outcome": "Data captured successfully", "status": "Complete"}}, {"name": "Data Storage", "description": "Verify that the collected data is stored in the designated repository for further processing.", "input": {"storageLocation": "designated repository"}, "expected": {"outcome": "Data stored for further processing", "status": "Complete"}}]}, {"usecase": {"name": "Data Preprocessing", "scenario": "Preprocessing of collected sales data to prepare it for demand forecasting model development.", "actors": "UiPath Studio", "preconditions": "Collected sales data is available and accessible to UiPath Studio.", "steps": ["UiPath Studio performs data cleaning to handle missing or inconsistent data.", "Normalization of data and feature engineering is carried out using UiPath Studio's data manipulation activities.", "Preprocessed data is stored for model development."]}, "testcases": [{"name": "Valid Data Preprocessing", "description": "Verify that UiPath Studio can successfully preprocess the collected sales data for demand forecasting model development.", "input": {"data": "salesData.csv", "process": "cleaning, normalization, feature engineering"}, "expected": {"outcome": "Data preprocessing completed successfully", "storage": "PreprocessedData.csv"}}, {"name": "Invalid Data Preprocessing - Missing Data", "description": "Verify that UiPath Studio handles the case where there is missing data during the preprocessing.", "input": {"data": "salesData_missing.csv", "process": "cleaning, normalization, feature engineering"}, "expected": {"outcome": "Data preprocessing failed", "reason": "Missing data found"}}, {"name": "Invalid Data Preprocessing - Inconsistent Data", "description": "Verify that UiPath Studio handles the case where there is inconsistent data during the preprocessing.", "input": {"data": "salesData_inconsistent.csv", "process": "cleaning, normalization, feature engineering"}, "expected": {"outcome": "Data preprocessing failed", "reason": "Inconsistent data found"}}]}, {"usecase": {"name": "Model Development", "scenario": "Utilizing UiPath AI Center to build and train a demand forecasting model using machine learning algorithms.", "actors": "UiPath AI Center", "preconditions": "Preprocessed sales data is available within UiPath AI Center for model development.", "steps": ["Selection of appropriate machine learning algorithms, such as regression, time series analysis, or deep learning, for model development.", "Training the demand forecasting model using historical sales data and relevant factors.", "Validation of the model's performance and accuracy for demand forecasting."]}, "testcases": [{"name": "Select Machine Learning Algorithm", "description": "Verify the selection of an appropriate machine learning algorithm for model development.", "input": {"selectedAlgorithm": "regression"}, "expected": {"outcome": "Algorithm selected successfully", "status": "Selected"}}, {"name": "Train Demand Forecasting Model", "description": "Ensure successful training of the demand forecasting model using historical sales data and relevant factors.", "input": {"data": "historical sales data", "factors": "relevant factors"}, "expected": {"outcome": "Model trained successfully", "status": "Trained"}}, {"name": "Validate Model Performance", "description": "Validate the performance and accuracy of the demand forecasting model.", "input": {"validationData": "current sales data"}, "expected": {"outcome": "Model's performance validated", "status": "Validated"}}]}, {"usecase": {"name": "Model Deployment", "scenario": "Deployment of the trained demand forecasting model to UiPath AI Center for integration with automation processes.", "actors": "UiPath AI Center", "preconditions": "Trained demand forecasting model is available and validated for deployment.", "steps": ["Integration of the trained model with automation processes within UiPath AI Center.", "Testing the integrated model's functionality and compatibility with other automated tasks.", "Deployment of the model for real-time demand forecasting and inventory management."]}, "testcases": [{"name": "Valid Model Integration", "description": "Verify the successful integration of the trained demand forecasting model with automation processes in UiPath AI Center.", "input": {"model": "demand_forecasting_model"}, "expected": {"outcome": "Model integrated successfully", "status": "Integration Success"}}, {"name": "Model Functionality Testing", "description": "Test the functionality and compatibility of the integrated demand forecasting model with other automated tasks.", "input": {"tasks": ["task1", "task2", "task3"]}, "expected": {"outcome": "Model functionality and compatibility tested", "status": "Testing Success"}}, {"name": "Real-time Deployment", "description": "Deploy the integrated model for real-time demand forecasting and inventory management.", "input": {"deployment": "real-time"}, "expected": {"outcome": "Model deployed for real-time forecasting and inventory management", "status": "Deployment Success"}}]}, {"usecase": {"name": "UiPath Apps Activation", "scenario": "Activation of UiPath Apps for stock managers to monitor and manage stock levels.", "actors": "Stock Managers, UiPath Apps", "preconditions": "UiPath Apps are installed and accessible to stock managers.", "steps": ["Stock managers access the UiPath Apps dashboard for real-time stock monitoring.", "The dashboard displays a list of best-selling products at risk of going out of stock.", "Stock managers initiate orders by clicking on 'place the order' triggering automated order placement by UiPath robots."]}, "testcases": [{"name": "Access UiPath Apps Dashboard", "description": "Verify that stock managers can access the UiPath Apps dashboard for real-time stock monitoring.", "input": {"userType": "Stock Manager", "appID": "UiPath-App-123"}, "expected": {"outcome": "Dashboard accessed successfully", "status": "Success"}}, {"name": "View Best-Selling Products", "description": "Verify that the dashboard displays a list of best-selling products at risk of going out of stock.", "input": {"userType": "Stock Manager", "appID": "UiPath-App-123"}, "expected": {"outcome": "Best-selling products list displayed", "status": "Success"}}, {"name": "Initiate Automated Order Placement", "description": "Verify that stock managers can initiate orders by clicking on 'place the order' triggering automated order placement by UiPath robots.", "input": {"userType": "Stock Manager", "productID": "Prod-789", "clickLocation": "Place Order Button"}, "expected": {"outcome": "Automated order placement initiated", "status": "Success"}}, {"name": "Invalid Access to UiPath Apps Dashboard", "description": "Verify that unauthorized users cannot access the UiPath Apps dashboard.", "input": {"userType": "Unauthorized User", "appID": "UiPath-App-123"}, "expected": {"outcome": "Unauthorized access attempt blocked", "status": "Access Denied"}}]}, {"usecase": {"name": "Input Channel Registration", "scenario": "A new input channel is registered in the system.", "actors": "Admin", "preconditions": "The admin has the necessary permissions to register new input channels.", "steps": ["Admin navigates to the input channel registration page", "Admin fills in the details of the new input channel (e.g., channel name, description, contact information)", "Admin submits the registration form", "The system validates the provided details", "The system registers the new input channel"]}, "testcases": [{"name": "Valid Input Channel Registration", "description": "Verify that the admin can successfully register a new input channel with valid details.", "input": {"channelDetails": {"channelName": "Social Media", "description": "Accepts input from social media platforms", "contactInformation": "contact@socialmedia.com"}}, "expected": {"outcome": "Input channel registered successfully", "status": "Success"}}, {"name": "Invalid Input Channel Registration - Missing Details", "description": "Verify that the system rejects the registration if the admin submits the form with missing details.", "input": {"channelDetails": {"channelName": " ", "description": "Accepts input from social media platforms", "contactInformation": "contact@socialmedia.com"}}, "expected": {"outcome": "Input channel registration failed due to missing details", "status": "Rejected"}}, {"name": "Duplicate Input Channel Registration", "description": "Verify that the system rejects the duplicate registration if the admin submits the form with previous details.", "input": {"channelDetails": {"channelName": "Social Media", "description": "Accepts input from social media platforms", "contactInformation": "contact@socialmedia.com"}}, "expected": {"outcome": "Input channel registration failes due to duplicate entry.", "status": "Rejected"}}]}, {"usecase": {"name": "Input Classification", "scenario": "An input is classified into predefined categories using AI.", "actors": "AI Engine", "preconditions": "The input is available in the system and the AI engine is active.", "steps": ["AI Engine receives the input", "AI Engine processes the input using predefined classification algorithms", "The system verifies the classification results", "The system assigns the input to the respective category (e.g., customer complaints, service requests, information requests)"]}, "testcases": [{"name": "Valid Input Classification", "description": "AI Engine classifies the input into predefined categories correctly", "input": {"inputText": "Customer complaint: Defective product received."}, "expected": {"outcome": "Input classified into customer complaints category", "status": "Success"}}, {"name": "Invalid Input Classification", "description": "AI Engine fails to classify the random input into any predefined category", "input": {"inputText": "Random text without any category"}, "expected": {"outcome": "Input not classified into any predefined category", "status": "Failed"}}, {"name": "Miscaterogization of Input", "description": "AI Engine mistakenly classify the input to a wrong category", "input": {"inputText": "Customer complaint: Defective product received."}, "expected": {"outcome": "Input is classified into category other than Customer compliant", "status": "Wrong"}}]}, {"usecase": {"name": "Peak Detection", "scenario": "The system detects peaks in the incoming inputs", "actors": "System", "preconditions": "There are incoming inputs and the peak detection module is active.", "steps": ["The system continuously monitors the volume of incoming inputs", "The system compares the current input volume with historical data to identify peaks", "When a peak is detected, the system triggers an alert or notification for the relevant personnel"]}, "testcases": [{"name": "Valid Peak Detection", "description": "Verify that the system successfully detects a peak in the incoming inputs and triggers an alert or notification.", "input": {"current_input_volume": 100, "historical_data": [80, 90, 100, 150, 95]}, "expected": {"outcome": "Peak detected and alert triggered", "status": "AlertTriggered"}}, {"name": "No Peak Detected", "description": "Verify that the system handles the case where no peak is detected in the incoming inputs.", "input": {"current_input_volume": 90, "historical_data": [80, 85, 90, 88, 92]}, "expected": {"outcome": "No peak detected", "status": "NoAlertTriggered"}}, {"name": "Invalid Historical Data", "description": "Verify that the system handles the case where the historical data provided is not suitable for peak detection.", "input": {"current_input_volume": 120, "historical_data": [80, 85, 90]}, "expected": {"outcome": "Peak detection failed due to insufficient historical data", "status": "InsufficientData"}}]}, {"usecase": {"name": "Priority Setting for Employee Base", "scenario": "The system assigns priorities to the employee base based on input classification and peak detection.", "actors": "System", "preconditions": "Inputs are classified and peaks are detected.", "steps": ["The system evaluates the nature of classified inputs and the detected peaks", "The system assigns priorities to different departments or personnel based on the evaluation", "The priorities are communicated to the respective departments or personnel"]}, "testcases": [{"name": "Priority Assignment - Valid Input", "description": "Verify that the system assigns priorities based on valid input classification and peak detection.", "input": {"classification": "High urgency", "peakDetected": true}, "expected": {"outcome": "Priorities assigned and communicated", "status": "Success"}}, {"name": "Priority Assignment - Invalid Input", "description": "Verify that the system handles invalid input for priority assignment", "input": {"classification": "Invalid category", "peakDetected": false}, "expected": {"outcome": "Invalid input handled", "status": "Rejected"}}, {"name": "Priority Assignment - No Peak Detected", "description": "Verify that the system handles the case when no peaks are detected", "input": {"classification": "Normal", "peakDetected": false}, "expected": {"outcome": "No peak detected, normal priority assigned", "status": "Success"}}]}, {"usecase": {"name": "Download Purchase Orders", "scenario": "The system automatically downloads purchase orders from email attachments.", "actors": ["System"], "preconditions": "Email containing purchase orders is received and accessible by the system. Purchase orders are named using a code as PO_xxx in the attchment", "steps": ["System accesses the email server to retrieve new emails with purchase order attachments", "System downloads the purchase order attachments from the received emails"]}, "testcases": [{"test_case": "Valid Email Retrieval", "description": "Verify that the system can successfully access the email server and retrieve new emails with purchase order attachments", "input": {"email_server": "pop.example.com", "credentials": {"username": "user123", "password": "password123"}}, "expected_result": {"outcome": "Emails containing purchase order attachments are successfully retrieved", "status": "Success"}}, {"test_case": "Download Order Attachments", "description": "Verify that the system can download the purchase order attachments from the received emails", "input": {"email_attachments": ["PO_2022001.pdf", "PO_2022002.pdf"]}, "expected_result": {"outcome": "Purchase order attachments are successfully downloaded", "status": "Success"}}, {"test_case": "Valid Attachment", "description": "Verify that the system can identify only PO attachment and downloads only them", "input": {"email_attachments": ["PO_2022001.pdf", "PO_2022002.pdf"]}, "expected_result": {"outcome": "Purchase order attachments are successfully downloaded", "status": "Success"}}]}, {"usecase": {"name": "Extract PO Details and train PO ML Model", "scenario": "The system extracts purchase order details through Document understanding and training the PO ML model.", "actors": ["System"], "preconditions": "Purchase orders are successfully downloaded and accessible by the system.", "steps": ["System processes the purchase orders using Document understanding phases", "System trains the PO ML model to extract relevant details from the purchase orders"]}, "testcases": [{"name": "Process Purchase Orders", "description": "Verify that the system can successfully process the purchase orders using Document understanding phases.", "input": {}, "expected_result": "Purchase orders are processed successfully using Document understanding phases."}, {"name": "Train Purchase Order ML Model", "description": "Verify that the system can train the purchase order ML model to extract relevant details from the purchase orders.", "input": {}, "expected_result": "Purchase order ML model is trained successfully to extract relevant details from the purchase orders."}]}, {"usecase": {"name": "Validate PO Details", "scenario": "The system detects any accuracy or business validation issues and creates a task in the action center for business validation, modification, and submission.", "actors": ["System", "Business Users"], "preconditions": "Purchase order details are extracted and processed by the system.", "steps": ["System checks for accuracy and business validation issues in the extracted PO details", "If issues are found, system creates a task in the action center for business users to validate, modify, and submit the details"]}, "testcases": [{"name": "Valid PO Details", "description": "Verify that the system processes accurate purchase order details without any business validation issues.", "input": {"purchase_order_id": "PO12345"}, "expected_output": {"outcome": "No issues found", "action_center_task": "No task created"}}, {"name": "Invalid PO Details - Business Validation", "description": "Verify that the system detects business validation issues in the extracted PO details and creates a task for business users to validate, modify, and submit the details.", "input": {"purchase_order_id": "PO6789"}, "expected_output": {"outcome": "Business validation issues found", "action_center_task": "Task created for business users to validate, modify, and submit the details"}}]}, {"usecase": {"name": "Create Order in SAP", "scenario": "The system creates the purchase order in the SAP application to notify the respective stakeholders and initiate necessary actions.", "actors": ["System", "SAP Application"], "preconditions": "PO details are validated and finalized by the business users.", "steps": ["System initiates the creation of the purchase order in the SAP application", "SAP application processes the received order and notifies the respective stakeholders for further actions"]}, "testcases": [{"name": "Create Purchase Order in SAP", "description": "Verify that the system successfully initiates the creation of a purchase order in the SAP application", "input": {"purchase_order_details": {"order_id": "PO123", "items": [{"product_id": "P001", "quantity": 100}, {"product_id": "P002", "quantity": 50}], "vendor_id": "V001"}}, "expected_output": {"status": "success", "message": "Purchase order creation initiated in SAP application for PO123"}}, {"name": "Invalid Purchase Order Details", "description": "Verify the system handles invalid purchase order details and provides appropriate error message", "input": {"purchase_order_details": {"order_id": "PO456", "items": [{"product_id": "P003", "quantity": -20}, {"product_id": "P004", "quantity": 0}], "vendor_id": "V002"}}, "expected_output": {"status": "error", "message": "Invalid purchase order details", "error_details": [{"field": "items[0].quantity", "error_message": "Quantity for product P003 must be a positive integer"}, {"field": "items[1].quantity", "error_message": "Quantity for product P004 must be a positive integer"}]}}]}, {"usecase": {"name": "Upload Image from CCTV Camera", "scenario": "CCTV cameras detect motion and take screenshots in the coverage area.", "actors": "CCTV System, Motion Detection Software", "preconditions": "Motion is detected within the camera's coverage area", "steps": ["CCTV system detects motion in the coverage area", "The camera takes a screenshot when motion is detected", "The image is saved in a specified OneDrive location"]}, "testcases": [{"name": "Motion Detected and Image Captured", "description": "Verify that the CCTV system captures an image when motion is detected in the coverage area", "input": {"motionDetected": true, "imageQuality": "High"}, "expected": {"outcome": "Image captured and saved", "storageLocation": "OneDrive", "imageQuality": "High"}}, {"name": "No Motion Detected", "description": "Verify that no image is captured if no motion is detected in the coverage area", "input": {"motionDetected": false}, "expected": {"outcome": "No image captured", "storageLocation": "Not applicable"}}, {"name": "Low Image Quality", "description": "Verify that the captured image meets the specified quality standards", "input": {"motionDetected": true, "imageQuality": "Low"}, "expected": {"outcome": "Image captured but low quality", "userPrompt": "System should prompt to improve image quality settings"}}]}, {"usecase": {"name": "Trigger UiPath Bot", "scenario": "An image is uploaded to the specified OneDrive location, triggering the UiPath bot integration", "actors": "OneDrive, UiPath Integration Service", "preconditions": "Image is uploaded to the specified OneDrive location", "steps": ["An image is uploaded to the specified OneDrive location", "UiPath Integration Service detects the new image", "UiPath bot is triggered upon detection of the new image"]}, "testcases": [{"name": "Successful Image Upload", "description": "Verify that the UiPath bot is triggered upon successful image upload", "input": {"imagePath": "path/to/image.jpg", "onedriveLocation": "specified_location"}, "expected": {"outcome": "UiPath bot is triggered", "status": "Success"}}, {"name": "Unsuccessful - No Image Upload", "description": "Verify that the UiPath bot is not triggered when no image is uploaded to the specified OneDrive location", "input": {"imagePath": "", "onedriveLocation": "specified_location"}, "expected": {"outcome": "No new image detected", "status": "Failed"}}, {"name": "Unsuccessful - Invalid Image Format", "description": "Verify that the UiPath bot is not triggered if an unsupported image format is uploaded", "input": {"imagePath": "path/to/document.pdf", "onedriveLocation": "specified_location"}, "expected": {"outcome": "Invalid image format", "status": "Failed"}}]}, {"usecase": {"name": "Move Image to Local Storage", "scenario": "UiPath bot moves the image from OneDrive to local storage for processing", "actors": "UiPath Bot, Local Storage System", "preconditions": "UiPath bot is triggered, and an image is available in the specified OneDrive location", "steps": ["UiPath bot identifies the new image in the specified OneDrive location", "The bot initiates the process to move the image to the local storage for further analysis"]}, "testcases": [{"name": "Successful Image Move", "description": "UiPath bot successfully moves the image from OneDrive to local storage", "input": {"imageLocation": "OneDrive/Processing/Images/image1.jpg", "localDestination": "/home/user/images/image1.jpg"}, "expected": {"outcome": "Image moved to local storage", "status": "Success"}}, {"name": "Unsuccessful Image Move - Unauthorized Access", "description": "UiPath bot fails to move the image due to unauthorized access to OneDrive", "input": {"imageLocation": "OneDrive/Processing/Images/private_image.jpg", "localDestination": "/home/user/images/private_image.jpg"}, "expected": {"outcome": "Unauthorized access to OneDrive", "status": "Failed"}}]}, {"usecase": {"name": "Process Image Using Object Detection Model", "scenario": "UiPath Object Detection Model AI Centre processes the image from the local storage", "actors": "UiPath Object Detection Model AI Centre, Local Storage System", "preconditions": "The image is successfully moved to the local storage", "steps": ["UiPath Object Detection Model AI Centre receives the image from the local storage", "The AI model processes the image to identify objects and patterns"]}, "testcases": [{"name": "Valid Image Processing", "description": "Verify that the object detection model successfully processes the image from local storage", "input": {"imageStatus": "Successfully moved"}, "expected": {"outcome": "Objects and patterns identified", "status": "Processed"}}, {"name": "Invalid Image Processing", "description": "Verify that the object detection model does not process the image if it is not successfully moved to local storage", "input": {"imageStatus": "Not moved"}, "expected": {"outcome": "Image not processed", "status": "Not processed"}}]}, {"usecase": {"name": "Alert Generation for Mask Detection", "scenario": "The system detects whether a person is wearing a mask, and if not, triggers an alert", "actors": "UiPath Object Detection Model AI Centre", "preconditions": "The image has been successfully processed, and the AI model has detected a person's face", "steps": ["The AI model analyzes the image to determine if a person is not wearing a mask", "If no mask is detected, the system triggers an alert for mask non-compliance"]}, "testcases": [{"name": "Mask Detected", "description": "Verify if the system correctly detects a person wearing a mask", "input": {"image": "person_with_mask.jpg", "detected": true}, "expected": {"outcome": "No alert triggered", "status": "Success"}}, {"name": "Mask Not Detected", "description": "Verify if the system triggers an alert when a person is not wearing a mask", "input": {"image": "person_without_mask.jpg", "detected": false}, "expected": {"outcome": "Alert triggered for mask non-compliance", "status": "Success"}}, {"name": "Invalid Image", "description": "Verify system behavior when an invalid image is input", "input": {"image": "invalid_image_file", "detected": true}, "expected": {"outcome": "Invalid input", "status": "Error"}}, {"name": "No Face Detected", "description": "Verify if the system handles the scenario when no face is detected in the image", "input": {"image": "empty_room.jpg", "detected": false}, "expected": {"outcome": "No face detected", "status": "Failed"}}]}, {"usecase": {"name": "Alert Generation for Person Count Threshold", "scenario": "The system triggers alerts if the number of persons detected in the image exceeds the predefined threshold", "actors": "UiPath Object Detection Model AI Centre", "preconditions": "The image has been successfully processed, and the AI model has detected persons", "steps": ["The AI model determines the number of persons in the image", "If the person count exceeds the predefined threshold, the system triggers an alert for overcrowding"]}, "testcases": [{"name": "Person Count Below Threshold", "description": "Verify system behavior when the number of persons detected is below the predefined threshold", "input": {"detected_persons": 5, "threshold": 10}, "expected": {"outcome": "No Alert Triggered", "status": "Success"}}, {"name": "Person Count Exceeds Threshold", "description": "Verify system behavior when the number of persons detected exceeds the predefined threshold", "input": {"detected_persons": 15, "threshold": 10}, "expected": {"outcome": "Alert Triggered for Overcrowding", "status": "Success"}}, {"name": "Invalid Image Processing", "description": "Verify error handling when the image processing fails", "input": {"detected_persons": null, "threshold": 10}, "expected": {"outcome": "Image Processing Error", "status": "Error"}}]}, {"usecase": {"name": "Prevention of Suicides and Intrusions", "scenario": "The system is able to prevent suicides and intrusion cases based on image analysis", "actors": "UiPath Object Detection Model AI Centre", "preconditions": "The image has been successfully processed, and the AI model has detected relevant patterns", "steps": ["The AI model analyzes the image to detect patterns associated with suicides or intrusions", "If such patterns are detected, the system takes preventive actions or triggers appropriate alerts"]}, "testcases": [{"name": "Detect Suicidal Patterns", "description": "Verify that the system can detect patterns associated with suicides in an image", "input": {"imageProcessed": true, "detectedPatterns": ["harmful behaviors", "dangerous objects"]}, "expected": {"outcome": "Suicidal patterns detected", "actionTaken": "Triggered appropriate alerts"}}, {"name": "No Intrusion Patterns Detected", "description": "Verify that the system does not falsely detect intrusion patterns in an image without relevant patterns", "input": {"imageProcessed": true, "detectedPatterns": ["normal activities", "no suspicious objects"]}, "expected": {"outcome": "No intrusion patterns detected", "actionTaken": "No preventive action triggered"}}]}, {"usecase": {"name": "Capture Handwritten Feedback", "scenario": "Automated capturing of handwritten feedback from customers at the automobile service center.", "actors": ["System", "Customer"], "preconditions": "Customer provides handwritten feedback on paper or a form", "steps": ["System processes the handwritten feedback using image recognition technology", "System converts the handwritten feedback into digital text", "System stores the digital feedback for further processing"]}, "testcases": [{"name": "Valid Handwritten Feedback Capture", "description": "Verify that system correctly captures handwritten feedback using image recognition technology", "input": {"feedbackImage": "handwritten_feedback1.jpg"}, "expected": {"outcome": "Handwritten feedback captured successfully", "status": "Success"}}, {"name": "Invalid Handwritten Feedback Capture", "description": "Verify that system does not capture feedback if no handwritten content is found", "input": {"feedbackImage": "blank_page.jpg"}, "expected": {"outcome": "No handwritten feedback found", "status": "Failed"}}]}, {"usecase": {"name": "Classify Feedback as Positive or Negative", "scenario": "Automated classification of customer feedback as positive or negative using machine learning integration.", "actors": ["System"], "preconditions": "Digital feedback is available for processing", "steps": ["System applies machine learning algorithms to analyze the content of the feedback", "System categorizes the feedback as positive or negative based on predefined criteria", "System stores the classified feedback for further actions"]}, "testcases": [{"name": "Valid Feedback Classification", "description": "Verify that the system successfully classifies a feedback as positive or negative.", "input": {"feedbackContent": "The product is excellent and the service is prompt."}, "expected": {"outcome": "Feedback classified as positive and stores accordingly.", "status": "Success"}}, {"name": "Negative Feedback Classification", "description": "Verify that the system successfully classifies a feedback as negative.", "input": {"feedbackContent": "The product quality is poor and the customer service is unresponsive."}, "expected": {"outcome": "Feedback classified as negative and stores accordingly.", "status": "Success"}}, {"name": "Feedback Classification Garbge Text", "description": "Verify that the system handles feedback classification when Feedback capturing module produces garbage digital text.", "input": {"feedbackContent": "Garbage digital text from the Caputure Feedback Module."}, "expected": {"outcome": "Feedback classification Not Possible", "status": "Failed"}}, {"name": "Feedback Classification No Machine Learning", "description": "Verify that the system handles feedback classification when machine learning is unavailable.", "input": {"feedbackContent": "The machine learning component is offline."}, "expected": {"outcome": "Feedback classification unavailable", "status": "Failed"}}]}, {"usecase": {"name": "Upload Feedback to Social Media", "scenario": "Automated upload of classified feedback to the automobile service center's social media platforms.", "actors": ["System"], "preconditions": "Feedback has been classified as positive or negative", "steps": ["System identifies the positive feedback", "System creates social media posts based on the positive feedback", "System uploads the posts to the service center's social media accounts"]}, "testcases": [{"name": "Valid Upload Positive Feedback", "description": "Verify that the system successfully uploads positive feedback to social media platforms.", "input": {"feedbackType": "positive"}, "expected": {"outcome": "Positive feedback uploaded successfully", "status": "Success"}}, {"name": "Valid Upload Negative Feedback", "description": "Verify that the system successfully uploads negative feedback to social media platforms.", "input": {"feedbackType": "negative"}, "expected": {"outcome": "Negative feedback uploaded successfully", "status": "Success"}}]}, {"usecase": {"name": "Automated Email Follow-Up", "scenario": "Automated email sent to customers as a follow-up based on their feedback.", "actors": ["System", "Customer"], "preconditions": "Feedback has been processed and classified", "steps": ["System identifies customers with negative feedback", "System triggers automated emails to customers with negative feedback", "Email includes a message acknowledging the feedback and providing contact information for further assistance"]}, "testcases": [{"name": "Negative Feedback Email Triggering", "description": "Verify that the system triggers an automated email to customers with negative feedback.", "input": {"customerID": "C12345", "feedbackType": "negative"}, "expected": {"outcome": "Automated email sent to customer with negative feedback", "status": "Success"}}, {"name": "Email Message Content", "description": "Verify that the automated email includes a message acknowledging the feedback and providing contact information for further assistance.", "input": {"customerID": "C12345", "feedbackType": "negative"}, "expected": {"outcome": "Email includes acknowledgment and contact information", "status": "Success"}}, {"name": "Positive Feedback Email Triggering", "description": "Verify that the system does not trigger an automated email to customers with positive feedback.", "input": {"customerID": "C67890", "feedbackType": "positive"}, "expected": {"outcome": "No automated email sent to customer with positive feedback", "status": "Success"}}]}, {"usecase": {"name": "Customer Service Executive Follow-Up", "scenario": "Customer service executive reaches out to customers with negative feedback in person.", "actors": ["Customer Service Executive", "Customer"], "preconditions": "Customers have received automated follow-up emails", "steps": ["Customer service executive is provided with the list of customers who gave negative feedback", "Executive contacts the customers to address their concerns in person", "Executive works on resolving the issues to improve customer satisfaction"]}, "testcases": [{"name": "Retrieve Customer List", "description": "Verify that the customer service executive can retrieve the list of customers who provided negative feedback", "input": {}, "expected": {"outcome": "Customer List Retrieved", "status": "Success"}}, {"name": "Contact Customer", "description": "Verify that the customer service executive can successfully contact a customer to address their concerns in person", "input": {"customerId": "Cust123", "feedbackType": "negative"}, "expected": {"outcome": "Customer Contacted", "status": "Success"}}, {"name": "Resolve Customer Issue", "description": "Verify that the executive can work on resolving the customer's issues to improve satisfaction", "input": {"customerId": "Cust123", "feedbackType": "negative", "resolutionSteps": "Offer a discount on next purchase"}, "expected": {"outcome": "Issue Resolved", "status": "Success"}}]}, {"usecase": {"name": "Setup Screening process for Resumes/Profiles", "scenario": "Setup Automated screening of resumes and LinkedIn profiles to identify potential candidates for a job opening.", "actors": ["HR Manager", "Machine Learning Model"], "preconditions": "Availability of resumes and/or LinkedIn profiles for screening", "steps": ["HR Manager initiates the screening process by providing job requirements and keywords.", "Machine Learning Model processes the resumes/profiles and filters based on job requirements and other contributing factors.", "The model performs trend analysis and considers candidate history (e.g., social presence, posts, paper presentations) to assess cultural fit."]}, "testcases": [{"name": "Valid Screening Process", "description": "Verify that the machine learning model can successfully screen resumes and LinkedIn profiles based on job requirements and other contributing factors.", "input": {"jobRequirements": "Software Engineer, 3+ years experience, Java, Python, machine learning", "keywords": ["machine learning", "data analysis"]}, "expected": {"outcome": "Screening process successful", "status": "Candidates identified"}}, {"name": "No Job Requirements Provided", "description": "Verify that the system handles the case where HR Manager tries to initiate the screening process without providing job requirements and keywords.", "input": {"jobRequirements": "", "keywords": []}, "expected": {"outcome": "Screening process failed", "status": "No candidates identified"}}]}, {"usecase": {"name": "Shortlist Candidates", "scenario": "Automated shortlisting of candidates based on the screening results for further evaluation.", "actors": ["HR Manager", "Machine Learning Model"], "preconditions": "Completed screening process with identified potential candidates", "steps": ["HR Manager reviews the shortlisted candidates from the screening results.", "Machine Learning Model assists in identifying the candidates who are likely to be a good fit based on the job requirements and cultural fit assessment.", "The model provides a ranked list of potential candidates for the next stage of the hiring process."]}, "testcases": [{"name": "Review Shortlisted Candidates", "description": "Verify that the HR Manager can successfully review the shortlisted candidates from the screening results.", "input": {"candidatesList": ["CandidateX", "CandidateY", "CandidateZ"]}, "expected": {"outcome": "Candidates reviewed successfully", "status": "Ready for further evaluation"}}, {"name": "Machine Learning Model Shortlisting", "description": "Verify that the Machine Learning Model can correctly identify the candidates likely to be a good fit based on job requirements and cultural fit assessment.", "input": {"jobRequirements": "Software Engineer", "culturalFitAssessment": "High", "screeningResults": {"CandidateX": {"fitScore": 0.75}, "CandidateY": {"fitScore": 0.9}, "CandidateZ": {"fitScore": 0.6}}}, "expected": {"outcome": "Model provided ranked list of potential candidates", "status": "Ready for next stage"}}]}, {"usecase": {"name": "Automated Email Outreach", "scenario": "Automatic sending of emails to potential candidates to inquire about their interest in job opportunities.", "actors": ["HR Manager", "Bot"], "preconditions": "Shortlisted candidates identified from the screening process", "steps": ["Bot sends personalized emails to the shortlisted candidates to gauge their interest in job opportunities.", "HR Manager monitors the responses and proceeds with further communication based on candidate responses."]}, "testcases": [{"name": "Send Personalized Emails", "description": "Verify that the bot can successfully send personalized emails to shortlisted candidates.", "input": {"candidateList": ["CandidateA", "CandidateB", "CandidateC"], "emailContent": "We are impressed with your profile. Are you open to new job opportunities?"}, "expected": {"outcome": "Emails sent successfully", "status": "Awaiting response"}}, {"name": "Monitor Candidate Responses", "description": "Verify that the HR Manager can effectively monitor candidate responses and proceed with further communication.", "input": {"responseMetrics": {"responseRate": "60%", "interestedCandidates": ["CandidateA", "CandidateC"]}}, "expected": {"outcome": "Responses monitored successfully", "nextSteps": "Further communication with interested candidates"}}]}, {"usecase": {"name": "Automated Interview Scheduling", "scenario": "Automated scheduling of interviews for the shortlisted candidates based on technical panel availability.", "actors": ["HR Manager", "Bot", "Technical Panel"], "preconditions": "Shortlisted candidates available for interview", "steps": ["Bot schedules interviews for the shortlisted candidates based on the calendar availability of the technical panel members.", "HR Manager oversees the interview scheduling process and makes necessary adjustments if required."]}, "testcases": [{"name": "Scheduling with Available Panel", "description": "Verify that the bot can successfully schedule interviews for shortlisted candidates based on the technical panel's availability.", "input": {"shortlistedCandidates": ["CandidateA", "CandidateB", "CandidateC"], "panelAvailability": {"panelMember1": "2023-06-15T10:00:00", "panelMember2": "2023-06-15T11:00:00", "panelMember3": "2023-06-15T14:00:00"}}, "expected": {"outcome": "Interviews scheduled successfully", "status": "Scheduled"}}, {"name": "Adjustments by HR Manager", "description": "Verify that the HR manager can make necessary adjustments to the interview scheduling process when required.", "input": {"interviewDetails": {"candidate": "CandidateA", "timeSlot": "2023-06-15T11:00:00"}, "adjustments": "HR Manager requests new time slot for CandidateA"}, "expected": {"outcome": "Adjustments made successfully", "status": "Updated"}}]}, {"usecase": {"name": "Verify Order Creation in EBS Application", "scenario": "Validate that the order is created in the EBS application and cross-verify the information with the finance data spreadsheet.", "actors": ["Tester", "EBS Application"], "preconditions": "Finance data and order creation data must be accessible and available for comparison.", "steps": ["Tester initiates the order creation process in the EBS application.", "EBS Application processes the order creation request and generates the relevant order information.", "Tester retrieves the finance data pertaining to the created order.", "Tester compares the order information from the EBS application with the finance data spreadsheet.", "The order information is validated for accuracy and correctness."]}, "testcases": [{"name": "Order Creation Success", "description": "Verify that the order is successfully created in the EBS application and the information matches the finance data spreadsheet.", "input": {"orderDetails": {"orderId": "ORD123", "customerName": "John Doe", "totalAmount": 1500.0}, "financeData": {"orderId": "ORD123", "customerName": "John Doe", "totalAmount": 1500.0}}, "expected": {"outcome": "Order creation and verification successful", "status": "Pass"}}, {"name": "Invalid Order Retrieval", "description": "Verify that the system handles the case when the tester attempts to retrieve finance data for a non-existent order.", "input": {"orderDetails": {"orderId": "INVALID001"}}, "expected": {"outcome": "Order retrieval failed", "status": "Fail"}}, {"name": "Mismatched Order Information", "description": "Ensure that the system properly identifies and reports any discrepancies between the order information from the EBS application and the finance data spreadsheet.", "input": {"orderDetails": {"orderId": "ORD456", "customerName": "Jane Smith", "totalAmount": 2000.0}, "financeData": {"orderId": "ORD456", "customerName": "Jane Smith", "totalAmount": 1800.0}}, "expected": {"outcome": "Order information mismatch detected", "status": "Fail"}}]}, {"usecase": {"name": "Perform Revenue Calculation", "scenario": "Automate revenue calculations for the order scenarios uploaded in the test suite.", "actors": ["UiPath", "Test Suite"], "preconditions": "Test suite must contain the relevant order scenarios and the required finance data for revenue calculation.", "steps": ["UiPath accesses the test suite and retrieves the order scenarios for revenue calculation.", "UiPath performs automated calculations using the finance data for each scenario.", "UiPath generates the calculated revenue for each scenario.", "The calculated revenue is cross-verified for accuracy."]}, "testcases": [{"name": "Successful Retrieval of Order Scenarios", "description": "Verify that UiPath can successfully access and retrieve the order scenarios for revenue calculation from the test suite.", "input": {}, "expected": {"outcome": "Order scenarios retrieved successfully"}}, {"name": "Automated Revenue Calculation per Scenario", "description": "Verify that UiPath can perform automated revenue calculations using the finance data for each scenario.", "input": {"scenarioID": "SC001", "financeData": "sampleData.xlsx"}, "expected": {"outcome": "Automated revenue calculation completed successfully"}}, {"name": "Generated Revenue Verification", "description": "Verify that the calculated revenue for each scenario is accurate.", "input": {"scenarioID": "SC001", "calculatedRevenue": "$1500"}, "expected": {"outcome": "Calculated revenue is accurate"}}, {"name": "Invalid Finance Data for Calculation", "description": "Verify that UiPath handles the case where the required finance data for revenue calculation is missing or invalid.", "input": {"scenarioID": "SC002", "financeData": "missingData.xlsx"}, "expected": {"outcome": "Failed: Invalid or missing finance data"}}]}, {"usecase": {"name": "Validate Frontend to Backend Data", "scenario": "Automate the validation process to ensure consistency between frontend and backend data.", "actors": ["UiPath", "Frontend", "Backend"], "preconditions": "Frontend and backend data must be accessible for comparison and validation.", "steps": ["UiPath retrieves frontend data from the UI components.", "UiPath accesses and retrieves corresponding backend data.", "UiPath compares the frontend data with the backend data to validate consistency.", "Any inconsistencies or disparities are flagged for further investigation."]}, "testcases": [{"name": "Valid Data Comparison", "description": "Verify that the frontend and backend data match, indicating a consistent state.", "input": {"frontendData": "sampleFrontendData", "backendData": "sampleBackendData"}, "expected": {"outcome": "Data validation successful", "status": "Consistent"}}, {"name": "Invalid Backend Data", "description": "Verify that the system handles the case where the backend data is inaccessible or erroneous.", "input": {"frontendData": "sampleFrontendData", "backendData": "invalidBackendData"}, "expected": {"outcome": "Data validation failed", "error": "Backend data error"}}, {"name": "Inconsistent Data", "description": "Verify that inconsistencies between frontend and backend data are identified and flagged.", "input": {"frontendData": "inconsistentFrontend", "backendData": "inconsistentBackend"}, "expected": {"outcome": "Data validation failed", "error": "Inconsistent data found"}}]}, {"usecase": {"name": "Trigger Attended Bot", "scenario": "User triggers the Attended Bot to initiate the extraction and validation process for background verification documents.", "actors": ["User"], "preconditions": "User has downloaded the documents from the internal application to the local folder.", "steps": ["User triggers the Attended Bot for the background verification process.", "Bot fetches all the folders and documents from the specified local folder.", "Bot segregates PDF and Excel documents separately for processing."]}, "testcases": [{"name": "Valid Trigger", "description": "Verify that the user can successfully trigger the Attended Bot for background verification document processing.", "input": {"localFolder": "background_docs_folder"}, "expected": {"outcome": "Bot triggered successfully", "result": "Documents fetched and segregated for processing"}}, {"name": "Empty Local Folder", "description": "Verify that the system handles the case where the user tries to trigger the Attended Bot with an empty local folder.", "input": {"localFolder": ""}, "expected": {"outcome": "Bot trigger failed", "error": "No documents found in the local folder"}}]}, {"usecase": {"name": "Process Excel Document", "scenario": "Bot processes the Excel document for extracting required education and employment information.", "actors": ["Bot"], "preconditions": "Bot has received an Excel document for processing.", "steps": ["Bot reads and extracts required education and employment information from the Excel document.", "Bot stores the extracted information into a collection for data entry."]}, "testcases": [{"name": "Valid Excel Processing", "description": "Verify that the bot successfully processes the Excel document and extracts the required education and employment information.", "input": {"excelDocument": "sample_excel_file.xlsx"}, "expected": {"outcome": "Extraction successful", "status": "Information extracted and stored"}}, {"name": "Not an Excel Document", "description": "Verify that the system handles the case where the bot receives document other than excel format, such as pdf.", "input": {"excelDocument": "sample_excel_file.pdf"}, "expected": {"outcome": "Not an Excel Format", "status": "Failed to extract Information."}}, {"name": "No Excel Document", "description": "Verify that the system handles the case where the bot receives no Excel document for processing.", "input": {"excelDocument": ""}, "expected": {"outcome": "Extraction failed", "status": "No document received"}}]}, {"usecase": {"name": "Process PDF Document", "scenario": "Bot processes the PDF document for extracting required education and employment details.", "actors": ["Bot"], "preconditions": "Bot has received a PDF document for processing.", "steps": ["Bot extracts required education and employment details from each PDF document.", "Bot stores the extracted details into a collection for data entry."]}, "testcases": [{"name": "Valid PDF Document Processing", "description": "Verify that the bot successfully processes a PDF document to extract education and employment details.", "input": {"documentName": "resume.pdf"}, "expected": {"outcome": "Document processed successfully", "detailsExtracted": true, "collectionEntryStatus": "Success"}}, {"name": "Not a PDF Document", "description": "Verify that the system handles the case where the bot receives not a PDF format document for processing, such as .doc file.", "input": {"documentName": "resume.doc"}, "expected": {"outcome": "Not a pdf document to process", "detailsExtracted": false, "collectionEntryStatus": "Failed"}}, {"name": "No PDF Document for Processing", "description": "Verify that the system handles the case where the bot receives no PDF document for processing.", "input": {"documentName": ""}, "expected": {"outcome": "No document to process", "detailsExtracted": false, "collectionEntryStatus": "Not Required"}}]}, {"usecase": {"name": "Move Documents", "scenario": "Bot moves the processed documents to a specific completed folder.", "actors": ["Bot"], "preconditions": "Bot has extracted and processed the required information from the documents.", "steps": ["Bot moves the processed documents from the current folder to a designated completed folder."]}, "testcases": [{"name": "Valid Document Move", "description": "Verify that the bot successfully moves the processed documents to the completed folder.", "input": {"current_folder": "processing", "completed_folder": "completed_documents"}, "expected": {"outcome": "Documents moved to completed folder", "status": "Success"}}, {"name": "Empty Parameters for Document Move", "description": "Verify that the bot responds when processing folder or completed folder information is missing.", "input": {"current_folder": "", "completed_folder": "completed_documents"}, "expected": {"outcome": "No processing folder is given as inout", "status": "Failed"}}, {"name": "Invalid Document Move", "description": "Verify that the bot cannot move documents without processing them.", "input": {"current_folder": "new_documents", "completed_folder": "completed_documents"}, "expected": {"outcome": "No documents to move", "status": "Failed"}}]}, {"usecase": {"name": "Data Entry on Web Application", "scenario": "Bot logs in to the web application, navigates to the required screen, and performs data entry.", "actors": ["Bot"], "preconditions": "Bot has the required information extracted and stored for data entry.", "steps": ["Bot logs in to the web application.", "Bot navigates to the designated screen for data entry.", "Bot uploads education, employment, and personal documents and information into the required fields.", "Bot submits the record if there are no errors on the screen."]}, "testcases": [{"name": "Valid Data Entry", "description": "Verify that bot successfully performs data entry with all required information", "input": {"credentials": "valid", "documents": {"education": "valid documents", "employment": "valid documents", "personalInfo": "valid information"}, "submitRecord": "no errors on the screen"}, "expected": {"outcome": "Record submission successful", "status": "Approved"}}, {"name": "Invalid Data Entry - Missing Personal Info", "description": "Verify that bot cannot perform data entry if personal information is missing", "input": {"credentials": "valid", "documents": {"education": "valid documents", "employment": "valid documents", "personalInfo": "missing"}, "submitRecord": "no errors on the screen"}, "expected": {"outcome": "Record submission failed", "status": "Rejected"}}]}, {"usecase": {"name": "Logout and Reporting", "scenario": "Bot logs out of the web application and captures the success/failure details into an excel file.", "actors": ["Bot"], "preconditions": "Bot has completed the data entry process on the web application.", "steps": ["Bot performs the logout step on the web application.", "Bot captures all the success/failure details and exceptions into an excel file."]}, "testcases": [{"name": "Successful Logout", "description": "Bot successfully logs out of the web application", "input": {"action": "perform logout step"}, "expected": {"outcome": "Logout successful", "fileCaptured": "success details captured in excel file"}}, {"name": "Failed Logout", "description": "Bot fails to logout of the web application", "input": {"action": "try to perform logout step"}, "expected": {"outcome": "Logout failed", "fileCaptured": "failure details captured in excel file"}}]}, {"usecase": {"name": "Send Final Report", "scenario": "Bot sends the final report with success and exception details for each candidate to a specific mail ID.", "actors": ["Bot"], "preconditions": "Bot has captured all the success/failure details and exceptions in an excel file.", "steps": ["Bot sends the final report via email to the specified mail ID."]}, "testcases": [{"name": "Valid Final Report Delivery", "description": "Verify that the bot can successfully send the final report via email to the specified mail ID.", "input": {"fileLocation": "/path/to/final_report.xlsx", "mailID": "example@example.com"}, "expected": {"outcome": "Final report sent successfully", "status": "Delivered"}}, {"name": "Invalid/Empty File Location", "description": "Verify that the system handles the case where the bot tries to send the final report without a valid file location.", "input": {"fileLocation": "", "mailID": "example@example.com"}, "expected": {"outcome": "Final report sending failed", "status": "Not Delivered"}}, {"name": "Invalid/Empty Mail ID", "description": "Verify that the system handles the case where the bot tries to send the final report without a valid mail ID.", "input": {"fileLocation": "/path/to/final_report.xlsx", "mailID": ""}, "expected": {"outcome": "Final report sending failed", "status": "Not Delivered"}}]}, {"usecase": {"name": "User Input Data for Stroke Prediction", "scenario": "A user provides input data to the UiPath App for predicting the vulnerability to a brain stroke.", "actors": ["User"], "preconditions": "The UiPath App is installed and accessible to the user.", "steps": ["User opens the UiPath App on their device.", "User enters the required input data such as age, blood pressure, cholesterol level, exercise habits, and smoking status.", "The UiPath App processes the input data using UiPath AI Centre.", "The UiPath App predicts the vulnerability to a brain stroke based on the input data.", "The prediction result is displayed to the user."]}, "testcases": [{"name": "Successful Prediction with Normal Input Data", "description": "User provides normal input data for predicting stroke vulnerability", "input": {"age": 35, "bloodPressure": "120/80", "cholesterolLevel": 180, "exerciseHabits": "active", "smokingStatus": "non-smoker"}, "expected": {"outcome": "Prediction result displayed", "status": "Successful"}}, {"name": "Successful Prediction with High Risk Input Data", "description": "User provides high risk input data for predicting stroke vulnerability", "input": {"age": 60, "bloodPressure": "160/100", "cholesterolLevel": 250, "exerciseHabits": "sedentary", "smokingStatus": "smoker"}, "expected": {"outcome": "Prediction result displayed", "status": "Successful"}}, {"name": "Unsuccessful Prediction - Invalid Input Data", "description": "User leaves input data empty for stroke prediction", "input": {"age": "ku", "bloodPressure": "160/100", "cholesterolLevel": "sedentary", "exerciseHabits": "Yes", "smokingStatus": "non-smoker"}, "expected": {"outcome": "Prediction failed: please provide a consistent age data", "status": "Failed"}}, {"name": "Unsuccessful Prediction - Empty Input Data", "description": "User leaves input data empty for stroke prediction", "input": {"age": null, "bloodPressure": "", "cholesterolLevel": null, "exerciseHabits": "", "smokingStatus": ""}, "expected": {"outcome": "Prediction failed due to incomplete data", "status": "Failed"}}]}, {"usecase": {"name": "Integration with UiPath Orchestrator Process", "scenario": "The UiPath App integrates with UiPath Orchestrator Process for managing the prediction of barinstroke.", "actors": ["UiPath App", "UiPath Orchestrator Process"], "preconditions": "The UiPath Orchestrator Process is set up and connected to the UiPath App.", "steps": ["The UiPath App sends the prediction task to the UiPath Orchestrator Process.", "UiPath Orchestrator Process receives the task from the UiPath App.", "UiPath Orchestrator Process manages the task scheduling and resource allocation for the prediction process.", "The prediction result is sent back to the UiPath App by UiPath Orchestrator Process.", "The UiPath App receives and displays the prediction result to the user."]}, "testcases": [{"name": "Send Prediction Task", "description": "Verify that the UiPath App can successfully send the prediction task to UiPath Orchestrator Process.", "input": {}, "expected": {"outcome": "Prediction task sent successfully", "status": "Sent"}}, {"name": "Receive Prediction Result", "description": "Verify that the UiPath App can successfully receive the prediction result from UiPath Orchestrator Process.", "input": {}, "expected": {"outcome": "Prediction result received successfully", "status": "Displayed"}}, {"name": "Manage Task Scheduling and Resource Allocation", "description": "Verify that UiPath Orchestrator Process can appropriately manage task scheduling and resource allocation for the prediction process.", "input": {}, "expected": {"outcome": "Task scheduling and resource allocation managed successfully", "status": "Processed"}}]}, {"usecase": {"name": "Track Number of Emails Sent", "scenario": "To track the number of emails sent out in the organization by a user to identify spam, unwanted, or bulk emails.", "actors": ["Bot", "IT Server Team", "Users"], "preconditions": "Bot is active and monitoring the organization's email server.", "steps": ["Bot continuously monitors the count of emails sent out by users in the organization.", "Bot checks the count of emails sent out by each user per day and compares it to the set threshold for email volume per user per hour.", "If a user exceeds the set threshold and is not on the whitelist, the bot triggers an alert to the IT server management team.", "The bot automatically blocks the user's email ID from sending any more emails if it crosses the threshold and is not whitelisted."]}, "testcases": [{"name": "Monitor Email Count", "description": "Verify that the Bot continuously monitors the count of emails sent out by users in the organization.", "input": {"serverStatus": "Active"}, "expected": {"outcome": "Bot active and monitoring email server count", "status": "Monitoring"}}, {"name": "Check Email Count Threshold", "description": "Verify that the Bot checks the count of emails sent out by each user per day and compares it to the set threshold for email volume per user per hour.", "input": {"user": "UserID", "emailsSentToday": 50, "thresholdPerHour": 30}, "expected": {"outcome": "Email count checked against threshold", "status": "WithinThreshold"}}, {"name": "Trigger Alert for Exceeding Threshold", "description": "Verify that the Bot triggers an alert to the IT server management team if a user exceeds the set threshold and is not on the whitelist.", "input": {"user": "UserID", "emailsSentToday": 90, "thresholdPerHour": 60}, "expected": {"outcome": "Alert triggered for exceeding threshold", "status": "AlertSent"}}, {"name": "Block User's Email ID", "description": "Verify that the Bot automatically blocks the user's email ID from sending any more emails if it crosses the threshold and is not whitelisted.", "input": {"user": "UserID", "emailsSentToday": 100, "whitelisted": false}, "expected": {"outcome": "User's email ID blocked due to exceeding threshold", "status": "Blocked"}}]}, {"usecase": {"name": "Notify IT Server Team of High Email Volume", "scenario": "To inform the IT server team of users sending out excessive emails within a day, exceeding the set threshold.", "actors": ["Bot", "IT Server Team"], "preconditions": "Bot is active and monitoring the organization's email server.", "steps": ["Bot calculates the number of emails sent out by each user in the organization for the day.", "If any user sends out emails above the set threshold, the bot triggers a notification to the IT server team.", "The IT server team is informed about the user's excessive email sending activity for further action."]}, "testcases": [{"name": "Calculate User Email Count", "description": "Verify that the bot can accurately calculate the number of emails sent out by each user in the organization for the day.", "input": {"userEmailCounts": {"user1": 150, "user2": 80, "user3": 200}}, "expected": {"outcome": "User email counts calculated successfully", "status": "Success"}}, {"name": "Notify IT Server Team of Excessive Email Volume", "description": "Verify that the bot can trigger a notification to the IT server team if any user sends out emails above the set threshold.", "input": {"threshold": 100, "userEmailCounts": {"user1": 150, "user2": 80, "user3": 200}}, "expected": {"outcome": "IT server team notified of excessive email volume", "status": "Notification triggered"}}, {"name": "Notify IT Server Team of Normal Email Volume", "description": "Verify that the bot does not trigger a notification to the IT server team if all user email counts are within the set threshold.", "input": {"threshold": 100, "userEmailCounts": {"user1": 80, "user2": 90, "user3": 70}}, "expected": {"outcome": "No excessive email volume detected", "status": "No notification triggered"}}]}, {"usecase": {"name": "Predict Future Email Volume", "scenario": "To predict the number of emails that will be sent out in the coming week or year using the data collected.", "actors": ["Bot", "IT Server Team"], "preconditions": "Bot has collected sufficient data on email sending patterns within the organization.", "steps": ["Bot analyses the historical data on email volume to predict the number of emails that will be sent out in the upcoming week or year.", "The prediction is based on the historical patterns and is presented to the IT server team for capacity planning decisions.", "The server team utilizes the prediction to adjust server capacity or threshold values as needed."]}, "testcases": [{"name": "Analyse Historical Data for Weekly Volume Prediction", "description": "Verify that the bot can successfully analyze historical data to predict the number of emails for the upcoming week.", "input": {"data": "Historical email sending patterns for the past weeks"}, "expected": {"outcome": "Successful prediction of email volume for the upcoming week", "predictionType": "Weekly", "status": "Success"}}, {"name": "Analyse Historical Data for Yearly Volume Prediction", "description": "Verify that the bot can successfully analyze historical data to predict the number of emails for the upcoming year.", "input": {"data": "Historical email sending patterns for the past years"}, "expected": {"outcome": "Successful prediction of email volume for the upcoming year", "predictionType": "Yearly", "status": "Success"}}, {"name": "Present Prediction to IT Server Team", "description": "Verify that the predicted email volume based on historical data is presented to the IT server team for capacity planning.", "input": {"predictedVolume": "Number of emails predicted for the upcoming period"}, "expected": {"outcome": "Presentation of predicted email volume to IT server team", "status": "Success"}}, {"name": "Adjust Server Capacity Based on Prediction", "description": "Verify that the IT server team successfully adjusts server capacity or threshold values based on the predicted email volume.", "input": {"currentCapacity": "Current server capacity", "predictedVolume": "Predicted email volume"}, "expected": {"outcome": "Successful adjustment of server capacity or threshold values based on prediction", "status": "Success"}}]}, {"usecase": {"name": "Store Data in Database and Display on Dashboard", "scenario": "To store the email tracking data in a database and present it on a dashboard for the IT server team's visibility.", "actors": ["Bot", "IT Server Team"], "preconditions": "Bot has collected email tracking data and needs to store and display the data for further analysis.", "steps": ["Bot stores the collected email tracking data in a database for future reference.", "The stored data is made available on a dashboard for the IT server team to monitor and analyze the email sending patterns within the organization."]}, "testcases": [{"name": "Store Email Tracking Data in Database", "description": "Verify that the bot can successfully store the collected email tracking data in the database.", "input": {}, "expected": {"outcome": "Data stored in the database successfully", "status": "Stored"}}, {"name": "Display Stored Data on Dashboard", "description": "Verify that the IT server team can view the stored email tracking data on the dashboard.", "input": {}, "expected": {"outcome": "Data displayed on the dashboard successfully", "status": "Displayed"}}, {"name": "Access Unauthorized Data", "description": "Verify that unauthorized users cannot access the stored email tracking data.", "input": {}, "expected": {"outcome": "Access to data denied", "status": "UnauthorizedAccess"}}]}, {"usecase": {"name": "Extract Data from Packing List", "scenario": "The system extracts key data from a packing list document provided by the vendor.", "actors": ["System"], "preconditions": "A packing list document is available for processing.", "steps": ["The system processes the packing list document using the custom-trained ML package for packing lists and invoices.", "The system extracts relevant data such as item names, quantities, and descriptions.", "The extracted data is saved into variables for further processing."]}, "testcases": [{"testcase_name": "Valid Packing List Processing", "description": "Verify that the system successfully extracts data from a valid packing list document.", "input": {"document_type": "packing_list", "document_path": "path/to/packing_list.pdf"}, "expected_output": {"outcome": "Data extraction successful", "data": {"item_names": ["Item A", "Item B", "Item C"], "quantities": [100, 50, 75], "descriptions": ["Description for Item A", "Description for Item B", "Description for Item C"]}}}, {"testcase_name": "Invalid Document Type", "description": "Verify that the system handles an unsupported document type.", "input": {"document_type": "invoice", "document_path": "path/to/invoice.pdf"}, "expected_output": {"outcome": "Data extraction failed", "error_message": "Unsupported document type: 'invoice'"}}, {"testcase_name": "Missing Document", "description": "Verify that the system handles the case where no document is provided for processing.", "input": {"document_type": "packing_list", "document_path": ""}, "expected_output": {"outcome": "Data extraction failed", "error_message": "No document provided for processing"}}]}, {"usecase": {"name": "Extract Data from Invoice", "scenario": "The system extracts key data from an invoice document provided by the vendor.", "actors": ["System"], "preconditions": "An invoice document is available for processing.", "steps": ["The system processes the invoice document using the custom-trained ML package for packing lists and invoices.", "The system extracts relevant data such as invoice number, date, total amount, and vendor details.", "The extracted data is saved into variables for further processing."]}, "testcases": [{"name": "Valid Invoice Data Extraction", "description": "Verify that the system successfully extracts key data from a valid invoice document provided by the vendor.", "input": {"invoiceDocument": "path_to_valid_invoice_document.pdf"}, "expected": {"outcome": "Key data extracted successfully", "status": "Success"}}, {"name": "Invalid Invoice Data Extraction", "description": "Ensure that the system handles the case where an invalid or corrupted invoice document is provided for processing.", "input": {"invoiceDocument": "path_to_invalid_invoice_document.pdf"}, "expected": {"outcome": "Failed to extract key data", "status": "Error"}}, {"name": "Missing Invoice Document", "description": "Verify that the system handles the scenario where no invoice document is provided for processing.", "input": {"invoiceDocument": ""}, "expected": {"outcome": "No invoice document provided", "status": "Error"}}]}, {"usecase": {"name": "Compare Captured Data for Accuracy", "scenario": "The system compares the extracted data from the packing list and the invoice for accuracy.", "actors": ["System"], "preconditions": "Data has been extracted from both the packing list and the invoice.", "steps": ["The system compares the extracted data from the packing list with the data from the invoice to ensure consistency.", "Any discrepancies or inconsistencies are flagged for further review."]}, "testcases": [{"name": "Data Comparison - Successful", "description": "Verify that the system successfully compares the extracted data from the packing list and the invoice for accuracy.", "input": {}, "expected": {"outcome": "Data comparison successful", "status": "Consistent"}}, {"name": "Data Comparison - Discrepancy", "description": "Verify that the system identifies discrepancies between the extracted data from the packing list and the invoice.", "input": {}, "expected": {"outcome": "Discrepancy identified", "status": "Flagged for review"}}]}, {"usecase": {"name": "Enter Data into Web Based System", "scenario": "The system enters the accurate captured data into a web-based system for further processing.", "actors": ["System"], "preconditions": "Accurate data from the packing list and invoice has been validated.", "steps": ["The system populates the web-based system with the accurate captured data.", "The data is used to generate a notification email to the contact in the country of destination."]}, "testcases": [{"name": "Enter accurate data", "description": "System enters accurate captured data into the web-based system", "input": {"data": "accurate captured data from packing list and invoice"}, "expected": {"outcome": "data entered successfully", "notificationSent": true}}, {"name": "Enter inaccurate data", "description": "System tries to enter inaccurate captured data into the web-based system", "input": {"data": "inaccurate captured data from packing list and invoice"}, "expected": {"outcome": "data validation error", "notificationSent": false}}]}, {"usecase": {"name": "Administer Prescription Reminder", "scenario": "A care taker receives a notification for administering medication to a patient at a specific time.", "actors": "Care Taker", "preconditions": "Care taker must have the app installed and be responsible for administering medications to patients.", "steps": ["Care taker sets up the medication schedule for each patient within the app.", "At the specified time, the app sends a notification to the care taker for administering the medication.", "The care taker administers the medication to the patient and marks it as completed within the app."]}, "testcases": [{"name": "Schedule Medication - Success", "description": "Care taker successfully sets up the medication schedule for a patient", "input": {"careTaker": "John Smith", "patient": "Alice Johnson", "medicationName": "Aspirin", "dosage": "500mg", "scheduleTime": "08:00 AM"}, "expected": {"outcome": "Medication schedule successfully saved", "status": "Success"}}, {"name": "Receive Medication Reminder - Success", "description": "Care taker receives a notification for administering medication at a specified time", "input": {"careTaker": "John Smith", "patient": "Alice Johnson", "medicationName": "Aspirin", "dosage": "500mg", "scheduleTime": "08:00 AM"}, "expected": {"outcome": "Notification received for administering medication", "status": "Success"}}, {"name": "Administer Medication - Success", "description": "Care taker successfully marks medication as administered for the patient within the app", "input": {"careTaker": "John Smith", "patient": "Alice Johnson", "medicationName": "Aspirin", "dosage": "500mg", "scheduleTime": "08:00 AM", "administeredTime": "08:30 AM"}, "expected": {"outcome": "Medication marked as administered successfully", "status": "Success"}}, {"name": "Administer Medication - Failure", "description": "Care taker tries to mark medication as administered for the patient beyond the tolerance time", "input": {"careTaker": "John Smith", "patient": "Alice Johnson", "medicationName": "Aspirin", "dosage": "500mg", "scheduleTime": "08:00 AM", "administeredTime": "10:30 AM"}, "expected": {"outcome": "Administered time exceeds tolerance limit", "status": "Failure"}}]}, {"usecase": {"name": "Medical Information Inquiry", "scenario": "A care taker seeks information about a general medical problem, treatment, side effects, or home remedies using the chatbot feature.", "actors": "Care Taker", "preconditions": "Care taker must have access to the app's chatbot feature.", "steps": ["Care taker accesses the chatbot feature within the app.", "Care taker inputs the query regarding a medical problem, treatment, side effects, or home remedies.", "The chatbot processes the query and provides relevant information to the care taker."]}, "testcases": [{"name": "Care Taker Inquires about General Medical Problem", "description": "Verify that the chatbot provides relevant information when a care taker queries about a general medical problem", "input": {"queryType": "Medical Problem", "queryContent": "What are the symptoms of the flu?", "careTakerID": "user123"}, "expected": {"outcome": "Chatbot provides information about flu symptoms", "status": "Success"}}, {"name": "Care Taker Inquires about Treatment", "description": "Verify that the chatbot provides relevant information when a care taker queries about a medical treatment", "input": {"queryType": "Treatment", "queryContent": "What are the treatment options for migraines?", "careTakerID": "user456"}, "expected": {"outcome": "Chatbot provides information about migraine treatments", "status": "Success"}}, {"name": "Care Taker Inquires about Side Effects", "description": "Verify that the chatbot provides relevant information when a care taker queries about the side effects of a medication", "input": {"queryType": "Side Effects", "queryContent": "What are the side effects of ibuprofen?", "careTakerID": "user789"}, "expected": {"outcome": "Chatbot provides information about ibuprofen side effects", "status": "Success"}}, {"name": "Care Taker Inquires about Home Remedies", "description": "Verify that the chatbot provides relevant information when a care taker queries about home remedies for a common cold", "input": {"queryType": "Home Remedies", "queryContent": "What are some home remedies for a common cold?", "careTakerID": "user101"}, "expected": {"outcome": "Chatbot provides information about home remedies for common cold", "status": "Success"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account to interact with the Cloth Consultant Bot.", "actors": "Registered User", "preconditions": "User must have a registered account and login credentials.", "steps": ["Registered User navigates to the Cloth Consultant Bot interface.", "Registered User enters their login credentials (e.g., username, password).", "Registered User submits the login form.", "The system validates the login credentials.", "The system grants access to the user account."]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with valid credentials", "input": {"username": "john_doe", "password": "P@ssw0rd123"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Invalid or empty Password", "description": "Verify that the system rejects login when the user enters an invalid password", "input": {"username": "jane_smith", "password": "invalidpass"}, "expected": {"outcome": "Login failed", "status": "Access denied"}}, {"name": "Invalid or Empty Username", "description": "Verify that the system rejects login when the user enters an invalid username", "input": {"username": "invalid_user", "password": "P@ssw0rd123"}, "expected": {"outcome": "Login failed", "status": "Access denied"}}]}, {"usecase": {"name": "Select Climate Condition", "scenario": "User selects a climate condition for which they need cloth suggestions.", "actors": "User", "preconditions": "User must be logged in and navigated to the Bot's recommendation section.", "steps": ["User navigates to the climate selection section within the Cloth Consultant Bot interface.", "User selects a specific climate condition (e.g., hot, cold, rainy).", "The system registers the selected climate condition for further use."]}, "testcases": [{"name": "Valid Climate Condition Selection", "description": "Verify that a user can successfully select a climate condition for cloth suggestions.", "input": {"selectedClimate": "cold"}, "expected": {"outcome": "Climate condition selected successfully", "status": "Condition is selected"}}, {"name": "No Climate Condition Selection", "description": "Verify the system response when no selection is done.", "input": {"selectedClimate": ""}, "expected": {"outcome": "No condition is selected", "status": "Condition not selected"}}, {"name": "Invalid Climate Condition Selection", "description": "Verify the system response when the user tries to select an invalid climate condition.", "input": {"selectedClimate": "tropical"}, "expected": {"outcome": "Invalid climate condition", "status": "Condition not registered"}}]}, {"usecase": {"name": "Receive Cloth Recommendation", "scenario": "The user receives personalized cloth recommendations based on the selected climate condition.", "actors": "User", "preconditions": "User must have selected a climate condition and be logged into the Bot interface.", "steps": ["The system processes the selected climate condition.", "The system analyzes the user's preferences and previous purchases (if available).", "The system generates personalized cloth recommendations based on the climate condition and user preferences.", "The recommendations are displayed to the user within the Bot interface."]}, "testcases": [{"name": "Valid Cloth Recommendations", "description": "Verify that a user can receive personalized cloth recommendations based on the selected climate condition and user preferences.", "input": {"climateCondition": "Hot"}, "expected": {"outcome": "Personalized cloth recommendations displayed", "status": "Viewed recommendations"}}, {"name": "No Climate Condition Selected", "description": "Verify the response when the user has not selected any climate condition.", "input": {"climateCondition": ""}, "expected": {"outcome": "No cloth recommendations displayed", "status": "Error: Climate condition not selected"}}, {"name": "Previous Purchases available", "description": "Verify that the system considers the user's previous purchases while generating cloth recommendations.", "input": {"climateCondition": "Cold", "previousPurchases": ["Jackets", "Sweaters"]}, "expected": {"outcome": "Cloth recommendations displayed based on user preferences and climate condition", "status": "Viewed recommendations"}}]}, {"usecase": {"name": "View Cloth Details", "scenario": "User views detailed information about a recommended cloth item.", "actors": "User", "preconditions": "User must have received cloth recommendations within the Bot interface.", "steps": ["User selects a specific cloth item from the recommended list.", "The system fetches and displays detailed information about the selected cloth item, including fabric, size availability, price, and customer reviews."]}, "testcases": [{"name": "Select Recommended Cloth", "description": "Verify that the user can select a specific cloth item from the recommended list.", "input": {}, "expected": {"outcome": "Cloth item selected", "status": "Successful"}}, {"name": "View Cloth Details", "description": "Verify that the system fetches and displays detailed information about the selected cloth item.", "input": {"selectedItem": "Summer Dress"}, "expected": {"outcome": "Detailed information displayed", "status": "Successful"}}]}, {"usecase": {"name": "Add Cloth to Cart", "scenario": "User adds a recommended cloth item to the shopping cart for potential purchase.", "actors": "User", "preconditions": "User must have logged in and received cloth recommendations within the Bot interface.", "steps": ["User selects a specific cloth item from the recommended list.", "User clicks on the 'Add to Cart' option for the selected cloth item.", "The system adds the selected cloth item to the user's shopping cart for further consideration."]}, "testcases": [{"name": "Add Recommended Cloth to Cart", "description": "Confirm that the user can add a recommended cloth item to the shopping cart.", "input": {"selectedItem": "Blue T-shirt"}, "expected": {"outcome": "Cloth item added to the shopping cart", "status": "Success"}}]}, {"usecase": {"name": "Dispatcher Receives Request", "scenario": "The support team receives a request for distribution list creation via email.", "actors": "Support Team, User", "preconditions": "Email system is set up and functioning, User has access to email communication with the support team", "steps": ["User sends an email request for distribution list creation to the support team", "The support team receives the email request", "The robot checks all emails and filters them based on the subject for distribution list creation requests"]}, "testcases": [{"name": "Valid Request Received", "description": "Verify that the support team receives a valid email request for distribution list creation", "input": {"emailContent": "Request for distribution list creation", "senderEmail": "user123@example.com", "receiverEmail": "supportteam@example.com"}, "expected": {"outcome": "Email request received successfully", "status": "Success"}}, {"name": "Request with Invalid Subject", "description": "Verify that an email request with an invalid subject is not processed by the robot", "input": {"emailContent": "Invalid request content", "senderEmail": "user123@example.com", "receiverEmail": "supportteam@example.com"}, "expected": {"outcome": "Email request with invalid subject not processed", "status": "Failed"}}, {"name": "Request from Unauthorized User", "description": "Verify that email requests from unauthorized users are not processed", "input": {"emailContent": "Request for distribution list creation", "senderEmail": "unauthorizeduser@example.com", "receiverEmail": "supportteam@example.com"}, "expected": {"outcome": "Unauthorized user request not processed", "status": "Failed"}}]}, {"usecase": {"name": "Robot Processes Email Request", "scenario": "For each matched email, the robot performs the necessary steps to process the distribution list creation request", "actors": "Robot", "preconditions": "Email request matches the criteria for a distribution list creation request", "steps": ["Robot replies to the email sender, updating them that the process is in progress", "Robot extracts the sender's email ID and necessary details from the email body (e.g., DL name, usernames, owner name, country code)", "Robot adds the extracted details as a queue item in orchestrator"]}, "testcases": [{"name": "Valid Email Request Processing", "description": "Verify that the robot can process a valid email request for distribution list creation", "input": {"emailContent": "Email content with necessary details (e.g., DL name, usernames, owner name, country code)"}, "expected": {"outcome": "Email request processed successfully", "status": "In Progress"}}, {"name": "Invalid Email Request Processing", "description": "Verify that the robot can handle an invalid email request for distribution list creation", "input": {"emailContent": "Incomplete or incorrect email content"}, "expected": {"outcome": "Email request processing failed", "status": "Error - Invalid request"}}, {"name": "Sender Notification", "description": "Verify that the robot replies to the email sender updating them about the processing of the request", "input": {"senderEmail": "sender@example.com"}, "expected": {"outcome": "Reply sent to sender", "status": "Success"}}]}, {"usecase": {"name": "Robot Processes Queue Item", "scenario": "The robot picks each request from the queue item and processes the distribution list creation", "actors": "Robot", "preconditions": "Queue item contains a valid distribution list creation request", "steps": ["Robot picks the request from the queue item", "Robot adds the country code as a prefix to the distribution list (if required by customer)", "Robot verifies the existence of the owner in Active Directory (AD)", "If owner exists in AD, the robot creates the DL in the exchange server and adds the owner to it", "If owner doesn't exist in AD, the robot emails the user with the status and stops the process", "If DL creation is successful, the robot proceeds to the next step. Otherwise, the robot emails the user and stops the process", "Robot checks the existence of the users in Active Directory and adds only valid users as members to the distribution list", "Finally, the robot emails the user about the successful creation of the distribution list"]}, "testcases": [{"name": "Valid Request Processing", "description": "Verify that the robot processes the queue item and successfully creates a distribution list", "input": {"queueItem": "Queue item with valid distribution list creation request and owner details", "countryCodeRequired": false, "ownerExistInAD": true, "validUsers": ["user1", "user2"]}, "expected": {"outcome": "Distribution list created successfully", "emailSent": true, "status": "Success"}}, {"name": "Country Code Prefix Addition", "description": "Verify that the robot adds the country code as a prefix to the distribution list if required by the customer", "input": {"queueItem": "Queue item with distribution list creation request requiring country code prefix", "countryCodeRequired": true, "ownerExistInAD": true, "validUsers": ["user1", "user2"]}, "expected": {"outcome": "Country code added as prefix to distribution list", "status": "Success"}}, {"name": "Owner Not Exist in AD", "description": "Verify that the robot handles the scenario where the owner doesn't exist in Active Directory", "input": {"queueItem": "Queue item with distribution list creation request", "countryCodeRequired": false, "ownerExistInAD": false}, "expected": {"outcome": "Owner not found in Active Directory, user emailed with status", "status": "Success"}}, {"name": "DL Creation Failure", "description": "Verify that the robot handles the scenario where distribution list creation is unsuccessful", "input": {"queueItem": "Queue item with distribution list creation request", "countryCodeRequired": false, "ownerExistInAD": true}, "expected": {"outcome": "Distribution list creation failed, user emailed with status", "status": "Failed"}}, {"name": "Invalid Users in AD", "description": "Verify that the robot handles the scenario where invalid users are present in the distribution list", "input": {"queueItem": "Queue item with distribution list creation request and invalid users", "countryCodeRequired": false, "ownerExistInAD": true, "validUsers": ["validUser", "invalidUser"]}, "expected": {"outcome": "Distribution list created with valid users, invalid users handled separately, user emailed about the status", "status": "Success"}}]}, {"usecase": {"name": "Bot Start on Scheduled Time", "scenario": "The bot initiates and starts processing according to the scheduled time.", "actors": "Bot", "preconditions": "Bot is installed and configured with the scheduled time for execution.", "steps": ["Bot triggers as per the scheduled time.", "Bot reads the input file for the details of the files to be processed."]}, "testcases": [{"name": "Bot Initiates on Scheduled Time", "description": "Verify that the bot triggers as per the scheduled time.", "input": {"scheduledTime": "2024-06-30T08:00:00", "status": "configured"}, "expected": {"outcome": "Bot successfully triggered", "status": "Processed"}}, {"name": "Bot Reads Input File", "description": "Verify that the bot reads the input file for the details of the files to be processed.", "input": {"fileDetails": "input_file.txt", "status": "triggered"}, "expected": {"outcome": "Input file read successfully", "status": "Processed"}}]}, {"usecase": {"name": "Download File from Local Drive", "scenario": "The bot downloads the files to the local drive upon meeting the specified conditions.", "actors": "Bot", "preconditions": "Bot has determined that the file needs to be downloaded to the local drive.", "steps": ["Bot checks the cycle time and process file status in the input file.", "If cycle time is more than a year and process file status is yes, and download status is successful, the bot downloads the files to the local drive."]}, "testcases": [{"name": "File Download Required", "description": "Verify that the bot downloads the file when cycle time is more than a year, process file status is yes, and download status is successful", "input": {"cycleTime": "1 year 1 day", "processFileStatus": "yes", "downloadStatus": "successful"}, "expected": {"outcome": "File downloaded to local drive", "status": "Success"}}, {"name": "File Download Not Required - Cycle Time Not Met", "description": "Verify that the bot does not download the file when cycle time is less than a year", "input": {"cycleTime": "11 months", "processFileStatus": "yes", "downloadStatus": "successful"}, "expected": {"outcome": "File not downloaded - Cycle time condition not met", "status": "Skipped"}}, {"name": "File Download Not Required - Process File Status No", "description": "Verify that the bot does not download the file when the process file status is no", "input": {"cycleTime": "1 year 2 days", "processFileStatus": "no", "downloadStatus": "successful"}, "expected": {"outcome": "File not downloaded - Process file status is not yes", "status": "Skipped"}}, {"name": "File Download Not Required - Download Status Not Successful", "description": "Verify that the bot does not download the file when the download status is not successful", "input": {"cycleTime": "1 year 3 days", "processFileStatus": "yes", "downloadStatus": "failed"}, "expected": {"outcome": "File not downloaded - Download status is not successful", "status": "Skipped"}}]}, {"usecase": {"name": "Check File Size", "scenario": "The bot checks the size of the downloaded file.", "actors": "Bot", "preconditions": "Bot has downloaded the file to the local drive.", "steps": ["Bot checks the size of the downloaded file."]}, "testcases": [{"name": "Valid File Size Check", "description": "Verify that the bot can successfully check the size of the downloaded file", "input": {"filePath": "path/to/downloaded/file"}, "expected": {"outcome": "File size checked successfully", "status": "Success"}}, {"name": "Invalid File Size Check", "description": "Verify that the bot fails to check the size of the file if the file path is incorrect or file does not exist", "input": {"filePath": "invalid/file/path"}, "expected": {"outcome": "File size check failed", "status": "Failed"}}]}, {"usecase": {"name": "Upload File to AWS S3 Bucket", "scenario": "The bot uploads the file to the AWS S3 bucket after checking its size.", "actors": "Bot", "preconditions": "Bot has successfully downloaded the file to the local drive and determined its size.", "steps": ["If the file size is less than 20GB, the bot directly uploads it to the AWS S3 bucket.", "If the file size is larger than 20GB and contains more than 1 file, the bot merges them into one zip file.", "The bot then uploads the file or the zip file to the AWS S3 bucket."]}, "testcases": [{"name": "Small File Upload to AWS S3", "description": "Verify that the bot can successfully upload a small file (less than 20GB) to the AWS S3 bucket.", "input": {"fileSize": "15GB", "fileType": "text/plain", "fileContent": "Lorem ipsum dolor sit amet, consectetur adipiscing elit..."}, "expected": {"outcome": "File uploaded to AWS S3", "status": "Success", "fileId": "unique_file_id", "bucketLocation": "s3://bucket_name/file_path"}}, {"name": "Large File Upload to AWS S3", "description": "Verify that the bot can merge and upload large files (larger than 20GB) to the AWS S3 bucket.", "input": {"fileSize": "25GB", "fileCount": 3, "fileTypes": ["image/jpeg", "text/plain", "application/pdf"], "mergedFileType": "application/zip", "mergedFileContent": "binary_data_of_zip_file"}, "expected": {"outcome": "Large files merged and uploaded to AWS S3 as a zip file", "status": "Success", "fileId": "unique_file_id", "bucketLocation": "s3://bucket_name/merged_file_path"}}]}, {"usecase": {"name": "Extract Speed Records", "scenario": "Collect the speed records of various drivers during races on the same circuit.", "actors": "Data Analyst, System", "preconditions": "Speed records and race data are available for extraction and analysis.", "steps": ["Data Analyst accesses the database or system containing the speed records and race data.", "System provides the necessary interface for extracting the speed records.", "Data Analyst specifies the criteria for the extraction, such as circuit name and race dates.", "System retrieves the speed records of various drivers for the specified races on the circuit."]}, "testcases": [{"name": "Valid Speed Records Extraction", "description": "Data analyst successfully extracts speed records for a specific circuit and race dates.", "input": {"circuitName": "Monaco Circuit", "raceDates": ["2022-05-15", "2022-05-16"]}, "expected": {"outcome": "Speed records retrieved successfully", "status": "Success"}}, {"name": "Invalid Circuit Speed Records Extraction", "description": "Data analyst attempts to extract speed records for a circuit that does not exist in the database.", "input": {"circuitName": "Invalid Circuit", "raceDates": ["2022-05-15", "2022-05-16"]}, "expected": {"outcome": "Speed records retrieval failed", "status": "Not Found"}}, {"name": "Invalid Race Date Speed Records Extraction", "description": "Data analyst attempts to extract speed records for races that did not occur on the specified dates.", "input": {"circuitName": "Monaco Circuit", "raceDates": ["2022-05-20", "2022-05-21"]}, "expected": {"outcome": "Speed records retrieval failed", "status": "No Data"}}]}, {"usecase": {"name": "Collect Engine Information", "scenario": "Gather details of the engines used by the drivers during the races on the same circuit.", "actors": "Data Analyst, System", "preconditions": "Information about the engines used by each driver is available.", "steps": ["Data Analyst accesses the relevant database or system housing the engine information.", "System provides the necessary interface for collecting engine details.", "Data Analyst specifies the criteria for engine data collection, such as race dates and driver IDs.", "System retrieves the engine information for the specified races and drivers."]}, "testcases": [{"name": "Valid Engine Information Retrieval", "description": "Verify that the system retrieves engine information for the specified races and drivers.", "input": {"criteria": {"raceDates": ["2022-01-15", "2022-01-22"], "driverIDs": ["DR001", "DR002"]}}, "expected": {"outcome": "Engine information for specified races and drivers retrieved", "status": "Success"}}, {"name": "Invalid Race Dates", "description": "Verify that the system handles the case where invalid race dates are provided for engine data collection.", "input": {"criteria": {"raceDates": ["2023-06-12", "2023-06-15"], "driverIDs": ["DR003", "DR004"]}}, "expected": {"outcome": "No engine information available for specified races and drivers", "status": "No Data Found"}}]}, {"usecase": {"name": "Analyze Driver Skills", "scenario": "Analyze the driver skills based on the extracted speed records and engine information.", "actors": "Data Analyst, Performance Evaluation System", "preconditions": "Speed records and engine information for the drivers are available for analysis.", "steps": ["Data Analyst combines the speed records and engine information to correlate driver performance.", "Performance Evaluation System processes the aggregated data to assess the drivers' skills.", "Performance Evaluation System generates skill insights based on the analysis.", "Data Analyst reviews and interprets the skill insights to derive conclusions about driver skills."]}, "testcases": [{"name": "Combine Speed Records and Engine Information", "description": "Verify that the data analyst can successfully combine the speed records and engine information for driver performance analysis.", "input": {}, "expected": {"outcome": "Speed records and engine information are successfully correlated for analysis"}}, {"name": "Process Aggregated Data for Driver Skills Assessment", "description": "Ensure that the Performance Evaluation System can process the aggregated data to assess the drivers' skills.", "input": {}, "expected": {"outcome": "Aggregated data processed successfully for driver skills assessment"}}, {"name": "Generate Skill Insights", "description": "Check that the Performance Evaluation System can generate skill insights based on the analysis of driver performance.", "input": {}, "expected": {"outcome": "Skill insights generated successfully based on performance analysis"}}, {"name": "Review and Interpret Skill Insights", "description": "Verify that the data analyst can review and interpret the skill insights to derive conclusions about driver skills.", "input": {}, "expected": {"outcome": "Skill insights reviewed and interpreted successfully to derive conclusions about driver skills"}}]}, {"usecase": {"name": "Fill in Sharepoint Form", "scenario": "SME fills in the Sharepoint form based on client's request, providing details for the bot to perform specific actions.", "actors": "Subject Matter Expert (SME)", "preconditions": "SME has access to the Sharepoint form and the client's request details.", "steps": ["SME logs into the Sharepoint platform.", "SME navigates to the designated form for website updates.", "SME fills in the form with the required details as per the client's request.", "SME submits the form for processing by the bot."]}, "testcases": [{"name": "Valid Form Submission", "description": "Verify that the SME can successfully submit the Sharepoint form with complete and accurate details.", "input": {"formDetails": "Complete and accurate details"}, "expected": {"outcome": "Form submission successful", "status": "Processed by bot"}}, {"name": "Empty Form Submission", "description": "Check the system's response when the SME submits an empty Sharepoint form.", "input": {"formDetails": ""}, "expected": {"outcome": "Form submission failed - Empty form not allowed", "status": "Failed"}}, {"name": "Invalid Form Details", "description": "Verify the system's handling of incomplete or erroneous details in the Sharepoint form.", "input": {"formDetails": "Incomplete or erroneous details"}, "expected": {"outcome": "Form submission failed - Incomplete or erroneous details", "status": "Failed"}}]}, {"usecase": {"name": "Process Website Updates", "scenario": "UiPath bot processes the website updates based on the information provided by the SME through the Sharepoint form.", "actors": "UiPath bot", "preconditions": "SME has filled in the Sharepoint form with the necessary details.", "steps": ["UiPath bot retrieves the processed request from the Sharepoint form.", "UiPath bot analyses the website update requirements as per the provided details.", "UiPath bot performs the necessary actions on the website based on the processed request."]}, "testcases": [{"name": "Valid Website Update Request", "description": "Verify that UiPath bot successfully processes the website update based on the information provided by the SME through Sharepoint form.", "input": {"sharepointFormDetails": {"requestType": "Content Update", "pageURL": "https://www.example.com/page1", "updateDetails": "Update the introduction section with the new company details."}}, "expected": {"outcome": "Website updates processed successfully", "processedActions": "Introduction section updated with new company details"}}, {"name": "Invalid Sharepoint Form Details", "description": "Verify that UiPath bot handles the case where SME provides incomplete or inconsistent information in the Sharepoint form.", "input": {"sharepointFormDetails": {"requestType": "Content Update", "pageURL": "", "updateDetails": "Update the introduction section with the new company details."}}, "expected": {"outcome": "Website update processing failed", "errorDetails": "Incomplete information provided in the Sharepoint form"}}]}, {"usecase": {"name": "Update JIRA with Processing Details", "scenario": "The system updates JIRA with accurate details of the processing carried out for the website updates.", "actors": "System", "preconditions": "Website updates have been processed by the UiPath bot.", "steps": ["The system captures the details of the processing carried out by the UiPath bot.", "The system updates the respective JIRA ticket with accurate and comprehensive details of the processing."]}, "testcases": [{"name": "Capture Processing Details", "description": "Verify that the system can successfully capture the details of the processing carried out by the UiPath bot.", "input": {}, "expected": {"outcome": "Details captured successfully", "status": "Captured"}}, {"name": "Update JIRA with Processing Details", "description": "Verify that the system can successfully update the respective JIRA ticket with accurate and comprehensive details of the processing.", "input": {"jiraTicketID": "JIRA-123", "processingDetails": "Updated processing details"}, "expected": {"outcome": "JIRA ticket updated successfully", "status": "Updated"}}]}, {"usecase": {"name": "Create Ingest Process", "scenario": "System initiates the creation of an ingest process to further streamline the website update procedures.", "actors": "System", "preconditions": "Website updates have been successfully processed and JIRA has been updated with processing details.", "steps": ["The system identifies the need for creating an ingest process based on the processed website updates.", "The system initiates the creation of an ingest process to streamline future website update procedures."]}, "testcases": [{"name": "Successful Ingest Process Creation", "description": "Verify that the system can successfully initiate the creation of an ingest process.", "input": {"websiteUpdatesProcessed": true, "JIRAUpdated": true}, "expected": {"outcome": "Ingest process initiated successfully", "status": "Processing"}}, {"name": "Failed Ingest Process Creation - Website Updates Not Processed", "description": "Verify that the system handles the case where the website updates have not been processed before initiating the creation of an ingest process.", "input": {"websiteUpdatesProcessed": false, "JIRAUpdated": true}, "expected": {"outcome": "Ingest process creation failed", "status": "Incomplete"}}, {"name": "Failed Ingest Process Creation - JIRA Not Updated", "description": "Verify that the system handles the case where JIRA has not been updated with processing details before initiating the creation of an ingest process.", "input": {"websiteUpdatesProcessed": true, "JIRAUpdated": false}, "expected": {"outcome": "Ingest process creation failed", "status": "JIRANotUpdated"}}]}, {"usecase": {"name": "Collect Meter Reading Data", "scenario": "The user captures a picture of the electricity meter and uploads it to the electricity board portal for the meter reading data collection.", "actors": ["User", "Meter Reader"], "preconditions": "The user needs to have access to the electricity board portal and a functioning electricity meter.", "steps": ["User captures a picture of the electricity meter with a clear view of the reading.", "User uploads the picture to the electricity board portal.", "Meter reader retrieves the information from the uploaded picture and records the reading data.", "Meter reader inputs the reading data into the billing system."]}, "testcases": [{"name": "Successful Meter Reading Data Upload", "description": "User successfully uploads the electricity meter picture for data collection", "input": {"meterPicture": "electricity_meter_image.jpg"}, "expected": {"outcome": "Meter reading data successfully uploaded", "status": "Success"}}, {"name": "Failed Meter Reading Data Upload - Blurry Picture", "description": "User attempts to upload a blurry or unclear electricity meter picture", "input": {"meterPicture": "blurry_electricity_meter_image.jpg"}, "expected": {"outcome": "Failed to upload due to blurry picture", "status": "Failed"}}, {"name": "Failed Meter Reading Data Upload - Unauthorized User", "description": "Unauthorized user tries to upload the electricity meter picture", "input": {"userRole": "Unauthorized", "meterPicture": "electricity_meter_image.jpg"}, "expected": {"outcome": "Failed to upload due to unauthorized access", "status": "Failed"}}, {"name": "Meter Reader Retrieves Data", "description": "Meter reader successfully retrieves the information from the uploaded picture", "input": {"meterPicture": "electricity_meter_image.jpg"}, "expected": {"outcome": "Meter reading data successfully retrieved", "status": "Success"}}, {"name": "Meter Reader Inputs Reading Data", "description": "Meter reader accurately inputs the reading data into the billing system", "input": {"readingData": "54321"}, "expected": {"outcome": "Reading data successfully recorded in billing system", "status": "Success"}}]}, {"usecase": {"name": "Retrieve Data using Document Understanding and AI/ML", "scenario": "The system uses document understanding along with predefined AI/ML datasets to retrieve the information from the picture uploaded by the user.", "actors": ["System"], "preconditions": "The picture of the electricity meter reading needs to be uploaded to the system.", "steps": ["User uploads the picture of the electricity meter reading to the system.", "System processes the picture using document understanding and AI/ML algorithms to extract the reading data."]}, "testcases": [{"name": "Valid Electricity Meter Reading Upload", "description": "Verify that the system successfully processes a valid electricity meter reading image.", "input": {"image_url": "https://example.com/meter-reading.jpg"}, "expected": {"outcome": "Reading data extracted successfully", "accuracy": "High accuracy in reading extraction"}}, {"name": "Empty Image Upload", "description": "Verify that the system handles the case where the user tries to upload an empty picture.", "input": {"image_url": ""}, "expected": {"outcome": "No reading data extracted", "userPrompt": "System prompts the user to upload a clear picture of the electricity meter reading"}}, {"name": "Invalid Image Format", "description": "Verify that the system handles the case where the user uploads an image in an unsupported format.", "input": {"image_url": "https://example.com/invalid-format.doc"}, "expected": {"outcome": "Invalid image format", "userPrompt": "System prompts the user to upload a picture in a supported format (e.g., JPEG, PNG)"}}]}, {"usecase": {"name": "Calculation and Invoice Generation", "scenario": "The standalone RPA bots handle the calculation of electricity usage and generate an invoice for the user.", "actors": ["RPA Bots"], "preconditions": "The electricity meter reading data must be available in the system.", "steps": ["RPA bots calculate the electricity usage based on the provided meter reading data.", "RPA bots generate an invoice for the user based on the calculated electricity usage."]}, "testcases": [{"name": "Calculate Electricity Usage", "description": "Verify that RPA bots can calculate electricity usage based on provided meter reading data.", "input": {"meterReadingData": "12345, 12500"}, "expected": {"outcome": "Electricity usage calculated successfully", "status": "Success"}}, {"name": "Generate Invoice", "description": "Ensure that RPA bots can generate an invoice for the user based on the calculated electricity usage.", "input": {"electricityUsage": 355}, "expected": {"outcome": "Invoice generated successfully", "status": "Success"}}]}, {"usecase": {"name": "Send Invoice to Customers", "scenario": "The RPA bot sends the generated invoice to the end customers via email.", "actors": ["RPA Bot", "End Customers"], "preconditions": "The invoice for the user must be generated by the system.", "steps": ["RPA bot sends the invoice to the end customer via email.", "End customers receive the invoice in their email."]}, "testcases": [{"name": "Valid Invoice Sending", "description": "RPA bot sends the generated invoice to the end customer's valid email address.", "input": {"email": "customer1@example.com", "invoiceId": "INV-2022001"}, "expected": {"outcome": "Invoice sent successfully", "status": "Received"}}, {"name": "Invalid Invoice Sending", "description": "RPA bot attempts to send the generated invoice to an invalid or non-existing email address.", "input": {"email": "invalid_email", "invoiceId": "INV-2022002"}, "expected": {"outcome": "Invoice sending failed", "status": "NotReceived"}}]}, {"usecase": {"name": "Manage Due Date of Bill", "scenario": "The RPA bot takes care of setting the due date for the electricity bill.", "actors": ["RPA Bot"], "preconditions": "The invoice for the user must be generated by the system.", "steps": ["RPA bot sets the due date for the electricity bill based on predefined criteria."]}, "testcases": [{"name": "Set Due Date for Electricity Bill", "description": "Verify that the RPA bot can successfully set the due date for the electricity bill based on predefined criteria.", "input": {"criteria": "Predefined Criteria"}, "expected": {"outcome": "Due date set for electricity bill", "status": "Success"}}, {"name": "No Invoice Generated", "description": "Verify that the RPA bot cannot set the due date if the invoice for the user has not been generated by the system.", "input": {"criteria": "Predefined Criteria"}, "expected": {"outcome": "Due date not set, invoice not generated", "status": "Failure"}}]}, {"usecase": {"name": "Request Patient Health Record", "scenario": "A patient electronically requests access to their health record.", "actors": "Patient, Data Release Bot", "preconditions": "Patient must have a registered account with the healthcare system.", "steps": ["Patient logs into their account", "Patient navigates to the health record section", "Patient selects the option to request their health record", "Data Release Bot receives the request", "Data Release Bot collects relevant data from various systems", "Data Release Bot packages the data for digital or print release", "Data Release Bot intimates the patient to collect the data"]}, "testcases": [{"name": "Valid health record request", "description": "verify that a patient can successfully request their health record and receive the data", "input": {"patient_username": "john_doe", "request_type": "digital"}, "expected": {"outcome": "request received and processed", "status": "success"}}, {"name": "Invalid health record request", "description": "verify that an invalid request for health record is rejected", "input": {"patient_username": "invalid_user", "request_type": "print"}, "expected": {"outcome": "invalid user or request type", "status": "failure"}}]}, {"usecase": {"name": "Data Update and Management", "scenario": "The Data Compliance bot reviews and updates patient data to ensure compliance and accuracy.", "actors": "Data Compliance Bot", "preconditions": "Patient data must be available within the healthcare system.", "steps": ["Data Compliance Bot reviews patient data for completeness and accuracy", "Data Compliance Bot identifies aged data based on HIPAA guidelines", "Data Compliance Bot takes actions to archive or clean up aged data", "Data Compliance Bot ensures all required data is updated and meets compliance standards"]}, "testcases": [{"name": "Valid Data Review and Update", "description": "Verify that the Data Compliance Bot successfully reviews and updates patient data for completeness and accuracy.", "input": {"botId": "ComplianceBot1", "patientData": "Patient123Data"}, "expected": {"outcome": "Data review and update successful", "status": "Compliant"}}, {"name": "Aged Data Identification", "description": "Verify that the Data Compliance Bot correctly identifies aged patient data based on HIPAA guidelines.", "input": {"botId": "ComplianceBot1", "patientData": "Patient123Data"}, "expected": {"outcome": "Aged data identified successfully", "status": "Recognized"}}, {"name": "Aged Data Cleanup Action", "description": "Verify that the Data Compliance Bot correctly takes actions to archive or clean up aged patient data.", "input": {"botId": "ComplianceBot1", "action": "cleanup", "patientData": "Patient123Data"}, "expected": {"outcome": "Aged data cleanup action successful", "status": "Archived/Cleaned"}}, {"name": "Data Update and Compliance Check", "description": "Verify that the Data Compliance Bot ensures all required patient data is updated and meets compliance standards.", "input": {"botId": "ComplianceBot1", "patientData": "Patient123Data"}, "expected": {"outcome": "Data update and compliance check successful", "status": "Compliant"}}]}, {"usecase": {"name": "Archival of Patient Data", "scenario": "A bot automatically archives patient data to secondary storage after a certain age.", "actors": "Data Compliance Bot", "preconditions": "Data Compliance Bot must identify patient data that has reached the archival age threshold.", "steps": ["Data Compliance Bot identifies patient data that has reached the archival age threshold", "Data Compliance Bot initiates the archival process to move the data to secondary storage"]}, "testcases": [{"name": "Bot archives patient data", "description": "Verify that the bot successfully archives patient data to secondary storage", "input": {"bot_id": "compliancebot_123", "data_age_threshold": 5}, "expected": {"outcome": "data archival process initiated", "status": "success"}}, {"name": "No patient data meets archival age threshold", "description": "Verify that the bot doesn't initiate archival process when no patient data meets the archival age threshold", "input": {"bot_id": "compliancebot_123", "data_age_threshold": 10}, "expected": {"outcome": "no data meets archival age threshold", "status": "skipped"}}]}, {"usecase": {"name": "Disposal of Patient Data", "scenario": "A bot initiates the disposal of patient data in accordance with state or federal mandates or in case of patient's death.", "actors": "Data Compliance Bot", "preconditions": "Data Compliance Bot must identify patient data that needs to be disposed based on mandates or patient's status.", "steps": ["Data Compliance Bot identifies patient data that needs to be disposed based on mandates or patient's status", "Data Compliance Bot initiates the disposal process"]}, "testcases": [{"name": "Valid Disposal Initiation", "description": "Data Compliance Bot successfully initiates the disposal of patient data based on mandates or patient's status", "input": {"bot_id": "ABC123", "mandate_compliance": true, "patient_deceased": false}, "expected": {"outcome": "Disposal process initiated", "status": "Success"}}, {"name": "Invalid Disposal Initiation - Lack of Mandate Compliance", "description": "System prevents the Data Compliance Bot from initiating disposal due to lack of mandate compliance", "input": {"bot_id": "XYZ789", "mandate_compliance": false, "patient_deceased": false}, "expected": {"outcome": "Disposal initiation rejected due to mandate non-compliance", "status": "Failure"}}, {"name": "Invalid Disposal Initiation - Deceased Patient", "description": "System prevents the Data Compliance Bot from initiating disposal due to patient being deceased", "input": {"bot_id": "MNO456", "mandate_compliance": true, "patient_deceased": true}, "expected": {"outcome": "Disposal initiation rejected due to patient being deceased", "status": "Failure"}}]}, {"usecase": {"name": "Release of Patient Health Record to Another Practice", "scenario": "A bot facilitates the release of a patient's health record to another healthcare practice.", "actors": "Data Release Bot, Receiving Healthcare Practice", "preconditions": "The receiving healthcare practice must request the health record of the patient.", "steps": ["Receiving Healthcare Practice requests the health record of the patient", "Data Release Bot receives the request", "Data Release Bot collects and packages the health record data", "Data Release Bot releases the packaged data to the receiving healthcare practice"]}, "testcases": [{"name": "Valid health record release request", "description": "Verify that the data release bot can successfully release the patient's health record to the receiving healthcare practice upon a valid request.", "input": {"receiving_practice_name": "HealthcarePractice1", "patient_id": "12345", "request_date": "2025-06-15"}, "expected": {"outcome": "health record data released", "status": "success"}}, {"name": "Invalid health record release request", "description": "Verify that the data release bot does not release the patient's health record to the receiving healthcare practice upon an invalid request.", "input": {"receiving_practice_name": "HealthcarePractice2", "patient_id": "54321", "request_date": "2025-06-20"}, "expected": {"outcome": "health record release request denied", "status": "failed"}}]}, {"usecase": {"name": "Request Email OTP", "scenario": "A user requests an email OTP for verification.", "actors": "User", "preconditions": "User must have access to the Email OTP Verification App and provide a valid email address.", "steps": ["User opens the Email OTP Verification App.", "User enters a valid email address to receive the OTP.", "User requests the app to send the OTP to the specified email address."]}, "testcases": [{"name": "Valid Email OTP Request", "description": "User provides a valid and existing email address to receive the OTP.", "input": {"emailAddress": "john.doe@example.com"}, "expected": {"outcome": "Email OTP request successful", "status": "OTP sent to email"}}, {"name": "Invalid Email OTP Request", "description": "User provides an invalid or non-existing email address to receive the OTP.", "input": {"emailAddress": "invalidemail@xyz.com"}, "expected": {"outcome": "Email OTP request failed", "status": "Invalid email address"}}]}, {"usecase": {"name": "Receive and Enter OTP", "scenario": "User receives the OTP in their email and enters it for verification.", "actors": "User", "preconditions": "User must have a valid email address where the OTP can be received.", "steps": ["User checks their email for the received OTP.", "User enters the received OTP into the Email OTP Verification App.", "User submits the OTP for verification."]}, "testcases": [{"name": "Valid OTP Verification", "description": "Verify that user successfully verifies the received OTP", "input": {"emailAddress": "user123@example.com", "receivedOTP": "123456", "enteredOTP": "123456"}, "expected": {"outcome": "OTP verified successfully", "status": "Verification approved"}}, {"name": "Invalid OTP Verification", "description": "Verify that user unsuccessfully verifies the received OTP", "input": {"emailAddress": "user123@example.com", "receivedOTP": "123456", "enteredOTP": "654321"}, "expected": {"outcome": "OTP verification failed", "status": "Verification rejected"}}, {"name": "Empty OTP Verification", "description": "Verify that user unsuccessfully verifies the received OTP", "input": {"emailAddress": "user123@example.com", "receivedOTP": "123456", "enteredOTP": ""}, "expected": {"outcome": "OTP verification failed", "status": "Verification rejected"}}, {"name": "Invalid Email Address", "description": "Verify that user cannot receive OTP with an invalid email address", "input": {"emailAddress": "invalidemail", "receivedOTP": "123456", "enteredOTP": "123456"}, "expected": {"outcome": "OTP not received", "status": "Invalid email address"}}]}, {"usecase": {"name": "Access Database/File after Email OTP Verification", "scenario": "User accesses data from a database or file after successfully verifying with the email OTP.", "actors": "User", "preconditions": "User must have completed the Email OTP verification process.", "steps": ["User opens the database or file access interface.", "User is prompted to enter the verified email OTP.", "System validates the entered OTP and grants access to the database or file upon successful verification."]}, "testcases": [{"name": "Access Database with Valid Email OTP", "description": "User attempts to access the database after successful email OTP verification", "input": {"email": "user@example.com", "otp": "123456"}, "expected": {"outcome": "Database access granted", "status": "Successful"}}, {"name": "Access File with Valid Email OTP", "description": "User attempts to access a file after successful email OTP verification", "input": {"email": "user@example.com", "otp": "654321"}, "expected": {"outcome": "File access granted", "status": "Successful"}}, {"name": "Access Database with Invalid Email OTP", "description": "User attempts to access the database with an invalid or expired email OTP", "input": {"email": "user@example.com", "otp": "000000"}, "expected": {"outcome": "Access denied", "status": "Unsuccessful"}}, {"name": "Access File with Invalid Email OTP", "description": "User attempts to access a file with an invalid or expired email OTP", "input": {"email": "user@example.com", "otp": "999999"}, "expected": {"outcome": "Access denied", "status": "Unsuccessful"}}]}, {"usecase": {"name": "Read Reports/Logs after Email OTP Verification", "scenario": "User reads the reports/logs after successfully verifying with the email OTP.", "actors": "User", "preconditions": "User must have completed the Email OTP verification process.", "steps": ["User navigates to the reports/logs section.", "User is prompted to enter the verified email OTP.", "System validates the entered OTP and allows the user to access the reports/logs upon successful verification."]}, "testcases": [{"name": "User successfully reads reports after entering correct email OTP", "description": "Verify that the user can access the reports/logs upon entering correct email OTP.", "input": {"emailOTP": "123456", "verified": true}, "expected": {"outcome": "User successfully accessed the reports/logs", "status": "Verified"}}, {"name": "User unable to read reports after entering incorrect email OTP", "description": "Verify that the system denies access to reports/logs for incorrect email OTP.", "input": {"emailOTP": "654321", "verified": false}, "expected": {"outcome": "Access to reports/logs denied", "status": "Not Verified"}}]}, {"usecase": {"name": "Secure Transaction with Email OTP Verification", "scenario": "User executes a secure transaction, such as making a payment, after verifying with the email OTP.", "actors": "User", "preconditions": "User must have completed the Email OTP verification process and initiated the secure transaction.", "steps": ["User initiates the secure transaction process (e.g., making a payment).", "User is prompted to enter the verified email OTP for authentication.", "System validates the entered OTP and authorizes the secure transaction upon successful verification."]}, "testcases": [{"name": "Valid Email OTP for Secure Transaction", "description": "User enters a valid email OTP to authorize a secure transaction.", "input": {"email": "user@gmail.com", "otp": "123456"}, "expected": {"outcome": "Secure transaction authorized", "status": "Validated"}}, {"name": "Invalid Email OTP for Secure Transaction", "description": "User enters an invalid email OTP for a secure transaction.", "input": {"email": "user@gmail.com", "otp": "654321"}, "expected": {"outcome": "Secure transaction not authorized", "status": "Invalid OTP"}}]}, {"usecase": {"name": "Access User-Specific Data after Email OTP Verification", "scenario": "User accesses user-specific data after successfully verifying with the email OTP.", "actors": "User", "preconditions": "User must have completed the Email OTP verification process.", "steps": ["User navigates to the user-specific data section.", "User is prompted to enter the verified email OTP.", "System validates the entered OTP and grants access to the user-specific data upon successful verification."]}, "testcases": [{"name": "Valid Email OTP Verification", "description": "User provides a valid email OTP for accessing user-specific data.", "input": {"email": "user@example.com", "otp": "123456"}, "expected": {"outcome": "Email OTP verified successfully", "status": "Access Granted"}}, {"name": "Invalid Email OTP Verification", "description": "User provides an invalid email OTP for accessing user-specific data.", "input": {"email": "user@example.com", "otp": "654321"}, "expected": {"outcome": "Invalid Email OTP", "status": "Access Denied"}}]}, {"usecase": {"name": "Monitor Shared Mailbox", "scenario": "The bot continuously monitors the shared mailbox of the support team for new emails.", "actors": ["Bot"], "preconditions": "The bot is active and has access to the shared mailbox.", "steps": ["The bot checks for new emails in the shared mailbox.", "When a new email is received, the bot proceeds to read the email details including subject, body, and attachments."]}, "testcases": [{"name": "Check for New Emails", "description": "Verify that the bot can successfully check for new emails in the shared mailbox.", "input": {"mailbox": "SupportTeamMailbox"}, "expected": {"outcome": "New emails are found and ready to be processed."}}, {"name": "Read Email Details", "description": "Check if the bot is able to read the details of the received email including subject, body, and attachments.", "input": {"emailDetails": "Subject: New Feature Request, Body: Please review and provide feedback., Attachments: [feature_request.pdf]"}, "expected": {"outcome": "Email details are successfully retrieved."}}]}, {"usecase": {"name": "Identify Support Ticket Type", "scenario": "The bot identifies the type of support ticket based on the keywords in the email content.", "actors": ["Bot"], "preconditions": "The bot has access to the email content and keywords list for ticket types.", "steps": ["The bot analyzes the email content for specific keywords related to different types of support requests.", "Based on the identified keywords, the bot determines the appropriate support team to assign the ticket."]}, "testcases": [{"name": "Identify Software Issue Ticket", "description": "Verify that the bot correctly identifies a ticket as a software issue based on keywords in the email content.", "input": {"email_content": "The software is crashing frequently and showing errors.", "keywords_list": ["software", "crashing", "errors"]}, "expected": {"outcome": "Ticket identified as software issue", "assigned_team": "Technical Support", "status": "Pass"}}, {"name": "Identify Billing Inquiry Ticket", "description": "Verify that the bot correctly identifies a ticket as a billing inquiry based on keywords in the email content.", "input": {"email_content": "I have a question about my recent invoice and billing statement.", "keywords_list": ["billing", "invoice", "question"]}, "expected": {"outcome": "Ticket identified as billing inquiry", "assigned_team": "Billing Department", "status": "Pass"}}, {"name": "No Keywords Match", "description": "Verify that the system handles the case where no specific keywords match the email content to any ticket type.", "input": {"email_content": "I need help with a general query.", "keywords_list": ["software", "billing", "technical"]}, "expected": {"outcome": "No specific ticket type identified", "assigned_team": "Unassigned", "status": "Fail"}}, {"name": "Empty Email Content", "description": "Verify that the system handles the case where the email content is empty.", "input": {"email_content": "", "keywords_list": ["software", "billing", "technical"]}, "expected": {"outcome": "No specific ticket type identified", "assigned_team": "Unassigned", "status": "Fail"}}]}, {"usecase": {"name": "Filter New or Update Request", "scenario": "The bot categorizes the email request as a new support request or an update request based on the email subject.", "actors": ["Bot"], "preconditions": "The bot has access to the email subject and ticketing system.", "steps": ["The bot checks the email subject to determine if it contains the ticket number.", "If the email subject contains the ticket number, the bot categorizes it as an update request; otherwise, it categorizes it as a new request."]}, "testcases": [{"name": "New Request - No Ticket Number", "description": "Verify that the bot categorizes the email as a new support request when the email subject does not contain a ticket number.", "input": {"emailSubject": "Issue with login"}, "expected": {"outcome": "Email categorized as a new request", "status": "Pass"}}, {"name": "Update Request - With Ticket Number", "description": "Verify that the bot categorizes the email as an update request when the email subject contains a valid ticket number.", "input": {"emailSubject": "Update on ticket #12345"}, "expected": {"outcome": "Email categorized as an update request", "status": "Pass"}}, {"name": "Invalid Ticket Number Format", "description": "Verify the bot's behavior when the email subject contains an invalid ticket number format.", "input": {"emailSubject": "Update on ticket #ABCD"}, "expected": {"outcome": "Invalid ticket number format, email categorized as a new request", "status": "Fail"}}]}, {"usecase": {"name": "Create New Ticket", "scenario": "The bot creates a new support ticket in the support tool based on the received email.", "actors": ["Bot"], "preconditions": "The bot has identified the ticket type and confirmed it as a new support request.", "steps": ["The bot enters the relevant details from the email into the support tool to create a new ticket."]}, "testcases": [{"name": "Valid Ticket Creation", "description": "Verify that the bot successfully creates a new support ticket based on the received email.", "input": {"emailDetails": {"subject": "Support Request", "body": "I am having an issue with my account."}}, "expected": {"outcome": "Ticket is created successfully", "status": "Open"}}, {"name": "Invalid Email Details", "description": "Check the response when the bot receives invalid or incomplete email details.", "input": {"emailDetails": {"subject": "", "body": ""}}, "expected": {"outcome": "Ticket creation failed - Incomplete email details", "status": "Not created"}}]}, {"usecase": {"name": "Update Ticket", "scenario": "The bot updates an existing support ticket in the support tool based on the received email.", "actors": ["Bot"], "preconditions": "The bot has identified the ticket type and confirmed it as an update request.", "steps": ["The bot retrieves the existing ticket details using the ticket number from the email subject.", "The bot updates the ticket with any new information provided in the email."]}, "testcases": [{"name": "Valid Ticket Update", "description": "Verify that the bot successfully updates an existing support ticket with new information provided in the email.", "input": {"ticketNumber": "SPT12345", "newInformation": "Issue resolved. Closing ticket."}, "expected": {"outcome": "Ticket updated successfully", "updatedDetails": "Status: Closed, Resolution: Issue resolved."}}, {"name": "Ticket Number Not Found", "description": "Check the bot's response when the ticket number from the email subject is not found in the system.", "input": {"ticketNumber": "INVALID123", "newInformation": "This is a test update."}, "expected": {"outcome": "Ticket update failed", "reason": "Ticket number not found"}}]}, {"usecase": {"name": "Process KYC Form for New Customer", "scenario": "A new customer's KYC form is processed in the system.", "actors": "KYC Processor, New Customer", "preconditions": "New customer has submitted the KYC form.", "steps": ["New customer's KYC form is received and logged into the system.", "KYC Processor reviews the KYC form for completeness and accuracy.", "System checks for any missing or inaccurate information.", "If form is complete and accurate, system processes the KYC form and creates a new customer record.", "If form is incomplete or inaccurate, system sends notification to the customer to provide the necessary information or make corrections."]}, "testcases": [{"name": "Valid KYC Form Processing", "description": "Verify that the system can successfully process a complete and accurate KYC form for a new customer.", "input": {"customerInfo": {"name": "John Doe", "dob": "1990-05-15", "address": "123 Main St, City, Country", "idType": "Passport", "idNumber": "AB123456", "nationality": "USA"}}, "expected": {"outcome": "KYC form processed successfully", "status": "Processed", "customerRecord": "New customer record created"}}, {"name": "Incomplete KYC Form Processing", "description": "Verify that the system handles incomplete KYC forms and prompts the customer for necessary information.", "input": {"customerInfo": {"name": "Jane Smith", "dob": "1995-08-20", "address": "456 Elm St, City, Country"}}, "expected": {"outcome": "KYC form processing incomplete", "status": "Incomplete", "notification": "Notification sent to customer for required information"}}, {"name": "Inaccurate KYC Form Processing", "description": "Verify that the system identifies and handles inaccurate information in the KYC form.", "input": {"customerInfo": {"name": "Michael Johnson", "dob": "1985-02-10", "address": "789 Oak St, City, Country", "idType": "Driver's License", "idNumber": "XYZ98765", "nationality": "Canada"}}, "expected": {"outcome": "KYC form processing inaccurate", "status": "Inaccurate", "notification": "Notification sent to customer for corrections"}}]}, {"usecase": {"name": "Handle Volume Spikes in KYC Form Submissions", "scenario": "The system manages a sudden surge in KYC form submissions efficiently.", "actors": "System", "preconditions": "Significant increase in KYC form submissions beyond the normal processing capacity.", "steps": ["System detects the volume spike in KYC form submissions.", "System automatically scales resources to handle the increased load.", "System ensures that processing time for each KYC form remains within acceptable limits.", "System provides real-time status updates on the processing of KYC forms."]}, "testcases": [{"name": "Volume Spike Detected", "description": "Verify that the system can detect a sudden surge in KYC form submissions.", "input": {"submissionCount": 1000}, "expected": {"outcome": "Spike detected successfully", "status": "Success"}}, {"name": "Automatic Resource Scaling", "description": "Verify that the system automatically scales resources to handle the increased load of KYC form submissions.", "input": {"currentResourceUsage": "30%", "expectedResourceUsage": "90%"}, "expected": {"outcome": "Resources scaled successfully", "status": "Success"}}, {"name": "Processing Time Within Limits", "description": "Verify that the system ensures the processing time for each KYC form remains within acceptable limits.", "input": {"processingTime": 5}, "expected": {"outcome": "Processing time within acceptable limits", "status": "Success"}}, {"name": "Real-time Status Updates", "description": "Verify that the system provides real-time status updates on the processing of KYC forms during the surge.", "input": {"formId": "KYC-1234"}, "expected": {"outcome": "Real-time updates available", "status": "Success"}}]}, {"usecase": {"name": "Ensure Accuracy in Customer Data Verification", "scenario": "Customer data verification is performed with high accuracy during the KYC process.", "actors": "KYC Processor, System", "preconditions": "KYC form is submitted for a new or existing customer.", "steps": ["KYC Processor initiates the customer data verification process.", "System cross-checks the provided customer data against reliable sources and databases.", "System flags any discrepancies or inconsistencies in the customer data.", "KYC Processor resolves flagged issues through further verification or clarification with the customer."]}, "testcases": [{"name": "Valid Customer Data Verification", "description": "Customer provides accurate and consistent data for verification", "input": {"customerID": "12345", "customerName": "John Doe", "dateOfBirth": "1990-05-25", "address": "123 Main Street, City, Country"}, "expected": {"outcome": "Data Verified", "status": "Flagged: No"}}, {"name": "Invalid Customer Data Verification", "description": "Customer provides inaccurate or inconsistent data for verification", "input": {"customerID": "54321", "customerName": "Jane Smith", "dateOfBirth": "2005-03-12", "address": "Address: null"}, "expected": {"outcome": "Data Verification Flagged", "status": "Flagged: Yes"}}]}, {"usecase": {"name": "Enhance KYC Process Efficiency", "scenario": "The KYC process is optimized to ensure faster and more efficient processing.", "actors": "KYC Processor, System Administrator", "preconditions": "Ongoing KYC processing operations are in place.", "steps": ["System Administrator identifies potential areas for improvement in the KYC process.", "System Administrator implements process enhancements such as automation of certain verification steps and streamlining of data entry.", "KYC Processor adapts to the updated process and provides feedback on the effectiveness of the enhancements.", "System continuously monitors the impact of the enhancements on processing time and accuracy, making further adjustments as necessary."]}, "testcases": [{"name": "Identify Areas for Improvement", "description": "Verify that the System Administrator can successfully identify potential areas for improvement in the KYC process.", "input": {}, "expected": {"outcome": "Areas for improvement identified successfully", "status": "Identified"}}, {"name": "Implement Process Enhancements", "description": "Verify that the System Administrator can successfully implement process enhancements such as automation of verification steps and streamlining of data entry.", "input": {"automation": true, "streamlining": true}, "expected": {"outcome": "Enhancements implemented successfully", "status": "Implemented"}}, {"name": "Adaptation to Updated Process", "description": "Verify that the KYC Processor can successfully adapt to the updated process and provide feedback on its effectiveness.", "input": {"feedback": "The updated process has improved efficiency by 30%"}, "expected": {"outcome": "Adapted to the updated process and provided feedback", "status": "Adapted"}}, {"name": "Monitor Impact of Enhancements", "description": "Verify that the System can continuously monitor the impact of the enhancements on processing time and accuracy, making further adjustments as necessary.", "input": {"enhancement_id": "12345", "monitoring_period": "30 days"}, "expected": {"outcome": "Impact of enhancements monitored and adjusted as necessary", "status": "Monitored"}}, {"name": "Invalid Process Enhancement", "description": "Verify that the system handles the case of invalid or non-feasible process enhancements.", "input": {"automation": true, "streamlining": false}, "expected": {"outcome": "Invalid process enhancement detected", "status": "NotImplemented"}}]}, {"usecase": {"name": "Extract Daily Data from Stock Exchange", "scenario": "The BOT extracts the daily CSV file containing results related to all the scrips for the current day from the stock exchange website.", "actors": "BOT", "preconditions": "BOT has access to the stock exchange website and the daily CSV file is available for extraction.", "steps": ["BOT navigates to the stock exchange website.", "BOT locates and extracts the daily CSV file containing results for all the scrips of the current day.", "BOT saves the file for further processing."]}, "testcases": [{"name": "Successful Daily Data Extraction", "description": "Verify that the BOT can successfully extract the daily CSV file from the stock exchange website for further processing.", "input": {"bot_name": "bot1"}, "expected": {"outcome": "CSV file extraction successful", "status": "Success"}}, {"name": "Failed Extraction - No Access", "description": "Verify that the BOT cannot extract the daily CSV file if it does not have access to the stock exchange website.", "input": {"bot_name": "unauthorized_bot"}, "expected": {"outcome": "CSV file extraction failed", "status": "Access Denied"}}, {"name": "Failed Extraction - File Unavailable", "description": "Verify that the BOT cannot extract the daily CSV file if it is not available for extraction.", "input": {"bot_name": "bot1"}, "expected": {"outcome": "CSV file extraction failed", "status": "File Unavailable"}}]}, {"usecase": {"name": "Process Data and Store in Database", "scenario": "The BOT reads the extracted CSV file and adds the relevant data to the database.", "actors": "BOT", "preconditions": "BOT has the daily CSV file containing scrip results.", "steps": ["BOT reads the CSV file with the scrip results.", "BOT processes the data and stores it in the database.", "BOT verifies the successful addition of data in the database."]}, "testcases": [{"name": "Successful Data Processing and Storage", "description": "Verify that the BOT successfully processes and stores the relevant data from the CSV file into the database.", "input": {"csvFile": "scrip_results.csv", "expectedDataCount": 1000}, "expected": {"outcome": "Data processing and storage successful", "status": "Recorded"}}, {"name": "Unsuccessful Data Processing", "description": "Validate that the BOT fails to process and store the data when the CSV file is empty.", "input": {"csvFile": "empty_file.csv", "expectedDataCount": 0}, "expected": {"outcome": "Data processing failed", "status": "Not recorded"}}, {"name": "Mismatch in Data Verification", "description": "Ensure that the BOT identifies when the data added to the database does not match the expected count.", "input": {"csvFile": "scrip_results.csv", "expectedDataCount": 1000}, "expected": {"outcome": "Data mismatch identified", "status": "Not recorded"}}]}, {"usecase": {"name": "Extract Top Performing Scrips", "scenario": "The BOT queries the database to extract data related to the top 5 scrips with the highest closing balance.", "actors": "BOT", "preconditions": "Data from the stock exchange has been added to the database.", "steps": ["BOT queries the database for the top 5 scrips with the highest closing balance.", "BOT retrieves and processes the data for the top performing scrips.", "BOT creates a new file for further processing and adds the data of the top 5 scrips."]}, "testcases": [{"testcase_name": "ValidTopScripsExtraction", "description": "Verify that the BOT can successfully extract the top 5 performing scrips from the database.", "input_data": {}, "expected_output": {"status": "success", "message": "Top 5 performing scrips extracted and processed successfully."}}, {"testcase_name": "NoStockExchangeData", "description": "Verify that the system handles the case where no stock exchange data is available in the database for top scrips extraction.", "input_data": {}, "expected_output": {"status": "error", "message": "No stock exchange data available in the database.", "error_details": "BOT unable to extract top scrips without stock exchange data."}}, {"testcase_name": "InvalidDatabaseQuery", "description": "Verify that the system handles the case where the BOT encounters an error while querying the database for top performing scrips.", "input_data": {}, "expected_output": {"status": "error", "message": "Database query error", "error_details": "BOT faced database query error while extracting top scrips."}}]}, {"usecase": {"name": "Retrieve Company Names from Depository", "scenario": "The BOT reads the ISIN from the file containing the top 5 records and fetches the corresponding company names from the depository website.", "actors": "BOT", "preconditions": "The file containing the top 5 records and their ISINs is available.", "steps": ["BOT reads the ISINs from the file containing the top 5 records.", "BOT navigates to the depository website.", "BOT fetches the company names associated with the ISINs.", "BOT populates the company names in front of each record in the top 5 records file."]}, "testcases": [{"name": "Valid ISIN Retrieval", "description": "Verify that the BOT can successfully retrieve company names from the depository using the ISINs from the file.", "input": {"fileContent": "ABC,XYZ,12345\nDEF,PQR,67890", "websiteURL": "http://depositorywebsite.com", "expectedISINCompanyPairs": [{"ISIN": "12345", "companyName": "CompanyABC"}, {"ISIN": "67890", "companyName": "CompanyDEF"}]}, "expected": {"outcome": "Company names retrieved successfully and populated in the file.", "status": "Completed"}}, {"name": "Invalid ISIN Retrieval", "description": "Verify that the BOT handles the case where ISINs are not found on the depository website.", "input": {"fileContent": "GHI,JKL,24680\nMNO,STU,13579", "websiteURL": "http://depositorywebsite.com", "expectedISINCompanyPairs": [{"ISIN": "24680", "companyName": "Not Found"}, {"ISIN": "13579", "companyName": "Not Found"}]}, "expected": {"outcome": "Company names not found for given ISINs.", "status": "Failed"}}]}, {"usecase": {"name": "Extract Patient Information", "scenario": "A doctor uses the app to extract essential patient information with a single click.", "actors": ["Doctor"], "preconditions": "Doctor must be logged into the app and have a patient's medical report open.", "steps": ["Doctor opens the patient's medical report within the app.", "Doctor clicks on the 'Extract Information' button.", "The app utilizes UiPath's Generative Extractor to extract essential patient information.", "The extracted information is displayed for the doctor to review and utilize for patient care."]}, "testcases": [{"name": "Successful extraction of patient information", "description": "Verify that essential patient information can be successfully extracted with a single click", "input": {"doctor_id": "DR123", "patient_id": "PA456", "button_clicked": "Extract Information"}, "expected": {"outcome": "Essential patient information extracted and displayed", "status": "success"}}, {"name": "Doctor not logged in", "description": "Verify that the doctor must be logged into the app to extract patient information", "input": {"doctor_id": "", "patient_id": "PA456", "button_clicked": "Extract Information"}, "expected": {"outcome": "Extraction failed: Doctor not logged in", "status": "failure"}}, {"name": "Patient's medical report not open", "description": "Verify that the doctor must have the patient's medical report open to extract information", "input": {"doctor_id": "DR123", "patient_id": "PA456", "button_clicked": "Extract Information"}, "expected": {"outcome": "Extraction failed: Patient's medical report not open", "status": "failure"}}]}, {"usecase": {"name": "Manage High-Volume Patient Medical Reports", "scenario": "The app facilitates efficient management of high-volume patient medical reports for doctors.", "actors": ["Doctor"], "preconditions": "Doctor has multiple patient medical reports to manage within the app.", "steps": ["Doctor navigates to the 'Manage Reports' section of the app.", "Doctor selects a specific patient's medical report from the list.", "The app displays the medical report in a user-friendly format, allowing for easy review and navigation.", "Doctor utilizes features such as search and filter to locate specific details within the extensive report."]}, "testcases": [{"name": "View specific patient's medical report", "scenario": "Doctor views a specific patient's medical report", "input": {"doctor_username": "johnsmith", "patient_id": "12345"}, "expected": {"outcome": "Medical report displayed for the specific patient", "status": "success"}}, {"name": "View non-existing patient's medical report", "scenario": "Doctor attempts to view a medical report for a non-existing patient", "input": {"doctor_username": "johnsmith", "patient_id": "67890"}, "expected": {"outcome": "Medical report not found", "status": "failure"}}, {"name": "Utilize search feature in medical report", "scenario": "Doctor utilizes search feature to locate specific details within a medical report", "input": {"doctor_username": "johnsmith", "patient_id": "12345", "search_keyword": "diagnosis"}, "expected": {"outcome": "Search results for the keyword 'diagnosis' displayed", "status": "success"}}]}, {"usecase": {"name": "Real-Time Chat Function", "scenario": "Medical teams use the real-time chat function to communicate seamlessly within the app.", "actors": ["Doctor", "Medical Team Members"], "preconditions": "Doctor and medical team members are logged into the app.", "steps": ["Doctor accesses the real-time chat function within the app.", "Doctor initiates a chat or responds to existing chats with other medical team members.", "The app ensures real-time delivery of messages and updates for all members participating in the chat.", "Medical team members engage in seamless communication, sharing vital information and collaborating effectively."]}, "testcases": [{"name": "Access Real-Time Chat Function", "description": "Verify that the doctor can access the real-time chat function within the app.", "input": {"actor": "Doctor"}, "expected": {"outcome": "Real-time chat function is successfully accessed."}}, {"name": "Initiate Chat", "description": "Ensure that the doctor can initiate a chat with other medical team members.", "input": {"actor": "Doctor", "chat_member": "Medical Team Member"}, "expected": {"outcome": "Doctor successfully initiates a chat with the medical team member."}}, {"name": "Real-Time Message Delivery", "description": "Check if the app delivers messages and updates in real-time to all participating medical team members.", "input": {"message": "Test message for real-time delivery"}, "expected": {"outcome": "Messages and updates are promptly delivered to all participating medical team members in real-time."}}, {"name": "Seamless Communication", "description": "Ensure that medical team members can seamlessly communicate, share vital information, and collaborate effectively.", "input": {"communication": "Sharing vital information and collaborating"}, "expected": {"outcome": "Medical team members engage in seamless communication, sharing vital information, and collaborating effectively."}}]}, {"usecase": {"name": "Upload Documents to Workspace", "scenario": "Notarizer uploads required documents to the workspace.", "actors": "Notarizer", "preconditions": "Notarizer must have access to the notary service platform.", "steps": ["Notarizer logs into the notary service platform.", "Notarizer navigates to the workspace for document upload.", "Notarizer selects the required documents from their device.", "Notarizer uploads the selected documents to the workspace."]}, "testcases": [{"name": "Valid Document Upload", "description": "Verify that notarizer can successfully upload required documents to the workspace", "input": {"notarizerID": "12345", "selectedDocuments": ["document1.pdf", "document2.docx"]}, "expected": {"outcome": "Documents uploaded successfully", "status": "Success"}}, {"name": "Empty Document Selection", "description": "Verify that the system handles the case where notarizer tries to upload documents without selecting any", "input": {"notarizerID": "54321", "selectedDocuments": []}, "expected": {"outcome": "No documents selected for upload", "status": "Failed"}}, {"name": "Invalid Document Format", "description": "Verify that the system handles the case where notarizer tries to upload documents in invalid format", "input": {"notarizerID": "67890", "selectedDocuments": ["invalidDoc.exe"]}, "expected": {"outcome": "Invalid document format", "status": "Failed"}}]}, {"usecase": {"name": "Customer Identification Verification", "scenario": "Customer provides proof of identification for verification.", "actors": "Customer, Computer Vision Technology", "preconditions": "Customer must have an appointment with the notarizer for notarization.", "steps": ["Customer accesses the customer identification verification section of the platform.", "Customer captures and uploads proof of identification using computer vision technology.", "The system verifies the customer's information through computer vision technology."]}, "testcases": [{"name": "Valid Identification Verification", "description": "Verify that a customer can successfully upload and verify proof of identification.", "input": {"customerID": "123456789", "documentType": "passport", "imageFile": "passport_scan.jpg"}, "expected": {"outcome": "Identification verification successful", "status": "Verified"}}, {"name": "Invalid Identification Verification", "description": "Verify that the system correctly handles invalid or unsupported document types for verification.", "input": {"customerID": "987654321", "documentType": "invalid_type", "imageFile": "invalid_document.jpg"}, "expected": {"outcome": "Identification verification failed", "status": "Rejected"}}]}, {"usecase": {"name": "Schedule Online Virtual Meeting", "scenario": "Scheduled online virtual meeting between notarizer and customer for document signing.", "actors": "Notarizer, Customer", "preconditions": "Documents and customer verification must be completed.", "steps": ["Notarizer schedules an online virtual meeting with the customer.", "Customer joins the virtual meeting at the scheduled time.", "Notarizer and customer discuss the document details virtually.", "Customer signs the documents during the virtual meeting."]}, "testcases": [{"name": "Schedule Meeting", "description": "Verify that the notarizer can successfully schedule an online virtual meeting with the customer.", "input": {"meetingDetails": {"date": "2024-05-10", "time": "2:00 PM", "platform": "Zoom"}}, "expected": {"outcome": "Meeting scheduled successfully", "status": "Meeting details communicated to customer"}}, {"name": "Join Virtual Meeting", "description": "Verify that the customer can successfully join the virtual meeting at the scheduled time.", "input": {"meetingID": "123456789", "password": "meetingpass123"}, "expected": {"outcome": "Customer successfully joins the virtual meeting", "status": "Meeting verification completed"}}, {"name": "Discuss Document Details", "description": "Verify that the notarizer and customer can discuss the document details during the virtual meeting.", "input": {"documentDetails": "Title, Description, Terms"}, "expected": {"outcome": "Document details discussed", "status": "Agreement on document terms reached"}}, {"name": "Document Signing", "description": "Verify that the customer can sign the documents during the virtual meeting.", "input": {"signature": "Customer's electronic signature"}, "expected": {"outcome": "Document signed successfully", "status": "Notarizer acknowledges document signing"}}]}, {"usecase": {"name": "Document Notarization and Data Extraction", "scenario": "Notarizer notarizes the documents and data is extracted using UiPath\u2019s Document Understanding technology.", "actors": "Notarizer, UiPath\u2019s Document Understanding Technology", "preconditions": "Virtual meeting for document signing must be completed.", "steps": ["Notarizer notarizes the signed documents.", "Notarized documents are sent to UiPath\u2019s Document Understanding technology for data extraction.", "The data extracted is securely stored in AWS S3."]}, "testcases": [{"name": "Successful Document Notarization", "description": "Verify that the notarization process is successful for the signed documents", "input": {"signedDocuments": "document.pdf", "notarizationDetails": "notarization_info"}, "expected": {"outcome": "Documents successfully notarized", "status": "Success"}}, {"name": "Data Extraction from Notarized Document", "description": "Verify that data is extracted from the notarized documents using UiPath's Document Understanding technology", "input": {"notarizedDocuments": "notarized_document.pdf", "extractionDetails": "extraction_settings"}, "expected": {"outcome": "Data extracted successfully", "status": "Success"}}, {"name": "Secure Storage in AWS S3", "description": "Verify that the extracted data is securely stored in AWS S3", "input": {"extractedData": "extracted_data.json", "storageLocation": "AWS S3 bucket"}, "expected": {"outcome": "Data securely stored in AWS S3", "status": "Success"}}]}, {"usecase": {"name": "Distribute Notarized Documents", "scenario": "Notarized documents are distributed among relevant parties and securely accessed by authorized users for future reference.", "actors": "Notarizer, Authorized Users", "preconditions": "Notarization and data extraction must be completed.", "steps": ["Notarizer distributes the notarized documents to relevant parties.", "Authorized users access the securely stored notarized documents for future reference."]}, "testcases": [{"name": "Distribute Notarized Documents", "description": "Verify that notarized documents are successfully distributed to relevant parties", "input": {"notarizedDocuments": "List of notarized documents", "relevantParties": "List of relevant parties"}, "expected": {"outcome": "Notarized documents successfully distributed to relevant parties", "status": "Success"}}, {"name": "Access Securely Stored Notarized Documents", "description": "Verify that authorized users can securely access notarized documents for future reference", "input": {"authorizedUsers": "List of authorized users", "accessDateTime": "Date and time of access"}, "expected": {"outcome": "Authorized users successfully accessed the securely stored notarized documents", "status": "Success"}}]}, {"usecase": {"name": "Chatbot Support and Document Data Retrieval", "scenario": "User interacts with chatbots for support and document data retrieval.", "actors": "User, Chatbots", "preconditions": "User must have access to the chatbot feature within the notary service application.", "steps": ["User accesses the chatbot feature within the application.", "User asks the chatbot questions for support or document data retrieval.", "User interacts with specific areas within the document using the chatbot for data retrieval."]}, "testcases": [{"name": "Access Chatbot Feature", "description": "Verify if the user can access the chatbot feature within the application.", "input": "User access the chatbot feature within the application.", "expected": "User should be able to access the chatbot feature."}, {"name": "Chatbot Support Questions", "description": "Verify if the user can ask the chatbot questions for support.", "input": "User asks the chatbot questions for support.", "expected": "Chatbot provides relevant support answers."}, {"name": "Document Data Retrieval", "description": "Verify if the user can interact with the chatbot to retrieve data from specific areas within the document.", "input": "User interacts with specific areas within the document using the chatbot for data retrieval.", "expected": "Chatbot successfully retrieves data from specific areas within the document."}]}, {"usecase": {"name": "Upload Product List", "scenario": "The user uploads an Excel sheet listing the products to be priced on the platform.", "actors": "User", "preconditions": "User has the Excel sheet ready with the products to be priced", "steps": ["User navigates to the upload page on the platform", "User selects the Excel sheet listing the products", "User uploads the Excel sheet", "The system validates the format of the uploaded file", "The system acknowledges the successful receipt of the product list by sending an email to the support team"]}, "testcases": [{"name": "Upload Valid Product List", "description": "Verify that a user can successfully upload a valid Excel sheet listing the products to be priced on the platform and the system acknowledges the successful receipt of the product list by sending an email to the support team.", "input": {"fileDetails": {"fileName": "products.xlsx", "fileSize": "500KB", "fileFormat": "Excel"}}, "expected": {"outcome": "Product list uploaded successfully and email notification sent to support team", "status": "Success"}}, {"name": "Upload Invalid File Format", "description": "Verify that the system handles the case where a user tries to upload a file in an unsupported format.", "input": {"fileDetails": {"fileName": "products.pdf", "fileSize": "300KB", "fileFormat": "PDF"}}, "expected": {"outcome": "File upload failed. Unsupported file format", "status": "Rejected"}}, {"name": "Upload Empty File", "description": "Verify that the system handles the case where a user tries to upload an empty file.", "input": {"fileDetails": {"fileName": "empty.xlsx", "fileSize": "0KB", "fileFormat": "Excel"}}, "expected": {"outcome": "File upload failed. Empty file", "status": "Rejected"}}]}, {"usecase": {"name": "Search for Product Prices", "scenario": "The system searches for the prices of the products listed in the uploaded Excel sheet on the specified websites", "actors": "System", "preconditions": "Excel sheet with product list has been successfully uploaded", "steps": ["The system processes the product list from the queue", "The system searches for each product on Souq, Noon, and Jumia websites", "The system compiles the results into another Excel sheet", "The system sends the compiled results to the user via email"]}, "testcases": [{"name": "Valid Product List Processing", "description": "Confirm that the system can successfully process the product list from the queue", "input": {"fileType": "Excel", "fileName": "products.xlsx"}, "expected": {"outcome": "Product list processed successfully", "status": "Processed"}}, {"name": "Search for Product on Souq, Noon, and Jumia", "description": "Verify that the system can search for each product on the specified websites (Souq, Noon, and Jumia)", "input": {"websites": ["Souq", "Noon", "Jumia"]}, "expected": {"outcome": "Product search successful", "status": "Found on specified websites"}}, {"name": "Invalid File Type Processing", "description": "Test the system's response to processing an unsupported file type", "input": {"fileType": "PDF", "fileName": "products.pdf"}, "expected": {"outcome": "Product list processing failed", "status": "Unsupported file type"}}, {"name": "Compile Results into Excel Sheet", "description": "Check if the system correctly compiles the search results into another Excel sheet", "input": {"compiledFileName": "search_results.xlsx"}, "expected": {"outcome": "Search results compiled successfully", "status": "Compiled"}}, {"name": "Send Results to User via Email", "description": "Ensure that the system sends the compiled results to the user via email", "input": {"userEmail": "user@example.com"}, "expected": {"outcome": "Results sent via email", "status": "Sent"}}]}, {"usecase": {"name": "Retrieve Website List", "scenario": "The UiPath automation retrieves the list of websites stored in a CSV file or database.", "actors": ["UiPath Automation"], "preconditions": "The CSV file or database containing the list of websites must be accessible to the UiPath automation.", "steps": ["UiPath automation loads the list of websites from the specified CSV file or database.", "UiPath automation validates the format and structure of the imported website list."]}, "testcases": [{"name": "Valid Website List Retrieval", "description": "Verify that UiPath automation can successfully retrieve the list of websites from the accessible CSV file or database.", "input": {"source": "CSV", "accessibility": "accessible"}, "expected": {"outcome": "Website list retrieved successfully", "status": "Format and structure validated"}}, {"name": "CSV File Not Accessible", "description": "Verify that UiPath automation handles the scenario where the specified CSV file is not accessible for retrieving the website list.", "input": {"source": "CSV", "accessibility": "not accessible"}, "expected": {"outcome": "Website list retrieval failed", "status": "CSV file not accessible"}}, {"name": "Invalid Website List Format", "description": "Verify that UiPath automation handles the scenario where the retrieved website list has an invalid format or structure.", "input": {"source": "database", "accessibility": "accessible"}, "expected": {"outcome": "Website list retrieval failed", "status": "Invalid format or structure"}}]}, {"usecase": {"name": "Monitor Website Status", "scenario": "The UiPath automation monitors the status/health of the websites listed.", "actors": ["UiPath Automation"], "preconditions": "The list of websites has been successfully retrieved by the UiPath automation.", "steps": ["UiPath automation iterates through the list of websites.", "For each website, UiPath automation performs a PowerShell scripting to check its status/health.", "UiPath automation captures and records the status/health of each website."]}, "testcases": [{"name": "Successful Website Status Monitoring", "description": "Verify that the UiPath automation successfully monitors the status/health of the listed websites.", "input": {}, "expected": {"outcome": "Website status/health monitored successfully", "status": "Monitored"}}, {"name": "Empty Website List", "description": "Verify that the system handles the case where the list of websites is empty.", "input": {}, "expected": {"outcome": "No websites to monitor", "status": "NotMonitored"}}]}, {"usecase": {"name": "Generate Status Report", "scenario": "The UiPath automation generates a report showing the status/health of the monitored websites.", "actors": ["UiPath Automation"], "preconditions": "The status/health of all websites in the list has been monitored.", "steps": ["UiPath automation compiles the captured status/health data of the websites.", "UiPath automation creates a report with the website names and their corresponding status/health.", "The report is saved or sent to the specified destination."]}, "testcases": [{"name": "Generate Status Report - Valid Data", "description": "Verify that the UiPath automation successfully generates a report with accurate status/health data of the monitored websites.", "input": {}, "expected": {"outcome": "Report generation successful", "status": "Pass"}}, {"name": "Generate Status Report - No Monitored Websites", "description": "Verify that the UiPath automation handles the scenario when no websites have been monitored.", "input": {}, "expected": {"outcome": "No monitored websites found", "status": "Fail"}}, {"name": "Generate Status Report - Report Destination", "description": "Verify that the UiPath automation correctly saves or sends the generated report to the specified destination.", "input": {"destination": "email"}, "expected": {"outcome": "Report sent via email", "status": "Pass"}}]}, {"usecase": {"name": "Handle Exceptions", "scenario": "The UiPath automation handles exceptions encountered during the monitoring process.", "actors": ["UiPath Automation"], "preconditions": "An exception occurs during website status monitoring.", "steps": ["UiPath automation identifies the nature of the exception (e.g., website unresponsive, connection timeout).", "UiPath automation logs the exception details.", "Depending on the type of exception, UiPath automation either retries monitoring the website or flags it for further investigation."]}, "testcases": [{"name": "Handle Unresponsive Website Exception", "description": "Verify that the UiPath automation correctly handles an exception when the website is unresponsive.", "input": {"exceptionType": "Unresponsive", "details": "Website took longer than expected to respond"}, "expected": {"outcome": "Exception handled successfully", "action": "Retries website monitoring"}}, {"name": "Handle Connection Timeout Exception", "description": "Verify that the UiPath automation correctly handles an exception when connection timeout occurs.", "input": {"exceptionType": "ConnectionTimeout", "details": "Failed to establish a connection within the specified time"}, "expected": {"outcome": "Exception handled successfully", "action": "Flags website for further investigation"}}]}, {"usecase": {"name": "Get Job Description Detail", "scenario": "The bot retrieves the job description detail from the database.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the database and the job details are available", "steps": ["The bot accesses the database to retrieve the job description detail"]}, "testcases": [{"name": "Retrieve Job Description Detail", "description": "Verify that the HR Recruiter Bot can successfully retrieve the job description detail from the database.", "input": {}, "expected": {"outcome": "Job description detail retrieved successfully", "status": "Available"}}]}, {"usecase": {"name": "Check and Select Job Status", "scenario": "The bot checks the status of the job description and selects whether it should be marked as new or rerun.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the job status information", "steps": ["The bot checks the status of the job description", "The bot selects whether the job should be marked as new or to be rerun"]}, "testcases": [{"name": "Mark Job as New", "description": "Verify that the HR Recruiter Bot can successfully mark a job as new.", "input": {"jobStatus": "Pending"}, "expected": {"outcome": "Job marked as new", "status": "New"}}, {"name": "Rerun Job", "description": "Verify that the HR Recruiter Bot can successfully mark a job to be rerun.", "input": {"jobStatus": "Expired"}, "expected": {"outcome": "Job marked for rerun", "status": "Rerun"}}]}, {"usecase": {"name": "Get Required Candidate Count", "scenario": "The bot retrieves the required number of candidates from the job description.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the job description and the required candidate count", "steps": ["The bot obtains the required number of candidates from the job description"]}, "testcases": [{"name": "Valid Candidate Count Retrieval", "description": "Verify the bot can successfully retrieve the required number of candidates from the job description", "input": {"jobDescription": "This is a sample job description.", "requiredCandidateCount": 5}, "expected": {"outcome": "Candidates count retrieved successfully", "status": "Pass"}}, {"name": "Job Description Unavailable", "description": "Check the bot's behavior when the job description is not accessible", "input": {"jobDescription": null, "requiredCandidateCount": 3}, "expected": {"outcome": "Failure: Job description unavailable", "status": "Fail"}}]}, {"usecase": {"name": "Select Job Portal", "scenario": "The bot selects the appropriate job portal (e.g., LinkedIn, Naukri) based on the job description.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the job description specifying the job portal", "steps": ["The bot identifies the specified job portal from the job description"]}, "testcases": [{"name": "Valid Job Portal Selection", "description": "Verify that the bot can successfully select the appropriate job portal based on the job description.", "input": {"jobDescription": "Software Engineer position requiring 5+ years of experience in Python and Django."}, "expected": {"outcome": "Job portal selected successfully", "selectedPortal": "LinkedIn"}}, {"name": "Invalid Job Portal Selection", "description": "Verify that the bot handles the case where the job portal specified in the job description is not recognized or available.", "input": {"jobDescription": "Data Scientist role with expertise in machine learning and neural networks."}, "expected": {"outcome": "Job portal selection failed", "reason": "Specified portal not available"}}]}, {"usecase": {"name": "Search Candidate", "scenario": "The bot enters the searching field from the job description and searches for candidates on the selected job portal.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the selected job portal and the searching field from the job description", "steps": ["The bot enters the searching field provided in the job description", "The bot initiates the candidate search on the selected job portal"]}, "testcases": [{"name": "Valid Candidate Search", "description": "Verify that the HR Recruiter Bot can successfully search for candidates using the provided job description field.", "input": {"jobDescription": "software engineer", "jobPortal": "example_job_portal.com"}, "expected": {"outcome": "Candidate search initiated successfully", "status": "Searching"}}, {"name": "Empty Job Description", "description": "Verify that the system handles the case where the HR Recruiter Bot tries to search for candidates without entering a job description.", "input": {"jobDescription": "", "jobPortal": "example_job_portal.com"}, "expected": {"outcome": "Candidate search failed", "status": "No Search Performed"}}]}, {"usecase": {"name": "Extract Candidate Information", "scenario": "If the candidate count is greater than zero, the bot extracts the candidate information and updates it in an excel sheet by setting a priority number.", "actors": "HR Recruiter Bot", "preconditions": "Bot has extracted candidate information and access to the excel sheet", "steps": ["If the candidate count is greater than zero, the bot extracts the candidate information", "The bot updates the candidate information in an excel sheet by setting a priority number"]}, "testcases": [{"name": "Extract Candidate Information - Valid Count", "description": "Verify that the HR Recruiter Bot successfully extracts and updates candidate information when the candidate count is greater than zero.", "input": {"candidateCount": 3, "excelSheet": "candidate_info.xlsx"}, "expected": {"outcome": "Candidate information extracted and updated in excel sheet", "status": "Success"}}, {"name": "Extract Candidate Information - Zero Count", "description": "Verify that the system handles the case where the candidate count is zero and the bot does not update the excel sheet.", "input": {"candidateCount": 0, "excelSheet": "candidate_info.xlsx"}, "expected": {"outcome": "No candidate information to extract", "status": "Skipped"}}]}, {"usecase": {"name": "Remove Unimportant Search Field", "scenario": "If no candidate is found, the bot removes the unimportant search field and tries again for candidate search.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the job description and search results", "steps": ["If no candidate is found, the bot removes the unimportant search field", "The bot tries again for candidate search"]}, "testcases": [{"name": "No Candidate Found", "description": "Verify that the bot removes the unimportant search field and retries the candidate search when no candidate is found.", "input": {"candidateFound": false, "searchField": "unimportant"}, "expected": {"outcome": "Search field removed and candidate search retried", "status": "Retried"}}, {"name": "Candidate Found", "description": "Verify that the bot does not remove the search field if candidate is found.", "input": {"candidateFound": true, "searchField": "unimportant"}, "expected": {"outcome": "Search field not removed", "status": "Not Removed"}}]}, {"usecase": {"name": "Stop Searching Process", "scenario": "If the extracted candidate count meets the required count, the bot stops the searching process.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the extracted candidate count and the required count", "steps": ["If the extracted candidate count meets the required count, the bot stops the searching process"]}, "testcases": [{"name": "Stop Searching Process - Positive Case", "description": "Verify that the bot correctly stops the searching process when the extracted candidate count meets the required count", "input": {"extractedCandidateCount": 100, "requiredCount": 100}, "expected": {"outcome": "Searching process stopped", "status": "Success"}}, {"name": "Stop Searching Process - Negative Case", "description": "Verify the behavior when the extracted candidate count does not meet the required count", "input": {"extractedCandidateCount": 80, "requiredCount": 100}, "expected": {"outcome": "Searching process continues", "status": "Success"}}]}, {"usecase": {"name": "Upload Candidate Info to Database", "scenario": "Finally, the bot uploads the extracted candidate information into the database.", "actors": "HR Recruiter Bot", "preconditions": "Bot has access to the extracted candidate information and the database", "steps": ["The bot uploads the extracted candidate information into the database"]}, "testcases": [{"name": "Valid Candidate Info Upload", "description": "Verify that the HR Recruiter Bot can successfully upload candidate information into the database.", "input": {"candidateInfo": "candidate_info.json", "database": "company_database"}, "expected": {"outcome": "Candidate information uploaded successfully", "status": "Data added to the database"}}, {"name": "Empty Candidate Info Upload", "description": "Verify that the system handles the case where the HR Recruiter Bot tries to upload empty candidate information into the database.", "input": {"candidateInfo": "empty_file.json", "database": "company_database"}, "expected": {"outcome": "Candidate information upload failed", "status": "No data added to the database"}}]}, {"usecase": {"name": "User Authentication", "scenario": "A user logs into the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must have valid login credentials and access to the system", "steps": ["User navigates to the login page", "User enters their login credentials", "User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Valid User Login", "description": "Verify that a user with valid credentials can log in to the Absolute Automation APP_Contract Management System", "input": {"username": "john.doe@example.com", "password": "Password123!"}, "expected": {"outcome": "User successfully logged in", "status": "Access Granted"}}, {"name": "Invalid User Login - Invalid Password", "description": "Verify that the system rejects login with invalid password", "input": {"username": "jane.smith@example.com", "password": "InvalidPassword"}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}, {"name": "Invalid User Login - Invalid Username", "description": "Verify that the system rejects login with invalid username", "input": {"username": "invalid.user@example.com", "password": "Secret123"}, "expected": {"outcome": "Login failed", "status": "Access Denied"}}]}, {"usecase": {"name": "Contract Generation", "scenario": "A user generates a new contract using the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must be authenticated and have necessary permissions", "steps": ["User selects the option to create a new contract", "User fills in the required details for the new contract", "User submits the contract generation form", "The system validates the input and generates the new contract"]}, "testcases": [{"name": "Valid Contract Generation", "description": "Verify that a user with necessary permissions can successfully generate a new contract", "input": {"contractDetails": {"contractType": "Service Agreement", "counterparty": "ABC Company", "startDate": "2023-01-01", "endDate": "2023-12-31", "amount": 5000}}, "expected": {"outcome": "Contract generation successful", "status": "Generated"}}, {"name": "MissingContractDetails", "description": "Verify that the system handles the scenario where user tries to generate a contract with missing details", "input": {"contractDetails": {"contractType": "Employment Contract", "counterparty": "XYZ Inc.", "startDate": "2023-01-01"}}, "expected": {"outcome": "Contract generation failed", "status": "Incomplete"}}, {"name": "Invalid Contract Dates", "description": "Verify that the system handles the scenario where user provides invalid dates for the contract", "input": {"contractDetails": {"contractType": "Sales Contract", "counterparty": "123 Corporation", "startDate": "2023-12-31", "endDate": "2023-01-01", "amount": 10000}}, "expected": {"outcome": "Contract generation failed", "status": "InvalidDates"}}]}, {"usecase": {"name": "Contract Editing", "scenario": "A user makes edits to an existing contract within the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must be authenticated and have necessary permissions", "steps": ["User navigates to the contract that requires editing", "User selects the edit option", "User makes the necessary changes to the contract", "User saves the changes", "The system updates the contract with the edits"]}, "testcases": [{"name": "Edit Existing Contract", "description": "Verify that a user can successfully edit an existing contract within the system", "input": {"userId": "9876", "contractId": "C123", "edits": {"terms": "Updated payment terms", "expiryDate": "2023-07-31"}}, "expected": {"outcome": "Contract edited successfully", "status": "Success"}}, {"name": "Edit Existing Contract in closed period", "description": "Verify that a user can not update the contract if period is over", "input": {"userId": "9876", "contractId": "C123", "edits": {"terms": "Updated payment terms", "expiryDate": "2023-07-31"}}, "expected": {"outcome": "Contract cannoy be edited", "status": "Failure"}}, {"name": "User Unauthorized to Edit", "description": "Verify the system's response when a user without necessary permissions tries to edit a contract", "input": {"userId": "5432", "contractId": "C456", "edits": {"terms": "Attempted unauthorized edit"}}, "expected": {"outcome": "User unauthorized to edit the contract", "status": "Unauthorized"}}]}, {"usecase": {"name": "Contract Risk Analysis", "scenario": "A user performs risk analysis for a specific contract using the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must have access to the contract and necessary permissions", "steps": ["User selects the contract for risk analysis", "User initiates the risk analysis process", "The system conducts the risk analysis and provides the results", "User reviews the risk analysis report"]}, "testcases": [{"name": "Valid Contract Risk Analysis", "description": "Verify that the user can successfully perform risk analysis for a specific contract with necessary permissions.", "input": {}, "expected": {"outcome": "Risk analysis completed and report generated successfully", "status": "Success"}}, {"name": "Unauthorized Contract Access", "description": "Verify that the system prevents risk analysis for a contract without necessary permissions.", "input": {}, "expected": {"outcome": "Risk analysis process denied", "status": "Unauthorized"}}]}, {"usecase": {"name": "E-Signature", "scenario": "A user adds electronic signatures to a contract within the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must be authenticated and have necessary permissions", "steps": ["User selects the contract that requires an e-signature", "User accesses the e-signature feature", "User applies the electronic signature", "The system verifies and adds the e-signature to the contract"]}, "testcases": [{"name": "Valid E-Signature", "description": "User selects a contract, accesses the e-signature feature, applies a valid electronic signature, and the system successfully verifies and adds the e-signature to the contract", "input": {"contract": "contractID123", "eSignature": "validSignature"}, "expected": {"outcome": "E-Signature Added Successfully", "status": "Success"}}, {"name": "Invalid E-Signature", "description": "User selects a contract, accesses the e-signature feature, applies an invalid electronic signature, and the system fails to verify and add the e-signature to the contract", "input": {"contract": "contractID456", "eSignature": "invalidSignature"}, "expected": {"outcome": "E-Signature Addition Failed", "status": "Failure"}}]}, {"usecase": {"name": "Status Tracking", "scenario": "A user tracks the status of a specific contract within the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must be authenticated and have necessary permissions", "steps": ["User selects the contract to track its status", "User accesses the status tracking feature", "The system provides real-time status updates for the selected contract"]}, "testcases": [{"name": "Track Contract Status", "description": "Verify that a user can successfully track the status of a specific contract within the system.", "input": {"contractID": "CON123"}, "expected": {"outcome": "Contract status tracked successfully", "status": "Real-Time Updates"}}, {"name": "Invalid Contract Tracking", "description": "Verify that the system handles the case where a user tries to track a contract that does not exist.", "input": {"contractID": "CON999"}, "expected": {"outcome": "Contract status tracking failed", "status": "Not Found"}}, {"name": "Unauthorized Access to Contract Status", "description": "Verify that the system restricts access to contract status for unauthorized users.", "input": {}, "expected": {"outcome": "Contract status tracking failed", "status": "UnauthorizedAccess"}}]}, {"usecase": {"name": "Report Generation", "scenario": "A user generates a comprehensive report on contract management using the Absolute Automation APP_Contract Management System", "actors": "User", "preconditions": "User must be authenticated and have necessary permissions", "steps": ["User initiates the report generation process", "User selects the parameters for the report", "The system processes the request and generates the report", "User downloads or accesses the generated report"]}, "testcases": [{"name": "Valid Report Generation", "description": "Verify that a user can successfully generate a comprehensive report on contract management.", "input": {"parameters": {"contractType": "All", "startDate": "2024-01-01", "endDate": "2024-12-31"}}, "expected": {"outcome": "Report generated successfully", "status": "Downloaded"}}, {"name": "Invalid Date Range", "description": "Verify that the system handles an invalid date range for report generation.", "input": {"parameters": {"contractType": "Renewal", "startDate": "2025-01-01", "endDate": "2024-12-31"}}, "expected": {"outcome": "Report generation failed", "status": "InvalidDateRange"}}]}, {"usecase": {"name": "Perform Video KYC for Customer Onboarding", "scenario": "A new customer undergoes the video KYC process for onboarding in the HyperHack-2023 app.", "actors": "New Customer, HyperHack-2023 System", "preconditions": "Customer must have access to a device with a camera and an internet connection.", "steps": ["New Customer launches the HyperHack-2023 app and selects the video KYC option.", "The system requests and verifies the customer's consent for video KYC.", "New Customer follows the on-screen instructions to capture their identity document and record a video as per provided guidelines.", "The system uses AI models to validate the identity document and perform gesture-based image verification in real-time.", "Upon successful verification, the system completes the customer onboarding process."]}, "testcases": [{"name": "Valid Video KYC Process", "description": "Verify that a new customer can successfully complete the video KYC process with valid inputs.", "input": {"customer_id": "12345", "consent_given": true, "identity_document": "driving_license", "recorded_video": "video_file"}, "expected": {"outcome": "Customer onboarding process completed", "status": "Success"}}, {"name": "Invalid Consent for Video KYC", "description": "Verify that the system handles the case where the customer does not provide consent for video KYC.", "input": {"customer_id": "54321", "consent_given": false, "identity_document": "passport", "recorded_video": "video_file"}, "expected": {"outcome": "Customer onboarding process failed", "status": "Rejected"}}, {"name": "Invalid Identity Document", "description": "Verify that the system handles the case where the customer provides an invalid identity document.", "input": {"customer_id": "24680", "consent_given": true, "identity_document": "invalid_document", "recorded_video": "video_file"}, "expected": {"outcome": "Customer onboarding process failed", "status": "Rejected"}}]}, {"usecase": {"name": "Perform Automated Image KYC Verification", "scenario": "A user utilizes the app to undergo automated image KYC verification for regulatory compliance.", "actors": "User, HyperHack-2023 System", "preconditions": "User must have the HyperHack-2023 app installed and access to an internet connection.", "steps": ["User opens the HyperHack-2023 app and selects the automated image KYC option.", "The system prompts the user to provide necessary details and capture their image.", "The system employs UiPath forms and AI models to process the provided data and image for KYC verification.", "Using AI models, the system validates the user's identity against national ID databases.", "Upon successful verification, the system notifies the user about the completion of the image KYC process."]}, "testcases": [{"name": "Valid Image KYC Verification", "description": "Verify that the system successfully performs automated image KYC verification for a user.", "input": {"userID": "user123", "image": "https://example.com/user123.jpg"}, "expected": {"outcome": "KYC verification successful", "notification": "User notified about successful verification"}}, {"name": "Empty User ID", "description": "Verify that the system handles the case where the user ID is empty.", "input": {"userID": "", "image": "https://example.com/emptyID.jpg"}, "expected": {"outcome": "KYC verification failed", "notification": "System notifies the user about the missing user ID"}}, {"name": "Invalid Image Format", "description": "Verify that the system handles an unsupported image format for KYC verification.", "input": {"userID": "user456", "image": "https://example.com/invalidFormat.doc"}, "expected": {"outcome": "Invalid image format", "notification": "System prompts the user to upload a valid image file (e.g., JPEG, PNG)"}}, {"name": "Unsuccessful Verification - Invalid User", "description": "Verify that the system handles the case where the user is not found in the national ID databases.", "input": {"userID": "user789", "image": "https://example.com/user789.jpg"}, "expected": {"outcome": "User not found in national ID databases", "notification": "System notifies the user about the unsuccessful verification"}}]}, {"usecase": {"name": "Conduct Real-time Image Matching with National Identification Database", "scenario": "The system performs real-time image matching with the National Identification Database during the KYC process.", "actors": "HyperHack-2023 System, National Identification Database", "preconditions": "An active internet connection and access to the National Identification Database are required.", "steps": ["As part of the KYC process, the system retrieves the user's captured image and relevant identity information.", "The system connects to the National Identification Database to conduct real-time matching of the user's image with the database records.", "The system utilizes the Deepface AI Model to perform precise and secure image matching.", "Upon successful matching, the system records the verification status and completes the KYC process."]}, "testcases": [{"name": "Valid Image Matching", "description": "Verify that the system performs real-time image matching with the National Identification Database successfully.", "input": {"user_id": "12345", "captured_image": "user_photo.jpg", "identity_information": {"name": "John Doe", "age": 35, "national_id": "CID123456", "address": "123 Main Street, ABC City"}}, "expected": {"outcome": "Image matching successful", "verification_status": "Verified"}}, {"name": "Invalid Image Matching", "description": "Verify that the system fails to match the user's image with the National Identification Database.", "input": {"user_id": "98765", "captured_image": "user_photo2.jpg", "identity_information": {"name": "Jane Smith", "age": 28, "national_id": "CID987654", "address": "456 Oak Avenue, XYZ Town"}}, "expected": {"outcome": "Image matching failed", "verification_status": "Unverified"}}]}, {"usecase": {"name": "Upload CV for Analysis", "scenario": "HR personnel uploads a candidate's CV for analysis using the CV Screening App.", "actors": ["HR Personnel"], "preconditions": "HR Personnel must have access to the CV Screening App.", "steps": ["HR Personnel accesses the CV Screening App.", "HR Personnel uploads the candidate's CV."]}, "testcases": [{"name": "Valid CV Upload", "description": "Verify that HR personnel can successfully upload a candidate's CV for analysis.", "input": {"cvFile": "candidate_cv.pdf"}, "expected": {"outcome": "CV uploaded successfully", "analysisStatus": "In progress"}}, {"name": "No Access to CV Screening App", "description": "Verify that the system handles the case where HR personnel tries to upload a candidate's CV without access to the CV Screening App.", "input": {"cvFile": "candidate_cv.pdf"}, "expected": {"outcome": "CV upload failed", "error": "Access denied"}}]}, {"usecase": {"name": "Automated Candidate Shortlisting", "scenario": "The system automatically shortlists candidates based on the extracted CV information and customizable prompts from OpenAI's LLMs.", "actors": ["Automated System"], "preconditions": "CVs have been uploaded and relevant text has been extracted for analysis.", "steps": ["The system processes the extracted information from the candidate's CV.", "The system utilizes customizable prompts to match candidate qualifications with job requirements.", "Automated shortlisting of candidates based on the analysis is performed."]}, "testcases": [{"name": "Process CV Information", "description": "Verify that the system can successfully process the extracted information from the candidate's CV.", "input": {"cvData": "extracted_information.json"}, "expected": {"outcome": "CV information processed", "status": "Success"}}, {"name": "Utilize Customizable Prompts", "description": "Verify that the system can effectively utilize customizable prompts to match candidate qualifications with job requirements.", "input": {"prompts": ["qualification: degree", "experience: 5 years", "skill: leadership"]}, "expected": {"outcome": "Prompts utilized for matching", "status": "Success"}}, {"name": "Automated Shortlisting", "description": "Verify that the system can accurately perform automated shortlisting of candidates based on the analysis.", "input": {"jobRequirements": "software_engineer_requirements.json"}, "expected": {"outcome": "Candidates shortlisted", "status": "Success"}}]}, {"usecase": {"name": "Review Shortlisted Candidates", "scenario": "HR personnel review the candidates shortlisted by the system for further evaluation.", "actors": ["HR Personnel"], "preconditions": "Shortlisted candidates are available for review in the system.", "steps": ["HR Personnel accesses the list of shortlisted candidates.", "HR Personnel reviews the shortlisted candidates' qualifications and suitability for the job role.", "HR Personnel proceeds with further evaluation or selection processes."]}, "testcases": [{"name": "Valid Review Shortlisted Candidates", "description": "Verify that HR personnel can successfully review shortlisted candidates for further evaluation.", "input": {"shortlistedCandidatesList": "candidates_shortlist.csv"}, "expected": {"outcome": "Shortlisted candidates reviewed successfully", "status": "Ready for further evaluation"}}, {"name": "Empty Shortlisted Candidates List", "description": "Verify that the system handles the case where the shortlisted candidates list is empty.", "input": {"shortlistedCandidatesList": "empty_file.csv"}, "expected": {"outcome": "No candidates to review", "status": "No further action required"}}]}, {"usecase": {"name": "System Scalability Testing", "scenario": "Testing the system's ability to handle high volumes of CVs efficiently without incurring additional costs as the organization grows.", "actors": ["Testing Team"], "preconditions": "The system is fully implemented and operational.", "steps": ["Testing team uploads a large volume of CVs to the system simultaneously.", "The system processes the high volume of CVs without incurring additional costs or significant performance degradation.", "Testing team validates the scalability and efficiency of the system."]}, "testcases": [{"name": "Upload Large Volume of CVs", "description": "Verify that the system can handle the simultaneous upload of a large volume of CVs.", "input": {"cvFiles": ["cv1.pdf", "cv2.pdf", "cv3.pdf", "cv4.pdf", "cv5.pdf"]}, "expected": {"outcome": "CVs uploaded successfully", "status": "Processing"}}, {"name": "Cost Evaluation for High Volume Processing", "description": "Verify that the system does not incur additional costs when processing a high volume of CVs.", "input": {"cvVolume": "1000", "processingTime": "1 hour"}, "expected": {"outcome": "No additional costs incurred", "status": "Cost efficient"}}, {"name": "System Performance with High Volume", "description": "Verify that the system maintains performance efficiency while processing a high volume of CVs.", "input": {"cvVolume": "5000", "processingTime": "2 hours"}, "expected": {"outcome": "System performance maintained", "status": "Efficient"}}, {"name": "Scalability Validation", "description": "Verify that the system scales efficiently as the volume of CVs increases.", "input": {"cvVolume": "10000", "processingTime": "4 hours"}, "expected": {"outcome": "System scalability validated", "status": "Efficient"}}]}, {"usecase": {"name": "Customizable Prompts Configuration", "scenario": "HR personnel configures and customizes prompts for the automated candidate shortlisting process.", "actors": ["HR Personnel"], "preconditions": "HR Personnel has access to the system's prompt configuration feature.", "steps": ["HR Personnel accesses the prompt configuration interface.", "HR Personnel customizes prompts based on job requirements and candidate qualifications.", "The system applies the customized prompts for automated candidate shortlisting."]}, "testcases": [{"name": "Valid Prompt Customization", "description": "Verify that HR personnel can successfully customize prompts for the automated candidate shortlisting process.", "input": {"jobRequirements": "Strong communication skills, Experience in project management", "candidateQualifications": "Bachelor's degree in Computer Science, 4+ years of relevant experience"}, "expected": {"outcome": "Prompt customization applied successfully", "status": "Applied"}}, {"name": "Invalid Prompt Customization", "description": "Verify that the system handles the case where HR personnel tries to customize prompts with invalid inputs.", "input": {"jobRequirements": "Invalid input", "candidateQualifications": "Inadequate input"}, "expected": {"outcome": "Prompt customization failed", "status": "Not Applied"}}, {"name": "Automated Candidate Shortlisting", "description": "Verify that the system uses the customized prompts for the automated candidate shortlisting.", "input": {"jobId": "job789", "promptConfigurationId": "config123"}, "expected": {"outcome": "Automated shortlisting using customized prompts", "status": "Successful"}}]}, {"usecase": {"name": "Upload Document for Summarization", "scenario": "User uploads a document to the BotGenesis platform for summarization.", "actors": "User", "preconditions": "User must be authenticated and have access to the document uploading feature.", "steps": ["User navigates to the document upload section of the BotGenesis platform.", "User selects a document from their device to upload.", "The system processes the uploaded document and generates a summary based on the content.", "The system presents the summarized version of the document to the user."]}, "testcases": [{"name": "Valid Document Upload and Summarization", "description": "Verify that a user can successfully upload a document and get a summary.", "input": {"documentName": "SampleDocument.pdf", "documentSize": "2MB"}, "expected": {"outcome": "Summarization successful", "status": "Summary Generated"}}, {"name": "Document Upload Without Selection", "description": "Verify the system response when a user tries to upload without selecting a document.", "input": {"documentName": "", "documentSize": "0MB"}, "expected": {"outcome": "Summarization failed", "status": "No Document Selected"}}, {"name": "Invalid Document Format", "description": "Verify the system response when a user tries to upload a file in an unsupported format.", "input": {"documentName": "InvalidFormat.docx", "documentSize": "3MB"}, "expected": {"outcome": "Summarization failed", "status": "Unsupported Format"}}]}, {"usecase": {"name": "Query Document Content", "scenario": "User submits a query to retrieve specific information from a document using BotGenesis.", "actors": "User", "preconditions": "User must have an uploaded document or access to a document in the BotGenesis platform.", "steps": ["User enters a query or specific information they want to retrieve from a document.", "The system uses Python scripts to call the OpenAI API and Langchain to fetch the results based on the user query.", "The system presents the query results to the user."]}, "testcases": [{"name": "Valid Query", "description": "Verify if the system successfully retrieves specific information from a document based on the user's query.", "input": {"userQuery": "Summary of Chapter 3"}, "expected": {"outcome": "Query results displayed", "status": "Success"}}, {"name": "Invalid Document Access", "description": "Verify the response when the user does not have access to any document in the BotGenesis platform.", "input": {"userQuery": "Summary of Chapter 3"}, "expected": {"outcome": "Access denied", "status": "Failed"}}, {"name": "Empty Query", "description": "Verify the system's response to an empty query submitted by the user.", "input": {"userQuery": ""}, "expected": {"outcome": "Empty query error", "status": "Failed"}}]}, {"usecase": {"name": "Utilize UiPath Document Understanding", "scenario": "User leverages UiPath Document Understanding to infer document structure and extract data from invoice-formatted documents.", "actors": "User", "preconditions": "User must have access to the UiPath Document Understanding feature within BotGenesis.", "steps": ["User selects the document requiring structure inference and data extraction.", "The system uses UiPath Document Understanding to analyze the document and infer its structure.", "The system extracts relevant data from the invoice-formatted document and presents it to the user."]}, "testcases": [{"name": "Valid Document Understanding", "description": "Verify that the system successfully infers document structure and extracts data from an invoice-formatted document.", "input": {"document": "invoice.pdf"}, "expected": {"outcome": "Document structure inferred and data extracted successfully", "dataExtracted": "Vendor: XYZ Corp, Invoice Date: 2022-01-15, Total Amount: $500"}}, {"name": "Invalid Document Understanding", "description": "Verify that the system handles the case where the document understanding process fails.", "input": {"document": "invalid_doc.pdf"}, "expected": {"outcome": "Document understanding failed", "reason": "Unable to infer document structure or extract data"}}]}, {"usecase": {"name": "Create Custom UiPath Activities with Code Generation", "scenario": "User utilizes the OpenAI-powered code generation feature to create custom UiPath activities and publish them as packages for use in UiPath Studio.", "actors": "User", "preconditions": "User must have the necessary permissions to create and publish custom UiPath activities.", "steps": ["User accesses the OpenAI-powered code generation feature within BotGenesis.", "User provides inputs or requirements for the custom UiPath activity to be generated.", "The system utilizes Powershell and OpenAI to generate the code for the custom UiPath activity.", "User reviews and approves the generated code.", "The system packages the custom activity and enables its publication for use in UiPath Studio."]}, "testcases": [{"name": "Valid Code Generation", "description": "Verify that a user can successfully generate code for custom UiPath activity.", "input": {"inputs": {"activityName": "CustomActivity123", "activityType": "Data Extraction", "inputFields": ["Text", "Image"], "outputFields": ["ExtractedData"]}, "approval": "Approved"}, "expected": {"outcome": "Code generation successful", "status": "Code Approved", "packageReady": true}}, {"name": "Incomplete Code Generation", "description": "Verify the response when a user provides insufficient input for code generation.", "input": {"inputs": {"activityName": "IncompleteActivity", "activityType": "IncompleteType", "inputFields": [], "outputFields": []}, "approval": "Rejected"}, "expected": {"outcome": "Code generation failed", "status": "Input Validation Error", "packageReady": false}}]}, {"usecase": {"name": "Remove NuGet Packages", "scenario": "User wants to remove NuGet packages from their system", "actors": "User", "preconditions": "User has the application installed and running", "steps": ["User opens the application", "User selects the option to remove NuGet packages", "The application automatically detects the location of all NuGet packages on the user's system", "The NuGet Package Analyzer Bot thoroughly examines each package and its versions, calculating the space consumption for each", "The packages are arranged in descending order based on their space usage", "The user is presented with a list of packages and their space usage", "User selects specific package versions or entire packages to be deleted", "The application initiates the deletion process as per the user's selection"]}, "testcases": [{"name": "Valid NuGet Package Deletion", "description": "Verify that the user can successfully remove NuGet packages from the system", "input": {"applicationStatus": "running", "selectedPackages": ["Package1", "Package2"], "selectedVersions": ["1.0", "2.0"]}, "expected": {"outcome": "Selected NuGet packages and versions deleted successfully", "status": "Deletion successful"}}, {"name": "Invalid NuGet Package Deletion", "description": "Verify handling of invalid NuGet package deletion request", "input": {"applicationStatus": "not Running", "selectedPackages": ["Invalid Package"], "selectedVersions": ["3.0"]}, "expected": {"outcome": "NuGet package deletion failed", "status": "Deletion unsuccessful", "error": "Application not running or invalid package/version selected"}}]}, {"usecase": {"name": "Perform Custom Directory Analysis", "scenario": "User wants to perform custom analysis of directories for file deletion", "actors": "User", "preconditions": "User has the application installed and running", "steps": ["User opens the application", "User selects the option for custom directory analysis", "The Custom Directory Analyzer bot provides a list of random files or directories for potential deletion", "User selects specific files or directories to be deleted", "The application initiates the deletion process as per the user's selection"]}, "testcases": [{"name": "Successful Custom Directory Analysis", "description": "Verify that the user can successfully perform a custom analysis of directories for file deletion", "input": {"selectedFiles": ["file1.txt", "directory1"], "confirmation": "yes"}, "expected": {"outcome": "Deletion process initiated for the selected files and directories", "status": "Success"}}, {"name": "Cancelled Custom Directory Analysis", "description": "Verify that the user can cancel the custom directory analysis process", "input": {"selectedFiles": ["file2.txt", "directory2"], "confirmation": "no"}, "expected": {"outcome": "Deletion process cancelled as per user's decision", "status": "Cancelled"}}]}, {"usecase": {"name": "Backup Deleted Files to User's Email", "scenario": "User wants to backup deleted files to their email for future retrieval", "actors": "User", "preconditions": "User has performed file/folder deletions using the application", "steps": ["User opens the application", "User navigates to the backup feature", "The application sends deleted files to the user's email for future retrieval"]}, "testcases": [{"name": "Successful Backup", "description": "User successfully backs up deleted files to their email", "input": {"deletedFiles": ["file1.txt", "document.pdf"], "userEmail": "user@example.com"}, "expected": {"outcome": "Files backed up to email successfully", "status": "Successful"}}, {"name": "No Deleted Files", "description": "User tries to backup files but no deleted files are present", "input": {"deletedFiles": [], "userEmail": "user@example.com"}, "expected": {"outcome": "No files to backup", "status": "Failed"}}, {"name": "Invalid Email", "description": "User provides an invalid email for backup", "input": {"deletedFiles": ["file1.txt"], "userEmail": "invalid_email"}, "expected": {"outcome": "Invalid email address", "status": "Failed"}}]}, {"usecase": {"name": "Integration with UiPath Apps, Data Services and UiPath Studios", "scenario": "Integration of UiPath Apps, Data Services, and UiPath Studios to optimize the overall process", "actors": "Application", "preconditions": "Integration services are set up and operational", "steps": ["UiPath Studios and Data Services combine data elements from the apps and create efficient backend bots", "UiPath Apps are used for front-end app design, where separate bots handle various operations including system file analysis, NiGet directory management, file deletion based on user input, and email backup"]}, "testcases": [{"name": "Integration Successful", "description": "Verify the successful integration of UiPath Apps, Data Services, and UiPath Studios", "input": {}, "expected": {"outcome": "Integration successful", "status": "OptimizedProcess"}}, {"name": "Data Services Integration", "description": "Verify that UiPath Studios and Data Services combine data elements from the apps and create efficient backend bots", "input": {}, "expected": {"outcome": "Data services integration successful", "status": "DataCombined"}}, {"name": "UiPath Apps Front-end Design", "description": "Verify that UiPath Apps are used for front-end app design and separate bots handle various operations including system file analysis, NiGet directory management, file deletion based on user input, and email backup", "input": {}, "expected": {"outcome": "Front-end design successful", "status": "App Operations Handled"}}, {"name": "Non-operational Integration Services", "description": "Verify the system's behavior when integration services are not operational", "input": {}, "expected": {"outcome": "Integration failed", "status": "Non Operational Services"}}]}, {"usecase": {"name": "Potential Enhancement: Integration Services for Power BI Dashboard", "scenario": "Implementation of Integration Services for Power BI Dashboard Integration", "actors": "Application Development Team", "preconditions": "Development team working on future enhancements", "steps": ["Integration Services are implemented for Power BI Dashboard Integration", "Users have seamless and comprehensive experience for file and folder management"]}, "testcases": [{"name": "Integration Services Implementation", "description": "Verify the successful implementation of integration services for Power BI Dashboard.", "input": {}, "expected": {"outcome": "Integration services implemented successfully", "experience": "Seamless and comprehensive file and folder management for users"}}]}, {"usecase": {"name": "Data Extraction from Application Forms", "scenario": "The system extracts data from application forms using OCR technology and parses the information into structured data.", "actors": ["System", "UiPath Document Understanding suite"], "preconditions": "Application forms are available in a scanned format.", "steps": ["The system triggers the OCR technology to convert the scanned forms into usable, structured data.", "The system validates the extracted data for accuracy and completeness."]}, "testcases": [{"name": "Valid Data Extraction", "description": "Verify that the system can successfully extract and parse data from the scanned application form using OCR technology.", "input": {"scannedForm": "form1.jpg"}, "expected": {"outcome": "Data extraction and parsing successful", "validationStatus": "Data validated"}}, {"name": "Invalid Data Extraction (No Scanned Form)", "description": "Verify that the system handles the case where no scanned form is provided for data extraction.", "input": {"scannedForm": ""}, "expected": {"outcome": "Data extraction failed", "validationStatus": "No data to validate"}}]}, {"usecase": {"name": "Straight-Through Processing and Business Rule Application for Application Forms", "scenario": "The system applies predefined business rules and ensures data quality, consistency, and completeness for application forms.", "actors": ["System", "UiPath Automation Workflows"], "preconditions": "Data extraction from application forms is completed.", "steps": ["The system implements automation workflows to apply predefined business rules.", "The system employs decision-making and exception handling functionalities to maintain data integrity.", "The system validates the processed data against defined business rules."]}, "testcases": [{"name": "Valid Business Rule Application", "description": "Verify that the system successfully applies predefined business rules to processed data.", "input": {"dataStatus": "completed", "automationWorkflow": "business_rule_automation_workflow"}, "expected": {"outcome": "Business rules applied successfully", "dataQuality": "High", "dataConsistency": "Maintained", "dataCompleteness": "Achieved"}}, {"name": "Incomplete Data Extraction", "description": "Verify that the system handles the case where data extraction from application forms is incomplete before applying business rules.", "input": {"dataStatus": "incomplete", "automationWorkflow": "business_rule_automation_workflow"}, "expected": {"outcome": "Business rule application failed", "dataIntegrity": "Compromised", "dataConsistency": "Not Maintained", "dataCompleteness": "Not Achieved"}}]}, {"usecase": {"name": "Image Processing for Application Forms", "scenario": "The system identifies and extracts photo and signature elements from the application forms for future use.", "actors": ["System", "UiPath capabilities for image processing"], "preconditions": "Data extraction from application forms is completed.", "steps": ["The system leverages UiPath's image processing capabilities to identify and extract photo and signature elements.", "The system saves the extracted elements for future use or verification purposes."]}, "testcases": [{"name": "Valid Image Processing", "description": "Verify that the system successfully identifies and extracts the photo and signature elements from the application form.", "input": {"formImage": "application_form.jpg"}, "expected": {"outcome": "Photo and signature elements extracted successfully", "result": "Elements saved for future use"}}, {"name": "Empty Form Image", "description": "Verify that the system handles the case where no form image is provided for processing.", "input": {"formImage": ""}, "expected": {"outcome": "No image detected for processing", "result": "Extraction process failed"}}]}, {"usecase": {"name": "Data Management for Application Forms", "scenario": "The system uploads the extracted and validated data to the database for storage and retrieval.", "actors": ["System", "UiPath Database Activities"], "preconditions": "Data extraction and validation from application forms are completed.", "steps": ["The system utilizes UiPath Database Activities to upload the extracted and validated data to UiPath Data Services Entities.", "The system ensures data integrity and completeness during the upload process."]}, "testcases": [{"name": "Valid Data Upload", "description": "Verify that the system successfully uploads extracted and validated data to the database.", "input": {"data": "extracted and validated data", "destination": "UiPath Data Services Entities"}, "expected": {"outcome": "Data upload successful", "status": "Success"}}, {"name": "Missing Data Upload", "description": "Verify that the system handles the case where no data is provided for upload.", "input": {"data": "", "destination": "UiPath Data Services Entities"}, "expected": {"outcome": "Data upload failed", "status": "Not Submitted"}}, {"name": "Invalid Destination", "description": "Verify that the system handles the case where an invalid destination is specified for data upload.", "input": {"data": "extracted and validated data", "destination": "Invalid Destination"}, "expected": {"outcome": "Data upload failed", "status": "Not Submitted"}}]}, {"usecase": {"name": "Communication Automation for Application Forms", "scenario": "The system automates the creation and dispatch of Examination Authority Letters, integrating candidate\u2019s extracted photos into the document, and uses UiPath Integration Service with eMail connectors to email these letters to the candidates.", "actors": ["System", "UiPath Integration Service", "eMail connectors"], "preconditions": "Data extraction, validation, image processing, and data management from application forms are completed.", "steps": ["The system automates the creation of Examination Authority Letters, integrating candidate\u2019s extracted photos into the document.", "The system dispatches the letters using UiPath Integration Service with eMail connectors, ensuring efficient communication with the candidates."]}, "testcases": [{"name": "Automate Letter Creation with Photo Integration", "description": "Verify the automated creation of Examination Authority Letters with integrated candidate photos.", "input": {"process": "Automated creation of letters for 10 candidates with extracted photos"}, "expected": {"outcome": "Letters created and photos integrated successfully", "status": "Success"}}, {"name": "Dispatch Letters via UiPath Integration Service", "description": "Ensure that the system dispatches letters using UiPath Integration Service with eMail connectors.", "input": {"letters": "Examination Authority Letters", "method": "UiPath Integration Service with eMail connectors"}, "expected": {"outcome": "Letters dispatched efficiently", "status": "Success"}}, {"name": "Attempt Dispatch without Integrated Photos", "description": "Verify system behavior when attempting to dispatch letters without integrated candidate photos.", "input": {"letters": "Examination Authority Letters", "photos": "None"}, "expected": {"outcome": "Dispatch failed", "status": "Failed with missing photos error"}}]}, {"usecase": {"name": "Data Extraction from Answer Sheets", "scenario": "The system extracts data from answer sheets including recognizing and interpreting multiple-choice responses using OCR technology.", "actors": ["System", "UiPath Document Understanding framework"], "preconditions": "Answer sheets are available in a scanned format.", "steps": ["The system employs OCR technology to extract data from answer sheets, including multiple-choice responses.", "The system validates the extracted data for accuracy and completeness."]}, "testcases": [{"name": "Valid Data Extraction", "description": "Verify that the system successfully extracts data from answer sheets using OCR technology.", "input": {"scannedSheet": "answer_sheet1.png"}, "expected": {"outcome": "Data extraction successful", "accuracy": "High", "completeness": "Complete"}}, {"name": "Empty Answer Sheet", "description": "Verify that the system handles the case where no answer sheet is provided for data extraction.", "input": {"scannedSheet": ""}, "expected": {"outcome": "Data extraction failed", "error": "No answer sheet provided"}}, {"name": "Incomplete Data Extraction", "description": "Verify that the system handles cases where the extracted data is incomplete.", "input": {"scannedSheet": "answer_sheet2.png"}, "expected": {"outcome": "Data extraction partial success", "accuracy": "Moderate", "completeness": "Incomplete"}}, {"name": "Invalid Answer Sheet Format", "description": "Verify that the system handles cases where the provided answer sheet is in an unsupported format.", "input": {"scannedSheet": "answer_sheet3.gif"}, "expected": {"outcome": "Data extraction failed", "error": "Unsupported file format"}}]}, {"usecase": {"name": "Straight-Through Processing and Business Rule Application for Answer Sheets", "scenario": "The system applies business rules to the extracted data from answer sheets, ensuring its consistency and completeness.", "actors": ["System", "UiPath Automation Workflows"], "preconditions": "Data extraction from answer sheets is completed.", "steps": ["The system creates automation workflows to apply business rules to the extracted data from answer sheets.", "The system validates the processed data against predefined business rules.", "The system ensures the consistency and completeness of the processed data."]}, "testcases": [{"name": "Valid Data Processing", "description": "Verify that the system successfully applies business rules to extracted data and ensures its consistency and completeness.", "input": {"workflowID": "WF101", "extractedData": "answer_sheet_data.xlsx", "rulesFile": "business_rules.json"}, "expected": {"outcome": "Data processing successful", "validationResult": "Passed", "consistency": "Validated", "completeness": "Validated"}}, {"name": "Missing Data Processing", "description": "Verify that the system handles the case where the extracted data is incomplete or missing.", "input": {"workflowID": "WF102", "extractedData": "incomplete_answer_sheet_data.xlsx", "rulesFile": "business_rules.json"}, "expected": {"outcome": "Data processing failed", "validationResult": "Failed", "error": "Incomplete data"}}, {"name": "Invalid Rule Format", "description": "Verify that the system handles the case where the provided business rules file has an incorrect format.", "input": {"workflowID": "WF103", "extractedData": "answer_sheet_data.xlsx", "rulesFile": "invalid_rules_format.txt"}, "expected": {"outcome": "Data processing failed", "validationResult": "Failed", "error": "Invalid rule format"}}]}, {"usecase": {"name": "Signature Extraction for Fraud Checking from Answer Sheets", "scenario": "The system identifies, extracts, and saves signatures from answer sheets for further verification and fraud detection using the Signature Comparison Machine Learning model from UiPath AI Center.", "actors": ["System", "UiPath capabilities for image processing", "UiPath AI Center"], "preconditions": "Data extraction and validation from answer sheets is completed.", "steps": ["The system utilizes image processing capabilities to identify and extract signatures from answer sheets.", "The system saves the extracted signatures for further verification and fraud detection using the Signature Comparison Machine Learning model from UiPath AI Center."]}, "testcases": [{"name": "Valid Signature Extraction", "description": "Verify that the system successfully extracts and saves the signature from the answer sheet for further verification and fraud detection.", "input": {"answerSheetImage": "image data in binary format"}, "expected": {"outcome": "Signature extraction successful", "status": "Success", "signatureData": "extracted signature in binary format"}}, {"name": "No Answer Sheet Image", "description": "Verify that the system handles the case where no answer sheet image is provided for signature extraction.", "input": {"answerSheetImage": null}, "expected": {"outcome": "No answer sheet image provided", "status": "Failure"}}, {"name": "Invalid Signature Extraction", "description": "Verify that the system handles the case where the signature extraction process fails.", "input": {"answerSheetImage": "corrupted image data"}, "expected": {"outcome": "Signature extraction failed", "status": "Failure", "error": "Image processing error"}}]}, {"usecase": {"name": "Data Validation and Two-way Matching from Answer Sheets to Application Forms", "scenario": "The system cross-verifies the extracted data from answer sheets (ID and name) against the data from application forms.", "actors": ["System"], "preconditions": "Data extraction and validation from answer sheets and application forms are completed.", "steps": ["The system implements two-way matching to cross-verify the extracted data from answer sheets with the corresponding data from application forms.", "The system ensures the consistency and correctness of the matched data."]}, "testcases": [{"name": "Valid Data Matching", "description": "Verify that the system can successfully match the extracted data from answer sheets with the corresponding data from application forms.", "input": {"answerSheetID": "AS2022001", "answerSheetData": {"studentID": "STU123", "studentName": "John Doe"}, "applicationFormID": "AF2022101", "applicationFormData": {"applicantID": "STU123", "applicantName": "John Doe"}}, "expected": {"outcome": "Data matching successful", "consistencyCheck": "Matched"}}, {"name": "Mismatched Data", "description": "Verify that the system can identify and handle cases where the data from answer sheets does not match the corresponding data from application forms.", "input": {"answerSheetID": "AS2022002", "answerSheetData": {"studentID": "STU456", "studentName": "Jane Smith"}, "applicationFormID": "AF2022102", "applicationFormData": {"applicantID": "STU456", "applicantName": "Janet Smith"}}, "expected": {"outcome": "Data mismatch identified", "consistencyCheck": "Mismatched", "errorDetails": "Data inconsistency found between answer sheet and application form"}}]}, {"usecase": {"name": "Answer Scoring for Answer Sheets", "scenario": "The system applies scoring rules to the extracted answers against pre-defined answer keys, thereby determining the candidate\u2019s score.", "actors": ["System", "Pre-defined answer keys"], "preconditions": "Data extraction and validation from answer sheets is completed.", "steps": ["The system applies scoring rules to the extracted answers against the pre-defined answer keys.", "The system determines the candidate's score based on the applied scoring rules."]}, "testcases": [{"name": "Valid Answer Scoring", "description": "Verify that the system accurately scores the candidate's answers based on the pre-defined answer keys.", "input": {"answerSheetID": "AS2021", "extractedAnswers": {"Q1": "OptionC", "Q2": "25", "Q3": "The sun is a star."}, "answerKeys": {"Q1": "OptionC", "Q2": "25", "Q3": "The sun is a star."}}, "expected": {"outcome": "Scoring successful", "candidateScore": "100"}}, {"name": "Missing Answer Key", "description": "Verify that the system handles the scenario where a pre-defined answer key is missing for a question while scoring the candidate's answers.", "input": {"answerSheetID": "AS2022", "extractedAnswers": {"Q1": "OptionA", "Q2": "20", "Q3": "The moon is a planet."}, "answerKeys": {"Q1": "OptionA", "Q2": "20"}}, "expected": {"outcome": "Scoring failed", "error": "Missing answer key for Q3"}}, {"name": "Invalid Extracted Answer", "description": "Verify that the system handles the scenario where an invalid/unsupported answer is extracted and prevents scoring.", "input": {"answerSheetID": "AS2023", "extractedAnswers": {"Q1": "OptionD", "Q2": "Thirty", "Q3": "The earth is a moon."}, "answerKeys": {"Q1": "OptionC", "Q2": "25", "Q3": "The earth is a planet."}}, "expected": {"outcome": "Scoring failed", "error": "Invalid answer format for Q1; Invalid answer format for Q2"}}]}, {"usecase": {"name": "Communication Automation for Answer Sheets", "scenario": "The system automates the generation and dispatch of Rejection/Offer letters, incorporating the candidate\u2019s photo, and using UiPath Integration Service with eMail connectors to email these letters to the candidates based on their score.", "actors": ["System", "UiPath Integration Service", "eMail connectors"], "preconditions": "Data extraction, validation, signature extraction, and scoring from answer sheets are completed.", "steps": ["The system automates the generation of Rejection/Offer letters, incorporating the candidate\u2019s photo into the document.", "The system dispatches the letters to the candidates based on their score using UiPath Integration Service with eMail connectors, ensuring efficient communication."]}, "testcases": [{"name": "Valid Rejection Letter Generation and Dispatch", "description": "Verify that the system successfully generates and dispatches a rejection letter to a candidate based on their score.", "input": {"candidateInfo": {"name": "John Doe", "photo": "john_doe.png", "email": "john.doe@email.com", "score": 60}, "letterType": "rejection"}, "expected": {"outcome": "Rejection letter generated and dispatched successfully", "status": "Success"}}, {"name": "Valid Offer Letter Generation and Dispatch", "description": "Verify that the system successfully generates and dispatches an offer letter to a candidate based on their score.", "input": {"candidateInfo": {"name": "Jane Smith", "photo": "jane_smith.png", "email": "jane.smith@email.com", "score": 85}, "letterType": "offer"}, "expected": {"outcome": "Offer letter generated and dispatched successfully", "status": "Success"}}, {"name": "Incomplete Candidate Information", "description": "Verify that the system handles the case where the candidate information is incomplete.", "input": {"candidateInfo": {"name": "Incomplete Candidate", "photo": "", "email": "incomplete@email.com", "score": 75}, "letterType": "rejection"}, "expected": {"outcome": "Letter generation and dispatch failed", "status": "Incomplete Candidate Information"}}, {"name": "Invalid Letter Type", "description": "Verify that the system handles the case where an invalid letter type is provided.", "input": {"candidateInfo": {"name": "Test Candidate", "photo": "test_candidate.png", "email": "test@email.com", "score": 70}, "letterType": "invalid"}, "expected": {"outcome": "Letter generation and dispatch failed", "status": "Invalid Letter Type"}}]}, {"usecase": {"name": "Retrieve Daily Energy Consumption Data", "scenario": "A user logs in to their energy account to retrieve daily consumption data from an online application.", "actors": "User, Online Application", "preconditions": "User has valid login credentials for their energy account.", "steps": ["User navigates to the login page of the energy account application.", "User enters their login credentials and submits the login form.", "The system validates the user's credentials and grants access to the account.", "User navigates to the section displaying daily energy consumption data."]}, "testcases": [{"name": "Valid Login and Retrieval", "description": "Verify that the user can successfully retrieve daily energy consumption data after logging in with valid credentials", "input": {"loginCredentials": {"username": "user123", "password": "pwd@123"}}, "expected": {"outcome": "Successfully retrieved daily consumption data", "status": "Approved"}}, {"name": "Invalid Login", "description": "Verify that the user cannot retrieve daily energy consumption data with invalid credentials", "input": {"loginCredentials": {"username": "invaliduser", "password": "invalidpwd"}}, "expected": {"outcome": "Failed to retrieve daily consumption data", "status": "Rejected"}}]}, {"usecase": {"name": "Control Lighting/Heating/Cooling Systems", "scenario": "A user logs in to their energy account or control system to control the lighting, heating, or cooling systems via an application.", "actors": "User, Control System Application", "preconditions": "User has valid login credentials for the energy account or control system.", "steps": ["User logs in to the control system application using their credentials.", "User navigates to the section to control the lighting, heating, or cooling systems.", "User adjusts the settings to reduce energy waste by turning off the lights, heating, or cooling systems."]}, "testcases": [{"name": "Valid Login and Adjust Lighting", "description": "Verify that a user with valid credentials can log in and control the lighting system.", "input": {"username": "user123", "password": "pass123", "action": "adjust lighting settings"}, "expected": {"outcome": "User successfully adjusts lighting settings", "status": "Success"}}, {"name": "Valid Login and Adjust Heating", "description": "Verify that a user with valid credentials can log in and control the heating system.", "input": {"username": "user456", "password": "pass456", "action": "adjust heating settings"}, "expected": {"outcome": "User successfully adjusts heating settings", "status": "Success"}}, {"name": "Valid Login and Adjust Cooling", "description": "Verify that a user with valid credentials can log in and control the cooling system.", "input": {"username": "user789", "password": "pass789", "action": "adjust cooling settings"}, "expected": {"outcome": "User successfully adjusts cooling settings", "status": "Success"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser", "password": "invalidpass", "action": "adjust lighting settings"}, "expected": {"outcome": "Access denied", "status": "Failure"}}]}, {"usecase": {"name": "Train ML Model for Historical Consumption Pattern", "scenario": "An ML model is trained to learn the historical consumption pattern for energy optimization.", "actors": "ML Model Trainer, Data", "preconditions": "Historical energy consumption data is available for training the ML model.", "steps": ["ML Model Trainer prepares the historical energy consumption data for training.", "The ML model is trained to learn and analyze the historical consumption pattern."]}, "testcases": [{"name": "Prepare Historical Energy Consumption Data", "description": "Verify that the ML Model Trainer can successfully prepare the historical energy consumption data for training.", "input": {"dataFormat": "CSV", "dataRows": 10000}, "expected": {"outcome": "Data prepared for training", "status": "Success"}}, {"name": "Train ML Model with Historical Consumption Data", "description": "Verify that the ML Model Trainer can successfully train the ML model with historical consumption data.", "input": {"modelType": "Deep Learning", "trainingIterations": 100}, "expected": {"outcome": "Model trained successfully", "status": "Completed"}}]}, {"usecase": {"name": "Automate Daily Data Extraction and Conversion", "scenario": "The UiPath Studio workflow automates the extraction and conversion of daily energy consumption data.", "actors": "UiPath Studio, Automation Cloud Document Understanding", "preconditions": "UiPath Studio workflow and Automation Cloud Document Understanding are set up and functional.", "steps": ["UiPath Studio workflow logs in to the energy account application and navigates to the daily data usage screen.", "The workflow extracts the data and converts it into a PDF document.", "The PDF file is uploaded into Automation Cloud Document Understanding for classification, extraction, and validation."]}, "testcases": [{"name": "Successful Login to Energy Account Application", "description": "Verify that the UiPath Studio workflow can successfully log in to the energy account application.", "input": {}, "expected": {"outcome": "Logged in successfully", "status": "Success"}}, {"name": "Failure to Log in to Energy Account Application", "description": "Verify that the UiPath Studio workflow handles login failure to the energy account application.", "input": {}, "expected": {"outcome": "Login failed", "status": "Failure"}}, {"name": "Data Extraction and Conversion", "description": "Verify that the UiPath Studio workflow can extract daily energy consumption data and convert it into a PDF document.", "input": {}, "expected": {"outcome": "Data extracted and converted successfully", "status": "Success"}}, {"name": "PDF Upload to Automation Cloud Document Understanding", "description": "Verify that the PDF file is successfully uploaded into Automation Cloud Document Understanding for classification, extraction, and validation.", "input": {}, "expected": {"outcome": "PDF uploaded and processed successfully", "status": "Success"}}]}, {"usecase": {"name": "Identify Inefficiencies and Trigger Alert", "scenario": "The system identifies inefficiencies in energy consumption and triggers an alert or warning message.", "actors": "System, User", "preconditions": "Data on energy consumption and patterns is available for analysis.", "steps": ["The system analyzes the energy consumption data and patterns to identify inefficiencies.", "If inefficiencies are detected, the system triggers an alert or warning message to notify the user or appropriate personnel."]}, "testcases": [{"name": "Identify Energy Inefficiency", "description": "Verify that the system can successfully identify inefficiencies in energy consumption.", "input": {"data": "energy_consumption_data"}, "expected": {"outcome": "Inefficiencies identified successfully", "status": "InefficienciesDetected", "notification": "Alert or warning message triggered"}}, {"name": "No Inefficiencies Identified", "description": "Verify that the system handles the case where no inefficiencies are detected in energy consumption.", "input": {"data": "normal_energy_consumption_data"}, "expected": {"outcome": "No inefficiencies detected", "status": "NoInefficiencies", "notification": "No alert triggered"}}]}, {"usecase": {"name": "Upload Receipt Image", "scenario": "User uploads an image of a receipt to the expense tracking system.", "actors": "User", "preconditions": "User must have an account and access to the receipt upload functionality.", "steps": ["User navigates to the receipt upload section of the expense tracking system.", "User selects the image of the receipt from their device or cloud storage.", "The system processes the uploaded image to extract expense information.", "The system validates and saves the extracted expense details."]}, "testcases": [{"name": "Valid Receipt Image Upload", "description": "User uploads a valid image of a receipt for processing and saving.", "input": {"image": "receipt1.jpg"}, "expected": {"outcome": "Image processed and expense details saved", "status": "Success"}}, {"name": "Missing Receipt Image", "description": "User tries to upload a receipt without selecting an image.", "input": {"image": ""}, "expected": {"outcome": "Receipt image not provided", "status": "Error"}}, {"name": "Invalid Image Format", "description": "User uploads an image in an unsupported format.", "input": {"image": "receipt1.pdf"}, "expected": {"outcome": "Invalid image format", "status": "Error"}}]}, {"usecase": {"name": "View Expense Insights", "scenario": "User views insights and analysis of their expenses from the tracking system.", "actors": "User", "preconditions": "User must be logged in and have uploaded expense receipts.", "steps": ["User accesses the expense insights or analysis dashboard.", "The system retrieves the expense data and generates insights based on the information.", "The system presents the insights and analysis to the user."]}, "testcases": [{"name": "Successful Access to Expense Insights Dashboard", "description": "Verify that the user can successfully access the expense insights or analysis dashboard.", "input": {}, "expected": {"outcome": "Expense insights dashboard accessed successfully"}}, {"name": "Generate Insights from Expense Data", "description": "Verify that the system can retrieve the expense data and generate insights based on the information.", "input": {}, "expected": {"outcome": "Expense data retrieved and insights generated successfully"}}, {"name": "View Expense Analysis", "description": "Verify that the user can view the presented insights and analysis of their expenses.", "input": {}, "expected": {"outcome": "Expense insights and analysis presented to the user"}}]}, {"usecase": {"name": "Automated Expense Extraction", "scenario": "The system automatically extracts expense amounts from uploaded receipt images.", "actors": "System", "preconditions": "Receipt images must be uploaded to the system.", "steps": ["The system continuously monitors for new receipt images uploaded to the expense tracking system.", "Upon detecting a new receipt image, the system processes the image to extract expense amounts.", "The system saves the extracted expense details into the expense tracking database."]}, "testcases": [{"name": "Valid Receipt Image Upload", "description": "Verify that the system successfully processes a newly uploaded receipt image.", "input": {"image": "receipt1.jpg"}, "expected": {"outcome": "Expense amounts extracted and saved to database", "status": "Success"}}, {"name": "No Receipt Image Detected", "description": "Verify that the system handles the case where no receipt image is detected for processing.", "input": {}, "expected": {"outcome": "No new receipt images detected", "status": "Success"}}, {"name": "Invalid Receipt Image Format", "description": "Verify that the system handles the case where an invalid receipt image format is uploaded.", "input": {"image": "receipt1.docx"}, "expected": {"outcome": "Invalid receipt image format", "status": "Error"}}]}, {"usecase": {"name": "Export Expense Report", "scenario": "User exports a report of their expenses from the tracking system.", "actors": "User", "preconditions": "User must be logged in and have expense data in the system.", "steps": ["User navigates to the expense report export section of the system.", "User selects the desired parameters for the expense report (e.g., date range, categories).", "The system generates a report based on the user's parameters.", "The system presents the user with options to download or email the generated expense report."]}, "testcases": [{"name": "Valid Expense Report Export", "description": "Verify that the user can successfully export the expense report based on selected parameters", "input": {"userId": "9876", "dateRange": "2024-01-01 to 2024-01-31", "categories": ["travel", "meals"]}, "expected": {"outcome": "Expense report generated and presented to the user for download/email", "status": "Success"}}, {"name": "Invalid Expense Report Export - No Data", "description": "Verify that the system handles the scenario where the user tries to export an expense report when no data is available", "input": {"userId": "5432", "dateRange": "2024-02-01 to 2024-02-28", "categories": ["transport"]}, "expected": {"outcome": "No expense data available for the selected parameters", "status": "No Data"}}]}, {"usecase": {"name": "Predict Food Requirement", "scenario": "The system predicts the amount of food required to be prepared based on various factors including the day, weather, events, holidays, and reservations.", "actors": "Restaurant Staff", "preconditions": "The system must have access to relevant data such as weather forecast, events schedule, holiday calendar, and reservation records.", "steps": ["Restaurant staff access the F.L.U.F.F.I.E system", "Staff input the date, check the weather forecast, and verify scheduled events and holidays", "The system processes the input data and predicts the quantity of food required for the day", "The system provides the predicted food requirement to the restaurant staff"]}, "testcases": [{"name": "Valid Prediction", "description": "Restaurant staff receives valid predictions for food requirement", "input": {"date": "2022-12-25", "weather": "Sunny", "events": "Christmas festival", "reservations": 150}, "expected": {"outcome": "Predicted food quantity provided", "status": "Successful"}}, {"name": "No Data Available", "description": "The system cannot predict due to lack of data", "input": {"date": "2022-10-31", "weather": "Rainy", "events": "No special events", "reservations": 30}, "expected": {"outcome": "Prediction failed due to insufficient data", "status": "Failed"}}, {"name": "Invalid Date", "description": "Restaurant staff enters an invalid date for prediction", "input": {"date": "2022-02-30", "weather": "Snowy", "events": "Winter festival", "reservations": 100}, "expected": {"outcome": "Prediction failed due to invalid date", "status": "Failed"}}]}, {"usecase": {"name": "Divert Remaining Food", "scenario": "In the event of excess food, the system facilitates diverting it from landfills to donation programs.", "actors": "Restaurant Staff", "preconditions": "There must be excess food available at the restaurant.", "steps": ["Restaurant staff access the F.L.U.F.F.I.E system", "Staff identifies the excess food that remains unconsumed", "The system suggests local donation programs or food banks to redirect the excess food", "Restaurant staff coordinate the donation of excess food through the provided information"]}, "testcases": [{"name": "Access FLUFFIE System", "description": "Restaurant staff successfully access the F.L.U.F.F.I.E system", "input": "Credentials for staff login", "expected": {"outcome": "System accessed", "status": "Success"}}, {"name": "Identify Excess Unconsumed Food", "description": "Staff identifies the excess food that remains unconsumed", "input": "Excess food inventory", "expected": {"outcome": "Excess food identified", "status": "Success"}}, {"name": "Suggest Donation Programs", "description": "The system suggests local donation programs or food banks to redirect the excess food", "input": "Excess food details", "expected": {"outcome": "Donation programs suggested", "status": "Success"}}, {"name": "Coordinate Food Donation", "description": "Restaurant staff coordinate the donation of excess food through the provided information", "input": "Donation program details", "expected": {"outcome": "Donation coordinated", "status": "Success"}}]}, {"usecase": {"name": "Improve Operational Efficiency", "scenario": "The system aids in reducing costs and improving operational efficiency for the restaurant.", "actors": "Restaurant Management", "preconditions": "The system must have access to historical data and real-time inputs.", "steps": ["Restaurant management accesses the F.L.U.F.F.I.E system", "The system analyzes historical data, real-time inputs, and various factors contributing to food wastage", "System provides recommendations to optimize food preparation, minimize waste, and enhance operational efficiency"]}, "testcases": [{"name": "Accessing System", "description": "Restaurant management accesses the F.L.U.F.F.I.E system", "input": {"user": "Restaurant Management", "action": "Access System"}, "expected": {"outcome": "Access Granted", "status": "Success"}}, {"name": "Analysis of Historical Data", "description": "The system analyzes historical data to provide recommendations", "input": {"data": "Historical"}, "expected": {"outcome": "Data Analyzed", "status": "Success"}}, {"name": "Analysis of Real-time Inputs", "description": "The system analyzes real-time inputs to provide recommendations", "input": {"data": "Real-time"}, "expected": {"outcome": "Inputs Analyzed", "status": "Success"}}, {"name": "Recommendations for Optimization", "description": "System provides recommendations to optimize food preparation", "input": {"recommendationType": "Optimization"}, "expected": {"outcome": "Optimization Recommendations Provided", "status": "Success"}}, {"name": "Recommendations for Waste Minimization", "description": "System provides recommendations to minimize food wastage", "input": {"recommendationType": "Waste Minimization"}, "expected": {"outcome": "Waste Minimization Recommendations Provided", "status": "Success"}}, {"name": "Recommendations for Efficiency Enhancement", "description": "System provides recommendations to enhance operational efficiency", "input": {"recommendationType": "Efficiency Enhancement"}, "expected": {"outcome": "Efficiency Enhancement Recommendations Provided", "status": "Success"}}]}, {"usecase": {"name": "Promote Sustainable Food System", "scenario": "The system supports the promotion of a more equitable and sustainable food system.", "actors": "Restaurant Management", "preconditions": "The restaurant must be committed to sustainable practices.", "steps": ["Restaurant management accesses the F.L.U.F.F.I.E system", "The system provides insights and recommendations for sustainable food management practices", "Restaurant management implements the recommended sustainable practices to support a more equitable and sustainable food system"]}, "testcases": [{"name": "Accessing F.L.U.F.F.I.E system", "description": "Restaurant management can access the F.L.U.F.F.I.E system", "input": {"user": "Restaurant Management", "system_access": "Allowed"}, "expected": {"outcome": "Access Granted", "status": "Success"}}, {"name": "Insights and Recommendations", "description": "The system provides insights and recommendations for sustainable food management practices", "input": {"user": "Restaurant Management", "insights_requested": true}, "expected": {"outcome": "Insights Provided", "status": "Available"}}, {"name": "Implementation of Sustainable Practices", "description": "Restaurant management implements the recommended sustainable practices", "input": {"user": "Restaurant Management", "action": "Implement Recommended Practices"}, "expected": {"outcome": "Practices Implemented", "status": "Success"}}]}, {"usecase": {"name": "Access Dashboard", "scenario": "Customer service team or data analysts access the user-friendly dashboard of the Google Reviews Analytics app.", "actors": ["Customer Service Team", "Data Analysts"], "preconditions": "The user must be authenticated and have the necessary permissions to access the dashboard.", "steps": ["User logs into the Google Reviews Analytics app.", "User is presented with the dashboard displaying Google reviews data.", "User can view graphical representations and statistical insights of the reviews data."]}, "testcases": [{"name": "Successful Login to Google Reviews Analytics App", "description": "Verify that the customer service team or data analysts can successfully log in to the app.", "input": {"user": "Customer Service Team"}, "expected": {"outcome": "User is authenticated and logged in", "permissions": "Customer service team or data analysts role assigned"}}, {"name": "Access Dashboard - Positive Case", "description": "Verify that the authenticated user can access the dashboard and view Google reviews data.", "input": {"user": "Data Analysts"}, "expected": {"outcome": "Dashboard displayed with Google reviews data", "visualPresentations": true, "statisticalInsights": true}}, {"name": "Access Dashboard - Unauthorized User", "description": "Verify that unauthorized users cannot access the dashboard.", "input": {"user": "Unauthorized User"}, "expected": {"outcome": "Access to dashboard denied", "error": "Unauthorized access"}}]}, {"usecase": {"name": "Extract Google Reviews", "scenario": "Users extract Google reviews for analysis using the app's functionality.", "actors": ["Customer Service Team", "Data Analysts"], "preconditions": "The user must have access to the Google Reviews Analytics app and be authenticated.", "steps": ["User navigates to the extraction section of the app.", "User specifies the parameters for extracting Google reviews (e.g., time range, keywords).", "The app processes the request and retrieves the Google reviews data."]}, "testcases": [{"name": "Extract Google Reviews - Valid Request", "description": "User successfully extracts Google reviews using specified parameters", "input": {"userId": "user123", "section": "extraction", "timeRange": "last 30 days", "keywords": ["app", "customer service"], "authToken": "token123"}, "expected": {"outcome": "Google reviews data retrieved successfully", "status": 200}}, {"name": "Extract Google Reviews - Invalid Time Range", "description": "User attempts to extract Google reviews with an invalid time range", "input": {"userId": "user456", "section": "extraction", "timeRange": "future dates", "keywords": ["app", "issues"], "authToken": "token789"}, "expected": {"outcome": "Invalid time range specified", "status": 400}}]}, {"usecase": {"name": "Analyze Google Reviews", "scenario": "Users utilize the app to perform sentiment analysis and generate improvement suggestions for the extracted Google reviews.", "actors": ["Customer Service Team", "Data Analysts"], "preconditions": "The user must have the extracted Google reviews data available in the app.", "steps": ["User accesses the analysis section of the app.", "User selects the option to perform sentiment analysis on the reviews data.", "The app uses GPT-4's advanced AI capabilities to analyze sentiments and generate improvement suggestions based on the reviews.", "Generated insights and suggestions are displayed for user review and action."]}, "testcases": [{"name": "Successful Sentiment Analysis", "description": "Verify that the app can successfully perform sentiment analysis on the extracted Google reviews and generate positive improvement suggestions.", "input": {"dataAvailable": true, "sentimentAnalysisOptionSelected": true, "appUsed": "GPT-4"}, "expected": {"outcome": "Sentiment analysis and improvement suggestions generated", "displayedResults": true}}, {"name": "Failed Sentiment Analysis - No Data Available", "description": "Verify that the app handles the scenario where no Google reviews data is available for analysis.", "input": {"dataAvailable": false, "sentimentAnalysisOptionSelected": true}, "expected": {"outcome": "No data available for sentiment analysis", "displayedResults": false}}, {"name": "Invalid Sentiment Analysis Option", "description": "Verify that the app handles a scenario where the user selects an invalid option for sentiment analysis.", "input": {"dataAvailable": true, "sentimentAnalysisOptionSelected": false}, "expected": {"outcome": "Invalid sentiment analysis option selected", "displayedResults": false}}]}, {"usecase": {"name": "Make Data-Driven Decisions", "scenario": "Organization uses the analysis results to make data-driven decisions for service improvement.", "actors": ["Decision Makers", "Management Team"], "preconditions": "The decision makers and management team have access to the analyzed Google reviews insights.", "steps": ["Decision makers review the sentiment analysis and improvement suggestions provided by the app.", "They utilize the insights to identify areas for service improvement and formulate action plans.", "Data-driven decisions are made based on the analysis results to enhance services and address negative feedback effectively."]}, "testcases": [{"name": "Review Sentiment Analysis", "description": "Verify that decision makers can review the sentiment analysis provided by the app.", "input": {}, "expected": {"outcome": "Sentiment analysis reviewed successfully", "status": "Success"}}, {"name": "Utilize Insights for Service Improvement", "description": "Check if decision makers can successfully utilize the insights to identify areas for service improvement and formulate action plans.", "input": {}, "expected": {"outcome": "Insights utilized for service improvement", "status": "Success"}}, {"name": "Make Data-Driven Decisions", "description": "Ensure that data-driven decisions are successfully made based on the analysis results to enhance services and address negative feedback effectively.", "input": {}, "expected": {"outcome": "Data-driven decisions made for service improvement", "status": "Success"}}]}, {"usecase": {"name": "Continuous Improvement", "scenario": "Organization leverages the google review analysis results to drive continuous improvement and enhance overall performance.", "actors": ["Organization Leadership", "Quality Assurance Team"], "preconditions": "The organization's leadership and quality assurance team have access to the analysis results and improvement suggestions.", "steps": ["Leadership encourages the implementation of improvement suggestions based on the analysis.", "Action plans are developed to address service gaps and improve customer satisfaction.", "Quality assurance team monitors the implementation and effectiveness of the improvement initiatives to ensure continuous enhancement of services."]}, "testcases": [{"name": "Encouragement for Improvement Suggestions", "description": "Verify that the organization's leadership encourages the implementation of improvement suggestions based on the analysis results.", "input": {"actor": "Organization Leadership", "suggestion": "Implement automated customer feedback system."}, "expected": {"outcome": "Leadership encourages the implementation of the improvement suggestion.", "status": "Success"}}, {"name": "Action Plan Development", "description": "Verify that action plans are systematically developed to address service gaps and improve customer satisfaction based on analysis results.", "input": {"actor": "Organization Leadership", "serviceGaps": ["Delayed response time", "Product quality issues"], "improvementInitiatives": ["Introduction of a customer service training program", "Quality control measures for products"]}, "expected": {"outcome": "Action plans are developed to address service gaps and improve customer satisfaction.", "status": "Success"}}, {"name": "Monitoring of Improvement Initiatives", "description": "Verify that quality assurance team effectively monitors the implementation and measures the effectiveness of improvement initiatives.", "input": {"actor": "Quality Assurance Team", "initiatives": ["Customer service training program", "Quality control measures for products"]}, "expected": {"outcome": "Quality assurance team monitors the implementation and effectiveness of the improvement initiatives.", "status": "Success"}}]}, {"usecase": {"name": "User Blood Test Report Upload", "scenario": "A user uploads their laboratory blood test report to the HSLA platform for analysis and personalized advice.", "actors": "User", "preconditions": "User must have a registered account on the HSLA platform", "steps": ["User navigates to the blood test report upload section of the HSLA platform", "User selects the option to upload their laboratory blood test report", "User uploads the report file", "The system processes the uploaded report for analysis"]}, "testcases": [{"name": "Valid Blood Test Report Upload", "description": "Verify that the system accepts and processes a valid blood test report upload", "input": {"user_id": "12345", "file_type": "pdf", "file_size": "500KB", "file_content": "base64 encoded file data"}, "expected": {"outcome": "Report upload successful", "status": "Processed"}}, {"name": "Missing File Type", "description": "Verify that the system rejects the blood test report upload when file type is missing", "input": {"user_id": "12345", "file_size": "500KB", "file_content": "base64 encoded file data"}, "expected": {"outcome": "Report upload failed", "status": "Rejected"}}, {"name": "Large File Upload", "description": "Verify that the system handles large blood test report uploads", "input": {"user_id": "12345", "file_type": "pdf", "file_size": "5MB", "file_content": "base64 encoded file data"}, "expected": {"outcome": "Report upload failed", "status": "Rejected"}}]}, {"usecase": {"name": "View Deciphered Blood Test Results", "scenario": "A user views the deciphered results of their blood test report on the HSLA platform.", "actors": "User", "preconditions": "User must have uploaded a laboratory blood test report and be logged in to their HSLA account", "steps": ["User navigates to the section for viewing deciphered blood test results", "User selects the previously uploaded blood test report", "The system displays the easy-to-understand explanations and recommendations based on the deciphered results"]}, "testcases": [{"name": "Valid Blood Test Results Viewing", "description": "Verify that the user can successfully view deciphered blood test results.", "input": {"reportID": "12345", "userLoggedIn": true}, "expected": {"outcome": "Deciphered results displayed", "recommendationsProvided": true}}, {"name": "Invalid Blood Test Results Viewing - No Report Selected", "description": "Verify the system behavior when the user tries to view results without selecting a report.", "input": {"reportID": "", "userLoggedIn": true}, "expected": {"outcome": "Deciphered results not displayed", "recommendationsProvided": false}}, {"name": "Invalid Blood Test Results Viewing - User Not Logged In", "description": "Verify the system response when a user tries to view results without being logged in.", "input": {"reportID": "54321", "userLoggedIn": false}, "expected": {"outcome": "Deciphered results not displayed", "recommendationsProvided": false}}]}, {"usecase": {"name": "Access Personalized Recommendations", "scenario": "A user accesses personalized recommendations based on their blood test results for aspects such as diet, exercise, stress management, and health risks.", "actors": "User", "preconditions": "User must have uploaded a laboratory blood test report and viewed deciphered results", "steps": ["User navigates to the personalized recommendations section of the HSLA platform", "The system generates tailored advice based on the deciphered blood test results, including diet, exercise, stress management, and health risk mitigation", "The user reviews the personalized recommendations"]}, "testcases": [{"name": "Valid Blood Test Recommendations", "description": "Verify that the system generates personalized recommendations based on valid blood test results.", "input": {"bloodTestReport": "uploaded_report.pdf", "decipheredResultsViewed": true}, "expected": {"outcome": "Tailored recommendations displayed", "status": "Review personalized recommendations"}}, {"name": "No Deciphered Results Viewed", "description": "Verify that the system does not generate recommendations if deciphered results have not been viewed.", "input": {"bloodTestReport": "uploaded_report.pdf", "decipheredResultsViewed": false}, "expected": {"outcome": "No recommendations generated", "status": "Prompt user to view deciphered results"}}]}, {"usecase": {"name": "Ensure Data Confidentiality and Security", "scenario": "Users ensure that their laboratory blood test data is handled with utmost confidentiality and security on the HSLA platform.", "actors": "User", "preconditions": "User must have uploaded a laboratory blood test report", "steps": ["User reviews the data privacy and security policy of HSLA", "The system provides information regarding the measures taken to secure and protect user data", "The user acknowledges and confirms their understanding of the data confidentiality and security measures"]}, "testcases": [{"name": "Review Data Privacy Policy", "description": "Verify that the user can review the data privacy and security policy of HSLA", "input": "User", "expected": "User can access and review the data privacy and security policy"}, {"name": "System Provides Security Information", "description": "Verify that the system provides information on security measures for user data protection", "input": "User", "expected": "System provides detailed information on security measures"}, {"name": "User Acknowledges Data Confidentiality Measures", "description": "Verify that the user can acknowledge and confirm their understanding of data confidentiality and security measures", "input": "User", "expected": "User acknowledges and confirms understanding of data confidentiality and security measures"}]}, {"usecase": {"name": "Empowerment with Evidence-Based Health Information", "scenario": "Users access evidence-based health information on the HSLA platform to make informed decisions for a healthier life.", "actors": "User", "preconditions": "User must be logged in to their HSLA account", "steps": ["User navigates to the evidence-based health information section of the platform", "The system presents scientifically backed health insights, tips, and articles", "The user explores the evidence-based information to gain knowledge for making informed health decisions"]}, "testcases": [{"name": "User views evidence-based health information", "description": "Verify that the user can view evidence-based health information after navigating to the appropriate section", "input": {"user_id": "12345", "section": "evidence-based health information"}, "expected": {"outcome": "health insights, tips, and articles displayed", "status": "success"}}]}, {"usecase": {"name": "Upload Document", "scenario": "User uploads a PDF document to the app's database for future querying.", "actors": "User", "preconditions": "User must be logged into the app and have a PDF document ready for upload.", "steps": ["User navigates to the 'Upload Document' tab within the app.", "User selects the option to upload a document.", "User chooses the PDF file from their device and uploads it to the app's database.", "The system securely stores the document in the database, associating it with the user's account."]}, "testcases": [{"name": "Valid Document Upload", "description": "Verify that a user can successfully upload a PDF document to the app's database.", "input": {"userID": "12345", "documentFile": "sample_document.pdf"}, "expected": {"outcome": "Document upload successful", "status": "Success", "documentID": "67890"}}, {"name": "Missing Document File", "description": "Verify that the system handles the case where a user tries to upload without selecting a PDF document.", "input": {"userID": "12345", "documentFile": null}, "expected": {"outcome": "Document upload failed", "status": "Failed", "reason": "No document file selected"}}, {"name": "Unauthorized Document Upload", "description": "Verify that the system restricts document upload if the user is not logged in.", "input": {"userID": null, "documentFile": "sample_document.pdf"}, "expected": {"outcome": "Document upload failed", "status": "Failed", "reason": "User not logged in"}}]}, {"usecase": {"name": "Query Knowledge Base", "scenario": "User engages in conversation with the GPT language model to obtain insights from a specific document.", "actors": "User", "preconditions": "User must have uploaded documents in the app's database and be logged into the app.", "steps": ["User navigates to the 'Query Knowledge Base' tab within the app.", "User selects a specific document from the database for querying.", "User formulates a question or request for information based on the selected document.", "The system utilizes the GPT language model to provide insightful answers and information based on the query.", "The system displays the responses from the GPT language model for the user's review."]}, "testcases": [{"name": "Valid Document Selection and Query", "description": "Verify that the user can successfully select a specific document and formulate a valid question for querying.", "input": {"documentId": "doc123", "question": "What are the key insights from this document regarding renewable energy?"}, "expected": {"outcome": "Insightful response provided", "reviewRequired": true}}, {"name": "Invalid Document Selection", "description": "Verify that the system handles the case where the user selects an invalid or non-existent document for querying.", "input": {"documentId": "invalidDoc", "question": "What insights can you provide from this document?"}, "expected": {"outcome": "No insights available", "reviewRequired": false}}, {"name": "Missing Question", "description": "Verify that the system handles the case where the user fails to formulate a question for querying.", "input": {"documentId": "doc456", "question": ""}, "expected": {"outcome": "No question specified", "reviewRequired": false}}]}, {"usecase": {"name": "Query Website", "scenario": "User extracts information from a website using the app and gains insights about a company.", "actors": "User", "preconditions": "User must be logged into the app and have a website URL for querying.", "steps": ["User navigates to the 'Query Website' tab within the app.", "User inputs the website URL of the company for which information is required.", "The app automatically retrieves relevant details about the company, including general information, financial records, and a detailed financial analysis.", "The system presents the extracted information and analysis to the user for review and analysis."]}, "testcases": [{"name": "Successful Navigation to Query Website Tab", "description": "Verify that the user can successfully navigate to the 'Query Website' tab within the app.", "input": {}, "expected": {"outcome": "User is directed to the 'Query Website' tab", "status": "Successful"}}, {"name": "Retrieve Information for Valid Website URL", "description": "Verify that the app retrieves relevant details about the company when provided with a valid website URL.", "input": {"websiteURL": "https://www.examplecompany.com"}, "expected": {"outcome": "App retrieves general information, financial records, and detailed financial analysis", "status": "Successful"}}, {"name": "Display Error for Invalid Website URL", "description": "Verify that the app displays an error message when provided with an invalid website URL.", "input": {"websiteURL": "invalid-url"}, "expected": {"outcome": "Error message displayed for invalid website URL", "status": "Successful"}}, {"name": "Present Extracted Information to User", "description": "Verify that the system presents the extracted information and analysis to the user for review and analysis.", "input": {}, "expected": {"outcome": "Extracted information and analysis presented to the user", "status": "Successful"}}]}, {"usecase": {"name": "Monitor Students' Arrival by Bus", "scenario": "A teacher uses the Little Lighthouse system to monitor the arrival of students by bus.", "actors": "Teacher", "preconditions": "The school bus is equipped with a tracking device that integrates with the Little Lighthouse system.", "steps": ["Teacher logs into the Little Lighthouse system.", "Teacher selects the 'Bus Arrival Monitoring' option.", "The system displays the real-time location and status of the school bus.", "Teacher verifies the arrival of students by bus using the information provided."]}, "testcases": [{"name": "Valid Bus Arrival Monitoring", "description": "Verify that the teacher can successfully monitor the arrival of students by bus using the Little Lighthouse system.", "input": {"optionSelected": "Bus Arrival Monitoring"}, "expected": {"outcome": "Real-time location and status of the school bus displayed for teacher to verify student arrival"}}, {"name": "Invalid Bus Arrival Monitoring", "description": "Verify that the teacher cannot monitor the bus arrival without logging into the system.", "input": {"optionSelected": ""}, "expected": {"outcome": "Bus arrival monitoring not accessible", "reason": "Missing required information: option not selected"}}]}, {"usecase": {"name": "Track Students During Walk/Excursion", "scenario": "Teachers use the Little Lighthouse system to track students during a walk or excursion.", "actors": "Teacher", "preconditions": "The students are equipped with tracking devices and the excursion route is predefined in the system.", "steps": ["Teacher accesses the Little Lighthouse system.", "Teacher selects the 'Walk/Excursion Tracking' feature.", "The system displays the real-time location of the students along the predefined route.", "Teacher monitors the movement of students during the walk/excursion."]}, "testcases": [{"name": "Valid Excursion Tracking", "description": "Verify that the teacher can track students' real-time location during a walk or excursion.", "input": {"route": "Forest Trail"}, "expected": {"outcome": "Real-time locations of students displayed along the Forest Trail route", "status": "Success"}}, {"name": "Predefined Route Validation", "description": "Verify that the system only displays the real-time location of students along the predefined route.", "input": {"route": "City Center"}, "expected": {"outcome": "System does not display location, reason: students not along the predefined route", "status": "Failed"}}]}, {"usecase": {"name": "Monitor Students' Off-school Departure", "scenario": "Teachers use the Little Lighthouse system to monitor students leaving school premises.", "actors": "Teacher", "preconditions": "The students' departure time and departure location are integrated into the Little Lighthouse system.", "steps": ["Teacher logs into the Little Lighthouse system.", "Teacher selects the 'Off-school Departure Monitoring' option.", "The system displays the departure status and location of the students.", "Teacher ensures the safe departure of students from school to their respective locations."]}, "testcases": [{"name": "Monitor Off-school Departure", "description": "Teacher monitors the departure status and location of students.", "input": {}, "expected": {"outcome": "Departure status and location of students displayed", "safety_check": "Teacher ensures safe departure of students"}}]}, {"usecase": {"name": "Provide Real-time Student Status to Caregivers", "scenario": "The Little Lighthouse system provides real-time updates on students' whereabouts to the caregivers/parents.", "actors": "System", "preconditions": "Caregivers/parents have authorized access to the Little Lighthouse system or receive notifications from the system.", "steps": ["System continuously updates and tracks the location/status of the students.", "System sends real-time notifications or provides access to caregivers/parents to view the students' whereabouts.", "Caregivers/parents receive and review the real-time updates on students' movements and location."]}, "testcases": [{"name": "Authorized Access", "description": "Caregivers/parents with authorized access receive real-time updates on students' whereabouts", "input": {"caregiver": "parent123", "accessType": "authorized"}, "expected": {"outcome": "Real-time updates on student's location provided", "status": "Success"}}, {"name": "Unauthorized Access", "description": "Caregivers/parents without authorized access do not receive real-time updates on students' whereabouts", "input": {"caregiver": "parent456", "accessType": "unauthorized"}, "expected": {"outcome": "No real-time updates on student's location provided", "status": "Failed"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers an account on the loan accessing app.", "actors": "New User", "preconditions": "User does not already have an account on the app", "steps": ["New User navigates to the registration page of the app", "New User fills in necessary registration details", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account with valid details.", "input": {"username": "newuser123", "email": "newuser123@example.com", "password": "SecurePass123", "dob": "1990-05-15", "address": "123 Main Street, City, Country"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Invalid Email", "description": "Verify that the system rejects registration with an invalid email format.", "input": {"username": "testuser", "email": "invalidemail", "password": "Password123", "dob": "1985-10-20", "address": "456 First Avenue, City, Country"}, "expected": {"outcome": "Registration failed", "status": "Invalid email format"}}, {"name": "Unsuccessful Registration - Underage User", "description": "Verify that the system rejects registration for users under the age of 18.", "input": {"username": "underageuser", "email": "underage@example.com", "password": "SecretPwd789", "dob": "2010-07-25", "address": "789 Elm Street, City, Country"}, "expected": {"outcome": "Registration failed", "status": "User must be at least 18 years old to register"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account on the loan accessing app.", "actors": "Registered User", "preconditions": "User must have a registered account", "steps": ["Registered User navigates to the login page of the app", "Registered User enters their login credentials", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Valid Login", "description": "Verify that a registered user successfully logs into the app with correct credentials", "input": {"username": "john_doe@example.com", "password": "P@ssw0rd123"}, "expected": {"outcome": "Access granted to user account", "status": "Login successful"}}, {"name": "Invalid Login - Incorrect Password", "description": "Verify that a registered user does not log in with incorrect password", "input": {"username": "jane_smith@example.com", "password": "wrongpassword"}, "expected": {"outcome": "Access denied to user account", "status": "Login failed"}}, {"name": "Invalid Login - Non-existent User", "description": "Verify that a non-existent user cannot log in to the app", "input": {"username": "nonexistentuser@example.com", "password": "randompassword"}, "expected": {"outcome": "Access denied to user account", "status": "Login failed"}}]}, {"usecase": {"name": "Apply for a Loan", "scenario": "A user applies for a loan using the app.", "actors": "User", "preconditions": "User must be logged in and eligible to apply for a loan", "steps": ["User navigates to the loan application section in the app", "User enters the required details for the loan application", "User submits the loan application form", "The system processes the application and performs initial eligibility checks", "The system confirms the submission and provides a reference number for the application"]}, "testcases": [{"name": "Valid Loan Application Submission", "description": "Verify that a user can successfully submit a loan application with all required details", "input": {"loanDetails": {"amountRequested": 10000, "purpose": "Home renovation", "incomeSources": ["Salary", "Investments"], "creditScore": 750}}, "expected": {"outcome": "Loan application submitted successfully", "referenceNumber": "APP2022001"}}, {"name": "Empty Loan Application Submission", "description": "Verify that the system handles the case where the user tries to submit a loan application without entering any details", "input": {"loanDetails": {"amountRequested": null, "purpose": "", "incomeSources": [], "creditScore": null}}, "expected": {"outcome": "Loan application failed", "status": "Empty loan details"}}, {"name": "Loan Application with Low Credit Score", "description": "Verify that the system rejects the loan application if the user's credit score is below the minimum threshold", "input": {"loanDetails": {"amountRequested": 15000, "purpose": "Debt consolidation", "incomeSources": ["Salary"], "creditScore": 600}}, "expected": {"outcome": "Loan application rejected", "status": "Low credit score"}}]}, {"usecase": {"name": "Loan Approval Process", "scenario": "The loan approval process is initiated for a submitted loan application.", "actors": "Loan Officer, System", "preconditions": "A loan application must have been submitted", "steps": ["Loan Officer accesses the pending loan applications", "Loan Officer reviews the details and credit history of the applicant", "System performs advanced eligibility checks using AI and ML technologies", "Loan Officer approves or rejects the loan application based on the assessment", "The system updates the application status and notifies the user about the decision"]}, "testcases": [{"name": "Successful Loan Approval", "description": "Verify that a loan officer can approve a loan application when all criteria are met", "input": {"loan_id": 1001, "creditScore": 750, "income": 50000}, "expected": {"outcome": "Loan application approved successfully", "status": "Approved"}}, {"name": "Loan Rejection due to Low Credit Score", "description": "Verify that the loan officer rejects a loan application with a low credit score", "input": {"loan_id": 1002, "creditScore": 580, "income": 60000}, "expected": {"outcome": "Loan application rejected due to low credit score", "status": "Rejected"}}, {"name": "Loan Rejection due to Insufficient Income", "description": "Verify that the loan officer rejects a loan application with insufficient income", "input": {"loan_id": 1003, "creditScore": 680, "income": 20000}, "expected": {"outcome": "Loan application rejected due to insufficient income", "status": "Rejected"}}, {"name": "Invalid Loan Approval Process", "description": "Verify that the system rejects approval process when required information is missing", "input": {"loan_id": 1004, "creditScore": null, "income": 55000}, "expected": {"outcome": "Loan approval process failed due to incomplete information", "status": "Failed"}}]}, {"usecase": {"name": "Loan Repayment Management", "scenario": "A user manages their loan repayment through the app.", "actors": "User", "preconditions": "User must have an approved loan", "steps": ["User accesses the loan repayment section in the app", "User views the loan details including outstanding amount and repayment schedule", "User makes a repayment using the app's payment gateway", "The system updates the repayment status and outstanding balance"]}, "testcases": [{"name": "Successful Loan Repayment", "description": "Verify that a user can successfully make a loan repayment through the app.", "input": {"loanID": "12345", "repaymentAmount": 500, "paymentMethod": "Credit Card"}, "expected": {"outcome": "Repayment successful", "status": "Completed"}}, {"name": "Loan Repayment with Insufficient Balance", "description": "Test the scenario where a user attempts to make a loan repayment with an insufficient balance in the account.", "input": {"loanID": "12345", "repaymentAmount": 1000, "paymentMethod": "Bank Transfer"}, "expected": {"outcome": "Repayment failed", "reason": "Insufficient account balance", "status": "Failed"}}, {"name": "View Loan Details with No Approved Loan", "description": "Verify that the app correctly handles the scenario where a user without an approved loan tries to view loan details.", "input": {"loanID": "null"}, "expected": {"outcome": "No approved loan found"}}]}, {"usecase": {"name": "Customer Support", "scenario": "A user seeks customer support regarding their loan or application.", "actors": "User, Customer Support Agent", "preconditions": "User may have an ongoing loan application or an approved loan", "steps": ["User navigates to the customer support section in the app", "User initiates a support request or query", "Customer Support Agent receives the request and provides assistance", "The system logs the support interaction for reference and resolution tracking"]}, "testcases": [{"name": "User Initiate Support Request", "description": "Verify that a user can successfully initiate a support request regarding their ongoing loan application or approved loan.", "input": {"requestType": "Query", "loanStatus": "Ongoing"}, "expected": {"outcome": "Support request initiated successfully", "resolutionTime": "Within 24 hours"}}, {"name": "User Support Request Without Ongoing Loan", "description": "Test the system's behavior when a user without an ongoing loan tries to initiate a support request.", "input": {"requestType": "Query", "loanStatus": "None"}, "expected": {"outcome": "Support request failed", "reason": "No ongoing loan found"}}, {"name": "Customer Support Agent Assistance", "description": "Validate that the customer support agent can provide effective assistance in response to the user's support request.", "input": {"query": "Loan application status inquiry"}, "expected": {"outcome": "Adequate assistance provided", "resolutionTime": "Depends on query complexity"}}, {"name": "Logging Support Interaction", "description": "Ensure that the system correctly logs the support interaction for future reference and resolution tracking.", "input": {"interactionType": "Query", "logCategory": "Loan Support"}, "expected": {"outcome": "Support interaction logged successfully", "availability": "For future reference and resolution tracking"}}]}, {"usecase": {"name": "User Initiated Personalized Meditation Session", "scenario": "User initiates a personalized guided meditation session with the UiPath App.", "actors": "User, UiPath App", "preconditions": "User has access to the UiPath App and wants to engage in a personalized guided meditation", "steps": ["User opens the UiPath App", "User selects or types the context for the meditation session", "UiPath App processes the context input", "The App triggers the Attended Robot to generate a personalized guided meditation using generative AI", "The meditation session is launched for the user"]}, "testcases": [{"name": "Valid Meditation Session Initiation", "description": "Verify that the user can successfully initiate a personalized guided meditation session.", "input": {"context": "Relaxation and stress relief", "triggeredRobot": "Attended Robot"}, "expected": {"outcome": "Meditation session initiated successfully", "sessionStatus": "Ongoing"}}, {"name": "Context Input Processing", "description": "Verify the processing of user-input context for the meditation session.", "input": {"context": "Mindfulness and focus"}, "expected": {"outcome": "Context processed successfully", "processingTime": "<= 5 seconds"}}, {"name": "Meditation Session with Invalid Context", "description": "Verify the behavior when the user provides an invalid context for the meditation session.", "input": {"context": "Invalid_context_123"}, "expected": {"outcome": "Invalid context handled properly", "errorDisplayed": true}}]}, {"usecase": {"name": "Generation of Personalized Guided Meditation", "scenario": "The Attended Robot generates a unique guided meditation experience personalized to the user's needs", "actors": "Attended Robot, Generative AI", "preconditions": "The UiPath App has received the user's context for the meditation session", "steps": ["The Attended Robot receives the parameters and context for the meditation session", "Generative AI utilizes prompt-engineering to generate the guided meditation in real-time", "The personalized guided meditation is created based on the user's needs and context", "The meditation session is launched for the user"]}, "testcases": [{"name": "Valid Meditation Generation", "description": "Verify that a personalized guided meditation is successfully generated based on the user's context and needs", "input": {"userContext": {"mood": "relaxation", "timeAvailable": "20 minutes", "preferredEnvironment": "calm and peaceful"}, "parameters": {"ambientSound": "nature sounds", "meditationStyle": "mindfulness"}}, "expected": {"outcome": "Personalized guided meditation generated", "status": "Meditation ready for launch"}}, {"name": "Invalid User Context", "description": "Verify that the system handles the case where the user context for the meditation session is invalid or incomplete", "input": {"userContext": {"mood": "stressful", "preferredEnvironment": "loud and busy"}, "parameters": {"ambientSound": "city sounds", "meditationStyle": "transcendental"}}, "expected": {"outcome": "Unable to generate personalized meditation", "status": "Insufficient user context"}}]}, {"usecase": {"name": "Delivery of Meditation Service via UiPath Apps", "scenario": "UiPath Apps deliver the personalized guided meditation service to the user", "actors": "UiPath Apps", "preconditions": "The personalized guided meditation session has been generated and is ready for delivery", "steps": ["UiPath Apps receive the generated personalized guided meditation", "The guided meditation is delivered to the user via the UiPath Apps interface"]}, "testcases": [{"name": "Valid Meditation Delivery", "description": "Verify that the personalized guided meditation service is successfully delivered to the user through UiPath Apps", "input": {"meditationSession": "session001", "user": "username123"}, "expected": {"outcome": "User receives the personalized guided meditation", "status": "Delivery successful"}}]}, {"usecase": {"name": "Immediate Relief from 1-Minute Meditation Session", "scenario": "User experiences immediate effect and/or relief after a 1-minute personalized guided meditation session", "actors": "User", "preconditions": "User has engaged in a 1-minute personalized guided meditation session", "steps": ["User completes the 1-minute meditation session", "User experiences immediate effect and/or relief from the session"]}, "testcases": [{"name": "Positive Experience Verification", "description": "Verify that a user experiences immediate relief after completing a 1-minute personalized guided meditation session.", "input": {"meditation_duration": "1 minute", "session_type": "guided"}, "expected": {"outcome": "User experiences immediate relief", "status": "Success"}}, {"name": "No Relief Experienced", "description": "Verify the system's response when a user does not experience immediate relief after completing a 1-minute personalized guided meditation session.", "input": {"meditation_duration": "1 minute", "session_type": "guided"}, "expected": {"outcome": "User does not experience immediate relief", "status": "Success"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers an account in the Portfolio Manager application.", "actors": "New User", "preconditions": "User does not already have an account in the application", "steps": ["New User navigates to the registration page of the Portfolio Manager application", "New User fills in the required registration details", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account or rejects the registration if details are invalid or already in use"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account with unique and valid details.", "input": {"username": "NewUser123", "email": "newuser123@example.com", "password": "SecurePassword123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Duplicate Email", "description": "Verify that the system prevents registration with an email address that is already in use.", "input": {"username": "AnotherUser", "email": "existingemail@example.com", "password": "AnotherSecurePassword456"}, "expected": {"outcome": "Registration failed", "status": "Email already in use"}}, {"name": "Unsuccessful Registration - Invalid Details", "description": "Verify that the system rejects registration when invalid details are provided.", "input": {"username": "InvalidUser", "email": "invalidemail@example.com", "password": "weak"}, "expected": {"outcome": "Registration failed", "status": "Invalid details provided"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in the Portfolio Manager application.", "actors": "Registered User", "preconditions": "User must have a registered account and know their login credentials", "steps": ["Registered User navigates to the login page of the Portfolio Manager application", "Registered User enters their login credentials", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "RegisteredUser", "password": "CorrectPassword"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "RegisteredUser", "password": "WrongPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "NonexistentUser", "password": "AnyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}]}, {"usecase": {"name": "Plan Investments", "scenario": "User plans their investments using the Portfolio Manager application.", "actors": "User", "preconditions": "User must be logged in and have access to the investment planning feature", "steps": ["User selects the investment planning option", "User enters prerequisite details such as risk appetite, investment amount, and investment duration", "The system processes the provided details", "The system creates a personalized investment portfolio based on the user's input", "The system integrates with Open AI to enhance the investment portfolio"]}, "testcases": [{"name": "Valid Investment Plan", "description": "Verify that a user can successfully plan their investments using the provided details.", "input": {"riskAppetite": "High", "investmentAmount": 50000, "investmentDuration": 5}, "expected": {"outcome": "Personalized investment portfolio created successfully", "integrationWithOpenAI": true}}, {"name": "Negative Investment Amount", "description": "Verify that the system handles the case where the user enters a negative investment amount.", "input": {"riskAppetite": "Low", "investmentAmount": -10000, "investmentDuration": 3}, "expected": {"outcome": "Investment planning unsuccessful", "integrationWithOpenAI": false}}, {"name": "Missing Risk Appetite", "description": "Verify that the system handles the case where the user tries to plan investments without specifying the risk appetite.", "input": {"investmentAmount": 75000, "investmentDuration": 10}, "expected": {"outcome": "Investment planning unsuccessful", "integrationWithOpenAI": false}}]}, {"usecase": {"name": "Edit Portfolio", "scenario": "User modifies their personalized portfolio in the Portfolio Manager application.", "actors": "User", "preconditions": "User must have a personalized portfolio created", "steps": ["User accesses their personalized portfolio", "User selects the option to edit the portfolio", "User makes the necessary modifications to the portfolio", "The system updates the personalized portfolio based on the user's modifications", "The system re-evaluates the portfolio using Open AI integration"]}, "testcases": [{"name": "Valid Portfolio Edit", "description": "Verify that the user can successfully modify their personalized portfolio in the Portfolio Manager application.", "input": {"portfolioID": "abc123", "modifications": {"add": ["Stock A", "Cryptocurrency B"], "remove": ["Bond X"]}}, "expected": {"outcome": "Portfolio updated successfully", "status": "Updated"}}, {"name": "Empty Portfolio Modification", "description": "Verify that the system handles the case where the user tries to submit an empty modification to the portfolio.", "input": {"portfolioID": "def456", "modifications": {"add": [], "remove": []}}, "expected": {"outcome": "No changes made to the portfolio", "status": "Unchanged"}}, {"name": "Unauthorized Portfolio Access", "description": "Verify that the system restricts access to the portfolio if the user is not authorized to edit.", "input": {"portfolioID": "xyz789", "modifications": {"add": ["Stock C"], "remove": ["Cryptocurrency Y"]}}, "expected": {"outcome": "Unauthorized access to the portfolio", "status": "Access Denied"}}]}, {"usecase": {"name": "View Risk Analysis", "scenario": "User views the risk analysis of their personalized portfolio in the Portfolio Manager application.", "actors": "User", "preconditions": "User must have a personalized portfolio created", "steps": ["User navigates to the risk analysis section of their personalized portfolio", "The system calculates and displays the risk analysis of the portfolio based on various factors", "User reviews the risk analysis to understand the risk associated with their investments"]}, "testcases": [{"name": "View Risk Analysis - Existing Portfolio", "description": "Verify that the user can view the risk analysis of their existing personalized portfolio.", "input": {"portfolioStatus": "Existing"}, "expected": {"outcome": "Risk analysis displayed successfully", "status": "Viewed"}}, {"name": "View Risk Analysis - No Personalized Portfolio", "description": "Verify that the system prevents users without a personalized portfolio from accessing the risk analysis section.", "input": {"portfolioStatus": "None"}, "expected": {"outcome": "Access to risk analysis denied", "status": "UnauthorizedAccess"}}]}, {"usecase": {"name": "Ambulance Registration", "scenario": "An ambulance service registers for the HyperHack-2023 - Rapid Response system.", "actors": "Ambulance Service", "preconditions": "The ambulance service has not yet registered with the system.", "steps": ["Ambulance service navigates to the registration page of the system.", "Ambulance service fills in the required registration details (e.g., service name, contact information).", "Ambulance service submits the registration form.", "The system validates the provided details.", "The system creates a new account for the ambulance service."]}, "testcases": [{"name": "valid ambulance registration", "description": "Ambulance service provides all required registration details", "input": {"serviceName": "ABC Ambulance", "contactInfo": "123-456-7890"}, "expected": {"outcome": "registration successful", "accountCreated": true}}, {"name": "missing ambulance registration details", "description": "Ambulance service fails to provide all required registration details", "input": {"serviceName": "PQR Ambulance"}, "expected": {"outcome": "registration failed", "accountCreated": false}}]}, {"usecase": {"name": "Ambulance Login", "scenario": "Registered ambulance service securely logs into their account in the HyperHack-2023 - Rapid Response system.", "actors": "Ambulance Service", "preconditions": "Ambulance service must have a registered account and know their login credentials.", "steps": ["Ambulance service navigates to the login page of the system.", "Ambulance service enters their login credentials (e.g., username, password).", "Ambulance service submits the login form.", "The system validates the login credentials.", "The system grants access to the ambulance service account."]}, "testcases": [{"name": "Valid login credentials", "description": "Ambulance service provides correct login credentials", "input": {"username": "ambulance@example.com", "password": "Ambulance#123"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Invalid login credentials - incorrect username", "description": "Ambulance service provides incorrect username", "input": {"username": "invalidambulance@example.com", "password": "Ambulance#123"}, "expected": {"outcome": "Login failed", "status": "Access denied"}}, {"name": "Invalid login credentials - incorrect password", "description": "Ambulance service provides incorrect password", "input": {"username": "ambulance@example.com", "password": "InvalidPassword"}, "expected": {"outcome": "Login failed", "status": "Access denied"}}]}, {"usecase": {"name": "Emergency Call Handling", "scenario": "An emergency call is received and handled by the HyperHack-2023 - Rapid Response system.", "actors": "Dispatch Center, Ambulance Service, Hospital", "preconditions": "An emergency call is made to the dispatch center or routed directly to the system.", "steps": ["Dispatch center receives the emergency call and enters the details into the system.", "The system identifies the nearest available ambulance service and notifies them about the emergency.", "Ambulance service acknowledges the call and proceeds to the emergency location.", "The system alerts the relevant hospital based on the patient's needs and location.", "The hospital confirms the availability of specialist or bed, and the system relays this information to the ambulance service.", "If the hospital is not suitable, the system identifies the next nearest available hospital and repeats the process."]}, "testcases": [{"name": "Valid Emergency Call Handling", "description": "Verify that the emergency call is successfully handled by the system.", "input": {"emergency_call_details": {"location": "123, ABC Street", "type": "accident", "patient_condition": "unconscious"}, "ambulance_service": {"available": true, "location": "Nearby"}, "hospital": {"location": "General Hospital", "specialist_available": true, "bed_available": true}}, "expected": {"outcome": "Emergency call successfully handled and patient attended to", "status": "Success"}}, {"name": "Emergency Call Handling - No Ambulance Available", "description": "Verify the handling when no ambulance service is available.", "input": {"emergency_call_details": {"location": "500, XYZ Avenue", "type": "heart attack", "patient_condition": "conscious"}, "ambulance_service": {"available": false}}, "expected": {"outcome": "No ambulance available for the emergency call", "status": "Failed"}}, {"name": "Emergency Call Handling - Hospital Full", "description": "Verify the handling when the hospital is full and specialist is not available.", "input": {"emergency_call_details": {"location": "789, CDE Boulevard", "type": "injury", "patient_condition": "stable"}, "ambulance_service": {"available": true}, "hospital": {"location": "City Medical Center", "specialist_available": false, "bed_available": false}}, "expected": {"outcome": "Hospital full, no suitable hospital available at the moment", "status": "Failed"}}]}, {"usecase": {"name": "Real-Time Traffic Monitoring", "scenario": "The system monitors live traffic conditions to optimize ambulance routing.", "actors": "System, Ambulance Service", "preconditions": "An ambulance has been dispatched for an emergency.", "steps": ["The system continuously monitors live traffic conditions using the Bing Maps API.", "The system calculates the most optimal route for the ambulance to reach the designated hospital based on the real-time traffic data.", "The system provides ongoing updates to the ambulance service about traffic conditions and suggests alternative routes if necessary."]}, "testcases": [{"name": "Optimal Route Calculation", "description": "Verify that the system accurately calculates the most optimal route for the ambulance based on real-time traffic data.", "input": {"ambulanceLocation": "Latitude: 40.730610, Longitude: -73.935242", "hospitalLocation": "Latitude: 40.712776, Longitude: -74.005974"}, "expected": {"outcome": "System provides the most optimal route considering live traffic data", "status": "Success"}}, {"name": "Traffic Updates", "description": "Verify that the system provides ongoing updates to the ambulance service about current traffic conditions.", "input": {"ambulanceRouteId": "AMB1234"}, "expected": {"outcome": "Ambulance service receives continuous traffic updates", "status": "Success"}}, {"name": "Alternative Route Suggestion", "description": "Verify that the system suggests alternative routes to the ambulance service when necessary based on the real-time traffic data.", "input": {"currentRoute": "Route ID: RT123", "trafficCongestionLevel": "High"}, "expected": {"outcome": "System suggests an alternative route considering high traffic congestion", "status": "Success"}}]}, {"usecase": {"name": "Communication with Hospital", "scenario": "Paramedics communicate vital updates on the patient's condition en route to the hospital.", "actors": "Paramedics, Hospital", "preconditions": "An ambulance is en route to the hospital for an emergency.", "steps": ["Paramedics use the UiPath Apps application to communicate directly with the hospital.", "Paramedics provide vital updates on the patient's condition using the application.", "The hospital receives and acknowledges the updates, preparing for the patient's arrival and treatment."]}, "testcases": [{"name": "Successful communication with hospital", "description": "Paramedics effectively communicate patient's vital updates to the hospital en route", "input": {"paramedics_id": "PM123", "hospital_id": "HOSP456", "patient_condition": "Stable, vitals normal", "location": "Coordinates: [x,y]"}, "expected": {"outcome": "Hospital receives and acknowledges the updates", "status": "Successful"}}, {"name": "Unsuccessful communication with hospital - No hospital response", "description": "Paramedics send patient updates but do not receive acknowledgment from the hospital", "input": {"paramedics_id": "PM123", "hospital_id": "HOSP456", "patient_condition": "Critical, vitals unstable", "location": "Coordinates: [x,y]"}, "expected": {"outcome": "No response from the hospital", "status": "Failed"}}]}, {"usecase": {"name": "Predictive Analysis using Machine Learning", "scenario": "The system utilizes patient vitals to implement predictive analysis using Machine Learning.", "actors": "System, Ambulance Service", "preconditions": "Vital information about the patient is available.", "steps": ["The system collects and analyzes the patient's vitals using AI Center and Machine Learning algorithms.", "The system provides insights to the ambulance service regarding the patient's condition, aiding in timely diagnosis and preparation for potential critical conditions during transit."]}, "testcases": [{"name": "Valid vitals for predictive analysis", "description": "Verify that the system successfully collects and analyzes the patient's vitals using AI Center and Machine Learning algorithms.", "input": {"vital_information": "heart rate: 75bpm, blood pressure: 120/80 mmHg, temperature: 98.6\u00b0F"}, "expected": {"outcome": "Predictive analysis completed", "status": "Insights provided to ambulance service"}}, {"name": "No vitals available for analysis", "description": "Verify that the system handles the scenario where no vital information about the patient is available for analysis.", "input": {"vital_information": "N/A"}, "expected": {"outcome": "Unable to perform predictive analysis", "status": "No insights provided to ambulance service"}}, {"name": "Outdated or inaccurate vitals", "description": "Verify that the system handles outdated or inaccurate vitals for predictive analysis.", "input": {"vital_information": "heart rate: 200bpm, blood pressure: 80/20 mmHg, temperature: 95\u00b0F"}, "expected": {"outcome": "Unable to perform accurate predictive analysis", "status": "Cautionary insights provided to ambulance service"}}]}, {"usecase": {"name": "Volunteer Registration", "scenario": "A new volunteer registers an account on RefugeeConnect", "actors": "New Volunteer", "preconditions": "Volunteer does not already have an account on RefugeeConnect", "steps": ["New Volunteer navigates to the registration page of RefugeeConnect", "New Volunteer fills in the required registration details (e.g., name, contact information, location)", "New Volunteer submits the registration form", "The system validates the provided details", "The system creates a new volunteer account"]}, "testcases": [{"name": "Successful Volunteer Registration", "description": "Verify that a new volunteer can successfully register for an account with valid details.", "input": {"name": "John Doe", "contactInformation": "johndoe@example.com", "location": "New York"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Volunteer Registration - Incomplete Details", "description": "Verify that the system rejects registration with incomplete details.", "input": {"name": "Alice Smith", "contactInformation": "", "location": "Los Angeles"}, "expected": {"outcome": "Registration failed", "status": "Invalid details"}}, {"name": "Unsuccessful Volunteer Registration - Invalid Location", "description": "Verify that the system rejects registration with an invalid location.", "input": {"name": "Bob Johnson", "contactInformation": "bj@example.com", "location": "Mars"}, "expected": {"outcome": "Registration failed", "status": "Invalid location"}}]}, {"usecase": {"name": "Refugee Search for Volunteers", "scenario": "Refugees search for registered volunteers on RefugeeConnect", "actors": "Refugee", "preconditions": "Refugee must have access to the RefugeeConnect platform", "steps": ["Refugee navigates to the search feature on the RefugeeConnect platform", "Refugee enters criteria for the type of volunteer they are looking for (e.g., location, availability)", "The system processes the search query", "The system displays the list of volunteers matching the search criteria"]}, "testcases": [{"name": "Valid Volunteer Search", "description": "Verify that a refugee can successfully search for registered volunteers based on specific criteria.", "input": {"searchCriteria": {"location": "CityA", "availability": "Weekends"}}, "expected": {"outcome": "List of matching volunteers displayed", "status": "Displayed"}}, {"name": "No Matching Volunteers", "description": "Verify that the system handles the case where no volunteers match the refugee's search criteria.", "input": {"searchCriteria": {"location": "CityB", "availability": "Mondays"}}, "expected": {"outcome": "No matching volunteers found", "status": "Not Displayed"}}, {"name": "Empty Search Criteria", "description": "Verify that the system handles the case where the refugee performs a search with empty criteria.", "input": {"searchCriteria": {}}, "expected": {"outcome": "No search criteria provided", "status": "Failed"}}]}, {"usecase": {"name": "Request Connection with Volunteer", "scenario": "Refugee requests a connection with a registered volunteer", "actors": "Refugee", "preconditions": "Refugee has searched for volunteers and identified a potential match", "steps": ["Refugee views the profile of the volunteer", "Refugee sends a connection request to the volunteer", "The system notifies the volunteer about the connection request", "The system awaits the volunteer's response"]}, "testcases": [{"name": "View Volunteer Profile", "description": "Verify that a refugee can view the profile of a volunteer before sending a connection request", "input": {"refugeeID": "Refugee123", "volunteerID": "Volunteer789"}, "expected": {"outcome": "Volunteer profile viewed", "status": "Profile displayed"}}, {"name": "Send Connection Request", "description": "Verify that a refugee can successfully send a connection request to a volunteer", "input": {"refugeeID": "Refugee123", "volunteerID": "Volunteer789"}, "expected": {"outcome": "Connection request sent", "status": "Request pending"}}, {"name": "Notify Volunteer about Connection Request", "description": "Verify that the system properly notifies the volunteer about the connection request from the refugee", "input": {"notificationType": "connectionRequest", "volunteerID": "Volunteer789"}, "expected": {"outcome": "Volunteer notified about connection request", "status": "Notification sent"}}, {"name": "Handle Volunteer's Response", "description": "Verify that the system properly handles the volunteer's response to the connection request", "input": {"volunteerID": "Volunteer789", "response": "Accept"}, "expected": {"outcome": "Volunteer accepted connection request", "status": "Connected"}}]}, {"usecase": {"name": "Volunteer Accepts Refugee Connection Request", "scenario": "A registered volunteer accepts a connection request from a refugee", "actors": "Volunteer", "preconditions": "Volunteer has received a connection request from a refugee", "steps": ["Volunteer views the connection request from the refugee", "Volunteer accepts the connection request", "The system establishes the connection between the volunteer and the refugee"]}, "testcases": [{"name": "Accept Connection Request", "description": "Verify that a registered volunteer can accept a connection request from a refugee", "input": {"volunteer": "RegisteredVolunteer1", "connectionRequest": "Received"}, "expected": {"outcome": "Connection request accepted", "status": "Connected"}}, {"name": "View Connection Request", "description": "Verify that a volunteer can view the connection request from a refugee", "input": {"volunteer": "RegisteredVolunteer1", "connectionRequest": "Received"}, "expected": {"outcome": "Connection request viewed", "status": "Pending Acceptance"}}]}, {"usecase": {"name": "Communication between Volunteer and Refugee", "scenario": "Establishing communication between the connected volunteer and refugee", "actors": "Volunteer, Refugee", "preconditions": "Connection between the volunteer and refugee has been established", "steps": ["Volunteer and Refugee exchange contact information through the platform", "Volunteer and Refugee engage in communication to discuss the details of the connection"]}, "testcases": [{"name": "Exchange Contact Information", "description": "Verify that the volunteer and refugee can exchange contact information through the platform", "input": {"volunteerContact": "volunteer@example.com", "refugeeContact": "refugee@example.com"}, "expected": {"outcome": "Contact information exchanged successfully", "status": "Communication enabled"}}, {"name": "Discussion about Connection", "description": "Verify that the volunteer and refugee can discuss the details of the connection", "input": {"message": "Hello, let's discuss how we can proceed with our connection."}, "expected": {"outcome": "Discussion initiated successfully", "status": "Engaged communication"}}]}, {"usecase": {"name": "Refugee Feedback on Volunteer", "scenario": "Refugee provides feedback on the volunteer after the connection experience", "actors": "Refugee", "preconditions": "Connection with the volunteer has been established and the engagement has taken place", "steps": ["Refugee provides a rating and feedback for the volunteer through the RefugeeConnect platform", "The system updates the volunteer's profile with the feedback provided"]}, "testcases": [{"name": "Valid Refugee Feedback", "description": "Verify that a refugee can provide a valid feedback for the volunteer.", "input": {"rating": 4, "feedback": "The volunteer was very supportive and friendly."}, "expected": {"outcome": "Feedback successfully submitted.", "status": "Success"}}, {"name": "Invalid Refugee Feedback (No Rating)", "description": "Verify the case where a refugee tries to submit feedback without providing a rating.", "input": {"rating": null, "feedback": "The volunteer was helpful."}, "expected": {"outcome": "Feedback submission failed - Rating not provided.", "status": "Failed"}}, {"name": "Volunteer Profile Update", "description": "Verify that the system updates the volunteer's profile with the feedback provided by the refugee.", "input": {"feedbackId": 289, "volunteerId": 502}, "expected": {"outcome": "Volunteer's profile successfully updated.", "status": "Success"}}]}, {"usecase": {"name": "Report Emergency Incident", "scenario": "A user reports an emergency incident through the UiPath app.", "actors": ["User", "UiPath app"], "preconditions": "User has the UiPath app installed and has access to the emergency reporting feature.", "steps": ["User opens the UiPath app and navigates to the emergency reporting section.", "User fills in the details of the emergency incident, including location and type of emergency.", "UiPath app uses Machine Learning to classify the emergency scenario.", "If the Machine Learning model successfully classifies the incident, the system proceeds to dispatch the appropriate response unit.", "If the Machine Learning model fails to classify the incident or deems it as non-emergency, the case is pushed to the Action Center for human intervention."]}, "testcases": [{"name": "Successful Emergency Incident Report", "description": "User successfully reports an emergency incident and ML model successfully classifies the incident", "input": {"location": "123 Main St, City, Country", "emergencyType": "Fire"}, "expected": {"outcome": "Appropriate response unit dispatched", "status": "Successful"}}, {"name": "Unsuccessful Emergency Incident Report - Missing Location", "description": "System prevents the user from reporting an emergency incident without providing the location", "input": {"emergencyType": "Medical"}, "expected": {"outcome": "Missing location information", "status": "Failed"}}, {"name": "ML Model Failure - Non-Emergency Incident", "description": "ML model fails to classify the incident or deems it as non-emergency", "input": {"location": "500 Elm St, City, Country", "emergencyType": "False Alarm"}, "expected": {"outcome": "Case pushed to Action Center for human intervention", "status": "Successful"}}, {"name": "ML Model Failure - Unclassifiable Incident", "description": "ML model fails to classify the incident", "input": {"location": "999 Oak St, City, Country", "emergencyType": "Unknown"}, "expected": {"outcome": "Case pushed to Action Center for human intervention", "status": "Successful"}}]}, {"usecase": {"name": "Manual Intervention in Incident Classification", "scenario": "A member of the disaster response team provides manual intervention in the incident classification through the Action Center.", "actors": ["Disaster Response Team Member", "Action Center"], "preconditions": "Incident is flagged for manual intervention by the Machine Learning model.", "steps": ["Disaster Response Team Member receives the notification for manual intervention.", "Member accesses the Action Center to review the incident details and classification.", "Member manually classifies the incident as an emergency type or non-emergency.", "Action Center updates the incident status based on the member's classification."]}, "testcases": [{"name": "Successful Manual Incident Classification", "description": "Verify that a disaster response team member can successfully classify an incident as an emergency or non-emergency through the Action Center.", "input": {"notification": "received", "incidentDetails": "relevant information provided", "classification": "emergency"}, "expected": {"outcome": "Incident successfully classified", "status": "Updated"}}, {"name": "Unsuccessful Manual Incident Classification - Missing Details", "description": "Verify that the system prevents the disaster response team member from classifying an incident when relevant details are missing.", "input": {"notification": "received", "incidentDetails": "insufficient details provided", "classification": "emergency"}, "expected": {"outcome": "Incomplete incident details", "status": "Not Updated"}}, {"name": "Manual Incident Classification as Non-Emergency", "description": "Verify that a disaster response team member can successfully classify an incident as a non-emergency through the Action Center.", "input": {"notification": "received", "incidentDetails": "relevant information provided", "classification": "non-emergency"}, "expected": {"outcome": "Incident successfully classified as non-emergency", "status": "Updated"}}, {"name": "Action Center Update without Member's Classification", "description": "Verify that the Action Center does not update the incident status if the member fails to provide a classification.", "input": {"notification": "received", "incidentDetails": "relevant information provided", "classification": "not provided"}, "expected": {"outcome": "Incident status not updated", "status": "Not Updated"}}]}, {"usecase": {"name": "Handle High Volume Incident Reporting", "scenario": "The system efficiently manages a high volume of incident reporting during disasters.", "actors": ["Bot", "System Admin"], "preconditions": "High volume of incident reports are being received due to a disaster.", "steps": ["Bot processes the incoming incident reports using the Machine Learning model.", "If incidents are successfully classified, the appropriate response units are dispatched.", "If incidents cannot be classified by the Machine Learning model, or are deemed as non-emergencies, the cases are routed to the Action Center for manual intervention.", "System Admin monitors and manages the incident flow to ensure timely response and allocation of resources."]}, "testcases": [{"name": "Process High Volume Incident Report", "description": "Verify the system's ability to efficiently process a high volume of incident reports during a disaster", "input": {}, "expected": {"outcome": "Incident reports processed efficiently", "status": "Success"}}, {"name": "Dispatch Response Units for Classified Incidents", "description": "Verify if the appropriate response units are dispatched for successfully classified incidents", "input": {"classifiedIncidentType": "Fire"}, "expected": {"outcome": "Response units dispatched for the classified incident", "status": "Success"}}, {"name": "Route Cases to Action Center for Manual Intervention", "description": "Verify if the system correctly routes unclassified or non-emergency incidents to the Action Center", "input": {"incidentType": "Non-emergency"}, "expected": {"outcome": "Cases routed to Action Center for manual intervention", "status": "Success"}}, {"name": "Monitor and Manage Incident Flow", "description": "Verify if the System Admin can effectively monitor and manage the flow of incidents", "input": {"adminAction": "Allocate additional resources"}, "expected": {"outcome": "Incident flow monitored and additional resources allocated", "status": "Success"}}]}, {"usecase": {"name": "Inform User of Estimated Time of Arrival", "scenario": "The system notifies the app user of the Estimated Time of Arrival (ETA) of the dispatched response unit.", "actors": ["System", "Google Cloud Platform", "App User"], "preconditions": "A response unit has been dispatched to the reported emergency incident.", "steps": ["System integrates with the Google Cloud Platform to obtain real-time traffic and navigation data.", "System calculates the Estimated Time of Arrival (ETA) for the dispatched response unit based on the current traffic conditions.", "App user receives a notification with the ETA of the response unit."]}, "testcases": [{"name": "Valid ETA Notification", "description": "Verify that the app user receives a valid Estimated Time of Arrival (ETA) notification for the dispatched response unit.", "input": {"incident_id": "IR123", "current_traffic_conditions": "moderate"}, "expected": {"outcome": "App user receives notification with the calculated ETA for the response unit", "status": "Successful"}}, {"name": "Invalid ETA Notification - No Response Unit Dispatched", "description": "Verify that the app user does not receive an ETA notification when no response unit is dispatched for the reported emergency incident.", "input": {"incident_id": "IR456", "current_traffic_conditions": "heavy"}, "expected": {"outcome": "No notification received", "status": "Failed"}}]}, {"usecase": {"name": "User Authentication", "scenario": "A user logs into the Smart Dev Assist system.", "actors": ["User"], "preconditions": "User must have valid credentials and access to the Smart Dev Assist system.", "steps": ["User navigates to the login page of Smart Dev Assist platform.", "User enters their login credentials (e.g., username, password).", "User submits the login form.", "The system validates the login credentials.", "The system grants access to the user account."]}, "testcases": [{"name": "Valid User Login", "description": "Verify that a user with valid credentials can log in to the Smart Dev Assist system", "input": {"username": "johndoe@example.com", "password": "P@ssw0rd"}, "expected": {"outcome": "User successfully logs in", "status": "Access granted"}}, {"name": "Invalid User Login - Invalid Password", "description": "Verify that the system denies access for a user with an invalid password", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Invalid credentials"}}, {"name": "Invalid User Login - Invalid Username", "description": "Verify that the system denies access for a user with an invalid username", "input": {"username": "nonexistentuser@example.com", "password": "P@ssw0rd"}, "expected": {"outcome": "Access denied", "status": "Invalid credentials"}}]}, {"usecase": {"name": "Generate SDD", "scenario": "An RPA developer generates a Solution Design Document (SDD) using Smart Dev Assist.", "actors": ["RPA Developer"], "preconditions": "RPA Developer must be authenticated and have access to the SDD generation feature.", "steps": ["RPA Developer navigates to the SDD generation section of Smart Dev Assist.", "RPA Developer provides relevant inputs and requirements for the SDD.", "Smart Dev Assist processes the inputs and generates a comprehensive SDD.", "RPA Developer reviews and finalizes the generated SDD."]}, "testcases": [{"name": "Valid SDD Generation", "description": "Verify that an RPA developer can successfully generate an SDD with all relevant inputs.", "input": {"developer": "JohnDoe", "inputs": {"projectName": "Automation of Invoice Processing", "technologyStack": ["UiPath", "Python"], "inputFiles": ["InvoiceTemplate.xlsx", "VendorDetails.csv"]}}, "expected": {"outcome": "SDD generation successful", "status": "Generated"}}, {"name": "SDD Generation Without Required Inputs", "description": "Verify the system response when the RPA developer tries to generate an SDD without providing all the necessary inputs.", "input": {"developer": "JaneSmith", "inputs": {"projectName": "", "technologyStack": ["AutomationTool"], "inputFiles": []}}, "expected": {"outcome": "SDD generation failed", "status": "Incomplete"}}, {"name": "Review and Finalize SDD", "description": "Verify that the RPA developer can review and finalize the generated SDD.", "input": {"developer": "JohnDoe", "sddId": "SDD-123", "changes": "Reviewed and finalized."}, "expected": {"outcome": "SDD review and finalization successful", "status": "Finalized"}}]}, {"usecase": {"name": "Automate Test Case Generation", "scenario": "A tester utilizes Smart Dev Assist to automate the generation of test cases.", "actors": ["Tester"], "preconditions": "Tester must be authenticated and have access to the test case generation module.", "steps": ["Tester accesses the test case generation feature within Smart Dev Assist.", "Tester provides relevant details and requirements for the test case scenario.", "Smart Dev Assist processes the inputs and automatically generates the test cases.", "Tester reviews and validates the generated test cases."]}, "testcases": [{"name": "Valid Test Case Generation", "description": "Verify that Smart Dev Assist successfully generates test cases based on relevant details provided by the tester.", "input": {"details": "Verify login functionality with valid credentials."}, "expected": {"outcome": "Test case generation successful", "status": "Generated", "validation": "Tester validated and approved the generated test cases."}}, {"name": "Missing Input for Test Case Generation", "description": "Verify the response when the tester does not provide relevant details for test case generation.", "input": {"details": ""}, "expected": {"outcome": "Test case generation failed", "status": "Not Generated"}}]}, {"usecase": {"name": "Code Review", "scenario": "A developer requests a code review using Smart Dev Assist.", "actors": ["Developer", "Reviewer"], "preconditions": "Developer must be authenticated and have code to be reviewed. Reviewer must be authenticated and available for code review.", "steps": ["Developer navigates to the code review section of Smart Dev Assist.", "Developer submits the code for review, with relevant details and context.", "Reviewer receives notification about the code review request.", "Reviewer accesses the code review section, reviews the code, and provides feedback.", "Developer receives the feedback and updates the code as necessary."]}, "testcases": [{"name": "Valid Code Submission", "description": "Verify that a developer can successfully submit code for review.", "input": {"developerId": "dev123", "code": "<code snippet>", "details": "Included relevant details and context"}, "expected": {"outcome": "Code submitted for review successfully", "status": "Submitted", "notification": "Notification sent to Reviewer"}}, {"name": "Invalid Code Submission", "description": "Verify that the system handles the case where a developer tries to submit invalid or incomplete code for review.", "input": {"developerId": "dev456", "code": "", "details": "Incomplete details and context"}, "expected": {"outcome": "Code submission failed", "status": "Not Submitted"}}, {"name": "Valid Code Review", "description": "Verify that a reviewer can successfully review the submitted code and provide feedback.", "input": {"reviewerId": "reviewer789", "codeReviewId": "review123", "feedback": "Optimized the for-loop, good work!"}, "expected": {"outcome": "Code review completed successfully", "status": "Reviewed", "notification": "Feedback sent to Developer"}}, {"name": "Invalid Code Review", "description": "Verify that the system handles the case where a reviewer tries to provide incomplete or invalid feedback.", "input": {"reviewerId": "reviewer999", "codeReviewId": "review456", "feedback": ""}, "expected": {"outcome": "Code review incomplete", "status": "Not Reviewed"}}]}, {"usecase": {"name": "Build Code Snippets", "scenario": "A developer uses Smart Dev Assist to build code snippets for RPA development.", "actors": ["Developer"], "preconditions": "Developer must be authenticated and have access to the code snippet building tool.", "steps": ["Developer accesses the code snippet building tool within Smart Dev Assist.", "Developer specifies the requirements and type of code snippet needed.", "Smart Dev Assist generates the code snippet based on the provided details.", "Developer integrates the code snippet into the RPA development project."]}, "testcases": [{"name": "Valid Code Snippet Generation", "description": "Verify that a developer can successfully generate a code snippet for RPA development.", "input": {"tool": "Smart Dev Assist", "requirements": ["Input validation", "Error handling"], "type": "Python"}, "expected": {"outcome": "Code snippet generated successfully", "integration": "Successful integration into RPA development project"}}, {"name": "Invalid Access to Code Snippet Tool", "description": "Verify the system's response when an unauthorized user tries to access the code snippet building tool.", "input": {"actor": "Unauthorized Developer"}, "expected": {"outcome": "Access denied", "integration": "Code snippet not generated"}}]}, {"usecase": {"name": "Recommend Solutions", "scenario": "A user seeks recommendations for resolving an issue using Smart Dev Assist.", "actors": ["User"], "preconditions": "User must be authenticated and have access to the solution recommendation feature.", "steps": ["User describes the issue or requirements for which a solution is needed.", "Smart Dev Assist processes the information and recommends potential solutions.", "User reviews the recommended solutions and selects the most suitable one for implementation."]}, "testcases": [{"name": "Valid Solution Recommendation", "description": "Verify that a user can receive valid recommendations for resolving an issue.", "input": {"userId": 123, "description": "I need a solution for handling large datasets in Python."}, "expected": {"outcome": "Valid solutions recommended", "status": "Recommendations displayed"}}, {"name": "No Solution Recommendation", "description": "Verify that no recommendations are shown if there are no potential solutions.", "input": {"userId": 456, "description": "Issue with database connectivity."}, "expected": {"outcome": "No solutions recommended", "status": "No recommendations displayed"}}]}, {"usecase": {"name": "Input Solution Design Document", "scenario": "The Solution Architect provides a detailed Solution Design Document (SDD) as input to the automation solution.", "actors": "Solution Architect", "preconditions": "The Solution Architect has a detailed SDD created in a charting software.", "steps": ["The Solution Architect uploads the SDD to the automation solution.", "The automation solution extracts details from the SDD."]}, "testcases": [{"name": "Valid SDD Upload and Extraction", "description": "Verify that the Solution Architect can successfully upload the SDD and the automation solution extracts details from it.", "input": {"fileType": "SDD", "fileSize": "2MB", "fileFormat": "PDF"}, "expected": {"outcome": "SDD uploaded and details extracted successfully", "status": "Success"}}, {"name": "Invalid SDD Upload - Unsupported File Format", "description": "Verify that the system handles the case where the Solution Architect tries to upload an unsupported file format for SDD.", "input": {"fileType": "SDD", "fileSize": "3MB", "fileFormat": "DOCX"}, "expected": {"outcome": "SDD upload failed - Unsupported file format", "status": "Failed"}}]}, {"usecase": {"name": "Generate Logic and Wrapper Workflows", "scenario": "The automation solution generates Logic and Wrapper workflows in UiPath Studio based on the extracted details from the SDD.", "actors": "Automation Solution", "preconditions": "Details from the SDD have been successfully extracted.", "steps": ["The automation solution creates necessary input and output arguments for the Logic and Wrapper workflows.", "The solution picks the correct template for each of the logic and wrapper workflows.", "Generated workflows are ready to be consumed in any automation project, such as in a REFramework project."]}, "testcases": [{"name": "Successful Logic and Wrapper Workflow Generation", "description": "Verify that the automation solution generates Logic and Wrapper workflows successfully based on the extracted details from the SDD.", "input": {"detailsExtracted": true, "inputOutputArguments": true, "correctTemplatesPicked": true}, "expected": {"outcome": "Workflows generated successfully", "status": "Ready for consumption"}}, {"name": "Missing SDD Details", "description": "Verify that the system handles the case where details are not successfully extracted from the SDD.", "input": {"detailsExtracted": false, "inputOutputArguments": false, "correctTemplatesPicked": false}, "expected": {"outcome": "Workflow generation failed", "status": "Missing SDD details"}}]}, {"usecase": {"name": "Streamline Design and Build Stage", "scenario": "The automation solution streamlines the design and build stage of an RPA project.", "actors": "RPA Developers, Solution Architect", "preconditions": "Solution Design Document has been inputted and workflows have been generated.", "steps": ["RPA Developers can focus on building robust logic rather than performing repetitive tasks in setting up boilerplates in UiPath Studio.", "The Solution Architect can be assured that the design has been mostly replicated in the developed code."]}, "testcases": [{"name": "Focus on Logic Building", "description": "Verify that RPA developers can focus on building robust logic instead of repetitive setup tasks in UiPath Studio.", "input": {"developerRole": "RPA Developer", "taskType": "Logic Building"}, "expected": {"outcome": "Developers focused on logic building successfully", "status": "Focused"}}, {"name": "Code Replication Assurance", "description": "Ensure that the Solution Architect can verify the replication of design in the developed code.", "input": {"architectRole": "Solution Architect", "validationType": "Code Replication"}, "expected": {"outcome": "Code replication verified successfully", "status": "ReplicatedDesign"}}]}, {"usecase": {"name": "Optimize CoE Efforts", "scenario": "The automation solution helps CoEs optimize their efforts by automating the 'translation phase' of RPA projects.", "actors": "Center of Excellence (CoE) Members", "preconditions": "The automation solution has been implemented and utilized within the organization.", "steps": ["CoEs can ensure adherence to internal best practices by optimizing their processes with the automation solution."]}, "testcases": [{"name": "Optimize CoE Efforts - Valid Automation", "description": "Verify that the CoE members can successfully optimize their efforts using the automation solution.", "input": {"process": "Translation Phase"}, "expected": {"outcome": "Efforts optimized successfully", "status": "Optimized"}}, {"name": "Optimize CoE Efforts - Incomplete Process", "description": "Verify that the system handles incomplete processes during optimization.", "input": {"process": "RPA Project"}, "expected": {"outcome": "Effort optimization failed", "status": "Incomplete"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user creates an account to access UnsubSimplify.", "actors": "New User", "preconditions": "User does not have an existing account on UnsubSimplify", "steps": ["New User navigates to the registration page of UnsubSimplify", "New User fills in the required registration details (e.g., username, email, password)", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account with unique and valid details.", "input": {"username": "NewUser123", "email": "newuser123@example.com", "password": "SecurePassword123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Duplicate Email", "description": "Verify that the system prevents registration with an email address already in use.", "input": {"username": "AnotherUser456", "email": "existingemail@example.com", "password": "DifferentPassword456"}, "expected": {"outcome": "Registration failed", "status": "Email already in use"}}, {"name": "Unsuccessful Registration - Duplicate Username", "description": "Verify that the system prevents registration with a username that is already in use.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "UniquePassword789"}, "expected": {"outcome": "Registration failed", "status": "Username already in use"}}, {"name": "Unsuccessful Registration - Weak Password", "description": "Verify that the system prevents registration with a weak password.", "input": {"username": "AnotherNewUser", "email": "weakpassword@example.com", "password": "abcdef"}, "expected": {"outcome": "Registration failed", "status": "Password must be at least 8 characters long and contain a mix of letters and numbers"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in UnsubSimplify.", "actors": "Registered User", "preconditions": "User must have a registered account on UnsubSimplify and know their login credentials", "steps": ["Registered User navigates to the login page of UnsubSimplify", "Registered User enters their login credentials (e.g., username, password)", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "registeredUser123", "password": "validPassword123"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "registeredUser123", "password": "invalidPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "nonexistentUser", "password": "anyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}]}, {"usecase": {"name": "Search and Unsubscribe from Spam Emails", "scenario": "User searches for and unsubscribes from spam emails effortlessly.", "actors": "User", "preconditions": "User must be logged in and have access to their mailbox", "steps": ["User navigates to the UnsubSimplify dashboard", "User accesses the spam email management feature", "User initiates a search for spam emails", "User selects the spam emails they want to unsubscribe from", "The system initiates the unsubscribe process for selected emails"]}, "testcases": [{"name": "Valid Unsubscribe from Spam Emails", "description": "Verify that user can effortlessly unsubscribe from selected spam emails", "input": {"loggedIn": true, "mailboxAccess": true, "dashboard": "UnsubSimplify", "selectedEmails": ["spam1@example.com", "spam2@example.com"]}, "expected": {"outcome": "Unsubscribe process initiated successfully", "status": "Unsubscribed"}}, {"name": "Unsuccessful Unsubscribe from Spam Emails", "description": "Verify that system handles cases where the unsubscribe process fails", "input": {"loggedIn": true, "mailboxAccess": true, "dashboard": "UnsubSimplify", "selectedEmails": ["invalidspam@example.com"]}, "expected": {"outcome": "Unsubscribe process failed", "status": "Not Unsubscribed"}}, {"name": "Attempt to Unsubscribe without Logging In", "description": "Verify that the system prevents unsubscribing when the user is not logged in", "input": {"loggedIn": false, "mailboxAccess": true, "dashboard": "UnsubSimplify", "selectedEmails": ["spam3@example.com"]}, "expected": {"outcome": "Unsubscribe process failed", "status": "Not Unsubscribed"}}, {"name": "No Access to Mailbox", "description": "Verify that the system restricts unsubscribing when the user does not have access to their mailbox", "input": {"loggedIn": true, "mailboxAccess": false, "dashboard": "UnsubSimplify", "selectedEmails": ["spam4@example.com"]}, "expected": {"outcome": "Unsubscribe process failed", "status": "Not Unsubscribed"}}]}, {"usecase": {"name": "Delete Past Spam Emails", "scenario": "User deletes past spam emails to reduce energy requirements for storing them.", "actors": "User", "preconditions": "User must be logged in and have access to their mailbox", "steps": ["User navigates to the UnsubSimplify dashboard", "User accesses the spam email management feature", "User identifies the past spam emails they want to delete", "User selects the past spam emails for deletion", "The system initiates the deletion process for the selected past spam emails"]}, "testcases": [{"name": "Valid Spam Email Deletion", "description": "User successfully deletes past spam emails", "input": {"userId": "987654", "selectedEmails": ["spam1@example.com", "spam2@example.com"]}, "expected": {"outcome": "Selected past spam emails deleted successfully", "status": "Success"}}, {"name": "No Email Selected for Deletion", "description": "User tries to initiate deletion process without selecting any past spam emails", "input": {"userId": "123456", "selectedEmails": []}, "expected": {"outcome": "No past spam emails selected for deletion", "status": "Failure"}}, {"name": "Invalid Spam Email Selection", "description": "User selects non-existing or invalid past spam emails for deletion", "input": {"userId": "555555", "selectedEmails": ["invalidspam@example.com"]}, "expected": {"outcome": "Invalid past spam emails selected", "status": "Failure"}}]}, {"usecase": {"name": "Recommend Automation During Chat", "scenario": "Doc Robot recommends an automation to a user during a chat conversation.", "actors": ["Doc Robot", "User"], "preconditions": "Doc Robot is connected to UiPath Assistant and Orchestrator and has access to a database of automation definitions.", "steps": ["User initiates a chat conversation with Doc Robot.", "Doc Robot analyzes the user's request and identifies a suitable automation.", "Doc Robot recommends the identified automation to the user.", "User reviews the recommendation and decides whether to proceed with the suggested automation."]}, "testcases": [{"name": "User Initiates Chat", "description": "Verify if the user can successfully initiate a chat conversation with Doc Robot.", "input": {}, "expected": "Doc Robot responds to the chat initiation.", "status": "Success"}, {"name": "Identification of Suitable Automation", "description": "Check if Doc Robot can successfully identify a suitable automation based on the user's request.", "input": {"userRequest": "Automate invoice processing"}, "expected": {"outcome": "Automation 'Automate Invoice Processing' identified", "status": "Pass"}}, {"name": "Recommend Automation", "description": "Verify if Doc Robot recommends the identified automation to the user.", "input": {"automationRecommended": "Automate Invoice Processing"}, "expected": "User receives recommendation for the identified automation.", "status": "Success"}, {"name": "User Review of Recommendation", "description": "Check if the user reviews the recommendation and decides whether to proceed with the suggested automation.", "input": {"decision": "Proceed"}, "expected": "User decides to proceed with the suggested automation.", "status": "Success"}]}, {"usecase": {"name": "Execute Automation on Call", "scenario": "Doc Robot executes an automation based on user's request during a call.", "actors": ["Doc Robot", "User"], "preconditions": "Doc Robot is integrated with UiPath Assistant and Orchestrator, and the user has provided a clear request for an automation execution.", "steps": ["User makes a call to Doc Robot.", "Doc Robot listens to the user's request for an automation execution.", "Doc Robot identifies the appropriate automation based on the user's request and initiates its execution.", "Doc Robot provides feedback to the user regarding the status and outcome of the automation execution."]}, "testcases": [{"name": "Successful Automation Execution", "description": "Verify that Doc Robot successfully executes the appropriate automation based on user's request during a call.", "input": {"user_request": "Request for invoice generation automation"}, "expected": {"outcome": "Automation executed successfully", "feedback": "Invoice generation automation completed", "status": "Success"}}, {"name": "Unintelligible User Request", "description": "Verify that Doc Robot handles the scenario when it cannot understand the user's request during a call.", "input": {"user_request": "Incoherent mumbling"}, "expected": {"outcome": "Automation execution not initiated", "feedback": "Unable to identify user's request", "status": "Failed"}}]}, {"usecase": {"name": "Update Automation Definitions", "scenario": "Doc Robot updates its database of automation definitions from UiPath Orchestrator and Assistant.", "actors": ["Doc Robot", "UiPath Orchestrator", "UiPath Assistant"], "preconditions": "Doc Robot has established connections to UiPath Orchestrator and Assistant, and there are new or modified automation definitions available.", "steps": ["Doc Robot requests the latest automation definitions from UiPath Orchestrator and Assistant.", "UiPath Orchestrator and Assistant provide the updated automation definitions to Doc Robot.", "Doc Robot processes the received automation definitions and updates its internal database.", "Doc Robot confirms the successful update of automation definitions."]}, "testcases": [{"name": "Update Automation Definitions - Successful Update", "description": "Verify that Doc Robot can successfully update its database with the latest automation definitions from UiPath Orchestrator and Assistant.", "input": {"docRobotID": "DR001", "orchestratorConnection": true, "assistantConnection": true, "newDefinitionsAvailable": true}, "expected": {"outcome": "Automation definitions updated successfully", "status": "Success"}}, {"name": "Update Automation Definitions - No New Definitions", "description": "Verify that Doc Robot's database remains unchanged when there are no new or modified automation definitions available from UiPath Orchestrator and Assistant.", "input": {"docRobotID": "DR001", "orchestratorConnection": true, "assistantConnection": true, "newDefinitionsAvailable": false}, "expected": {"outcome": "No new automation definitions to update", "status": "No Change"}}, {"name": "Update Automation Definitions - Orchestrator Connection Failure", "description": "Verify that Doc Robot fails to update automation definitions when the connection to UiPath Orchestrator is unavailable.", "input": {"docRobotID": "DR001", "orchestratorConnection": false, "assistantConnection": true, "newDefinitionsAvailable": true}, "expected": {"outcome": "Failed to update automation definitions - Orchestrator connection unavailable", "status": "Failed"}}, {"name": "Update Automation Definitions - Assistant Connection Failure", "description": "Verify that Doc Robot fails to update automation definitions when the connection to UiPath Assistant is unavailable.", "input": {"docRobotID": "DR001", "orchestratorConnection": true, "assistantConnection": false, "newDefinitionsAvailable": true}, "expected": {"outcome": "Failed to update automation definitions - Assistant connection unavailable", "status": "Failed"}}]}, {"usecase": {"name": "Automate Manual Data Transfers", "scenario": "Automate the manual transfer of data to reduce the need for verification activities", "actors": ["Bot"], "preconditions": "Invoices and supporting documentation are sent to the email inbox", "steps": ["Bot identifies new invoices from the mailbox", "Bot stores the UID onto the Data Service to keep track of the email", "Bot classifies the invoices based on single and multiple invoices"]}, "testcases": [{"name": "Automated Data Transfer - New Invoice", "description": "Bot identifies and processes a new invoice from the mailbox", "input": {"email": "invoice@example.com", "UID": "98765"}, "expected": {"outcome": "Invoice processed successfully", "status": "Processed", "dataServiceUpdate": "UID 98765 added to Data Service"}}, {"name": "Automated Data Transfer - Classification", "description": "Bot classifies the invoices based on quantity", "input": {"invoiceType": "single"}, "expected": {"outcome": "Invoices classified", "status": "Classified"}}]}, {"usecase": {"name": "Automate Placement of Items into Vendor Folders", "scenario": "Automate tedious manual processes such as placing items into vendor folders", "actors": ["Bot"], "preconditions": "Invoices and supporting documentation are sent to the email inbox", "steps": ["Bot identifies the items to be placed into vendor folders", "Bot automatically places the items into the respective vendor folders"]}, "testcases": [{"name": "Item Identification", "description": "Verify that the bot can successfully identify the items to be placed into vendor folders", "input": {}, "expected": {"outcome": "Items identified successfully", "status": "Success"}}, {"name": "Automated Placement", "description": "Verify that the bot automatically places the identified items into the respective vendor folders", "input": {}, "expected": {"outcome": "Items placed into vendor folders", "status": "Success"}}]}, {"usecase": {"name": "Check Confidence Level of Extracted Data", "scenario": "Bot checks for the confidence level of the extracted data and creates actions based on low confidence", "actors": ["Bot"], "preconditions": "Invoices and supporting documentation are sent to the email inbox and have been processed for data extraction", "steps": ["Bot evaluates the confidence level of the extracted data", "If the confidence level is low, Bot creates actions for further verification or correction"]}, "testcases": [{"name": "High Confidence Level", "description": "Verify that the bot handles high confidence level of extracted data appropriately", "input": {"confidence_level": "high"}, "expected": {"outcome": "No further actions required", "status": "NoAction"}}, {"name": "Low Confidence Level - Verification Action", "description": "Verify that the bot creates verification action for low confidence level of extracted data", "input": {"confidence_level": "low"}, "expected": {"outcome": "Verification action created for data", "status": "VerificationAction"}}]}, {"usecase": {"name": "Create Approval Forms for Users", "scenario": "Bot creates forms for users on Action Center for supporting approval and confirmation documentation", "actors": ["Bot"], "preconditions": "Invoices have been processed and actions have been created based on the extracted data", "steps": ["Bot generates approval and confirmation forms based on the actions created", "Bot submits the forms to the Action Center for user review and input"]}, "testcases": [{"name": "Generate Approval Form", "description": "Verify that the bot can generate approval forms based on the actions created.", "input": {}, "expected": {"outcome": "Approval Form Generated", "status": "Success"}}, {"name": "Submit Form to Action Center", "description": "Verify that the bot can successfully submit the approval and confirmation forms to the Action Center for user review and input.", "input": {"formType": "ApprovalForm"}, "expected": {"outcome": "Form Submitted", "status": "Success"}}]}, {"usecase": {"name": "Process Invoices onto Microsoft Dynamics", "scenario": "On approval, the invoices are processed onto Microsoft Dynamics", "actors": ["Bot"], "preconditions": "Invoices have been approved and confirmed by the users through the Action Center", "steps": ["Bot initiates the process to transfer the approved invoices onto Microsoft Dynamics", "Bot confirms the successful processing of the invoices onto Microsoft Dynamics"]}, "testcases": [{"name": "Transfer Approved Invoices", "description": "Verify that the Bot can successfully transfer the approved invoices onto Microsoft Dynamics", "input": {"invoices": ["inv001", "inv002"]}, "expected": {"outcome": "Invoices transferred successfully", "status": "Success"}}, {"name": "Confirm Invoice Processing", "description": "Verify that the Bot can confirm the successful processing of the invoices onto Microsoft Dynamics", "input": {"confirmationStatus": "Success"}, "expected": {"outcome": "Confirmation of successful processing completed", "status": "Success"}}]}, {"usecase": {"name": "Login to Reporting tool", "scenario": "User logs into the reporting tool to access the invoice data.", "actors": "User", "preconditions": "User has valid credentials and access to the reporting tool.", "steps": ["User navigates to the login page of the reporting tool.", "User enters their login credentials.", "User logs in to the reporting tool."]}, "testcases": [{"name": "Valid login to Reporting tool", "description": "Verify that user with valid credentials can successfully log in to the reporting tool", "input": {"username": "user123", "password": "Pass@word1"}, "expected": {"outcome": "Login successful", "status": "Logged in"}}, {"name": "Invalid login to Reporting tool - Incorrect credentials", "description": "Verify that user with invalid credentials cannot log in to the reporting tool", "input": {"username": "invalidUser", "password": "invalidPassword"}, "expected": {"outcome": "Login failed", "status": "Access denied"}}, {"name": "Invalid login to Reporting tool - Blank credentials", "description": "Verify that user with blank credentials cannot log in to the reporting tool", "input": {"username": "", "password": ""}, "expected": {"outcome": "Login failed", "status": "Access denied"}}]}, {"usecase": {"name": "Apply filter by selecting Vendor Name, Region, & Fin Year to search for invoices to extract for analytics", "scenario": "User applies filters to narrow down the data based on vendor name, region, and financial year.", "actors": "User", "preconditions": "User is logged in and has access to the filter functionality.", "steps": ["User navigates to the filter section.", "User selects Vendor Name, Region, and Financial Year.", "User applies the selected filters."]}, "testcases": [{"name": "Valid Filter Selection", "description": "Verify that the user can successfully apply the filters based on vendor name, region, and financial year.", "input": {"vendorName": "Example Vendor", "region": "North America", "financialYear": "2022"}, "expected": {"outcome": "Filters applied successfully", "status": "Applied"}}, {"name": "Invalid Financial Year", "description": "Verify that the system handles the case where the user selects an invalid financial year.", "input": {"vendorName": "Test Vendor", "region": "Europe", "financialYear": "2025"}, "expected": {"outcome": "Invalid financial year selected", "status": "Error"}}, {"name": "Invalid Vendor Name", "description": "Verify that the system handles the case where the user selects an invalid vendor name.", "input": {"vendorName": "Non-existent Vendor", "region": "Asia", "financialYear": "2022"}, "expected": {"outcome": "No data available for the selected vendor", "status": "Empty"}}]}, {"usecase": {"name": "Download the file as excel", "scenario": "User downloads the filtered data as an Excel file for further processing.", "actors": "User", "preconditions": "Filtered data is available and accessible for download.", "steps": ["User locates the download option for the filtered data.", "User selects the download format as Excel.", "User confirms the download."]}, "testcases": [{"name": "Valid Excel File Download", "description": "Verify that the user can successfully download the filtered data as an Excel file.", "input": {"selected_format": "Excel"}, "expected": {"outcome": "Excel file download successful", "status": "File downloaded"}}, {"name": "Empty Filtered Data Download", "description": "Verify that the system handles the case when there is no filtered data to download.", "input": {"selected_format": "Excel"}, "expected": {"outcome": "Excel file download failed", "status": "No data to download"}}, {"name": "Invalid File Format Selection", "description": "Verify that the system handles the case when the user selects an invalid file format for download.", "input": {"selected_format": "PDF"}, "expected": {"outcome": "Excel file download failed", "status": "Invalid format selected"}}]}, {"usecase": {"name": "Login to ERP, loop the excel row one by one and extract invoices", "scenario": "User logs into the ERP system and iterates through each row of the downloaded Excel file to extract invoices.", "actors": "User", "preconditions": "User has valid credentials and access to the ERP system.", "steps": ["User navigates to the login page of the ERP system.", "User enters their login credentials.", "User logs in to the ERP system.", "User opens the downloaded Excel file.", "User iterates through each row to extract invoices."]}, "testcases": [{"name": "Valid credentials, valid Excel file", "description": "User provides valid login credentials and a valid Excel file for extracting invoices", "input": {"credentials": {"username": "john_doe", "password": "Passw0rd!"}, "excelFile": "invoice_data.xlsx"}, "expected": {"outcome": "Invoices extracted successfully", "status": "Success"}}, {"name": "Valid credentials, invalid Excel file", "description": "User provides valid login credentials but an invalid Excel file for extracting invoices", "input": {"credentials": {"username": "john_doe", "password": "Passw0rd!"}, "excelFile": "corrupted_invoice_data.xlsx"}, "expected": {"outcome": "Unable to extract invoices", "status": "Failure"}}, {"name": "Invalid credentials, valid Excel file", "description": "User provides invalid login credentials but a valid Excel file for extracting invoices", "input": {"credentials": {"username": "invalid_user", "password": "incorrect_password"}, "excelFile": "invoice_data.xlsx"}, "expected": {"outcome": "Login failed", "status": "Failure"}}]}, {"usecase": {"name": "Pass the invoice to DU to extract the data", "scenario": "The extracted invoices are passed to the Document Understanding system to extract the relevant data.", "actors": "System", "preconditions": "Invoices from the ERP system are available and accessible for processing.", "steps": ["The system passes each invoice to the Document Understanding (DU) system for data extraction."]}, "testcases": [{"name": "Passing valid invoice to DU", "description": "Verify the system passes a valid invoice to the Document Understanding (DU) system for data extraction.", "input": {"invoiceId": "INV123", "invoiceData": "Base64 encoded data"}, "expected": {"outcome": "Invoice data passed to DU for extraction", "status": "Success"}}, {"name": "Passing invalid invoice to DU", "description": "Verify the system handles the case where an invalid invoice is passed to the Document Understanding (DU) system.", "input": {"invoiceId": "INV987", "invoiceData": "Corrupted data"}, "expected": {"outcome": "Invalid invoice data. Unable to process.", "status": "Failure"}}]}, {"usecase": {"name": "If the extracted data not met the confidence score then send it to human to validate", "scenario": "If the confidence score of the extracted data is below a certain threshold, it is sent to a human for validation.", "actors": "System, Human Validator", "preconditions": "Data extraction from the DU system has taken place.", "steps": ["The system checks the confidence score of the extracted data.", "If the confidence score is below the threshold, the system sends the data to a human validator for validation."]}, "testcases": [{"name": "Confidence Score Below Threshold", "description": "Verify that the system sends data to human validator when confidence score is below the threshold", "input": {"confidenceScore": 0.6, "threshold": 0.7}, "expected": {"outcome": "Data sent for human validation", "status": "Pending human validation"}}, {"name": "Confidence Score Above Threshold", "description": "Verify that the system doesn't send data to human validator when confidence score is above the threshold", "input": {"confidenceScore": 0.8, "threshold": 0.7}, "expected": {"outcome": "No human validation required", "status": "No action taken"}}]}, {"usecase": {"name": "Then apply post processing the convert the data into standard excel format", "scenario": "The extracted data is post-processed to convert it into a standard Excel format.", "actors": "System", "preconditions": "Data extraction and validation have been completed.", "steps": ["The system applies post-processing to convert the extracted data into a standard Excel format."]}, "testcases": [{"name": "Valid Post-processing", "description": "Verify that the system successfully converts extracted data into standard Excel format.", "input": {"data_extraction_status": "completed"}, "expected": {"outcome": "Post-processing successful", "status": "Excel conversion completed"}}, {"name": "Post-processing with Incomplete Data Extraction", "description": "Verify that the system handles post-processing when data extraction is incomplete.", "input": {"data_extraction_status": "incomplete"}, "expected": {"outcome": "Post-processing failed", "status": "Incomplete data extraction"}}]}, {"usecase": {"name": "Upload it to Azure Blob Storage", "scenario": "The post-processed data is uploaded to Azure Blob Storage for storage and further access.", "actors": "System", "preconditions": "Post-processed data is available and accessible for upload.", "steps": ["The system initiates the upload process to Azure Blob Storage for the post-processed data."]}, "testcases": [{"name": "Valid Data Upload", "description": "Verify that the system successfully uploads post-processed data to Azure Blob Storage.", "input": {"data": "post-processed data in a specific format", "destination": "Azure Blob Storage"}, "expected": {"outcome": "Data upload successful", "status": "Uploaded to Azure Blob Storage"}}, {"name": "Empty Data Upload", "description": "Verify that the system handles the case where no post-processed data is available for upload.", "input": {"data": null, "destination": "Azure Blob Storage"}, "expected": {"outcome": "No data detected for upload", "status": "Failed to upload to Azure Blob Storage"}}, {"name": "Invalid Destination", "description": "Verify that the system handles the case where the destination for upload is invalid or inaccessible.", "input": {"data": "post-processed data in a specific format", "destination": "Invalid Blob Storage"}, "expected": {"outcome": "Failed to upload data", "status": "Invalid destination provided"}}]}, {"usecase": {"name": "Receive Invoice via Email", "scenario": "The system receives an invoice(s) through email", "actors": "System, Email Server", "preconditions": "Invoices have been sent to the designated email address", "steps": ["The system checks the designated email address for incoming invoices", "The system retrieves the email and its attachments", "The system processes the attached invoice(s)"]}, "testcases": [{"name": "valid invoice received", "description": "invoices sent to designated email address are valid and accessible", "input": {"emailAddress": "invoices@example.com", "attachments": "invoices.pdf"}, "expected": {"outcome": "invoices processed successfully", "status": "Processed"}}, {"name": "no invoice attached in mail", "description": "no invoice is attached in a new mail came into the valid mail address", "input": {"emailAddress": "invoices@example.com", "attachments": "random.doc"}, "expected": {"outcome": "invoices not found", "status": "Failed to process"}}, {"name": "invalid email address", "description": "invoices sent to an invalid email address", "input": {"emailAddress": "invalid@example.com", "attachments": "invoices.pdf"}, "expected": {"outcome": "invalid email address", "status": "Not processed"}}]}, {"usecase": {"name": "Process Invoices in Different Languages", "scenario": "Invoices in various languages (English, Dutch, German, and French) are processed", "actors": "OCR, System", "preconditions": "Invoices have been received and are in different languages", "steps": ["The OCR system processes the invoices in different languages", "The OCR extracts relevant fields from the invoices in each language", "The system verifies the accuracy of the extracted data"]}, "testcases": [{"name": "Process English Invoice", "description": "Verify that the OCR system can process an English invoice", "input": {"invoiceLanguage": "English"}, "expected": {"outcome": "Invoice processed successfully", "accuracy": "High"}}, {"name": "Process Dutch Invoice", "description": "Verify that the OCR system can process a Dutch invoice", "input": {"invoiceLanguage": "Dutch"}, "expected": {"outcome": "Invoice processed successfully", "accuracy": "High"}}, {"name": "Process German Invoice", "description": "Verify that the OCR system can process a German invoice", "input": {"invoiceLanguage": "German"}, "expected": {"outcome": "Invoice processed successfully", "accuracy": "High"}}, {"name": "Process French Invoice", "description": "Verify that the OCR system can process a French invoice", "input": {"invoiceLanguage": "French"}, "expected": {"outcome": "Invoice processed successfully", "accuracy": "High"}}, {"name": "Invalid Language Invoice", "description": "Verify that the system handles the case where an unsupported language invoice is processed", "input": {"invoiceLanguage": "Italian"}, "expected": {"outcome": "Invoice language not supported", "accuracy": "Low"}}]}, {"usecase": {"name": "Auto-fill Data Using Lookup Tables", "scenario": "The OCR automatically populates values based on lookup tables of invoice payment", "actors": "OCR, System", "preconditions": "OCR extraction of relevant fields is completed", "steps": ["The OCR references lookup tables to auto-fill relevant data fields", "The system verifies the accuracy of the auto-filled invoice data"]}, "testcases": [{"name": "Valid Auto-fill Data from Lookup Tables", "description": "Verify that the OCR auto-fills relevant fields accurately using lookup tables", "input": {"lookupTableID": "A123", "extractedFields": {"field1": "value1", "field2": "value2"}}, "expected": {"outcome": "Data auto-filled accurately", "verificationStatus": "Verified"}}, {"name": "Missing Lookup Table", "description": "Verify system behavior when the OCR references a non-existent lookup table", "input": {"lookupTableID": "InvalidTable", "extractedFields": {"field1": "value1", "field2": "value2"}}, "expected": {"outcome": "Auto-fill failed", "verificationStatus": "Lookup Table Not Found"}}, {"name": "Invalid Field Values", "description": "Verify system behavior when the OCR retrieves invalid values for auto-filling from lookup tables", "input": {"lookupTableID": "B456", "extractedFields": {"field1": "invalid_value", "field2": "incorrect_data"}}, "expected": {"outcome": "Auto-fill failed", "verificationStatus": "Invalid Data"}}]}, {"usecase": {"name": "Trigger Workflow for Exception Handling", "scenario": "In case of exceptions, a workflow is initiated for business user intervention", "actors": "OCR, Business User", "preconditions": "Exception detected in the OCR data extraction", "steps": ["The OCR system flags the exceptions in the data extraction", "The system triggers a workflow to involve a business user for correction", "The business user reviews and corrects the exception data"]}, "testcases": [{"name": "Valid Exception Flagging", "description": "Verify that the OCR system can successfully flag exceptions in the data extraction", "input": {"exceptionType": "InvalidData", "fileId": "12345"}, "expected": {"outcome": "Exceptions flagged successfully", "status": "Flagged", "notification": "Notification sent to business user for intervention"}}, {"name": "Workflow Triggered for Exception", "description": "Verify that the system triggers a workflow for business user intervention upon detecting exceptions", "input": {"exceptionType": "InvalidData", "fileId": "12345", "businessUserId": "6789"}, "expected": {"outcome": "Workflow initiated for business user intervention", "status": "Pending", "notification": "Notification sent to business user for data correction"}}, {"name": "Business User Correction", "description": "Verify that the business user can review and correct the exception data", "input": {"fileId": "12345", "correctionDetails": "Corrected data fields"}, "expected": {"outcome": "Exception data corrected successfully", "status": "Corrected", "notification": "Notification sent to OCR for data reprocessing"}}]}, {"usecase": {"name": "Update Data in Working Excel File", "scenario": "The system updates the working excel file with the corrected invoice data", "actors": "System, Business User", "preconditions": "Invoice data has been corrected by the business user", "steps": ["The business user updates the working excel file with the corrected invoice data", "The system verifies the successful update of the excel file"]}, "testcases": [{"name": "Valid Invoice Data Update", "description": "Verify that the system successfully updates the working excel file with corrected invoice data", "input": {"fileType": "excel", "fileID": "12345", "updatedData": {"invoiceNumber": "INV-00234", "invoiceDate": "2022-05-15", "amount": 1500.0}}, "expected": {"outcome": "Excel file updated successfully", "verification": "Successful"}}, {"name": "Invalid Invoice Data Format", "description": "Verify that the system handles the case where the business user provides incorrect format for the invoice data", "input": {"fileType": "excel", "fileID": "12345", "updatedData": {"invoiceNumber": "INV-00ABC", "invoiceDate": "2022-13-15", "amount": "One thousand five hundred"}}, "expected": {"outcome": "Excel file update failed", "verification": "Failed"}}]}, {"usecase": {"name": "Create Cover Sheet for Invoice", "scenario": "The system generates a cover sheet for each invoice", "actors": "System", "preconditions": "Invoice data is available and verified", "steps": ["The system creates a cover sheet containing essential invoice details", "The system verifies the accuracy of the cover sheet information"]}, "testcases": [{"name": "Valid Cover Sheet Generation", "description": "Verify that the system generates a cover sheet for the invoice with accurate details.", "input": {}, "expected": {"outcome": "Cover sheet generated successfully", "verificationStatus": "Accurate"}}, {"name": "No Invoice Data Available", "description": "Verify that the system handles the case where no invoice data is available for cover sheet generation.", "input": {}, "expected": {"outcome": "Cover sheet generation failed", "verificationStatus": "No data available"}}]}, {"usecase": {"name": "Combine Cover Sheet and Invoice to PDF", "scenario": "The system combines the cover sheet and invoice into a single PDF file", "actors": "System", "preconditions": "Cover sheet and invoices are available and accurate", "steps": ["The system merges the cover sheet and invoice into a single PDF file", "The system ensures the integrity and completeness of the PDF file"]}, "testcases": [{"name": "Valid Combination of Cover Sheet and Invoice", "description": "Verify that the system successfully combines the cover sheet and invoice into a single PDF file", "input": {"coverSheet": "coversheet.pdf", "invoice": "invoice.pdf"}, "expected": {"outcome": "PDF file created successfully", "integrityCheck": "Pass", "completenessCheck": "Pass"}}, {"name": "Duplicate Cover Sheet and Invoice", "description": "Verify that the system handles the case where the same cover sheet and invoice are provided for combination", "input": {"coverSheet": "coversheet.pdf", "invoice": "coversheet.pdf"}, "expected": {"outcome": "PDF file creation failed", "error": "Duplicate file names"}}, {"name": "Missing Cover Sheet", "description": "Verify that the system handles the case where the cover sheet is missing for combination", "input": {"invoice": "invoice.pdf"}, "expected": {"outcome": "PDF file creation failed", "error": "Cover sheet not provided"}}, {"name": "Missing Invoice", "description": "Verify that the system handles the case where the invoice is missing for combination", "input": {"coverSheet": "coversheet.pdf"}, "expected": {"outcome": "PDF file creation failed", "error": "Invoice not provided"}}]}, {"usecase": {"name": "Route PDF for Approvals", "scenario": "The combined PDF file is routed for approvals", "actors": "System, Approving Authorities", "preconditions": "Combined PDF file is generated", "steps": ["The system initiates the approval workflow for the combined PDF file", "The approving authorities review and approve the PDF file"]}, "testcases": [{"name": "Valid PDF Approval", "description": "Verify that the combined PDF file is successfully approved by the approving authorities.", "input": {"pdf_file": "combined_file.pdf", "approving_authority": "Admin123"}, "expected": {"outcome": "PDF file approved", "status": "Approved"}}, {"name": "Invalid PDF Approval", "description": "Verify that the combined PDF file is rejected by the approving authorities.", "input": {"pdf_file": "combined_file.pdf", "approving_authority": "Reviewer456"}, "expected": {"outcome": "PDF file rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Upload Final Sheet in SAP", "scenario": "The final PDF file is uploaded in SAP under a specific t-code", "actors": "System, SAP User", "preconditions": "PDF file has been approved and is ready for SAP upload", "steps": ["The system uploads the final PDF file in SAP using the specific t-code", "The system verifies the successful upload of the PDF file in SAP"]}, "testcases": [{"name": "Valid SAP PDF Upload", "description": "Verify that the system successfully uploads the final PDF file in SAP using the specific t-code", "input": {"pdfFile": "final_sheet.pdf", "tCode": "ABCD123"}, "expected": {"outcome": "PDF file uploaded successfully in SAP", "verificationStatus": "Success"}}, {"name": "Empty PDF File Upload", "description": "Verify that the system handles the case where no PDF file is provided for SAP upload", "input": {"pdfFile": "", "tCode": "ABCD123"}, "expected": {"outcome": "PDF file upload failed", "verificationStatus": "Failed"}}, {"name": "Invalid T-code for SAP Upload", "description": "Verify that the system handles the case where an invalid t-code is used for SAP upload", "input": {"pdfFile": "final_sheet.pdf", "tCode": "WXYZ789"}, "expected": {"outcome": "PDF file upload failed due to invalid t-code", "verificationStatus": "Failed"}}, {"name": "Missing PDF Verification", "description": "Verify that the system handles the case where verification of the PDF file upload is not successful", "input": {"pdfFile": "final_sheet.pdf", "tCode": "ABCD123"}, "expected": {"outcome": "PDF file upload successful in SAP, but verification incomplete", "verificationStatus": "Incomplete"}}]}, {"usecase": {"name": "Send Final PDF to SAP Team for Payment Processing", "scenario": "The final PDF file is sent to the SAP team for payment processing", "actors": "System, SAP Team", "preconditions": "PDF file has been successfully uploaded in SAP", "steps": ["The system notifies the SAP team about the availability of the final PDF file for payment processing", "The SAP team retrieves and processes the PDF file for payment"]}, "testcases": [{"name": "Successful Notification to SAP Team", "description": "Verify that the system successfully notifies the SAP team about the availability of the final PDF file for payment processing", "input": {"notification_type": "final_pdf_available", "pdf_id": "pdf_12345"}, "expected": {"outcome": "Notification sent successfully", "status": "Notified"}}, {"name": "Process Available PDF for Payment", "description": "Verify that the SAP team can successfully retrieve and process the available PDF file for payment", "input": {"pdf_id": "pdf_67890", "processing_status": "success"}, "expected": {"outcome": "PDF processed successfully", "status": "Processed"}}, {"name": "Invalid PDF ID", "description": "Verify that the system handles the case where an invalid PDF ID is used for notification to the SAP team", "input": {"notification_type": "final_pdf_available", "pdf_id": "invalid_pdf_id"}, "expected": {"outcome": "Notification failed", "status": "Invalid PDF ID"}}]}, {"usecase": {"name": "Monitor Logs from Microsoft SCOM", "scenario": "The bot continuously monitors logs from Microsoft SCOM for any triggering events.", "actors": ["Bot"], "preconditions": "The bot is set up to monitor logs from Microsoft SCOM.", "steps": ["Bot establishes a connection with Microsoft SCOM log monitoring system.", "Bot continuously monitors the logs for triggering events or alerts.", "If a triggering event is detected, the bot proceeds to the next step."]}, "testcases": [{"name": "Establish Connection with SCOM", "description": "Verify that the bot can successfully establish a connection with the Microsoft SCOM log monitoring system.", "input": {}, "expected": {"outcome": "Connection established successfully", "status": "Success"}}, {"name": "Continuous Monitoring", "description": "Verify that the bot continuously monitors the logs from Microsoft SCOM for triggering events or alerts.", "input": {}, "expected": {"outcome": "Continuous monitoring in place", "status": "Ongoing"}}, {"name": "Detect Triggering Event", "description": "Verify that the bot can detect a triggering event in the logs from Microsoft SCOM.", "input": {}, "expected": {"outcome": "Triggering event detected", "status": "Success"}}]}, {"usecase": {"name": "Trigger Bots based on SLA Predefined", "scenario": "Upon detecting a triggering event in the logs, the bot triggers specific bots based on predefined SLAs (Service Level Agreements).", "actors": ["Bot"], "preconditions": "A triggering event is detected in the logs from Microsoft SCOM.", "steps": ["Bot identifies the type of triggering event as per predefined SLAs.", "Bot selects and triggers the appropriate bot or bots based on the type of event and corresponding SLA.", "The triggered bots then proceed to execute their designated tasks."]}, "testcases": [{"name": "Trigger Bots with Valid Event and SLA", "description": "Verify that the bot can successfully trigger specific bots based on predefined SLAs for a valid triggering event.", "input": {"triggering_event": "System outage", "sla_details": "Critical: NotifyAdminBot, Major: TroubleshootBot", "triggered_bots": ["NotifyAdminBot", "TroubleshootBot"]}, "expected": {"outcome": "Bots triggered successfully as per predefined SLAs", "status": "Success"}}, {"name": "Trigger Bots with Invalid SLA", "description": "Verify that the system handles the case where the predefined SLA for the triggering event is invalid.", "input": {"triggering_event": "Disk space low", "sla_details": "InvalidSLA: NotifyAdminBot", "triggered_bots": []}, "expected": {"outcome": "Bot failed to trigger due to invalid SLA", "status": "Failed"}}, {"name": "No Triggering Event Detected", "description": "Verify that the system handles the case where no triggering event is detected in the logs.", "input": {"triggering_event": "", "sla_details": "Critical: NotifyAdminBot", "triggered_bots": []}, "expected": {"outcome": "No triggering event detected, no bots triggered", "status": "NoEvent"}}]}, {"usecase": {"name": "Create Ticket in ServiceNow Tool", "scenario": "After triggering the bots, the system creates a ticket in the ServiceNow tool for further action by support personnel.", "actors": ["Bot"], "preconditions": "A triggering event is detected, and specific bots have been triggered based on predefined SLAs.", "steps": ["Bot logs into the ServiceNow tool.", "Bot fills in the necessary details from the triggering event to create a new ticket in the ServiceNow tool.", "The ticket creation includes running prerequisite PUTTY/Support commands to capture information for L1 Support Engineer."]}, "testcases": [{"name": "Valid Ticket Creation", "description": "Verify that a bot can successfully create a ticket in the ServiceNow tool after triggering the event.", "input": {"triggerEventDetails": {"type": "Incident", "details": "High priority issue"}, "botCredentials": {"username": "example_bot", "password": "example123"}, "ticketDetails": {"category": "Technical", "priority": "High", "description": "Issue description here"}, "supportCommands": "PUTTY/Support commands executed"}, "expected": {"outcome": "Ticket created successfully", "status": "Created"}}, {"name": "Bot Login Failure", "description": "Verify that the system handles bot login failure while attempting to create a ticket in the ServiceNow tool.", "input": {"botCredentials": {"username": "example_bot", "password": "incorrectpassword"}}, "expected": {"outcome": "Ticket creation failed", "status": "BotLoginFailure"}}, {"name": "Incomplete Ticket Details", "description": "Verify that the system handles incomplete ticket details during creation in the ServiceNow tool.", "input": {"triggerEventDetails": {"type": "Request", "details": "Information request"}, "botCredentials": {"username": "example_bot", "password": "example123"}, "ticketDetails": {"category": "General"}, "supportCommands": "PUTTY/Support commands executed"}, "expected": {"outcome": "Ticket creation failed", "status": "IncompleteDetails"}}]}, {"usecase": {"name": "L1 Support Engineer Resolution Process", "scenario": "L1 Support Engineer utilizes the captured information to troubleshoot the issue and drive towards a solution to reduce downtime.", "actors": ["L1 Support Engineer"], "preconditions": "A ticket has been created in the ServiceNow tool containing necessary captured information.", "steps": ["L1 Support Engineer accesses the ticket in the ServiceNow tool.", "L1 Support Engineer reviews the captured information and initial analysis from the bot's actions.", "L1 Support Engineer utilizes the captured information to troubleshoot and resolve the issue based on the outcome from the bot's actions."]}, "testcases": [{"name": "Valid Ticket Access", "description": "Verify that L1 Support Engineer can access the ticket in the ServiceNow tool.", "input": {"engineerId": "L1Engineer123", "ticketId": "SN123"}, "expected": {"outcome": "Ticket accessed successfully", "status": "Accessed"}}, {"name": "Review Captured Information", "description": "Verify that L1 Support Engineer can review the captured information and initial analysis from the bot's actions.", "input": {"engineerId": "L1Engineer123", "ticketId": "SN123"}, "expected": {"outcome": "Information reviewed successfully", "status": "Reviewed"}}, {"name": "Troubleshoot and Resolve Issue", "description": "Verify that L1 Support Engineer can utilize the captured information to troubleshoot and resolve the issue based on the outcome from the bot's actions.", "input": {"engineerId": "L1Engineer123", "ticketId": "SN123", "actionTaken": "Restarted server"}, "expected": {"outcome": "Issue resolved successfully", "status": "Resolved"}}]}, {"usecase": {"name": "Search Jira Issues", "scenario": "The automation searches Jira issues based on specific search criteria using JQL (Jira Query Language).", "actors": ["Automation System"], "preconditions": "The automation system has access to the Jira platform and the necessary permissions to perform the search.", "steps": ["The automation system uses JQL to search for Jira issues based on specific criteria.", "For each ticket found, the automation system downloads the attachments and retrieves all the details from the ticket.", "The automation system performs micro-level validation in the SQL server database.", "The system updates some product information based on the ticket details.", "If there are no validation errors, the system closes the ticket.", "If there are validation errors, the system sets the status accordingly.", "The system shares a OneDrive link of the error file using MS Office 365 activities.", "The system re-processes the ticket after the issues are fixed."]}, "testcases": [{"name": "Valid Jira Search", "description": "Verify that the automation system can successfully search for Jira issues based on specific criteria using JQL.", "input": {"searchCriteria": "project = 'ProjectName' AND assignee = currentUser() AND status in ('In Progress', 'To Do')"}, "expected": {"outcome": "Jira issues found and retrieved successfully", "status": "Retrieved", "validation": "Micro-level validation in SQL server database passed"}}, {"name": "Jira Search with No Results", "description": "Verify that the system handles the case where no Jira issues are found based on the specific criteria using JQL.", "input": {"searchCriteria": "project = 'NonExistentProject'"}, "expected": {"outcome": "No Jira issues found based on the criteria", "status": "NoResults"}}, {"name": "Invalid JQL Search", "description": "Verify that the system handles the case where the automation system uses invalid JQL for searching Jira issues.", "input": {"searchCriteria": "invalidJQL = 'test'"}, "expected": {"outcome": "Jira search failed due to invalid JQL", "status": "SearchFailed"}}, {"name": "Attachment Retrieval", "description": "Verify that the automation system can successfully download and retrieve attachments from the Jira issues.", "input": {"ticketID": "JIRA-12345"}, "expected": {"outcome": "Attachments downloaded and retrieved successfully", "status": "Retrieved"}}, {"name": "Validation Error Handling", "description": "Verify that the system handles validation errors in SQL server database and sets the status accordingly.", "input": {"errorType": "DataMismatch"}, "expected": {"outcome": "Validation errors handled and status updated", "status": "ErrorHandled"}}, {"name": "Share Error File", "description": "Verify that the system shares a OneDrive link of the error file using MS Office 365 activities.", "input": {"errorFile": "error.log", "shareType": "OneDrive"}, "expected": {"outcome": "Error file shared successfully", "status": "Shared"}}, {"name": "Re-process Ticket", "description": "Verify that the system re-processes the ticket after the issues are fixed.", "input": {"ticketID": "JIRA-54321"}, "expected": {"outcome": "Ticket re-processed successfully", "status": "Re-processed"}}]}, {"usecase": {"name": "User Input News Topic", "scenario": "User provides input for the news topic he/she is looking for.", "actors": "User", "preconditions": "User is prompted by the news robot to provide the news topic.", "steps": ["User interacts with the news robot to input the specific news topic.", "User submits the news topic to the news robot."]}, "testcases": [{"name": "Valid News Topic Input", "description": "User inputs a valid news topic", "input": {"topic": "COVID-19 Vaccine Research Progress"}, "expected": {"outcome": "News topic submitted successfully", "status": "Submitted"}}, {"name": "Invalid News Topic Input", "description": "User does not input any news topic", "input": {"topic": ""}, "expected": {"outcome": "News topic submission failed - Empty topic", "status": "Not Submitted"}}]}, {"usecase": {"name": "User Input Email ID", "scenario": "User provides the email ID to receive the latest news updates.", "actors": "User", "preconditions": "User is prompted to provide the email ID after inputting the news topic.", "steps": ["User provides the email ID to the news robot for receiving the latest news updates.", "User submits the email ID to the news robot."]}, "testcases": [{"name": "Valid email ID input", "description": "User provides a valid email ID", "input": {"email": "user@example.com"}, "expected": {"outcome": "Email ID accepted for news updates", "status": "Submitted"}}, {"name": "Invalid email ID input", "description": "User provides an invalid email ID", "input": {"email": "invalidemail"}, "expected": {"outcome": "Invalid email ID format", "status": "Rejected"}}]}, {"usecase": {"name": "Bot Search for Latest News", "scenario": "The bot looks for the latest news related to the user-provided news topic on Google.com.", "actors": "News Robot", "preconditions": "The news robot has received the user-provided news topic.", "steps": ["The news robot initiates a search for the latest news related to the user-provided news topic on Google.com.", "The news robot retrieves the latest news articles and their links."]}, "testcases": [{"name": "Valid News Search", "description": "Verify that the bot can successfully search for the latest news related to the user-provided topic.", "input": {"newsTopic": "Technology"}, "expected": {"outcome": "Latest news articles and their links are retrieved", "status": "Successful search"}}, {"name": "Invalid News Topic", "description": "Verify that the bot handles a scenario when an invalid news topic is provided by the user.", "input": {"newsTopic": "InvalidTopic123"}, "expected": {"outcome": "No news articles found", "status": "Unsuccessful search"}}]}, {"usecase": {"name": "Deliver Latest News to User's Mailbox", "scenario": "The bot sends an email to the user's mailbox with the latest news and relevant links.", "actors": "News Robot", "preconditions": "The news robot has found the latest news articles related to the user-provided news topic.", "steps": ["The news robot composes an email containing the latest news and their respective links.", "The news robot sends the email to the user's provided email ID."]}, "testcases": [{"name": "Valid News Email", "description": "Verify that the news robot can send the latest news to the user's mailbox with relevant links.", "input": {"newsTopic": "Technology", "userEmail": "user123@example.com"}, "expected": {"outcome": "Email sent successfully with latest news and relevant links."}}, {"name": "Invalid User Email", "description": "Verify that the news robot handles the scenario when the user's provided email is invalid or non-existing.", "input": {"newsTopic": "Science", "userEmail": "invalidemail@"}, "expected": {"outcome": "Email sending failed due to invalid user email."}}]}, {"usecase": {"name": "Define Test Scenarios", "scenario": "Identify the various test scenarios for end-to-end testing and integration testing of the merchant payment system.", "actors": ["Test Analyst", "Developer"], "preconditions": "Availability of system requirements and understanding of functionality.", "steps": ["Test Analyst identifies positive and negative test scenarios covering different functionalities and edge cases.", "Test Analyst collaborates with the Developer to validate the identified test scenarios."]}, "testcases": [{"name": "Positive Test Scenario Identification", "description": "Verify that the test analyst can successfully identify positive test scenarios for end-to-end testing and integration testing of the merchant payment system.", "input": {}, "expected": {"outcome": "Positive test scenarios identified", "status": "Success"}}, {"name": "Negative Test Scenario Identification", "description": "Verify that the test analyst can successfully identify negative test scenarios (including edge cases) for end-to-end testing and integration testing of the merchant payment system.", "input": {}, "expected": {"outcome": "Negative test scenarios identified", "status": "Success"}}, {"name": "Validation of Test Scenarios", "description": "Verify that the developer and test analyst can collaborate to validate the identified test scenarios for the merchant payment system.", "input": {}, "expected": {"outcome": "Test scenarios validated", "status": "Success"}}]}, {"usecase": {"name": "Set Up Test Data", "scenario": "Prepare necessary test data for conducting tests.", "actors": ["Test Data Analyst", "Test Analyst"], "preconditions": "Test data specifications and requirements are available.", "steps": ["Test Data Analyst prepares mock transactions, customer information, payment methods, and other relevant data required for tests.", "Test Analyst verifies the completeness and accuracy of the prepared test data."]}, "testcases": [{"name": "Prepare Mock Transactions", "description": "Verify that the test data analyst successfully prepares mock transactions required for testing.", "input": {"transactions": "mock data"}, "expected": {"outcome": "Mock transactions prepared", "status": "Complete"}}, {"name": "Prepare Customer Information", "description": "Verify that the test data analyst successfully prepares customer information required for testing.", "input": {"customerInfo": "mock data"}, "expected": {"outcome": "Customer information prepared", "status": "Complete"}}, {"name": "Verify Completeness of Test Data", "description": "Verify that the test analyst successfully verifies the completeness of the prepared test data.", "input": {"testData": "prepared data"}, "expected": {"outcome": "Test data completeness verified", "status": "Verified"}}, {"name": "Verify Accuracy of Test Data", "description": "Verify that the test analyst successfully verifies the accuracy of the prepared test data.", "input": {"testData": "prepared data"}, "expected": {"outcome": "Test data accuracy verified", "status": "Verified"}}]}, {"usecase": {"name": "Design Test Cases", "scenario": "Create detailed test cases for each identified test scenario.", "actors": ["Test Analyst"], "preconditions": "Availability of defined test scenarios and understanding of system functionality.", "steps": ["Test Analyst creates detailed test cases outlining specific steps, expected outcomes, and any preconditions or dependencies required for each test case."]}, "testcases": [{"name": "Valid Test Case Design", "description": "Verify that a test analyst can successfully create a detailed test case.", "input": {"testScenario": "User Authentication"}, "expected": {"outcome": "Test case created successfully", "status": "Created", "details": "Detailed steps, expected outcomes, and dependencies included"}}, {"name": "Invalid Test Case Design", "description": "Verify that the system handles the case where a test analyst tries to create a test case without specifying the test scenario.", "input": {"testScenario": ""}, "expected": {"outcome": "Test case creation failed", "status": "Not Created", "details": "Test scenario is mandatory for creating a test case"}}]}, {"usecase": {"name": "Configure UiPath Test Suite", "scenario": "Install and set up UiPath Test Suite to provide a comprehensive platform for test automation.", "actors": ["Test Automation Engineer"], "preconditions": "Access to UiPath Test Suite and understanding of its components.", "steps": ["Test Automation Engineer installs UiPath Test Suite components like UiPath Studio, UiPath Orchestrator, and UiPath Test Manager.", "Test Automation Engineer sets up necessary environments, projects, and configurations within the Test Suite."]}, "testcases": [{"name": "Install UiPath Test Suite Components", "description": "Verify that the test automation engineer can successfully install UiPath Test Suite components.", "input": {"components": ["UiPath Studio", "UiPath Orchestrator", "UiPath Test Manager"]}, "expected": {"outcome": "Components installed successfully", "status": "Installed"}}, {"name": "Set Up Test Suite Environments", "description": "Verify that the test automation engineer can set up necessary environments within UiPath Test Suite.", "input": {"environments": "TestEnvironment1, TestEnvironment2"}, "expected": {"outcome": "Environments set up successfully", "status": "Set up"}}, {"name": "Configure Test Projects", "description": "Verify that the test automation engineer can configure test projects within UiPath Test Suite.", "input": {"projects": ["Project1", "Project2"]}, "expected": {"outcome": "Projects configured successfully", "status": "Configured"}}]}, {"usecase": {"name": "Implement Test Automation", "scenario": "Automate the test cases using UiPath Studio.", "actors": ["Test Automation Engineer"], "preconditions": "Defined test cases and access to UiPath Studio.", "steps": ["Test Automation Engineer uses UiPath Studio to automate the designed test cases by leveraging UiPath activities and features to interact with the merchant payment system\u2019s UI and validate data."]}, "testcases": [{"name": "Valid Test Automation", "description": "Verify that the test automation engineer successfully automates the designed test cases using UiPath Studio.", "input": {"testCases": "Merchant Payment System"}, "expected": {"outcome": "Test cases automated successfully", "result": "Pass"}}]}, {"usecase": {"name": "Data-Driven Testing", "scenario": "Utilize data-driven testing capabilities provided by UiPath Test Suite.", "actors": ["Test Automation Engineer"], "preconditions": "Availability of test data variants and access to UiPath Test Suite.", "steps": ["Test Automation Engineer utilizes data-driven testing capabilities of UiPath Test Suite to execute test cases with different sets of test data."]}, "testcases": [{"name": "Valid Data-Driven Testing", "description": "Verify that the Test Automation Engineer can successfully execute test cases with different sets of test data.", "input": {"testDataVariants": ["Variant1", "Variant2", "Variant3"]}, "expected": {"outcome": "Data-driven testing executed successfully", "status": "Test cases executed with different data sets"}}, {"name": "Invalid Data-Driven Testing", "description": "Verify that the system handles the case where the Test Automation Engineer encounters issues while executing data-driven testing.", "input": {"testDataVariants": ["InvalidVariant"]}, "expected": {"outcome": "Data-driven testing failed", "status": "Issues encountered while executing test cases with different data sets"}}]}, {"usecase": {"name": "Test Execution and Reporting", "scenario": "Execute the automated test cases and generate detailed reports on test results.", "actors": ["Test Automation Engineer"], "preconditions": "Availability of automated test cases and access to UiPath Test Suite.", "steps": ["Test Automation Engineer executes the automated test cases within UiPath Test Suite.", "Test Automation Engineer monitors the test execution, observes system behavior, and validates expected outcomes.", "Test Automation Engineer generates detailed reports on test results including success rates, test coverage, and encountered issues or errors."]}, "testcases": [{"name": "Execute Test Cases", "description": "Verify that the test automation engineer can successfully execute the automated test cases within UiPath Test Suite.", "input": {}, "expected": {"outcome": "Test cases executed successfully", "status": "Executed"}}, {"name": "Monitor Test Execution and Validate Outcomes", "description": "Verify that the test automation engineer can effectively monitor the test execution, observe system behavior, and validate expected outcomes.", "input": {}, "expected": {"outcome": "Test execution monitored and outcomes validated", "status": "Validated"}}, {"name": "Generate Detailed Test Reports", "description": "Verify that the test automation engineer can generate detailed reports on test results including success rates, test coverage, and encountered issues or errors.", "input": {}, "expected": {"outcome": "Detailed test reports generated successfully", "status": "Generated"}}]}, {"usecase": {"name": "Integration Testing", "scenario": "Execute specific test cases to verify interactions with other systems and automate them within UiPath Test Suite.", "actors": ["Test Automation Engineer"], "preconditions": "Understanding of system integrations and access to UiPath Test Suite.", "steps": ["Test Automation Engineer ensures correct interaction of the merchant payment system with other systems or components such as payment gateways, databases, or external APIs.", "Test Automation Engineer implements specific test cases to verify these integrations and automates them within UiPath Test Suite."]}, "testcases": [{"name": "Valid Integration Test Case", "description": "Verify correct interaction of the merchant payment system with payment gateways, databases, and external APIs, and automate the test within UiPath Test Suite.", "input": {"systems": ["payment gateways", "databases", "external APIs"]}, "expected": {"outcome": "Integration test case passed", "status": "Automated within UiPath Test Suite"}}, {"name": "Incorrect Interaction with Payment Gateway", "description": "Ensure that the system handles the case where the merchant payment system incorrectly interacts with the payment gateway.", "input": {"system": "payment gateway", "scenario": "incorrect interaction"}, "expected": {"outcome": "Integration test case failed", "reason": "Incorrect interaction", "status": "Automated within UiPath Test Suite"}}]}, {"usecase": {"name": "Continuous Integration/Continuous Delivery (CI/CD) Integration", "scenario": "Integrate UiPath Test Suite with the existing CI/CD pipeline.", "actors": ["DevOps Engineer", "Test Automation Engineer"], "preconditions": "Existing CI/CD pipeline and access to UiPath Test Suite.", "steps": ["DevOps Engineer collaborates with the Test Automation Engineer to integrate UiPath Test Suite with the existing CI/CD tools and processes.", "DevOps Engineer ensures that the test automation is triggered as part of the overall deployment process."]}, "testcases": [{"name": "Valid UiPath Test Suite Integration", "description": "Verify that the UiPath Test Suite can be successfully integrated with the existing CI/CD pipeline.", "input": {"pipeline": "Jenkins", "testTool": "UiPath Test Suite"}, "expected": {"outcome": "Integration successful", "status": "Triggered"}}, {"name": "Invalid UiPath Test Suite Integration", "description": "Verify the system's handling when UiPath Test Suite integration fails due to access issues.", "input": {"pipeline": "Azure DevOps", "testTool": "UiPath Test Suite"}, "expected": {"outcome": "Integration failed", "status": "Not Triggered"}}]}, {"usecase": {"name": "Maintenance and Iteration", "scenario": "Update and maintain the automated test suite to adapt to system evolution and new features.", "actors": ["Test Automation Engineer", "Test Analyst"], "preconditions": "System updates or new feature additions.", "steps": ["Test Automation Engineer updates and maintains the automated test suite to align with changes in the merchant payment system.", "Test Analyst performs regular regression testing to ensure system stability and functionality."]}, "testcases": [{"name": "Automated Test Suite Update", "description": "Verify that the Test Automation Engineer successfully updates the automated test suite to align with changes in the merchant payment system.", "input": {"changes": "Integration of new payment gateway", "affectedModules": ["Payment Processing", "User Account"]}, "expected": {"outcome": "Test suite updated to accommodate system changes", "status": "Success"}}, {"name": "Regression Testing by Test Analyst", "description": "Ensure that the Test Analyst performs regular regression testing post automated test suite update to validate system stability and functionality.", "input": {"testSuiteVersion": "v2.0", "testCasesExecuted": 1000}, "expected": {"outcome": "Regression testing completed", "status": "Success"}}]}, {"usecase": {"name": "Detect Explicit Content in Uploaded Images", "scenario": "The system uses the image recognition cloud service (SafeSearch in the Google Cloud Vision API) to detect explicit content in images uploaded to the social media website.", "actors": ["Administrator", "Bot"], "preconditions": "New images have been uploaded to the social media website folder and are waiting for processing.", "steps": ["Bot script detects new image uploads and copies them to a designated folder for processing.", "Bot reads each file and creates an Excel log to pass to the administrator.", "Bot loops through all image entries in the spreadsheet and invokes SafeSearch in the Google Cloud Vision API to check the images for adult, medical, violent, or racy content.", "The API returns the detection results and the bot adds this output to Excel.", "The bot sends the Excel file to the administrator for review and appropriate action."]}, "testcases": [{"name": "Valid Image - No Explicit Content", "description": "Verify that the system successfully detects no explicit content in an uploaded image.", "input": {"imagePath": "https://example.com/images/image1.jpg", "detectionResults": {"adultContent": false, "medicalContent": false, "violentContent": false, "racyContent": false}}, "expected": {"outcome": "Detection completed", "action": "No action required", "status": "No explicit content"}}, {"name": "Image with Explicit Content - Administrator Review", "description": "Verify that the system flags an image with explicit content for the administrator's review.", "input": {"imagePath": "https://example.com/images/image2.jpg", "detectionResults": {"adultContent": true, "medicalContent": false, "violentContent": false, "racyContent": true}}, "expected": {"outcome": "Detection completed", "action": "Administrator review required", "status": "Explicit content detected"}}, {"name": "Invalid Image Format", "description": "Verify that the system handles invalid image formats gracefully.", "input": {"imagePath": "invalid_image.pdf", "detectionResults": {"error": "Invalid image format"}}, "expected": {"outcome": "Detection failed", "action": "Error logged for invalid image format", "status": "Invalid image format"}}]}, {"usecase": {"name": "Moderate Posts and Text Content", "scenario": "The system uses UiPath\u2019s AI Center to moderate text content of posts and comments.", "actors": ["Bot"], "preconditions": "New posts or text content have been uploaded to the social media website.", "steps": ["Bot detects new textual content and processes it using UiPath\u2019s AI Center to check for inappropriate language or content.", "The bot sends the results to the administrator for review and action."]}, "testcases": [{"name": "Valid Text Content Moderation", "description": "Verify that the system successfully moderates the text content and sends the results to the administrator for review.", "input": {"textContent": "This is a test post for moderation."}, "expected": {"outcome": "Text content successfully processed and results sent to administrator.", "status": "Pending Review"}}, {"name": "Inappropriate Text Content Moderation", "description": "Check the system response when the text content contains inappropriate language or content.", "input": {"textContent": "This is an inappropriate post with offensive language."}, "expected": {"outcome": "Inappropriate content detected and flagged for administrator review.", "status": "Pending Action"}}]}, {"usecase": {"name": "Raise Motor Policy Cancellation Request", "scenario": "Policy holder raises a request for motor policy cancellation due to the sale of the insured vehicle before the end of insurance premium validity", "actors": ["Policy Holder"], "preconditions": "Policy holder must have an active motor insurance policy and the insured vehicle must be sold before the end of insurance premium validity", "steps": ["Policy holder logs into the company website", "Policy holder navigates to the motor policy cancellation request section", "Policy holder fills in the required details including policy information and reason for cancellation", "Policy holder submits the cancellation request"]}, "testcases": [{"name": "Successful Policy Cancellation Request", "description": "Policy holder successfully raises a request for motor policy cancellation due to the sale of the insured vehicle before the end of insurance premium validity", "input": {"policyNumber": "POL001234", "reasonForCancellation": "Sale of insured vehicle"}, "expected": {"outcome": "Cancellation request submitted successfully", "status": "Success"}}, {"name": "Unsuccessful Policy Cancellation - Inactive Policy", "description": "Policy holder attempts to raise a cancellation request for an inactive motor insurance policy", "input": {"policyNumber": "POL009876", "reasonForCancellation": "Vehicle sold"}, "expected": {"outcome": "Cannot request cancellation for an inactive policy", "status": "Failed"}}]}, {"usecase": {"name": "Analysis of Cancellation Request", "scenario": "Support Team analyzes the motor policy cancellation request to check eligibility for refund", "actors": ["Support Team"], "preconditions": "A cancellation request must be submitted by the policy holder", "steps": ["Support Team accesses the list of cancellation requests", "Support Team verifies the details provided in the request", "Support Team determines if the request is eligible for refund based on the policy terms and conditions"]}, "testcases": [{"name": "Access Cancellation Requests", "description": "Verify that the Support Team can access the list of cancellation requests", "input": {}, "expected": {"outcome": "List of cancellation requests displayed", "status": "Success"}}, {"name": "Verify Cancellation Request Details", "description": "Verify that the Support Team can verify the details provided in the cancellation request", "input": {"requestId": "CR12345"}, "expected": {"outcome": "Request details verified", "status": "Success"}}, {"name": "Determine Eligibility for Refund", "description": "Verify that the Support Team can determine if the cancellation request is eligible for refund", "input": {"requestId": "CR12345", "policyDetails": {"cancellationReason": "Moving to another city", "cancellationDate": "2023-01-15"}}, "expected": {"outcome": "Eligibility for refund determined", "status": "Success"}}]}, {"usecase": {"name": "Automated Validation of Cancellation Requests", "scenario": "RPA technology used to validate the motor policy cancellation requests in an automated manner", "actors": ["Bot", "Support Team"], "preconditions": "Cancellation request must be submitted and available for processing", "steps": ["Bot receives the cancellation request through email", "Bot validates the authenticity of the attachments", "Bot executes the business logic to check the eligibility for refund", "If eligible, Bot sends the request to a Human approver with all supporting data"]}, "testcases": [{"name": "Valid Cancellation Request", "description": "Test the successful validation of a genuine cancellation request with all necessary attachments", "input": {"cancellationRequest": "valid request with authentic attachments"}, "expected": {"outcome": "Request valid", "status": "Sent for Human Approval"}}, {"name": "Invalid Cancellation Request (Inauthentic Attachments)", "description": "Verify the rejection of a cancellation request due to inauthentic or tampered attachments", "input": {"cancellationRequest": "request with forged or tampered attachments"}, "expected": {"outcome": "Request invalid", "status": "Rejected - Inauthentic Attachments"}}, {"name": "Eligibility Check for Refund (Eligible)", "description": "Check if the Bot correctly identifies the eligibility for refund in a valid cancellation request", "input": {"cancellationRequest": "valid cancellation request"}, "expected": {"outcome": "Eligible for refund", "status": "Sent for Human Approval"}}, {"name": "Eligibility Check for Refund (Not Eligible)", "description": "Evaluate the Bot's ability to identify when the cancellation request is not eligible for a refund", "input": {"cancellationRequest": "cancellation request not eligible for refund"}, "expected": {"outcome": "Not eligible for refund", "status": "Rejected - Not Eligible for Refund"}}]}, {"usecase": {"name": "Human Approval of Refund", "scenario": "Human approver reviews the motor policy cancellation request and approves the refund if eligible", "actors": ["Human Approver"], "preconditions": "Refund request must be sent by the Bot after automated validation", "steps": ["Human approver accesses the request and supporting data", "Human approver reviews the details and verifies the eligibility for refund", "If eligible, Human approver approves the refund", "Post approval, the refund initiation process is triggered by the system"]}, "testcases": [{"name": "Valid Refund Approval", "description": "Confirm that the human approver can successfully approve a refund for an eligible motor policy cancellation request.", "input": {"approverId": "h123", "requestId": "r456", "eligibility": "eligible"}, "expected": {"outcome": "Refund approval successful", "status": "Refund Approved"}}, {"name": "Invalid Refund Approval", "description": "Verify the system's behavior when the human approver attempts to approve a refund for an ineligible motor policy cancellation request.", "input": {"approverId": "h789", "requestId": "r101", "eligibility": "ineligible"}, "expected": {"outcome": "Refund approval failed", "status": "Refund Not Approved"}}]}, {"usecase": {"name": "Download Reports from RTA Sites", "scenario": "Users download reports for 15 Asset Management Companies from 2 Registrar and Transfer Agents (RTA) sites/mail.", "actors": ["User"], "preconditions": "User has access to the RTA sites/mail and necessary permissions to download reports.", "steps": ["User navigates to the RTA sites/mail.", "User selects the option to download reports for 15 Asset Management Companies.", "User confirms the download and waits for the process to complete."]}, "testcases": [{"name": "Successful Download of Reports", "description": "Verify that the user can successfully download reports for 15 Asset Management Companies from the RTA sites/mail.", "input": {"selectedOption": "Download", "numberOfCompanies": 15}, "expected": {"outcome": "Reports downloaded successfully", "status": "Complete"}}, {"name": "Download without Selection", "description": "Verify that the system handles the case where the user tries to download reports without selecting the option for 15 Asset Management Companies.", "input": {"selectedOption": "Download", "numberOfCompanies": 0}, "expected": {"outcome": "Report download not initiated", "status": "Failed"}}]}, {"usecase": {"name": "Check Status of Existing Order Numbers", "scenario": "Users perform sorting to get the latest updates on existing order numbers from downloaded reports.", "actors": ["User"], "preconditions": "User has downloaded the reports from RTA sites/mail and has access to the necessary tools for sorting data.", "steps": ["User opens the downloaded reports for each Asset Management Company.", "User performs sorting to get the latest updates on existing order numbers."]}, "testcases": [{"name": "Valid Sorting", "description": "Verify that a user can successfully sort the downloaded reports to get the latest updates on existing order numbers.", "input": {"reportType": "RTA", "toolUsed": "Excel"}, "expected": {"outcome": "Sorting successful", "status": "Latest updates retrieved"}}, {"name": "No Access to Reports", "description": "Verify that the system handles the case where a user does not have access to the downloaded reports.", "input": {"reportType": "RTA", "toolUsed": "Excel"}, "expected": {"outcome": "Sorting failed", "status": "Access denied"}}, {"name": "Invalid Report Type", "description": "Verify that the system handles the case where a user tries to sort reports of an unsupported type.", "input": {"reportType": "InvalidType", "toolUsed": "Excel"}, "expected": {"outcome": "Sorting failed", "status": "Unsupported report type"}}]}, {"usecase": {"name": "Find Status of New Order Number", "scenario": "Users find the status of new order numbers from the downloaded reports.", "actors": ["User"], "preconditions": "User has downloaded the reports from RTA sites/mail and has access to the necessary tools for finding status of new order numbers.", "steps": ["User opens the downloaded reports for each Asset Management Company.", "User looks for the status of new order numbers based on filtering or search functionality."]}, "testcases": [{"name": "Valid New Order Number Status Search", "description": "Verify that the user can successfully find the status of a new order number from the downloaded reports.", "input": {"reportFile": "AMC_Report_2023", "orderNumber": "98765"}, "expected": {"outcome": "Order status found successfully", "status": "In Progress"}}, {"name": "Invalid New Order Number Status Search", "description": "Verify that the system handles the case where the user tries to find the status of a non-existent new order number.", "input": {"reportFile": "AMC_Report_2023", "orderNumber": "99999"}, "expected": {"outcome": "Order status not found", "status": "Not Found"}}]}, {"usecase": {"name": "Automate Report Download and Order Status Maintenance", "scenario": "Implement RPA (Robotic Process Automation) to automate the download of reports and maintenance of order status from RTA sites/mail.", "actors": ["RPA System", "User"], "preconditions": "RPA system is properly configured and integrated with the RTA sites/mail. Users have provided necessary input requirements for automation.", "steps": ["RPA system accesses the RTA sites/mail and initiates the download of reports for 15 Asset Management Companies.", "RPA system processes the downloaded reports to maintain the order status, ensuring accuracy and efficiency."]}, "testcases": [{"name": "Automate Report Download", "description": "Verify that the RPA system successfully initiates the download of reports from RTA sites/mail for 15 Asset Management Companies.", "input": {"companies": "15"}, "expected": {"outcome": "Reports downloaded successfully", "status": "Success"}}, {"name": "Automate Order Status Maintenance", "description": "Verify that the RPA system successfully maintains the order status by processing the downloaded reports, ensuring accuracy and efficiency.", "input": {}, "expected": {"outcome": "Order status maintained successfully", "status": "Success"}}]}, {"usecase": {"name": "Dispatcher BOT Initialization", "scenario": "Initialization of the dispatcher BOT to retrieve the list of new hires from the Employee Central database and store specific information in Orchestrator queues.", "actors": ["Dispatcher BOT", "API", "Employee Central Database", "Orchestrator"], "preconditions": "BOT is functional and has access to the Employee Central database and Orchestrator", "steps": ["Dispatcher BOT triggers the API call to fetch the list of new hires from the Employee Central database", "API retrieves the list of new hires and sends the specific information (e.g., URL, Employee Name) to the Dispatcher BOT", "Dispatcher BOT stores the received information in Orchestrator queues for further processing"]}, "testcases": [{"name": "Successful API Call", "description": "Verify that the Dispatcher BOT can successfully trigger the API call to fetch the list of new hires from the Employee Central database", "input": {"triggerType": "manual", "databaseCredentials": {"username": "admin", "password": "*********"}}, "expected": {"outcome": "API call successful", "responseTime": "< 3 seconds", "status": "Success"}}, {"name": "API Retrieval of New Hires", "description": "Verify that the API can retrieve the list of new hires and send specific information to the Dispatcher BOT", "input": {"newHiresList": ["Employee1", "Employee2", "Employee3"], "specificInformation": "URL, Employee Name"}, "expected": {"outcome": "Specific information sent to the Dispatcher BOT", "status": "Success"}}, {"name": "Successful Storage in Orchestrator Queues", "description": "Verify that the Dispatcher BOT can store the received information in Orchestrator queues for further processing", "input": {"information": {"employee1": {"url": "http://employee1url", "name": "Employee1"}, "employee2": {"url": "http://employee2url", "name": "Employee2"}}}, "expected": {"outcome": "Information stored in Orchestrator queues", "queueStatus": "Active", "status": "Success"}}, {"name": "BOT Access to Unauthorized Database", "description": "Verify that the Dispatcher BOT cannot access the Employee Central database without proper authorization", "input": {"triggerType": "automated", "databaseCredentials": {"username": "unauthorized_user", "password": "*********"}}, "expected": {"outcome": "Unauthorized access to database", "status": "Access Denied"}}]}, {"usecase": {"name": "New Hire Activation by Performer BOT", "scenario": "Processing of each new hire activation item (queue item) by the Performer BOT using UI interactions and stored credentials/data from the Orchestrator.", "actors": ["Performer BOT", "Dispatcher BOT", "UI", "Orchestrator"], "preconditions": "Performer BOT is functional, Dispatcher BOT has stored the required credentials and data in Orchestrator", "steps": ["Performer BOT fetches a new hire activation item from the Orchestrator queue", "Performer BOT uses UI interactions to log into the SuccessFactors website and complete the onboarding process for the new hire", "Required Credentials and data are retrieved from Orchestrator assets and used during the onboarding process", "Performer BOT marks the activation item as processed upon successful onboarding"]}, "testcases": [{"name": "Fetch New Hire Activation Item", "description": "Verify that the Performer BOT can successfully fetch a new hire activation item from the Orchestrator queue", "input": {"queueName": "newHireActivationQueue"}, "expected": {"outcome": "Item fetched successfully", "status": "Success"}}, {"name": "Complete Onboarding Process", "description": "Verify that the Performer BOT can successfully complete the onboarding process for a new hire using UI interactions and stored credentials/data", "input": {"employeeName": "John Doe", "credentials": "SuccessFactors login", "dataAssets": ["personalInfo", "employmentHistory"]}, "expected": {"outcome": "Onboarding process completed successfully", "status": "Success"}}, {"name": "Invalid Credentials for Onboarding", "description": "Verify that the Performer BOT handles the case where it receives invalid credentials for the onboarding process", "input": {"employeeName": "Jane Smith", "credentials": "InvalidLogin", "dataAssets": ["personalInfo", "employmentHistory"]}, "expected": {"outcome": "Invalid credentials error handled", "status": "Error"}}, {"name": "Mark Activation Item as Processed", "description": "Verify that the Performer BOT can mark the activation item as processed upon successful onboarding", "input": {"itemID": "12345"}, "expected": {"outcome": "Item marked as processed", "status": "Success"}}]}, {"usecase": {"name": "Scheduling the Onboarding Process", "scenario": "Scheduling the onboarding process as per the HR Team\u2019s requirement, either queue-based or time-based.", "actors": ["HR Team", "Orchestrator"], "preconditions": "HR Team's requirement for scheduling the onboarding process is defined in the Orchestrator", "steps": ["HR Team defines the scheduling requirements for the onboarding process (queue-based or time-based)", "Orchestrator sets up the scheduling based on the defined requirements"]}, "testcases": [{"name": "Define Queue-based Onboarding Schedule", "description": "Verify that HR Team can define the onboarding process scheduling as queue-based", "input": {"requirementType": "queue-based"}, "expected": {"outcome": "Queue-based onboarding scheduling defined successfully", "status": "Success"}}, {"name": "Define Time-based Onboarding Schedule", "description": "Verify that HR Team can define the onboarding process scheduling as time-based", "input": {"requirementType": "time-based"}, "expected": {"outcome": "Time-based onboarding scheduling defined successfully", "status": "Success"}}, {"name": "Setup Queue-based Onboarding Schedule", "description": "Verify that Orchestrator can set up the onboarding process scheduling based on queue-based requirements defined by HR Team", "input": {"schedulingType": "queue-based"}, "expected": {"outcome": "Queue-based onboarding scheduling set up successfully", "status": "Success"}}, {"name": "Setup Time-based Onboarding Schedule", "description": "Verify that Orchestrator can set up the onboarding process scheduling based on time-based requirements defined by HR Team", "input": {"schedulingType": "time-based"}, "expected": {"outcome": "Time-based onboarding scheduling set up successfully", "status": "Success"}}]}, {"usecase": {"name": "New Employee ID Generation and Communication", "scenario": "Automatic generation of a new employee ID to the Profile by the BOT using API and sending the ID to the respective manager.", "actors": ["Performer BOT", "API", "Manager", "Orchestrator"], "preconditions": "Performer BOT successfully completes the new hire activation, Manager's contact information is available", "steps": ["Performer BOT uses API to generate a new employee ID for the activated profile", "Performer BOT sends the new employee ID to the respective manager", "Orchestrator logs the communication for future reference"]}, "testcases": [{"name": "Valid new employee ID generation and communication", "description": "Verify that a new employee ID is successfully generated by the BOT using the API and communicated to the respective manager", "input": {"profileID": "123", "managerID": "789"}, "expected": {"outcome": "New employee ID successfully generated and communicated", "communicationLog": "Logged for future reference", "status": "Success"}}, {"name": "Invalid employee ID generation", "description": "Verify that an error is handled when the BOT fails to generate a new employee ID using the API", "input": {"profileID": "123", "managerID": "789"}, "expected": {"outcome": "Failed to generate new employee ID", "error": "Error message specifying the reason for failure", "status": "Failed"}}, {"name": "Missing Manager's contact information", "description": "Verify that the system handles the scenario where the manager's contact information is not available for sending the new employee ID", "input": {"profileID": "123", "managerID": ""}, "expected": {"outcome": "Failed to communicate new employee ID to manager", "error": "Manager's contact information not available", "status": "Failed"}}, {"name": "Communication logging failure", "description": "Verify that the system handles the failure to log the communication for future reference", "input": {"profileID": "123", "managerID": "789"}, "expected": {"outcome": "New employee ID communicated but failed to log the communication", "error": "Error message specifying the reason for failure to log", "status": "Partial Success"}}]}, {"usecase": {"name": "Handling Business Exceptions", "scenario": "Notification of business exceptions to the HR Team via mail alerts for any mandatory information not present in SuccessFactors during onboarding.", "actors": ["Performer BOT", "HR Team", "Mail Service", "SuccessFactors"], "preconditions": "Performer BOT encounters a business exception during the onboarding process", "steps": ["Performer BOT identifies the missing mandatory information in SuccessFactors", "Performer BOT sends a mail alert to the HR Team notifying them of the business exception", "HR Team reviews the business exception and takes necessary action"]}, "testcases": [{"name": "Missing Information Alert", "description": "Performer BOT encounters missing mandatory information in SuccessFactors and sends a mail alert to HR Team", "input": {"missingInfoField": "Address", "alertMessage": "Mandatory information 'Address' is missing in SuccessFactors"}, "expected": {"outcome": "HR Team notified of missing information", "actionRequired": true, "status": "Alert Sent"}}, {"name": "No Business Exception", "description": "Performer BOT does not encounter any missing mandatory information in SuccessFactors", "input": {"missingInfoField": "", "alertMessage": ""}, "expected": {"outcome": "No business exception encountered", "actionRequired": false, "status": "No Alert Sent"}}, {"name": "HR Review and Action", "description": "HR Team reviews the business exception and takes necessary action", "input": {"exceptionDetails": "Missing documents for employee onboarding"}, "expected": {"outcome": "HR Team action taken on business exception", "status": "Action Completed"}}]}, {"usecase": {"name": "Reporting Successful Activations to HR Team", "scenario": "Sending a protected Excel report via mail to the HR Team every EOD containing details of successful onboarding activations.", "actors": ["Performer BOT", "HR Team", "Mail Service", "Excel", "Orchestrator"], "preconditions": "Performer BOT has accumulated the details of successful activations", "steps": ["Performer BOT compiles the details of successful activations into a protected Excel report", "Performer BOT sends the Excel report via mail to the HR Team every EOD", "Orchestrator logs the sent reports for records"]}, "testcases": [{"name": "Compile Successful Activations", "description": "Verify that Performer BOT can successfully compile the details of successful activations into a protected Excel report", "input": {"activationDetails": "Sample details"}, "expected": {"outcome": "Excel report compiled with activation details", "status": "Success"}}, {"name": "Send Excel Report to HR Team", "description": "Verify that Performer BOT can successfully send the Excel report via mail to the HR Team every EOD", "input": {"excelFile": "Protected excel file", "recipient": "HR Team", "schedule": "EOD"}, "expected": {"outcome": "Excel report sent to HR Team", "status": "Success"}}, {"name": "Log Sent Reports", "description": "Verify that Orchestrator can successfully log the sent reports for records", "input": {"reportType": "Excel", "recipient": "HR Team", "timestamp": "EOD"}, "expected": {"outcome": "Sent reports logged for records", "status": "Success"}}]}, {"usecase": {"name": "Automate Patient Data Process", "scenario": "Automate the process of capturing and storing patient data in the database.", "actors": ["System", "Patient"], "preconditions": "System and patient must be available and the patient's information must be accurately captured.", "steps": ["System captures patient data from various sources (e.g., forms, medical devices).", "System validates and processes the captured data.", "System loads the processed patient data into the database."]}, "testcases": [{"name": "Automate Patient Data Capture - Valid Data", "description": "Verify that the system accurately captures and processes patient data from various sources and loads it into the database.", "input": {"patient_id": "P001", "data_sources": ["medical_forms", "wearable_devices"], "data_accuracy": "high"}, "expected": {"outcome": "patient data captured and processed successfully", "status": "data loaded into the database"}}, {"name": "Automate Patient Data Capture - Invalid Data", "description": "Verify that the system handles and reports errors when capturing and processing invalid patient data.", "input": {"patient_id": "P002", "data_sources": ["incomplete_forms", "unreliable_devices"], "data_accuracy": "low"}, "expected": {"outcome": "error in data capture/processing", "status": "data not loaded into the database"}}]}, {"usecase": {"name": "Access Patient Data for Treatment", "scenario": "Doctors access patient data to determine the appropriate line of treatment.", "actors": ["Doctor"], "preconditions": "Doctor must be authenticated and have patient information access rights.", "steps": ["Doctor logs into the system.", "Doctor searches for the desired patient's data.", "System displays the patient's data for the doctor's review and analysis."]}, "testcases": [{"name": "Valid access of patient data", "description": "Verify that the doctor can access patient data with the appropriate rights", "input": {"doctor_username": "authDoc", "patient_id": "patient123"}, "expected": {"outcome": "patient data displayed", "status": "success"}}, {"name": "Access patient data without authentication", "description": "Verify that the doctor cannot access patient data without proper authentication", "input": {"doctor_username": "unauthDoc", "patient_id": "patient123"}, "expected": {"outcome": "access denied", "status": "failed"}}]}, {"usecase": {"name": "Insurance Coverage Decision", "scenario": "Insurance companies access patient data to decide on insurance coverage.", "actors": ["Insurance Company", "System"], "preconditions": "Insurance company must be authenticated and have patient data access rights.", "steps": ["Insurance company representative logs into the system.", "Insurance company representative searches for the patient's data.", "System displays the patient's data for the insurance company's review and assessment."]}, "testcases": [{"name": "Valid insurance coverage decision", "description": "Verify that the insurance company can access and review patient data for insurance coverage decision", "input": {"company_representative": "insuranceco1", "patient_id": "PAT001"}, "expected": {"outcome": "patient data displayed for review", "status": "accessible"}}, {"name": "Invalid insurance coverage decision - Unauthorized access", "description": "Verify that the system restrains unauthorized access to patient data for insurance coverage decision", "input": {"company_representative": "unauthorizedinsco", "patient_id": "PAT002"}, "expected": {"outcome": "access denied", "status": "restricted"}}]}, {"usecase": {"name": "Patient Health Information", "scenario": "Patients access their health information, illness details, and diagnosis through the system.", "actors": ["Patient"], "preconditions": "Patient must be authenticated and have access rights to their own health information.", "steps": ["Patient logs into the system.", "Patient navigates to the health information section.", "System provides access to the patient's health records, illness details, and diagnosis information."]}, "testcases": [{"name": "Patient accesses own health information", "description": "Verify that the patient can access their health records, illness details, and diagnosis information", "input": {"patient_username": "john_doe"}, "expected": {"outcome": "health information, illness details, and diagnosis information displayed", "status": "accepted"}}, {"name": "Unauthorized patient tries to access health information", "description": "Verify that an unauthorized patient cannot access health records, illness details, or diagnosis information", "input": {"patient_username": "unauthorized_user"}, "expected": {"outcome": "access denied", "status": "denied"}}]}, {"usecase": {"name": "ChatGPT Health Insights", "scenario": "Process uses ChatGPT to provide health insights and additional information to users.", "actors": ["System", "User"], "preconditions": "User must be logged into the system and have access to the ChatGPT feature.", "steps": ["User initiates a health-related query or conversation using the ChatGPT feature.", "System leverages ChatGPT to generate and provide health insights and additional information in response to the user's queries or conversation.", "User receives and reviews the health insights provided by ChatGPT."]}, "testcases": [{"name": "Initiate Health-related Query", "description": "Verify that the user can initiate a health-related query using the ChatGPT feature.", "input": {"query": "What are the symptoms of flu?", "user_id": "1234"}, "expected": {"outcome": "System utilizes ChatGPT to generate health insights.", "status": "success"}}, {"name": "Receive Health Insights", "description": "Ensure that the user receives health insights provided by ChatGPT in response to the query.", "input": {"conversation_id": "5678"}, "expected": {"outcome": "User reviews the health insights provided.", "status": "success"}}, {"name": "Unauthorized Access to ChatGPT", "description": "Verify that a user without access to the ChatGPT feature cannot initiate health-related queries.", "input": {"query": "What are the symptoms of diabetes?", "user_id": "9999"}, "expected": {"outcome": "System denies access to ChatGPT for unauthorized users.", "status": "failure"}}]}, {"usecase": {"name": "Automated Zoom Link Download", "scenario": "Automated downloading of Zoom links into an Excel file for each shift", "actors": ["RPA Bot"], "preconditions": "RPA Bot is properly configured and has access to the Zoom system", "steps": ["RPA Bot logs into the system at the beginning of each shift", "RPA Bot downloads all Zoom links for the shift into an Excel file"]}, "testcases": [{"name": "Successful Login", "description": "Verify that the RPA Bot can successfully log into the system at the beginning of each shift", "input": {"shiftTiming": "Morning Shift", "username": "bot_username", "password": "bot_password"}, "expected": {"outcome": "Login successful", "status": "Pass"}}, {"name": "Failed Login", "description": "Verify the system response when the RPA Bot fails to log in", "input": {"shiftTiming": "Evening Shift", "username": "incorrect_bot_username", "password": "incorrect_bot_password"}, "expected": {"outcome": "Login failed", "status": "Fail"}}, {"name": "Download Zoom Links", "description": "Verify that the RPA Bot can download all Zoom links for the shift into an Excel file", "input": {"shiftTiming": "Afternoon Shift"}, "expected": {"outcome": "Zoom links downloaded into Excel file", "status": "Pass"}}]}, {"usecase": {"name": "Automated Zoom Link Checking", "scenario": "Automated checking of Zoom links and lecturer presence", "actors": ["RPA Bot"], "preconditions": "RPA Bot has the downloaded Excel file with Zoom links", "steps": ["RPA Bot starts to loop through the Excel file, opening each Zoom link", "If a Zoom link cannot be opened, RPA Bot updates the presence column in the Excel with the status 'not yet joined'", "If the lecturer has joined, RPA Bot checks if the name has been renamed to the lecturer's name", "If not, RPA Bot sends a private chat to the lecturer to immediately rename the name"]}, "testcases": [{"name": "Valid Zoom Link Checking", "description": "Verify that the RPA Bot can successfully check and confirm the presence of lecturer on valid Zoom links", "input": {"excel_file": "zoom_links.xlsx", "valid_zoom_link": "https://validzoomlink1.com"}, "expected": {"outcome": "Zoom link checked and lecturer presence confirmed", "status": "Success"}}, {"name": "Invalid Zoom Link Checking", "description": "Verify that the RPA Bot handles the case where it cannot open an invalid Zoom link and updates the presence status in the Excel", "input": {"excel_file": "zoom_links.xlsx", "invalid_zoom_link": "https://invalidzoomlink2.com"}, "expected": {"outcome": "Presence status updated as 'not yet joined' for invalid Zoom link", "status": "Success"}}, {"name": "Lecturer Name Check", "description": "Verify that the RPA Bot checks and confirms if the lecturer's name has been renamed after joining the Zoom call", "input": {"excel_file": "zoom_links.xlsx", "zoom_link": "https://zoomlink3.com"}, "expected": {"outcome": "Lecturer's name renamed and confirmed", "status": "Success"}}, {"name": "Lecturer Name Not Renamed", "description": "Verify that the RPA Bot sends a private chat to the lecturer if the name has not been renamed after joining the Zoom call", "input": {"lecturer_name": "John Doe", "message": "Please rename your name to match the lecturer's name"}, "expected": {"outcome": "Private chat sent to the lecturer to rename the name", "status": "Success"}}]}, {"usecase": {"name": "Review of Lecturers Who Have Not Joined", "scenario": "Administrators receive a summary of lecturers who have not joined the class via the provided Zoom links", "actors": ["Administrator"], "preconditions": "Zoom links have been checked by the RPA Bot", "steps": ["Administrators immediately receive a summary of lecturers who have not joined the class along with the respective Zoom links", "Administrators contact the lecturers who have not joined the Zoom class"]}, "testcases": [{"name": "Summary of Non-Joined Lecturers Received", "description": "Verify that administrators receive a summary of lecturers who have not joined the class along with Zoom links.", "input": {"summary_received": true, "zoom_links": ["link1", "link2", "link3"]}, "expected": {"outcome": "Summary of non-joined lecturers received along with Zoom links", "status": "Success"}}, {"name": "Contact Non-Joined Lecturers", "description": "Verify that administrators can contact the lecturers who have not joined the Zoom class.", "input": {"lecturer_list": ["John Doe", "Jane Smith"]}, "expected": {"outcome": "Administrators are able to contact non-joined lecturers", "status": "Success"}}]}, {"usecase": {"name": "Delayed Checking for Lecturers Who Have Not Joined", "scenario": "RPA Bot performs a delayed loop for lecturers who still haven\u2019t joined", "actors": ["RPA Bot"], "preconditions": "A certain amount of time has passed since the initial checking", "steps": ["After 20 minutes, RPA Bot performs a loop to re-check for any lecturers who still haven\u2019t joined the Zoom class"]}, "testcases": [{"name": "Check for Lecturers Who Haven't Joined", "description": "Verify that the RPA Bot performs a delayed loop to re-check for lecturers who haven't joined the Zoom class after a certain amount of time.", "input": {"time_elapsed": "20 minutes"}, "expected": {"outcome": "RPA Bot successfully re-checks for any lecturers who haven't joined the Zoom class", "status": "Success"}}, {"name": "No Lecturers Still Not Joined", "description": "Verify that the RPA Bot handles the case where all lecturers have already joined the Zoom class when performing the delayed loop.", "input": {"time_elapsed": "20 minutes"}, "expected": {"outcome": "No lecturers are found to have not joined the Zoom class during the delayed loop", "status": "Success"}}]}, {"usecase": {"name": "Login to Oracle Support Forum", "scenario": "The bot logs in to the Oracle support forum using one of the configured email IDs.", "actors": ["Bot"], "preconditions": "The bot has access to the configured email IDs and the Oracle support forum.", "steps": ["Bot initiates the login process to the Oracle support forum using a configured email ID", "The system verifies the login credentials", "Upon successful verification, the bot gains access to the Oracle support forum"]}, "testcases": [{"name": "Valid login with configured email ID", "description": "Verify that the bot can successfully log in using a configured email ID", "input": {"emailID": "bot@example.com", "expectedRole": "support", "password": "p@ssw0rd"}, "expected": {"outcome": "successful login", "status": "access granted"}}, {"name": "Invalid login with unconfigured email ID", "description": "Verify that the system handles the case where the bot tries to log in using an unconfigured email ID", "input": {"emailID": "invalid@example.com", "password": "invalidpass"}, "expected": {"outcome": "failed login", "status": "access denied"}}]}, {"usecase": {"name": "Search for Open Tickets based on CSI", "scenario": "The bot searches for open tickets in the Oracle support forum based on the Customer Support Identifier (CSI).", "actors": ["Bot"], "preconditions": "The bot is logged in to the Oracle support forum and has the necessary permissions to search for tickets.", "steps": ["Bot navigates to the ticket search section", "Bot enters the CSI to filter the open tickets", "The system processes the search query and retrieves the open tickets associated with the provided CSI"]}, "testcases": [{"name": "Valid CSI Search", "description": "Verify that the bot can successfully search for open tickets based on a valid Customer Support Identifier (CSI).", "input": {"CSI": "CSI-12345"}, "expected": {"outcome": "Open tickets retrieved successfully"}}, {"name": "Invalid CSI Search", "description": "Verify that the system handles the case where the bot enters an invalid Customer Support Identifier (CSI) for ticket search.", "input": {"CSI": "Invalid-CSI"}, "expected": {"outcome": "No open tickets found", "reason": "Invalid CSI or no open tickets associated"}}]}, {"usecase": {"name": "Check Ticket Status", "scenario": "The bot checks the status of the open tickets retrieved from the search.", "actors": ["Bot"], "preconditions": "The bot has retrieved the open tickets from the search results.", "steps": ["Bot selects each open ticket one by one", "Bot retrieves the status of each ticket", "The system provides the status of each ticket to the bot"]}, "testcases": [{"name": "Valid Ticket Status Retrieval", "description": "Verify that the bot successfully retrieves the status of an open ticket", "input": {"ticketId": "T123", "status": "Open"}, "expected": {"outcome": "Status retrieved successfully", "status": "Open"}}, {"name": "Invalid Ticket Status Retrieval", "description": "Verify that the bot does not retrieve the status of a closed ticket", "input": {"ticketId": "T456", "status": "Closed"}, "expected": {"outcome": "Ticket closed", "status": "Closed"}}]}, {"usecase": {"name": "Send Reminder to Assignee", "scenario": "If the status of the ticket indicates that Oracle is awaiting response, the bot sends a reminder to the assignee.", "actors": ["Bot"], "preconditions": "The ticket status indicates that Oracle is awaiting response and the assignee information is available.", "steps": ["Bot identifies the assignee of the ticket", "Bot composes a reminder message to the assignee regarding the pending response", "The reminder message is sent to the assignee"]}, "testcases": [{"name": "Send Reminder - Valid Status", "description": "Verify that the bot successfully sends a reminder to the assignee when the ticket status indicates 'Oracle is awaiting response'", "input": {"ticket_status": "Oracle is awaiting response", "assignee": "JohnDoe"}, "expected": {"outcome": "Reminder message sent successfully", "status": "Sent"}}, {"name": "Send Reminder - Invalid Status", "description": "Verify that the bot does not send a reminder when the ticket status does not indicate 'Oracle is awaiting response'", "input": {"ticket_status": "In progress", "assignee": "JaneDoe"}, "expected": {"outcome": "No reminder sent", "status": "NotSent"}}]}, {"usecase": {"name": "Send Reminder to Oracle", "scenario": "If Oracle is not awaiting a response, the bot sends a reminder to Oracle to update the ticket.", "actors": ["Bot"], "preconditions": "The ticket status indicates that Oracle is not awaiting response.", "steps": ["Bot identifies the relevant Oracle contact for the ticket", "Bot composes a reminder message to Oracle requesting an update on the ticket", "The reminder message is sent to Oracle"]}, "testcases": [{"name": "Successful Reminder Sent", "description": "Bot successfully sends a reminder to Oracle when Oracle is not awaiting a response", "input": {"ticketId": "12345", "oracleContact": "OracleContact1"}, "expected": {"outcome": "Reminder sent successfully", "status": "Success"}}, {"name": "Reminder Not Sent - Oracle Awaiting Response", "description": "Bot does not send a reminder when Oracle is already awaiting a response", "input": {"ticketId": "54321", "oracleContact": "OracleContact2"}, "expected": {"outcome": "Reminder not sent", "reason": "Oracle awaiting response", "status": "Unsuccessful"}}]}, {"usecase": {"name": "Consolidated Report Generation", "scenario": "At the end of each run, the bot generates a consolidated report and sends it to the manager.", "actors": ["Bot"], "preconditions": "The bot has completed processing tickets during the run.", "steps": ["Bot compiles the details of all processed tickets and their status", "Bot generates a consolidated report", "The report is sent to the manager"]}, "testcases": [{"name": "Valid Report Generation and Delivery", "description": "Verify that the bot successfully generates a consolidated report and sends it to the manager after processing tickets.", "input": {"processedTickets": ["ticket1", "ticket2", "ticket3"], "status": "completed"}, "expected": {"outcome": "Consolidated report generated and delivered", "status": "Sent to manager"}}, {"name": "Report Generation Without Processed Tickets", "description": "Verify the system's response when the bot attempts to generate a report without processing any tickets.", "input": {"processedTickets": [], "status": "not completed"}, "expected": {"outcome": "No tickets processed, unable to generate report", "status": "Report generation failed"}}]}, {"usecase": {"name": "Login To LOS Website", "scenario": "User logs into the LOS website to extract and store the required details.", "actors": ["Bot"], "preconditions": "Bot has valid credentials to access the LOS website", "steps": ["Bot navigates to the login page of the LOS website", "Bot enters the login credentials", "Bot submits the login form", "The system validates the credentials and grants access to the Bot's account"]}, "testcases": [{"name": "Valid Credentials", "description": "Bot provides valid login credentials", "input": {"credentials": {"username": "bot123", "password": "p@ssw0rd"}}, "expected": {"outcome": "Access Granted", "status": "Successful Login"}}, {"name": "Invalid Credentials", "description": "Bot provides invalid login credentials", "input": {"credentials": {"username": "invalidBot", "password": "wrongPassword"}}, "expected": {"outcome": "Access Denied", "status": "Failed Login"}}]}, {"usecase": {"name": "Order Flood Certificate", "scenario": "Bot navigates to the Flood Ordering Page and orders a Flood Certificate. Once ordered, a native PDF is generated.", "actors": ["Bot"], "preconditions": "Bot is logged into the LOS website", "steps": ["Bot navigates to the Flood Ordering Page", "Bot places an order for a Flood Certificate", "The system generates a native PDF of the ordered Flood Certificate"]}, "testcases": [{"name": "Navigate to Flood Ordering Page", "description": "Verify that the bot can successfully navigate to the Flood Ordering Page", "input": {"loggedInUser": "bot"}, "expected": {"outcome": "Flood Ordering Page navigated successfully", "status": "Success"}}, {"name": "Order Flood Certificate", "description": "Verify that the bot can successfully place an order for a Flood Certificate", "input": {"certificateType": "Flood", "loggedInUser": "bot"}, "expected": {"outcome": "Flood Certificate ordered successfully", "status": "Success"}}, {"name": "Generate PDF for Flood Certificate", "description": "Verify that the system generates a native PDF of the ordered Flood Certificate", "input": {"orderID": "12345"}, "expected": {"outcome": "Native PDF generated for Flood Certificate", "status": "Success"}}]}, {"usecase": {"name": "Extract Details from Flood Certificate", "scenario": "Bot extracts loan borrower name, flood zone identity, and property address (City, State) from the generated PDF.", "actors": ["Bot"], "preconditions": "A Flood Certificate has been ordered and a PDF is generated", "steps": ["Bot extracts the required details from the PDF"]}, "testcases": [{"name": "Valid Extraction", "description": "Verify that the bot can successfully extract the required details from the flood certificate PDF.", "input": {"pdfFile": "flood_certificate.pdf"}, "expected": {"outcome": "Extraction successful", "borrowerName": "John Doe", "floodZone": "Zone A", "propertyAddress": {"city": "New York", "state": "NY"}}}, {"name": "Missing PDF File", "description": "Test the system's response when no PDF file is provided for extraction.", "input": {"pdfFile": ""}, "expected": {"outcome": "Extraction failed", "reason": "No PDF file provided"}}, {"name": "Invalid PDF Format", "description": "Test the system's response when a non-PDF file is provided for extraction.", "input": {"pdfFile": "flood_certificate.docx"}, "expected": {"outcome": "Extraction failed", "reason": "Invalid file format"}}]}, {"usecase": {"name": "Validate Borrower Name and Flood Zone", "scenario": "Bot validates the borrower name and checks if the property is in a flood zone.", "actors": ["Bot"], "preconditions": "Details have been extracted from the Flood Certificate PDF", "steps": ["Bot compares the borrower name with the stored details in the LOS portal", "If borrower name matches, Bot validates the flood zone identity and property address", "If the property is not in a flood zone, Bot navigates to the Fraud Ordering page and orders a Fraud Certificate. Once ordered, a native PDF is generated", "If the property is in a flood zone, Bot takes action to alert via email, saves, and exits the process"]}, "testcases": [{"name": "Valid Borrower Name and Non-Flood Zone Property", "description": "Bot successfully validates the borrower name and confirms that the property is not in a flood zone.", "input": {"borrowerName": "John Doe", "propertyAddress": "123 Main Street, Anytown, USA"}, "expected": {"outcome": "Validation successful and non-flood zone property", "action": "Navigate to Fraud Ordering page"}}, {"name": "Valid Borrower Name and Flood Zone Property", "description": "Bot identifies that the borrower name matches and the property is in a flood zone.", "input": {"borrowerName": "Jane Smith", "propertyAddress": "456 Elm Street, Sometown, USA"}, "expected": {"outcome": "Flood zone property identified", "action": "Take action to alert via email, save, and exit the process"}}, {"name": "Mismatched Borrower Name", "description": "Bot identifies a mismatch between the borrower name and the stored details in the LOS portal.", "input": {"borrowerName": "Robert Brown", "propertyAddress": "789 Oak Avenue, Otherstown, USA"}, "expected": {"outcome": "Borrower name mismatch", "action": "No further action taken"}}, {"name": "Invalid or Missing Property Address", "description": "Bot encounters an invalid or missing property address during validation.", "input": {"borrowerName": "Amanda Green", "propertyAddress": ""}, "expected": {"outcome": "Invalid or missing property address", "action": "No further action taken"}}]}, {"usecase": {"name": "Process Flood Condition Code", "scenario": "Bot processes the Flood Condition Code from the PDF and takes necessary actions.", "actors": ["Bot"], "preconditions": "Flood Certificate PDF has been generated", "steps": ["Bot checks for the Condition Code (High, Medium, Low) in the PDF", "If the PDF contains a Condition Code of High, Medium, or Low priority, Bot extracts the description from the PDF", "Bot navigates to the Condition pane and inserts the extracted description for Fraudulence activity", "Bot saves and exits the process"]}, "testcases": [{"name": "Valid High Priority Condition Code Processing", "description": "Verify that the bot successfully processes a high priority flood condition code from the PDF and takes necessary actions.", "input": {"pdf_content": "Sample PDF content with High priority flood condition code."}, "expected": {"outcome": "Processing successful, High priority condition code action taken.", "status": "Success"}}, {"name": "Valid Medium Priority Condition Code Processing", "description": "Check if the bot correctly processes a medium priority flood condition code from the PDF and takes necessary actions.", "input": {"pdf_content": "PDF content with Medium priority flood condition code."}, "expected": {"outcome": "Processing successful, Medium priority condition code action taken.", "status": "Success"}}, {"name": "Valid Low Priority Condition Code Processing", "description": "Ensure that the bot accurately processes a low priority flood condition code from the PDF and takes necessary actions.", "input": {"pdf_content": "Flood certificate PDF with Low priority flood condition code."}, "expected": {"outcome": "Processing successful, Low priority condition code action taken.", "status": "Success"}}, {"name": "No Condition Code Found in PDF", "description": "Test the bot's functionality when no condition code is found in the PDF.", "input": {"pdf_content": "PDF content without any flood condition code."}, "expected": {"outcome": "No condition code found, no action taken", "status": "No Code Found"}}, {"name": "Invalid PDF Format", "description": "Check if the bot handles the case where an invalid PDF format is provided for processing.", "input": {"pdf_content": "Invalid PDF file"}, "expected": {"outcome": "Invalid PDF format, unable to process", "status": "Processing Failed"}}]}, {"usecase": {"name": "Provide Medication List and Stock", "scenario": "Capturing the patient's medication list and current stock", "actors": ["Patient", "Bot"], "preconditions": "Bot is initialized and patient's medication list and stock details are available", "steps": ["Patient shares medication list and current stock with the bot in the form of an excel sheet", "Bot receives and validates the medication list and stock details", "Bot updates the patient's medication list and stock in the system"]}, "testcases": [{"name": "Valid Medication List and Stock Submission", "description": "Verify that the bot successfully receives and updates the patient's medication list and stock details.", "input": {"fileFormat": "Excel", "fileSize": "150KB", "validataionResult": "Pass"}, "expected": {"outcome": "Medication list and stock details updated successfully", "status": "Updated"}}, {"name": "Invalid File Format", "description": "Verify that the bot rejects the submission if the file format is not in Excel format.", "input": {"fileFormat": "PDF", "fileSize": "200KB", "validationResult": "Fail"}, "expected": {"outcome": "Invalid file format", "status": "Not Updated"}}, {"name": "Large File Size", "description": "Verify that the bot rejects the submission if the file size exceeds the allowed limit.", "input": {"fileFormat": "Excel", "fileSize": "2MB", "validationResult": "Fail"}, "expected": {"outcome": "File size exceeds the limit", "status": "Not Updated"}}]}, {"usecase": {"name": "Fetch Pharmacy Contact and Patient's Kin Details", "scenario": "Obtaining the nearest pharmacy contact and patient's kin details", "actors": ["Bot"], "preconditions": "Bot is initialized and patient's pharmacy and kin details are available", "steps": ["Bot retrieves the nearest pharmacy contact number through a predefined process", "Bot obtains the contact details of the patient's kin for emergency purposes"]}, "testcases": [{"name": "Valid Pharmacy Contact Retrieval", "description": "Verify that the bot can retrieve the nearest pharmacy contact number", "input": {"location": "patient_location"}, "expected": {"outcome": "Pharmacy contact number retrieved successfully", "status": "Contact available"}}, {"name": "Invalid Pharmacy Contact Retrieval", "description": "Verify the scenario when the bot cannot retrieve the nearest pharmacy contact number", "input": {"location": "invalid_patient_location"}, "expected": {"outcome": "Pharmacy contact number retrieval failed", "status": "Contact unavailable"}}, {"name": "Valid Patient's Kin Contact Details Retrieval", "description": "Verify that the bot can obtain the contact details of the patient's kin for emergency purposes", "input": {"patientID": "patient_id"}, "expected": {"outcome": "Patient's kin contact details obtained successfully", "status": "Details available"}}, {"name": "Invalid Patient's Kin Contact Details Retrieval", "description": "Verify the scenario when the bot cannot obtain the contact details of the patient's kin for emergency purposes", "input": {"patientID": "invalid_patient_id"}, "expected": {"outcome": "Patient's kin contact details retrieval failed", "status": "Details unavailable"}}]}, {"usecase": {"name": "Update Medication Stock Details", "scenario": "Keeping the stocking sheet updated with the patient's medication details", "actors": ["Bot"], "preconditions": "Bot has the patient's medication list and stock details, and pharmacy contact and patient's kin details are available", "steps": ["Bot records the patient's medication details in the stocking sheet", "Bot updates the stocking sheet with the pharmacy contact and patient's kin details"]}, "testcases": [{"name": "Valid Medication Details Recording", "description": "Verify that Bot can successfully record the patient's medication details", "input": {"medicationDetails": {"patientName": "John Doe", "medicationList": ["Medicine A", "Medicine B", "Medicine C"], "stockDetailsAvailable": true}}, "expected": {"outcome": "Medication details recorded successfully", "status": "Success"}}, {"name": "Invalid/Empty Medication Details Recording", "description": "Verify that the system handles the case where Bot tries to record invalid or empty medication details", "input": {"medicationDetails": {"patientName": "", "medicationList": [], "stockDetailsAvailable": false}}, "expected": {"outcome": "Failed to record medication details", "status": "Failure"}}, {"name": "Valid Stock Details Update", "description": "Verify that Bot can successfully update the stocking sheet with pharmacy contact and patient's kin details", "input": {"stockDetails": {"patientName": "John Doe", "pharmacyContact": "Pharma X - 12345", "patientKinDetails": {"name": "Jane Doe", "contact": "67890"}}}, "expected": {"outcome": "Stocking sheet updated successfully", "status": "Success"}}]}, {"usecase": {"name": "Schedule Medication Stock Check", "scenario": "Scheduling regular checks for the patient's medication stock", "actors": ["Bot"], "preconditions": "Bot is initialized and has access to the patient's medication list and stock details", "steps": ["Bot sets itself to run the stock check process every day", "Bot verifies if the patient has sufficient medication stock for the next 7 days"]}, "testcases": [{"name": "Valid Schedule Set", "description": "Verify that the bot can successfully set itself to run the stock check process daily", "input": {"frequency": "daily"}, "expected": {"outcome": "Schedule set successfully", "status": "Success"}}, {"name": "Insufficient Stock Check", "description": "Verify that the bot can detect insufficient medication stock for the next 7 days", "input": {"patientMedicationList": {"medication": "MedicineX", "currentStock": 5, "dailyDosage": 3}}, "expected": {"outcome": "Insufficient stock detected", "status": "Detected"}}]}, {"usecase": {"name": "Send Medicine Delivery Reminder", "scenario": "Sending reminders for medicine delivery when stock is low", "actors": ["Bot", "Nearest Pharmacy", "Patient's Kin"], "preconditions": "Bot has identified insufficient medication stock for the patient", "steps": ["Bot notifies the nearest pharmacy about the need for medicine delivery or adds the required medication to the online cart for purchase", "Bot sends a reminder to the patient's kin about the low medication stock"]}, "testcases": [{"name": "Low Stock Notification to Pharmacy", "description": "Verify that the bot can notify the nearest pharmacy about the need for medicine delivery when the stock is low.", "input": {"notificationType": "pharmacy", "medicationRequired": ["Paracetamol", "Amoxicillin"]}, "expected": {"outcome": "Notification sent successfully to pharmacy", "status": "Sent"}}, {"name": "Low Stock Medication Addition to Cart", "description": "Verify that the bot can add the required medication to the online cart for purchase when the stock is low.", "input": {"cartAddition": true, "medicationToAdd": ["Paracetamol", "Amoxicillin"]}, "expected": {"outcome": "Medication added to cart successfully", "status": "Added"}}, {"name": "Low Stock Reminder to Patient's Kin", "description": "Verify that the bot can send a reminder to the patient's kin about the low medication stock.", "input": {"reminderType": "patientKin", "patientName": "John Doe"}, "expected": {"outcome": "Reminder sent successfully to patient's kin", "status": "Sent"}}]}, {"usecase": {"name": "Confirm Medicine Receipt", "scenario": "Confirming receipt of delivered medication", "actors": ["Patient"], "preconditions": "Patient has received the delivered medication", "steps": ["Patient responds to the SMS confirming the receipt of the medicine"]}, "testcases": [{"name": "Successful Receipt Confirmation", "description": "Verify that the patient can successfully confirm the receipt of delivered medication", "input": {"response": "Confirmed"}, "expected": {"outcome": "Receipt confirmation recorded", "status": "Success"}}, {"name": "Invalid Receipt Confirmation", "description": "Verify that the system handles the case where the patient tries to confirm receipt with an invalid response", "input": {"response": "Not received"}, "expected": {"outcome": "Invalid confirmation response", "status": "Failed"}}]}, {"usecase": {"name": "Notify Workflow on Medicine Receipt", "scenario": "Notifying the workflow about the receipt of medication", "actors": ["Twilio Flow", "Bot"], "preconditions": "Patient has confirmed the receipt of the delivered medicine", "steps": ["Twilio Flow notifies the workflow about the received medicine", "Bot updates the stocking sheet with the new medication details"]}, "testcases": [{"name": "Notify Workflow on Medicine Receipt - Successful", "description": "Verify that the workflow is successfully notified about the receipt of medication and stocking sheet is updated.", "input": {"medicineReceiptConfirmed": true, "medicineDetails": {"name": "Paracetamol", "quantity": 100, "expiryDate": "2023-12-31"}}, "expected": {"workflowNotification": "success", "stockingSheetUpdate": "success"}}, {"name": "Notify Workflow on Medicine Receipt - Receipt Not Confirmed", "description": "Verify the handling when patient confirmation of medicine receipt is not received.", "input": {"medicineReceiptConfirmed": false, "medicineDetails": {"name": "Amoxicillin", "quantity": 50, "expiryDate": "2023-11-30"}}, "expected": {"workflowNotification": "failure", "stockingSheetUpdate": "not applicable"}}]}, {"usecase": {"name": "Capture Orchestrator Logs", "scenario": "The system captures the orchestrator logs to be used as input for predicting the next process failure time.", "actors": ["RPA Process", "AI Model"], "preconditions": "The RPA process must have an orchestrator that logs process activities.", "steps": ["The orchestrator logs the activities of the RPA process.", "The logs are collected and prepared to be used as input for the AI model."]}, "testcases": [{"name": "Capture Orchestrator Logs Successfully", "description": "Verify that the orchestrator successfully captures and prepares logs for AI model input.", "input": {}, "expected": {"outcome": "Orchestrator logs captured and prepared successfully", "status": "Captured"}}, {"name": "RPA Process without Orchestrator", "description": "Verify that the system requires the RPA process to have an orchestrator for capturing logs.", "input": {}, "expected": {"outcome": "Orchestrator logs capture failed", "status": "NoOrchestrator"}}]}, {"usecase": {"name": "Train AI Model", "scenario": "The AI model is trained using historical orchestrator logs to predict the next process failure time.", "actors": ["AI Model Trainer"], "preconditions": "Sufficient historical orchestrator logs of process activities are available for training.", "steps": ["Historical orchestrator logs are collected and preprocessed for training data.", "The AI model trainer develops and trains the AI model using the prepared training data."]}, "testcases": [{"name": "Valid Training Data", "description": "Verify that the AI model trainer can successfully train the AI model using valid historical orchestrator logs.", "input": {"training_data": "historical_orchestrator_logs.csv"}, "expected": {"outcome": "AI model trained successfully", "status": "TrainingCompleted"}}, {"name": "Insufficient Training Data", "description": "Verify that the AI model trainer cannot train the AI model with insufficient historical orchestrator logs.", "input": {"training_data": "incomplete_orchestrator_logs.csv"}, "expected": {"outcome": "AI model training failed", "status": "InsufficientData"}}]}, {"usecase": {"name": "Predict Next Process Failure Time", "scenario": "The AI model predicts the next process failure time based on the input from the orchestrator logs.", "actors": ["AI Model"], "preconditions": "The trained AI model is available and the orchestrator logs are captured.", "steps": ["The AI model receives the orchestrator logs as input.", "The AI model processes the input data to predict the next process failure time.", "The predicted failure time is output by the AI model."]}, "testcases": [{"name": "Predict Next Process Failure Time - Valid Input", "description": "Verify that the AI model can successfully predict the next process failure time with valid orchestrator logs input.", "input": {"orchestratorLogs": "valid_logs_data"}, "expected": {"outcome": "Next process failure time predicted successfully", "status": "Predicted"}}, {"name": "Predict Next Process Failure Time - Invalid Input", "description": "Verify that the AI model handles invalid orchestrator logs input for predicting the next process failure time.", "input": {"orchestratorLogs": "invalid_logs_data"}, "expected": {"outcome": "AI model failed to predict next process failure time", "status": "PredictionFailed"}}]}, {"usecase": {"name": "Design Customer-Oriented Promotional Graphics", "scenario": "BOT designs promotional graphics tailored to customer needs and seeks approval from the SME.", "actors": ["BOT", "SME"], "preconditions": "BOT has access to customer-oriented promotional details and SME is available for approval.", "steps": ["BOT designs promotional graphics using customer-oriented details.", "BOT submits the graphics for approval to the SME."]}, "testcases": [{"name": "Valid Graphic Design and Approval", "description": "Verify that the BOT can successfully design promotional graphics tailored to customer needs and seek approval from the SME.", "input": {"graphicsDetails": "Details about the customer-oriented promotional graphics", "SMEApproval": "Approved"}, "expected": {"outcome": "Graphics designed and approved", "status": "Approved by SME"}}, {"name": "Invalid Graphic Design", "description": "Verify that the system handles the case where BOT tries to design promotional graphics without necessary details.", "input": {"graphicsDetails": "Invalid details", "SMEApproval": "Rejected"}, "expected": {"outcome": "Graphics design failed", "status": "Rejected by SME"}}, {"name": "Bot Submission Without SME Approval", "description": "Verify that the BOT cannot submit graphics for approval without SME's approval.", "input": {"graphicsDetails": "Marketing details", "SMEApproval": "Pending"}, "expected": {"outcome": "Graphics not submitted", "status": "Pending SME approval"}}]}, {"usecase": {"name": "Distribute Promotion Artwork on Social Media and Email", "scenario": "Distribute approved promotion artwork to various social media platforms and email.", "actors": ["BOT", "FB Graph API", "Instagram Marketing API", "Twillio SendGrid API", "Viber Business Account API", "SMS API"], "preconditions": "Promotion artwork is approved by the SME and the distribution platforms are accessible.", "steps": ["BOT initiates distribution of approved promotion artwork through FB Graph API for Facebook, and Instagram Marketing API for Instagram.", "BOT utilizes Twillio SendGrid API for bulk email distribution.", "BOT uses Viber Business Account API for Viber promotions.", "BOT employs SMS API for sending promotional texts."]}, "testcases": [{"name": "Distribute Artwork on Facebook", "description": "Verify that the BOT can successfully distribute the approved promotion artwork on Facebook.", "input": {"platform": "Facebook", "artwork": "artwork_id"}, "expected": {"outcome": "Artwork distributed on Facebook", "status": "Success"}}, {"name": "Distribute Artwork on Instagram", "description": "Verify that the BOT can successfully distribute the approved promotion artwork on Instagram.", "input": {"platform": "Instagram", "artwork": "artwork_id"}, "expected": {"outcome": "Artwork distributed on Instagram", "status": "Success"}}, {"name": "Bulk Email Distribution", "description": "Verify that the BOT can successfully perform bulk email distribution using Twillio SendGrid API.", "input": {"emailContent": "Promotional email content", "targetList": ["email1@example.com", "email2@example.com"]}, "expected": {"outcome": "Promotional email successfully sent to target list", "status": "Success"}}, {"name": "Viber Promotion", "description": "Verify that the BOT can successfully distribute the approved promotion artwork using Viber Business Account API.", "input": {"artwork": "artwork_id", "targetAudience": "Viber users"}, "expected": {"outcome": "Artwork distributed on Viber", "status": "Success"}}, {"name": "SMS Promotion", "description": "Verify that the BOT can successfully send promotional texts using SMS API.", "input": {"message": "Promotional message", "recipients": ["1234567890", "9876543210"]}, "expected": {"outcome": "Promotional texts sent to recipients", "status": "Success"}}]}, {"usecase": {"name": "Update Weekly Promotional Graphics into CRM", "scenario": "The analytical team updates weekly promotional graphics into the CRM, and the SME uploads the details to the CRM.", "actors": ["Analytical Team", "SME"], "preconditions": "Weekly promotions are finalized by the analytical team, and SME has access to update the CRM.", "steps": ["Analytical Team finalizes the weekly promotions.", "SME updates the CRM with the details of weekly promotions."]}, "testcases": [{"name": "Successful Weekly Promotions Update", "description": "Verify that the SME successfully updates the CRM with the details of finalized weekly promotions", "input": {"weeklyPromotions": {"promotionName": "Summer Sale", "discountPercentage": 20, "validityPeriod": "2023-08-15 to 2023-08-22"}}, "expected": {"outcome": "Weekly promotions updated successfully in CRM", "updatedDetails": "Summer Sale - 20% discount for the period 2023-08-15 to 2023-08-22"}}, {"name": "Invalid Weekly Promotions Update", "description": "Verify that the SME cannot update the CRM with incomplete/invalid details of weekly promotions", "input": {"weeklyPromotions": {"promotionName": "Clearance Sale", "discountPercentage": -5, "validityPeriod": "2023-08-15 to 2023-07-30"}}, "expected": {"outcome": "Weekly promotions update failed", "updatedDetails": "No change"}}]}, {"usecase": {"name": "Create Promotion Artwork Using Analytical Details", "scenario": "The bot creates the promotion artwork using analytical details from the CRM.", "actors": ["BOT"], "preconditions": "All promotion details and customer data are updated in the CRM.", "steps": ["BOT retrieves the updated promotion details and customer data from the CRM.", "BOT creates promotion artwork using the analytical details."]}, "testcases": [{"scenario": "Verify that the bot successfully creates promotion artwork using updated analytical details from the CRM.", "steps": [{"step": "BOT retrieves the updated promotion details and customer data from the CRM.", "action": "retrieve_promotion_data", "actor": "BOT"}, {"step": "BOT creates promotion artwork using the analytical details.", "action": "create_promotion_artwork", "actor": "BOT"}], "expected_result": "Promotion artwork created successfully."}, {"scenario": "Verify the system response when promotion details or customer data are not updated in the CRM.", "steps": [{"step": "BOT retrieves the updated promotion details and customer data from the CRM.", "action": "retrieve_promotion_data", "actor": "BOT"}], "expected_result": "Error - Promotion details or customer data not updated in the CRM."}]}, {"usecase": {"name": "Retrieve Product Images and Templates from Azure BLOB", "scenario": "Retrieve product images and templates from the Azure BLOB storage.", "actors": ["BOT"], "preconditions": "BOT has access to the Azure BLOB storage and the required product images and templates are available.", "steps": ["BOT accesses the Azure BLOB storage.", "BOT retrieves the product images and templates."]}, "testcases": [{"name": "Access BLOB Storage", "description": "Verify that the BOT can successfully access the Azure BLOB storage.", "input": {}, "expected": {"outcome": "Access successful", "status": "Success"}}, {"name": "Retrieve Product Images", "description": "Verify that the BOT can retrieve the product images from the Azure BLOB storage.", "input": {}, "expected": {"outcome": "Product images retrieved successfully", "status": "Success"}}, {"name": "Retrieve Product Templates", "description": "Verify that the BOT can retrieve the product templates from the Azure BLOB storage.", "input": {}, "expected": {"outcome": "Product templates retrieved successfully", "status": "Success"}}]}, {"usecase": {"name": "Maintain Status Using APIs", "scenario": "All status maintenance is performed using APIs with no direct interaction with the CRM database.", "actors": ["BOT"], "preconditions": "APIs are available for maintaining status and there is no direct access to the CRM database.", "steps": ["BOT performs status maintenance using the available APIs."]}, "testcases": [{"name": "Valid Status Update", "description": "Verify that the BOT can successfully update the status using the provided APIs", "input": {"apiEndpoint": "https://api.example.com/updateStatus", "payload": {"orderId": "12345", "status": "shipped"}}, "expected": {"outcome": "Status updated successfully", "status": "shipped"}}, {"name": "Invalid Status Update - Unauthorized API Access", "description": "Verify that the system rejects status update when the BOT tries to access the API without proper authentication", "input": {"apiEndpoint": "https://api.example.com/updateStatus", "payload": {"orderId": "54321", "status": "shipped"}}, "expected": {"outcome": "Unauthorized access", "status": "Access Denied"}}, {"name": "Invalid Status Update - Non-existent Order", "description": "Verify that the system handles the case where the BOT tries to update the status of a non-existent order", "input": {"apiEndpoint": "https://api.example.com/updateStatus", "payload": {"orderId": "99999", "status": "shipped"}}, "expected": {"outcome": "Order not found", "status": "Not Found"}}]}, {"usecase": {"name": "Approve or Reject Promotions on CRM", "scenario": "SME approves all promotions on the CRM, while defects lead to rejection and re-initiation of the artwork creation by the bot.", "actors": ["SME", "BOT"], "preconditions": "Promotions are submitted for approval and the SME has access to the CRM.", "steps": ["SME reviews and approves promotions on the CRM.", "In case of defects, SME rejects the promotions, triggering a re-initiation of artwork creation by the bot."]}, "testcases": [{"name": "Valid Promotion Approval", "description": "Ensure that the SME can successfully approve a submitted promotion on the CRM.", "input": {"SME_ID": "SME001", "promotion_ID": "promo123"}, "expected": {"outcome": "Promotion approved successfully", "status": "Approved"}}, {"name": "Rejected Promotion due to Defects", "description": "Test the scenario where the SME rejects the promotion due to defects, triggering a re-initiation of artwork creation by the bot.", "input": {"SME_ID": "SME002", "promotion_ID": "promo456", "defects": "Incorrect pricing information"}, "expected": {"outcome": "Promotion rejected due to defects", "status": "Rejected - Artwork re-initiated"}}, {"name": "Invalid Promotion Approval", "description": "Verify that the system handles the case where the SME tries to approve an invalid or non-existent promotion.", "input": {"SME_ID": "SME003", "promotion_ID": "invalidPromo789"}, "expected": {"outcome": "Promotion approval failed", "status": "Not Approved"}}]}, {"usecase": {"name": "Search Files Older Than Given Days", "scenario": "The automation searches for files existing older than the specified number of days in the source path.", "actors": "Automation System", "preconditions": "The source path must be accessible and the automation system must have the necessary permissions.", "steps": ["The automation system retrieves the configurable parameter for the number of days from the Config file or an Assets.", "The automation system searches for files older than the specified number of days in the source path.", "If files older than the specified number of days exist, the automation system proceeds to the next step.", "If no files older than the specified number of days exist, the process ends with a notification that no action was taken."]}, "testcases": [{"name": "Valid File Search", "description": "Verify that the automation system can successfully search for files older than the specified number of days in the source path.", "input": {"sourcePath": "/source/documents", "numberOfDays": 30}, "expected": {"outcome": "Files older than 30 days are found", "status": "Proceed"}}, {"name": "No Older Files Found", "description": "Verify that the automation system handles the case where no files older than the specified number of days exist in the source path.", "input": {"sourcePath": "/source/documents", "numberOfDays": 60}, "expected": {"outcome": "No files older than 60 days found", "status": "NoActionTaken"}}, {"name": "Invalid Source Path", "description": "Verify that the automation system handles the scenario where the provided source path is not accessible.", "input": {"sourcePath": "/invalid/path", "numberOfDays": 15}, "expected": {"outcome": "Source path not accessible", "status": "Failed"}}]}, {"usecase": {"name": "Delete Files Older Than Given Days", "scenario": "The automation deletes all the files older than the specified number of days in the source path.", "actors": "Automation System", "preconditions": "Files older than the specified number of days must exist in the source path.", "steps": ["The automation system initiates the deletion of files older than the specified number of days in the source path.", "The automation system confirms the deletion of the files.", "The automation system checks if the files are successfully deleted.", "If files are successfully deleted, the process continues to the next step.", "If files are not successfully deleted, the system sends an error notification."]}, "testcases": [{"name": "Delete Files Older Than Given Days - Valid", "description": "Verify that the automation system can successfully delete files older than the specified number of days", "input": {"sourcePath": "/path/to/source", "olderThanDays": 30}, "expected": {"outcome": "Files successfully deleted", "status": "Success"}}, {"name": "Delete Files Older Than Given Days - Invalid Path", "description": "Verify that the automation system handles the case where the source path does not exist", "input": {"sourcePath": "/nonexistent/path", "olderThanDays": 30}, "expected": {"outcome": "Deletion failed", "status": "InvalidPath"}}, {"name": "Delete Files Older Than Given Days - No Files to Delete", "description": "Verify that the automation system handles the case where there are no files older than the specified number of days", "input": {"sourcePath": "/path/with/no/files", "olderThanDays": 30}, "expected": {"outcome": "No files to delete", "status": "NoFilesFound"}}, {"name": "Delete Files Older Than Given Days - Error Notification", "description": "Verify that the automation system sends an error notification if files are not successfully deleted", "input": {"sourcePath": "/path/with/permission/error", "olderThanDays": 30}, "expected": {"outcome": "Error notification sent", "status": "Error"}}]}, {"usecase": {"name": "Send Result via Email", "scenario": "The automation sends the result of the file purge process to the required team via email.", "actors": "Automation System", "preconditions": "The email configuration must be set up and accessible by the automation system.", "steps": ["The automation system prepares the result report of the file purge process.", "The automation system sends the result report via email to the required team.", "The automation system confirms the successful delivery of the email."]}, "testcases": [{"name": "Valid Email Result Delivery", "description": "Verify that the automation system successfully sends the result report of the file purge process via email to the required team.", "input": {"reportDetails": "File Purge Process Report", "teamEmail": "team@example.com"}, "expected": {"outcome": "Result report delivered successfully", "status": "Successful", "confirmation": "Email delivery confirmed"}}, {"name": "Missing Email Configuration", "description": "Verify the behavior when the email configuration is not set up or accessible by the automation system.", "input": {"reportDetails": "File Purge Process Report", "teamEmail": "team@example.com"}, "expected": {"outcome": "Email result delivery failed", "status": "Unsuccessful"}}]}, {"usecase": {"name": "Build Project in RE Framework", "scenario": "The user builds the project using the RE Framework for record creation bot.", "actors": ["Developer"], "preconditions": ["UiPath Studio Installed"], "steps": ["Developer opens UiPath Studio.", "Developer creates a new project in UiPath Studio.", "Developer selects the RE Framework template for the project.", "Developer sets up the project following the RE Framework structure and best practices."]}, "testcases": [{"name": "Build Project with RE Framework Template", "description": "Verify that the developer can successfully build a project using the RE Framework template.", "input": {"tool": "UiPath Studio", "projectType": "RE Framework"}, "expected": {"outcome": "Project built successfully", "status": "Successful"}}, {"name": "Invalid Project Type Selection", "description": "Verify that the system handles the case where the developer selects an invalid project type.", "input": {"tool": "UiPath Studio", "projectType": "Invalid Type"}, "expected": {"outcome": "Project build failed", "status": "InvalidProjectType"}}]}, {"usecase": {"name": "Use RE Framework without Queues", "scenario": "The user implements the record creation bot using the RE Framework without utilizing queues.", "actors": ["Developer"], "preconditions": ["UiPath Studio Installed", "Project built in RE Framework"], "steps": ["Developer configures the data sources without utilizing queues for processing.", "Developer implements error handling and logging within the RE Framework structure.", "Developer tests the bot to ensure it performs the record creation without queues effectively."]}, "testcases": [{"name": "Configure Data Sources without Queues", "description": "Verify that the developer can configure data sources without utilizing queues for processing.", "input": {"dataSources": ["database", "API"]}, "expected": {"outcome": "Data sources configured", "status": "Success"}}, {"name": "Implement Error Handling in RE Framework", "description": "Ensure that error handling and logging are implemented within the RE Framework structure.", "input": {"errorTypes": ["exception", "system error"]}, "expected": {"outcome": "Error handling implemented", "status": "Success"}}, {"name": "Test Record Creation without Queues", "description": "Test the bot to ensure it performs the record creation effectively without utilizing queues.", "input": {"testData": {"records": 10}}, "expected": {"outcome": "Record creation without queues performed effectively", "status": "Success"}}]}, {"usecase": {"name": "Step by Step Demonstration (LIVE Build)", "scenario": "The user provides a step-by-step live demonstration of building the record creation bot using RE Framework.", "actors": ["Instructor"], "preconditions": ["UiPath Studio Installed", "Project built in RE Framework"], "steps": ["Instructor schedules a live session for the demonstration.", "Instructor starts the live demonstration and provides step-by-step guidance on building the record creation bot using the RE Framework.", "Instructor addresses questions and clarifies doubts during the live session."]}, "testcases": [{"name": "Valid Live Demonstration Scheduling", "description": "Verify that the instructor can successfully schedule a live session for the demonstration.", "input": {"scheduledDateTime": "2023-11-30T10:00:00", "demonstrationType": "Step-by-Step using RE Framework"}, "expected": {"outcome": "Live session scheduled successfully", "status": "Scheduled"}}, {"name": "Demonstration Start", "description": "Verify that the instructor can start the live demonstration successfully.", "input": {"startedAt": "2023-11-30T10:00:00"}, "expected": {"outcome": "Live demonstration started", "status": "In Progress"}}, {"name": "Incomplete RE Framework Project for Demonstration", "description": "Verify the response when the instructor tries to demonstrate with an incomplete or incorrect RE Framework project.", "input": {"projectStatus": "Incomplete"}, "expected": {"outcome": "Demonstration failed due to incomplete RE Framework project", "status": "Failed"}}, {"name": "Addressing Questions during Live Session", "description": "Verify that the instructor is able to address questions and clarify doubts during the live session.", "input": {"questionsAsked": ["How to handle exceptions in RE Framework?"]}, "expected": {"outcome": "Questions addressed and doubts clarified", "status": "Resolved"}}]}, {"usecase": {"name": "Follow Industry Standards and Best Practices", "scenario": "The user ensures that the record creation bot project follows industry standards and best practices.", "actors": ["Developer"], "preconditions": ["UiPath Studio Installed", "Project built in RE Framework"], "steps": ["Developer conducts a review of the project to ensure adherence to industry standards and best practices.", "Developer incorporates necessary changes to align the project with industry standards and best practices.", "Developer documents the project's compliance with industry standards and best practices."]}, "testcases": [{"name": "Review Project Adherence", "description": "Developer conducts a review of the project to ensure adherence to industry standards and best practices.", "input": {"projectName": "Record Creation Bot"}, "expected": {"outcome": "Adherence to standards checked", "status": "Completed"}}, {"name": "Incorporate Necessary Changes", "description": "Developer incorporates necessary changes to align the project with industry standards and best practices.", "input": {"changes": ["Implement error handling according to industry standards", "Ensure consistent naming conventions for activities"]}, "expected": {"outcome": "Changes incorporated successfully", "status": "Completed"}}, {"name": "Document Compliance", "description": "Developer documents the project's compliance with industry standards and best practices.", "input": {"projectName": "Record Creation Bot", "complianceDetails": "Documentation regarding adherence to industry standards and best practices"}, "expected": {"outcome": "Compliance documented", "status": "Completed"}}]}, {"usecase": {"name": "Perform Risk Classification of Credit Operations", "scenario": "The system calculates the risk classification for all credit operations released.", "actors": ["System", "Employee"], "preconditions": "Credit operations data must be available for risk classification.", "steps": ["The system gathers the necessary data for each credit operation, including associate risk (RA) and operation risk (RO).", "The system automatically updates the value for associate risk (RA).", "Employee manually inputs the operation risk (RO) based on payment capacity/adequacy, term, and guarantee.", "The employee selects the best guarantee criterion from the four available options (very low risk, medium and low risk, 1st degree, and very high risk).", "The system calculates the operation provision (PO) using the formula (RA+RO)/2.", "The system classifies the credit operation based on the calculated operation provision (PO)."]}, "testcases": [{"name": "Calculate Risk Classification - Valid Input", "description": "Verify that the system accurately calculates the risk classification for a credit operation with valid input data", "input": {"associateRisk": 3, "operationRisk": 2, "guaranteeCriterion": "1st degree"}, "expectedOutcome": "The credit operation is classified as medium risk based on the calculated operation provision (PO)"}, {"name": "Calculate Risk Classification - Invalid Associate Risk", "description": "Test the system's handling of an invalid associate risk value during risk classification", "input": {"associateRisk": -1, "operationRisk": 2, "guaranteeCriterion": "medium and low risk"}, "expectedOutcome": "The system rejects the input due to an invalid associate risk value"}, {"name": "Calculate Risk Classification - Invalid Guarantee Criterion", "description": "Evaluate the system's response when an invalid guarantee criterion is provided during risk classification", "input": {"associateRisk": 4, "operationRisk": 3, "guaranteeCriterion": "high risk"}, "expectedOutcome": "The system rejects the input due to an invalid guarantee criterion"}]}, {"usecase": {"name": "Automate Risk Classification Process", "scenario": "The system automates the risk classification process to reduce operational load and potential errors.", "actors": ["System", "Employee"], "preconditions": "Credit operations data must be available and the risk classification process should be activated.", "steps": ["The system automatically gathers and updates associate risk (RA) for each credit operation.", "Employee inputs the operation risk (RO) based on payment capacity/adequacy, term, and guarantee.", "The system provides the available guarantee criteria for the employee to select the best option for the operation.", "The system calculates the operation provision (PO) using the formula (RA+RO)/2.", "The system classifies the credit operation based on the calculated operation provision (PO).", "Employee verifies and confirms the automated risk classification results."]}, "testcases": [{"name": "Automated Risk Classification", "description": "Verify that the system successfully automates the risk classification process based on the credit operation's data.", "input": {"creditOperationID": 12345, "associateRisk": 5, "operationRisk": 3, "selectedGuarantee": "Property", "operationProvisionFormula": "(RA+RO)/2"}, "expected": {"outcome": "Risk classification automated successfully", "status": "Classified"}}, {"name": "Error: Missing Operation Risk Input", "description": "Ensure that the system handles the case where the employee fails to input the operation risk.", "input": {"creditOperationID": 67890, "associateRisk": 7, "selectedGuarantee": "Cash"}, "expected": {"outcome": "Error in risk classification process", "status": "Invalid input: Operation risk missing"}}, {"name": "Selecting Guarantee Criteria", "description": "Validate the system's functionality to provide and handle the selection of the available guarantee criteria by the employee.", "input": {"creditOperationID": 24680, "associateRisk": 6, "operationRisk": 4}, "expected": {"outcome": "Guarantee criteria selection successful", "status": "Criteria selected"}}, {"name": "Verify Automated Classification", "description": "Check if the employee can verify and confirm the automated risk classification results successfully.", "input": {"creditOperationID": 13579, "operationProvision": 4.5}, "expected": {"outcome": "Automated risk classification results verified and confirmed", "status": "Confirmed"}}]}, {"usecase": {"name": "Select Best Guarantee Criterion", "scenario": "Employee selects the best guarantee criterion from the available options for the credit operation.", "actors": ["Employee"], "preconditions": "Employee must be evaluating the guarantee criterion for a specific credit operation.", "steps": ["Employee reviews the four available guarantee criteria: very low risk guarantor, medium and low risk guarantor, 1st degree cedular and mercantile pledge, very high risk guarantor.", "Employee selects the most suitable guarantee criterion based on the specific credit operation's requirements and associated risks."]}, "testcases": [{"name": "Valid Guarantee Criterion Selection", "description": "Verify that an employee can successfully select the most suitable guarantee criterion for a specific credit operation.", "input": {"creditOperationID": "CRD1225", "selectedCriterion": "1st degree cedular and mercantile pledge"}, "expected": {"outcome": "Guarantee criterion selection successful", "status": "Criterion Selected"}}, {"name": "Invalid Guarantee Criterion Selection", "description": "Test the scenario where an employee tries to select an inappropriate guarantee criterion for a specific credit operation.", "input": {"creditOperationID": "CRD1225", "selectedCriterion": "very high risk guarantor"}, "expected": {"outcome": "Guarantee criterion selection failed", "status": "Inappropriate Criterion"}}, {"name": "Empty Guarantee Criterion Selection", "description": "Verify that the system handles the case where the employee tries to submit a guarantee criterion without making a selection.", "input": {"creditOperationID": "CRD1225", "selectedCriterion": ""}, "expected": {"outcome": "Guarantee criterion selection failed", "status": "No Criterion Selected"}}]}, {"usecase": {"name": "Automated Payroll Processing", "scenario": "The system automatically processes payroll using the payroll automation module.", "actors": ["HR Manager", "Payroll System"], "preconditions": "Payroll data is available for processing and the automation module is correctly configured.", "steps": ["HR Manager triggers the payroll processing through the automation module.", "The automation module retrieves the payroll data from the HR system.", "The module processes the payroll data, taking into account tax regulations and other relevant factors.", "The system updates the payroll records and generates the necessary reports.", "HR Manager reviews the processed payroll data and reports for accuracy."]}, "testcases": [{"name": "Valid Payroll Processing", "description": "Verify that the system successfully processes payroll using the automation module.", "input": {"payrollData": "payroll_data.csv", "taxRegulations": "tax_regulations.json"}, "expected": {"outcome": "Payroll processing successful", "reportsGenerated": true, "accuracy": "High"}}, {"name": "Invalid Payroll Data", "description": "Verify that the system handles the case where payroll data is missing or incorrect.", "input": {"payrollData": "", "taxRegulations": "tax_regulations.json"}, "expected": {"outcome": "Payroll processing failed", "error": "Invalid or missing payroll data"}}, {"name": "Inaccurate Payroll Processing", "description": "Verify that the system handles the case where the processed payroll data is inaccurate.", "input": {"payrollData": "payroll_data.csv", "taxRegulations": "tax_regulations.json"}, "expected": {"outcome": "Payroll processing successful", "reportsGenerated": true, "accuracy": "Low", "notificationSent": "HR Manager"}}]}, {"usecase": {"name": "Automated Record Updates", "scenario": "The system automatically updates employee records to reflect changes in payroll information.", "actors": ["HR Manager", "Payroll System"], "preconditions": "Changes in employee payroll information are available and the automation module is properly configured.", "steps": ["HR Manager initiates the record update process through the automation module.", "The automation module retrieves the updated payroll information for the affected employees.", "The module applies the changes to the employee records in the HR system.", "The system verifies the updated records for accuracy and consistency."]}, "testcases": [{"name": "Valid Record Update", "description": "Verify that the system successfully updates employee records with valid payroll information changes", "input": {"employeeRecords": {"employeeId": 123, "payrollInformation": {"salary": 60000, "bankAccount": "1234567890"}}}, "expected": {"outcome": "Employee records updated successfully", "verification": "Records accurately reflect the payroll changes"}}, {"name": "Empty Payroll Information", "description": "Verify that the system handles the case where the payroll information changes are empty", "input": {"employeeRecords": {"employeeId": 456, "payrollInformation": {}}}, "expected": {"outcome": "Record update failed", "verification": "No change in the employee records"}}]}, {"usecase": {"name": "Automated Tax Compliance", "scenario": "The system automatically ensures tax compliance during payroll processing.", "actors": ["HR Manager", "Payroll System", "Tax Authority"], "preconditions": "Tax regulations and updates are integrated into the automation module.", "steps": ["HR Manager initiates the payroll processing through the automation module.", "The automation module checks for the latest tax regulations and updates.", "The module applies the relevant tax calculations and deductions to the payroll data.", "The system generates tax reports and submits the necessary information to the tax authority.", "HR Manager reviews the tax reports for accuracy and compliance."]}, "testcases": [{"name": "Valid Payroll Processing", "description": "Verify that the system performs automated tax compliance during payroll processing.", "input": {"employeeID": "EMP1001", "payrollData": {"salary": 5000, "bonus": 1000, "deductions": {"healthInsurance": 200, "retirementPlan": 300}}}, "expected": {"outcome": "Payroll processing successful", "reportGeneration": "Tax reports generated", "submissionStatus": "Submitted to tax authority", "reviewOutcome": "Tax reports accurate and compliant"}}, {"name": "Invalid Tax Regulation Integration", "description": "Verify that the system handles the case where the latest tax regulations and updates are not integrated into the automation module.", "expected": {"outcome": "Payroll processing failed", "reportGeneration": "Tax reports not generated", "submissionStatus": "Not submitted to tax authority"}}]}, {"usecase": {"name": "Automate Audit Processes", "scenario": "An auditor utilizes the RPA robot to automate audit processes.", "actors": "Auditor", "preconditions": "The RPA suite must be accessible and configured for audit automation.", "steps": ["Auditor accesses the RPA suite for audit automation.", "Auditor selects the specific audit process to be automated.", "The RPA robot executes the audit process based on the defined parameters and rules.", "The RPA robot generates audit reports and updates relevant documentation."]}, "testcases": [{"name": "Access RPA Suite for Audit Automation", "description": "Verify that an auditor can access the RPA suite for audit automation.", "input": {}, "expected": {"outcome": "RPA suite accessed successfully for audit automation", "status": "Accessed"}}, {"name": "Select Specific Audit Process for Automation", "description": "Verify that an auditor can select a specific audit process for automation within the RPA suite.", "input": {}, "expected": {"outcome": "Specific audit process selected for automation", "status": "Selected"}}, {"name": "Execute Audit Process Using RPA Robot", "description": "Verify that the RPA robot successfully executes the audit process based on defined parameters and rules.", "input": {}, "expected": {"outcome": "Audit process executed successfully by RPA robot", "status": "Executed"}}, {"name": "Generate Audit Reports and Update Documentation", "description": "Verify that the RPA robot generates audit reports and updates relevant documentation after completing the audit process.", "input": {}, "expected": {"outcome": "Audit reports generated and documentation updated", "status": "Generated&Updated"}}]}, {"usecase": {"name": "Automate Accounting Processes", "scenario": "An accountant uses the RPA robot to automate accounting processes.", "actors": "Accountant", "preconditions": "The RPA suite must be accessible and configured for accounting automation.", "steps": ["Accountant accesses the RPA suite for accounting automation.", "Accountant selects the specific accounting process to be automated.", "The RPA robot executes the accounting process based on the defined parameters and rules.", "The RPA robot updates ledgers, financial statements, and other accounting documentation based on the automated process."]}, "testcases": [{"name": "Access RPA Suite for Accounting Automation", "description": "Verify that an accountant can successfully access the RPA suite for automating accounting processes.", "input": {"accountantID": "ACCT123", "suiteName": "AccountingAutomationSuite"}, "expected": {"outcome": "RPA suite accessed successfully", "status": "Success"}}, {"name": "Select Accounting Process for Automation", "description": "Verify that an accountant can successfully select a specific accounting process to be automated using the RPA robot.", "input": {"processID": "Process456", "processName": "InvoiceGeneration"}, "expected": {"outcome": "Accounting process selected for automation", "status": "Success"}}, {"name": "Execute Automated Accounting Process", "description": "Verify that the RPA robot can successfully execute the selected accounting process based on defined parameters and rules.", "input": {"processID": "Process456", "parameters": {"organization": "ABC Corp", "invoiceDate": "2024-03-15"}}, "expected": {"outcome": "Accounting process executed successfully", "status": "Success"}}, {"name": "Update Accounting Documents", "description": "Verify that the RPA robot can successfully update ledgers, financial statements, and other accounting documentation based on the executed automated process.", "input": {"documentType": "Ledger", "updateDetails": {"entryID": "12345", "amount": 1500.0}}, "expected": {"outcome": "Accounting documents updated successfully", "status": "Success"}}]}, {"usecase": {"name": "Automate Tax Processes", "scenario": "A tax professional leverages the RPA robot to automate tax processes.", "actors": "Tax Professional", "preconditions": "The RPA suite must be accessible and configured for tax automation.", "steps": ["Tax Professional accesses the RPA suite for tax automation.", "Tax Professional selects the specific tax process to be automated.", "The RPA robot executes the tax process based on the defined parameters and tax regulations.", "The RPA robot updates tax filings, calculations, and relevant tax documentation as per the automated process."]}, "testcases": [{"name": "Access RPA Suite for Tax Automation", "description": "Verify that a tax professional can access the RPA suite for tax automation.", "input": {"user": "tax_professional", "accessLevel": "admin"}, "expected": {"outcome": "RPA suite accessed successfully", "status": "Accessible"}}, {"name": "Select Tax Process for Automation", "description": "Verify that a tax professional can select a specific tax process for automation.", "input": {"selectedProcess": "Income Tax Filing"}, "expected": {"outcome": "Tax process selected for automation", "status": "Selected"}}, {"name": "Successful Execution of Tax Process by RPA Robot", "description": "Verify that the RPA robot can successfully execute the tax process based on defined parameters and tax regulations.", "input": {"taxProcessParameters": "standard_parameters", "taxRegulations": "region_specific_regulations"}, "expected": {"outcome": "Tax process executed successfully", "status": "Complete"}}, {"name": "Update Tax Filings and Documentation", "description": "Verify that the RPA robot can update tax filings, calculations, and relevant tax documentation as per the automated process.", "input": {"updatedInformation": "automation_updates"}, "expected": {"outcome": "Tax filings and documentation updated", "status": "Updated"}}]}, {"usecase": {"name": "Automate Corporate Secretarial Processes", "scenario": "A corporate secretary utilizes the RPA robot to automate corporate secretarial processes.", "actors": "Corporate Secretary", "preconditions": "The RPA suite must be accessible and configured for corporate secretarial automation.", "steps": ["Corporate Secretary accesses the RPA suite for corporate secretarial automation.", "Corporate Secretary selects the specific corporate secretarial process to be automated.", "The RPA robot executes the corporate secretarial process based on the defined parameters and regulatory requirements.", "The RPA robot updates corporate governance documents, filings, and other secretarial documentation following the automated process."]}, "testcases": [{"name": "Automate Specific Secretarial Process", "description": "Verify that the RPA robot can successfully automate a specific corporate secretarial process.", "input": {"selectedProcess": "Annual Report Filing", "parameters": "Fiscal year: 2023, Regulatory requirements: XYZ"}, "expected": {"outcome": "Corporate secretarial process automated", "status": "Documents updated"}}, {"name": "Access RPA Suite", "description": "Verify that the corporate secretary can access the RPA suite for corporate secretarial automation.", "input": {"credentials": "username: abc, password: xyz"}, "expected": {"outcome": "RPA suite accessed successfully", "status": "Accessible for automation"}}]}, {"usecase": {"name": "Send Account Number to Orchestrator Queue", "scenario": "Web application sends the account number to the orchestrator queue for processing by the Ui-Robot.", "actors": ["Web Application", "Orchestrator Queue", "Ui-Robot"], "preconditions": "Web application must have received a payment disagreement request from the customer.", "steps": ["Web application identifies the payment disagreement and retrieves the account number related to the conflict.", "Web application sends the account number to the orchestrator queue for further processing."]}, "testcases": [{"name": "Valid account number", "description": "Web application sends a valid account number to the orchestrator queue", "input": {"accountNumber": "ACC123456"}, "expected": {"outcome": "account number sent successfully", "status": "Processed"}}, {"name": "Invalid account number", "description": "Web application sends an invalid account number to the orchestrator queue", "input": {"accountNumber": "invalid"}, "expected": {"outcome": "account number format invalid", "status": "Rejected"}}]}, {"usecase": {"name": "Validate Account in Database", "scenario": "Ui-Robot retrieves the account from the orchestrator queue and validates it in the database.", "actors": ["Ui-Robot", "Database"], "preconditions": "Ui-Robot must have received the account number from the orchestrator queue.", "steps": ["Ui-Robot dequeues the account number from the orchestrator queue.", "Ui-Robot validates the account in the database.", "Ui-Robot provides validation result to the orchestrator."]}, "testcases": [{"name": "Valid account validation", "description": "Ui-Robot retrieves valid account number from the orchestrator queue and validates it successfully in the database", "input": {"accountNumber": "ACC12345"}, "expected": {"outcome": "validation result provided to the orchestrator", "status": "validated"}}, {"name": "Invalid account validation", "description": "Ui-Robot fails to validate the account retrieved from the orchestrator queue in the database", "input": {"accountNumber": "INVALIDACC"}, "expected": {"outcome": "validation result provided to the orchestrator", "status": "invalid"}}]}, {"usecase": {"name": "Provide Data to Requested Application", "scenario": "Ui-Robot provides the requested data to the third-party application based on the validated account number.", "actors": ["Ui-Robot", "Third-Party Application"], "preconditions": "Ui-Robot must have successfully validated the account in the database.", "steps": ["Ui-Robot retrieves the necessary data based on the validated account number.", "Ui-Robot sends the data to the third-party application for conflict resolution."]}, "testcases": [{"name": "valid account number", "description": "Ui-Robot provides data to the third-party application based on a valid and existing account number", "input": {"accountNumber": "1234567890"}, "expected": {"outcome": "data sent successfully", "resolutionStatus": "resolved"}}, {"name": "invalid account number", "description": "Ui-Robot fails to provide data to the third-party application based on an invalid or non-existing account number", "input": {"accountNumber": "9999999999"}, "expected": {"outcome": "data not sent", "resolutionStatus": "unresolved"}}]}, {"usecase": {"name": "Handle Manual Review Request", "scenario": "Ui-Robot receives a request for manual review in case of any failure during the process.", "actors": ["Ui-Robot", "Manual Review Team"], "preconditions": "Ui-Robot encounters a failure while processing the account number or data retrieval.", "steps": ["Ui-Robot acknowledges the failure and receives a manual review request.", "Ui-Robot forwards the request to the manual review team."]}, "testcases": [{"name": "Successful Manual Review Request", "description": "Verify that Ui-Robot successfully requests manual review upon encountering failure during the process.", "input": {"failureType": "data retrieval failure", "requestID": "MR123"}, "expected": {"outcome": "Manual review request forwarded to the manual review team", "status": "Acknowledged"}}, {"name": "Missing Manual Review Request", "description": "Verify that Ui-Robot does not send a manual review request upon encountering a non-qualifying failure during the process.", "input": {"failureType": "minor UI glitch", "requestID": null}, "expected": {"outcome": "No manual review request forwarded", "status": "Not Applicable"}}]}, {"usecase": {"name": "Get Prospective Contacts", "scenario": "Sales team retrieves the list of prospective contacts from Sales Navigator or a relevant tool.", "actors": ["Sales Team"], "preconditions": "Access to Sales Navigator or relevant tool, and availability of prospective contacts in the tool.", "steps": ["Sales team navigates to Sales Navigator or relevant tool.", "Sales team exports the list of prospective contacts in the form of an excel sheet."]}, "testcases": [{"name": "Valid Navigation to Sales Tool", "description": "Verify that the sales team can successfully navigate to Sales Navigator or relevant tool.", "input": {"tool": "Sales Navigator"}, "expected": {"outcome": "Navigation successful", "status": "Available"}}, {"name": "Invalid Navigation to Sales Tool", "description": "Verify that the sales team cannot navigate to an invalid or inaccessible sales tool.", "input": {"tool": "Invalid Tool"}, "expected": {"outcome": "Navigation failed", "status": "Unavailable"}}, {"name": "Export Prospective Contacts", "description": "Verify that the sales team can export the list of prospective contacts in the form of an excel sheet.", "input": {"exportType": "Excel"}, "expected": {"outcome": "Contacts exported successfully", "status": "Available"}}]}, {"usecase": {"name": "Add Customized Sales Message", "scenario": "Sales team adds a customized sales message to the excel sheet containing the list of prospective contacts.", "actors": ["Sales Team"], "preconditions": "Access to the excel sheet containing the list of prospective contacts.", "steps": ["Sales team opens the excel sheet with the list of prospective contacts.", "Sales team adds the customized sales message to the appropriate column in the excel sheet."]}, "testcases": [{"name": "Add customized sales message successfully", "description": "Sales team successfully adds a customized sales message to the excel sheet", "input": {"excelSheet": "prospectiveContacts.xlsx", "customizedMessage": "Exciting new offers for you!"}, "expected": {"outcome": "Customized sales message added successfully", "status": "Success"}}, {"name": "Unable to add customized sales message without excel access", "description": "Sales team attempts to add customized sales message without access to the excel sheet", "input": {"excelSheet": "", "customizedMessage": "Great deals await you!"}, "expected": {"outcome": "Customized sales message not added", "status": "Failed", "error": "Access to excel sheet required"}}]}, {"usecase": {"name": "Read Excel Sheet", "scenario": "Bot reads the content of the excel sheet containing the list of prospective contacts and customized sales message.", "actors": ["Bot"], "preconditions": "Availability of the excel sheet with the list of prospective contacts and customized sales message.", "steps": ["Bot accesses the designated excel sheet.", "Bot reads the content of the sheet to prepare for automated email notifications."]}, "testcases": [{"name": "Accessing designated excel sheet", "description": "Verify if the bot can access the designated excel sheet", "input": {"sheetName": "Prospective Contacts"}, "expected": {"outcome": "Access successful", "status": "Pass"}}, {"name": "Reading content of the excel sheet", "description": "Check if the bot can successfully read the content of the sheet", "input": {"sheetName": "Prospective Contacts"}, "expected": {"outcome": "Content read successfully", "status": "Pass"}}]}, {"usecase": {"name": "Send Automated Email and Calendar Invite", "scenario": "Bot sends automated email notifications along with calendar invites to the prospective contacts.", "actors": ["Bot"], "preconditions": "Availability of the list of prospective contacts and customized sales message in the excel sheet.", "steps": ["Bot composes personalized email notifications using the information from the excel sheet.", "Bot sends email notifications to the prospective contacts.", "Bot sends calendar invites using calendly.com or similar tool to schedule meetings with prospective contacts."]}, "testcases": [{"name": "Compose Personalized Email Notifications", "description": "Verify that the bot can successfully compose personalized email notifications using the information from the excel sheet.", "input": {"excelSheetData": "valid_data.xlsx"}, "expected": {"outcome": "Email notifications composed", "status": "Success"}}, {"name": "Send Email Notifications", "description": "Verify that the bot can successfully send email notifications to the prospective contacts.", "input": {"emailRecipients": ["contact1@example.com", "contact2@example.com"], "messageType": "sales_offer"}, "expected": {"outcome": "Email notifications sent", "status": "Success"}}, {"name": "Send Calendar Invites", "description": "Verify that the bot can successfully send calendar invites using calendly.com or similar tool to schedule meetings with prospective contacts.", "input": {"meetingDate": "2024-04-15", "meetingTime": "3:00 PM", "meetingMedium": "Calendly"}, "expected": {"outcome": "Calendar invites sent", "status": "Success"}}]}, {"usecase": {"name": "Update Sheet Based on Customer Response", "scenario": "Bot updates the excel sheet based on customer responses and sets reminders for the next set of customers.", "actors": ["Bot"], "preconditions": "Responses from the prospective contacts and the availability of the excel sheet.", "steps": ["Bot receives and processes customer responses from the sent email notifications.", "If a response is received, Bot updates the excel sheet with the relevant details.", "If no response is received, Bot sets reminders for the next set of customers in the next run."]}, "testcases": [{"name": "Valid Customer Response", "description": "Bot updates the excel sheet with valid customer response", "input": {"customerResponse": "Interested in product XYZ, scheduled a follow-up"}, "expected": {"outcome": "Excel sheet updated with customer details and follow-up scheduled", "status": "Success"}}, {"name": "No Customer Response", "description": "Bot sets reminder for the next set of customers when no response is received", "input": {"customerResponse": "No response"}, "expected": {"outcome": "Reminder set for next set of customers", "status": "Success"}}]}, {"usecase": {"name": "Process SAP Account Creation Request", "scenario": "A new SAP account creation request is processed by the RPA system.", "actors": ["RPA Robot"], "preconditions": "There is an approved and not completed SAP account creation request in the SharePoint list and the relevant data is available in the Excel file.", "steps": ["RPA Robot retrieves the data from the SharePoint list and Excel file.", "RPA Robot processes the account creation request using SAP Accelerator for Basis without interfacing with the SAP GUI.", "RPA Robot calls the relevant BAPI for creating a new SAP account in the background.", "Once the account is successfully created, RPA Robot updates the SharePoint Excel to tag the request as 'completed' and inputs the created username and password.", "RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account creation."]}, "testcases": [{"name": "Valid Account Creation Request Processing", "description": "Verify that the RPA Robot can successfully process a new SAP account creation request with all necessary data available.", "input": {"requestStatus": "Approved", "dataAvailability": "Available"}, "expected": {"outcome": "Account creation request processed successfully", "status": "Completed"}}, {"name": "Incomplete Data Retrieval", "description": "Verify that the system handles the case where necessary data is not available for processing.", "input": {"requestStatus": "Approved", "dataAvailability": "NotAvailable"}, "expected": {"outcome": "Account creation request processing failed", "status": "IncompleteData"}}, {"name": "Failed Account Creation", "description": "Verify that the system handles the case where the RPA Robot fails to create a new SAP account using SAP Accelerator for Basis and relevant BAPI.", "input": {"requestStatus": "Approved", "dataAvailability": "Available", "creationStatus": "Failed"}, "expected": {"outcome": "Account creation request processing failed", "status": "CreationFailed"}}, {"name": "Incomplete Account Tagging", "description": "Verify that the system handles the case where the RPA Robot fails to update the SharePoint Excel and input the created username and password after successful account creation.", "input": {"requestStatus": "Approved", "dataAvailability": "Available", "creationStatus": "Successful", "taggingStatus": "Incomplete"}, "expected": {"outcome": "Account tagging and update failed", "status": "IncompleteTagging"}}, {"name": "Failed Email Notification", "description": "Verify that the system handles the case where the RPA Robot fails to send email notifications after account creation.", "input": {"requestStatus": "Approved", "dataAvailability": "Available", "creationStatus": "Successful", "taggingStatus": "Completed", "notificationStatus": "Failed"}, "expected": {"outcome": "Email notification sending failed", "status": "NotificationFailed"}}]}, {"usecase": {"name": "Process SAP Account Blocking Request", "scenario": "An SAP account blocking request is processed by the RPA system.", "actors": ["RPA Robot"], "preconditions": "There is an approved and not completed SAP account blocking request in the SharePoint list and the relevant data is available in the Excel file.", "steps": ["RPA Robot retrieves the data from the SharePoint list and Excel file.", "RPA Robot processes the account blocking request using SAP Accelerator for Basis without interfacing with the SAP GUI.", "RPA Robot calls the relevant BAPI for blocking the SAP account in the background.", "Once the account is successfully blocked, RPA Robot updates the SharePoint Excel to tag the request as 'completed'.", "RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account blocking."]}, "testcases": [{"name": "Valid Account Blocking Request", "description": "Verify that the RPA Robot successfully processes a valid SAP account blocking request", "input": {"requestStatus": "Approved", "dataAvailability": "Available"}, "expected": {"outcome": "Account blocking processed successfully", "status": "Success"}}, {"name": "Incomplete Request Data", "description": "Verify that the RPA Robot handles the case when the SAP account blocking request data is incomplete", "input": {"requestStatus": "Approved", "dataAvailability": "Incomplete"}, "expected": {"outcome": "Incomplete data handling", "status": "Failure"}}, {"name": "Invalid Account Blocking Request", "description": "Verify that the RPA Robot handles the case when an invalid SAP account blocking request is received", "input": {"requestStatus": "Not Approved", "dataAvailability": "Available"}, "expected": {"outcome": "Invalid request handling", "status": "Failure"}}]}, {"usecase": {"name": "Process SAP Account Unlocking Request", "scenario": "An SAP account unlocking request is processed by the RPA system.", "actors": ["RPA Robot"], "preconditions": "There is an approved and not completed SAP account unlocking request in the SharePoint list and the relevant data is available in the Excel file.", "steps": ["RPA Robot retrieves the data from the SharePoint list and Excel file.", "RPA Robot processes the account unlocking request using SAP Accelerator for Basis without interfacing with the SAP GUI.", "RPA Robot calls the relevant BAPI for unlocking the SAP account in the background.", "Once the account is successfully unlocked, RPA Robot updates the SharePoint Excel to tag the request as 'completed'.", "RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account unlocking."]}, "testcases": [{"name": "Valid Account Unlocking Request", "description": "Verify that the RPA Robot successfully processes a valid SAP account unlocking request.", "input": {"sharepointData": "Approved unlocking request", "excelData": "relevant account details"}, "expected": {"outcome": "Account unlocking request processed", "status": "Success"}}, {"name": "No Data Available", "description": "Verify that the RPA Robot handles the scenario where no relevant data is available in SharePoint or Excel for the account unlocking request.", "input": {"sharepointData": "No approved unlocking request", "excelData": "No relevant account details"}, "expected": {"outcome": "No data available for request processing", "status": "Failed"}}, {"name": "Failed Account Unlocking", "description": "Verify that the RPA Robot handles the scenario where the account unlocking request processing using SAP Accelerator for Basis fails.", "input": {"sharepointData": "Approved unlocking request", "excelData": "relevant account details", "accountUnlockingStatus": "Failed"}, "expected": {"outcome": "Account unlocking failed", "status": "Failed"}}, {"name": "Completing Request Tagging in Excel", "description": "Verify that the RPA Robot successfully updates the SharePoint Excel to tag the request as 'completed' after unlocking the SAP account.", "input": {"sharepointData": "Approved unlocking request", "excelData": "relevant account details", "accountUnlockingStatus": "Success"}, "expected": {"outcome": "Request tagged as completed in Excel", "status": "Success"}}, {"name": "Notification Emails", "description": "Verify that the RPA Robot sends notification emails to the requestor, RPA admin, and process owner after the account unlocking is completed.", "input": {"notificationRecipients": ["requestor", "RPA admin", "process owner"], "accountUnlockingStatus": "Success"}, "expected": {"outcome": "Notification emails sent", "status": "Success"}}]}, {"usecase": {"name": "Candidate Applies for Open Role", "scenario": "A candidate applies for an open role on the recruitment portal, submitting their resume.", "actors": "Candidate", "preconditions": "Role must be open for applications on the recruitment portal.", "steps": ["Candidate navigates to the role's application page on the recruitment portal.", "Candidate uploads their resume along with other required details.", "The system records the application and the uploaded resume."]}, "testcases": [{"name": "Valid Role Application", "description": "Verify that a candidate can successfully apply for an open role by submitting their resume.", "input": {"role": "Software Engineer", "resume": "candidate_resume.pdf", "otherDetails": "education, experience"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the candidate tries to apply for a role without attaching a resume.", "input": {"role": "Marketing Manager", "resume": "", "otherDetails": "education, experience"}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}]}, {"usecase": {"name": "RPA Bot Downloads and Processes Resumes", "scenario": "RPA bot identifies an open role and downloads resumes of candidates that have applied to the role.", "actors": "RPA Bot", "preconditions": "Resumes must be available for the open role.", "steps": ["RPA bot identifies the open role on the recruitment portal.", "RPA bot downloads the resumes of all candidates who have applied to the role.", "The downloaded resumes are then fed into the document understanding bot for further processing."]}, "testcases": [{"name": "Valid Role Identified and Resumes Downloaded", "description": "Verify that the RPA bot can successfully identify an open role and download resumes of candidates who have applied to it.", "input": {"role": "Data Scientist", "action": "Download"}, "expected": {"outcome": "Resumes downloaded successfully", "processingStatus": "Ready for document understanding bot"}}, {"name": "No Resumes Available for the Role", "description": "Verify that the RPA bot handles the case where no resumes are available for the open role.", "input": {"role": "Frontend Developer", "action": "Download"}, "expected": {"outcome": "No resumes available", "processingStatus": "Not applicable"}}]}, {"usecase": {"name": "Document Understanding Bot Matches Skills and Responsibilities", "scenario": "Document understanding bot matches the skills and responsibilities in the downloaded resumes with the master template defined by the Hiring Manager.", "actors": "Document Understanding Bot", "preconditions": "Resumes must be downloaded and master template defined by Hiring Manager must be available.", "steps": ["Document Understanding Bot analyzes each resume loaded from the RPA bot.", "The bot compares the skills and responsibilities in the resume with the master template defined by the Hiring Manager.", "If the resume contains the required skills and responsibilities, the candidate's resume is forwarded to the Hiring Manager."]}, "testcases": [{"name": "Valid Resume Match", "description": "Verify that the document understanding bot successfully matches skills and responsibilities in the resume with the master template.", "input": {"resumeFile": "candidate_resume.pdf", "masterTemplateFile": "master_template.docx"}, "expected": {"outcome": "Resume forwarded to Hiring Manager", "status": "Matched"}}, {"name": "Invalid Resume Match", "description": "Verify that the document understanding bot handles the case where the skills and responsibilities in the resume do not match with the master template.", "input": {"resumeFile": "another_candidate_resume.pdf", "masterTemplateFile": "master_template.docx"}, "expected": {"outcome": "Resume not forwarded", "status": "Not Matched"}}]}, {"usecase": {"name": "Forward Resume to Hiring Manager", "scenario": "If the candidate's resume matches the required skills and responsibilities, it is forwarded to the Hiring Manager for further review.", "actors": "Document Understanding Bot", "preconditions": "Candidate's resume must match the required skills and responsibilities according to the master template.", "steps": ["Document Understanding Bot sends the candidate's resume to the Hiring Manager for further review and consideration."]}, "testcases": [{"name": "Matching Resume Forwarded", "description": "Verify that the document understanding bot can successfully forward a candidate's resume to the hiring manager when the resume matches the required skills and responsibilities.", "input": {"resume": "candidate_resume.pdf", "skillsMatch": true}, "expected": {"outcome": "Resume forwarded to Hiring Manager", "status": "Under Review"}}, {"name": "Non-matching Resume Not Forwarded", "description": "Verify that the document understanding bot does not forward a candidate's resume to the hiring manager when the resume does not match the required skills and responsibilities.", "input": {"resume": "candidate_resume.pdf", "skillsMatch": false}, "expected": {"outcome": "Resume not forwarded", "status": "Requires Further Qualification"}}]}, {"usecase": {"name": "Notify Candidate of Application Status", "scenario": "If the candidate's resume does not match the required skills and responsibilities, an email is sent to the candidate informing them of their application status.", "actors": "Document Understanding Bot", "preconditions": "Candidate's resume must not match the required skills and responsibilities according to the master template.", "steps": ["Document Understanding Bot sends an email to the candidate, informing them of their application status and the outcome of the resume review process."]}, "testcases": [{"name": "Mismatched Resume Notification", "description": "Verify that the Document Understanding Bot sends an email to the candidate when their resume does not match the required skills and responsibilities.", "input": {"candidateEmail": "candidateemail@example.com", "applicationStatus": "Rejected", "reason": "Resume does not match the required skills and responsibilities"}, "expected": {"outcome": "Email sent to candidate", "notificationType": "Application status", "emailContent": "Notification of application status and resume review outcome sent to the candidate"}}]}, {"usecase": {"name": "Capture Real-Time Video Input", "scenario": "The system captures real-time video input from a camera for sign language recognition.", "actors": ["System", "Camera"], "preconditions": "The system and camera are operational and connected.", "steps": ["The system activates the camera to capture real-time video input.", "The camera captures the user performing sign language gestures.", "The system receives the video input for processing."]}, "testcases": [{"name": "Valid Video Input Capture", "description": "Verify that the system successfully captures real-time video input from a connected and operational camera.", "input": {"camera_status": "operational", "system_connection": "connected"}, "expected": {"outcome": "Video input captured successfully", "status": "Processed"}}, {"name": "Camera Not Operational", "description": "Verify that the system handles the scenario when the camera is not operational for capturing video input.", "input": {"camera_status": "not_operational", "system_connection": "connected"}, "expected": {"outcome": "Video input capture failed", "status": "Camera not operational"}}, {"name": "System Not Connected", "description": "Verify that the system handles the scenario when it is not connected to the camera for capturing video input.", "input": {"camera_status": "operational", "system_connection": "disconnected"}, "expected": {"outcome": "Video input capture failed", "status": "System not connected to camera"}}]}, {"usecase": {"name": "Preprocess Video Input", "scenario": "The system preprocesses the captured video input for sign language recognition.", "actors": ["System"], "preconditions": "The system has received the real-time video input.", "steps": ["The system applies preprocessing techniques to enhance the quality of the video input.", "Preprocessing may include noise reduction, image stabilization, and normalization of lighting conditions."]}, "testcases": [{"name": "Valid Video Input Preprocessing", "description": "Verify that the system successfully preprocesses the captured video input.", "input": "Real-time video input", "steps": ["The system applies preprocessing techniques to enhance the quality of the video input.", "Preprocessing includes noise reduction, image stabilization, and normalization of lighting conditions."], "expected": {"outcome": "Video input preprocessing successful", "result": "Enhanced video input ready for sign language recognition"}}, {"name": "Invalid Video Input Preprocessing", "description": "Verify that the system handles invalid or corrupted video input during preprocessing.", "input": "Corrupted or invalid real-time video input", "steps": ["The system attempts to apply preprocessing techniques to the video input."], "expected": {"outcome": "Video input preprocessing failed", "result": "System detects and reports the corrupted or invalid video input"}}]}, {"usecase": {"name": "Feed Preprocessed Input to Deep Learning Model", "scenario": "The system feeds the preprocessed video input to a trained deep learning model for sign language classification.", "actors": ["System"], "preconditions": "The video input has been preprocessed successfully.", "steps": ["The system passes the preprocessed video frames to the trained deep learning model.", "The model processes the frames to classify and recognize the sign language gestures."]}, "testcases": [{"name": "Valid Input Feed", "description": "Verify that the system successfully feeds preprocessed video input to the trained deep learning model.", "input": {"preprocessed_input": "video_frames_data"}, "expected": {"outcome": "Sign language classification performed successfully", "status": "Success"}}, {"name": "Invalid Input Feed", "description": "Verify that the system handles the scenario when the preprocessed video input is missing or invalid.", "input": {"preprocessed_input": "invalid_video_frames_data"}, "expected": {"outcome": "Error: Invalid input data", "status": "Failed"}}]}, {"usecase": {"name": "Display Predicted Sign", "scenario": "The system displays the predicted sign either as text or as an animated sign on-screen.", "actors": ["System", "Display Interface"], "preconditions": "The deep learning model has classified the sign language gestures.", "steps": ["The system interprets the model's prediction and converts it into text or an animated sign.", "The text or animated sign is displayed on the screen for the user or audience to see."]}, "testcases": [{"name": "Text Display", "description": "Verify if the system correctly displays the predicted sign as text on the screen", "input": {"prediction_type": "text"}, "expected": {"outcome": "Sign displayed as text", "status": "Success"}}, {"name": "Animated Sign Display", "description": "Verify if the system correctly displays the predicted sign as an animated sign on the screen", "input": {"prediction_type": "animated"}, "expected": {"outcome": "Sign displayed as animation", "status": "Success"}}, {"name": "Invalid Prediction Type", "description": "Verify if the system handles invalid prediction types appropriately", "input": {"prediction_type": "audio"}, "expected": {"outcome": "Invalid prediction type error", "status": "Display Error"}}]}, {"usecase": {"name": "Improve Accuracy and Performance", "scenario": "The system continuously improves its accuracy and performance for sign language recognition.", "actors": ["System", "Users"], "preconditions": "The system has been operational and has received user feedback.", "steps": ["The system utilizes data augmentation techniques to enhance the training dataset.", "Model fine-tuning is performed based on user feedback and additional training data.", "User feedback on sign interpretations is collected and incorporated into the system's learning process."]}, "testcases": [{"name": "Data Augmentation", "description": "Verify that the system successfully enhances the training dataset using data augmentation techniques.", "input": {}, "expected": {"outcome": "Training dataset enhanced", "status": "Success"}}, {"name": "Model Fine-Tuning", "description": "Verify that the system performs fine-tuning of the model based on user feedback and additional training data.", "input": {}, "expected": {"outcome": "Model fine-tuned", "status": "Success"}}, {"name": "User Feedback Incorporation", "description": "Verify that the system collects and incorporates user feedback on sign interpretations into the learning process.", "input": {}, "expected": {"outcome": "User feedback incorporated into learning process", "status": "Success"}}]}, {"usecase": {"name": "Automated Data Entry for Payroll Processing", "scenario": "The system automatically processes employee data for payroll, reducing the need for manual data entry.", "actors": ["System", "Payroll Administrator"], "preconditions": "The system has access to updated employee data and the payroll processing module is active.", "steps": ["The system retrieves updated employee data from the HR database.", "The system cross-verifies the employee data for accuracy and completeness.", "The system automatically processes the data for payroll computation and tax deductions.", "The system notifies the Payroll Administrator about the completed payroll processing."]}, "testcases": [{"name": "Valid Payroll Processing", "description": "Verify that the system accurately processes employee data for payroll when all data is correct and complete.", "input": {"employeeData": "valid_employee_data", "payrollModuleStatus": "active"}, "expected": {"outcome": "Payroll processing completed", "notificationStatus": "Notified"}}, {"name": "Invalid Employee Data", "description": "Verify that the system handles incomplete or inaccurate employee data during payroll processing.", "input": {"employeeData": "incomplete_employee_data", "payrollModuleStatus": "active"}, "expected": {"outcome": "Payroll processing failed", "notificationStatus": "Notified"}}, {"name": "Inactive Payroll Module", "description": "Verify that the system notifies the Payroll Administrator when the payroll module is inactive.", "input": {"employeeData": "valid_employee_data", "payrollModuleStatus": "inactive"}, "expected": {"outcome": "Payroll processing not possible", "notificationStatus": "Notified"}}]}, {"usecase": {"name": "Automated Tax Calculation and Filing", "scenario": "The system automatically calculates and files taxes for the payroll, ensuring accuracy and compliance.", "actors": ["System", "Tax Compliance Officer"], "preconditions": "The payroll data is complete and up-to-date, and the tax filing module is active.", "steps": ["The system retrieves the necessary payroll data for tax computation.", "The system utilizes tax laws and regulations to calculate accurate tax amounts.", "The system automatically files tax forms and documents to the IRS or relevant tax authorities.", "The system notifies the Tax Compliance Officer about the completed tax filing."]}, "testcases": [{"name": "Valid Tax Calculation and Filing", "description": "Verify that the system accurately calculates and successfully files taxes for the payroll.", "input": {"payrollData": "payroll_data.csv", "taxModuleStatus": "active"}, "expected": {"outcome": "Tax calculation and filing completed successfully", "filingStatus": "Filed", "notificationSent": true}}, {"name": "Incomplete Payroll Data", "description": "Verify that the system handles the case where the payroll data is incomplete for tax computation and filing.", "input": {"payrollData": "incomplete_payroll_data.csv", "taxModuleStatus": "active"}, "expected": {"outcome": "Tax calculation and filing failed", "filingStatus": "Not Filed", "notificationSent": false}}, {"name": "Inactive Tax Module", "description": "Verify that the system handles the case where the tax module is inactive during tax computation and filing.", "input": {"payrollData": "payroll_data.csv", "taxModuleStatus": "inactive"}, "expected": {"outcome": "Tax calculation and filing failed", "filingStatus": "Not Filed", "notificationSent": false}}]}, {"usecase": {"name": "Automated Payroll Report Generation", "scenario": "The system automatically generates detailed payroll reports for analysis and record-keeping.", "actors": ["System", "Business Analyst"], "preconditions": "The payroll data is processed, and the report generation module is active.", "steps": ["The system compiles payroll data into comprehensive reports based on defined criteria (e.g., pay period, employee categories).", "The system validates the accuracy of the generated reports.", "The system saves the reports in specified formats (e.g., PDF, Excel) for access and analysis.", "The system notifies the Business Analyst about the completed report generation."]}, "testcases": [{"name": "Valid Payroll Report Generation", "description": "Verify that the system can successfully generate a detailed payroll report based on specified criteria.", "input": {"criteria": "monthly", "format": "PDF"}, "expected": {"outcome": "Payroll report generated successfully", "validationStatus": "Validated", "saveStatus": "Saved", "notification": "Business Analyst notified"}}, {"name": "Invalid Payroll Report Generation - No Data", "description": "Verify that the system handles the case where there is no payroll data available for report generation.", "input": {"criteria": "quarterly", "format": "Excel"}, "expected": {"outcome": "Payroll report generation failed", "validationStatus": "N/A", "saveStatus": "Not Saved", "notification": "Business Analyst not notified"}}]}, {"usecase": {"name": "Digitization & Text Extraction of Kitchen Groceries", "scenario": "Automate the process of digitizing and extracting information from scanned sticky notes containing the list of kitchen groceries.", "actors": ["Home-makers"], "preconditions": "Scanned sticky notes containing the list of kitchen groceries are available.", "steps": ["Home-makers initiate the scanning process of the sticky notes using the automation system.", "The system digitizes the content of the sticky notes and extracts the information using Document Understanding (DU) module."]}, "testcases": [{"name": "Valid Scanned Sticky Notes", "description": "Verify if the system successfully processes valid scanned sticky notes.", "input": {"scannedNotes": "Path to valid scanned sticky notes file"}, "expected": {"outcome": "Content digitized and information extracted", "status": "Success"}}, {"name": "Empty Scanned Sticky Notes", "description": "Verify that the system handles the case where the user attempts to initiate the process without scanning any sticky notes.", "input": {"scannedNotes": ""}, "expected": {"outcome": "No content to process", "status": "Rejected"}}, {"name": "Invalid Scanned Sticky Notes", "description": "Verify that the system handles the case where the user attempts to initiate the process with invalid or unrecognizable scanned sticky notes.", "input": {"scannedNotes": "Path to invalid scanned sticky notes file"}, "expected": {"outcome": "Unable to digitize content and extract information", "status": "Rejected"}}]}, {"usecase": {"name": "Classification of Extracted Information", "scenario": "Automatically classify the digitized and extracted kitchen groceries information into categories such as veggies, fruits, diaries, etc.", "actors": ["AI Center"], "preconditions": "Digitized and extracted information from the sticky notes is available.", "steps": ["AI Center processes the extracted information using a text classification algorithm.", "The system classifies the information into different categories such as veggies, fruits, diaries, etc."]}, "testcases": [{"name": "Valid Information Classification", "description": "Verify that the system correctly classifies the extracted information into relevant categories", "input": {"extractedInformation": "carrot, apple, milk"}, "expected": {"outcome": "Information is classified into categories: veggies, fruits, diaries", "status": "Success"}}, {"name": "Empty Information Classification", "description": "Verify that the system handles empty extracted information", "input": {"extractedInformation": ""}, "expected": {"outcome": "No categories identified, empty input", "status": "Rejected"}}, {"name": "Invalid Information Classification", "description": "Verify that the system handles invalid extracted information", "input": {"extractedInformation": "!!!Invalid!!"}, "expected": {"outcome": "No valid categories identified", "status": "Rejected"}}]}, {"usecase": {"name": "Price Comparison and Order Placement", "scenario": "Automate the process of comparing prices of kitchen groceries in various e-commerce sites and placing the order in the cart for user confirmation.", "actors": ["Robot Workflow"], "preconditions": "Classified information of kitchen groceries and access to various e-commerce sites is available.", "steps": ["Robot Workflow looks up the products in various e-commerce sites to compare the prices.", "The system then places the selected items in the respective e-commerce cart for the user to finalize and confirm the order."]}, "testcases": [{"name": "Valid Groceries Price Comparison", "description": "Verify that the system can successfully compare the prices of kitchen groceries from various e-commerce sites.", "input": {"selectedGroceries": ["Sugar", "Flour", "Salt", "Rice"]}, "expected": {"outcome": "Price comparison successful", "status": "Ready for user confirmation"}}, {"name": "Empty Groceries Price Comparison", "description": "Verify that the system handles the scenario where no groceries are found for price comparison.", "input": {"selectedGroceries": []}, "expected": {"outcome": "No groceries found for price comparison", "status": "No action required"}}, {"name": "Order Placement for User Confirmation", "description": "Verify that the system successfully places the selected items in the respective e-commerce cart for user confirmation.", "input": {"selectedItems": ["Sugar", "Flour", "Salt"]}, "expected": {"outcome": "Items placed in the cart for user confirmation", "status": "Pending user action"}}]}, {"usecase": {"name": "Automated Document Digitization", "scenario": "Cognize automatically digitizes documents, images, and scanned images into well-structured PDFs.", "actors": ["Cognize System"], "preconditions": "Documents, images, or scanned images are available for digitization.", "steps": ["The user uploads documents or images to the Cognize platform.", "The Cognize system processes the uploaded content and converts it into well-structured PDFs."]}, "testcases": [{"name": "Valid Document Upload", "description": "Verify that the Cognize system successfully digitizes a valid document into a well-structured PDF.", "input": {"document": "Document.pdf"}, "expected": {"outcome": "Digitization successful", "result": "Well-structured PDF generated"}}, {"name": "Valid Image Upload", "description": "Verify that the Cognize system successfully digitizes a valid image into a well-structured PDF.", "input": {"image": "Image.jpg"}, "expected": {"outcome": "Digitization successful", "result": "Well-structured PDF generated"}}, {"name": "Invalid File Format", "description": "Verify that the system handles the case where the user uploads a file in an unsupported format.", "input": {"file": "InvalidFormat.doc"}, "expected": {"outcome": "Digitization failed", "error": "Unsupported file format"}}, {"name": "Empty File Upload", "description": "Verify that the system handles the case where the user tries to upload an empty file.", "input": {"file": ""}, "expected": {"outcome": "Digitization failed", "error": "No file uploaded"}}]}, {"usecase": {"name": "Document Classification and Data Extraction", "scenario": "Cognize classifies documents and extracts common clauses, provisions, and data points with built-in document intelligence.", "actors": ["Cognize System"], "preconditions": "Documents requiring classification and data extraction are available.", "steps": ["The user submits documents to the Cognize platform for classification and data extraction.", "The Cognize system analyzes the documents, identifies common clauses, provisions, and data points, and extracts them accurately."]}, "testcases": [{"name": "Valid Document Submission", "description": "Verify that the Cognize system successfully classifies and extracts data from submitted documents.", "input": {"submittedDocuments": "Document1.pdf, Document2.docx"}, "expected": {"outcome": "Classification and extraction successful", "status": "Completed"}}, {"name": "Document Analysis Failure", "description": "Verify the system's response when the document analysis fails.", "input": {"submittedDocuments": "CorruptedDocument.pdf"}, "expected": {"outcome": "Classification and extraction failed", "status": "Error"}}]}, {"usecase": {"name": "Actionable Item Handling", "scenario": "Action Centre provides a user interface for business users to handle actionable items and provide business inputs to Robots.", "actors": ["Business User", "Robots"], "preconditions": "Actionable items are available for handling, and business input is required by Robots.", "steps": ["The business user accesses the Action Centre interface.", "The business user provides required business inputs to Robots for handling actionable items."]}, "testcases": [{"name": "Access Action Centre Interface", "description": "Verify that a business user can access the Action Centre interface.", "input": {"userType": "business", "userID": "BUS123"}, "expected": {"outcome": "Action Centre interface accessed successfully", "status": "Success"}}, {"name": "Provide Business Inputs to Robots", "description": "Verify that a business user can provide required business inputs to Robots for handling actionable items.", "input": {"userType": "business", "userID": "BUS123", "actionableItemID": "AI456", "inputs": {"input1": "Value1", "input2": "Value2"}}, "expected": {"outcome": "Business inputs provided to Robots successfully", "status": "Success"}}]}, {"usecase": {"name": "Integration with Power Platform for Data Push", "scenario": "Cognize integrates with the Power Platform to push data into Salesforce with a certain percentage of confidence for the keys.", "actors": ["Cognize System", "Power Platform", "Salesforce"], "preconditions": "Data needs to be pushed into Salesforce with a defined degree of confidence for data keys.", "steps": ["Cognize system integrates with the Power Platform for data push into Salesforce.", "The system pushes data into Salesforce, ensuring a certain percentage of confidence for the keys."]}, "testcases": [{"name": "Valid Data Push with Confidence Level", "description": "Verify that the Cognize system successfully integrates with the Power Platform to push data into Salesforce with the specified confidence level for data keys.", "input": {"integrationType": "Power Platform", "confidenceLevel": "85%"}, "expected": {"outcome": "Data push successful", "status": "Data pushed to Salesforce with 85% confidence for keys"}}, {"name": "Invalid Data Push - Insufficient Confidence Level", "description": "Verify the response when the confidence level for data keys is below the required threshold during the data push process.", "input": {"integrationType": "Power Platform", "confidenceLevel": "60%"}, "expected": {"outcome": "Data push failed", "status": "Insufficient confidence level for data keys during push to Salesforce"}}]}, {"usecase": {"name": "Document Processing Visualization with Power BI", "scenario": "Integration with Power BI provides a comprehensive document processing report with drill-down graphical representation for individual documents.", "actors": ["Cognize System", "Power BI Users"], "preconditions": "Document processing data is available and requires visualization.", "steps": ["The Cognize system integrates with Power BI for document processing visualization.", "Power BI users can access and view the comprehensive document processing report with drill-down graphical representation for individual documents."]}, "testcases": [{"name": "Successful Integration with Power BI", "description": "Verify that the Cognize system successfully integrates with Power BI for document processing visualization.", "input": {}, "expected": {"outcome": "Integration with Power BI successful", "status": "Integrated"}}, {"name": "Access Document Processing Report in Power BI", "description": "Verify that Power BI users can access and view the comprehensive document processing report with drill-down graphical representation for individual documents.", "input": {}, "expected": {"outcome": "Document processing report accessed successfully in Power BI", "status": "Accessed"}}]}, {"usecase": {"name": "Document Field Verification Guidance", "scenario": "Users can check which fields they need to verify before processing the documents into BPM.", "actors": ["Document Processing User", "Cognize System"], "preconditions": "Documents need to be processed into Business Process Management (BPM) system with required field verification.", "steps": ["The document processing user accesses the Cognize platform to identify fields requiring verification before processing into the BPM system.", "The system provides guidance on the fields that need verification before document processing."]}, "testcases": [{"name": "Valid Field Verification Guidance", "description": "Verify that the system provides accurate guidance on fields requiring verification before document processing into the BPM system.", "input": {"user": "JohnDoe", "documentID": "DOC001"}, "expected": {"outcome": "Field verification guidance displayed", "status": "Successful"}}, {"name": "No Fields Requiring Verification", "description": "Verify the system behavior when there are no fields requiring verification before document processing into the BPM system.", "input": {"user": "JaneSmith", "documentID": "DOC002"}, "expected": {"outcome": "No verification fields needed", "status": "Successful"}}]}, {"usecase": {"name": "Check Folder Structure and Application", "scenario": "The bot checks the folder structure and ensures Adobe Reader application is available to grab details from the list of files (PDF or other source data).", "actors": ["Bot"], "preconditions": "Bot must have access to the folder structure and the Adobe Reader application.", "steps": ["Bot navigates to the designated folder location to commence the check.", "Bot verifies the availability and accessibility of the Adobe Reader application.", "Bot proceeds with the extraction process if the preconditions are met."]}, "testcases": [{"name": "Valid Folder Structure and Application Check", "description": "Verify that the bot can successfully check the folder structure and ensure the availability of Adobe Reader application.", "input": {"folderLocation": "/designated/folder/location", "applicationName": "Adobe Reader"}, "expected": {"outcome": "Folder structure and application check successful", "status": "Verified"}}, {"name": "Invalid Folder Location", "description": "Verify that the system handles the case where the designated folder location is inaccessible or incorrect.", "input": {"folderLocation": "/invalid/folder/location", "applicationName": "Adobe Reader"}, "expected": {"outcome": "Folder location inaccessible", "status": "Failed"}}, {"name": "Adobe Reader Unavailable", "description": "Verify that the system handles the case where Adobe Reader application is not available or accessible.", "input": {"folderLocation": "/designated/folder/location", "applicationName": "Adobe Reader"}, "expected": {"outcome": "Adobe Reader not available", "status": "Failed"}}]}, {"usecase": {"name": "Extract Header Information and Create Excel", "scenario": "For each PDF file, the bot extracts the header information and creates an Excel file from a template.", "actors": ["Bot"], "preconditions": "The PDF files must be available and accessible to the bot.", "steps": ["Bot selects a PDF file for header information extraction.", "Bot utilizes data scraping technique to extract header information.", "Bot uses the extracted information to populate the Excel template.", "Once done, the bot saves the Excel file in the specified location."]}, "testcases": [{"name": "Valid PDF Header Extraction and Excel Creation", "description": "Verify that the bot successfully extracts header information and creates an Excel file from a template.", "input": {"pdfFile": "sample.pdf", "excelTemplate": "template.xlsx", "outputLocation": "output/folder/"}, "expected": {"outcome": "Header information extracted and Excel file created successfully", "status": "Pass"}}, {"name": "Empty PDF File Selection", "description": "Verify that the system handles the case where the bot tries to extract header information and create an Excel file without selecting a PDF file.", "input": {"pdfFile": "", "excelTemplate": "template.xlsx", "outputLocation": "output/folder/"}, "expected": {"outcome": "PDF file not selected, Header extraction and Excel creation failed", "status": "Fail"}}, {"name": "Invalid Excel Template", "description": "Verify that the system handles the case where the bot tries to create an Excel file from an invalid or inaccessible template.", "input": {"pdfFile": "sample.pdf", "excelTemplate": "invalid_template.xlsx", "outputLocation": "output/folder/"}, "expected": {"outcome": "Invalid or inaccessible Excel template, Excel creation failed", "status": "Fail"}}]}, {"usecase": {"name": "Tabular Data Extraction and Storage in Excel", "scenario": "The bot employs data scraping technique to extract tabular data from the PDF files and stores it in an Excel file.", "actors": ["Bot"], "preconditions": "The PDF files must contain tabular data that is accessible and extractable by the bot.", "steps": ["Bot identifies and selects the PDF file for tabular data extraction.", "Bot utilizes data scraping technique to extract the tabular data from the PDF.", "Bot populates the Excel template with the extracted tabular data.", "Bot saves the Excel file with the tabular data in the specified location."]}, "testcases": [{"name": "Extract Tabular Data from PDF", "description": "Verify that the bot successfully extracts tabular data from the PDF file and stores it in an Excel file.", "input": {"pdf_file": "sample.pdf", "excel_template": "template.xlsx", "output_location": "output/"}, "expected": {"outcome": "Tabular data extracted and stored in Excel", "status": "Success"}}, {"name": "PDF File Not Accessible", "description": "Verify that the bot handles the case where the specified PDF file is not accessible for data extraction.", "input": {"pdf_file": "non_accessible.pdf", "excel_template": "template.xlsx", "output_location": "output/"}, "expected": {"outcome": "Tabular data extraction failed", "status": "File Access Error"}}, {"name": "Non-Tabular Data PDF", "description": "Verify that the bot handles the case where the PDF file does not contain tabular data.", "input": {"pdf_file": "non_tabular_data.pdf", "excel_template": "template.xlsx", "output_location": "output/"}, "expected": {"outcome": "Tabular data extraction failed", "status": "No Tabular Data Found"}}, {"name": "Invalid Excel Template", "description": "Verify that the bot handles the case where the specified Excel template is invalid or incompatible.", "input": {"pdf_file": "sample.pdf", "excel_template": "invalid_template.docx", "output_location": "output/"}, "expected": {"outcome": "Tabular data extraction failed", "status": "Invalid Template Format"}}]}, {"usecase": {"name": "Multiple PDF Processing and Moving", "scenario": "The bot iterates through multiple PDF files, creates Excel files, and then moves the processed PDFs to a designated processed folder.", "actors": ["Bot"], "preconditions": "Multiple PDF files must be available in the designated folder.", "steps": ["Bot iterates through each PDF file in the designated folder.", "For each PDF, the bot extracts header information and tabular data to create an Excel file.", "Once the Excel file is created, the bot moves the processed PDF to the designated processed folder."]}, "testcases": [{"name": "Process Single PDF and Move", "description": "Verify that the bot correctly processes a single PDF and moves it to the designated processed folder.", "input": {"pdfFile": "file1.pdf", "designatedFolder": "input_folder", "processedFolder": "processed_files"}, "expected": {"outcome": "Processing and moving successful", "status": "File moved to processed folder"}}, {"name": "No PDF Available", "description": "Verify that the system handles the case where no PDF file is available in the designated folder.", "input": {"pdfFile": "", "designatedFolder": "input_folder", "processedFolder": "processed_files"}, "expected": {"outcome": "Processing failed", "status": "No PDF file available"}}, {"name": "Invalid PDF Format", "description": "Verify that the system handles the case where the bot encounters an invalid PDF file format.", "input": {"pdfFile": "invalid.pdf", "designatedFolder": "input_folder", "processedFolder": "processed_files"}, "expected": {"outcome": "Processing failed", "status": "Invalid PDF format"}}]}, {"usecase": {"name": "Utilize Excel Template for Reporting and Sending via Email", "scenario": "The bot utilizes the Excel template for reporting purposes and sends the reports to groups via email.", "actors": ["Bot"], "preconditions": "The Excel template must be populated with the required data and the email groups must be set up and accessible.", "steps": ["Bot accesses the populated Excel template for reporting purposes.", "Bot generates reports based on the data in the Excel template.", "Bot drafts and sends the reports to the designated email groups."]}, "testcases": [{"name": "Access Populated Excel Template", "description": "Verify that the bot can successfully access the populated Excel template for reporting purposes.", "input": {"templateName": "ReportTemplate.xlsx"}, "expected": {"outcome": "Excel template accessed successfully", "status": "Accessed"}}, {"name": "Generate Reports from Excel Data", "description": "Verify that the bot can generate reports based on the data in the Excel template.", "input": {"templateName": "ReportTemplate.xlsx"}, "expected": {"outcome": "Reports generated successfully", "status": "Generated"}}, {"name": "Draft and Send Reports to Email Groups", "description": "Verify that the bot can draft and send the reports to the designated email groups.", "input": {"reportType": "Monthly Report", "emailGroups": ["GroupA", "GroupB"]}, "expected": {"outcome": "Reports drafted and sent to email groups successfully", "status": "Sent"}}]}, {"usecase": {"name": "Authenticate Gmail Account", "scenario": "User authenticates their Gmail account to enable access for data scrapping.", "actors": "User", "preconditions": "User must have valid Gmail credentials and internet connectivity.", "steps": ["User launches the email scrapping application.", "User navigates to the settings or authentication section.", "User enters their Gmail username and password.", "The system validates the credentials and grants access to the user's mailbox."]}, "testcases": [{"name": "Successful Authentication", "description": "User provides valid Gmail credentials and internet connectivity to authenticate", "input": {"username": "example@gmail.com", "password": "validpassword123"}, "expected": {"outcome": "Authentication successful", "status": "Access granted"}}, {"name": "Invalid Credentials", "description": "User provides invalid Gmail credentials", "input": {"username": "invaliduser@gmail.com", "password": "wrongpassword"}, "expected": {"outcome": "Authentication failed", "status": "Access denied"}}]}, {"usecase": {"name": "Select Mail for Scrapping", "scenario": "User selects the specific email(s) from which they want to scrape the subject and information.", "actors": "User", "preconditions": "User must be logged in and have access to the mailbox with relevant emails.", "steps": ["User navigates to the mailbox or folder containing the emails to be scrapped.", "User selects the specific email(s) based on the sender, subject, or other criteria.", "The system identifies the selected email(s) for data extraction."]}, "testcases": [{"name": "Select specific email by sender", "description": "Verify that the user can select an email based on the sender for scraping.", "input": {"sender": "example@example.com"}, "expected": {"outcome": "Email selected for scraping", "status": "System identifies the selected email for data extraction"}}, {"name": "Select specific email by subject", "description": "Verify that the user can select an email based on the subject for scraping.", "input": {"subject": "Important Information"}, "expected": {"outcome": "Email selected for scraping", "status": "System identifies the selected email for data extraction"}}, {"name": "Select multiple emails for scraping", "description": "Verify that the user can select multiple emails for scraping.", "input": {"selectedEmails": ["email1@example.com", "email2@example.com"]}, "expected": {"outcome": "Emails selected for scraping", "status": "System identifies the selected emails for data extraction"}}]}, {"usecase": {"name": "Scrape Mail Subject and Information", "scenario": "The system extracts the subject and information from the selected email(s) for further processing.", "actors": "System", "preconditions": "Selected email(s) must contain relevant subject and information for scraping.", "steps": ["The system accesses the content of the selected email(s).", "The system identifies the subject line and key information within the email body.", "The system extracts the subject and information, organizing them for future use or export."]}, "testcases": [{"name": "Extract subject and information from single email", "description": "Verify that the system can successfully extract the subject and information from a single email", "input": {"emailContent": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Subject: Proposal for new project. Key information: Meeting scheduled for next Monday to discuss project scope."}, "expected": {"outcome": "Subject and information extracted successfully", "status": "Success"}}, {"name": "Extract subject and information from multiple emails", "description": "Verify that the system can extract the subject and information from multiple selected emails", "input": {"selectedEmails": ["Email1", "Email2", "Email3"]}, "expected": {"outcome": "Subject and information from selected emails extracted", "status": "Success"}}]}, {"usecase": {"name": "Export Scraped Data to Excel", "scenario": "The system exports the scraped mail subjects and information to an Excel file for storage or analysis.", "actors": "System", "preconditions": "Scraped data must be available and ready for export.", "steps": ["The system prepares or creates an Excel file for data storage.", "The system formats the data into rows and columns within the Excel file.", "The system populates the Excel file with the scraped mail subjects and corresponding information."]}, "testcases": [{"name": "Export Data to Excel Successful", "description": "Verify that the system can successfully export scraped mail subjects and information to an Excel file.", "input": {"scraped_data_available": true}, "expected": {"outcome": "Excel file populated with scraped data", "status": "Success"}}, {"name": "No Scraped Data Available", "description": "Verify that the system handles the case where no scraped data is available for export.", "input": {"scraped_data_available": false}, "expected": {"outcome": "No data to export", "status": "Failure"}}]}, {"usecase": {"name": "Receive Input Data in Chinese Language", "scenario": "The system receives input data in the Chinese language through email.", "actors": ["System"], "preconditions": "The system is set up to receive and process emails containing input data in Chinese.", "steps": ["The system accesses the email containing the input data in the Chinese language.", "The system extracts the data from the email body."]}, "testcases": [{"name": "valid Chinese input data", "description": "system receives valid input data in Chinese language through email", "input": {"emailContent": "\u6709\u6548\u7684\u8f93\u5165\u6570\u636e"}, "expected": {"outcome": "data extraction successful", "status": "Processed"}}, {"name": "invalid Chinese input data", "description": "system receives invalid input data in Chinese language through email", "input": {"emailContent": "\u975e\u6cd5\u7684\u8f93\u5165\u6570\u636e"}, "expected": {"outcome": "data extraction failed", "status": "Not Processed"}}]}, {"usecase": {"name": "Validate Input Data", "scenario": "The system validates the input data from the email to check if the same data already exists in the business application.", "actors": ["System"], "preconditions": "The system has access to the business application and the input data from the email.", "steps": ["The system compares the extracted data from the email with the existing data in the business application.", "The system performs validation to determine if the data already exists or not."]}, "testcases": [{"name": "valid input data", "description": "valid input data is provided for validation", "input": {"emailData": "john.doe@example.com"}, "expected": {"outcome": "data does not exist", "status": "Validated"}}, {"name": "invalid input data", "description": "invalid input data is provided for validation", "input": {"emailData": "invalid.email@example.com"}, "expected": {"outcome": "data exists", "status": "Validation Failed"}}]}, {"usecase": {"name": "Update Business Application with Translated Data", "scenario": "The system translates the input data from Chinese to English and updates the business application with the translated data.", "actors": ["System"], "preconditions": "The system has the capability to translate data from Chinese to English and has the necessary permissions to update the business application.", "steps": ["The system translates the input data from Chinese to English.", "The system updates the business application with the translated data.", "The system ensures that the updated data is accurately reflected in the business application."]}, "testcases": [{"name": "Valid Data Translation and Update", "description": "Verify that the system successfully translates the Chinese data to English and updates the business application with the translated data.", "input": {"chineseData": "Sample Chinese input data"}, "expected": {"outcome": "Data translation and update successful", "updatedData": "Translated English data"}}, {"name": "Invalid Data Translation", "description": "Verify that the system handles the case where the input data cannot be translated from Chinese to English.", "input": {"chineseData": "Invalid Chinese input data"}, "expected": {"outcome": "Data translation and update failed", "reason": "Unable to translate the input data"}}]}, {"usecase": {"name": "Validate Business Application Data in Chinese and English", "scenario": "The system performs validation on the data within the business application, considering both Chinese and English versions of the data.", "actors": ["System"], "preconditions": "The system has access to the business application data in both Chinese and English versions.", "steps": ["The system compares and validates the data in the business application considering both Chinese and English versions.", "The system ensures that the data integrity is maintained for both Chinese and English representations within the business application."]}, "testcases": [{"name": "Validate Chinese Data", "description": "Verify that the system performs validation on the data in Chinese language within the business application.", "input": {"language": "Chinese"}, "expected": {"outcome": "Data validation for the Chinese language successful"}}, {"name": "Validate English Data", "description": "Verify that the system performs validation on the data in English language within the business application.", "input": {"language": "English"}, "expected": {"outcome": "Data validation for the English language successful"}}, {"name": "Validate Data Integrity - Chinese", "description": "Verify that the system ensures data integrity for the Chinese representation within the business application.", "input": {"language": "Chinese"}, "expected": {"outcome": "Data integrity for the Chinese representation maintained"}}, {"name": "Validate Data Integrity - English", "description": "Verify that the system ensures data integrity for the English representation within the business application.", "input": {"language": "English"}, "expected": {"outcome": "Data integrity for the English representation maintained"}}]}, {"usecase": {"name": "User Input", "scenario": "User provides input including departing place, destination, travel date, and email ID for the travel buddy robot to search for flights.", "actors": "User, Travel Buddy Robot", "preconditions": "Travel Buddy Robot system is operational and ready to receive input.", "steps": ["User interacts with the Travel Buddy Robot to provide the source, destination, travel date, and email ID.", "Travel Buddy Robot receives and validates the input.", "Travel Buddy Robot acknowledges successful input validation."]}, "testcases": [{"name": "Valid Input", "description": "Verify that the Travel Buddy Robot successfully processes valid input.", "input": {"source": "City A", "destination": "City B", "travelDate": "2024-08-15", "emailId": "user@example.com"}, "expected": {"outcome": "Input validated successfully", "status": "Acknowledged"}}, {"name": "Invalid Date Format", "description": "Verify that the Travel Buddy Robot rejects invalid date format.", "input": {"source": "City X", "destination": "City Y", "travelDate": "15-08-2024", "emailId": "user@example.com"}, "expected": {"outcome": "Invalid date format", "status": "Rejected"}}, {"name": "Missing Destination", "description": "Verify that the Travel Buddy Robot rejects input with missing destination.", "input": {"source": "City P", "travelDate": "2024-12-20", "emailId": "user@example.com"}, "expected": {"outcome": "Missing destination", "status": "Rejected"}}, {"name": "Same Source and Destination", "description": "Verify that the Travel Buddy Robot rejects input with Source and destination Same Place.", "input": {"source": "City P", "destination": "City P", "travelDate": "2024-12-20", "emailId": "user@example.com"}, "expected": {"outcome": "Souce and destination are same", "status": "Rejected"}}, {"name": "Invalid Email ID", "description": "Verify that the Travel Buddy Robot rejects input with an invalid email ID.", "input": {"source": "City M", "destination": "City N", "travelDate": "2024-10-10", "emailId": "userexample.com"}, "expected": {"outcome": "Invalid email format", "status": "Rejected"}}]}, {"usecase": {"name": "Search for Flights", "scenario": "The Travel Buddy Robot looks for available flights based on the user-provided input.", "actors": "Travel Buddy Robot", "preconditions": "Valid user input has been received and acknowledged.", "steps": ["Travel Buddy Robot processes the input to search for suitable flights.", "Travel Buddy Robot retrieves flight data based on the provided input."]}, "testcases": [{"name": "Valid Flight Search", "description": "Verify that the Travel Buddy Robot successfully retrieves flight information for valid user input.", "input": {"departure": "New York", "destination": "Los Angeles", "date": "2024-12-15"}, "expected": {"outcome": "Flight data retrieved successfully", "status": "200"}}, {"name": "Invalid Departure", "description": "Verify that the Travel Buddy Robot handles the case where the departure city is invalid.", "input": {"departure": "Unknown City", "destination": "Miami", "date": "2025-01-10"}, "expected": {"outcome": "No flights matched the search criteria", "status": "404"}}]}, {"usecase": {"name": "Data Extraction", "scenario": "The Travel Buddy Robot extracts the flight data and stores it in an Excel file for further processing.", "actors": "Travel Buddy Robot", "preconditions": "Relevant flight data has been successfully retrieved.", "steps": ["Travel Buddy Robot organizes the flight data and exports it to an Excel file.", "Travel Buddy Robot confirms the successful extraction and storage of flight data."]}, "testcases": [{"name": "Successful Data Extraction", "description": "Verify that the Travel Buddy Robot can successfully extract and store flight data in an Excel file.", "input": {"flightData": "Sample flight data", "fileFormat": "Excel"}, "expected": {"outcome": "Extraction and storage successful", "confirmation": "Data stored in Excel file"}}, {"name": "Missing Flight Data", "description": "Verify that extraction fails when there is no flight data available for processing.", "input": {"flightData": " ", "fileFormat": "Excel"}, "expected": {"outcome": "Extraction failed", "confirmation": "No data to store"}}]}, {"usecase": {"name": "Email Data", "scenario": "The Travel Buddy Robot sends the extracted flight data as an email attachment to the user's provided email ID.", "actors": "Travel Buddy Robot", "preconditions": "Flight data has been successfully extracted and stored in an Excel file.", "steps": ["Travel Buddy Robot composes an email with the extracted flight data as an attachment.", "Travel Buddy Robot sends the email to the user's provided email ID.", "Travel Buddy Robot confirms the successful email delivery."]}, "testcases": [{"name": "Compose Email with Flight Data Attachment", "description": "Verify that the Travel Buddy Robot can compose an email with the extracted flight data as an attachment.", "input": {"attachmentType": "Excel", "attachmentFile": "flight_data.xlsx"}, "expected": {"outcome": "Email composed with attachment", "status": "Success"}}, {"name": "Send Email with Flight Data Attachment", "description": "Verify that the Travel Buddy Robot can successfully send the email with flight data attachment to the user's provided email ID.", "input": {"emailId": "user123@example.com"}, "expected": {"outcome": "Email sent with attachment", "status": "Success"}}, {"name": "Confirm Email Delivery", "description": "Verify that the Travel Buddy Robot can confirm the successful delivery of the email to the user's provided email ID.", "input": {"emailId": "user123@example.com"}, "expected": {"outcome": "Email delivery confirmed", "status": "Success"}}, {"name": "Invalid Attachment Type", "description": "Verify that the Travel Buddy Robot handles the case when the flight data attachment type is invalid.", "input": {"attachmentType": "PDF", "attachmentFile": "flight_data.pdf"}, "expected": {"outcome": "Email not sent", "status": "Failure", "error": "Invalid attachment type"}}]}, {"usecase": {"name": "Logging and Exception Handling", "scenario": "The Travel Buddy Robot creates logs and handles exceptions during the entire process.", "actors": "Travel Buddy Robot", "preconditions": "The Travel Buddy Robot is operational and engaged in the flight search and data processing.", "steps": ["Travel Buddy Robot sets up logging mechanisms to record the steps and events during the flight search and data processing.", "Travel Buddy Robot implements exception handling to address errors or issues that may occur during the process."]}, "testcases": [{"name": "Logging Setup", "description": "Verify that the Travel Buddy Robot can successfully set up logging mechanisms.", "input": "None", "expected": {"outcome": "Logging setup successful", "logsCreated": true}}, {"name": "Exception Handling Implementation", "description": "Verify that the Travel Buddy Robot has implemented exception handling for errors during flight search and data processing.", "input": "None", "expected": {"outcome": "Exception handling implemented", "errorsHandled": true}}, {"name": "Error Logging", "description": "Verify that the Travel Buddy Robot logs errors encountered during the flight search and data processing.", "input": "Error occurred during flight search", "expected": {"outcome": "Error logged", "errorHandled": true, "logCreated": true}}]}, {"usecase": {"name": "Extract Invoices from Incoming Emails", "scenario": "Robots extract invoices from incoming emails sent to the Accounts Payable inbox.", "actors": "Robots", "preconditions": "Invoices are available in the Accounts Payable inbox, Abbyy OCR server is operational and configured with invoice templates.", "steps": ["Robots access the incoming emails in the Accounts Payable inbox.", "Robots extract the invoices from the emails.", "Invoices are fed to the standalone Abbyy OCR server for data extraction using predefined templates.", "Abbyy OCR server processes the invoices and outputs them into consumable files.", "Processed invoices are encased into UiPath transaction records and placed on a work queue."]}, "testcases": [{"name": "Access Incoming Emails", "description": "Verify that the robots can access the incoming emails in the Accounts Payable inbox.", "input": {"inboxType": "Accounts Payable"}, "expected": {"outcome": "Robots successfully access incoming emails", "status": "Emails available for processing"}}, {"name": "Extract Invoices from Emails", "description": "Verify that the robots can extract the invoices from the incoming emails.", "input": {"emailContent": "invoice attachments"}, "expected": {"outcome": "Invoices successfully extracted", "status": "Ready for OCR processing"}}, {"name": "Abbyy OCR Processing", "description": "Verify that the Abbyy OCR server processes the invoices and outputs them into consumable files.", "input": {"templatesConfigured": true}, "expected": {"outcome": "Invoices processed and output into consumable files", "status": "OCR processing successful"}}]}, {"usecase": {"name": "Handle Parsing and Business Logic", "scenario": "UiPath ReFramework state-machine handles the parsing of transaction records and executes custom business logic specific to the customer.", "actors": "UiPath ReFramework", "preconditions": "Transaction records with extracted invoice data are available on the work queue.", "steps": ["UiPath ReFramework processes the transaction records from the work queue.", "Custom business logic specific to the customer is executed by the state-machine.", "The system checks the transaction data against dozens of business rules.", "Transaction data that passes the business criteria continues to the next stage of processing."]}, "testcases": [{"name": "Valid Transaction Processing", "description": "Verify that the system successfully processes the transaction records and executes the custom business logic specific to the customer.", "input": {"transactionRecords": "records_001", "customerID": "CUST_123"}, "expected": {"outcome": "Transaction records processed and business logic executed successfully", "status": "Passed"}}, {"name": "Invalid Transaction Records", "description": "Verify that the system handles the scenario where invalid or corrupted transaction records are encountered.", "input": {"transactionRecords": "corrupted_records", "customerID": "CUST_456"}, "expected": {"outcome": "Error: Invalid or corrupted transaction records", "status": "Failed"}}, {"name": "Business Rules Validation", "description": "Verify that the system checks the transaction data against dozens of business rules and handles valid/invalid scenarios.", "input": {"transactionData": "data_789", "businessRules": "rules_config_001"}, "expected": {"outcome": "Business rules validation completed", "status": "Passed"}}]}, {"usecase": {"name": "Launch SAP and Perform Data Entry", "scenario": "UiPath robot launches SAP and performs data entry based on the processed transaction data.", "actors": "UiPath robot", "preconditions": "Transaction data has passed the business criteria and is ready for SAP data entry.", "steps": ["UiPath robot launches SAP system.", "The robot enters the required data into SAP based on the processed transaction data.", "The system handles and recovers from multiple SAP error messages that may be emitted during data entry.", "SAP error messages are managed by the robot to ensure smooth data entry without manual intervention."]}, "testcases": [{"name": "Successful SAP Launch and Data Entry", "description": "Verify that the UiPath robot successfully launches SAP and performs data entry based on the processed transaction data", "input": {"transactionData": "valid data"}, "expected": {"outcome": "SAP launched and data entered successfully", "status": "Success"}}, {"name": "SAP Launch Failure", "description": "Verify that the system handles failure to launch SAP", "input": {"transactionData": "valid data"}, "expected": {"outcome": "SAP launch failed", "status": "Failure"}}, {"name": "Incomplete Transaction Data", "description": "Verify that the system handles incomplete transaction data for SAP data entry", "input": {"transactionData": "incomplete data"}, "expected": {"outcome": "Data entry failed", "status": "IncompleteData"}}, {"name": "SAP Error Message Handling", "description": "Verify that the robot effectively handles and recovers from multiple SAP error messages during data entry", "input": {"transactionData": "valid data"}, "expected": {"outcome": "SAP error handled and data entry recovered", "status": "ErrorHandled"}}]}, {"usecase": {"name": "Reduce Manual Labor in SAP Error Handling", "scenario": "UiPath robots reduce manual effort and time spent in error handling and analysis within the SAP system.", "actors": "UiPath robots, SAP system users", "preconditions": "SAP error messages related to invoice data entry can occur.", "steps": ["UiPath robots automatically handle and recover from SAP error messages during data entry.", "The robots reduce days of manual labor spent by SAP system users in responding to error conditions and performing analysis.", "Efficiency in error handling reduces the labor from days to minutes, improving overall process efficiency."]}, "testcases": [{"name": "Automated Handling of SAP Error Messages", "description": "Verify that UiPath robots can automatically handle SAP error messages during data entry.", "input": {}, "expected": {"outcome": "SAP error messages are successfully handled and recovered by UiPath robots", "status": "Success"}}, {"name": "Reduction in Manual Labor Time", "description": "Verify that the use of UiPath robots reduces the manual labor time spent by SAP system users in responding to error conditions and performing analysis.", "input": {}, "expected": {"outcome": "Reduction in manual labor time from days to minutes", "status": "Successful"}}]}, {"usecase": {"name": "Validate Value of UiPath Certification", "scenario": "The value of UiPath certification is validated based on the use-cases tackled and the expertise level of the developers.", "actors": "Company management, developers", "preconditions": "Developers are certified at various expertise levels in UiPath.", "steps": ["Company assesses the use-cases tackled by developers using UiPath automation.", "Company evaluates the impact and efficiency of the automation based on the developers' expertise and certification level.", "Evaluation validates the correlation between developers' expertise level and the successful execution of use-cases."]}, "testcases": [{"name": "Valid Certification and Successful Use-Case Execution", "description": "Verify that the company successfully validates the value of UiPath certification when certified developers tackle use-cases with expertise.", "input": {"developerName": "John Doe", "expertiseLevel": "Advanced", "useCase": "Automating invoice processing", "impactEvaluation": "Positive"}, "expected": {"outcome": "Value of certification validated", "status": "Successful"}}, {"name": "Invalid Expertise Level for Use-Case Execution", "description": "Verify that the company identifies the discrepancy between a developer's expertise level and the successful execution of a use-case.", "input": {"developerName": "Jane Smith", "expertiseLevel": "Beginner", "useCase": "Automating report generation", "impactEvaluation": "Negative"}, "expected": {"outcome": "Invalid correlation between expertise and use-case execution", "status": "Unsuccessful"}}]}, {"usecase": {"name": "Employee Vaccine Registration", "scenario": "An employee registers their vaccination status or COVID testing history.", "actors": ["Employee"], "preconditions": "Employee has access to the Vaccine Registration Status application.", "steps": ["Employee logs into the Vaccine Registration Status application.", "Employee selects the option to enter their vaccination status or COVID testing history.", "Employee fills in the required details such as vaccination date, type of vaccine, or testing history.", "The system validates the entered information and stores it in the database.", "The system confirms the successful registration of the vaccine status to the employee."]}, "testcases": [{"name": "Valid Vaccine Registration", "description": "Verify that an employee can successfully register their vaccination status", "input": {"employeeID": "E12345", "vaccinationDate": "2022-08-15", "vaccineType": "Pfizer"}, "expected": {"outcome": "Vaccine registration completed successfully", "status": "Confirmed"}}, {"name": "Valid COVID Testing History Registration", "description": "Verify that an employee can successfully register their COVID testing history", "input": {"employeeID": "E54321", "testingDate": "2022-09-20", "testType": "PCR"}, "expected": {"outcome": "COVID testing history registration completed successfully", "status": "Confirmed"}}, {"name": "Invalid Vaccine Registration - Missing Vaccination Date", "description": "Verify that the system handles the case where the employee tries to register the vaccine status without providing the vaccination date", "input": {"employeeID": "E67890", "vaccineType": "Moderna"}, "expected": {"outcome": "Vaccine registration failed", "status": "Not Submitted"}}, {"name": "Invalid COVID Testing History Registration - Missing Test Type", "description": "Verify that the system handles the case where the employee tries to register the COVID testing history without providing the test type", "input": {"employeeID": "E24680", "testingDate": "2022-09-20"}, "expected": {"outcome": "COVID testing history registration failed", "status": "Not Submitted"}}]}, {"usecase": {"name": "Manager Bulk Vaccine Status Insert", "scenario": "Managers can enter the vaccination status of employees using bulk insert.", "actors": ["Manager"], "preconditions": "Manager has access to the Vaccine Registration Status application and authorization to update employee vaccine status.", "steps": ["Manager logs into the Vaccine Registration Status application.", "Manager selects the bulk insert option for entering vaccination status of employees.", "Manager uploads a file containing vaccination status data for multiple employees.", "The system processes the uploaded file, validates the data, and updates the vaccine status for the respective employees.", "The system provides a summary report of the successful and failed updates to the manager."]}, "testcases": [{"name": "Valid bulk vaccine status insert", "description": "Verify that a manager can successfully insert vaccination status of employees using bulk insert", "input": {"file": "employee_vaccine_status.xlsx"}, "expected": {"outcome": "Bulk insert successful", "report": {"successfulUpdates": 150, "failedUpdates": 5}}}, {"name": "Bulk insert with invalid file format", "description": "Verify that the system handles the case where manager uploads a file with invalid format for bulk insert", "input": {"file": "vaccine_data.docx"}, "expected": {"outcome": "Bulk insert failed", "error": "Invalid file format"}}, {"name": "Bulk insert with empty file", "description": "Verify that the system handles the case where manager tries to do a bulk insert with an empty file", "input": {"file": ""}, "expected": {"outcome": "Bulk insert failed", "error": "Empty file"}}]}, {"usecase": {"name": "Document Understanding for Vaccination Cards", "scenario": "Applying Document Understanding to extract data from vaccination cards and validate it with user-entered information.", "actors": ["System", "Human in the Loop"], "preconditions": "System is integrated with Document Understanding capabilities and vaccination card upload feature is available.", "steps": ["User uploads a scanned copy of their vaccination card through the application.", "The system applies Document Understanding to extract the data from the vaccination card.", "The extracted data is compared with the user-entered information for validation.", "In case of discrepancies, the system triggers human in the loop verification for cross verification.", "The system updates the vaccination status based on the validated information."]}, "testcases": [{"name": "Valid Vaccination Card Upload", "description": "Verify that the system successfully extracts and validates the data from a user-uploaded vaccination card.", "input": {"scannedCopy": "vaccination_card_sample.jpg", "userEnteredInformation": {"name": "John Doe", "dob": "1990-05-20", "vaccineName": "Pfizer-BioNTech", "doseNumber": 2, "vaccinationDate": "2021-09-15"}}, "expected": {"outcome": "Data extracted and validated successfully", "vaccinationStatus": "Valid"}}, {"name": "Invalid Vaccination Card Upload - Discrepancy Found", "description": "Verify that the system triggers human in the loop verification when discrepancies are found between the extracted data and user-entered information.", "input": {"scannedCopy": "vaccination_card_sample.jpg", "userEnteredInformation": {"name": "John Doe", "dob": "1990-05-20", "vaccineName": "Pfizer-BioNTech", "doseNumber": 2, "vaccinationDate": "2021-09-16"}}, "expected": {"outcome": "Discrepancy found, human in the loop verification triggered", "vaccinationStatus": "Verification Required"}}, {"name": "Invalid Vaccination Card Upload - Invalid Document", "description": "Verify that the system handles invalid or unreadable vaccination card uploads.", "input": {"scannedCopy": "unreadable_vaccination_card.jpg", "userEnteredInformation": {"name": "Jane Smith", "dob": "1985-08-10", "vaccineName": "Moderna", "doseNumber": 1, "vaccinationDate": "2021-07-30"}}, "expected": {"outcome": "Invalid vaccination card upload", "vaccinationStatus": "Invalid Document"}}]}, {"usecase": {"name": "Integration with ServiceNow for Ticket Management", "scenario": "Integrating with ServiceNow to create and update service tickets related to user validation and vaccination status.", "actors": ["System", "Integration Service"], "preconditions": "Integration with ServiceNow is configured and available for use.", "steps": ["Upon user validation failure, the system triggers the integration with ServiceNow for creating a service ticket.", "The Integration Service creates a new ticket in ServiceNow for further validation action.", "Once the user validation is completed, the system updates the status of the ticket in ServiceNow accordingly."]}, "testcases": [{"name": "Valid Ticket Creation", "description": "Verify that the integration service can successfully create a new service ticket in ServiceNow upon user validation failure.", "input": {"validation_status": "failure", "user_id": "user123", "ticket_details": {"type": "user validation", "description": "User validation failure"}}, "expected": {"outcome": "Service ticket created successfully", "status": "Created", "notification": "Notification sent to the support team"}}, {"name": "Invalid Ticket Creation", "description": "Verify that the system handles the case where the integration service fails to create a service ticket in ServiceNow.", "input": {"validation_status": "failure", "user_id": "user456", "ticket_details": {"type": "user validation", "description": ""}}, "expected": {"outcome": "Service ticket creation failed", "status": "Not Created"}}, {"name": "Update Ticket Status", "description": "Verify that the system can successfully update the status of the service ticket in ServiceNow after user validation is completed.", "input": {"validation_status": "success", "user_id": "user789", "ticket_id": "ticket123", "new_status": "validated"}, "expected": {"outcome": "Ticket status updated successfully", "status": "Updated", "notification": "Notification sent to the support team"}}]}, {"usecase": {"name": "Integration with Power BI for Reporting", "scenario": "Integrating with Power BI for HR and executive reporting of vaccination status.", "actors": ["HR", "Executive"], "preconditions": "Integration with Power BI is configured and accessible for generating reports.", "steps": ["HR or Executive accesses the reporting feature integrated with Power BI.", "HR or Executive selects the parameters for the vaccination status report.", "The system generates the report using Power BI and presents it to the HR or Executive for review and sharing."]}, "testcases": [{"name": "Access Power BI Reporting Feature", "description": "Verify that HR or Executive can access the reporting feature integrated with Power BI", "input": {"user": "HR"}, "expected": {"outcome": "Successfully accessed Power BI reporting feature"}}, {"name": "Select Parameters for Vaccination Status Report", "description": "Verify that HR or Executive can select the parameters for the vaccination status report", "input": {"reportType": "Vaccination Status"}, "expected": {"outcome": "Parameters selected successfully"}}, {"name": "Generate Vaccination Status Report", "description": "Verify that the system generates the vaccination status report using Power BI", "input": {"user": "Executive", "selectedParameters": "All Employees"}, "expected": {"outcome": "Vaccination status report generated and presented for review"}}]}, {"usecase": {"name": "Receive Vendor Creation/Modification Request", "scenario": "The application support team receives a request for vendor creation/modification via email with attachment.", "actors": ["Support Team", "Robot"], "preconditions": "The support team must have access to the email account where requests are received.", "steps": ["Support team receives an email request with the subject indicating vendor creation/modification.", "Robot checks all emails and filters them based on the specified subject.", "For each matched email, robot downloads and reads the attachment to extract the vendor data."]}, "testcases": [{"name": "Valid Vendor Creation Request", "description": "Verify that the support team can successfully handle a valid vendor creation request email with attachment", "input": {"emailSubject": "Vendor Creation Request", "attachment": "vendor_creation_request.pdf"}, "expected": {"outcome": "Vendor creation request processed", "status": "Success"}}, {"name": "Valid Vendor Modification Request", "description": "Ensure that the support team can effectively handle a valid vendor modification request email with attachment", "input": {"emailSubject": "Vendor Modification Request", "attachment": "vendor_modification_request.docx"}, "expected": {"outcome": "Vendor modification request processed", "status": "Success"}}, {"name": "No Matching Email Subject", "description": "Check the system's response when the received email request does not have the expected subject for vendor creation/modification", "input": {"emailSubject": "Request for product demo", "attachment": "invalid_request.pdf"}, "expected": {"outcome": "Unhandled request", "status": "Failed - Incorrect email subject"}}]}, {"usecase": {"name": "Process Vendor Data", "scenario": "Robot iterates through the filtered emails, processes the vendor data, and updates the database.", "actors": ["Robot"], "preconditions": "Robot has access to the vendor data and the webpage for updating the database.", "steps": ["Robot iterates through each filtered email containing vendor data.", "Robot performs business validation on the data extracted from the attachment.", "Based on key column values (New, Add, Replace, Delete), robot performs the necessary operations on the database through the webpage."]}, "testcases": [{"name": "Iterate through Filtered Emails", "description": "Verify that the robot can successfully iterate through each filtered email containing vendor data.", "input": {"filteredEmails": "Vendor data emails"}, "expected": {"outcome": "Filtered emails iterated successfully", "status": "Success"}}, {"name": "Perform Business Validation", "description": "Verify that the robot performs business validation on the data extracted from the attachment.", "input": {"extractedData": "Sample extracted data for validation"}, "expected": {"outcome": "Business validation successful", "status": "Validated"}}, {"name": "Perform Database Operations", "description": "Verify that the robot performs the necessary operations on the database based on key column values.", "input": {"operationType": "New"}, "expected": {"outcome": "Database updated successfully", "status": "Updated"}}]}, {"usecase": {"name": "Validate New Vendor Records in SAP System", "scenario": "Robot validates new vendor records in the SAP system to check for the existence of the customer.", "actors": ["Robot"], "preconditions": "Robot has access to the SAP system for validation.", "steps": ["Robot checks for NEW records in the vendor data extracted from the email attachment.", "Robot validates each new record in the SAP system to confirm the existence of the customer."]}, "testcases": [{"name": "Validate New Vendor Record", "description": "Verify that the robot can successfully validate a new vendor record in the SAP system.", "input": {"vendorRecord": "Vendor001"}, "expected": {"outcome": "Vendor record validation successful", "status": "Exists"}}, {"name": "No New Vendor Records", "description": "Verify that the robot can handle the scenario where there are no new vendor records to validate.", "input": {"vendorRecordCount": 0}, "expected": {"outcome": "No new vendor records found", "status": "NotFound"}}]}, {"usecase": {"name": "Upload Database File to SharePoint", "scenario": "Once all request emails are processed, the robot downloads the latest database file and uploads it to the SharePoint site for backup.", "actors": ["Robot"], "preconditions": "Robot has access to the database and the SharePoint site.", "steps": ["After successfully processing all the request emails, robot downloads the latest database file.", "Robot uploads the downloaded database file to the specified location in the SharePoint site for backup."]}, "testcases": [{"name": "Valid Database File Upload to SharePoint", "description": "Verify that the robot can successfully download and upload the latest database file to the SharePoint site for backup", "input": {"latestDatabaseFile": "database_backup_2022-01-31", "sharePointLocation": "https://sharepoint.com/backup/database"}, "expected": {"outcome": "Database file uploaded to SharePoint successfully", "status": "Success"}}, {"name": "Unprocessed Request Emails Check", "description": "Verify that the robot does not upload the database file if there are unprocessed request emails", "input": {"unprocessedEmails": true}, "expected": {"outcome": "Database file upload to SharePoint failed", "reason": "Unprocessed request emails exist", "status": "Failed"}}, {"name": "Invalid Database File Upload to SharePoint", "description": "Verify that the robot handles the case where the latest database file is corrupted or inaccessible", "input": {"latestDatabaseFile": "corrupted_database", "sharePointLocation": "https://sharepoint.com/backup/database"}, "expected": {"outcome": "Failed to upload database file to SharePoint", "reason": "Corrupted or inaccessible database file", "status": "Failed"}}]}, {"usecase": {"name": "Notify Completion of Vendor Management in the mail and Report Results", "scenario": "Robot replies to the email, updating the user about the completion of the process and providing a list of all processed/failed customer details in tabular format.", "actors": ["Robot"], "preconditions": "Robot has access to the email system for sending notifications.", "steps": ["Robot compiles a tabular list of all processed and failed customer details.", "Robot sends a reply email to the user, providing the list of processed/failed customer details and indicating the completion of the process."]}, "testcases": [{"name": "Valid Completion Notification", "description": "Verify that the robot can successfully compile and send completion notification with processed and failed customer details", "input": {"processed_details": ["John Doe", "Jane Smith"], "failed_details": ["David Brown", "Sarah Johnson"]}, "expected": {"outcome": "Notification email sent with processed and failed customer details", "status": "Success"}}, {"name": "Invalid Email Address", "description": "Verify that the system handles the case where the user provides an invalid email address for notification", "input": {"email": "invalidemail.com", "processed_details": ["John Doe", "Jane Smith"], "failed_details": ["David Brown", "Sarah Johnson"]}, "expected": {"outcome": "Notification email sending failed due to invalid email address", "status": "Failed"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers for the Visual Language Translator application.", "actors": "New User", "preconditions": "User has not registered an account in the application.", "steps": ["New User navigates to the registration page of the application.", "New User fills in the required registration details.", "New User submits the registration form.", "The system validates the provided details.", "The system creates a new user account."]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for the Visual Language Translator application.", "input": {"username": "newUser123", "email": "newuser123@example.com", "password": "SecurePwd123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Existing User", "description": "Verify that the system prevents registration if the user already has an account.", "input": {"username": "existingUser456", "email": "existinguser456@example.com", "password": "NewPwd456"}, "expected": {"outcome": "Registration failed", "status": "User already has an account"}}, {"name": "Unsuccessful Registration - Invalid Email", "description": "Verify that the system rejects registration with an invalid email format.", "input": {"username": "user123", "email": "invalidemail", "password": "Password789"}, "expected": {"outcome": "Registration failed", "status": "Invalid email format"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in the Visual Language Translator application.", "actors": "Registered User", "preconditions": "User must have a registered account and know their login credentials.", "steps": ["Registered User navigates to the login page of the application.", "Registered User enters their login credentials.", "Registered User submits the login form.", "The system validates the login credentials.", "The system grants access to the user account."]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "ValidUsername", "password": "ValidPassword"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "ValidUsername", "password": "IncorrectPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "NonexistentUser", "password": "AnyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}]}, {"usecase": {"name": "Translate Hand Gestures to Text", "scenario": "A user uses the application to translate hand gestures to text.", "actors": "User", "preconditions": "User has access to a device with a camera and the Visual Language Translator application installed.", "steps": ["User opens the Visual Language Translator application.", "User selects the 'Translate Hand Gestures to Text' feature.", "User positions their hands in front of the camera.", "The system captures and processes the hand gestures.", "The system translates the hand gestures to text and displays the result to the user."]}, "testcases": [{"name": "Translate Hand Gestures - Valid Input", "description": "Verify the system can successfully translate valid hand gestures to text", "input": {"handGestures": "Open palm facing the camera", "cameraPosition": "Correct positioning of hands in front of the camera"}, "expected": {"outcome": "System successfully translates hand gestures to corresponding text", "status": "Pass"}}, {"name": "Translate Hand Gestures - Invalid Input", "description": "Verify the system gracefully handles invalid hand gestures", "input": {"handGestures": "Obscured hand gestures", "cameraPosition": "Incorrect positioning of hands or obstruction of camera view"}, "expected": {"outcome": "System fails to translate hand gestures and provides appropriate error message", "status": "Pass"}}, {"name": "Translate Hand Gestures - No Hand Detected", "description": "Verify the system handles the scenario where no hand is detected in front of the camera", "input": {"handGestures": "No hand present in the camera view", "cameraPosition": "Camera is operational"}, "expected": {"outcome": "System indicates the absence of hand gestures and prompts the user to position their hands correctly", "status": "Pass"}}]}, {"usecase": {"name": "Translate Spoken Words to Text", "scenario": "A user uses the application to translate spoken words to text.", "actors": "User", "preconditions": "User has access to a device with a microphone and the Visual Language Translator application installed.", "steps": ["User opens the Visual Language Translator application.", "User selects the 'Translate Spoken Words to Text' feature.", "User speaks into the microphone.", "The system captures and processes the spoken words.", "The system translates the spoken words to text and displays the result to the user."]}, "testcases": [{"name": "Successful Translation", "description": "Verify that the system can successfully translate spoken words to text", "input": {"spokenWords": "Hello, how are you?"}, "expected": {"outcome": "Spoken words are translated to text and displayed to the user", "status": "Success"}}, {"name": "No Spoken Input", "description": "Verify system behavior when user does not speak into the microphone", "input": {"spokenWords": ""}, "expected": {"outcome": "No spoken input detected", "status": "Failed"}}]}, {"usecase": {"name": "Facilitate Communication in Educational Settings", "scenario": "A teacher and a student use the application to facilitate communication in an educational setting.", "actors": ["Teacher", "Student"], "preconditions": "Both the teacher and the student have access to the Visual Language Translator application on their devices.", "steps": ["Teacher and student open the Visual Language Translator application.", "They select the appropriate communication mode (e.g., hand gesture translation or speech-to-text).", "They engage in communication using the application to convey and understand information."]}, "testcases": [{"name": "Open Application", "description": "Verify that the teacher and student can open the Visual Language Translator application.", "input": {"user": "teacher"}, "expected": {"outcome": "Teacher successfully opens the application", "status": "Success"}}, {"name": "Select Communication Mode", "description": "Ensure that the teacher and student can select the desired communication mode within the application.", "input": {"mode": "hand gesture translation"}, "expected": {"outcome": "Communication mode selected successfully", "status": "Success"}}, {"name": "Engage in Communication", "description": "Confirm that the teacher and student can effectively engage in communication using the selected mode within the application.", "input": {"message": "Hello, how are you today?"}, "expected": {"outcome": "Communication established and understood", "status": "Success"}}]}, {"usecase": {"name": "Support Corporate Communication", "scenario": "Professionals use the application for communication in corporate environments.", "actors": "Professionals", "preconditions": "Professionals have access to the Visual Language Translator application on their devices.", "steps": ["Professionals open the Visual Language Translator application.", "They utilize the features to facilitate communication during business meetings, presentations, or video conferences."]}, "testcases": [{"name": "Open Visual Language Translator Application", "description": "Verify that professionals can successfully open the Visual Language Translator application.", "input": {}, "expected": {"outcome": "Application opened successfully", "status": "Ready for use"}}, {"name": "Utilize Features for Business Communication", "description": "Verify that professionals can effectively utilize the application features for business communication", "input": {"communicationType": "Business meeting"}, "expected": {"outcome": "Features utilized for communication", "status": "Clear and effective communication"}}]}, {"usecase": {"name": "File Upload", "scenario": "User uploads a file, then it is signed with user's private key in browser side, then the file is uploaded to server side. User can view file after a successful upload.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User chooses a file from file browser", "File is digitally signed.", "The file is sent in 1 MB chunks to the server.", "After last chunk is sent successfully, the file signature is sent to the server."]}, "testcases": [{"name": "Empty File Upload", "description": "Verify that the system handles the case where no file is sent to the server with api call", "input": {"userFile": null}, "expected": {"outcome": "No file detected", "status": "failed"}}, {"name": "Valid File Upload", "description": "Verify that a file upload is successful", "input": {"userid": "uuid", "fileChunk": ["file data in binary format"]}, "expected": {"outcome": "Successful file upload", "status": "Success", "fileid": "uuid", "file_signatureid": "uuid"}}, {"name": "Missing File Chunk", "description": "Verify that a file upload is not completed if last chunk is not sent", "input": {"userid": "uuid", "lastChunk": []}, "expected": {"outcome": "File not uploaded yet", "status": "Uploading"}}, {"name": "Valid File Viewing", "description": "Verify that a user can view his file data after a successful upload", "input": {"fileid": "uuid", "userid": "uuid"}, "expected": {"filedata": "file data", "fileLink": "url", "status": "Success"}}]}, {"usecase": {"name": "Verify A File Signature", "scenario": "User can upload a file and it's signature and verify if the signature is authentic.", "actors": "User", "preconditions": "User is logged in the website and has the file, the signature and the public key.", "steps": ["User uploads the file, the signature, the public key.", "System authenticates the signature", "User views the result"]}, "testcases": [{"name": "Valid File Signature", "description": "Verify that an authentic file signature returns successful in test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Authentic File Signature", "status": "Success"}}, {"name": "Invalid File Signature", "description": "Verify that an inauthenticate file signature fails authentication test", "input": {"inputFile": ["file data in binary format"], "signature": "signature", "publicKey": "publicKey"}, "expected": {"outcome": "Inauthentic File Signature", "status": "Failure"}}]}, {"usecase": {"name": "Organization Operations", "scenario": "User can create a new Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website", "steps": ["User creates an Organization", "User adds members to Organization", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Organization Creation", "description": "Verify that an Organization can be created with a valid name", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created organization", "orgid": "Organization id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Organization admin can add members to an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to organization", "orgid": "Organization id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Organization admin can send notice to all members in an Organization", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in organization", "orgid": "Organization id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in organization.", "input": {"orgName": "Organization name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "orgid": "Organization id", "status": "Unauthorized"}}]}, {"usecase": {"name": "Team Operations", "scenario": "User can create a new Team under an Organization, add members to it, send notices to all members.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization", "steps": ["User creates an Team", "User adds members to Team", "User sends a notice to all members"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that an Team can be created with a valid name in the Organization", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created team", "teamid": "Team id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Team admin can add members to an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to team", "teamid": "Team id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Team admin can send notice to all members in an Team", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in team", "teamid": "Team id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "teamid": "Team id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Team.", "input": {"teamName": "Team name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "teamid": "Team id", "status": "Unavailable User"}}]}, {"usecase": {"name": "Thread Operations", "scenario": "User can create a new Thread under an Team, add members to it, send notices to all members and add files to the thread.", "actors": "User", "preconditions": "User is logged in the website and is member of an Organization and a Team", "steps": ["User creates an Thread", "User adds members to Thread", "User sends a notice to all members", "User adds a file to the thread"]}, "testcases": [{"name": "Valid Thread Creation", "description": "Verify that an Thread can be created with a valid name in the Team", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id"}, "expected": {"outcome": "Successfully created thread", "threadid": "Thread id", "status": "Success"}}, {"name": "Valid Member Addition", "description": "Verify that an Thread admin can add members to an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "addedMemberId": "user id"}, "expected": {"outcome": "Successfully added member to thread", "threadid": "Thread id", "memberList": [{}], "status": "Success"}}, {"name": "Valid Notice Broadcast", "description": "Verify that an Thread admin can send notice to all members in an Thread", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Successfully broadcast notice to all members in thread", "threadid": "Thread id", "noticeId": "Notice id", "noticeContent": "Content", "status": "Success"}}, {"name": "Not Authorized for Notice Broadcast", "description": "Verify that a member without admin privilege cannot send notice to all members in thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "noticeContent": "Content"}, "expected": {"outcome": "Not authorized to send broadcast notice", "threadid": "Thread id", "status": "Unauthorized"}}, {"name": "Member Must Be of Same Organization", "description": "Verify that a member of a Organization cannot be added to another Organization's Thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id"}, "expected": {"outcome": "User to be added not part of parent Organization", "threadid": "Thread id", "status": "Unavailable User"}}, {"name": "Valid File Addition", "description": "Verify that a member of a thread can add a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileData": ["file data in binary format"]}, "expected": {"outcome": "File successfully added in the thread", "threadid": "Thread id", "fileid": "file id", "status": "Success"}}, {"name": "Valid File Viewing", "description": "Verify that a member of a thread can view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "File data successfully returned", "threadid": "Thread id", "fileid": "file id", "fileData": "file data", "fileLink": "url", "status": "Success"}}, {"name": "Invalid File Viewing", "description": "Verify that a non-member of a thread cannot view a file in the thread.", "input": {"threadName": "Thread name", "ownerName": "Owner name", "ownerid": "Owner user id", "memberid": "User Id", "fileid": "file id"}, "expected": {"outcome": "User unauthorized in this thread", "threadid": "Thread id", "status": "Unauthorized"}}]}, {"usecase": {"name": "Register Retailer", "scenario": "Retailer wants to register with the platform to place orders for products from different manufacturers.", "actors": "Retailer", "preconditions": "Retailer is not registered with the platform.", "steps": ["Retailer visits the platform website", "Retailer fills the registration form", "Retailer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a retailer can successfully register with the platform.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a retailer tries to register with invalid details, like invalid email, invalid nid, or phone number", "input": {"retailerDetails": {"name": "ABC Retail", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-239, Karwan Bazar, Dhaka", "nid": "aadffa", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a retailer tries to register with a phone number that is already registered.", "input": {"retailerDetails": {"name": "ABC Retail", "email": "abcretail@gmail.com", "phoneNumber": "01234567890", "address": "A-239, Karwan Bazar, Dhaka", "nid": "1234567890", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Retailer registration failed, because the phone number is already registered", "status": "Rejected"}}]}, {"usecase": {"name": "Place Order", "scenario": "Retailer places an order for products from different manufacturers, the order requires confirmation from each manufacturer.", "actors": "Retailer, Manufacturers", "preconditions": "Retailer is registered with the platform and has selected products from different manufacturers.", "steps": ["Retailer selects products from various manufacturers to include in the order", "Retailer submits the order", "Each manufacturer confirms and processes their part of the order"]}, "testcases": [{"name": "Valid Product Selection", "description": "Verify that a retailer can successfully select and place an order for valid products from different manufacturers.", "input": {"selectedProducts": [{"manufacturer": "ABC Electronics", "productCode": "Laptop123", "quantity": 2}, {"manufacturer": "XYZ Appliances", "productCode": "Refrigerator456", "quantity": 1}, {"manufacturer": "FashionHub", "productCode": "Apparel789", "quantity": 5}]}, "expected": {"outcome": "Order placed successfully", "status": "Pending Manufacturer Confirmation"}}, {"name": "Empty Product Selection", "description": "Verify that the system handles the case where a retailer tries to submit an empty product selection in the order.", "input": {"selectedProducts": []}, "expected": {"outcome": "Order placement failed", "status": "Rejected"}}, {"name": "Manufacturer Confirmation", "description": "Verify that each manufacturer can successfully confirm and process their part of the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": true, "FashionHub": true}}, "expected": {"outcome": "Order confirmed and processed", "status": "Completed"}}, {"name": "Partial Manufacturer Confirmation", "description": "Verify that the system handles the case where some manufacturers confirm and others do not for the order.", "input": {"manufacturerConfirmations": {"ABC Electronics": true, "XYZ Appliances": false, "FashionHub": true}}, "expected": {"outcome": "Partial order confirmation", "status": "Partially Completed"}}]}, {"usecase": {"name": "Track Order", "scenario": "Retailer wants to track the status of an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer selects the order to track", "Retailer views the status of the order"]}, "testcases": [{"name": "Valid Order Tracking", "description": "Verify that a retailer can successfully track the status of an order placed with different manufacturers.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order status retrieved successfully", "status": "Partially Completed"}}, {"name": "Invalid Order Tracking", "description": "Verify that the system handles the case where a retailer tries to track an order that does not exist.", "input": {"orderID": "67890"}, "expected": {"outcome": "Order status retrieval failed", "status": "Not Found"}}, {"name": "Order Completed", "description": "The ordered products have reached the retailer and the order is completed.", "input": {"orderID": "12345"}, "expected": {"outcome": "Order Has reached the retailer", "status": "Completed"}}]}, {"usecase": {"name": "Make Payment", "scenario": "Retailer wants to make payment for an order placed with different manufacturers.", "actors": "Retailer", "preconditions": "Retailer has placed an order with different manufacturers.", "steps": ["Retailer logs in to the platform", "Retailer proceeds to make payment after the order is confirmed and processed by the manufacturers", "Retailer makes the payment"]}, "testcases": [{"name": "Full Payment", "description": "Verify that a retailer can successfully make payment for an order placed with different manufacturers.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment successful", "status": "Completed"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where a retailer tries to make an insufficient payment for the order without taking a loan.", "input": {"orderID": "12345", "paymentDetails": {"amount": 10000, "paymentMethod": "bKash"}}, "expected": {"outcome": "Payment failed, insufficient amount", "status": "Rejected"}}, {"name": "Loan Payment", "description": "Verify that the system handles the case where a retailer takes a loan to make the payment for the order.", "input": {"orderID": "12345", "paymentDetails": {"amount": 15000, "paymentMethod": "Pay Later"}}, "expected": {"outcome": "Partial Payment successful", "status": "Partially Completed"}}]}, {"usecase": {"name": "Register Manufacturer", "scenario": "Manufacturer wants to register with the platform to sell their products to retailers.", "actors": "Manufacturer", "preconditions": "Manufacturer is not registered with the platform.", "steps": ["Manufacturer visits the platform website", "Manufacturer fills the registration form", "Manufacturer submits the registration form"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a manufacturer can successfully register with the platform.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registered successfully", "status": "Completed"}}, {"name": "Invalid Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with invalid details, like invalid email, or phone number", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "21312.12321", "phoneNumber": "12345vsda", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because of invalid details", "status": "Rejected"}}, {"name": "Duplicate Registration", "description": "Verify that the system handles the case where a manufacturer tries to register with an email that is already registered.", "input": {"manufacturerDetails": {"name": "ABC Electronics", "email": "abc_electronics@gmail.com", "phoneNumber": "01234567890", "address": "A-439, Tejgaon, Dhaka", "tin": "0987654321", "password": "password123"}}, "expected": {"outcome": "Manufacturer registration failed, because the email is already registered", "status": "Rejected"}}]}, {"usecase": {"name": "Manage Products", "scenario": "Manufacturer wants to manage their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new product", "Manufacturer updates an existing product", "Manufacturer deletes a product"]}, "testcases": [{"name": "Add New Product", "description": "Verify that a manufacturer can successfully add a new product to the platform.", "input": {"productDetails": {"productCode": "Laptop123", "productName": "Laptop", "unitPrice": 500, "description": "Laptop with 8GB RAM and 1TB HDD", "weight": "2.5kg", "category": "Electronics", "image": "laptop.jpg", "minimumOrderQuantity": 20, "minimumDiscount": 5.0, "maximumDiscount": 10.0}}, "expected": {"outcome": "Product added successfully", "status": "Success"}}, {"name": "Update Product", "description": "Verify that a manufacturer can successfully update an existing product on the platform.", "input": {"productDetails": {"productCode": "Laptop123", "unitPrice": 600, "description": "Laptop with 16GB RAM and 1TB HDD", "weight": "2.7kg", "image": "laptop1.jpg", "minimumOrderQuantity": 40, "minimumDiscount": 7.0, "maximumDiscount": 12.0}}, "expected": {"outcome": "Product updated successfully", "status": "Success"}}, {"name": "Delete Product", "description": "Verify that a manufacturer can successfully delete a product from the platform.", "input": {"productCode": "Laptop123"}, "expected": {"outcome": "Product deleted successfully", "status": "Success"}}]}, {"usecase": {"name": "Manage Orders", "scenario": "Manufacturer wants to manage the orders placed for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has received orders for their products.", "steps": ["Manufacturer logs in to the platform", "Manufacturer views the list of orders", "Manufacturer updates the status of an order"]}, "testcases": [{"name": "View Orders", "description": "Verify that a manufacturer can successfully view the list of orders placed for their products.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Orders retrieved successfully", "status": "Success"}}, {"name": "Update Order Status", "description": "Verify that a manufacturer can successfully update the status of an order placed for their products.", "input": {"orderID": "12345", "status": "Shipped"}, "expected": {"outcome": "Order status updated successfully", "status": "Shipped"}}]}, {"usecase": {"name": "Manage Inventory", "scenario": "Manufacturer wants to manage the inventory of their products on the platform.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added products to their inventory.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new inventory", "Manufacturer views the list of products in their inventory", "Manufacturer adds a new batch of stock"]}, "testcases": [{"name": "Add New Inventory", "description": "Verify that a manufacturer can successfully add a new inventory.", "input": {"inventoryDetails": {"inventoryName": "Inventory1", "type": "Warehouse", "location": "A-23, Industrial Area, Tejgaon, Dhaka", "capacity": "1000 sq. ft."}}, "expected": {"outcome": "Inventory added successfully", "status": "Success"}}, {"name": "View Inventory Products", "description": "Verify that a manufacturer can successfully view the list of products in their inventory.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Inventory Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of stock", "description": "Verify that a manufacturer can successfully add a new batch of product in their inventory.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100, "marketStatus": "Available"}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}]}, {"usecase": {"name": "Manage Production House", "scenario": "Manufacturer wants to manage the production house for their products.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added production houses.", "steps": ["Manufacturer logs in to the platform", "Manufacturer adds a new production house", "Manufacturer views the list of products in their production houses", "Manufacturer adds a new batch of product in a production house"]}, "testcases": [{"name": "Add New Production House", "description": "Verify that a manufacturer can successfully add a new production house.", "input": {"productionHouseDetails": {"productionHouseName": "ProductionHouse1", "type": "Juice, Beverage, and Snacks Production House", "location": "B-23, Industrial Area, Tejgaon, Dhaka", "capacity": "5000 sq. ft."}}, "expected": {"outcome": "Production House added successfully", "status": "Success"}}, {"name": "View Production House Products", "description": "Verify that a manufacturer can successfully view the list of products in their production houses.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Production House Products retrieved successfully", "status": "Success"}}, {"name": "Add a new batch of product in a production house", "description": "Verify that a manufacturer can successfully add a new batch of product in a production house.", "input": {"productCode": "Laptop123", "manufacturingDate": "2021-05-01", "expiryDate": "2023-05-01", "quantity": 100}, "expected": {"outcome": "New batch added successfully", "status": "Success"}}]}, {"usecase": {"name": "Give lease an inventory", "scenario": "Manufacturer wants to give lease an empty inventory to another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer sets the lease terms and conditions"]}, "testcases": [{"name": "Lease Inventory", "description": "Verify that a manufacturer can successfully lease an empty inventory to another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to lease an inventory that is not empty.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory lease failed, because the inventory is not empty", "status": "Rejected"}}]}, {"usecase": {"name": "Take lease an inventory", "scenario": "Manufacturer wants to take lease an empty inventory from another manufacturer.", "actors": "Manufacturer", "preconditions": "Manufacturer is registered with the platform and has added inventories.", "steps": ["Manufacturer logs in to the platform", "Manufacturer selects an inventory to lease", "Manufacturer agrees to the lease terms and conditions"]}, "testcases": [{"name": "Take Lease", "description": "Verify that a manufacturer can successfully take lease an empty inventory from another manufacturer.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "FashionHub", "leaseDuration": "6 months", "leaseAmount": 50000}}, "expected": {"outcome": "Inventory leased successfully", "status": "Success"}}, {"name": "Invalid Lease", "description": "Verify that the system handles the case where a manufacturer tries to take lease an inventory using invalid details, like taking lease for more than lease duration, not paying full payment.", "input": {"inventoryID": "Inventory1", "leaseDetails": {"manufacturerID": "XYZ Appliances", "leaseDuration": "8 months", "leaseAmount": 5000}}, "expected": {"outcome": "Inventory lease failed, because the manufacturer did not agree to the lease terms and conditions", "status": "Rejected"}}]}, {"usecase": {"name": "Manage Manufacturer Status", "scenario": "Admin wants to manage the status of manufacturers on the platform.", "actors": "Admin", "preconditions": "Admin and manufacturer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of manufacturers", "Admin gives top batch to a manufacturer", "Admin bans a manufacturer", "Admin gives warning to a manufacturer", "Admin unbans a manufacturer"]}, "testcases": [{"name": "View Manufacturers", "description": "Verify that an admin can successfully view the list of manufacturers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Manufacturers retrieved successfully", "status": "Success"}}, {"name": "Give Top Batch", "description": "Verify that an admin can successfully give top batch to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Top batch given successfully", "status": "Success"}}, {"name": "Ban Manufacturer", "description": "Verify that an admin can successfully ban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Manufacturer", "description": "Verify that an admin can successfully unban a manufacturer.", "input": {"manufacturerID": "ABC Electronics"}, "expected": {"outcome": "Manufacturer unbanned successfully", "status": "Success"}}]}, {"usecase": {"name": "Manage Retailer Status", "scenario": "Admin wants to manage the status of retailers on the platform.", "actors": "Admin", "preconditions": "Admin and retailer both are registered with the platform.", "steps": ["Admin logs in to the platform", "Admin views the list of retailers", "Admin bans a retailer", "Admin gives warning to a retailer", "Admin unbans a retailer"]}, "testcases": [{"name": "View Retailers", "description": "Verify that an admin can successfully view the list of retailers on the platform.", "input": {"adminID": "admin1"}, "expected": {"outcome": "Retailers retrieved successfully", "status": "Success"}}, {"name": "Ban Retailer", "description": "Verify that an admin can successfully ban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer banned successfully", "status": "Success"}}, {"name": "Give Warning", "description": "Verify that an admin can successfully give warning to a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Warning given successfully", "status": "Success"}}, {"name": "Unban Retailer", "description": "Verify that an admin can successfully unban a retailer.", "input": {"retailerID": "retailer1"}, "expected": {"outcome": "Retailer unbanned successfully", "status": "Success"}}]}, {"usecase": {"name": "Adding a new Category", "scenario": "Admin wants to add a new category to the platform.", "actors": "Admin", "preconditions": "Admin is registered with the platform and the category is not currently registered.", "steps": ["Admin logs in to the platform", "Admin submits new category details", "Admin adds a new category"]}, "testcases": [{"name": "Add New Category", "description": "Verify that an admin can successfully add a new category to the platform.", "input": {"categoryDetails": {"categoryName": "Furniture", "image": "furniture.jpg"}}, "expected": {"outcome": "Category added successfully", "status": "Success"}}, {"name": "Duplicate Category", "description": "Verify that the system handles the case where an admin tries to add a category that is already registered.", "input": {"categoryDetails": {"categoryName": "Electronics", "image": "electronics.jpg"}}, "expected": {"outcome": "Category addition failed, because the category is already registered", "status": "Rejected"}}]}, {"usecase": {"name": "Prompt Creation and Marketplace", "scenario": "User creates a prompt and engages in the marketplace.", "actors": "Seller, Buyer, Admin", "preconditions": "User is registered and logged in.", "steps": ["Seller creates a new prompt", "Seller uploads prompt details and files", "Admin approves the prompt", "Buyer purchases the approved prompt"]}, "testcases": [{"name": "Valid Prompt Creation", "description": "Verify that a seller can successfully create a prompt.", "input": {"title": "Engaging Prompt", "description": "An exciting prompt description.", "type": "Inspiration", "price": 5.99, "prompt": "Write something engaging!", "engine": "GPT-3", "tipsToUse": "Follow the instructions carefully."}, "expected": {"outcome": "Prompt created successfully", "status": "Approved"}}, {"name": "Invalid Prompt Creation", "description": "Verify that the system handles the case where a seller tries to create an invalid prompt.", "input": {"title": "", "description": "An invalid prompt without a title.", "type": "Miscellaneous", "price": 2.99, "prompt": "Write something miscellaneous.", "engine": "DALL-E"}, "expected": {"outcome": "Prompt creation failed", "status": "Rejected"}}, {"name": "Prompt Purchase", "description": "Verify that a buyer can successfully purchase an approved prompt.", "input": {"promptId": "prompt123", "userId": "user456"}, "expected": {"outcome": "Prompt purchased successfully", "status": "Purchased"}}]}, {"usecase": {"name": "VIP Membership Purchase", "scenario": "User purchases a VIP membership.", "actors": "User, Admin", "preconditions": "User is registered and logged in.", "steps": ["User purchases a VIP membership", "Admin approves the VIP membership"]}, "testcases": [{"name": "Valid VIP Membership Purchase", "description": "Verify that a user can successfully purchase a VIP membership.", "input": {"membershipId": "vip123", "userId": "user789"}, "expected": {"outcome": "VIP membership purchased successfully", "status": "Approved"}}, {"name": "Invalid VIP Membership Purchase", "description": "Verify that the system handles the case where a user tries to purchase an invalid VIP membership.", "input": {"membershipId": "invalidVIP", "userId": "user456"}, "expected": {"outcome": "VIP membership purchase failed", "status": "Rejected"}}]}, {"usecase": {"name": "User Rating", "scenario": "User rates a prompt seller.", "actors": "Buyer, Seller", "preconditions": "User has purchased a prompt.", "steps": ["Buyer rates the prompt seller"]}, "testcases": [{"name": "Valid Rating", "description": "Verify that a buyer can successfully rate a prompt seller.", "input": {"reviewerId": "user123", "promptId": "prompt789", "rating": 4, "comment": "Great seller!"}, "expected": {"outcome": "Rating submitted successfully", "status": "Submitted"}}, {"name": "Invalid Rating", "description": "Verify that the system handles the case where a buyer tries to submit an invalid rating.", "input": {"reviewerId": "user789", "promptId": "prompt123", "rating": 6}, "expected": {"outcome": "Rating submission failed", "status": "Rejected"}}]}, {"usecase": {"name": "Search and Filter", "scenario": "User searches for prompts and applies filters.", "actors": "User", "preconditions": "User is logged in.", "steps": ["User enters search criteria", "User applies filters"]}, "testcases": [{"name": "Valid Search and Filter", "description": "Verify that a user can successfully search for prompts and apply filters.", "input": {"searchQuery": "Engaging prompts", "filters": {"type": "Inspiration", "price": 5.99, "engine": "GPT-3"}}, "expected": {"outcome": "Search and filter successful", "results": "Found prompts matching criteria"}}, {"name": "Invalid Search and Filter", "description": "Verify that the system handles the case where a user enters invalid search criteria.", "input": {"searchQuery": "", "filters": {"type": "InvalidType"}}, "expected": {"outcome": "Search and filter failed", "results": "No matching prompts"}}]}, {"usecase": {"name": "Discussion Forum Participation", "scenario": "User engages in the discussion forum.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User posts a discussion topic", "User replies to a discussion topic"]}, "testcases": [{"name": "Valid Discussion Post", "description": "Verify that a user can successfully post a discussion topic.", "input": {"userId": "user123", "topic": "Discussing prompt creation techniques", "content": "Share your experiences and tips!"}, "expected": {"outcome": "Discussion post successful", "status": "Posted"}}, {"name": "Invalid Discussion Post", "description": "Verify that the system handles the case where a user tries to post an invalid discussion topic.", "input": {"userId": "user456", "topic": "", "content": "Invalid content"}, "expected": {"outcome": "Discussion post failed", "status": "Not Posted"}}, {"name": "Discussion Reply", "description": "Verify that a user can successfully reply to a discussion topic.", "input": {"userId": "user789", "topicId": "topic123", "content": "Great insights!"}, "expected": {"outcome": "Discussion reply successful", "status": "Replied"}}]}, {"usecase": {"name": "Prompt Approval by Admin", "scenario": "Admin reviews and approves prompts submitted by sellers.", "actors": "Admin", "preconditions": "Admin is logged in.", "steps": ["Admin reviews submitted prompts", "Admin approves or rejects the prompts"]}, "testcases": [{"name": "Valid Prompt Approval", "description": "Verify that the admin can successfully approve a submitted prompt.", "input": {"adminId": "admin123", "promptId": "prompt456"}, "expected": {"outcome": "Prompt approved successfully", "status": "Approved"}}, {"name": "Valid Prompt Rejection", "description": "Verify that the admin can successfully reject a submitted prompt.", "input": {"adminId": "admin456", "promptId": "prompt789"}, "expected": {"outcome": "Prompt rejected successfully", "status": "Rejected"}}, {"name": "Invalid Prompt Approval", "description": "Verify that the system handles the case where the admin tries to approve an invalid prompt.", "input": {"adminId": "admin789", "promptId": "invalidPrompt"}, "expected": {"outcome": "Prompt approval failed", "status": "Not Approved"}}]}, {"usecase": {"name": "Asset Group Creation", "scenario": "User creates a new crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, User must have coins in the wallet to add an initial token.", "steps": ["User enters the name for the new crypto asset group", "User adds a description", "User adds an initial token (Optional)"]}, "testcases": [{"name": "Valid Asset Group Creation", "description": "Verify that a user can successfully create a new crypto asset group.", "input": {"assetGroupDetails": {"name": "MyAssetGroup", "description": "A diversified portfolio of crypto assets", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation successful", "status": "Created"}}, {"name": "Asset Group Creation with Initial Coin", "description": "Verify that a user can create an asset group with an initial coin.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin successful", "status": "Created"}}, {"name": "Empty Asset Group Details", "description": "Verify that the system handles the case where a user submits an empty asset group creation request.", "input": {"assetGroupDetails": {"name": "", "description": "", "initialCoin": {}}}, "expected": {"outcome": "Asset group creation failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Initial Coin not in Wallet", "description": "Verify that the system handles the case where a user submits an asset group creation request with a token that is not present in the wallet.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Incorrect Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an incorrect wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": "IncorrectWallet"}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}, {"name": "Asset Group Creation with Empty Wallet Address", "description": "Verify that the system handles the case where a user submits an asset group creation request with an empty wallet address.", "input": {"assetGroupDetails": {"name": "MyAssetGroupWithCoin", "description": "A portfolio with an initial coin", "initialCoin": {"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}}}, "expected": {"outcome": "Asset group creation with initial coin failed", "status": "Rejected"}}]}, {"usecase": {"name": "Add Tokens to Asset Group", "scenario": "User adds valid tokens to an existing crypto asset group.", "actors": "User", "preconditions": "User is registered in the system, has an existing crypto asset group, and possesses the necessary wallet(s).", "steps": ["User selects an existing crypto asset group", "User adds valid tokens to the selected asset group"]}, "testcases": [{"name": "Valid Token Addition - Same Wallet", "description": "Verify that the user can successfully add valid tokens from the same wallet to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Ethereum", "symbol": "ETH", "walletAddress": "UserWallet123"}, {"name": "Cardano", "symbol": "ADA", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Valid Token Addition - Different Wallets", "description": "Verify that the user can successfully add valid tokens from different wallets to an existing crypto asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": "UserWallet456"}, {"name": "Litecoin", "symbol": "LTC", "walletAddress": "UserWallet789"}]}, "expected": {"outcome": "Token addition successful", "status": "Updated"}}, {"name": "Empty Token List", "description": "Verify that the system handles the case where the user tries to add an empty list of tokens to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": []}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Token Not in Wallet", "description": "Verify that the system handles the case where the user tries to add tokens not present in their wallet to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "InvalidToken", "symbol": "INV", "walletAddress": "UserWallet123"}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}, {"name": "Invalid Token Addition - Empty Wallet Address", "description": "Verify that the system handles the case where the user tries to add tokens with empty wallet address to an existing asset group.", "input": {"selectedAssetGroup": "MyExistingAssetGroup", "tokensToAdd": [{"name": "Bitcoin", "symbol": "BTC", "walletAddress": ""}]}, "expected": {"outcome": "Token addition failed", "status": "Not Updated"}}]}, {"usecase": {"name": "View Assets in Asset Group", "scenario": "User wants to view the existing crypto assets within asset groups.", "actors": "User", "preconditions": "User is registered in the system and has at least one crypto asset group with assets.", "steps": ["User navigates to the 'Asset Groups' section of the application", "User selects a specific asset group to view", "User views the details of the selected asset group, including its name, description, and associated assets"]}, "testcases": [{"name": "View Specific Asset Group", "description": "Verify that the user can successfully view the details of a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets"}, "expected": {"outcome": "Asset group details viewed successfully", "access": "Allowed"}}, {"name": "View Assets in a Group", "description": "Verify that the user can successfully view the assets within a specific crypto asset group.", "input": {"selectedAssetGroup": "MyCryptoAssets", "selectedAsset": "Bitcoin"}, "expected": {"outcome": "Asset within the group viewed successfully", "access": "Allowed"}}]}, {"usecase": {"name": "Asset Management Request", "scenario": "User requests an experienced personal to manage user's assets.", "actors": "User, System", "preconditions": "User is registered in the system.", "steps": ["User selects token type(s) to be invested in", "User enters the amount to invest", "User selects the expected profit percentage", "System dynamically populates the list of available experienced personals based on user's selections", "User selects an experienced personal from the provided list", "User submits the asset management request"]}, "testcases": [{"name": "Valid Asset Management Request", "description": "Verify that a user can successfully request an experienced personal to manage user's assets.", "input": {"tokenTypes": ["Bitcoin", "Ethereum"], "investmentAmount": 10000, "expectedProfitPercentage": 10, "selectedExperiencedPersonal": "JohnDoe123"}, "expected": {"outcome": "Asset management request submitted successfully", "status": "Submitted"}}, {"name": "Empty Token Types", "description": "Verify that the system handles the case where the user tries to submit a request without specifying token types.", "input": {"tokenTypes": [], "investmentAmount": 5000, "expectedProfitPercentage": 8, "selectedExperiencedPersonal": "JohnDoe456"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Negative Investment Amount", "description": "Verify that the system handles the case where the user enters a negative investment amount.", "input": {"tokenTypes": ["Bitcoin"], "investmentAmount": -2000, "expectedProfitPercentage": 12, "selectedExperiencedPersonal": "JohnDoe789"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}, {"name": "Invalid Expected Profit Percentage", "description": "Verify that the system handles the case where the user selects an invalid expected profit percentage.", "input": {"tokenTypes": ["Ethereum"], "investmentAmount": 8000, "expectedProfitPercentage": null, "selectedExperiencedPersonal": "JohnDoe101"}, "expected": {"outcome": "Asset management request submission unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "Responds to Asset Management Request", "scenario": "Experienced personal receives an asset management request and responds to either accept or reject the request.", "actors": "Experienced Personal", "preconditions": "Experienced personal is registered in the system and has received an asset management request.", "steps": ["Experienced personal receives the asset management request notification", "Experienced personal reviews the details of the request including token types, investment amount, and expected profit percentage", "Experienced personal decides to either accept or reject the request", "Experienced personal provides additional comments (optional)", "Experienced personal submits the response"]}, "testcases": [{"name": "Experienced Personal Accepts Request", "description": "Verify that an experienced personal can successfully accept an asset management request.", "input": {"requestID": "12345", "response": "Accept", "comments": "I am excited to manage your assets!"}, "expected": {"outcome": "Asset management request accepted successfully", "status": "Accepted"}}, {"name": "Experienced Personal Rejects Request", "description": "Verify that an experienced personal can successfully reject an asset management request.", "input": {"requestID": "67890", "response": "Reject", "comments": "I am currently unable to take on new clients."}, "expected": {"outcome": "Asset management request rejected successfully", "status": "Rejected"}}, {"name": "Missing Response", "description": "Verify that the system handles the case where the experienced personal submits a response without specifying accept or reject.", "input": {"requestID": "24680", "comments": "I am currently evaluating the request."}, "expected": {"outcome": "Asset management request response unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "User Assigns or Refuses Accepted Personal to Manage Assets", "scenario": "User either assigns or refuses the experienced personal who has accepted the asset management request to actually manage the user's assets.", "actors": "User", "preconditions": "User has received an acceptance response from an experienced personal for the asset management request.", "steps": ["User receives the acceptance notification from the experienced personal", "User reviews the details of the acceptance including personal's details and comments", "User decides to either confirm the assignment or refuse it", "If confirming, user provides additional instructions or preferences (optional)", "User submits the assignment or refusal"]}, "testcases": [{"name": "Confirm Assignment", "description": "Verify that the user can successfully confirm the assignment of the accepted experienced personal to manage the assets.", "input": {"requestID": "12345", "decision": "Confirm", "acceptedPersonal": "JohnDoe123", "additionalInstructions": "Please focus on long-term growth."}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}, {"name": "Refuse Assignment", "description": "Verify that the user can successfully refuse the assignment of the accepted experienced personal.", "input": {"requestID": "12345", "decision": "Refuse", "acceptedPersonal": "JohnDoe123"}, "expected": {"outcome": "Assignment refused successfully", "status": "Refused"}}, {"name": "Invalid Request ID", "description": "Verify that the system handles the case where an invalid request ID is provided.", "input": {"requestID": "InvalidID", "decision": "Confirm", "acceptedPersonal": "JohnDoe456", "additionalInstructions": "Please focus on short-term gains."}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Missing Decision", "description": "Verify that the system handles the case where the user tries to submit without specifying the decision.", "input": {"requestID": "67890", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment or refusal unsuccessful", "status": "Failed"}}, {"name": "Empty Additional Instructions", "description": "Verify that the user can successfully submit an assignment without providing additional instructions.", "input": {"requestID": "13579", "decision": "Confirm", "acceptedPersonal": "JohnDoe789"}, "expected": {"outcome": "Assignment confirmed successfully", "status": "Confirmed"}}]}, {"usecase": {"name": "Registration", "scenario": "User signs up for an account on Jobify platform.", "actors": "User", "preconditions": "User visits Jobify platform for the first time.", "steps": ["User provides required information including username, email, password, full name, profile details, contact information, privacy settings, and job preferences.", "User submits the registration form."]}, "testcases": [{"name": "Valid User Registration", "description": "Verify that a user can successfully register with valid information.", "input": {"username": "john_doe", "email": "john.doe@example.com", "password": "securehashedpassword123", "fullName": "John Doe", "profile": {"location": "City, Country", "skills": ["Java", "JavaScript", "SQL"], "education": "Bachelor's in Computer Science"}, "contact": {"phone": "123-456-7890", "email": "john.doe@example.com"}, "privacySettings": {"notifications": true, "publicProfile": true}, "job_preferences": {"locations": "New York", "salary_range": "$10k", "job_type": ["Software Engineer", "Web Developer", "ML Engineer"]}}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Incomplete User Registration", "description": "Verify that the system handles the case where a user tries to register with incomplete information.", "input": {"username": "jane_smith", "email": "jane.smith@example.com"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}, {"usecase": {"name": "Login", "scenario": "Registered user logs in to the Jobify platform.", "actors": "User", "preconditions": "User is registered on the Jobify platform.", "steps": ["User enters username and password.", "User submits the login form."]}, "testcases": [{"name": "Valid User Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "john_doe", "password": "securehashedpassword123"}, "expected": {"outcome": "Login successful", "status": "Authenticated"}}, {"name": "Invalid User Login", "description": "Verify that the system handles the case where a user tries to log in with incorrect credentials.", "input": {"username": "john_doe", "password": "incorrectpassword"}, "expected": {"outcome": "Login failed", "status": "Unauthenticated"}}]}, {"usecase": {"name": "Job Search", "scenario": "User searches for jobs based on preferences and applies for suitable positions.", "actors": "User", "preconditions": "User is logged into the Jobify platform.", "steps": ["User enters search criteria including job type, location, and salary range.", "User views the list of jobs matching the search criteria.", "User selects a job to view details."]}, "testcases": [{"name": "Valid Job Search", "description": "Verify that a user can successfully search for jobs and apply for suitable positions.", "input": {"searchCriteria": {"jobType": "Software Engineer", "location": "New York", "salaryRange": "$80k - $100k"}}, "expected": {"outcome": "Job search and application successful", "status": "Completed"}}, {"name": "Empty Job Search Results", "description": "Verify that the system handles the case where the job search yields no results.", "input": {"searchCriteria": {"jobType": "Data Analyst", "location": "Los Angeles", "salaryRange": "$70k - $90k"}}, "expected": {"outcome": "Job search yielded no results", "status": "No jobs found"}}]}, {"usecase": {"name": "Apply for Jobs", "scenario": "Employee submits job applications through the platform.", "actors": "Employee", "preconditions": "Employee has selected a job to apply for.", "steps": ["Employee uploads resume and cover letter.", "Employee submits the application."]}, "testcases": [{"name": "Valid Job Application", "description": "Verify that an employee can successfully submit a job application.", "input": {"jobID": "67890", "resume": "employee_resume.pdf", "coverLetter": "cover_letter.txt"}, "expected": {"outcome": "Application submitted successfully", "applicationStatus": "Under Review"}}, {"name": "Empty Coverpage", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "coverLetter": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}, {"name": "Empty Resume", "description": "Verify that the system handles the case where the employee tries to submit an application without attaching a resume or cover letter.", "input": {"jobID": "54321", "resume": ""}, "expected": {"outcome": "Application failed", "applicationStatus": "Not Submitted"}}]}, {"usecase": {"name": "Employer Job Posting", "scenario": "Employer posts job openings and manages posted jobs on the Jobify platform.", "actors": "Employer", "preconditions": "Employer is logged into the Jobify platform.", "steps": ["Employer navigates to the job posting section.", "Employer fills in job details including title, description, requirements, and application deadline.", "Employer previews the job posting.", "Employer submits the job posting."]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a job opening.", "input": {"jobDetails": {"title": "Data Scientist", "description": "Seeking a skilled data scientist for analytics team.", "requirements": "Master's degree in data science, experience with Python and machine learning.", "applicationDeadline": "2024-03-15"}}, "expected": {"outcome": "Job posting successful", "status": "Posted"}}, {"name": "Incomplete Job Posting", "description": "Verify that the system handles the case where an employer tries to post a job with incomplete information.", "input": {"jobDetails": {"title": "Frontend Developer", "description": "Seeking a frontend developer for web application project."}}, "expected": {"outcome": "Job posting failed", "status": "Incomplete data"}}]}, {"usecase": {"name": "Employer Update Company Details", "scenario": "Employer modifies company information on the platform.", "actors": "Employer", "preconditions": "Employer is logged in.", "steps": ["Employer accesses the company profile.", "Employer edits details (e.g., company description, contact information).", "System updates the company information."]}, "testcases": [{"name": "Valid Company Details Update", "description": "Verify that an employer can successfully update the company information.", "input": {"companyDetails": {"description": "A leading technology company specializing in software development.", "contactEmail": "info@company.com"}}, "expected": {"outcome": "Company details updated successfully", "updatedDetails": "New information"}}, {"name": "Invalid Contact Email Format", "description": "Verify that the system handles the case where the employer tries to update the contact email with an invalid format.", "input": {"companyDetails": {"contactEmail": "invalid-email"}}, "expected": {"outcome": "Company details update failed", "updatedDetails": "No change"}}]}, {"usecase": {"name": "Interview Scheduling", "scenario": "Employer schedules interviews with selected candidates and manages interview details.", "actors": "Employer, Candidate", "preconditions": "Employer has posted job openings and candidates have applied.", "steps": ["Employer reviews job applications and selects candidates for interviews.", "Employer sends interview invitations to selected candidates.", "Candidate accepts the interview invitation.", "Employer schedules the interview date, time, and medium (e.g., Zoom)."]}, "testcases": [{"name": "Select Candidates for Interview", "description": "Verify that an employer can successfully select candidates for interviews.", "input": {"selectedCandidates": ["CandidateA", "CandidateB", "CandidateC"]}, "expected": {"outcome": "Candidates selected for interview", "status": "Candidates notified"}}, {"name": "Send Interview Invitations", "description": "Verify that an employer can successfully send interview invitations to selected candidates.", "input": {"interviewDetails": {"date": "2024-03-20", "time": "10:00 AM", "medium": "Zoom"}}, "expected": {"outcome": "Interview invitations sent", "status": "Candidates notified"}}]}, {"usecase": {"name": "Create a Group", "scenario": "A user creates a group with a name ,profile Photo  description", "Actors": "Any valid user", "precondition": "User is logged in", "steps": ["User clicks on create group button", "User enters the group name", "User enters the group description", "User selects the group profile photo", "User clicks on create group button"]}, "testcases": [{"name": "Valid Group Creation", "description": "Verify that a group is created successfully with valid data", "input": {"name": "Test Group", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group is created successfully", "status": "Created"}}, {"name": "Invalid Group Creation", "description": "Verify that a group is not created with invalid data", "input": {"name": "", "description": "This is a test group", "profilePhoto": "test.jpg"}, "expected": {"outcome": "Group creation failed", "status": "Failed"}}]}, {"usecase": {"name": " Join a group", "scenario": "A user sends a join request to a group, and the group admin approves the request.", "actors": "User, Group Admin", "preconditions": "There is an existing group with an admin", "steps": ["User searches for the group and sends a join request", "Group admin receives the join request", "Admin approves join request", "A notification is sent to the user"]}, "testcases": [{"name": "Join Request Approval", "description": "Verify that a user's join request can be successfully approved by the group admin.", "input": {"user": "NewUser123", "joinRequest": true}, "expected": {"outcome": "Join request approved", "status": "Approved"}}, {"name": "Join Request Rejection", "description": "Verify that the group admin can reject a user's join request.", "input": {"user": "AnotherUser456", "joinRequest": false}, "expected": {"outcome": "Join request rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Approve a Post", "scenario": "A group member posts a post and the group admin approves the post", "actors": "Group Member, Group Admin", "preconditions": "Group member is logged in and is a member of the group and there is a group admin", "postconditions": "Post is visible to all group members", "steps": ["Group member selects images to post", "Group member add relevant tags to the images", "Group member adds a description to the post", "Group member clicks on post button", "A notification is sent to admin about the post", "Group admin approves the post", "A notification is sent to the group member about the approval"]}, "testcases": [{"name": "Valid Image Post with Correct Tags", "description": "Verify that a group member can successfully post images with correct tags", "input": {"selectedImages": ["Nature.jpg", "Travel.jpg"], "tags": ["Nature", "Travel"]}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Image post with incorrect Tags", "description": "Verify that the system handles the case where a group member posts images with incorrect tags, and the admin modifies the tags before approving the post.", "input": {"selectedImages": ["Art.jpg", "Culture.jpg"], "tags": ["Artwork", "History"]}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Empty Image Post ", "description": "Verify that the system handles the case where a group member tries to submit an empty post", "input": {"selectedImages": "", "tags": ""}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a member's post  with valid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved", "status": "Approved"}}, {"name": "Admin Modification of Tags", "description": "Verify that the admin can modify the tags of a member's post  with invalid tags", "input": {"advisorApproval": true}, "expected": {"outcome": "Post approved after tag modification", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a member's post ", "input": {"advisorApproval": false}, "expected": {"outcome": "Post rejected", "status": "Rejected"}}]}, {"usecase": {"name": " Perform Similar Search Operation", "scenario": "A user performs a search operation within a group to find specific contens.", "actors": "User", "preconditions": "The user is a member of the group", "steps": ["User navigates to the group's search functionality", "User enters search criteria (keywords, member names,location etc.)", "System processes the search query and presents relevant results"]}, "testcases": [{"name": "Content Search", "description": "Verify that the user can successfully search for specific content within the group.", "input": {"searchCriteria": "location"}, "expected": {"outcome": "Relevant content is displayed", "status": "Displayed"}}, {"name": "Member Search", "description": "Verify that the user can search for specific members within the group.", "input": {"searchCriteria": "JohnDoe"}, "expected": {"outcome": "Member profile is displayed", "status": "Displayed"}}, {"name": "Empty Search", "description": "Verify that the system handles the case where the user performs an empty search within the group.", "input": {"searchCriteria": ""}, "expected": {"outcome": "No relevant results found", "status": "Failed"}}]}, {"usecase": {"name": "Modify Admin Moderator Role", "scenario": "Group admin can add other group members as an admin and may also resign from adminship ", "actors": "Group Admin, Group Member", "preconditions": "There is an existing group admin", "steps": ["Group admin selects a member to suggest for admin role", "Admin suggests the member for adminship", "Suggested member receives the admin offer through a notification", "Suggested member accepts the offer"]}, "testcases": [{"name": "Admin Role offer - Acceptance", "description": "Verify that the current admin can successfully suggest a member for adminship, and the member accepts the offer.", "input": {"selectedMember": "JohnDoe", "adminOffer": true}, "expected": {"outcome": "Admin role assigned", "status": "Accepted"}}, {"name": "Admin Role offer - Rejection", "description": "Verify that the current admin can suggest a member for adminship, and the member rejects the offer.", "input": {"selectedMember": "JaneDoe", "adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Member accepts Admin Role offer", "description": "Verify that the member can accept the admin role offer.", "input": {"adminOffer": true}, "expected": {"outcome": "Admin role  assigned", "status": "Accepted"}}, {"name": "Member rejects Admin Role offer", "description": "Verify that the member can reject the admin role offer.", "input": {"adminOffer": false}, "expected": {"outcome": "Admin role not assigned", "status": "Rejected"}}, {"name": "Admin Resignation", "description": "Verify that the current admin can resign from adminship.", "input": {"resignation": true}, "expected": {"outcome": "Admin role resigned", "status": "Resigned"}}]}, {"usecase": {"name": "Session Creation", "scenario": "A student creates a session for a specific academic term.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects the academic term for which they want to create a session.", "User enters the session title (e.g., '4-1' for level 4, term 1).", "User creates the session."]}, "testcases": [{"name": "Valid Session Creation", "description": "Verify that a student can successfully create a session for a specific academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation successful", "status": "Success"}}, {"name": "Duplicate Session Title", "description": "Verify that the system handles the case where a student tries to create a session with a title that already exists for the same academic term.", "input": {"session_title": "4-1"}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}, {"name": "Empty Session Title", "description": "Verify that the system handles the case where a student tries to create a session without a title.", "input": {"session_title": ""}, "expected": {"outcome": "Session creation unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "Session Creation with Visibility Settings", "scenario": "A student creates a session and sets its visibility.", "actors": "Student", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Sessions' section.", "User selects to create a new session.", "User enters the session title.", "User selects the visibility setting: public, private, or publish.", "User creates the session."]}, "testcases": [{"name": "Create Public Session", "description": "Verify that a student can create a session with public visibility.", "input": {"session_title": "4-1", "visibility": "public"}, "expected": {"outcome": "Session creation successful with public visibility", "status": "Success"}}, {"name": "Create Private Session", "description": "Verify that a student can create a session with private visibility.", "input": {"session_title": "4-2", "visibility": "private"}, "expected": {"outcome": "Session creation successful with private visibility", "status": "Success"}}, {"name": "Publish Session", "description": "Verify that a student can publish a session to make it visible to others.", "input": {"session_title": "4-1", "visibility": "publish"}, "expected": {"outcome": "Session successfully published", "status": "Success"}}]}, {"usecase": {"name": "Course Creation Under Session", "scenario": "A student creates a course under a session.", "actors": "Student", "preconditions": "User is registered and logged in. A session exists.", "steps": ["User navigates to the desired session.", "User selects to create a new course.", "User enters the course title.", "User creates the course."]}, "testcases": [{"name": "Create Course Under Session", "description": "Verify that a student can create a course under a session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Introduction to Software Development"}, "expected": {"outcome": "Course creation successful under session", "status": "Success"}}, {"name": "Duplicate Course Added Under Same Session", "description": "Verify that the system handles the case where a student tries to create a course with a duplicate title under the same session.", "input": {"session_title": "4-1", "course_title": "CSE408 Software Development", "class_notes": "Advanced Software Development"}, "expected": {"outcome": "Course creation unsuccessful due to duplicate title", "status": "Failed"}}, {"name": "Empty Course Title", "description": "Verify that the system handles the case where a student tries to create a course without a title.", "input": {"session_title": "4-1", "course_title": ""}, "expected": {"outcome": "Course creation unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "Adding Resources to a Course", "scenario": "A student adds various resources to a course.", "actors": "Student", "preconditions": "User is registered and logged in. A course exists under a session.", "steps": ["User navigates to the desired course.", "User selects to add a new resource.", "User specifies the type of resource to add: lecture video, PDF, link, or notes.", "User uploads or provides the necessary information for the selected resource type.", "User adds the resource to the course."]}, "testcases": [{"name": "Add Lecture Video", "description": "Verify that a student can add a lecture video to a course.", "input": {"resource_type": "lecture_video", "video_title": "Introduction to Software Development", "video_url": "https://example.com/lecture1"}, "expected": {"outcome": "Lecture video added successfully to the course", "status": "Success"}}, {"name": "Add PDF Resource", "description": "Verify that a student can add a PDF resource to a course.", "input": {"resource_type": "pdf", "pdf_title": "Software Development Basics", "pdf_file": "example.pdf"}, "expected": {"outcome": "PDF resource added successfully to the course", "status": "Success"}}, {"name": "Add Link", "description": "Verify that a student can add a link to a course.", "input": {"resource_type": "link", "link_title": "Software Development Tutorial", "link_url": "https://example.com/tutorial"}, "expected": {"outcome": "Link added successfully to the course", "status": "Success"}}, {"name": "Add Notes", "description": "Verify that a student can add personal class notes or pictures to a course.", "input": {"resource_type": "notes", "notes_title": "Class Notes - Week 1", "notes_file": "notes_week1.pdf"}, "expected": {"outcome": "Notes added successfully to the course", "status": "Success"}}]}, {"usecase": {"name": "Writing Educational Blogs with Tags", "scenario": "A user writes an educational blog and adds tags to it.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User navigates to the 'Blogs' section.", "User selects to create a new blog post.", "User writes the content of the blog post.", "User adds relevant tags to the blog post.", "User publishes the blog post."]}, "testcases": [{"name": "Write Blog with Tags", "description": "Verify that a user can write an educational blog with tags.", "input": {"blog_title": "Introduction to Machine Learning", "blog_content": "In this blog post, we discuss the basics of machine learning...", "tags": ["machine learning", "artificial intelligence", "data science"]}, "expected": {"outcome": "Blog post created successfully with tags", "status": "Success"}}, {"name": "Empty Blog Title", "description": "Verify that the system handles the case where a user tries to create a blog post without a title.", "input": {"blog_title": "", "blog_content": "Lorem ipsum dolor sit amet...", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Blog Content", "description": "Verify that the system handles the case where a user tries to create a blog post without content.", "input": {"blog_title": "Sample Blog", "blog_content": "", "tags": ["test", "blog"]}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}, {"name": "Empty Tags", "description": "Verify that the system handles the case where a user tries to create a blog post without adding any tags.", "input": {"blog_title": "Sample Blog", "blog_content": "Lorem ipsum dolor sit amet...", "tags": []}, "expected": {"outcome": "Blog post creation unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "Team creation for a contest", "scenario": "A user registers for a contest by creatting a team", "actors": "Team leader", "preconditions": "Contest has not started yet and team members are not part of any other team.", "steps": ["User creates a team", "User is assigned as the team leader"]}, "testcases": [{"name": "Valid Team Creation", "description": "Verify that the contest has not started yet and the user is not already part of another team.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User1"}, "expected": {"outcome": "Team registration successful", "status": "Team Created"}}, {"name": "Duplicate Team Name", "description": "Verify that the system handles the case where a team with the same name already exists for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Team Leader": "User2"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "Contest Already Started", "description": "Verify that the system handles the case where the contest has already started.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team2", "Team Leader": "User3"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}, {"name": "User Already Part of Another Team", "description": "Verify that the system handles the case where the user is already part of another team for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team3", "Team Leader": "User1"}, "expected": {"outcome": "Team registration failed", "status": "Team Not Created"}}]}, {"usecase": {"name": "Submission of a problem solution in a contest", "scenario": "A member team submits a solution for a problem in a contest", "actors": "Team member", "preconditions": "Contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "steps": ["User submits a solution for a problem", "System evaluates the solution", "System updates the scoreboard", "Team unlocks the new problems"]}, "testcases": [{"name": "Correct Flag Submission", "description": "Verify that the contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "Solution1"}, "expected": {"outcome": "Submission successful", "status": "Accepted"}}, {"name": "Incorrect Flag Submission", "description": "Verify that the system handles the case where the submitted flag is incorrect.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P1", "Solution": "IncorrectSolution"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Maximum Submissions Reached", "description": "Verify that the system handles the case where the maximum number of submissions for the problem is reached.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Problem ID": "P2", "Solution": "Solution2"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}, {"name": "Finished Contest Upsolving", "description": "Verify that the system handles the case where the contest is not ongoing.", "input": {"Contest Name": "BUETCTF", "User": "User1", "Problem ID": "P3", "Solution": "Solution3"}, "expected": {"outcome": "Verdict is given but scoreboard is not updated", "status": "Verdict Given"}}]}, {"usecase": {"name": "Asking for clarification in a contest", "scenario": "A team member asks for clarification for a problem in a contest", "actors": "Team member, Contest organizer", "preconditions": "Contest is ongoing and the team is registered for the contest.", "steps": ["User asks for clarification for a problem", "Contest organizer answers the clarification"]}, "testcases": [{"name": "Valid Clarification Request", "description": "Verify that the contest is ongoing and the team is registered for the contest.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1"}, "expected": {"outcome": "Clarification request successful", "status": "Asked"}}, {"name": "Valid Clarification Response", "description": "Verify that the contest organizer can successfully answer the clarification.", "input": {"Contest Name": "BUETCTF", "Team Name": "Team1", "Question": "Clarification1", "Answer": "Answer1"}, "expected": {"outcome": "Clarification response successful", "status": "Answered"}}]}, {"usecase": {"name": "Enter in the contest", "scenario": "A user enters in a contest section", "actors": "Team member, regular users of the system", "preconditions": "Contest is ongoing or finished.", "steps": ["register or unregistered users try to enter into the contest section", "system verifies contest status and allows users to enter into the contest section", "users can see problems, standings, and other contest related information"]}, "testcases": [{"name": "Contest is ongoing or finished", "description": "Verify that the contest is ongoing or finished.", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users redirected to the contest section", "status": "successful"}}, {"name": "contest is upcoming", "description": "verify the contest status", "input": {"Contest Name": "BUETCTF"}, "expected": {"outcome": "Users promted with remaining time for the contest to start", "status": "failed to enter"}}]}, {"usecase": {"name": "Creation of a contest", "scenario": "Admin creates a contest", "actors": "Admin", "preconditions": "user must be an admin of the system and the contest name must be unique", "steps": ["Admin creates a contest with a unique name and type of contest", "System verifies user role and contest name and type", "After sucessful creation of a contest admin can add problems and other specification, set time and date for the contest"]}, "testcases": [{"name": "user is an admin and contest name is unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is created successfully, authorized by the admin", "status": "Contest creation successful"}}, {"name": "user is not an admin", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "user1", "User role": "user"}, "expected": {"outcome": "User is not authorized to create a contest and no contest is created", "status": "Contest creation failed"}}, {"name": "contest name is not unique", "description": "Verify that the user is an admin of the system and the contest name is unique", "input": {"Contest Name": "BUETCTF", "Contest Type": "official", "User id": "admin1", "User role": "admin"}, "expected": {"outcome": "A contest with the given name and type is not created, contest name is not unique", "status": "Contest creation failed"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers on the TravelBee website.", "actors": "User", "steps": ["User provides valid registration details", "User submits the registration form"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register.", "input": {"name": "John Doe", "email": "john@example.com", "password": "StrongPassword123"}, "expected": {"outcome": "Registration successful"}}, {"name": "Existing Email", "description": "Verify that registration fails for an email already in use.", "input": {"name": "Jane Doe", "email": "john@example.com", "password": "SecurePassword456"}, "expected": {"outcome": "Registration failed", "message": "Email is already in use"}}, {"name": "Weak Password", "description": "Verify that registration fails for a weak password.", "input": {"name": "Bob Smith", "email": "bob@example.com", "password": "weak"}, "expected": {"outcome": "Registration failed", "message": "Password strength requirements not met"}}]}, {"usecase": {"name": "Flight Booking", "scenario": "User books a flight for their travel.", "actors": "User", "steps": ["User provides valid flight details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a flight.", "input": {"departure": "City A", "destination": "City B", "date": "2024-03-01", "passengers": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Date", "description": "Verify that booking fails for a past travel date.", "input": {"departure": "City X", "destination": "City Y", "date": "2023-01-15", "passengers": 1}, "expected": {"outcome": "Booking failed", "message": "Invalid travel date"}}, {"name": "Insufficient Seats", "description": "Verify that booking fails for more passengers than available seats.", "input": {"departure": "City P", "destination": "City Q", "date": "2024-05-10", "passengers": 200}, "expected": {"outcome": "Booking failed", "message": "Insufficient seats available"}}]}, {"usecase": {"name": "Hotel Booking", "scenario": "User books a hotel for accommodation.", "actors": "User", "steps": ["User provides valid hotel details", "User confirms the booking"]}, "testcases": [{"name": "Successful Booking", "description": "Verify that a user can successfully book a hotel.", "input": {"location": "Beach City", "dates": "2024-04-15 to 2024-04-20", "roomType": "Deluxe", "numOfRooms": 1}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Location", "description": "Verify that booking fails for an invalid hotel location.", "input": {"location": "Nonexistent City", "dates": "2024-06-01 to 2024-06-05", "roomType": "Standard", "numOfRooms": 2}, "expected": {"outcome": "Booking failed", "message": "Invalid hotel location"}}, {"name": "No Available Rooms", "description": "Verify that booking fails when no rooms are available for the selected dates.", "input": {"location": "City Z", "dates": "2024-08-10 to 2024-08-15", "roomType": "Suite", "numOfRooms": 3}, "expected": {"outcome": "Booking failed", "message": "No available rooms for the selected dates"}}]}, {"usecase": {"name": "User Search", "scenario": "User searches for flights or hotels based on specific criteria.", "actors": "User", "steps": ["User provides valid search criteria"]}, "testcases": [{"name": "Successful Flight Search", "description": "Verify that the system returns relevant flight options for a valid search.", "input": {"departure": "City M", "destination": "City N", "date": "2024-07-01"}, "expected": {"outcome": "Flight options retrieved successfully"}}, {"name": "Successful Hotel Search", "description": "Verify that the system returns relevant hotel options for a valid search.", "input": {"location": "Mountain View", "dates": "2024-09-10 to 2024-09-15", "roomType": "Standard"}, "expected": {"outcome": "Hotel options retrieved successfully"}}, {"name": "No Results", "description": "Verify that the system returns no results for an invalid or uncommon search.", "input": {"departure": "Unknown City", "destination": "Mysterious Town", "date": "2025-01-01"}, "expected": {"outcome": "No results found", "message": "No options match the provided criteria"}}]}, {"usecase": {"name": "Admin Flight Management", "scenario": "Admin adds or removes flights from the system.", "actors": "Admin", "steps": ["Admin adds a new flight", "Admin removes an existing flight"]}, "testcases": [{"name": "Add New Flight", "description": "Verify that the admin can successfully add a new flight.", "input": {"flightDetails": {"flightNumber": "TB123", "departure": "City U", "destination": "City V", "date": "2024-10-01", "availableSeats": 150}}, "expected": {"outcome": "New flight added successfully"}}, {"name": "Remove Existing Flight", "description": "Verify that the admin can successfully remove an existing flight.", "input": {"flightID": "TB456"}, "expected": {"outcome": "Existing flight removed successfully"}}, {"name": "Invalid Flight Details", "description": "Verify that adding a flight fails for invalid or incomplete details.", "input": {"flightDetails": {"departure": "City W", "date": "2024-12-01", "availableSeats": 100}}, "expected": {"outcome": "Adding flight failed", "message": "Incomplete or invalid flight details"}}]}, {"usecase": {"name": "Admin Hotel Management", "scenario": "Admin manages hotels by adding/removing hotels and adding rooms to hotels.", "actors": "Admin", "steps": ["Admin adds a new hotel", "Admin adds a new room to an existing hotel", "Admin removes an existing hotel"]}, "testcases": [{"name": "Add New Hotel", "description": "Verify that the admin can successfully add a new hotel.", "input": {"hotelDetails": {"hotelName": "Luxury Resort", "location": "Beachfront Paradise", "availableRooms": 50}}, "expected": {"outcome": "New hotel added successfully"}}, {"name": "Add Room to Hotel", "description": "Verify that the admin can successfully add a room to an existing hotel.", "input": {"hotelID": "H789", "roomDetails": {"roomNumber": "101", "roomType": "Suite", "price": 200}}, "expected": {"outcome": "Room added to hotel successfully"}}, {"name": "Remove Existing Hotel", "description": "Verify that the admin can successfully remove an existing hotel.", "input": {"hotelID": "H456"}, "expected": {"outcome": "Existing hotel removed successfully"}}, {"name": "Invalid Hotel Details", "description": "Verify that adding a hotel fails for invalid or incomplete details.", "input": {"hotelDetails": {"location": "Mountain View", "availableRooms": 100}}, "expected": {"outcome": "Adding hotel failed", "message": "Incomplete or invalid hotel details"}}, {"name": "Invalid Room Details", "description": "Verify that adding a room fails for invalid or incomplete details.", "input": {"hotelID": "H123", "roomDetails": {"roomType": "InvalidType", "price": -50}}, "expected": {"outcome": "Adding room failed", "message": "Incomplete or invalid room details"}}]}, {"usecase": {"name": "Problem Publication", "scenario": "Setter publishes a problem and Admin approves or rejects", "actors": "Setter, Admin", "preconditions": "Setter is an admin approved setter in our system", "steps": ["Setter designs a problem and saves it", "Setter submits the problem for approval", "Admin approves or rejects the problem"]}, "testcases": [{"name": "Valid Problem Submission", "description": "Verify that a setter can successfully design and submit a problem for approval.", "input": {"problemId": 1}, "expected": {"outcome": "Problem submitted for approval", "status": "Approved"}}, {"name": "Empty Canvas Submission", "description": "Verify that the system handles the case where a setter tries to submit a problem without any canvas.", "input": {"problemId": 1}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a problem.", "input": {"adminApproval": true}, "expected": {"outcome": "Problem approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject a problem.", "input": {"adminApproval": false}, "expected": {"outcome": "Problem rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Problem Setter Registration", "scenario": "A user intends to become a problem setter and registers for the role. Admin reviews and approves/rejects the registration.", "actors": "User, Admin", "preconditions": "", "steps": ["User expresses the intention to become a problem setter", "User submits the registration request", "Admin reviews the registration request and makes a decision (approve/reject)"]}, "testcases": [{"name": "Valid Registration Request", "description": "Verify that a user can successfully submit a valid registration request to become a problem setter.", "input": {"name": "Mahir Labib Dihan", "email": "mahirlabibdihan@gmail.com"}, "expected": {"outcome": "Registration request submitted for approval", "status": "Pending Approval"}}, {"name": "Empty Registration Details", "description": "Verify that the system handles the case where a user tries to submit an empty registration request.", "input": {}, "expected": {"outcome": "Registration request failed", "status": "Rejected"}}, {"name": "Administrator Approval", "description": "Verify that the administrator can successfully approve a submitted problem setter registration request.", "input": {"adminApproval": true}, "expected": {"outcome": "Registration approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the administrator can reject a submitted problem setter registration request.", "input": {"adminApproval": false}, "expected": {"outcome": "Registration rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Problem Solution Submission", "scenario": "A registered user intends to solve a problem available on the platform. The user successfully solves the problem, and the system records the solution.", "actors": "User", "preconditions": "User is registered and logged into the system", "steps": ["User navigates to the list of available problems", "User selects a specific problem to solve", "User provides a solution to the problem", "User submits the solution", "System checks the solution, gives verdict and updates the user's solving history"]}, "testcases": [{"name": "Valid Problem Solution", "description": "Verify that a user can successfully solve a problem and submit a valid solution.", "input": {"problemId": 1, "solutionJson": "solution.json", "checkerJson": "answer.json", "checkerCode": "code.js"}, "expected": {"outcome": "Solution submitted successfully", "status": "Recorded"}}, {"name": "Solution acceptd", "description": "database will be updated as the solution is matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "accepted"}, "expected": {"outcome": "Solution submission acccpted", "status": "Recorded"}}, {"name": "wrong answer", "description": "database will be updated as the solution isn't matched with the answer", "input": {"problemId": 1, "userId": 1, "verdict": "wrong answer"}, "expected": {"outcome": "Solution submission rejected", "status": "Recorded"}}]}, {"usecase": {"name": "Add Problem To Contest", "scenario": "A contest owner or collaborators can add own designed problems to the contest", "actors": "contest setter", "preconditions": "contest setter should be a registered setter in our system. contest id should be a valid contest id and the problem also should be a valid one", "steps": ["Setter navigates to the list of his/her owned or contributed conetests", "Setter selects a specific contest to add problem in", "Setter choose a problem of his/her own and add to the contest"]}, "testcases": [{"name": "Valid problem addition", "description": "a problem is being added into contest ", "input": {"contestId": 1, "problemId": 1}, "expected": {"outcome": "problem added to contest", "status": "approved"}}]}, {"usecase": {"name": "Contest Submission for Approval", "scenario": "A contest organizer wants to submit a complete contest for approval. The organizer arranges the contest, including multiple problems, and submits it for approval. An administrator reviews and approves/rejects the submitted contest.", "actors": "Contest Setter, Admin", "preconditions": "Contest Setter is registered as a setter in our system.", "steps": ["Contest Organizer creates a new contest with multiple problems", "Contest Organizer submits the complete contest for approval", "Administrator reviews and approves/rejects the submitted contest"]}, "testcases": [{"name": "Valid Contest Submission", "description": "Verify that a contest organizer can successfully create and submit a valid contest with multiple problems for approval.", "input": {"contestId": 2}, "expected": {"outcome": "Contest submitted for approval", "status": "Pending Approval"}}, {"name": "Administrator Approval", "description": "Verify that the contest can be published.", "input": {"adminApproval": true}, "expected": {"outcome": "Contest approved", "status": "Approved"}}, {"name": "Administrator Rejection", "description": "Verify that the contest is rejected.", "input": {"adminApproval": false}, "expected": {"outcome": "Contest rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Bus Tracking", "scenario": "Admin can track a live bus.", "actors": "Admin, Driver", "preconditions": "Driver must initiate an allocated trip ", "steps": ["Admin navigates to Tracking module", "Admin selects a live trip from the list", "System shows the trace of the trip using map api"]}, "testcases": [{"name": "Live Trip Tracking", "description": "Verify that Admin can select a valid live trip id to view the bus's path on the map.", "input": {"id": "1931"}, "expected": {"outcome": "Bus path visible on map", "status": "Success"}}, {"name": "Bus Tracking Finished", "description": "Verify that Admin cannot select a finished trip, which is not displayed.", "input": {"id": "1931"}, "expected": {"outcome": "Path not displayed on map", "status": "Finished"}}]}, {"usecase": {"name": "Add a trip allocation", "scenario": "Admin defines a new trip allocation", "actors": "Admin", "preconditions": "Dependencies between Routes, Buses and Bus Staffs are not violated.", "steps": ["Admin navigates to Upcoming Trips module", "Admin enters details for a new trip e.g. route, driver, bus, date and shift", "Admin submits single trip allocation", "Admin submits bulk trip allocation", "System adds the allocation to the database"]}, "testcases": [{"name": "Single Trip Allocation", "description": "Verify that Admin can add a single allocation to the database.", "input": {"route": "Badda", "driver": "altaf68", "helper": "hossain43", "bus": "Ba-12-5555", "shift": "morning", "time": "2023-10-15T08:00:00Z", "admin": "mashroor"}, "expected": {"outcome": "Trip added to database", "status": "Added"}}, {"name": "Bulk Trip Allocation", "description": "Verify that Admin can make bulk allocation of all trips due for the next day.", "input": {"date": "2023-10-16", "admin": "mashroor"}, "expected": {"outcome": "Bulk Allocation saved successfully", "status": "Success"}}, {"name": "Empty Trip Data Selection", "description": "Verify that the system handles the case where an Admin fails to submit an allocation with empty fields.", "input": {"route": "", "driver": "", "helper": "", "bus": "Ba-12-5555", "shift": "", "time": "", "admin": "mashroor"}, "expected": {"outcome": "Error saving bulk allocation", "status": "Failure"}}]}, {"usecase": {"name": "View lists of user, bus, route, staff etc", "scenario": "Authorized Admin can view list of all buses, routes, users and staff", "actors": "Admin", "preconditions": "Route, Bus and Bus Staff etc data are available.", "steps": ["Admin navigates to the respective section (user, bus, route, bus_staff) in Database module", "Admin views a list of entities in the selected list", "Admin clicks on an entity to view its full details"]}, "testcases": [{"name": "View Users List", "description": "Verify that Admin can view the list of all users.", "input": {}, "expected": {"outcome": "User list displayed", "status": "Success"}}, {"name": "View Buses List", "description": "Verify that Admin can view the list of all buses.", "input": {}, "expected": {"outcome": "Bus list displayed", "status": "Success"}}, {"name": "View Routes List", "description": "Verify that Admin can view the list of all Routes.", "input": {}, "expected": {"outcome": "Route list displayed", "status": "Success"}}, {"name": "View Staff List", "description": "Verify that Admin can view the list of all staff.", "input": {}, "expected": {"outcome": "Staff list displayed", "status": "Success"}}]}, {"usecase": {"name": "Add data to user, bus, route, staff etc database", "scenario": "Authorized Admin can add new buses, routes, users and staff", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the clicks on respective buttons to add users, buses, routes, or staff", "Admin fills in the required fields for the new entity", "Admin submits the request to add the new entity", "System validates the data and adds the entity to the database"]}, "testcases": [{"name": "New User Addition", "description": "Verify that Admin can add a new user to the database.", "input": {"id": "201905069", "name": "John Doe", "email": "johndoe@example.com", "phone": "01912345678", "role": "student"}, "expected": {"outcome": "New user added", "status": "Success"}}, {"name": "New User Addition Missing Field", "description": "Admin attempts to add a new user with a missing mandatory field.", "input": {"id": "", "name": "John Doe", "email": "johndoe@example.com", "phone": "", "role": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}, {"name": "New Bus Addition", "description": "Verify that Admin can add a new Bus to the database.", "input": {"id": "Ba-12-1234", "type": "minibus", "capacity": "60"}, "expected": {"outcome": "New bus added", "status": "Success"}}, {"name": "New Bus Addition Missing Field", "description": "Admin attempts to add a new bus with a missing mandatory field.", "input": {"id": "", "capacity": ""}, "expected": {"outcome": "Bus not added", "status": "Failure"}}]}, {"usecase": {"name": "Feedbacks from clients and respond", "scenario": "Authorized Admin can view and respond to client feedbacks", "actors": "Admin", "preconditions": "Admin must be authorized to add new data.", "steps": ["Admin navigates to the Feedback module.", "Admin views all feedbacks from clients", "Admin selects a feedback to read", "Admin responds to the feedback", "System updates the feedback status and optionally notifies the client"]}, "testcases": [{"name": "Feedback List", "description": "Verify that Admin can view all client's feedback.", "input": {}, "expected": {"outcome": "Feedback List Shown", "status": "Success"}}, {"name": "Feedback Details", "description": "Verify that Admin can view a specific client's feedback.", "input": {"feedbackId": "183"}, "expected": {"outcome": "Feedback Details Shown", "status": "Success"}}, {"name": "Feedback Response", "description": "Verify that Admin can respond to client's feedback.", "input": {"feedbackId": "183", "response": "the concerned issue is being looked into soon."}, "expected": {"outcome": "Feedback Responded", "status": "Success"}}]}, {"usecase": {"name": "Requisition from teachers and respond", "scenario": "Authorized Admin can view and respond to teacher requisition requests.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin logs into the system", "Admin navigates to the requisition requests section", "Admin views all requisition requests from teachers", "Admin selects a request to view details", "Admin approves or rejects the request", "System updates the request status"]}, "testcases": [{"name": "Requisition List", "description": "Verify that Admin can view all Teacher requisitions.", "input": {}, "expected": {"outcome": "Requisition List Shown", "status": "Success"}}, {"name": "Requisition Approval", "description": "Admin views and approves a teacher's requisition request.", "input": {"requestId": "123", "busId": "Ba-14-5739", "date": "24-02-2024"}, "expected": {"outcome": "Request approved", "status": "Approved"}}, {"name": "Requisition Rejection", "description": "Admin views and rejects a teacher's requisition request.", "input": {"requestId": "456"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Billing and Inventory list for automobiles", "scenario": "Authorized Admin can view and update billing and inventory management.", "actors": "Admin", "preconditions": "Admin needs to be logged in.", "steps": ["Admin navigates to the Inventory module", "Admin views the list of automobile parts and their billing information", "Admin adds or deletes inventory items as needed", "System updates the inventory list"]}, "testcases": [{"name": "Inventory List", "description": "Admin views the inventory list of automobile parts.", "input": {}, "expected": {"outcome": "Inventory list displayed", "status": "Success"}}, {"name": "Inventory Item Addition", "description": "Admin adds a new item to the automobile parts inventory.", "input": {"partName": "Brake Pad", "quantity": "100", "price": "20"}, "expected": {"outcome": "Item added to inventory", "status": "Success"}}]}, {"usecase": {"name": "Stock Management", "scenario": "Inventory managers/lab assistants stocks equipments according to need.", "actors": "Inventory Manager, Lab Assistant", "preconditions": "Inventory manager is assigned to an inventory and lab assistant is assigned to a lab", "steps": ["Inventory manager/lab assistant checks own location for equipments that are below the threshold", "Inventory manager/lab assistant restocks the equipments which are running low and high in demand", "Inventory manager/lab assistant discards damaged equipments", "Inventory manager/lab assistant updates the stock in the system"]}, "testcases": [{"name": "Valid Location Selection", "description": "Verify that inventory manager/lab assistant has access to that location", "input": {"selectedLocation": "validLocation"}, "expected": {"outcome": "validLocation is selected", "status": "Success"}}, {"name": "Invalid Location Selection", "description": "Verify that the system handles the case where an inventory manager/lab assistant tries to access other inventory/lab", "input": {"selectedLocation": "invalidLocation"}, "expected": {"outcome": "access denied", "status": "Rejected"}}, {"name": "Valid quantity entry", "description": "Verify that the system accepts valid quantity", "input": {"equipment": "Breadboard", "quantity": "10"}, "expected": {"outcome": "Stock updated", "status": "Success"}}, {"name": "Invalid quantity entry", "description": "Verify that the system rejects invalid quantity", "input": {"equipment": "Breadboard", "quantity": -5}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}, {"name": "Empty quantity entry", "description": "Verify that the system rejects empty quantity", "input": {"equipment": "Breadboard", "quantity": ""}, "expected": {"outcome": "Invalid quantity", "status": "Rejected"}}]}, {"usecase": {"name": "Request Processing", "scenario": "Student/Lab Assistant requests for equipments and the request is forwarded to required authority and finally the request is accepted/rejected", "actors": "Student, Lab Assistant, Inventory Manager, Lab Supervisor, Department Head", "preconditions": "Student is enrolled in the university, Lab Assistant is assigned to a lab, Inventory Manager is assigned to an inventory, Lab Supervisor is assigned to a lab, Department Head is assigned to a department", "steps": ["Student/Lab Assistant requests for equipments", "Lab Assistant forwards students' request to lab supervisor if required, otherwise accept/reject/modify it", "Lab Supervisor forwards the request to Department Head if required, otherwise accept/reject/modify it", "Inventory Manager/Department Head accepts/rejects the request"]}, "testcases": [{"name": "Valid Request", "description": "Verify that the system accepts valid request", "input": {"selectedEquipments": ["Breadboard", "Atmega32"], "quantity": ["10", "5"], "selectedLocation": "validLocation"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Invalid Request", "description": "Verify that the system rejects invalid request", "input": {"selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["-10", ""], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Request", "description": "Verify that the system rejects empty request", "input": {"selectedEquipments": "", "quantity": "", "selectedLocation": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Accept Request", "description": "Verify that the lab assistant/lab supervisor/department head can accept a student's request and an inventory manager can accept a lab assistant's request", "input": {"requestState": "Accepted"}, "expected": {"outcome": "Request accepted", "status": "Success"}}, {"name": "Reject Request", "description": "Verify that the lab assistant/lab supervisor/department head can reject a student's request and an inventory manager can reject a lab assistant's request", "input": {"requestState": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Request", "description": "Verify that the lab assistant/lab supervisor can forward a student's request", "input": {"requestState": "Forwarded", "forwardTo": "Lab Supervisor"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Modify Request", "description": "Verify that the lab assistant/lab supervisor/department head can modify a student's request and an inventory manager can modify a lab assistant's request", "input": {"requestState": "Modified", "selectedEquipments": ["Breadboard", "Invalid Equipment"], "quantity": ["10", "5"], "selectedLocation": "invalidLocation"}, "expected": {"outcome": "Request modified", "status": "Success"}}]}, {"usecase": {"name": "Due Management", "scenario": "Lab Assistant/Super Admin monitors dues and takes necessary actions to recover them", "actors": "Lab Assistant, Student, Super Admin", "preconditions": "Lab Assistant is assigned to a lab, Student is enrolled in the university", "steps": ["Lab Assistant monitors dues", "Lab Assistant sends reminders to students with dues", "Lab Assistant updates the system with the status of dues", "Super Admin monitors the dues", "Students return their dues or report lost/damaged", "Lab Assistant updates the system with the status of dues", "Lab Assistant clears the dues after receiving the equipments"]}, "testcases": [{"name": "Valid Due Creation", "description": "Verify that the system creates a valid due for a student and lab assistant can monitor it", "input": {"studentId": "validStudentId", "equipment": "Breadboard", "quantity": "5", "dueDate": "2024-02-28", "location": "validLocation"}, "expected": {"outcome": "Due created", "status": "Success"}}, {"name": "Invalid Due Creation", "description": "Verify that the system rejects invalid due creation", "input": {"studentId": "invalidStudentId", "equipment": "Invalid Equipment", "quantity": "-5", "dueDate": "2024-02-28", "location": "invalidLocation"}, "expected": {"outcome": "Invalid due", "status": "Rejected"}}, {"name": "Empty Due Creation", "description": "Verify that the system rejects empty due creation", "input": {"studentId": "", "equipment": "", "quantity": "", "dueDate": "", "location": ""}, "expected": {"outcome": "Empty due", "status": "Rejected"}}, {"name": "Send Reminder", "description": "Verify that the lab assistant can send reminders to students with dues", "input": {"reminder": "Reminder sent"}, "expected": {"outcome": "Reminder sent", "status": "Success"}}, {"name": "Update Due Status", "description": "Verify that the lab assistant can update the system with the status of dues", "input": {"status": "Returned"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Monitor Due", "description": "Verify that the lab assistant/super admin can monitor the dues", "input": {"monitor": "Dues monitored"}, "expected": {"outcome": "Dues monitored", "status": "Success"}}, {"name": "Return Due", "description": "Verify that the student can return the due", "input": {"status": "Returned"}, "expected": {"outcome": "Due returned", "status": "Success"}}, {"name": "Report Lost/Damaged", "description": "Verify that the student can report lost/damaged due", "input": {"status": "Lost/Damaged"}, "expected": {"outcome": "Due reported", "status": "Success"}}, {"name": "Create Monetary Due", "description": "Verify that the system creates a monetary due for a student", "input": {"studentId": "validStudentId", "amount": "500", "dueDate": "2024-02-28"}, "expected": {"outcome": "Monetary due created", "status": "Success"}}, {"name": "Update Monetary Due Status", "description": "Verify that the lab assistant can update the system with the status of monetary dues", "input": {"status": "Paid"}, "expected": {"outcome": "Status updated", "status": "Success"}}, {"name": "Clear Due", "description": "Verify that the lab assistant can clear the due after receiving the equipments", "input": {"status": "Cleared"}, "expected": {"outcome": "Due cleared", "status": "Success"}}]}, {"usecase": {"name": "Clearance Management", "scenario": "Student requests for clearance, superadmin verifies the request and forwards it to the department head, department head gives clearance.", "actors": "Student, Super Admin, Department Head", "preconditions": "Student is enrolled in the university, Super Admin is assigned to the university, Department Head is assigned to a department", "steps": ["Student requests for clearance", "Super Admin verifies the request and forwards it to the department head", "Department Head gives clearance"]}, "testcases": [{"name": "Valid Clearance Request", "description": "Verify that the system accepts valid clearance request", "input": {"studentId": "validStudentId", "level": "Final level", "term": "Final Term"}, "expected": {"outcome": "Request accepted", "status": "Pending"}}, {"name": "Invalid Clearance Request", "description": "Verify that the system rejects invalid clearance request", "input": {"studentId": "invalidStudentId", "level": "Invalid level", "term": "Invalid Term"}, "expected": {"outcome": "Invalid request", "status": "Rejected"}}, {"name": "Empty Clearance Request", "description": "Verify that the system rejects empty clearance request", "input": {"studentId": "", "level": "", "term": ""}, "expected": {"outcome": "Empty request", "status": "Rejected"}}, {"name": "Verify Clearance Request", "description": "Verify that the super admin can verify the clearance request", "input": {"studentId": "validStudentId", "dues": ""}, "expected": {"outcome": "Request verified", "status": "Success"}}, {"name": "Reject Clearance Request", "description": "Verify that the super admin can reject the clearance request", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Request rejected", "status": "Rejected"}}, {"name": "Forward Clearance Request", "description": "Verify that the super admin can forward the clearance request to the department head", "input": {"forward": "Forwarded"}, "expected": {"outcome": "Request forwarded", "status": "Success"}}, {"name": "Give Clearance", "description": "Verify that the department head can give clearance", "input": {"clearance": "Cleared"}, "expected": {"outcome": "Cleared", "status": "Success"}}, {"name": "Reject Clearance", "description": "Verify that the department head can reject the clearance", "input": {"clearance": "Rejected"}, "expected": {"outcome": "Rejected", "status": "Rejected"}}]}, {"usecase": {"name": "User Management", "scenario": "Super Admin assigns labs to lab assistants and lab supervisors, assigns inventory to inventory managers", "actors": "Super Admin", "preconditions": "Super Admin is assigned to the university", "steps": ["Super Admin assigns labs to lab assistants and lab supervisors", "Super Admin assigns inventory to inventory managers"]}, "testcases": [{"name": "Assign Lab", "description": "Verify that the super admin can assign labs to lab assistants and lab supervisors", "input": {"lab": "Lab1", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Lab assigned", "status": "Success"}}, {"name": "Assign Invalid Lab", "description": "Verify that the super admin cannot assign invalid labs to lab assistants and lab supervisors", "input": {"lab": "Invalid Lab", "labAssistant": "LabAssistant1", "labSupervisor": "LabSupervisor1"}, "expected": {"outcome": "Invalid lab", "status": "Rejected"}}, {"name": "Assign Inventory", "description": "Verify that the super admin can assign inventory to inventory managers", "input": {"inventory": "Inventory1", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Inventory assigned", "status": "Success"}}, {"name": "Assign Invalid Inventory", "description": "Verify that the super admin cannot assign invalid inventory to inventory managers", "input": {"inventory": "Invalid Inventory", "inventoryManager": "InventoryManager1"}, "expected": {"outcome": "Invalid inventory", "status": "Rejected"}}]}, {"usecase": {"name": "User Authentication and Access Control", "scenario": "Users, authors, and admins log in to the website to access their relevant pages.", "actors": "User, Author, Admin", "preconditions": "The website is operational and user credentials are stored securely.", "steps": ["User, Author, or Admin navigates to the login page.", "User enters their credentials (username and password).", "System verifies the credentials and grants access based on the user's role.", "User, Author, or Admin is redirected to their relevant page upon successful authentication."]}, "testcases": [{"name": "User Login", "description": "Verify that a user can log in and access their profile page.", "input": {"username": "user@example.com", "password": "password123"}, "expected": {"outcome": "User successfully logged in", "status": "Authenticated"}}, {"name": "Author Login", "description": "Verify that an author can log in and access their dashboard.", "input": {"username": "author@example.com", "password": "authorpassword"}, "expected": {"outcome": "Author successfully logged in", "status": "Authenticated"}}, {"name": "Admin Login", "description": "Verify that an admin can log in and access the admin panel.", "input": {"username": "admin@example.com", "password": "adminpassword"}, "expected": {"outcome": "Admin successfully logged in", "status": "Authenticated"}}, {"name": "Invalid Credentials", "description": "Verify that the system denies access for invalid credentials.", "input": {"username": "invaliduser@example.com", "password": "invalidpassword"}, "expected": {"outcome": "Access denied", "status": "Not Authenticated"}}]}, {"usecase": {"name": "Course Enrollment and Management", "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.", "actors": "User", "preconditions": "The user is registered and logged in to the website.", "steps": ["User navigates to the list of available courses.", "User browses and selects a course to enroll in.", "User enrolls in the selected course.", "User accesses the course page and views the lessons and quizzes.", "User attends the quizzes within the course.", "User completes the course and gives a rating to the course.", "User views their user profile to track course progress and ratings."]}, "testcases": [{"name": "View Available Courses", "description": "Verify that a user can view all available courses.", "input": {}, "expected": {"outcome": "Courses are displayed", "status": "Successful"}}, {"name": "Enroll in a Course", "description": "Verify that a user can enroll in a course.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "User successfully enrolled", "status": "Enrolled"}}, {"name": "View Lessons in a Course", "description": "Verify that a user can view lessons within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Lessons are accessible", "status": "Successful"}}, {"name": "Attend Quizzes in a Course", "description": "Verify that a user can attend quizzes within a course after enrollment.", "input": {"selectedCourse": "Algebra"}, "expected": {"outcome": "Quizzes are accessible", "status": "Successful"}}, {"name": "Rate a Course", "description": "Verify that a user can rate a course after completing it.", "input": {"selectedCourse": "Algebra", "rating": 4}, "expected": {"outcome": "Course rated successfully", "status": "Rated"}}, {"name": "View User Profile", "description": "Verify that a user can view their profile to track progress and ratings.", "input": {}, "expected": {"outcome": "User profile is accessible", "status": "Successful"}}]}, {"usecase": {"name": "Author Course Management", "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.", "actors": "Author", "preconditions": "The author is registered and logged in to the platform as an author.", "steps": ["Author navigates to the analytics dashboard to view statistics of their existing courses.", "Author decides to create a new course.", "Author enters course details, including title, description, and objectives.", "Author adds lessons and content to the course.", "Author reviews and edits lessons within the course.", "Author submits the completed course to an admin or moderator for review."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an author can view analytics of their existing courses.", "input": {}, "expected": {"outcome": "Analytics displayed", "status": "Successful"}}, {"name": "Create a New Course", "description": "Verify that an author can create a new course.", "input": {"courseDetails": {"title": "Permutation and Combination", "description": "A comprehensive guide to permutations and combinations", "objectives": ["Understand permutations and combinations", "Solve related problems"]}}, "expected": {"outcome": "Course created successfully", "status": "Created"}}, {"name": "Edit Lessons in a Course", "description": "Verify that an author can edit lessons within a course.", "input": {"selectedCourse": "Permutation and Combination", "lessonEdits": {"Lesson 1": "Updated content on permutations", "Lesson 2": "Added examples on combinations"}}, "expected": {"outcome": "Lessons edited successfully", "status": "Edited"}}, {"name": "Submit Course for Review", "description": "Verify that an author can submit a completed course for review.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course submitted for review", "status": "Submitted"}}]}, {"usecase": {"name": "Admin Course Management", "scenario": "An admin can view analytics of a course, send feedback on a submitted course, approve the submitted course, and view analytics about authors.", "actors": "Admin", "preconditions": "The admin is registered and logged in to the platform as an admin.", "steps": ["Admin navigates to the analytics dashboard to view statistics of a specific course.", "Admin reviews the submitted course and sends feedback to the author.", "Admin evaluates the submitted course and decides to approve or reject it.", "Admin views analytics about authors to track their performance."]}, "testcases": [{"name": "View Course Analytics", "description": "Verify that an admin can view analytics of a specific course.", "input": {"selectedCourse": "Permutation and Combination"}, "expected": {"outcome": "Course analytics displayed", "status": "Successful"}}, {"name": "Send Feedback on Submitted Course", "description": "Verify that an admin can send feedback on a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "feedback": "Please provide more examples on combinations."}, "expected": {"outcome": "Feedback sent successfully", "status": "Sent"}}, {"name": "Approve Submitted Course", "description": "Verify that an admin can approve a submitted course.", "input": {"selectedCourse": "Permutation and Combination", "approvalStatus": "Approved"}, "expected": {"outcome": "Course approved successfully", "status": "Approved"}}, {"name": "View Author Analytics", "description": "Verify that an admin can view analytics about authors.", "input": {}, "expected": {"outcome": "Author analytics displayed", "status": "Successful"}}]}, {"usecase": {"name": "Lesson Content with Interactive Elements", "scenario": "Lessons in the website can contain interactive graphs, callouts, questions, and links. The website should properly display them.", "actors": "User", "preconditions": "The user is logged in and accessing a lesson.", "steps": ["User navigates to a lesson containing interactive elements.", "User views the interactive graphs, callouts, questions, and links within the lesson.", "User interacts with the elements as required."]}, "testcases": [{"name": "Display Interactive Graphs", "description": "Verify that the website properly displays interactive graphs within a lesson.", "input": {}, "expected": {"outcome": "Interactive graphs displayed correctly", "status": "Successful"}}, {"name": "Show Callouts", "description": "Verify that the website properly shows callouts within a lesson.", "input": {}, "expected": {"outcome": "Callouts displayed properly", "status": "Successful"}}, {"name": "Present Questions", "description": "Verify that the website properly presents questions within a lesson.", "input": {}, "expected": {"outcome": "Questions displayed correctly", "status": "Successful"}}, {"name": "Handle Links", "description": "Verify that the website properly handles links within a lesson.", "input": {}, "expected": {"outcome": "Links are functional and clickable", "status": "Successful"}}, {"name": "Display Quizzes", "description": "Verify that quizzes within a lesson are properly displayed.", "input": {}, "expected": {"outcome": "Quizzes displayed correctly", "status": "Successful"}}, {"name": "Check Quiz Answers", "description": "Verify that the website checks quiz answers accurately.", "input": {"quizAnswers": {"Question 1": "Option A", "Question 2": "Option C", "Question 3": "Option D"}}, "expected": {"outcome": "Quiz answers checked properly", "status": "Successful"}}]}, {"usecase": {"name": "Add Product", "scenario": "Manager adds a product in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the product", "Manager submits the product"]}, "testcases": [{"name": "Valid add product", "description": "Verify that a manager can successfully add a product", "input": {"category": "Sweet", "name": "Lalmohon", "price": "350", "quantity": "50", "image": "img1.jpg"}, "expected": {"outcome": "Add product Successful", "status": "Approved"}}, {"name": "Empty field add product", "description": "Verify that the system handles the case where manager tries to add a product with an empty field", "input": {"category": "curd", "name": "shahi curd", "price": "", "quantity": "30", "image": "img2.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add a product with invalid data", "input": {"category": "curd", "name": "shahi curd", "price": "-10", "quantity": "40", "image": "img3.jpg"}, "expected": {"outcome": "Add product failed", "status": "Rejected"}}]}, {"usecase": {"name": "Generate a sale", "scenario": "Showroom manager enters the details of a customer and the products and quantity s/he buys.", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid Sale generate", "description": "Verify that a showroom manager can successfully sale some products", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 6}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry successful", "status": "Approved"}}, {"name": "Empty field Sale generate", "description": "Verify that the system handles the case where showroom manager tries to generate a sale with an empty field", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}, {"name": "Inalid Sale generate", "description": "Verify that the system handles the case where showroom manager tries to genarate a sale with an invalid data", "input": {"customer_name": "Md. Faisal Zaman", "customer_contact": "01784203519", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Sale entry failed", "status": "Rejected"}}]}, {"usecase": {"name": "Generate an order to factory", "scenario": "Showroom manager enters the products and quantity s/he wants to order to factory", "actors": "Showroom manager", "preconditions": "Showroom manager is approved", "steps": ["Showroom manager adds the product to the cart", "Showroom manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid order generate", "description": "Verify that a showroom manager can successfully order some products to factory", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Order successful", "status": "Approved"}}, {"name": "Inalid Order generate", "description": "Verify that the system handles the case where showroom manager tries to order a product with an invalid data", "input": {"items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 5}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": -2}]}, "expected": {"outcome": "Order failed", "status": "Rejected"}}]}, {"usecase": {"name": "Generate a transfer to showroom", "scenario": "Factory manager enters the products and quantity s/he wants to transfer to showroom", "actors": "Factory manager", "preconditions": "Factory manager is approved", "steps": ["Factory manager adds the product to the cart", "Factory manager fillups the quantity for every product"]}, "testcases": [{"name": "Valid transfer generate", "description": "Verify that a Factory manager can successfully transfer some products from factory to showroom", "input": {"showroom_id": "17", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer successful", "status": "Approved"}}, {"name": "Empty field transfer generate", "description": "Verify that the system handles the case where factory manager tries to generate a transfer with an empty field", "input": {"showroom_id": "", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": 4}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}, {"name": "Inalid transfer generate", "description": "Verify that the system handles the case where factory manager tries to genarate a transfer with an invalid data", "input": {"showroom_id": "-4", "items": [{"product": {"_id": "65bd140e6248345bbfc5a73e", "category": "misty", "name": "bati curd", "price": 113, "quantity": 106}, "changed_quantity": -3}, {"product": {"_id": "65bd1f82a4a2249980f3a46b", "category": "sweet", "name": "sada misti", "price": 340, "quantity": 50}, "changed_quantity": 8}]}, "expected": {"outcome": "Transfer failed", "status": "Rejected"}}]}, {"usecase": {"name": "Add Employee", "scenario": "Manager adds an employee in the company", "actors": "Manager", "preconditions": "Manager is authorized", "steps": ["Manager fillups all the details of the employee", "Manager submits the information"]}, "testcases": [{"name": "Valid add employee", "description": "Verify that a manager can successfully add an employee", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "15000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee Successful", "status": "Approved"}}, {"name": "Empty field add employee", "description": "Verify that the system handles the case where manager tries to add an employee with an empty field", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}, {"name": "Invalid data entry", "description": "Verify that the system handles the case where manager tries to add an employee with invalid data", "input": {"employeeId": "23", "name": "Sabbir", "contact": "0171234567", "salary": "-30000", "role": "Salesman", "joining date": "25/1/24"}, "expected": {"outcome": "Add employee failed", "status": "Rejected"}}]}, {"usecase": {"name": "Purchase Crop", "scenario": "A buyer wants to buy a specific kind of crop from a seller in the agriculture platform. The system facilitates the transaction between the buyer and the seller.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer and seller are registered users on the platform.", "The seller has listed the crop for sale."], "steps": [{"stepId": 1, "description": "Buyer selects the desired crop.", "input": "Buyer navigates to the marketplace and chooses a specific kind of crop they want to purchase."}, {"stepId": 2, "description": "View crop details.", "input": "System displays detailed information about the selected crop."}]}, "testcases": {"name": "Successful Crop Purchase", "description": "Verify that a buyer can successfully purchase a specific kind of crop from a seller.", "input": {"selectedCrop": "Organic Tomatoes", "seller": "mobarok", "buyer": "rahim", "transactionAmount": 50.0}, "expected": {"outcome": "Transaction successful", "status": "Completed"}}}, {"usecase": {"name": "View Business Analytics Dashboard", "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The user has an active business account."], "steps": [{"stepId": 1, "description": "Navigate to the Analytics Dashboard.", "input": "User clicks on the 'Analytics' section in the website navigation."}, {"stepId": 2, "description": "View Overall Business Statistics.", "input": "System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators."}, {"stepId": 3, "description": "Explore Detailed Analytics.", "input": "User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness."}]}, "testcases": [{"name": "Successful Navigation to Analytics Dashboard", "description": "Verify that the user can successfully navigate to the Analytics Dashboard.", "input": {}, "expected": {"outcome": "Dashboard page is loaded successfully"}}, {"name": "Explore Detailed Analytics - Marketing Effectiveness", "description": "Verify that the user can explore detailed analytics on the effectiveness of marketing efforts.", "input": {"clickedSection": "Marketing Effectiveness"}, "expected": {"outcome": "System displays analytics related to marketing campaigns, conversion rates, and customer acquisition."}}]}, {"usecase": {"name": "Search and Sort Products", "scenario": "A user wants to search for crops and have the ability to sort the search results by name, rate, and popularity.", "actors": ["User"], "preconditions": ["The user is logged in to the website.", "The website has a variety of crops listed in the marketplace."], "steps": [{"stepId": 1, "description": "Enter search criteria.", "input": "User enters the desired search criteria (e.g., crop name or category) into the search bar."}, {"stepId": 2, "description": "Initiate search.", "input": "User clicks on the 'Search' button to initiate the search."}, {"stepId": 3, "description": "Sort search results.", "input": "User selects sorting options such as 'Sort by Name,' 'Sort by Rate,' or 'Sort by Popularity.'"}]}, "testcases": [{"name": "Search for a Specific Crop", "description": "Verify that the user can search for a specific crop by entering its name.", "input": {"searchCriteria": "Tomatoes"}, "expected": {"outcome": "Search results display the specified crop."}}, {"name": "Search for Crops by Category", "description": "Verify that the user can search for crops by selecting a specific category.", "input": {"searchCriteria": "Fruits"}, "expected": {"outcome": "Search results display crops within the selected category."}}, {"name": "Sort Search Results by Popularity", "description": "Verify that the user can sort the search results by crop popularity.", "input": {"sortingOption": "Popularity"}, "expected": {"outcome": "Search results are displayed in order of decreasing crop popularity."}}]}, {"usecase": {"name": "Buyer-Seller Chat", "scenario": "A buyer wants to communicate with a seller using the chat option on the platform.", "actors": ["Buyer", "Seller"], "preconditions": ["The buyer is logged in to the website.", "The buyer has initiated communication with a specific seller."], "steps": [{"stepId": 1, "description": "Open Chat Interface.", "input": "Buyer clicks on the 'Chat' option within the seller's profile or product page."}, {"stepId": 2, "description": "Send Message.", "input": "Buyer enters a message and clicks 'Send' to communicate with the seller."}, {"stepId": 3, "description": "Receive Reply.", "input": "Seller receives the message and replies to the buyer's inquiry."}]}, "testcases": [{"name": "Send Message to Seller", "description": "Verify that the buyer can send a message to the seller.", "input": {"message": "Hi, I'm interested in purchasing your product. Can you provide more details?"}, "expected": {"outcome": "Message is sent successfully to the seller."}}, {"name": "Chat Notifications", "description": "Verify that both the buyer and seller receive notifications for new chat messages.", "input": {"newMessage": "Hello, I have a question about your product."}, "expected": {"outcome": "Both buyer and seller receive notifications for new chat messages."}}]}, {"usecase": {"name": "Admin Monitoring and Profile Management", "scenario": "The admin wants to observe total transactions on the platform and has the authority to shut down any user profile or allow a new seller.", "actors": ["Admin"], "preconditions": ["The admin is logged in to the admin dashboard.", "There are existing user profiles and ongoing transactions on the platform."], "steps": [{"stepId": 1, "description": "Observe Total Transactions.", "input": "Admin views the total number and details of transactions on the platform."}, {"stepId": 2, "description": "Review User Profiles.", "input": "Admin has the option to review user profiles, including sellers and buyers."}, {"stepId": 3, "description": "Take Action on Profile.", "input": "Admin can take actions such as shutting down a profile or allowing a new seller based on their review."}]}, "testcases": [{"name": "Observe Total Transactions", "description": "Verify that the admin can observe the total number and details of transactions on the platform.", "input": {}, "expected": {"outcome": "Admin successfully views total transactions details."}}, {"name": "Allow New Seller", "description": "Verify that the admin can allow a new seller to register on the platform.", "input": {"newSellerRequest": "mobarokSeller"}, "expected": {"outcome": "Admin approves the new seller request, allowing them to register."}}, {"name": "Shutdown User Profile", "description": "Verify that the admin can shut down a user profile.", "input": {"profileToShutdown": "Seller123"}, "expected": {"outcome": "Admin successfully shuts down the specified user profile."}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers an account in the website.", "actors": "New User", "preconditions": "User does not already have an account in the website", "steps": ["New User navigates to the registration page of the website", "New User fills in the required registration details (e.g., username, email, password)", "New User submits the registration form", "The system validates the provided details", "The system creates a new user account or rejects the registration if details are invalid or already in use"]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can successfully register for an account providing unique and valid details.", "input": {"username": "NewUser123", "email": "newuser123@example.com", "password": "SecurePassword123"}, "expected": {"outcome": "Registration successful", "status": "Account created"}}, {"name": "Unsuccessful Registration - Duplicate Email", "description": "Verify that the system prevents registration with an email address already in use.", "input": {"username": "NewUser456", "email": "existingemail@example.com", "password": "AnotherSecurePassword456"}, "expected": {"outcome": "Registration failed", "status": "Email already in use"}}, {"name": "Unsuccessful Registration - Duplicate Username", "description": "Verify that the system prevents registration with a username that is already in use.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "UniquePassword789"}, "expected": {"outcome": "Registration failed", "status": "Username already in use"}}, {"name": "Unsuccessful Registration - Weak Password", "description": "Verify that the system prevents registration with a password that does not fulfill the necessary requirements.", "input": {"username": "ExistingUser", "email": "newemail@example.com", "password": "abcdef"}, "expected": {"outcome": "Registration failed", "status": "Password must be at least 8 characters long and contain a mix of letters and numbers"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account in the CineConnect website.", "actors": "Registered User", "preconditions": "User must have a registered account and know their login credentials", "steps": ["Registered User navigates to the login page of the forum", "Registered User enters their login credentials (e.g., username, password)", "Registered User submits the login form", "The system validates the login credentials", "The system grants access to the user account"]}, "testcases": [{"name": "Successful Login", "description": "Verify that a registered user can successfully log in with correct credentials.", "input": {"username": "RegisteredUser", "password": "CorrectPassword"}, "expected": {"outcome": "Login successful", "status": "Access granted"}}, {"name": "Unsuccessful Login - Incorrect Password", "description": "Verify that the system prevents login attempts with an incorrect password.", "input": {"username": "RegisteredUser", "password": "WrongPassword"}, "expected": {"outcome": "Login failed", "status": "Incorrect credentials"}}, {"name": "Unsuccessful Login - Nonexistent User", "description": "Verify that the system prevents login attempts for a username that does not exist.", "input": {"username": "NonexistentUser", "password": "AnyPassword"}, "expected": {"outcome": "Login failed", "status": "User not found"}}]}, {"usecase": {"name": "Search Movies, MoviePersons, Users, Awards", "scenario": "Users can search for movies, movie-persons, other users, or movie awards like the Oscars within the platform.", "actors": "User", "preconditions": "User must be on the platform with access to the search functionality", "steps": ["User accesses the search feature on the CineConnect platform", "User enters a search query (it could be a movie title, username, or award name)", "The system processes the search query", "The system displays the search results relevant to the query"]}, "testcases": [{"name": "Successful Movie Search", "description": "Verify that the system can successfully return relevant movie results based on the search query.", "input": {"search_query": "Inception"}, "expected": {"outcome": "Search successful", "results_type": "Movies", "results_count": "1 or more", "results_content": "Relevant to 'Inception'"}}, {"name": "Successful User Search", "description": "Verify that the system can successfully return user profiles based on the search query.", "input": {"search_query": "JohnDoe"}, "expected": {"outcome": "Search successful", "results_type": "Users", "results_count": "1 or more", "results_content": "Relevant to 'JohnDoe'"}}, {"name": "Successful Awards Search", "description": "Verify that the system can successfully return information on movie awards based on the search query.", "input": {"search_query": "Oscars 2023"}, "expected": {"outcome": "Search successful", "results_type": "Awards", "results_count": "1 or more", "results_content": "Relevant to 'Oscars 2023'"}}, {"name": "Unsuccessful Search - No Results", "description": "Verify that the system can handle cases where no results are found for the search query.", "input": {"search_query": "NonexistentQuery"}, "expected": {"outcome": "Search unsuccessful", "results_type": "Movies", "results_count": "0", "results_content": "No results found for 'NonexistentQuery'"}}]}, {"usecase": {"name": "Add Movies to Watchlist and Watched List", "scenario": "A user adds movies to their watchlist or marks them as watched on their profile.", "actors": "User", "preconditions": "User must be logged in and have a movie in mind to add to their watchlist or watched list", "steps": ["User searches for a movie using the platform's search feature", "User selects the movie from the search results", "User clicks on 'Add to Watchlist' or 'Mark as Watched'", "The system updates the user's profile with the movie added to the specified list"]}, "testcases": [{"name": "Successful Addition to Watchlist", "description": "Verify that a user can successfully add a movie to their watchlist.", "input": {"movie_title": "Inception", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition successful", "list_updated": "Watchlist", "movies_in_list": "1 or more", "confirmation_message": "Inception added to Watchlist"}}, {"name": "Successful Addition to Watched List", "description": "Verify that a user can successfully mark a movie as watched.", "input": {"movie_title": "The Matrix", "action": "Mark as Watched"}, "expected": {"outcome": "Addition successful", "list_updated": "Watched List", "movies_in_list": "1 or more", "confirmation_message": "The Matrix marked as Watched"}}, {"name": "Unsuccessful Addition - User Not Authenticated", "description": "Verify that the system prevents unauthenticated users from adding movies to their watchlist or watched list.", "input": {"movie_title": "Interstellar", "action": "Add to Watchlist"}, "expected": {"outcome": "Addition failed", "reason": "User not authenticated", "error_message": "Please log in to add movies to your lists."}}]}, {"usecase": {"name": "Rate a Movie", "scenario": "User submits a rating for a specific movie identified by ID.", "actors": "User", "preconditions": "User has a valid account and is authenticated and the movie identified by movieId exists in the system.", "steps": ["User selects a movie by movieId to rate.", "User submits a rating for the movie.", "System validates the user's authentication and permission to rate the movie.", "System updates the movie with the new rating.", "System confirms the rating update to the user."]}, "testcases": [{"name": "Successful Movie Rating", "description": "Validate that a user can successfully submit a rating for a movie.", "input": {"movieId": "Valid movie ID", "rating": 4}, "expected": {"message": "Movie successfully rated", "status": "Created"}}, {"name": "Invalid Movie ID", "description": "Verify the system's response when an invalid `movieId` is provided.", "input": {"movieId": "Invalid ID", "rating": 3}, "expected": {"message": "Invalid input provided", "status": "Bad Request"}}, {"name": "Unauthorized Rating Submission", "description": "Validate the system's response when the request is made without authentication.", "input": {"movieId": "Valid movie ID", "rating": 5}, "expected": {"message": "Authentication required", "status": "Unauthorized"}}, {"name": "Insufficient Permissions", "description": "Test the response when a user attempts to rate a movie but lacks the necessary permissions.", "input": {"movieId": "Valid movie ID", "rating": 2}, "expected": {"message": "Insufficient permissions", "status": "Unauthorized"}}]}, {"usecase": {"name": "Create New Post in Movie Discussion Forum", "scenario": "A user creates a new post within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum", "steps": ["User navigates to the desired movie discussion forum", "User clicks on 'Create New Post'", "User enters the content, and adds images related to the post", "User submits the post for publication"]}, "testcases": [{"name": "Successful Post Creation", "description": "Verify that a user can successfully create and submit a new post when they provide a valid content, and optional images related to the post.", "input": {"content": "Exploring how sci-fi movies have evolved over the decades, highlighting key films and directors that have shaped the genre.", "created_at": "2024-02-03T10:00:00Z", "author": "JohnDoe", "images": ["sci-fi_movie_posters.jpg", "director_interviews.jpg"]}, "expected": {"outcome": "Post creation successful", "status": "Published"}}, {"name": "Unsuccessful Post Submission - Empty Content", "description": "Verify that the system prevents a post from being submitted if the content or the list of submitted images is empty.", "input": {"content": "", "created_at": "2024-02-03T11:00:00Z", "author": "JaneDoe", "images": []}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Post Submission - Not a Member", "description": "Verify that the system prevents a user from creating a post if they are not a forum member, regardless of the post's content quality.", "input": {"content": "A deep dive into some of the most underrated movies from the past decade and why they deserve more recognition.", "created_at": "2024-02-03T12:00:00Z", "author": "NonMemberUser", "images": ["underrated_movies.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Post Submission - Inappropriate Content", "description": "Verify that the system prevents a post from being submitted if the content is flagged as inappropriate, even if it's related to movies.", "input": {"title": "Controversial Movie Opinions", "content": "Content that violates forum rules or is deemed inappropriate for the community.", "created_at": "2024-02-03T13:00:00Z", "author": "RebelUser", "images": ["controversial_scenes.jpg"]}, "expected": {"outcome": "Post creation failed", "status": "Rejected due to inappropriate content"}}]}, {"usecase": {"name": "Create New Comment or Reply in Movie Discussion Forum", "scenario": "A user comments on an existing post or replies to another comment within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum and the post or comment must exist", "steps": ["User navigates to an existing post within the movie discussion forum", "User clicks on 'Comment' or 'Reply' to engage with the post or an existing comment", "User enters the content of their comment or reply", "User submits the comment or reply for publication"]}, "testcases": [{"name": "Successful Comment Creation", "description": "Verify that a user can successfully create and submit a new comment on a post when they provide valid content.", "input": {"content": "I completely agree with your points on the evolution of sci-fi movies, especially the part about 2000s innovations.", "created_at": "2024-02-04T10:00:00Z", "author": "JaneDoe", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation successful", "status": "Published"}}, {"name": "Unsuccessful Comment Submission - Empty Content", "description": "Verify that the system prevents a comment from being submitted if the content is empty.", "input": {"content": "", "created_at": "2024-02-04T12:00:00Z", "author": "EmptyContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to empty content"}}, {"name": "Unsuccessful Comment Submission - Not a Member", "description": "Verify that the system prevents a user from creating a comment if they are not a forum member.", "input": {"content": "Absolutely love this movie, and the points you've made!", "created_at": "2024-02-04T13:00:00Z", "author": "NonMemberUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Comment Submission - Inappropriate Content", "description": "Verify that the system prevents a comment from being submitted if the content is flagged as inappropriate.", "input": {"content": "Inappropriate content that violates forum rules.", "created_at": "2024-02-04T14:00:00Z", "author": "InappropriateContentUser", "parent_post_id": "12345"}, "expected": {"outcome": "Comment creation failed", "status": "Rejected due to inappropriate content"}}]}, {"usecase": {"name": "Vote on a Post/Comment/Reply in Movie Discussion Forum", "scenario": "A user votes on an existing post, comment, or reply within a movie discussion forum.", "actors": "User", "preconditions": "User must be a registered member of the forum, and the post, comment, or reply must exist", "steps": ["User navigates to an existing post, comment, or reply within the movie discussion forum", "User decides to upvote, downvote, or undo a previous vote", "User clicks on 'Upvote', 'Downvote', or 'Undo Vote' button", "The system updates the vote count accordingly"]}, "testcases": [{"name": "Successful Upvote", "description": "Verify that a user can successfully upvote a post, comment, or reply.", "input": {"action": "Upvote", "created_at": "2024-02-05T10:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Upvote successful", "new_upvote_count": "Increased by 1"}}, {"name": "Successful Downvote", "description": "Verify that a user can successfully downvote a post, comment, or reply.", "input": {"action": "Downvote", "created_at": "2024-02-05T11:00:00Z", "author": "User456", "post_id": "67890"}, "expected": {"outcome": "Downvote successful", "new_downvote_count": "Increased by 1"}}, {"name": "Successful Vote Undo", "description": "Verify that a user can successfully undo a previous vote on a post, comment, or reply.", "input": {"action": "Undo Vote", "created_at": "2024-02-05T12:00:00Z", "author": "User123", "post_id": "12345"}, "expected": {"outcome": "Vote undo successful", "new_vote_count": "Decreased by 1"}}, {"name": "Unsuccessful Vote - Not a Member", "description": "Verify that the system prevents a user from voting if they are not a forum member.", "input": {"action": "Upvote", "created_at": "2024-02-05T13:00:00Z", "author": "NonMemberUser", "post_id": "11111"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to user not being a member"}}, {"name": "Unsuccessful Vote - Voting Both Ways", "description": "Verify that the system prevents a user from both upvoting and downvoting the same post.", "input": {"action": "Upvote then Downvote", "created_at": "2024-02-05T14:00:00Z", "author": "User789", "post_id": "12345"}, "expected": {"outcome": "Vote failed", "status": "Rejected due to attempting both upvote and downvote"}}]}, {"usecase": {"name": "Report a Post", "scenario": "A user reports a post in the discussion forum for violating community guidelines or other specific reasons.", "actors": "User, Moderator", "preconditions": "User must be logged in and have identified a post they believe violates the forum's rules or is otherwise inappropriate.", "steps": ["User navigates to the post they wish to report", "User clicks on the 'Report' button associated with the post", "User selects a reason for reporting the post from a predefined list or specifies a custom reason in the provided text area", "User submits the report", "The system acknowledges the report and forwards it to moderators for review"]}, "testcases": [{"name": "Successful Post Report - Predefined Reason", "description": "Verify that a user can successfully report a post for a predefined reason.", "input": {"post_id": "12345", "reason": "Harassment", "description": "The post contains harassing content towards an individual or group."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Successful Post Report - Custom Reason", "description": "Verify that a user can successfully report a post for a custom reason.", "input": {"post_id": "67890", "reason": "Other", "description": "The post promotes false information."}, "expected": {"outcome": "Report submission successful", "confirmation_message": "Your report has been submitted and will be reviewed by our moderation team."}}, {"name": "Unsuccessful Post Report - Not Authenticated", "description": "Verify that the system prevents a user from reporting a post if they are not logged in.", "input": {"post_id": "11223", "reason": "Spam", "description": "This post is unsolicited advertising and not relevant to the forum."}, "expected": {"outcome": "Report submission failed", "reason": "User not authenticated", "error_message": "Please log in to report a post."}}, {"name": "Unsuccessful Post Report - Post Not Found", "description": "Verify that the system handles cases where the post to be reported does not exist or has already been removed.", "input": {"post_id": "404NotFound", "reason": "Inappropriate Content", "description": "The content of this post is inappropriate for the forum."}, "expected": {"outcome": "Report submission failed", "reason": "Post not found", "error_message": "The post you are trying to report could not be found. It may have already been removed."}}]}, {"usecase": {"name": "Send CineFellow Request", "scenario": "A user sends a CineFellow request to another user to connect within the platform.", "actors": "User, Recipient User", "preconditions": "Both users must have a registered account on the platform. The sender must be logged in.", "steps": ["Sender navigates to the profile of the user they wish to connect with", "Sender clicks on the 'Send CineFellow Request' button", "The system sends a request to the recipient user", "The recipient user receives a notification of the CineFellow request"]}, "testcases": [{"name": "Successful CineFellow Request", "description": "Verify that a user can successfully send a CineFellow request to another user.", "input": {"sender_username": "User123", "recipient_username": "User456"}, "expected": {"outcome": "CineFellow request successful", "confirmation_message": "CineFellow request sent to User456"}}, {"name": "Unsuccessful CineFellow Request - Not Authenticated", "description": "Verify that the system prevents a user from sending a CineFellow request if they are not logged in.", "input": {"sender_username": "Anonymous", "recipient_username": "User789"}, "expected": {"outcome": "CineFellow request failed", "reason": "Sender not authenticated", "error_message": "Please log in to send CineFellow requests."}}, {"name": "Unsuccessful CineFellow Request - Recipient Not Found", "description": "Verify that the system prevents a user from sending a CineFellow request to some non-existent user.", "input": {"sender_username": "User789", "recipient_username": "NonExistentUser"}, "expected": {"outcome": "CineFellow request failed", "reason": "Recipient does not exist", "error_message": "Please send request to a registered user."}}]}, {"usecase": {"name": "Accept or Reject CineFellow Request", "scenario": "A user responds to a CineFellow request from another user by either accepting or rejecting it.", "actors": "Recipient User", "preconditions": "Recipient User must have received a CineFellow request and must be logged in to respond.", "steps": ["Recipient User navigates to their notifications or CineFellow requests section", "Recipient User views the CineFellow request", "Recipient User chooses to 'Accept' or 'Reject' the request", "The system updates the CineFellow status based on the user's decision"]}, "testcases": [{"name": "Successful CineFellow Request Acceptance", "description": "Verify that a user can successfully accept a CineFellow request.", "input": {"request_id": "12345", "action": "Accept"}, "expected": {"outcome": "CineFellow request acceptance successful", "confirmation_message": "CineFellow request accepted. You are now CineFellows."}}, {"name": "Successful CineFellow Request Rejection", "description": "Verify that a user can successfully reject a CineFellow request.", "input": {"request_id": "67890", "action": "Reject"}, "expected": {"outcome": "CineFellow request rejection successful", "confirmation_message": "CineFellow request rejected."}}, {"name": "Unsuccessful CineFellow Request Response - Not Authenticated", "description": "Verify that the system prevents a user from responding to a CineFellow request if they are not logged in.", "input": {"request_id": "11223", "action": "Accept"}, "expected": {"outcome": "CineFellow request response failed", "reason": "User not authenticated", "error_message": "Please log in to respond to CineFellow requests."}}, {"name": "Unsuccessful CineFellow Request Response - Request Expired", "description": "Verify that the system handles cases where the CineFellow request has expired or been withdrawn before the user could respond.", "input": {"request_id": "33445", "action": "Accept"}, "expected": {"outcome": "CineFellow request response failed", "reason": "Request expired", "error_message": "This CineFellow request has expired or been withdrawn."}}]}, {"usecase": {"name": "Add or Modify a Movie", "scenario": "A verified user adds a new movie to the platform or modifies details of an existing movie.", "actors": "Verified User", "preconditions": "User must be logged in as a verified account. For modification, the movie must already exist in the database.", "steps": ["Verified User navigates to the 'Add Movie' or 'Edit Movie' section", "Verified User fills in the movie details: title, release date, plot summary, poster URL, trailer URL, duration, language, country of first release, certification, awards, and casts", "Verified User submits the form", "The system validates the input and updates the database with the new or modified movie details"]}, "testcases": [{"name": "Successful Movie Addition", "description": "Verify that a verified user can successfully add a new movie with all required details.", "input": {"title": "New Sci-Fi Movie", "release_date": "2024-07-03", "plot_summary": "A thrilling journey through space to discover new worlds.", "poster_url": "http://example.com/poster.jpg", "trailer_url": "http://example.com/trailer.mp4", "duration_in_mins": 120, "language": "English", "country_of_first_release": "USA", "certification": "PG-13", "awards": ["Best Visual Effects"], "casts": ["Actor A", "Actor B"], "genres": ["Sci-Fi", "Adventure"]}, "expected": {"outcome": "Movie addition successful", "confirmation_message": "New Sci-Fi Movie has been successfully added to the platform."}}, {"name": "Successful Movie Modification", "description": "Verify that a verified user can successfully modify details of an existing movie.", "input": {"movie_id": "12345", "updates": {"plot_summary": "An updated thrilling journey through space.", "awards": ["Best Visual Effects", "Best Director"]}}, "expected": {"outcome": "Movie modification successful", "confirmation_message": "The movie details have been successfully updated."}}, {"name": "Unsuccessful Movie Addition - Missing Required Fields", "description": "Verify that the system prevents movie addition if required fields are missing.", "input": {"title": "Incomplete Movie", "release_date": "", "plot_summary": "A story about something.", "poster_url": "http://example.com/poster.jpg", "trailer_url": "http://example.com/trailer.mp4", "duration_in_mins": 120, "language": "English", "country_of_first_release": "USA", "certification": "PG-13", "awards": ["Best Visual Effects"], "casts": ["Actor A", "Actor B"], "genres": ["Sci-Fi", "Adventure"]}, "expected": {"outcome": "Movie addition failed", "reason": "Missing required fields", "error_message": "Please complete all required fields before submitting."}}, {"name": "Unsuccessful Movie Modification - Not Authenticated", "description": "Verify that the system prevents modification of movie details if the user is not verified or logged in.", "input": {"movie_id": "67890", "updates": {"duration_in_mins": 120}}, "expected": {"outcome": "Movie modification failed", "reason": "User not authenticated or verified", "error_message": "You must be a verified user to modify movie details."}}]}, {"usecase": {"name": "Update Showtimes for Existing Theater", "scenario": "Theater manager updates the showtimes for a specific theater identified by ID.", "actors": "Theater Manager", "preconditions": "Theater manager has valid credentials to access the system and the theater identified by theaterId exists in the system.", "steps": ["Theater manager selects a theater by theaterId to update its showtimes.", "Theater manager provides new showtime details for one or more movies.", "System updates the showtimes for the specified theater.", "System confirms the successful update to the theater manager."]}, "testcases": [{"name": "Successful Showtime Update", "description": "Validate that showtimes are successfully updated when valid input is provided.", "input": {"theaterId": 1, "showtimeDetails": [{"hall_id": 101, "movie_id": 201, "time": "2024-01-15 18:30", "ticket_price": 12.5}, {"hall_id": 102, "movie_id": 202, "time": "2024-01-16 19:00", "ticket_price": 15.0}]}, "expected": {"outcome": "Showtimes updated successfully", "status": "Success"}}, {"name": "Invalid Theater ID", "description": "Verify the system's response when an invalid `theaterId` is provided.", "input": {"theaterId": "Invalid ID"}, "expected": {"message": "Theater not found", "status": "Not Found"}}, {"name": "Unauthorized Access", "description": "Validate the system's response when the request is made without valid credentials.", "input": {"theaterId": 1}, "expected": {"message": "Unauthorized - Missing or invalid credentials", "status": "Unauthorized"}}, {"name": "Invalid Input Data", "description": "Verify the system's response to improperly formatted showtime details.", "input": {"theaterId": 1, "showtimeDetails": [{"hall_id": "101", "movie_id": "202", "time": "invalid-time-format", "ticket_price": "invalid-price-format"}]}, "expected": {"message": "Invalid input data", "status": "Bad Request"}}, {"name": "Forbidden Access", "description": "Test the response when the theater manager attempts to update showtimes for a theater they do not have permission to access.", "input": {"theaterId": 1}, "expected": {"message": "Forbidden - Access to the resource is forbidden", "status": "Forbidden"}}]}, {"usecase": {"name": "Post New Product in Marketplace", "scenario": "User submits a new product to the marketplace.", "actors": "User", "preconditions": "User has a registered and approved account on the marketplace and is logged in and has permission to list new products.", "steps": ["User prepares the new product details according to the marketplace guidelines.", "User navigates to the product submission section and inputs the new product details.", "System validates the submitted product details.", "System adds the new product to the marketplace.", "System confirms the successful submission to the user."]}, "testcases": [{"name": "Successful Product Submission", "description": "Validate that a user can successfully submit a new product when all required details are provided correctly.", "input": {"productDetails": {"name": "Stranger Things Notebook", "description": "Limited edition notebook with themed cover art.", "price": 9.99, "category": "Stationery", "tags": ["notebook", "Stranger Things", "TV show", "limited edition"]}}, "expected": {"message": "Product successfully submitted", "status": "Created"}}, {"name": "Incomplete Product Details", "description": "Verify that the system rejects the submission if required product details are missing.", "input": {"productDetails": {"name": "Friends Laptop Sleeve", "description": ""}}, "expected": {"message": "Submission failed: Missing required product details", "status": "Bad Request"}}, {"name": "Invalid Product Details", "description": "Validate that the system rejects submissions with invalid product details.", "input": {"productDetails": {"name": "The Office Desk Organizer", "description": "Organize your desk with a touch of Dunder Mifflin.", "price": -20.0}}, "expected": {"message": "Submission failed: Invalid product details", "status": "Bad Request"}}, {"name": "Unauthorized Submission", "description": "Test the system's response when an unauthorized user attempts to submit a new product.", "input": {"productDetails": {"name": "Game of Thrones Keychain", "description": "Carry the sigil of your favorite house with this keychain.", "price": 5.99}}, "expected": {"message": "Unauthorized: You do not have permission to submit products", "status": "Unauthorized"}}, {"name": "Duplicate Product Submission", "description": "Ensure the system rejects a submission if the product already exists in the marketplace.", "input": {"productDetails": {"name": "Stranger Things Notebook", "description": "Limited edition notebook with themed cover art.", "price": 9.99}}, "expected": {"message": "Submission failed: Duplicate product", "status": "Bad Request"}}]}, {"usecase": {"name": "Ticket Purchase", "scenario": "A student can purchase a ticket for bus trip", "actors": "Student, Bus Company", "preconditions": "Student is enrolled in the university ", "steps": ["Student selects the number of tickets", "Student submits the request"]}, "testcases": [{"name": "Valid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases a valid number of tickets.", "input": {"numberOfTickets": 1, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket purchased"}}, {"name": "Invalid Ticket Purchase", "description": "Verify that the system handles the case where a student purchases an invalid number of tickets.", "input": {"numberOfTickets": 0, "studentId": "1905121", "transactionId": "123456789", "method": "Credit Card"}, "expected": {"outcome": "Ticket not purchased", "reason": "Invalid number of tickets"}}]}, {"usecase": {"name": "Ticket scanning", "scenario": "A bus staff can scan the ticket of student for bus trip", "actors": "Bus Staff, Student", "preconditions": "Student is enrolled in the university ", "steps": ["Student shows the ticket to the Bus Staff", "Bus Staff scans the ticket"]}, "testcases": [{"name": "Valid Ticket Scanning", "description": "Verify that the system handles the case where a bus staff scans a valid ticket.", "input": {"ticketId": "123456789", "studentId": "1905121"}, "expected": {"outcome": "Ticket scanned successfully"}}, {"name": "Invalid Ticket Scanning", "description": "Verify that the system handles the case where a bus staff scans an invalid ticket.", "input": {"ticketId": "123456789", "studentId": "1905121"}, "expected": {"outcome": "Ticket not scanned", "reason": "Invalid ticket"}}]}, {"usecase": {"name": "Route Time Calendar", "scenario": "A student can view the future bus trips", "actors": "Student, Admin", "preconditions": "Student is enrolled in the university", "steps": ["Student selects the date", "Student selects the route", "Student submits the request"]}, "testcases": [{"name": "Valid Route Time Calendar", "description": "Verify that the system handles the case where a student selects a valid date and route.", "input": {"date": "2024-05-12", "route": "BUET to Farmgate"}, "expected": {"outcome": "Route time calendar displayed"}}, {"name": "Invalid Route Time Calendar", "description": "Verify that the system handles the case where a student selects an invalid date and route.", "input": {"date": "1998-05-12", "route": "BUET to Farmgate"}, "expected": {"outcome": "Route time calendar not displayed", "reason": "Invalid date or route"}}]}, {"usecase": {"name": "Feedback Submission", "scenario": "A student can submit feedback about their bus trip experience", "actors": "Student, Admin", "preconditions": "Student is enrolled in the university", "steps": ["Student selects the date and time of the bus trip", "Student provides feedback on various aspects such as cleanliness, punctuality, and comfort", "Student submits the feedback form"]}, "testcases": [{"name": "Valid Feedback Submission", "description": "Verify that the system accepts valid feedback submission", "input": {"date": "2024-05-15", "time": "14:00", "feedback": "The bus was not clean and the seats were uncomfortable"}, "expected": {"outcome": "Feedback submitted successfully"}}, {"name": "Invalid Feedback Submission", "description": "Verify that the system rejects invalid feedback submissions", "input": {"date": "2030-05-15", "time": "14:00", "feedback": "The bus was not clean and the seats were uncomfortable"}, "expected": {"outcome": "Feedback not submitted", "reason": "Invalid date"}}]}, {"usecase": {"name": "Tracking", "scenario": "A student can track the location of the bus in real-time", "actors": "Student, Bus Driver, Admin", "preconditions": "Student is enrolled in the university, Bus has GPS tracking enabled", "steps": ["Driver enables GPS tracking on the bus", "Student opens the tracking page or app", "Student selects the bus route", "Student views the real-time location of the bus on the map"]}, "testcases": [{"name": "Valid Tracking", "description": "Verify that the system accurately displays the real-time location of the bus", "input": {"route": "Farmgate to BUET"}, "expected": {"outcome": "Bus location displayed on the map"}}, {"name": "Invalid Tracking", "description": "Verify that the system handles invalid tracking requests appropriately", "input": {"route": "Invalid Route"}, "expected": {"outcome": "Bus location not displayed", "reason": "Invalid route selected"}}]}, {"usecase": {"name": "Bus Requisition", "scenario": "A teacher can request various types of buses for specific dates for their own reasons", "actors": "Teacher, Admin", "preconditions": "Teacher is employed by the university", "steps": ["Teacher logs into the bus requisition system", "Teacher selects the date for the bus requisition", "Teacher selects the type of bus required (e.g., shuttle bus, coach, mini-van)", "Teacher provides the reason for the bus requisition", "Teacher submits the bus requisition request"]}, "testcases": [{"name": "Valid Bus Requisition", "description": "Verify that the system accepts a valid bus requisition request from the teacher", "input": {"date": "2024-06-10", "busType": "Micro Bus", "reason": "Field trip with students"}, "expected": {"outcome": "Bus requisition request submitted successfully"}}, {"name": "Invalid Bus Requisition", "description": "Verify that the system rejects an invalid bus requisition request from the teacher", "input": {"date": "2024-06-10", "busType": "", "reason": ""}, "expected": {"outcome": "Bus requisition request not submitted", "reason": "Missing required information: bus type and reason"}}]}, {"usecase": {"name": "Repair and Request for parts from inventory", "scenario": "A bus driver can request for repair and parts from the inventory", "actors": "Bus Driver, Admin", "preconditions": "Bus is in need of repair and parts", "steps": ["Bus Driver logs into the system", "Bus Driver selects the bus that needs repair", "Bus Driver selects the parts required from the inventory", "Bus Driver submits the repair and parts request"]}, "testcases": [{"name": "Valid Repair and Request for parts", "description": "Verify that the system accepts a valid repair and parts request from the bus driver", "input": {"busId": "123", "parts": ["Engine Oil", "Brake Pads"]}, "expected": {"outcome": "Repair and parts request submitted successfully"}}, {"name": "Invalid Repair and Request for parts", "description": "Verify that the system rejects an invalid repair and parts request from the bus driver", "input": {"busId": "", "parts": []}, "expected": {"outcome": "Repair and parts request not submitted", "reason": "Missing required information: bus id and parts"}}]}, {"usecase": {"name": "Reading Book Summaries", "scenario": "User reads summaries called bytes of books.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User browses the list of book summaries", "User selects and reads a summary"]}, "testcases": [{"name": "Valid Summary Reading", "description": "Verify that a user can successfully read a book summary.", "input": {"selectedSummary": "Delirium"}, "expected": {"outcome": "Reading successful", "status": "Completed"}}, {"name": "Invalid Summary Selection", "description": "Verify the system's response when a user selects a non-existent summary.", "input": {"selectedSummary": "NonExistentSummary"}, "expected": {"outcome": "Reading failed", "status": "Error"}}]}, {"usecase": {"name": "Managing Favorites", "scenario": "User saves books to and manages their favorites list.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User selects a book or summary", "User adds the selection to their favorites list"]}, "testcases": [{"name": "Add to Favorites", "description": "Verify that a user can successfully add a book/summary to their favorites.", "input": {"selectedBook": "Requiem"}, "expected": {"outcome": "Added to favorites", "status": "Success"}}, {"name": "Add Non-existent Book to Favorites", "description": "Verify the response when a user tries to add a non-existent book to favorites.", "input": {"selectedBook": "NonExistentBook"}, "expected": {"outcome": "Addition failed", "status": "Error"}}]}, {"usecase": {"name": "Highlighting Quotations", "scenario": "User highlights and saves quotations from a book.", "actors": "User", "preconditions": "User is registered, logged in, and reading a book.", "steps": ["User selects a quotation from the book", "User highlights and saves the quotation"]}, "testcases": [{"name": "Valid Quotation Highlighting", "description": "Verify that a user can successfully highlight and save a quotation.", "input": {"selectedQuotation": "Divergent"}, "expected": {"outcome": "Highlighting successful", "status": "Saved"}}, {"name": "Highlighting Non-existent Quotation", "description": "Verify the response when a user tries to highlight a non-existent quotation.", "input": {"selectedQuotation": "NonExistentQuotation"}, "expected": {"outcome": "Highlighting failed", "status": "Error"}}]}, {"usecase": {"name": "Reporting Vulgar Content", "scenario": "User reports vulgar or inappropriate content in a book or summary.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User encounters vulgar content", "User reports the content"]}, "testcases": [{"name": "Valid Content Reporting", "description": "Verify that a user can successfully report vulgar content.", "input": {"reportedContent": "Insurgent"}, "expected": {"outcome": "Report successful", "status": "Acknowledged"}}, {"name": "Reporting Non-existent Content", "description": "Verify the response when a user tries to report content that doesn't exist.", "input": {"reportedContent": "NonExistentContent"}, "expected": {"outcome": "Report failed", "status": "Error"}}]}, {"usecase": {"name": "Content Creation by Creators", "scenario": "Creators add new book summaries or full books to the platform.", "actors": "Creator", "preconditions": "Creator is registered, logged in, and has content creation privileges.", "steps": ["Creator writes a book summary or full book", "Creator submits the content to the platform"]}, "testcases": [{"name": "Valid Content Submission", "description": "Verify that a creator can successfully submit new content.", "input": {"submittedContent": "Pandemonium"}, "expected": {"outcome": "Submission successful", "status": "Pending Review"}}, {"name": "Submission of Incomplete Content", "description": "Verify the response when a creator submits incomplete content.", "input": {"submittedContent": "IncompleteSummary"}, "expected": {"outcome": "Submission failed", "status": "Rejected"}}]}, {"usecase": {"name": "Complaint Submission", "scenario": "Student submits a complaint to the hall authority and the hall authority responds to the complaint", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student inputs the complaint title and details", "Student submits the complaint", "Hall authority receives the complaint"]}, "testcases": [{"name": "Valid Complaint Submission", "description": "Verify that a student can successfully submit a complaint.", "input": {"title": "Noisy Neighbours", "details": "My neighbours are too noisy at night."}, "expected": {"outcome": "Complaint submitted", "status": "Submitted"}}, {"name": "Invalid Complaint Submission", "description": "Verify that a student cannot submit a complaint without a title.", "input": {"title": "", "details": "My neighbours are too noisy at night."}, "expected": {"outcome": "Complaint not submitted", "status": "Not Submitted"}}, {"name": "Valid Complaint Response", "description": "Verify that the hall authority can successfully respond to a complaint.", "input": {"response": "We will look into the matter."}, "expected": {"outcome": "Complaint responded to", "status": "Responded"}}, {"name": "Invalid Complaint Response", "description": "Verify that the hall authority cannot respond to a complaint without a response.", "input": {"response": ""}, "expected": {"outcome": "Complaint not responded to", "status": "Not Responded"}}, {"name": "Valid Complaint Status", "description": "Verify that a student can view the status of a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint status viewed", "status": "Viewed"}}, {"name": "Invalid Complaint Status", "description": "Verify that a student cannot view the status of a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint status not viewed", "status": "Not Viewed"}}, {"name": "Valid Complaint History", "description": "Verify that a student can view the history of a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint history viewed", "status": "Viewed"}}, {"name": "Invalid Complaint History", "description": "Verify that a student cannot view the history of a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint history not viewed", "status": "Not Viewed"}}, {"name": "Valid Complaint Deletion", "description": "Verify that a student can delete a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint deleted", "status": "Deleted"}}, {"name": "Invalid Complaint Deletion", "description": "Verify that a student cannot delete a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint not deleted", "status": "Not Deleted"}}, {"name": "Valid Complaint Search", "description": "Verify that a student can search for a complaint.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint found", "status": "Found"}}, {"name": "Invalid Complaint Search", "description": "Verify that a student cannot search for a complaint that does not exist.", "input": {"complaint": "Noisy Neighbours"}, "expected": {"outcome": "Complaint not found", "status": "Not Found"}}]}, {"usecase": {"name": "Seat Allocation", "scenario": "Student applies for a seat in the hall and the hall authority allocates a seat to the student", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student applies for a seat", "Hall authority allocates a seat to the student"]}, "testcases": [{"name": "Valid Seat Application", "description": "Verify that a student can successfully apply for a seat.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat applied for", "status": "Applied"}}, {"name": "Invalid Seat Application", "description": "Verify that a student cannot apply for a seat that does not exist.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat not applied for", "status": "Not Applied"}}, {"name": "Valid Seat Allocation", "description": "Verify that the hall authority can successfully allocate a seat to a student.", "input": {"room number": "A101", "seat number": "1", "student_id": "1234"}, "expected": {"outcome": "Seat allocated", "status": "Allocated"}}, {"name": "Invalid Seat Allocation", "description": "Verify that the hall authority cannot allocate a seat that does not exist.", "input": {"room number": "A101", "seat number": "1", "student_id": "1234"}, "expected": {"outcome": "Seat not allocated", "status": "Not Allocated"}}, {"name": "Valid Seat History", "description": "Verify that a student can view the history of seats allocated.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat history viewed", "status": "Viewed"}}, {"name": "Invalid Seat History", "description": "Verify that a student cannot view the history of seats allocated that does not exist.", "input": {"room number": "A101", "seat number": "1"}, "expected": {"outcome": "Seat history not viewed", "status": "Not Viewed"}}]}, {"usecase": {"name": "Notice Board", "scenario": "Hall authority posts notices on the notice board and students view the notices", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Hall authority posts a notice", "Student views the notice"]}, "testcases": [{"name": "Valid Notice Posting", "description": "Verify that the hall authority can successfully post a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice posted", "status": "Posted"}}, {"name": "Invalid Notice Posting", "description": "Verify that the hall authority cannot post an invalid notice.", "input": {"notice": null}, "expected": {"outcome": "Notice not posted", "status": "Not Posted"}}, {"name": "Valid Notice Viewing", "description": "Verify that a student can successfully view a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice viewed", "status": "Viewed"}}, {"name": "Invalid Notice Viewing", "description": "Verify that a student cannot view a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not viewed", "status": "Not Viewed"}}, {"name": "Valid Notice History", "description": "Verify that a student can view the history of notices posted.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice history viewed", "status": "Viewed"}}, {"name": "Invalid Notice History", "description": "Verify that a student cannot view the history of notices posted that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice history not viewed", "status": "Not Viewed"}}, {"name": "Valid Notice Deletion", "description": "Verify that the hall authority can successfully delete a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice deleted", "status": "Deleted"}}, {"name": "Invalid Notice Deletion", "description": "Verify that the hall authority cannot delete a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not deleted", "status": "Not Deleted"}}, {"name": "Valid Notice Search", "description": "Verify that a student can search for a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice found", "status": "Found"}}, {"name": "Invalid Notice Search", "description": "Verify that a student cannot search for a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not found", "status": "Not Found"}}, {"name": "Valid Notice Update", "description": "Verify that the hall authority can successfully update a notice.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice updated", "status": "Updated"}}, {"name": "Invalid Notice Update", "description": "Verify that the hall authority cannot update a notice that does not exist.", "input": {"notice": "Hall Meeting"}, "expected": {"outcome": "Notice not updated", "status": "Not Updated"}}]}, {"usecase": {"name": "Dining Management", "scenario": "Student takes lunch and dinner meals from the dining hall and the dining hall authority manages the daily meal records", "actors": "Student, Dining Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["Student takes lunch", "Student takes dinner", "Dining hall authority records the meals taken by the student"]}, "testcases": [{"name": "Valid Lunch Meal", "description": "Verify that a student can successfully take a lunch meal.", "input": {"lunch_taken": true}, "expected": {"outcome": "Lunch meal taken", "status": "Taken"}}, {"name": "Invalid Lunch Meal", "description": "Verify that a student cannot take a lunch meal", "input": {"lunch_taken": false}, "expected": {"outcome": "Lunch meal not taken", "status": "Not Taken"}}, {"name": "Valid Dinner Meal", "description": "Verify that a student can successfully take a dinner meal.", "input": {"dinner_taken": true}, "expected": {"outcome": "Dinner meal taken", "status": "Taken"}}, {"name": "Invalid Dinner Meal", "description": "Verify that a student cannot take a dinner meal", "input": {"dinner_taken": false}, "expected": {"outcome": "Dinner meal not taken", "status": "Not Taken"}}, {"name": "Valid Meal Record", "description": "Verify that the dining hall authority can successfully record the meals taken by a student.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Lunch meal record taken", "status": "Taken"}}, {"name": "Valid Meal History", "description": "Verify that a student can view the history of meals taken.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Meal history viewed", "status": "Viewed"}}, {"name": "Invalid Meal History", "description": "Verify that a student cannot view the history of meals taken that does not exist.", "input": {"meal": "Lunch"}, "expected": {"outcome": "Meal history not viewed", "status": "Not Viewed"}}]}, {"usecase": {"name": "Mess Managing By Most Senior Batch Students", "scenario": "2 or 3 students from most senior batch manages a mess month and the hall authority facilitates the mess management", "actors": "Student, Hall Authority", "preconditions": "Student is registered in the hall", "steps": ["2 or 3 students from most senior batch manages the mess month", "Hall authority facilitates the mess management"]}, "testcases": [{"name": "Apply for Mess Management", "description": "2 or 3 students from most senior batch apply to manage the mess for a month.", "input": {"applicants": [["1234", "5678", "91011"], ["23394", "13030"]]}, "expected": {"outcome": "Mess management applied for", "status": "Applied"}}, {"name": "Select a group of students for Mess Management", "description": "Hall authority selects a group of students from most senior batch to manage the mess for a month.", "input": {"applicants": ["1234", "5678", "91011"]}, "expected": {"outcome": "Mess management selected", "status": "Selected"}}, {"name": "Daily Mess Management Record", "description": "Mess managers records the daily mess management activities.", "input": {"managers": ["1234", "5678", "91011"], "lunch menu": {"Rice": "100 kg", "Fish": "50 kg", "Chicken": "100 kg", "Vegetables": "50 kg"}, "dinner menu": {"Rice": "100 kg", "Fish": "50 kg", "Chicken": "100 kg", "Vegetables": "50 kg"}, "lunch": {"lunch served": 200, "lunch taken": 150}, "dinner": {"dinner served": 200, "dinner taken": 150}}, "expected": {"outcome": "Mess management recorded", "status": "Recorded"}}, {"name": "Mess Management History", "description": "Verify that a student can view the history of mess management activities.", "input": {"mess month": "January", "year": "2021"}, "expected": {"outcome": "Mess management history viewed", "status": "Viewed"}}, {"name": "Invalid Mess Management History", "description": "Verify that a student cannot view the history of mess management activities that does not exist.", "input": {"mess month": "January", "year": "2021"}, "expected": {"outcome": "Mess management history not viewed", "status": "Not Viewed"}}]}, {"usecase": {"name": "Posting in Community Forums", "scenario": "User shares experiences or seeks advice in the community forums, upvotes and comments on posts", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User enters the post title and content", "User adds tags and other attachments to their post"]}, "testcases": [{"name": "Successful Post", "description": "User successfully creates a new forum post", "input": {"title": "My first post", "content": "This is a test post.", "tags": []}, "expected": {"outcome": "Post successfully published", "status": "Successful"}}, {"name": "Unsuccessful - Empty Title", "description": "System prevents a user from submitting a post with an empty title", "input": {"title": "", "postContent": "This is another sample post"}, "expected": {"outcome": "Empty post title", "status": "Failed"}}, {"name": "Successful Comment", "description": "User successfully comments on a post", "input": {"postId": "11c8b19e-d021-42a1-bea8-a21f82996665", "parentComment": "53502922-a529-4016-ac6e-095f6ab8f5d2", "comment": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel..."}, "expected": {"outcome": "Comment successfully published", "status": "Successful"}}, {"name": "Unsuccessful Comment - Invalid Post Id", "description": "User attempts to comment on a post that is unavailable", "input": {"postId": "00000000-0000-0000-0000-000000000000", "parentComment": "00000000-0000-0000-0000-000000000000", "comment": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque vel..."}, "expected": {"outcome": "Invalid Post Id", "status": "Failed"}}, {"name": "Successful Upvote", "description": "User successfully upvotes a post", "input": {"postId": "11c8b19e-d021-42a1-bea8-a21f82996665", "upvote": true}, "expected": {"outcome": "Upvote successful", "status": "Successful"}}, {"name": "Unsuccessful Upvote - Invalid Post Id", "description": "User attempts to upvote a post that is unavailable", "input": {"postId": "00000000-0000-0000-0000-000000000000", "upvote": true}, "expected": {"outcome": "Invalid Post Id", "status": "Failed"}}]}, {"usecase": {"name": "Direct Messaging", "scenario": "User engages in a private conversation with another user", "actors": ["User"], "preconditions": "Users are logged in the app", "steps": ["User sends a direct message"]}, "testcases": [{"name": "Successful Message", "description": "User successfully sends a direct message to another user", "input": {"recipient": "d6897068-bb17-4376-b433-60def50e624d", "messageContent": "Hello, how are you?"}, "expected": {"outcome": "Message successfully sent", "status": "Successful"}}, {"name": "Message Failed - Invalid Recipient", "description": "System handles the case where a user tries to send a message to a non-existent user", "input": {"messageContent": "Hello, how are you?", "recipient": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid recipient", "status": "Failed"}}, {"name": "Successful Reply", "description": "User successfully replies to a direct message", "input": {"messageContent": "I'm doing great, thanks for asking!", "recipient": "d6897068-bb17-4376-b433-60def50e624d", "parentMessage": "d6897068-bb17-4376-b433-60def50e624d"}, "expected": {"outcome": "Reply successful", "status": "Successful"}}]}, {"usecase": {"name": "Seeking Expert Opinion", "scenario": "User seeks expert advice by posting a question for healthcare professionals", "actors": ["User", "Experts"], "preconditions": ["User is logged in the app", "Expert is logged in and verified"], "steps": ["User posts a question for expert opinion", "Expert can reply to the question"]}, "testcases": [{"name": "Question post successful", "description": "User successfully posts a question for expert opinion", "input": {"title": "How should I manage my diet?", "content": "This is a test post.", "tags": ["question", "diet"]}, "expected": {"outcome": "Question successfully posted for expert responses", "status": "Successful"}}, {"name": "Successful Reply", "description": "Verified Expert successfully replies to a question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": true}, "expected": {"outcome": "Expert response successful", "status": "Successful"}}, {"name": "Reply Failed - Expert not verified", "description": "System prevents unverified experts from replying to a question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": false}, "expected": {"outcome": "Unverified expert", "status": "Failed"}}, {"name": "Reply Failed - Invalid Question Id", "description": "System handles the case where an expert tries to reply to a non-existent question", "input": {"expertResponse": "Here is some advice...", "isVerifiedExpert": true, "questionId": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid question id", "status": "Failed"}}, {"name": "Reply Failed - Empty Response", "description": "System prevents an expert from replying with an empty response", "input": {"expertResponse": "", "isVerifiedExpert": true}, "expected": {"outcome": "Empty response", "status": "Failed"}}]}, {"usecase": {"name": "Tracking Routine Entries", "scenario": "User tracks routine entries including blood sugar levels, insulin dosage and blood pressure", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User selects the type of entry", "User inputs the entry date, time and details"]}, "testcases": [{"name": "Successful Entry - Blood Sugar", "description": "User successfully adds a blood sugar level entry", "input": {"bloodSugarLevel": 6.7, "testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Blood Pressure", "description": "User successfully adds a blood pressure entry", "input": {"systolic": 120, "diastolic": 80, "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Insulin Dosage", "description": "User successfully adds a insuline dosage entry", "input": {"insulinDosage": 10, "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Unsuccessful Entry - Invalid Blood Sugar Level", "description": "System prevents the user from adding an invalid blood sugar level", "input": {"bloodSugarLevel": -1, "testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Invalid blood sugar level", "status": "Failed"}}, {"name": "Unsuccessful Entry - Empty Entry", "description": "System prevents the user from adding an entry with an empty value", "input": {"testType": "Fasting", "timestamp": "2021-08-01T12:00:00"}, "expected": {"outcome": "Empty entry", "status": "Failed"}}]}, {"usecase": {"name": "Planning Routine Entries", "scenario": "User tracks routine entries including medicine and diet/calories", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User selects the type of entry", "User inputs the planned date, time and details"]}, "testcases": [{"name": "Successful Entry - Medicine", "description": "User successfully adds a medicine entry", "input": {"medicineName": "Aspirin", "dosage": "500mg", "instruction": "one tablet after breakfast", "frequency": "daily", "repeat": "1 week"}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Successful Entry - Diet", "description": "User successfully adds a diet entry", "input": {"mealType": "Breakfast", "calories": 300, "allowedFoods": ["Eggs", "Bread", "Milk"], "bannedFoods": ["Sweets", "Beef"]}, "expected": {"outcome": "Data successfully recorded", "status": "Successful"}}, {"name": "Unsuccessful Entry - Empty Medicine Name", "description": "System prevents the user from adding a medicine entry with an empty name", "input": {"medicineName": "", "dosage": "500mg", "instruction": "one tablet after breakfast", "frequency": "daily", "repeat": "1 week"}, "expected": {"outcome": "Empty medicine name", "status": "Failed"}}, {"name": "Unsuccessful Entry - Empty Diet", "description": "System prevents the user from adding a diet entry with an empty value", "input": {"mealType": "Breakfast", "calories": 300, "allowedFoods": [], "bannedFoods": []}, "expected": {"outcome": "Empty diet entry", "status": "Failed"}}]}, {"usecase": {"name": "Emergency Contacts", "scenario": "User manages emergency contacts for quick access during urgent situations", "actors": ["User"], "preconditions": "User is logged in the app", "steps": ["User adds emergency contacts with relevant information"]}, "testcases": [{"name": "Successful Addition", "description": "User successfully adds an emergency contact with relevant information", "input": {"name": "Emergency Contact 1", "phone": "123-456-7890"}, "expected": {"outcome": "Contact successfully added", "status": "Successful"}}, {"name": "Unsuccessful Addition - Missing Information", "description": "System prevents the user from adding an emergency contact with missing information", "input": {"name": "Emergency Contact 2"}, "expected": {"outcome": "Incomplete contact information", "status": "Failed"}}, {"name": "Successful Deletion", "description": "User successfully deletes an emergency contact", "input": {"contactId": "11c8b19e-d021-42a1-bea8-a21f82996665"}, "expected": {"outcome": "Contact successfully deleted", "status": "Successful"}}, {"name": "Unsuccessful Deletion - Invalid Contact Id", "description": "System handles the case where a user tries to delete a non-existent contact", "input": {"contactId": "00000000-0000-0000-0000-000000000000"}, "expected": {"outcome": "Invalid contact id", "status": "Failed"}}]}, {"usecase": {"name": "Expert Verification", "scenario": "Experts add their credentials and get verified by the admin", "actors": ["Expert", "Admin"], "preconditions": "Expert is logged in the app", "steps": ["Expert adds their credentials", "Admin verifies or rejects the expert"]}, "testcases": [{"name": "Successful Addition", "description": "Expert successfully adds their credentials", "input": {"degree": "MD", "specialization": "Cardiology", "institution": "Johns Hopkins University", "year": 2015, "certificate": "certificate.pdf"}, "expected": {"outcome": "Credentials successfully added", "status": "Pending Verification"}}, {"name": "Successful Verification", "description": "Admin successfully verifies the expert", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": true}, "expected": {"outcome": "Expert successfully verified", "status": "Verified"}}, {"name": "Unsuccessful Verification - Invalid Credentials", "description": "System prevents the admin from verifying an expert with invalid credentials", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": false}, "expected": {"outcome": "Invalid credentials", "status": "Rejected"}}, {"name": "Unsuccessful Verification - Invalid Expert Id", "description": "System handles the case where an admin tries to verify a non-existent expert", "input": {"expertId": "00000000-0000-0000-0000-000000000000", "isVerified": true}, "expected": {"outcome": "Invalid expert id", "status": "Failed"}}, {"name": "Unsuccessful Verification - Empty Credentials", "description": "System prevents the admin from verifying an expert with empty credentials", "input": {"expertId": "11c8b19e-d021-42a1-bea8-a21f82996665", "isVerified": true}, "expected": {"outcome": "Empty credentials", "status": "Failed"}}]}, {"usecase": {"name": "Custom Puzzle Selection", "scenario": "User selects different modes of the tensor puzzle game and the system generates a tensor puzzle accordingly.", "actors": "Both registered and unregistered users", "preconditions": "none", "steps": ["User selects appropriate tensor generator functions", "User selects appropriate tensor manipulation functions", "User chooses the difficulty level", "User selects the number of problems in the set", "The system generates a tensor puzzle accordingly", "The system displays the tensor puzzle to the user, along with the timer"]}, "testcases": [{"name": "Valid Custom Puzzle Selection", "description": "Verify that a user can successfully select the appropriate tensor generator functions, tensor manipulation functions, difficulty level, and number of problems in the set to generate a tensor puzzle.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3}, "expected": {"outcome": "Problem generation successful"}}, {"name": "Default Puzzle Selection", "description": "Verify that the system handles the case where the user does not select anything, so the system generates a default tensor puzzle.", "input": {"manipulators": [], "how_many": 0, "depth": 0}, "expected": {"outcome": "Tensor puzzle generated successfully"}}]}, {"usecase": {"name": "Solving a Puzzle", "scenario": "User solves the tensor puzzle generated by the system.", "actors": "User", "preconditions": "A tensor puzzle should be generated by the system.", "steps": ["User inputs code to solve the tensor puzzle", "The system runs the code", "The system checks if the output of the code matches the expected output", "The system displays the result to the user", "The system displays the next problem to the user"]}, "testcases": [{"name": "Valid and correct code", "description": "Verify that the system accepts valid and correct code from the user.", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unique(o_tensor, dim=0)\ntensor = o_tensor"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 1, "result": {"0": {"status": "success", "correct": true}}}}, {"name": "Valid but incorrect code", "description": "Verify that the system handles the case where the user inputs valid but incorrect code.", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unique(o_tensor, dim=0)\ntensor = o_tensor + 1"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 0, "result": {"0": {"status": "failed", "correct": false}}}}, {"name": "Invalid code", "description": "Verify that the system handles the case where the user inputs invalid code. (e.g., syntax error)", "input": {"user_code": "o_tensor = torch.unique(o_tensor, dim=1)\no_tensor = torch.unOaque(o_tensor, dim=0)\ntensor = o_tensor + 1"}, "expected": {"num_test_cases": 1, "num_test_cases_passed": 0, "result": {"0": {"status": "failed", "correct": false}}}}]}, {"usecase": {"name": "Addition of a user-define tensor puzzle", "scenario": "User adds a user-defined tensor puzzle to the system.", "actors": "User", "preconditions": "User should be a registered user and should be logged in.", "steps": ["User inputs the tensor puzzle", "The system checks if the tensor puzzle is valid", "The system adds the tensor puzzle to the system"]}, "testcases": [{"name": "Valid tensor puzzle", "description": "Verify that the system accepts a valid tensor puzzle from the user.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True)"}, "expected": {"outcome": "Tensor puzzle added successfully", "status": "Approved"}}, {"name": "Invalid tensor puzzle (Does no\u2020 match the expected output)", "description": "Verify that the system handles the case where the user inputs an invalid tensor puzzle.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True) + 1"}, "expected": {"outcome": "Tensor puzzle addition failed", "status": "Rejected"}}, {"name": "Invalid tensor puzzle (Invalid input)", "description": "Verify that the system handles the case where the user inputs an invalid input tensor for the puzzle.", "input": {"title": "Test Puzzle", "description": "This is a test puzzle", "input": "torch.tensor([[1, 2, 3, [4, 5, 6]]) + 1", "output": "torch.tensor([[6, 15]])", "image_url": "https://i.imgur.com/3QXm2oF.png", "solution_code": "o_tensor = torch.sum(o_tensor, dim=1, keepdim=True)"}, "expected": {"outcome": "Tensor puzzle addition failed", "status": "Rejected"}}]}, {"usecase": {"name": "Additon of a question on a tensor manipulation problem", "scenario": "User adds a question on a tensor manipulation problem to the system.", "actors": "User", "preconditions": "User should be a registered user and should be logged in.", "steps": ["User inputs the question", "The system checks if the question is valid", "The system adds the question to the system"]}, "testcases": [{"name": "Valid question", "description": "Verify that the system accepts a valid question from the user.", "input": {"title": "Test Question", "description": "This is a test question", "image_url": "https://i.imgur.com/3QXm2oF.png", "input": "torch.tensor([[1, 2, 3], [4, 5, 6]])", "output": "torch.tensor([[6, 15]])"}, "expected": {"outcome": "Question added successfully", "status": "Approved"}}, {"name": "Invalid question (Invalid input/output tensors)", "description": "Verify that the system handles the case where the user inputs an invalid solution code for the question.", "input": {"title": "Test Question", "description": "This is a test question", "image_url": "https://i.imgur.com/3QXm2oF.png", "input": "torch.tensor([[1, 2, 3, [4, 5, asdfas]]) + 1", "output": "torch.tensor([[6, 15awt])"}, "expected": {"outcome": "Question addition failed", "status": "Rejected"}}]}, {"usecase": {"name": "Initiation of a 1v1 custom tensor puzzle game", "scenario": "User initiates a 1v1 custom tensor puzzle game.", "actors": "User1, User2", "preconditions": "User1 and User2 should be registered users and should be logged in.", "steps": ["User1 selects the appropriate tensor generator functions", "User1 selects the appropriate tensor manipulation functions", "User1 chooses the difficulty level", "User1 selects the number of problems in the set", "User1 selects the opponent", "User1 initiates the game", "The system generates a tensor puzzle accordingly", "The system displays the tensor puzzle to User1, along with the timer", "User2 receives a notification about the game", "User2 accepts the game", "The system displays the tensor puzzle to User2, along with the timer"]}, "testcases": [{"name": "Game initiation successful", "description": "Verify that the system successfully initiates a 1v1 custom tensor puzzle game.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": true}, "expected": {"outcome": "Game initiation successful", "game_id": "1234"}}, {"name": "Game initiation failed (User2 rejects the game)", "description": "Verify that the system handles the case where User2 rejects the game.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": false}, "expected": {"outcome": "Game initiation failed", "game_id": "1234"}}, {"name": "Game initiation failed (User2 does not respond)", "description": "Verify that the system handles the case where User2 does not respond to the game request.", "input": {"manipulators": ["argwhere", "tensor_split", "gather", "masked_select", "movedim", "splicing", "t", "take", "tile", "unsqueeze", "negative", "positive", "where"], "how_many": 5, "depth": 3, "opponent": "User2", "user2_accepts": null}, "expected": {"outcome": "Game initiation failed", "game_id": "1234"}}]}, {"usecase": {"name": "Order Medicine", "scenario": "User orders medicine from the online pharmacy.", "actors": "User, Admin", "preconditions": "User is registered and logged in, Admin manages the system.", "steps": ["User selects the medicine to order", "User submits the order", "Admin processes the order"]}, "testcases": [{"name": "Valid Medicine Order", "description": "Verify that a user can successfully order medicine from the online pharmacy.", "input": {"selectedMedicine": [{"name": "Paracetamol", "quantity": 2, "price": 3.99}, {"name": "Aspirin", "quantity": 1, "price": 2.49}, {"name": "Amoxicillin", "quantity": 3, "price": 5.99}], "orderAmount": 24.45}, "expected": {"outcome": "Order placed successfully", "status": "Processed"}}, {"name": "Empty Medicine Order", "description": "Verify that the system handles the case where a user tries to submit an empty medicine order.", "input": {"selectedMedicine": [], "orderAmount": 0}, "expected": {"outcome": "Order failed", "status": "Not Processed"}}, {"name": "Admin Order Processing", "description": "Verify that the admin can successfully process a user's medicine order.", "input": {"adminProcessing": true}, "expected": {"outcome": "Order processed", "status": "Processed"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject a user's medicine order.", "input": {"adminProcessing": false}, "expected": {"outcome": "Order rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Add New Medicine", "scenario": "Admin adds new medicine to the online pharmacy.", "actors": "Admin", "preconditions": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.", "steps": ["Admin adds the details of the new medicine", "Admin submits the new medicine details"]}, "testcases": [{"name": "Valid Medicine Addition", "description": "Verify that the admin can successfully add a new medicine to the online pharmacy.", "input": {"medicineDetails": {"name": "Ibuprofen", "quantity": 100, "price": 5.99}}, "expected": {"outcome": "Medicine added successfully", "status": "Added"}}, {"name": "Invalid Medicine Addition", "description": "Verify that the system handles the case where the admin tries to add invalid medicine details (e.g., missing fields).", "input": {"medicineDetails": {"name": "", "quantity": 50, "price": 5.99}}, "expected": {"outcome": "Medicine addition failed", "status": "Not Added"}}]}, {"usecase": {"name": "Remove Banned Medicine", "scenario": "Admin removes banned medicine from the online pharmacy.", "actors": "Admin", "preconditions": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.", "steps": ["Admin selects the medicine to remove", "Admin confirms the removal of the medicine", "Admin reconfirms the removal"]}, "testcases": [{"name": "Valid Medicine Removal", "description": "Verify that the admin can successfully remove medicine from the online pharmacy.", "input": {"selectedMedicine": "Amoxicillin", "confirmRemoval": true, "reconfirmation": true}, "expected": {"outcome": "Medicine removed successfully", "status": "Removed"}}, {"name": "Invalid Medicine Removal", "description": "Verify that the system handles the case where the admin tries to remove non-existent medicine.", "input": {"selectedMedicine": "NonExistentMedicine", "confirmRemoval": true}, "expected": {"outcome": "Medicine removal failed", "status": "Not Removed"}}, {"name": "Mistakenly Medicine Removal", "description": "Verify that the system handles the case where the admin mistakenly tries to remove a medicine.", "input": {"selectedMedicine": "Ibuprofen", "confirmRemoval": true, "reconfirmation": false}, "expected": {"outcome": "Medicine removal cancelled", "status": "Not Removed"}}]}, {"usecase": {"name": "Return Expired Medicine", "scenario": "Admin returns expired medicines back to the pharmaceutical company.", "actors": "Admin", "preconditions": "Admin manages the system and there are expired medicines.", "steps": ["Admin identifies the expired medicine", "Admin returns the expired medicine", "Admin reconfirms the return"]}, "testcases": [{"name": "Valid Medicine Return", "description": "Verify that the admin can successfully return expired medicine.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine returned successfully", "status": "Returned"}}, {"name": "Invalid Medicine Return", "description": "Verify that the system handles the case where the admin tries to restore non-existent expired medicine.", "input": {"selectedMedicine": [{"name": "AmoxicillinNonExistent", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine return failed", "status": "Not Returned"}}, {"name": "Missing Information on Medicine Return", "description": "Verify that the system handles the case where the admin tries to return expired medicine without proper information.", "input": {"selectedMedicine": [{"name": "AmoxicillinNonExistent", "quantity": null}, {"name": "Ibuprofen", "quantity": 50}]}, "expected": {"outcome": "Medicine return failed", "status": "Not Returned"}}]}, {"usecase": {"name": "Order Medicine to Update Stock", "scenario": "Admin orders medicine from the pharmaceutical company to update the online pharmacy stock.", "actors": "Admin", "preconditions": "Admin manages the system and there's a need to update stock.", "steps": ["Admin selects the medicines to order from the company", "Admin submits the order to the company"]}, "testcases": [{"name": "Valid Order Submission", "description": "Verify that the admin can successfully submit an order for medicine from the pharmaceutical company.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}], "orderAmount": 250.75}, "expected": {"outcome": "Order submitted successfully", "status": "Submitted"}}, {"name": "Empty Order Submission", "description": "Verify that the system handles the case where the admin tries to submit an empty order.", "input": {"selectedMedicine": [], "orderAmount": 0}, "expected": {"outcome": "Order submission failed", "status": "Not Submitted"}}, {"name": "Negative Amount Order Submission", "description": "Verify that the system handles the case where the admin tries to submit an order of negative amount.", "input": {"selectedMedicine": [{"name": "Amoxicillin", "quantity": 100}, {"name": "Ibuprofen", "quantity": 50}], "orderAmount": -250.75}, "expected": {"outcome": "Order submission failed", "status": "Not Submitted"}}]}, {"usecase": {"name": "Get All User Boards", "scenario": "User retrieves a list of all their boards for display on the dashboard page.", "actors": "User", "preconditions": "User is registered, logged in, and has created or is a member of one or more boards.", "steps": ["User requests to view all boards", "System retrieves and displays all boards associated with the user"]}, "testcases": [{"name": "Successful Retrieval of Boards", "description": "Verify that a user can successfully retrieve all boards they are associated with.", "input": {}, "expected": {"outcome": "Boards retrieval successful", "status": "Retrieved", "response": [{"board_id": 1, "board_name": "CSE408 Software Project | TaskFlow", "board_description": "This board oversees the progress of the CSE408 Software Project", "created_at": "2023-10-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.45}, {"board_id": 2, "board_name": "CSE406 Security Project | Wazuh", "board_description": "This board oversees the progress of the CSE406 Security Project", "created_at": "2023-11-05T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "risenfromashes", "board_overall_progress": 0.12}, {"board_id": 3, "board_name": "Thesis | Language Model of Phylogenetic Trees", "board_description": "Tune here to be in sync with the progress of our thesis work", "created_at": "2023-10-23T00:00:00.000Z", "board_deadline": "2024-01-31T00:00:00.000Z", "board_owner": "Sadat999", "board_overall_progress": 0.09}]}}, {"name": "Internal Server Error During Boards Retrieval", "description": "Verify that the system provides an appropriate response in case of an internal server error during board retrieval.", "input": {}, "expected": {"outcome": "Boards retrieval failed", "status": "Error", "error": "Internal Server Error"}}, {"name": "No Boards Available", "description": "Verify that the system handles cases where the user has no boards associated with their account.", "input": {}, "expected": {"outcome": "No boards to retrieve", "status": "No Content", "response": []}}]}, {"usecase": {"name": "Create a New Board", "scenario": "User creates a new task board with specific details such as board name, description, deadline, and members.", "actors": "User", "preconditions": "User is registered and logged in.", "steps": ["User provides board details including name, description, deadline, and members.", "User submits the request to create a new board."]}, "testcases": [{"name": "Valid Board Creation", "description": "Verify that a user can create a new board with all required and valid details.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2024-12-05T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}, {"user_id": "c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r", "user_name": "BRAINIAC77", "member_role": 2}, {"user_id": "d4e5f6g7h8i9j0k1l2m3n4o5p6q7r", "user_name": "shattik420", "member_role": 2}, {"user_id": "e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t", "user_name": "Tahmid-404"}, {"user_id": "f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u", "user_name": "shitdroid"}, {"user_id": "g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v", "user_name": "amirulislamalif"}]}, "expected": {"outcome": "Board creation successful", "status": "Created", "response": {"board_id": 5, "board_name": "ISD Project | ExploreMate", "created_at": "2024-08-23T00:00:00.000Z"}}}, {"name": "Invalid Board Creation - Missing Details", "description": "Verify that the system handles cases where a user tries to create a board with missing details such as board name or members.", "input": {"board_description": "Missing board name and members", "board_deadline": "2024-12-05T00:00:00.000Z"}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Invalid Board Creation - Invalid Deadline", "description": "Verify that the system handles cases where a user tries to create a board with an invalid deadline format.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "invalid-date-format", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Invalid Board Creation - Past Deadline", "description": "Verify that the system prevents board creation with a deadline that is in the past.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2022-01-01T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Bad request - Invalid input"}}, {"name": "Server Error During Board Creation", "description": "Verify that the system provides an appropriate response in case of an internal server error during board creation.", "input": {"board_name": "ISD Project | ExploreMate", "board_description": "This board is created for coordination of the ISD project", "board_deadline": "2023-12-05T00:00:00.000Z", "board_members": [{"user_id": "af3b4c5d6e7f8g9h0i1j2k3l4m5n6o7p", "user_name": "Sadat999", "member_role": 1}]}, "expected": {"outcome": "Board creation failed", "status": "Rejected", "error": "Internal Server Error"}}]}, {"usecase": {"name": "Get Board Content", "scenario": "User retrieves the content of a specific board, including lists and tasks for the board view page.", "actors": "User", "preconditions": "User is registered, logged in, and has access to the specified board.", "steps": ["User selects a board by its ID", "System retrieves and displays all lists and tasks associated with the board"]}, "testcases": [{"name": "Successful Retrieval of Board Content", "description": "Verify that a user can successfully retrieve all content of a board they have access to.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval successful", "status": "Retrieved", "response": {"board_id": 1, "board_name": "CSE408 Software Project | TaskFlow", "board_lists": [{"list_id": 1, "list_name": "Project Scope Presentation", "list_tasks": [{"task_id": 1, "task_name": "Research to find a suitable project", "task_deadline": "2023-10-05T00:00:00.000Z", "task_label_color": "#FF0000", "task_overall_progress": 1.0}, {"task_id": 2, "task_name": "Do a meeting for project finalization", "task_deadline": "2023-10-06T00:00:00.000Z", "task_label_color": "#123456", "task_overall_progress": 1.0}, {"task_id": 3, "task_name": "Prepare the presentation slides", "task_deadline": "2023-10-08T00:00:00.000Z", "task_label_color": "#654321", "task_overall_progress": 1.0}]}, {"list_id": 2, "list_name": "Mock UI Design", "list_tasks": [{"task_id": 4, "task_name": "Sketch the design in a meeting", "task_deadline": "2023-10-10T00:00:00.000Z", "task_label_color": "#F2A541", "task_overall_progress": 1.0}, {"task_id": 5, "task_name": "Design the home page", "task_deadline": "2023-10-10T00:00:00.000Z", "task_label_color": "#F23A41", "task_overall_progress": 1.0}, {"task_id": 6, "task_name": "Design the profile settings page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#F2F541", "task_overall_progress": 1.0}, {"task_id": 7, "task_name": "Design the board view page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#41F2F5", "task_overall_progress": 1.0}, {"task_id": 8, "task_name": "Design the task view page", "task_deadline": "2023-10-17T00:00:00.000Z", "task_label_color": "#41F2A5", "task_overall_progress": 1.0}]}]}}}, {"name": "Unauthorized Board Content Access", "description": "Verify that the system prevents access to a board's content if the user does not have the necessary access rights.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Board Content Retrieval for Non-Existent Board", "description": "Verify that the system handles cases where a user tries to retrieve content for a non-existent board.", "input": {"board_id": 999}, "expected": {"outcome": "Board content retrieval failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Content Retrieval", "description": "Verify that the system provides an appropriate response in case of an internal server error during board content retrieval.", "input": {"board_id": 1}, "expected": {"outcome": "Board content retrieval failed", "status": "Error", "error": "Internal Server Error"}}]}, {"usecase": {"name": "Add a List to a Board", "scenario": "User adds a new list to an existing board with specific details such as list name, description, and deadline.", "actors": "User", "preconditions": "User is registered, logged in, and has access to the board.", "steps": ["User selects a board by its ID", "User provides list details including name, description, and deadline", "User submits the request to add the new list to the selected board"]}, "testcases": [{"name": "Valid List Addition", "description": "Verify that a user can add a new list with all required and valid details to an existing board.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition successful", "status": "Added", "response": {"list_id": 12, "list_name": "API & Architecture Presentation"}}}, {"name": "Unauthorized List Addition", "description": "Verify that the system prevents adding a list to a board if the user does not have the necessary access rights.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "List Addition to Non-Existent Board", "description": "Verify that the system handles cases where a user tries to add a list to a non-existent board.", "input": {"board_id": 999, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Conflicting Input During List Addition", "description": "Verify that the system handles cases where the list deadline conflicts with the board's deadline.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2025-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Conflicting Input", "message": "List deadline cannot be further than board deadline"}}, {"name": "Internal Server Error During List Addition", "description": "Verify that the system provides an appropriate response in case of an internal server error during list addition.", "input": {"board_id": 4, "list_name": "API & Architecture Presentation", "list_description": "This presentation will be required to finalize the APIs of TaskFlow", "list_deadline": "2024-01-23T00:00:00.000Z"}, "expected": {"outcome": "List addition failed", "status": "Rejected", "error": "Internal Server Error"}}]}, {"usecase": {"name": "Update Board Settings", "scenario": "User updates the settings of an existing board, including the board name, description, and deadline.", "actors": "User", "preconditions": "User is registered, logged in, and has admin rights to the specified board.", "steps": ["User selects a board by its ID", "User provides updated settings for the board", "User submits the request to update the board settings"]}, "testcases": [{"name": "Successful Board Settings Update", "description": "Verify that a user with admin rights can successfully update the settings of a board.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "This board is created for coordination of the Wazuh research project", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update successful", "status": "Updated"}}, {"name": "Unauthorized Board Settings Update", "description": "Verify that the system prevents updating settings of a board by a user without admin rights.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "Unauthorized update attempt", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Update Settings for Non-Existent Board", "description": "Verify that the system handles cases where a user tries to update settings for a non-existent board.", "input": {"board_id": 999, "board_name": "Non-Existent Board", "board_description": "Invalid board", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Settings Update", "description": "Verify that the system provides an appropriate response in case of an internal server error during board settings update.", "input": {"board_id": 2, "board_name": "Wazuh Research Project", "board_description": "This board is created for coordination of the Wazuh research project", "board_deadline": "2024-02-28T00:00:00.000Z"}, "expected": {"outcome": "Board settings update failed", "status": "Error", "error": "Internal Server Error"}}]}, {"usecase": {"name": "Delete Board", "scenario": "Board owner deletes a specific board.", "actors": "User (Board Owner)", "preconditions": "User is registered, logged in, and is the owner of the board to be deleted.", "steps": ["User selects a board by its ID", "User requests to delete the board"]}, "testcases": [{"name": "Successful Board Deletion", "description": "Verify that the board owner can successfully delete their board.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion successful", "status": "Deleted"}}, {"name": "Unauthorized Board Deletion", "description": "Verify that the system prevents deleting a board by a user who is not the owner.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion failed", "status": "Rejected", "error": "Unauthorized Access"}}, {"name": "Deletion of Non-Existent Board", "description": "Verify that the system handles cases where a user tries to delete a non-existent board.", "input": {"board_id": 999}, "expected": {"outcome": "Board deletion failed", "status": "Rejected", "error": "Board not found"}}, {"name": "Internal Server Error During Board Deletion", "description": "Verify that the system provides an appropriate response in case of an internal server error during board deletion.", "input": {"board_id": 3}, "expected": {"outcome": "Board deletion failed", "status": "Error", "error": "Internal Server Error"}}]}, {"usecase": {"name": "Create New Project", "scenario": "Project Manager wants to create a new project in the project management tool.", "actors": "Project Manager", "preconditions": "Project Manager is logged in to the system.", "steps": ["Project Manager provides project details", "Project Manager submits the project creation form"]}, "testcases": [{"name": "Valid Project Creation", "description": "Verify that a user can successfully create a new project with valid details.", "input": {"projectDetails": {"name": "New Project", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Project created successfully", "status": "Created"}}, {"name": "Incomplete Project Details", "description": "Verify that the system handles incomplete project details during creation.", "input": {"projectDetails": {"name": "Incomplete Project", "startDate": "2024-02-01"}}, "expected": {"outcome": "Project creation failed", "status": "Incomplete"}}, {"name": "Duplicate Project Name", "description": "Verify that the system handles the case where a project with the same name already exists.", "input": {"projectDetails": {"name": "Existing Project", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Project creation failed", "status": "DuplicateName"}}]}, {"usecase": {"name": "Create Tasks for an project", "scenario": "Admin creates tasks ", "actors": "Admin", "preconditions": "Admin is logged in and has access to the project.", "steps": ["Admin creates tasks with details", "Admin submits the task creation form"]}, "testcases": [{"name": "Create Tasks Successfully", "description": "Verify that an Admin can successfully create tasks for a project", "input": {"project": "name", "tasks": [{"name": "Task1", "startDate": "10-12-2020", "deadline": "10-12-2022"}, {"name": "Task2", "startDate": "20-12-2020", "deadline": "20-12-2022"}]}, "expected": {"outcome": "Tasks created successfully", "status": "Created"}}, {"name": "Incomplete Task Details", "description": "Verify that the system handles incomplete task details during creation.", "input": {"project": "name", "tasks": [{"name": "IncompleteTask", "startDate": "10-12-2020"}]}, "expected": {"outcome": "Task creation failed", "status": "Incomplete"}}, {"name": "Creating Task for non Existing Project", "description": "Verify that the system handles assigning task to a non existent Project.", "input": {"project": "name", "tasks": [{"name": "Task1", "startDate": "10-12-2020", "deadline": "10-12-2022"}]}, "expected": {"outcome": "Task creation failed", "status": "NonExistingProject"}}, {"name": "Duplicate Task Name", "description": "Verify that the system handles the case where a task with the same name in the project already exists.", "input": {"project": "name", "taskDetails": {"name": "Existing Task", "startDate": "2024-02-01", "deadline": "2024-03-01"}}, "expected": {"outcome": "Task creation failed", "status": "DuplicateName"}}]}, {"usecase": {"name": "Add Team Members to a Task", "scenario": "Admin wants to add team members to an existing Task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the Task.", "steps": ["Admin selects team members to add", "Admin submits the team member addition form"]}, "testcases": [{"name": "Valid Team Member Addition", "description": "Verify that an Admin can successfully add team members to a task.", "input": {"task": "name", "teamMembers": ["User123", "User456"]}, "expected": {"outcome": "Team members added successfully", "status": "Added", "notification": "Notification sent to users to whom the task is assigned"}}, {"name": "Adding Nonexistent User", "description": "Verify that the system handles adding a nonexistent user to the task.", "input": {"task": "name", "teamMembers": ["NonexistentUser"]}, "expected": {"outcome": "Team member addition failed", "status": "NonexistentUser"}}, {"name": "User Already in task", "description": "Verify that the system handles adding a team member who is already part of the task.", "input": {"task": "name", "teamMembers": ["User123"]}, "expected": {"outcome": "Team member addition failed", "status": "AlreadyInTask"}}]}, {"usecase": {"name": "Track Project Progress", "scenario": "Monitor and track the progress of tasks within a project.", "actors": "Project Manager", "preconditions": "Project manager is logged in and has access to the project.", "steps": ["Project manager accesses the project dashboard and gantt chart"]}, "testcases": [{"name": "View Project Progress and Gantt Chart", "description": "Verify that a project manager can successfully view the progress of tasks within a project.", "input": {}, "expected": {"outcome": "Project progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Project", "description": "Verify that the system restricts access to project progress for unauthorized users.", "input": {}, "expected": {"outcome": "Project progress view failed", "status": "UnauthorizedAccess"}}]}, {"usecase": {"name": "Track Task Progress", "scenario": "Monitor and track the progress of subtasks within a task.", "actors": "Admin", "preconditions": "Admin is logged in and has access to the task.", "steps": ["Admin accesses the task dashboard"]}, "testcases": [{"name": "View Task Progress", "description": "Verify that an admin can successfully view the progress of subtasks within a task.", "input": {}, "expected": {"outcome": "Task progress viewed successfully", "status": "Viewed"}}, {"name": "Access Unauthorized Task", "description": "Verify that the system restricts access to task progress for unauthorized users.", "input": {}, "expected": {"outcome": "Task progress view failed", "status": "UnauthorizedAccess"}}]}, {"usecase": {"name": "Task Completion", "scenario": "A team member completes a task assigned to them.", "actors": "Team Member", "preconditions": "Team member is logged into the system and has been assigned tasks.", "steps": ["Team member selects a task assigned to them.", "Team member marks the task as completed."]}, "testcases": [{"name": "Valid Task Completion", "description": "Verify that a team member can successfully mark a task as completed.", "input": {"task_id": "12345"}, "expected": {"outcome": "Task marked as completed successfully", "status": "Completed", "notification": "Notification sent to users involved in the task"}}, {"name": "Incomplete Task Completion", "description": "Verify that the system handles the case where a team member tries to mark an incomplete task as completed.", "input": {"task_id": "54321"}, "expected": {"outcome": "Task completion failed", "status": "Not Completed"}}]}, {"usecase": {"name": "User Sign-Up", "scenario": "Users sign up on the eLearning platform as either a student or a content creator by providing necessary information.", "actors": "Student, Content Creator", "preconditions": "User has access to the internet and the eLearning website.", "steps": ["User navigates to the sign-up page", "User selects the type of account (Student or Content Creator)", "User fills in the required information", "User submits the sign-up form"]}, "testcases": [{"name": "Valid Student Sign-Up", "description": "Verify that a user can successfully sign up as a student by providing all necessary information.", "input": {"accountType": "Student", "information": {"name": "John Doe", "email": "john@example.com", "password": "password123", "institution": "University", "experience": "Beginner", "goal": "Learn programming", "preference": ["Python", "Programming", "Data Science"]}}, "expected": {"outcome": "Sign-Up successful", "accountType": "Student"}}, {"name": "Valid Content Creator Sign-Up", "description": "Verify that a user can successfully sign up as a content creator by providing all necessary information.", "input": {"accountType": "Content Creator", "information": {"name": "Alice Smith", "email": "alice@example.com", "password": "securePass456", "specialization": "Data Science"}}, "expected": {"outcome": "Sign-Up successful", "accountType": "Content Creator"}}, {"name": "Incomplete Sign-Up Information", "description": "Verify that the system handles cases where the user submits the sign-up form with missing information.", "input": {"accountType": "Student", "information": {"name": "", "email": "incomplete@example.com", "password": "incompletePass"}}, "expected": {"outcome": "Sign-Up failed", "error": "Missing information"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an email address that does not conform to standard formatting rules.", "input": {"accountType": "Content Creator", "information": {"name": "Bob Smith", "email": "bob[at]example[dot]com", "password": "securePassword789", "specialization": "Web Development"}}, "expected": {"outcome": "Sign-Up failed", "error": "Invalid email format"}}]}, {"usecase": {"name": "Course Browsing and Enrollment", "scenario": "Students browse available courses, view details, and enroll in courses of their choice.", "actors": "Student", "preconditions": "Student is signed in to the platform.", "steps": ["Student navigates to the courses page", "Student views popular, recommended, and all courses", "Student selects a course", "Student views course details and enrolls"]}, "testcases": [{"name": "Successful Course Enrollment", "description": "Verify that a student can successfully enroll in a course after viewing its details.", "input": {"courseID": "CS101", "studentID": "S12345"}, "expected": {"outcome": "Enrollment successful", "courseID": "CS101", "status": "Enrolled"}}, {"name": "Enrollment in Nonexistent Course", "description": "Verify that the system handles cases where a student attempts to enroll in a course that does not exist.", "input": {"courseID": "InvalidCourse", "studentID": "S12345"}, "expected": {"outcome": "Enrollment failed", "error": "Course not found"}}, {"name": "Course Already Enrolled", "description": "Verify that the system notifies the student if they attempt to enroll in a course in which they are already enrolled.", "input": {"courseID": "CS101", "studentID": "S12345"}, "expected": {"outcome": "Enrollment failed", "error": "Already enrolled in this course"}}]}, {"usecase": {"name": "Interaction with Edurika Chatbot", "scenario": "Students interact with the Edurika chatbot to ask questions or get help on various topics.", "actors": "Student", "preconditions": "Student is signed in and is on the platform where the chatbot is accessible.", "steps": ["Student initiates chat with the Edurika chatbot", "Student types a question or request", "Chatbot processes the query and provides an answer or guidance"]}, "testcases": [{"name": "Valid Chatbot Interaction", "description": "Verify that a student can successfully interact with the chatbot and receive relevant responses.", "input": {"studentID": "S12345", "query": "How do I start with Python programming?"}, "expected": {"outcome": "Interaction successful", "response": "To start with Python programming, you can enroll in our Python for Beginners course."}}, {"name": "Unsupported Query", "description": "Verify that the chatbot handles unsupported or irrelevant queries gracefully.", "input": {"studentID": "S12345", "query": "What's the weather like?"}, "expected": {"outcome": "Interaction handled", "response": "I'm here to help with your learning. For weather updates, please check the weather service."}}]}, {"usecase": {"name": "Taking Exams or Quizzes", "scenario": "Students take exams or quizzes related to their courses, which can be in MCQ or written formats.", "actors": "Student", "preconditions": "Student is enrolled in a course and has reached the exam or quiz section.", "steps": ["Student navigates to the exam or quiz section of the course", "Student completes the MCQs and/or written questions", "Student submits the exam or quiz for evaluation", "System evaluates the submission and provides instant feedback or grades"]}, "testcases": [{"name": "Successful Exam Submission", "description": "Verify that a student can successfully complete and submit an exam.", "input": {"examID": "EX101", "studentID": "S12345", "answers": {"Q1": "A", "Q2": "B", "Q3": "C"}}, "expected": {"outcome": "Submission successful", "grade": "Pending evaluation"}}, {"name": "Quiz Submission with Hints", "description": "Verify that a student can request hints during a quiz and submit their answers.", "input": {"quizID": "QZ101", "studentID": "S12345", "requestsHint": true, "answers": {"Q1": "True", "Q2": "False"}}, "expected": {"outcome": "Submission successful", "hintsProvided": true}}, {"name": "Late Exam Submission", "description": "Verify that the system handles cases where a student attempts to submit an exam past the deadline.", "input": {"examID": "EX102", "studentID": "S12345", "answers": {"Q1": "A", "Q2": "B"}}, "expected": {"outcome": "Submission failed", "error": "Past deadline"}}, {"name": "Quiz Retake Restriction", "description": "Verify that the system enforces rules regarding quiz retakes, preventing students from retaking quizzes they've already passed.", "input": {"quizID": "QZ103", "studentID": "S12350", "previousAttempts": ["Passed"]}, "expected": {"outcome": "Retake failed", "error": "Quiz already passed, retake not allowed"}}, {"name": "Incomplete Exam Submission", "description": "Verify that the system prompts the student if they attempt to submit an exam without answering all mandatory questions.", "input": {"examID": "EX103", "studentID": "S12346", "answers": {"Q1": "A", "Q2": ""}}, "expected": {"outcome": "Submission failed", "error": "Mandatory questions must be answered"}}, {"name": "Invalid Answer Format", "description": "Verify that the system validates the format of the answers submitted by the student, especially for written responses.", "input": {"examID": "EX104", "studentID": "S12347", "answers": {"Q1": "<script>alert('Test');</script>"}}, "expected": {"outcome": "Submission failed", "error": "Invalid answer format"}}, {"name": "Correct Answers Auto-Grade", "description": "Verify that the system can automatically grade MCQ-based quizzes immediately upon submission.", "input": {"quizID": "QZ102", "studentID": "S12348", "answers": {"Q1": "True", "Q2": "False"}}, "expected": {"outcome": "Submission successful", "grade": "100%"}}]}, {"usecase": {"name": "Content Creation", "scenario": "Content creators upload course materials, including course name, block names, lesson names, lecture videos, and PDFs.", "actors": "Content Creator", "preconditions": "Content creator is signed in and has permissions to upload course materials.", "steps": ["Content creator navigates to the course creation section", "Content creator inputs course details and uploads materials", "Content creator submits the course for review or publishes directly if authorized"]}, "testcases": [{"name": "Successful Course Upload", "description": "Verify that a content creator can successfully upload a new course with all required materials, adhering to the hierarchical structure of course content.", "input": {"creatorID": "CC12345", "courseDetails": {"courseName": "Advanced Python", "blocks": [{"blockName": "Introduction", "lectures": [{"lectureName": "Python Basics", "lessons": [{"lessonName": "Getting Started with Python", "materials": {"video": "python_basics.mp4", "pdf": "getting_started_with_python.pdf"}}, {"lessonName": "Variables and Data Types", "materials": {"video": "variables_and_data_types.mp4", "pdf": "variables_and_data_types.pdf"}}]}]}]}}, "expected": {"outcome": "Course upload successful", "status": "Under Review"}}, {"name": "Incomplete Course Material Upload", "description": "Verify that the system handles cases where a content creator tries to upload a course with incomplete materials.", "input": {"creatorID": "CC12345", "courseDetails": {"courseName": "Machine Learning Basics", "blocks": []}}, "expected": {"outcome": "Course upload failed", "error": "Incomplete materials"}}, {"name": "Duplicate Course Name", "description": "Verify that the system prevents content creators from uploading a course with a name that already exists in the system.", "input": {"creatorID": "CC12347", "courseDetails": {"courseName": "Advanced Python", "blocks": [{"blockName": "Advanced Topics", "lessons": [{"lessonName": "Decorators in Python", "lectureName": "Understanding Decorators", "video": "decorators.mp4", "pdf": "decorators.pdf"}]}]}}, "expected": {"outcome": "Course upload failed", "error": "Course name already exists"}}, {"name": "Invalid File Format Upload", "description": "Verify that the system rejects course material uploads in unsupported file formats.", "input": {"creatorID": "CC12348", "courseDetails": {"courseName": "Data Structures in Java", "blocks": [{"blockName": "Introduction", "lessons": [{"lessonName": "Java Setup", "lectureName": "Java Installation", "video": "java_setup.exe", "pdf": "java_installation_guide.pdf"}]}]}}, "expected": {"outcome": "Course upload failed", "error": "Unsupported file format for video"}}]}, {"usecase": {"name": "Participation in Discussion Forum", "scenario": "Users participate in the discussion forum by posting questions, answering, liking, and disliking posts.", "actors": "Student, Content Creator", "preconditions": "User is signed in to the platform.", "steps": ["User navigates to the discussion forum", "User posts a new question or browses existing questions", "User responds to questions, likes, or dislikes posts"]}, "testcases": [{"name": "Successful Question Post", "description": "Verify that a user can successfully post a new question in the discussion forum.", "input": {"userID": "U12345", "postContent": "What is polymorphism in Object-Oriented Programming?"}, "expected": {"outcome": "Post successful", "postID": "GeneratedPostID"}}, {"name": "Successful Response to Question", "description": "Verify that a user can successfully respond to a question in the discussion forum.", "input": {"userID": "U67890", "postID": "QuestionPostID", "responseContent": "Polymorphism allows objects of different classes to be treated as objects of a common super class."}, "expected": {"outcome": "Response successful", "responseID": "GeneratedResponseID"}}, {"name": "Invalid Post Content", "description": "Verify that the system handles cases where a user attempts to post an empty question or response.", "input": {"userID": "U12345", "postContent": ""}, "expected": {"outcome": "Post failed", "error": "Content cannot be empty"}}]}, {"usecase": {"name": "Course Request by Student", "scenario": "Students can request new courses they are interested in, which content creators can review and potentially create.", "actors": "Student, Content Creator", "preconditions": "Student is signed in to the platform.", "steps": ["Student navigates to the course request section", "Student fills out and submits a course request form", "Content Creator reviews the request"]}, "testcases": [{"name": "Successful Course Request", "description": "Verify that a student can successfully submit a request for a new course.", "input": {"studentID": "S23456", "courseRequestDetails": {"courseTitle": "Introduction to Quantum Computing", "description": "A beginner's guide to quantum computing concepts and principles."}}, "expected": {"outcome": "Request submitted successfully", "status": "Under Review"}}, {"name": "Empty Course Request", "description": "Verify that the system handles cases where a student submits an empty course request form.", "input": {"studentID": "S23456", "courseRequestDetails": {"courseTitle": "", "description": ""}}, "expected": {"outcome": "Request submission failed", "error": "Course title and description required"}}]}, {"usecase": {"name": "Administrative Oversight", "scenario": "Admin reviews course content, user activities, and site statistics for quality control and site management.", "actors": "Admin", "preconditions": "Admin is signed in with administrative privileges.", "steps": ["Admin navigates to the administrative dashboard", "Admin reviews course content submissions, user activities, and site statistics", "Admin takes necessary actions like approving courses, issuing warnings, or removing inappropriate content"]}, "testcases": [{"name": "Course Content Approval", "description": "Verify that an admin can successfully review and approve submitted course content.", "input": {"adminID": "A34567", "courseID": "CS201", "approvalStatus": true}, "expected": {"outcome": "Course approved successfully", "courseID": "CS201", "status": "Approved"}}, {"name": "Remove Inappropriate Content", "description": "Verify that an admin can identify and remove inappropriate content from the platform.", "input": {"adminID": "A34567", "contentID": "InappropriatePost123", "action": "Remove"}, "expected": {"outcome": "Content removed successfully", "contentID": "InappropriatePost123"}}, {"name": "Review Site Statistics", "description": "Verify that an admin can access and review site statistics for monitoring purposes.", "input": {"adminID": "A34567"}, "expected": {"outcome": "Statistics reviewed successfully", "dataPresent": true}}, {"name": "Invalid Course Content Approval", "description": "Verify that the system prevents an admin from approving non-existent or already approved course content.", "input": {"adminID": "A34567", "courseID": "NonExistentCourse", "approvalStatus": true}, "expected": {"outcome": "Course approval failed", "error": "Course not found or already approved"}}, {"name": "Failed Content Removal", "description": "Verify that the system handles cases where an admin attempts to remove content that does not exist or has already been removed.", "input": {"adminID": "A34567", "contentID": "NonExistentPost", "action": "Remove"}, "expected": {"outcome": "Content removal failed", "error": "Content not found or already removed"}}, {"name": "Inaccessible Site Statistics", "description": "Verify that the system handles cases where site statistics are not available due to a system error or maintenance.", "input": {"adminID": "A34567"}, "expected": {"outcome": "Statistics review failed", "error": "Statistics temporarily unavailable"}}, {"name": "Unauthorized Administrative Action", "description": "Verify that the system prevents users without administrative privileges from performing administrative actions.", "input": {"adminID": "NonAdminUser", "courseID": "CS201", "approvalStatus": true}, "expected": {"outcome": "Action failed", "error": "User lacks administrative privileges"}}]}, {"usecase": {"name": "User Feedback on Courses", "scenario": "Students provide feedback on courses they've completed, including ratings and comments.", "actors": "Student", "preconditions": "Student is signed in and has completed at least one course.", "steps": ["Student navigates to the completed course page", "Student submits a rating and optional comments", "System records and aggregates the feedback"]}, "testcases": [{"name": "Successful Feedback Submission", "description": "Verify that a student can successfully submit feedback for a completed course.", "input": {"studentID": "S56789", "courseID": "CS404", "rating": 5, "comments": "Great course, well-structured and informative!"}, "expected": {"outcome": "Feedback submitted successfully", "feedbackID": "GeneratedFeedbackID"}}, {"name": "Feedback Without Comments", "description": "Verify that a student can submit feedback with just a rating and no comments.", "input": {"studentID": "S56789", "courseID": "CS404", "rating": 4, "comments": ""}, "expected": {"outcome": "Feedback submitted successfully", "feedbackID": "GeneratedFeedbackID"}}, {"name": "Feedback on Incomplete Course", "description": "Verify that the system prevents students from submitting feedback on courses they haven't completed.", "input": {"studentID": "S56789", "courseID": "IncompleteCourse101", "rating": 3, "comments": "Couldn't complete the course, but it seems good."}, "expected": {"outcome": "Feedback submission failed", "error": "Course not completed"}}]}, {"usecase": {"name": "Advanced Content Management by Creators", "scenario": "Content creators update existing courses, add new lessons or resources, and respond to student feedback for continuous improvement.", "actors": "Content Creator", "preconditions": "Content Creator is signed in and has published content on the platform.", "steps": ["Content Creator selects a course to update", "Content Creator adds new lessons, updates existing content, or adds additional resources", "Content Creator publishes the updates", "Content Creator reviews and responds to student feedback"]}, "testcases": [{"name": "Course Update with New Lessons", "description": "Verify that a content creator can add new lessons to an existing course and update it successfully.", "input": {"creatorID": "CC78901", "courseID": "CS606", "updates": {"newLessons": ["Advanced Algorithms", "Machine Learning Applications"]}}, "expected": {"outcome": "Course updated successfully", "updatedCourseID": "CS606"}}, {"name": "Responding to Student Feedback", "description": "Verify that a content creator can review and respond to student feedback on their courses.", "input": {"creatorID": "CC78901", "feedbackID": "Feedback123", "response": "Thank you for your valuable feedback! We've added more examples as you suggested."}, "expected": {"outcome": "Response to feedback successful", "responseID": "GeneratedResponseID"}}, {"name": "Unauthorized Course Update", "description": "Verify that the system prevents content creators from updating courses they do not own or have rights to.", "input": {"creatorID": "CC78902", "courseID": "CS606", "updates": {"newLessons": ["Quantum Computing Basics"]}}, "expected": {"outcome": "Update failed", "error": "Unauthorized access to course content"}}]}, {"usecase": {"name": "Product Price Comparison", "scenario": "User compares prices for multiple products from different online retailers.", "actors": "User", "steps": ["User enters search criteria for a product", "User views the list of product results with prices from multiple retailers", "User selects a product to view detailed information", "User compares prices and retailer ratings", "User adds the selected product to the cart"]}, "testcases": [{"name": "Valid Product Search", "description": "Verify that a user can successfully search for a product and view prices from multiple retailers.", "input": {"searchQuery": "mobiles"}, "expected": {"outcome": "Product search successful", "status": "Viewed results"}}, {"name": "Product Comparison", "description": "Verify that the user can compare prices and ratings for a selected product.", "input": {"selectedProduct": "iPhone 15"}, "expected": {"outcome": "Product comparison successful", "status": "Viewed prices and ratings"}}, {"name": "Add to Cart", "description": "Verify that the user can add a product to the shopping cart.", "input": {"selectedProduct": "iPhone 15"}, "expected": {"outcome": "Product added to cart", "status": "Added to cart"}}]}, {"usecase": {"name": "Price Drop Alerts", "scenario": "User sets up price drop alerts for specific products.", "actors": "User", "steps": ["User navigates to the product details page", "User sets up a price drop alert for the selected product"]}, "testcases": [{"name": "Set Price Drop Alert", "description": "Verify that the user can successfully set up a price drop alert for a selected product.", "input": {"selectedProduct": "AMD Ryzen 5 2400G Desktop PC", "targetPrice": 20000.0}, "expected": {"outcome": "Price drop alert set", "status": "Alert active"}}, {"name": "Invalid Target Price", "description": "Verify that the system handles the case where the user sets an invalid target price.", "input": {"selectedProduct": "iPhone 15", "targetPrice": -50.0}, "expected": {"outcome": "Invalid target price", "status": "Alert not set"}}]}, {"usecase": {"name": "View Product Details", "scenario": "User explores detailed information about a specific product.", "actors": "User", "steps": ["User enters search criteria for a product", "User selects a product from the search results", "User views detailed information about the selected product"]}, "testcases": [{"name": "Valid Product Selection", "description": "Verify that a user can successfully select a product and view its detailed information.", "input": {"selectedProduct": "HP 14 Laptop"}, "expected": {"outcome": "Product details viewed", "status": "Details displayed"}}, {"name": "Invalid Product Selection", "description": "Verify that the system handles the case where the user tries to view details for a non-existing product.", "input": {"selectedProduct": "Nonexistent Product"}, "expected": {"outcome": "Product details not found", "status": "Details not displayed"}}]}, {"usecase": {"name": "Product Recommendations", "scenario": "User receives personalized product recommendations based on their previous interactions with the website.", "actors": "User, Recommendation Engine", "preconditions": "User is registered and logged in, has previous interactions with the website", "steps": ["User logs in with their credentials", "User views the homepage or a dedicated recommendations section", "Recommendation Engine analyzes user's browsing history", "User receives personalized product recommendations"]}, "testcases": [{"name": "View Recommended Products", "description": "Verify that a user can view personalized product recommendations.", "input": {}, "expected": {"outcome": "Recommended products displayed", "status": "Viewed recommendations"}}, {"name": "Relevance of Recommendations", "description": "Verify that recommended products are relevant to the user's browsing history.", "input": {}, "expected": {"outcome": "Relevant recommendations", "status": "Products align with user's preferences"}}, {"name": "Dynamic Recommendations", "description": "Verify that recommended products dynamically update based on the user's ongoing interactions.", "input": {"userInteractions": ["Viewed products in the 'Electronics' category"]}, "expected": {"outcome": "Dynamic recommendations", "status": "Updated based on recent interactions"}}]}, {"usecase": {"name": "Admin Adds Website for Product Integration", "scenario": "Admin adds a new website to integrate its products.", "actors": "Admin", "preconditions": "Admin is authenticated and has appropriate permissions", "steps": ["Admin logs in with admin credentials", "Admin navigates to the admin dashboard", "Admin selects the option to add a new website for integration", "Admin provides details of the new website, such as name, URL", "Admin saves the new website configuration"]}, "testcases": [{"name": "Successful Website Addition", "description": "Verify that the admin can successfully add a new website for product integration.", "input": {"websiteName": "NewElecStore", "websiteURL": "https://www.newelecstore.com"}, "expected": {"outcome": "Website added successfully", "status": "Integration configured"}}, {"name": "Invalid Website URL", "description": "Verify that the system handles the case where the admin provides an invalid website URL.", "input": {"websiteName": "InvalidStore", "websiteURL": "invalid-url"}, "expected": {"outcome": "Invalid website URL", "status": "Integration not configured"}}]}, {"usecase": {"name": "Collaborator Submits Offers/Events", "scenario": "Collaborator submits offers or events to be featured as top offers or events.", "actors": "Collaborator, Admin", "preconditions": "Collaborator is registered and authenticated, Admin is authenticated", "steps": ["Collaborator logs in with their credentials", "Collaborator navigates to the collaboration dashboard", "Collaborator submits details of the offer or event, including product details, discount information, and validity period", "Admin reviews and approves the submitted offer or event", "Approved offer or event is displayed as a top offer or event on the Website"]}, "testcases": [{"name": "Collaborator Submits Offer", "description": "Verify that a collaborator can successfully submit an offer to be displayed as a top offer on the website.", "input": {"offerType": "Discount", "productName": "Smart TV", "discountPercentage": 20, "validityPeriod": "2024-03-01 to 2024-03-15"}, "expected": {"outcome": "Offer submitted successfully", "status": "Pending admin approval"}}, {"name": "Collaborator Submits Event", "description": "Verify that a collaborator can successfully submit an event to be displayed as an event on the website.", "input": {"eventType": "Launch Event", "productName": "New Smartphone Model", "eventDescription": "Join us for the exclusive launch of our latest smartphone model.", "eventDate": "2024-04-01"}, "expected": {"outcome": "Event submitted successfully", "status": "Pending admin approval"}}, {"name": "Admin Approval", "description": "Verify that the admin can review and approve the submitted offer or event.", "input": {"adminApproval": true}, "expected": {"outcome": "Offer or event approved", "status": "Displayed as top offer or event"}}, {"name": "Admin Rejection", "description": "Verify that the admin can reject the submitted offer or event.", "input": {"adminApproval": false}, "expected": {"outcome": "Offer or event rejected", "status": "Not displayed"}}]}, {"usecase": {"name": "customer signup", "scenario": "customer creates account in the website", "actors": "Customer,System", "precondition": "User cannot have any account using same email", "steps": ["Customer fills necessary information", "Customer submit the necessary information", "System provides verifying link", "Customer verifies himself using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "info.com", "password": "abcxyz", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}, {"usecase": {"name": "customer login", "scenario": "customer log in to the account in the website", "actors": "Customer,System", "precondition": "User must have an account", "steps": ["Customer fills necessary information", "Customer submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}, {"usecase": {"name": "Customer cart", "scenario": "Customer adding food to cart and viewing cart", "actors": "Customer", "precondition": "Customer must be logged in", "steps": ["Customer select the quantity of the food", "Customer add it to the cart"]}, "testcases": [{"name": "valid quantity", "description": "Customer selects valid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart", "status": "Added"}}, {"name": "invalid quantity", "description": "Customer selects invalid quantity", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": 2, "pizza": -1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 0, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable food", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "abcd hotel", "food and quantity": {"burger": "unavailable", "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}, {"name": "unavailable restaurant", "description": "Customer cannot selects the food which is unavailable", "input": [{"restaurant": "Unavailable hotel", "food and quantity": {"burger": 2, "pizza": 1}}, {"restaurant": "bcd hotel", "food and quantity": {"chicken": 2, "pizza": 1}}], "expected": {"outcome": "Added to cart failed", "status": "not added"}}]}, {"usecase": {"name": "Place Order", "scenario": "Customer place the order from cart", "actors": "Customer", "precondition": "Customer must be logged in and cart must not be empty", "steps": ["Customer finalize the order", "Customer gives necessary info like location, phone number", "System show the total price", "Customer orders the food"]}, "testcases": [{"name": "cash on delivery order", "description": "Customer orders food and pay after delivery", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "success"}}, {"name": "Online payment order", "description": "Customer orders food and pay via online", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "1abcd2", "cartid": "222"}, "expected": {"outcome": "Placed order successfully", "status": "paid"}}, {"name": "Invalid online payment order", "description": "Customer orders food and pay via online using invalid trxid", "input": {"name": "john smith", "address": "palashi dhaka", "phone": "123456789", "trxId": "invalid", "cartid": "222"}, "expected": {"outcome": "Order did not place", "status": "Rejected"}}]}, {"usecase": {"name": "Customer Track the Order", "scenario": "Customer can track status of the active order and see the prvious order", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Restaurant approved the order", "Delivery person update the status", "Customer view the status"]}, "testcases": [{"name": "Active order", "description": "Customer can track only active order", "input": {"orderid": "222"}, "expected": {"outcome": "Food is on the way", "status": "not delivered"}}, {"name": "Previous Order", "description": "Customer cannot track the previous order which has already been delivered", "input": {"orderid": "222"}, "expected": {"outcome": "Already Delivered", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Customer cannot track the order beause the order is cancelled", "input": {"orderid": "222"}, "expected": {"outcome": "Order Cancelled", "status": "cancelled"}}]}, {"usecase": {"name": "Customer profile update", "scenario": "Customer can update his necessary info", "actors": "Cutomer,System", "precondition": "Customer must be logged in.", "steps": ["Customer fills the field which is to be updated", "Customer clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Customer update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Customer update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant signup", "scenario": "Restaurant can add category", "actors": "Restaurant,System", "precondition": "User cannot have any account using same email", "steps": ["Restaurant fills necessary information", "Restaurant submit the necessary information", "System provides verifying link", "Restaurant verifies using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka", "opening time": "8:00 am", "closing time": "8:30 pm"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "existing", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka", "opening time": "8:00 am", "closing time": "8:30 pm"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant login", "scenario": "Restaurant log in to the account in the website", "actors": "Restaurant,System", "precondition": "User must have an account", "steps": ["Restaurant fills necessary information", "Restaurant submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant Adding Food", "scenario": "Restaurant can add food under category", "actors": "Restaurant", "precondition": "Restaurant must be logged in.", "steps": ["Restaurant add category if necessary", "Restaurant fills information about food", "Restaurant add the food by clicking submit button"]}, "testcases": [{"name": "Valid Input", "description": "Category must be present under which food will be added and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food Added", "status": "In stock"}}, {"name": "Negative or zero price", "description": "Restaurant added invalid price", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "-150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food is not added", "status": "Rejected"}}, {"name": "Category does not exist", "description": "Restaurant added food with non-existent category", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Invalid", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food is not added", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant Adding Category", "scenario": "Restaurant can add category", "actors": "Restaurant", "precondition": "Restaurant must be logged in and category must not exist", "steps": ["Restaurant fills information about category", "Restaurant add the category by clicking submit button"]}, "testcases": [{"name": "Valid Input", "description": "Category will be added and this category must not exit", "input": {"Category Id": "1", "name": "Burger", "description": "Delicious Burger for you"}, "expected": {"outcome": "Category Added", "status": "Approved"}}, {"name": "Category Already Exist", "description": "Restaurant added already wxisted category", "input": {"Category Id": "1", "name": "Already existed", "description": "Delicious Burger for you"}, "expected": {"outcome": "Category did not added", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant Order", "scenario": "Restaurant,Customer ", "actors": "Cutomer, Delivery Person,Restaurant", "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.", "steps": ["Customer order the foods", "Restaurant making the food", "Restaurant completed the order"]}, "testcases": [{"name": "Active order", "description": "Restaurant can only approve active order", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval accepted", "status": "Approved"}}, {"name": "Previous Order", "description": "Restaurant cannot approve the previous order which has already been delivered", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "delivered"}}, {"name": "Active Order Cancelled", "description": "Restaurant cannot approve the order beause the order is cancelled", "input": {"Restaurant ID": "1234", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "cancelled"}}, {"name": "Unauthorized Owner", "description": "Unauthorized Restaurant cannot approve or track the order beause the order is cancelled", "input": {"Restaurant ID": "Unauthorized", "orderid": "222"}, "expected": {"outcome": "Approval rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant Updating Food", "scenario": "Restaurant can update food", "actors": "Restaurant", "precondition": "Restaurant must be logged in and food must be exist", "steps": ["Restaurant fills ne information about food", "Restaurant add the food by clicking submit button"]}, "testcases": [{"name": "Update Price", "description": "Food must be present and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Italian", "price": "200", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food Updated", "status": "Approved"}}, {"name": "update category", "description": "Food must be present and price cannot be negative", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Noodles", "price": "150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Category Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Updated info cannot be invalid", "input": {"foodId": "1", "name": "Spaghetti Carbonara", "category": "Invalid", "price": "-150", "description": "Classic Italian pasta dish."}, "expected": {"outcome": "Food did not updated", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurants Collaborating", "scenario": "Restaurant can collaborate with each other if they want", "actors": "Restaurant", "precondition": "Restaurants must be logged in", "steps": ["One restaurant send request for collaboration", "Other restaurant accept the request"]}, "testcases": [{"name": "Sending request", "description": "Resturant send collaboration request", "input": {"Restaurant Id1": "1", "Restaurant Id2": "2", "Message": "Let's Do collaborate"}, "expected": {"outcome": "Request Sent", "status": "Pending"}}, {"name": "Accepting Request", "description": "Restaurant accept collaboration request", "input": {"Restaurant Id1": "1", "Restaurant Id2": "2", "Message": "Okay"}, "expected": {"outcome": "Request Accepted", "status": "Approved"}}, {"name": "Unauthorized request", "description": "Unauthorized restaurant cannot sent or accept request", "input": {"Restaurant Id1": "unauthorized", "Restaurant Id2": "2", "Message": "Okay"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Home Kitchen or Cloud Kitchen", "scenario": "Restaurant owner or sole business owner can open a home kitchen", "actors": "Restaurant, System", "precondition": "Restaurants must be logged in.Home kitchen cannot should not exist", "steps": ["One restaurant or business owner send request for becoming a home kitchen", "Systems accept the request"]}, "testcases": [{"name": "Sending request", "description": "Resturant send home kitchen request", "input": {"Restaurant Id": "1", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Sent", "status": "Pending"}}, {"name": "Accepting Request", "description": "System accept request", "input": {"Restaurant Id": "1", "Jome kitchen Id": "3", "Is Home Kitchen": "Yes"}, "expected": {"outcome": "Request Accepted", "status": "Approved"}}, {"name": "Unauthorized request", "description": "Unauthorized restaurant cannot sent request", "input": {"Restaurant Id": "unauthorized", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}, {"name": "Redundant request", "description": "Already a home kitchen cannot sent request", "input": {"Restaurant Id": "1", "Home kitchen": "3", "availableDays": ["Monday", "Wednesday", "Friday"], "Allowed Arrangement time": "2 days"}, "expected": {"outcome": "Request Rejected", "status": "Rejected"}}]}, {"usecase": {"name": "Restaurant profile update", "scenario": "Restaurant can update necessary info", "actors": "Restaurant,System", "precondition": "Customer must be logged in.", "steps": ["Customer fills the field which is to be updated", "Customer clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Restaurant update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "abcd hotel", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Restaurant update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}, {"usecase": {"name": "Delivery Person signup", "scenario": "Delivery Person creates account in the website", "actors": "Delivery Person,System", "precondition": "User cannot have any account using same email", "steps": ["Delivery Person fills necessary information", "Delivery Person submit the necessary information", "System provides verifying link", "Delivery Person verifies himself using the link"]}, "testcases": [{"name": "valid signup", "description": "user gives valid and nonexisting email and password with necessary length and special character requirements", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka", "preferred delivery location": "palashi"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "invalid signup", "description": "user gives invalid and existing email and do not give password with necessary length and special character requirements", "input": {"email": "info.com", "password": "abcxyz", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka", "preferred delivery location": "palashi"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}, {"usecase": {"name": "Delivery Person login", "scenario": "Delivery Person log in to the account in the website", "actors": "Delivery Person,System", "precondition": "User must have an account", "steps": ["Delivery Person fills necessary information", "Delivery Person submit the necessary information", "System approves"]}, "testcases": [{"name": "valid login", "description": "user gives valid and existing email and correct password", "input": {"email": "info@gmail.com", "password": "abcxyz123#$"}, "expected": {"outcome": "login successful", "status": "Approved"}}, {"name": "invalid login", "description": "user gives invalid and non-existing email and do not give correct password", "input": {"email": "info.com", "password": "abcxyz"}, "expected": {"outcome": "login failed", "status": "Rejected"}}]}, {"usecase": {"name": "Delivery Person Order", "scenario": "Delivery Person accept an order if he is free.He can take multiple order too if the locations are near but not more than three", "actors": "Delivery Person,System", "precondition": "User must have an account", "steps": ["System finds a delivery person and assigned the order", "Delivery Person accept the request", "System approves"]}, "testcases": [{"name": "valid request", "description": "Delivery Person is free", "input": {"order id": "1", "status": "accepted", "order count": "1"}, "expected": {"outcome": "Request Accepted", "status": "Accepted"}}, {"name": "valid request", "description": "Delivery Person is not free but order count is not more than free", "input": {"order id": ["1", "2"], "status": "accepted", "order count": "2"}, "expected": {"outcome": "Request Accepted", "status": "Accepted"}}, {"name": "Invalid request", "description": "Delivery Person cannot accept the request as the no of order is more than three", "input": {"order id": ["1", "2", "3", "4"], "status": "not accepted", "order count": "4"}, "expected": {"outcome": "More than three order", "status": "Rejected"}}, {"name": "Invalid request", "description": "Delivery Person is free but location is too far", "input": {"order id": ["1", "2"], "status": "not accepted", "location": "too far", "order count": "2"}, "expected": {"outcome": "Location too far", "status": "Rejected"}}, {"name": "valid request", "description": "Delivery Person is not available", "input": {"order id": ["1", "2"], "status": "not accepted", "order count": "2"}, "expected": {"outcome": "Not available", "status": "Rejected"}}]}, {"usecase": {"name": "Delivery Person Update Orders", "scenario": "Delivery Person update the status of the orders", "actors": "Delivery Person, Customer", "precondition": "User must have an account", "steps": ["Delivery Person upddate the status", "Customer see the status"]}, "testcases": [{"name": "Order on the way", "description": "Order is not delivered but it is on the way ", "input": {"oder id": "1", "status": "on the way"}, "expected": {"outcome": "Update successful", "status": "on the way"}}, {"name": "Order delivered", "description": "Order is on the cusomers's hand", "input": {"oder id": "1", "status": "delivered"}, "expected": {"outcome": "Update successful", "status": "on the way"}}, {"name": "Order Cancelling", "description": "Delivery Person cannot cancel an order", "input": {"oder id": "1", "status": "cancelled"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}, {"name": "Previous Order", "description": "Delivery Person cannot update previous order which is already been delivered", "input": {"oder id": "delivered", "status": "on the way"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}, {"name": "Cancelled Order", "description": "Delivery Person cannot update cancelled order which is already been delivered", "input": {"oder id": "cencelled", "status": "on the way"}, "expected": {"outcome": "Update unsuccessful", "status": "rejected"}}]}, {"usecase": {"name": "Delivery Person profile update", "scenario": "Delivery Person can update necessary info", "actors": "Delivery Person,System", "precondition": "Delivery Person must be logged in.", "steps": ["Delivery Person fills the field which is to be updated", "Delivery Person clicks the submit button and update the info", "System approved the info"]}, "testcases": [{"name": "Valid info", "description": "Delivery Person update profile with valid info", "input": {"email": "info@gmail.com", "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile Updated", "status": "Approved"}}, {"name": "Invalid info", "description": "Delivery Person update profile with invalid info", "input": {"email": null, "password": "abcxyz123#$", "name": "john smith", "phone": "123456789", "address": "palashi,dhaka"}, "expected": {"outcome": "Profile cannot be updated", "status": "Rejected"}}]}, {"usecase": {"name": "Messenger", "scenario": "Different user can send and receive messages with some restriction", "actors": "Customer, Restaurant, Delivery Person", "precondition": "User must have an account", "steps": ["one user send nessage to another user", "another user reply to the meesage"]}, "testcases": [{"name": "Customer-Delivery Person", "description": "Customer and Delivery Person can send message to each other", "input": {"message": "I am on my way"}, "expected": {"outcome": "Message Sent", "status": "Sent"}}, {"name": "Customer-Restaurant", "description": "Customer and Restaurant can not send message to each other. As they can contact and take the food orders via other medium. Thus systems can be hampered.", "input": {"message": "Food is good"}, "expected": {"outcome": "Message not sent", "status": "rejected"}}, {"name": "Restaurant-Delivery Person", "description": "Restaurant and Delivery Person can send message to each other", "input": {"message": "When I can take food?"}, "expected": {"outcome": "Message Sent", "status": "Sent"}}]}, {"usecase": {"name": "Search Food", "scenario": "Customer and Guest can search food.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of food", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search food by name", "input": {"name": "Burger"}, "expected": {"outcome": "Food Found", "status": "okay"}}, {"name": "search by filter", "description": "User can search food by filter", "input": {"category": "Fast Food", "rating": "3.5", "min_price": "100", "max_price": "200"}, "expected": {"outcome": "Food not Found", "status": "okay"}}]}, {"usecase": {"name": "Search Restaurant", "scenario": "Customer and Guest can search Restaurant.", "actors": "Customer, Guest", "precondition": "No precondition", "steps": ["User writes the name of Restaurant", "User uses the filter"]}, "testcases": [{"name": "search by name", "description": "User can search restaurant by name", "input": {"name": "abcd Hotel"}, "expected": {"outcome": "Restaurant Found", "status": "okay"}}, {"name": "search by Location or type", "description": "User can search restaurant by Location or type", "input": {"Location": "Lalbagh", "rating": "3.5", "type": "Fast Food"}, "expected": {"outcome": "Restaurant not Found", "status": "okay"}}]}, {"usecase": {"name": "Conference Creation", "scenario": "Conference Chair creates a conference.", "actors": "Conference Chair", "preconditions": "User is registered as conference Chair in the website", "steps": ["Conference Chair enters conference title", "Conference Chair enters conference description", "Conference Chair enters conference webpage", "Conference Chair enters conference venue", "Conference Chair selects conference start date, end date", "Conference Chair selects submission deadline", "Conference Chair enters research track", "Conference Chair creates the conference"]}, "testcases": [{"name": "Valid Conference Creation", "description": "Verify that a conference chair has successfully created a conference.", "input": {"conference_title": "saydg rence", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation successful", "status": "Success"}}, {"name": "Unauthorized conference chair", "description": "Verify that the system handles the case where an unauthorized user tries to create a conference", "input": {"conference_title": "saydg rence", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}, {"name": "Empty Conference Title", "description": "Verify that the system handles the case where a chair tries to create a conference without title", "input": {"conference_title": "", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": ["Technology", "Science"]}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}, {"name": "Empty research track", "description": "Verify that the system handles the case where a chair tries to create a conference without any research track", "input": {"conference_title": "", "conference_description": "An example conference", "venue": "CSE,BUET", "conference_webpage": "http://example-conference.com", "start_date": "2024-02-01", "end_date": "2024-02-03", "submission_deadline": {"date": "2024-01-26", "time": "20:00:00"}, "research_tracks": []}, "expected": {"outcome": "Conference creation unsuccessful", "status": "Failed"}}]}, {"usecase": {"name": "Paper Submission", "scenario": "Users submit a paper in a conference.", "actors": "Users", "preconditions": "User is registered in the website", "steps": ["User enters paper title", "User selects co-authors", "User selects reaseach track", "User enters abstract", "User uploads pdf of the paper", "User submits the paper"]}, "testcases": [{"name": "Valid Paper Submission", "description": "Verify that a user has successfully submitted a paper.", "input": {"paper_title": "paper on graph", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission successful", "status": "Success"}}, {"name": "Empty Paper Title Submission", "description": "Verify that the system handles the case where a user tries to submit an empty paper title", "input": {"paper_title": "", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}, {"name": "Empty Paper Abstract Submission", "description": "Verify that the system handles the case where a user tries to submit an empty paper abstract", "input": {"paper_title": "Paper title here", "abstract": "", "pdf_link": "www.abc.com", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}, {"name": "No pdf file uploaded", "description": "Verify that the system handles the case where a user tries to submit without uploading paper pdf", "input": {"paper_title": "paper on graph", "abstract": "the abstact of the paper is goood. Handles a critical case", "pdf_link": "", "related_fields": ["graph"]}, "expected": {"outcome": "Submission failed", "status": "Not Submitted"}}]}, {"usecase": {"name": "Paper Review", "scenario": "Reviewer reviews a paper.", "actors": "Reviewer", "preconditions": "User is assigned as a reviewer", "steps": ["Reviewer enters paper rating", "Reviewer enters paper review", "Reviewer submits the paper review"]}, "testcases": [{"name": "Valid paper review Submission", "description": "Verify that a reviewer has successfully submitted a paper review.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": 7, "review": "very very very One of the paper"}, "expected": {"outcome": "Submission successful", "status": "Success"}}, {"name": "Empty paper rating submission", "description": "Verify that a reviewer has submitted a paper review without rating.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": null, "review": "very very very One of the paper"}, "expected": {"outcome": "Submission failed", "status": "Failed"}}, {"name": "Empty paper review submission", "description": "Verify that a reviewer has submitted a paper review without review.", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad", "paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "rating": 6, "review": ""}, "expected": {"outcome": "Submission failed", "status": "Failed"}}]}, {"usecase": {"name": "Reviewer assignment", "scenario": "Conference Chair assign reviewrs in papers of a conference while satisfying constraints", "actors": "Conference Chair", "preconditions": "User is registered as conference chair in the website", "steps": ["Conference Chair enters conference page", "Conference Chair selects reviewer from suggestions and request for review"]}, "testcases": [{"name": "Valid Reviewer assignment", "description": "Verify that system has successfuly asssigned reviewers while satisfying constraints.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment successful", "status": "Success"}}, {"name": "Assinged reviewer is in conflict of interest", "description": "Verify that the system handles the case where chair tries to assign reviewer who is in conflict of interest.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment failed", "status": "Failed"}}, {"name": "Assinged reviewer is in co-authors", "description": "Verify that the system handles the case where chair tries to assign reviewer who is a co-author.", "input": {"paper_id": "7b3b5479-e7c9-4298-8432-07a95f34ef9b", "user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Assignment failed", "status": "Failed"}}]}, {"usecase": {"name": "View Published Papers", "scenario": "Verify that a user can successfully view his/her own published papers.", "actors": "Users", "preconditions": "User is registered in the website", "steps": ["User enters his profile", "User goes on published papers"]}, "testcases": [{"name": "User views own published papers", "description": "Verify that a user can successfully view his/her own published papers..", "input": {"user_id": "727691ed-07c2-4391-8b93-5df6ae307fad"}, "expected": {"outcome": "Published papers viewed successfully", "status": "Allowed"}}, {"name": "Conference chair views published papers", "description": "Verify that an conference chair can successfully view published papers", "input": {"conference_id": "A98765"}, "expected": {"outcome": "Published papers viewed successfully", "access": "Allowed"}}, {"name": "User views reviews on his submitted paper", "description": "Verify that a user head can successfully view the reviews on his paper.", "input": {"paper_id": "D45678"}, "expected": {"outcome": "Reviews viewed successfully", "access": "Allowed"}}, {"name": "Invalid user ID", "description": "Verify that the system handles the case where an invalid user ID is provided for published papers viewing.", "input": {"user_id": "InvalidID"}, "expected": {"outcome": "Published paper viewing failed", "access": "Denied"}}]}, {"usecase": {"name": "Search and Book", "scenario": "Guest searches with appropriate filters, selects a property, adds a payment method, adds meals if meal option is on for that property, negotiates (optional), makes payment, and completes the booking.", "actors": "Guest, Host", "preconditions": "For booking, Guest is registered in the system", "steps": ["Guest performs a search with appropriate filters", "Guest selects a property from the search results", "Guest adds a payment method", "If meal option is on for the property, guest adds meals (optional)", "Guest negotiates with the host (optional)", "Guest makes payment", "Booking is confirmed upon successful payment"]}, "testcases": [{"name": "Search and Book - Standard Booking", "description": "Verify that the guest can successfully search, select, and book a property without negotiation or additional meals.", "input": {"searchFilters": {"location": "City Center", "priceRange": "$100 - $200", "propertyType": "Apartment"}, "selectedProperty": "City View Apartment", "paymentMethod": "CreditCard123"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Search and Book - Negotiation and Meals", "description": "Verify that the guest can search, select, negotiate, add meals, and book a property.", "input": {"searchFilters": {"location": "Seaside", "priceRange": "$150 - $300", "propertyType": "Villa"}, "selectedProperty": "Beachfront Villa", "paymentMethod": "PayPal456", "meals": [{"foodId": "B001", "count": 2}, {"foodId": "L002", "count": 1}, {"foodId": "D003", "count": 1}], "negotiation": {"proposedFare": 250}}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles the case where the guest provides an invalid payment method.", "input": {"searchFilters": {"location": "Downtown", "priceRange": "$80 - $120", "propertyType": "Studio"}, "selectedProperty": "Urban Studio", "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Invalid Payment Method"}}, {"name": "Property Not Available for Booking", "description": "Verify that the system handles the case where the selected property is not available for booking.", "input": {"searchFilters": {"location": "Mountain", "priceRange": "$200 - $400", "propertyType": "Cabin"}, "selectedProperty": "Mountain Retreat", "paymentMethod": "CreditCard789"}, "expected": {"outcome": "Booking failed", "status": "Property Not Available"}}, {"name": "Invalid Check-In Check-Out Date", "description": "Verify that the system handles the case where the guest enters an invalid check-in and Check-Out date.", "input": {"location": "Suburb", "checkInDate": "2024-01-20", "checkOutDate": "2024-01-15", "guests": 1}, "expected": {"outcome": "Search failed", "results": "No available accommodations"}}]}, {"usecase": {"name": "Negotiation", "scenario": "Guest starts a negotiation after selecting a property. Host may agree to the guest's proposal, propose another fare, or stick to the actual price. Guest may accept or reject the host's response.", "actors": "Guest, Host", "preconditions": "Guest and Host are registered in the system, Property is available for booking and selected by Guest", "steps": ["Guest selects a property for booking", "Guest initiates negotiation by proposing a fare", "Host receives negotiation proposal", "Host may agree, propose another fare, or stick to the actual price", "Guest accepts or rejects the host's response"]}, "testcases": [{"name": "Guest Initiates Negotiation", "description": "Verify that the guest can successfully initiate a negotiation after selecting a property by proposing a fare.", "input": {"selectedProperty": "Cosy Cabin", "systemsFare": 1000, "proposedFare": 950}, "expected": {"outcome": "Negotiation initiated", "status": "Pending Host response"}}, {"name": "Host Agrees to Guest's Proposal", "description": "Verify that the host can agree to the guest's proposed fare during the negotiation.", "input": {"negotiationID": "N12345", "response": "Agree"}, "expected": {"outcome": "Negotiation agreed", "status": "Confirmed"}}, {"name": "Host Proposes Another Fare", "description": "Verify that the host can propose another fare during the negotiation.", "input": {"negotiationID": "N12345", "response": "ProposeAnother", "systemsFare": 1000, "proposedFare": 950, "newFare": 980}, "expected": {"outcome": "Host proposes another fare", "status": "Pending Guest response"}}, {"name": "Host Sticks to Actual Price", "description": "Verify that the host can stick to the actual price during the negotiation.", "input": {"negotiationID": "N12345", "response": "StickToActual"}, "expected": {"outcome": "Host sticks to actual price", "status": "Pending guest response"}}, {"name": "Guest Accepts Host's Response", "description": "Verify that the guest can accept the host's response during the negotiation.", "input": {"negotiationID": "N12345", "response": "Accept"}, "expected": {"outcome": "Negotiation accepted", "status": "Confirmed"}}, {"name": "Guest Rejects Host's Response", "description": "Verify that the guest can reject the host's response during the negotiation.", "input": {"negotiationID": "N12345", "response": "Reject"}, "expected": {"outcome": "Negotiation rejected", "status": "Rejected"}}, {"name": "Invalid Negotiation Proposal", "description": "Verify that the system handles the case where the guest provides an invalid negotiation proposal.", "input": {"selectedProperty": "Modern Loft", "proposedFare": -60}, "expected": {"outcome": "Negotiation failed", "status": "Invalid proposal"}}]}, {"usecase": {"name": "Meal Options", "scenario": "Guest, after selecting a property, chooses meals for breakfast, lunch, and/or dinner. The selection can be empty. After selection, the system calculates the total meal price and adds it to the total amount to pay.", "actors": "Guest, System", "preconditions": "Guest is registered in the system, Property is selected for booking", "steps": ["Guest selects a property for booking", "Guest chooses meals for breakfast, lunch, and/or dinner (optional)", "System calculates the total meal price", "System adds the total meal price to the total amount to pay"]}, "testcases": [{"name": "Select Meals for All Three Times", "description": "Verify that the guest can select meals for breakfast, lunch, and dinner, and the system calculates the total meal price correctly.", "input": {"selectedProperty": "Charming Cottage", "selectedMeals": {"breakfast": [{"foodId": 1, "count": 2}], "lunch": [{"foodId": 1, "count": 2}], "dinner": [{"foodId": 1, "count": 2}]}}, "expected": {"outcome": "Meals selected successfully", "totalMealPrice": 60, "totalAmountToPay": "Property cost + Total Meal Price"}}, {"name": "Select Meals for Breakfast Only", "description": "Verify that the guest can select meals for breakfast only, and the system calculates the total meal price correctly.", "input": {"selectedProperty": "Rustic Cabin", "selectedMeals": {"breakfast": [{"foodId": 1, "count": 2}]}}, "expected": {"outcome": "Meals selected successfully", "totalMealPrice": 15, "totalAmountToPay": "Property cost + Total Meal Price"}}, {"name": "Select No Meals", "description": "Verify that the guest can choose not to select any meals, and the system adjusts the total amount to pay accordingly.", "input": {"selectedProperty": "Seaside Villa", "selectedMeals": {}}, "expected": {"outcome": "No meals selected", "totalMealPrice": 0, "totalAmountToPay": "Property cost"}}, {"name": "Invalid Meal Selection", "description": "Verify that the system handles the case where the guest provides an invalid meal selection.", "input": {"selectedProperty": "Urban Loft", "selectedMeals": {"lunch": [{"foodId": 1, "count": -2}]}}, "expected": {"outcome": "Meal selection failed", "status": "Invalid selection"}}]}, {"usecase": {"name": "Paying Guest Booking", "scenario": "Guest searches for and selects a property that allows paying guest. If auto book is on for that property, the guest makes a payment, and the booking is confirmed. If auto book is off, the host can accept or reject the booking. If accepted, the payment is done, and the booking is confirmed.", "actors": "Guest, Host", "preconditions": "Guest and Host are registered in the system, Property allows paying guest", "steps": ["Guest searches for properties allowing paying guest", "Guest selects a property", "If auto book is on, the guest makes payment and booking is confirmed", "If auto book is off, the host can accept or reject the booking", "If accepted, payment is done, and the booking is confirmed"]}, "testcases": [{"name": "Auto Book Enabled - Payment Successful", "description": "Verify that the guest can successfully book a property with auto book enabled and the payment is successful.", "input": {"selectedProperty": "City View Apartment", "autoBook": true, "paymentMethod": "CreditCard123"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Auto Book Enabled - Payment Failed", "description": "Verify that the system handles the case where the guest cannot make a payment with auto book enabled.", "input": {"selectedProperty": "Beachfront Villa", "autoBook": true, "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Payment Failed"}}, {"name": "Auto Book Disabled - Host Accepts", "description": "Verify that the host can accept the booking when auto book is disabled.", "input": {"selectedProperty": "Mountain Retreat", "autoBook": false, "hostResponse": "Accept", "paymentMethod": "CreditCard567"}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Auto Book Disabled - Host Rejects", "description": "Verify that the host can reject the booking when auto book is disabled.", "input": {"selectedProperty": "Lakeside Cabin", "autoBook": false, "hostResponse": "Reject"}, "expected": {"outcome": "Booking failed", "status": "Rejected"}}, {"name": "Auto Book Disabled - Invalid Payment Method", "description": "Verify that the system handles the case where the guest provides an invalid payment method when auto book is disabled.", "input": {"selectedProperty": "Rural Cottage", "autoBook": false, "hostResponse": "Accept", "paymentMethod": "InvalidPaymentMethod"}, "expected": {"outcome": "Booking failed", "status": "Payment Failed"}}]}, {"usecase": {"name": "Payment", "scenario": "Guest initiates payment for a booking only when the booking is in the 'Ready for Payment' state.", "actors": "Guest", "preconditions": "Guest is registered in the system, Booking is in 'Ready for Payment' state", "steps": ["Guest selects a booking in 'Ready for Payment' state", "Guest initiates the payment process", "System processes the payment", "Booking is confirmed upon successful payment"]}, "testcases": [{"name": "Payment for Booking in 'Ready for Payment' State", "description": "Verify that the guest can successfully make a payment for a booking in the 'Ready for Payment' state.", "input": {"bookingID": "B12345"}, "expected": {"outcome": "Payment successful", "status": "Confirmed"}}, {"name": "Invalid Booking ID", "description": "Verify that the system handles the case where the guest provides an invalid booking ID.", "input": {"bookingID": "InvalidBookingID"}, "expected": {"outcome": "Payment failed", "status": "Invalid Booking ID"}}, {"name": "Booking Not in 'Ready for Payment' State", "description": "Verify that the system prevents payment for a booking that is not in the 'Ready for Payment' state.", "input": {"bookingID": "B67890"}, "expected": {"outcome": "Payment failed", "status": "Not Ready for Payment"}}]}, {"usecase": {"name": "Property Registration", "scenario": "Host registers a property by providing photos and other mandatory fields. If the host turns on the meal option, they have to add meals for breakfast with names, photos, and prices. If the host allows paying guests, they have to add a description of the meal and the price.", "actors": "Host", "preconditions": "Host is registered in the system", "steps": ["Host initiates property registration", "Host provides mandatory property details such as name, location, type, and photos", "If meal option is turned on, host adds meals for breakfast with names, photos, and prices", "If allowing paying guests, host adds a description of the meal and the price", "Host completes the property registration"]}, "testcases": [{"name": "Basic Property Registration", "description": "Verify that the host can successfully register a property with mandatory details and photos.", "input": {"propertyDetails": {"name": "City View Apartment", "location": "Downtown", "type": "Apartment", "photos": ["photo1.jpg", "photo2.jpg"]}, "mealOption": false, "allowPayingGuest": false}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Property Registration with Meals", "description": "Verify that the host can register a property with meals for breakfast when the meal option is turned on.", "input": {"propertyDetails": {"name": "Seaside Villa", "location": "Beachfront", "type": "Villa", "photos": ["photo3.jpg", "photo4.jpg"]}, "mealOption": true, "meals": {"breakfast": [{"name": "Healthy Start", "photo": "healthy_start.jpg", "price": 20}], "dinner": [{"name": "Healthy Start", "photo": "healthy_start.jpg", "price": 20}]}, "allowPayingGuest": false}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Property Registration with Paying Guest Option", "description": "Verify that the host can register a property with a description of the meal and the price when allowing paying guests.", "input": {"propertyDetails": {"name": "Mountain Retreat", "location": "Mountain", "type": "Cabin", "photos": ["photo5.jpg", "photo6.jpg"]}, "mealOption": true, "meals": [{"name": "Hearty Breakfast", "photo": "hearty_breakfast.jpg", "price": 18}], "allowPayingGuest": true, "payingGuestDetails": {"mealDescription": "A delightful breakfast with a variety of options", "mealPrice": 25}}, "expected": {"outcome": "Property registration successful", "status": "Completed"}}, {"name": "Missing Mandatory Fields", "description": "Verify that the system handles the case where the host tries to register a property with missing mandatory fields.", "input": {"propertyDetails": {"name": "Incomplete Villa", "location": "Incomplete Location"}, "mealOption": false, "allowPayingGuest": false}, "expected": {"outcome": "Property registration failed", "status": "Missing Mandatory Fields"}}]}, {"usecase": {"name": "Student Registration", "scenario": "Student is registered in the oncampus system", "actors": "Admin", "preconditions": "Student is enrolled in the university and admin is logged in", "steps": ["Admin enters student information", "Admin submits the registration"]}, "testcases": [{"name": "Valid Student Information", "description": "Verify that the admin can successfully register a student with valid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Gaming Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Invalid Student Information", "description": "Verify that the system handles the case where the admin tries to register a student with invalid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Gaming Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration failed.Same id already exists", "status": "Rejected"}}, {"name": "Invalid Student Information - invalid club role", "description": "Verify that the system handles the case where the admin tries to register a student with invalid information.", "input": {"studentInfo": {"id": "1905112", "name": "Md Muhaiminul Islam Nafi", "batch": "2019", "meritPosition": 10, "session": "2020-2021", "department": "cse", "clubRoles": [{"clubName": "BUET Not Club", "role": "VICE_PRESIDENT"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Registration failed.Invalid club role", "status": "Rejected"}}]}, {"usecase": {"name": "Club Creation", "scenario": "A club is created in the oncampus system.", "actors": "Admin", "preconditions": "There is not a club with the same name already and Admin is logged in", "steps": ["Admin enters club information", "Admin submits the club information"]}, "testcases": [{"name": "Valid Club Information", "description": "Verify that the admin can successfully create a club with valid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "PRESIDENT", "email": "1905020@cse.buet.ac.bd"}, {"role": "VICE_PRESIDENT", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation successful", "status": "Approved"}}, {"name": "Invalid Club Information", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Debating Club", "members": [{"role": "PRESIDENT", "email": "1905020@cse.buet.ac.bd"}, {"role": "VICE_PRESIDENT", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Same club name already exists", "status": "Rejected"}}, {"name": "Invalid Club Information - invalid member ", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "NotARole", "email": "1905010@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Invalid member role", "status": "Rejected"}}, {"name": "Invalid Club Information - invalid id ", "description": "Verify that the system handles the case where the admin tries to create a club with invalid information.", "input": {"clubInfo": {"clubName": "BUET Gaming Club", "members": [{"role": "PRESIDENT", "email": "-23@cse.buet.ac.bd"}]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Club creation failed.Invalid member id", "status": "Rejected"}}]}, {"usecase": {"name": "Create a post", "scenario": "User creates a post", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters post information", "User submits post"]}, "testcases": [{"name": "Valid Post Information", "description": "User enters valid post information", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Valid Post Information - With Poll", "description": "User enters valid post information with poll", "input": {"post": {"title": "My first post", "content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": true, "options": ["option1", "option2"], "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is created successfully", "status": "Approved"}}, {"name": "Invalid Post Information - Missing title", "description": "User enters invalid post information", "input": {"post": {"content": "This a whole post", "anonymous": false, "tags": ["TUITION", "DISCUSSION"], "commentAllow": true, "isPoll": false, "attachments": ["file1", "file2"], "images": ["image1", "image2"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post is not created - Missing title", "status": "Rejected"}}]}, {"usecase": {"name": "View a Single Post", "description": "User attempts to view a single post", "actor": "User", "precondition": "User is logged in and user has access to the post", "steps": ["User Clicks on a post"]}, "testcases": [{"name": "Valid Post Fetch Request", "description": "User requests for a post with valid post id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post viewed successfully", "status": "Approved"}}, {"name": "Invalid Post Fetch Request", "description": "User requests for a post with invalid post id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Post not found", "access": "Denied"}}, {"name": "Unauthorized Post Fetch Request", "description": "User requests for a post for which user does not have access", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User does not have access to the post", "access": "Denied"}}]}, {"usecase": {"name": "View All General Post", "description": "User attempts to view all general posts", "actor": "User", "precondition": "User is logged in and user has access to the general posts", "steps": ["User Clicks on the General Posts Tab"]}, "testcases": [{"name": "Valid General Post Fetch Request", "description": "User requests for all general posts", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all general posts", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User does not have access to the general posts", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing general posts", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view general posts", "access": "Denied"}}]}, {"usecase": {"name": "Create an Event", "scenario": "User creates an event", "actors": "User", "preconditions": "User is registered and logged in", "steps": ["User enters event information", "User submits the event"]}, "testcases": [{"name": "Valid Event Information - RAG Concert", "description": "User enters valid Event information", "input": {"event": {"title": "RAG Concert", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "host": "Interval 18", "location": "BUET ECE cafeteria", "category": "seminar", "type": "Offline", "description": "There will be a Concert on ......", "division": "forum", "subDivision": "General", "bands": [{"name": "Band 1", "time": "7PM"}, {"name": "Band 2", "time": "8PM"}], "restrictions": ["Gates Closed at 7pm.After that only BUETIAN and ALUMNI will be allowed.ID card/Teams/BIIS will be checked", "Guests not allowed after 7pm", "No smoking/vaping allowed in open", "No bikes/cars allowed"]}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Valid Event Information - Seminar", "description": "User enters valid Event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "category": "seminar", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "files": ["file1", "file2"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is created successfully", "status": "Approved"}}, {"name": "Invalid Event Information - Missing title", "description": "User enters invalid event information", "input": {"event": {"startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "location": "Online Teams Meeting", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing title", "status": "Rejected"}}, {"name": "Invalid Event Information - Missing location", "description": "User enters invalid event information", "input": {"event": {"title": "Online orientation program Honda YES Awards", "startDate": "Jan 26, 2024", "startTime": "7PM", "endDate": "Jan 26, 2024", "endTime": "9PM", "type": "OnlineMeeting", "description": "The online will be in ms team. Details are in the links", "links": ["https://www.google.com/", "https://moodle.cse.buet.ac.bd/"], "division": "forum", "subDivision": "General"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event is not created - Missing location", "status": "Rejected"}}]}, {"usecase": {"name": "View a Single Event", "description": "User attempts to view a single Event", "actor": "User", "precondition": "User is logged in and user has access to the Event", "steps": ["User Clicks on a event"]}, "testcases": [{"name": "Valid Event Fetch Request", "description": "User requests for a Event with valid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event viewed successfully", "status": "Approved"}}, {"name": "Invalid Event Fetch Request", "description": "User requests for a Event with invalid Event id", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "Event not found", "access": "Denied"}}, {"name": "Unauthorized Event Fetch Request", "description": "User requests for a Event for which user does not have access", "input": {"params": {"id": "123"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User does not have access to the Event", "access": "Denied"}}]}, {"usecase": {"name": "View All Events", "description": "User attempts to view all Events", "actor": "User", "precondition": "User is logged in and user has access to the Events", "steps": ["User Clicks on the All Events Tab"]}, "testcases": [{"name": "Valid All Event Fetch Request", "description": "User requests for all Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all Events", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view Events", "access": "Denied"}}]}, {"usecase": {"name": "View Saved Events", "description": "User attempts to view his saved Events", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on My Saved Events Tab"]}, "testcases": [{"name": "Valid Saved Events Fetch Request", "description": "User requests for saved Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User views list of all of his saved Events", "access": "Approved"}}, {"name": "Invalid Token", "description": "User issues a request without a valid token", "input": {"cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain Events", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User only views Events he is not banned from viewing", "access": "Denied"}}]}, {"usecase": {"name": "View user profile", "description": "User attempts to view a user profile", "actor": "User", "precondition": "User is logged in", "steps": ["User Clicks on a user profile"]}, "testcases": [{"name": "Valid User Profle Fetch Request", "description": "User requests for a User Profle with valid User id", "input": {"params": {"id": "1905010@cse.buet.ac.bd"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile viewed successfully", "status": "Approved"}}, {"name": "Invalid User Profile Fetch Request", "description": "User requests for a User Profile with invalid User id", "input": {"params": {"id": "not_a_valid_id"}, "cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User Profile not found", "access": "Denied"}}, {"name": "Invalid User Profile Fetch Request - Invalid Token", "description": "User requests for a User Profile with invalid token", "input": {"params": {"id": "123"}, "cookies": {"token": ""}}, "expected": {"outcome": "User is not logged in", "access": "Denied"}}, {"name": "Banned User", "description": "User is banned from viewing certain user profiles", "input": {"cookies": {"token": "auyd23t872t18duasd"}}, "expected": {"outcome": "User is not allowed to view this user profile", "access": "Denied"}}]}, {"usecase": {"name": "Flight Route Selection", "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel", "actors": "Users", "preconditions": "", "steps": ["Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for ", "System responds with a list of airlines avaiable as per their Selection"]}, "testcases": [{"name": "Selection of Routes with Available Flights", "description": "Verify that the route user has selected has airlines available ( direct or indirect) ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "17-02-23"}, "expected": {"outcome": "Flights available", "comments": "System shows a list", "status": "200"}}, {"name": "Selection of Routes with Unavailable Flights", "description": "Verify that the system handles the case where no flights are available as per selected parametres ", "input": {"source": "DAC", "dest": "CGP", "seats": "5", "class": "economy", "date": "04-02-23"}, "expected": {"outcome": "No flights matched your search", "status": "404"}}]}, {"usecase": {"name": "Airline Selection", "scenario": "Users select the airlines they prefer from the availability list", "actors": "Users", "preconditions": "Users have selected their endpoint airports, travel date, number of seats to be booked and a specific class", "steps": ["Users select their prefered airline from the list that pops up on selecting travel details", "Users can sort the list by categories like, cheapest flight, quickest flight, or by their takeoff time", "Users can also filter the list by categories like, cheapest flight or quickest flight", "System responds with a grid shaped airline layout for that flight"]}, "testcases": [{"name": "Selection of Airline with no sort or filter", "description": "Verify that the user can select an airline from the list ", "input": {"source": "DAC", "dest": "CGP", "Flight_ID": "BG88", "Flight_Name": "Bangladesh Biman", "Take_off_Date": "17-02-23", "Take_off_Time": "12:00:00", "Landing_Date": "17-02-23", "Landing_Time": "14:00:00", "via": "", "duration": "2 hours"}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with sort and filter", "description": "Verify that the system handles the case where flights are sorted and filtered based on expected parametres", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with sort on filter", "description": "Verify that the system handles the case where flights are sorted on the filtered results", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}, {"name": "Selection of Airline with filter on filter", "description": "Verify that the system handles the case where flights are filtered on the filtered results", "input": {"...": "..."}, "expected": {"outcome": "System shows a layout", "status": "200"}}]}, {"usecase": {"name": "Seat Selection", "scenario": "Users select the seat they prefer from the availability list", "actors": "Users", "preconditions": "Users have selected their choice of airline prefered and landed on the flight layout", "steps": ["Users select their prefered seat from the grid that pops up on selecting the airline", "Users can select exactly that many seats that they claimed to have required", "System redirects to payment page upon seat request submission"]}, "testcases": [{"name": "Selection of available seat ", "description": "Verify that the user can select available seats ", "input": {"1": "A3", "2": "H4"}, "expected": {"outcome": "System redirects to payment page", "status": "200"}}, {"name": "Selection of number of seats that are claimed exactly on putting request in first place", "description": "Verify that the system handles the case where user selects less seats or more than they demanded for in the first place", "input": {"1": "A3"}, "expected": {"outcome": "You have not chosen enough seats / You have chosen more seats", "status": "404"}}]}, {"usecase": {"name": "Payment", "scenario": "Users pay for the flight they are going to board", "actors": "Users", "preconditions": "Users have booked seats in the airlines they prefered", "steps": ["Users book their prefered seat from the layout and system redirects to payment page", "System calculates the amount that has to be paid for the seat", "Users make the payment", "System updates the payment status of the user"]}, "testcases": [{"name": "Valid Payment", "description": "Verify that the user can successfully make a valid payment for the booked seat", "input": {"systemCalculatedFee": 200, "paymentAmount": 200}, "expected": {"outcome": "Payment successful", "status": "200"}}, {"name": "Zero Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount of zero.", "input": {"systemCalculatedFee": 100, "paymentAmount": 0}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Insufficient Payment", "description": "Verify that the system handles the case where the user tries to make a payment with an amount less than the calculated fee.", "input": {"systemCalculatedFee": 100, "paymentAmount": 50}, "expected": {"outcome": "Payment failed", "status": "404"}}, {"name": "Overpayment", "description": "Verify that the system handles the case where the user tries to make an overpayment.", "input": {"systemCalculatedFee": 100, "paymentAmount": 250}, "expected": {"outcome": "Payment failed", "status": "404"}}]}, {"usecase": {"name": "Flight Review Submission System", "scenario": "Users can submit reviews for their flight experiences ", "actors": "Users", "preconditions": "Users have booked and completed a flight.", "steps": ["Users submit reviews for their flights, providing ratings and optional comments.", "System responds with a valid response"]}, "testcases": [{"name": "Submit a Review", "description": "Users can submit reviews for their recent flights.", "input": {"userId": "123456", "ticketId": "789012", "rating": 4.5, "comment": "Great experience! The flight was on time, and the service was excellent.", "timestamp": "2024-02-04T12:30:00Z"}, "expected": {"outcome": "Review submitted successfully", "status": "201"}}]}, {"usecase": {"name": "Flight Review Viewing System", "scenario": "Users can view reviews for specific flights ", "actors": "Users", "preconditions": "", "steps": ["Users search reviews for specific flight", "System responds with a list fo available reviews"]}, "testcases": [{"name": "View Reviews for a Ticket", "description": "Users can view reviews submitted for a specific flight", "input": {"Flight_Name": "Bangladesh Biman"}, "expected": {"outcome": "List of reviews displayed", "status": "200"}}]}, {"usecase": {"name": "Flight Review Editing System", "scenario": "Users can edit reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users edit reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Edit Reviews for a Flight", "description": "Users can edit reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012", "rating": 4.7, "comment": "Updated comment here!", "timestamp": "2024-02-04T14:00:00Z"}, "expected": {"outcome": "Review edited successfully", "status": "200"}}]}, {"usecase": {"name": "Flight Review Deletion", "scenario": "Users can delete reviews for specific flights ", "actors": "Users", "preconditions": "Users have to have a review of that specific flight", "steps": ["Users delete reviews for specific flights", "System responds with a valid response"]}, "testcases": [{"name": "Delete Reviews for a Flight", "description": "Users can delete reviews submitted for a specific flight", "input": {"userId": "123456", "ticketId": "789012"}, "expected": {"outcome": "Review deleted successfully", "status": "204"}}]}, {"usecase": {"name": "Profile Creation", "scenario": "User creates an account on several social media marketing platform.", "actors": "User, Entrepreneur", "preconditions": "User is not already registered on the platform and has a valid email/phone number.", "steps": ["User provides necessary information for account creation on the platform", "User verifies email/phone number", "User sets up account details (username, password, etc.)"]}, "testcases": [{"name": "Valid Account Creation", "description": "Verify that a user can successfully create an account.", "input": {"username": "john_doe", "email": "john@example.com", "password": "secure_password"}, "expected": {"outcome": "Account created successfully", "status": "Active"}}, {"name": "Invalid Email Verification", "description": "Verify that the system handles the case where the user provides an invalid email for verification.", "input": {"username": "invalid_user", "email": "invalid_email", "password": "weak_password"}, "expected": {"outcome": "Account creation failed", "status": "Inactive"}}]}, {"usecase": {"title": "User Account Creation", "description": "A consumer creates an account on the platform using a valid email and phone number.", "actors": ["Consumer"], "preconditions": ["The platform is accessible.", "The consumer is on the account creation page."], "steps": ["Consumer enters valid email address and phone number.", "Consumer sets a secure password.", "Consumer agrees to terms and conditions.", "Consumer submits the registration form."]}, "testcases": [{"name": "ValidUserAccountCreation", "description": "Test the successful creation of a user account using valid email, phone number, and a secure password.", "input": {"email": "user@example.com", "phone": "1234567890", "password": "SecurePass123"}, "expected": {"success": true, "message": "User account is created successfully. Consumer is redirected to the logged-in state."}}, {"name": "DuplicateEmail", "description": "Test if the system handles a scenario where a user tries to create an account with an email that already exists in the system.", "input": {"email": "existing_user@example.com", "phone": "9876543210", "password": "NewPass456"}, "expected": {"success": false, "message": "System displays an error message indicating that the email is already registered. User account is not created."}}, {"name": "MissingPhoneNumber", "description": "Test if the system handles a scenario where a user tries to create an account without providing a phone number.", "input": {"email": "user@example.com", "password": "PassWithoutPhone"}, "expected": {"success": false, "message": "System displays an error message indicating that the phone number is required. User account is not created."}}, {"name": "TermsAndConditionsAgreement", "description": "Test if the system requires users to agree to terms and conditions during account creation.", "input": {"email": "user@example.com", "phone": "7890123456", "password": "StrongPass789", "agreeToTerms": false}, "expected": {"success": false, "message": "System displays an error message indicating that terms and conditions must be agreed to. User account is not created."}}]}, {"usecase": {"name": "Content Creation and Posting", "scenario": "User creates content and posts it on selected social media platforms.", "actors": "User", "preconditions": "User is logged in and has active social media accounts", "steps": ["User creates promotional content (text, image, video, etc.)", "User specifies the product/service to be promoted and target audience", "User schedules the content for posting (optional)", "User selects social media platforms for posting", "User posts the content"]}, "testcases": [{"name": "Valid Content Posting", "description": "Verify that a user can successfully create and post content on selected social media platforms.", "input": {"content": "Check out our latest product!", "selectedPlatforms": ["Facebook", "Twitter", "Instagram", "LinkedIn"], "schedule": "Wednesday, 10:00 AM"}, "expected": {"outcome": "Content posted successfully", "status": "Published"}}, {"name": "Invalid Content Posting", "description": "Verify that the system handles the case where the user tries to post invalid content or selects unsupported platforms.", "input": {"content": "invalid_content", "selectedPlatforms": ["WhatsApp"], "schedule": null}, "expected": {"outcome": "Content posting failed", "status": "Not Published"}}]}, {"usecase": {"name": "Content Analytics", "scenario": "User views analytics for their posted content on social media platforms.", "actors": "User", "preconditions": "User is logged in and has posted content on selected social media platforms", "steps": ["User navigates to the analytics section", "User selects a specific content or time range", "User views analytics data for engagement, reach, and interactions"]}, "testcases": [{"name": "Content Analytics", "description": "Verify that a user can successfully view analytics for their posted content.", "input": {"selectedContent": "Post123", "timeRange": "Last 7 days"}, "expected": {"outcome": "Content analytics retrieved successfully", "metrics": {"engagement": 1500, "reach": 5000, "interactions": 200}}}, {"name": "Invalid Content Selection", "description": "Verify that the system handles the case where the user selects invalid or non-existent content for analytics.", "input": {"selectedContent": "InvalidPost", "timeRange": "Last 30 days"}, "expected": {"outcome": "Content analytics retrieval failed", "error": "Invalid content selection"}}]}, {"usecase": {"name": "Profile Analytics", "scenario": "User views analytics for their social media profiles connected to the platform.", "actors": "User", "preconditions": "User is logged in and has connected social media accounts", "steps": ["User navigates to the profile analytics section", "User selects a specific social media profile", "User views analytics data for followers, engagement, and growth"]}, "testcases": [{"name": "Profile Analytics", "description": "Verify that a user can successfully view analytics for their connected social media profile.", "input": {"selectedProfile": "Facebook", "timeRange": "Last month"}, "expected": {"outcome": "Profile analytics retrieved successfully", "metrics": {"followers": 10000, "engagementRate": 5.8, "growth": 500}}}, {"name": "Invalid Profile Selection", "description": "Verify that the system handles the case where the user selects an invalid or non-existent social media profile for analytics.", "input": {"selectedProfile": "InvalidProfile", "timeRange": "Last week"}, "expected": {"outcome": "Profile analytics retrieval failed", "error": "Invalid profile selection"}}]}, {"usecase": {"name": "Community Communication", "scenario": "Users within the community (sellers and buyers of similar products) communicate and share information.", "actors": "Seller, Buyer", "preconditions": "Users are logged in and have joined the relevant community", "steps": ["User navigates to the community section", "User selects a specific community related to their product niche", "User posts a message, question, or information within the community", "Other users within the community can view and respond to the post"]}, "testcases": [{"name": "Valid Community Communication", "description": "Verify that users can successfully communicate within the community.", "input": {"selectedCommunity": "Electronics Sellers", "postContent": "Has anyone tried the new XYZ product? Share your experiences!", "responses": ["Yes, I've tried it. It works great!", "No, but I'm interested in learning more.", "I have a similar product, let's collaborate."]}, "expected": {"outcome": "Community communication successful", "interactionCount": 3}}, {"name": "Invalid Community Selection", "description": "Verify that the system handles the case where a user tries to communicate in an invalid or non-existent community.", "input": {"selectedCommunity": "InvalidCommunity", "postContent": "This is an invalid community post."}, "expected": {"outcome": "Community communication failed", "error": "Invalid community selection"}}, {"name": "Empty Post", "description": "Verify that the system handles the case where a user tries to post an empty message within the community.", "input": {"selectedCommunity": "Fashion Enthusiasts", "postContent": ""}, "expected": {"outcome": "Community communication failed", "error": "Empty post content"}}]}, {"usecase": {"name": "Project Showcase", "scenario": "Users can showcase their created projects on our platform through this feature.", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic project details", "User selects the appropriate tags for the post", "User decides whether he/she wants to make the post public/private", "User decides whether he/she wants to make the post it on marketplace", "User adds different types of blocks to the post with necessary details"]}, "testcases": [{"name": "Valid project details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true, "marketplace": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Project Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Portfolio Showcase", "description": "Verify that the public posts are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}, {"name": "Marketplace Visibility", "description": "Verify that the public posts are available on marketplace", "input": {"marketplace": true}, "expected": {"outcome": "Post visible on marketplace", "status": "Success"}}]}, {"usecase": {"name": "Note Taker", "scenario": "Users can create,update and share their notes on our platform through this feature", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters basic notes details", "User selects the appropriate tags for the note", "User decides whether he/she wants to make the post public/private", "User writes note in markdown"]}, "testcases": [{"name": "Valid note details", "description": "Verify if the input provided is valid or not", "input": {"name": "Buldr Bangladesh", "image_link": "IMAGE_LINK", "tags": ["react", "js", "software"], "public": true}, "expected": {"outcome": "Valid details", "status": "Pending Post Blocks"}}, {"name": "Empty Note Details", "description": "Verify that the system handles the case where a user tries to submit an empty project details.", "input": {"name": null}, "expected": {"outcome": "Invalid details", "status": "Rejected"}}, {"name": "Publicize Note", "description": "Verify that the public notes are available on the portfolio", "input": {"public": true}, "expected": {"outcome": "Post visible on portfolio", "status": "Success"}}]}, {"usecase": {"name": "Chatbot Setup", "scenario": "Users can choose different models that they want to chat with", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters chatbot", "User adds documents", "User creates prompts to chat"]}, "testcases": [{"name": "Model not selected", "description": "Verify if the user has selected a model", "input": {"model_name": "gpt-3.5-turbo"}, "expected": {"outcome": "Model loaded", "status": "Success"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}, {"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}]}, {"usecase": {"name": "Profile Details", "scenario": "Users can set and edit their profile details which will be propagated to their portfolios", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters email and password", "User enters full/partial details", "User decides whether he/she wants to edit profile details", "User edits details"]}, "testcases": [{"name": "Empty e-mail/password", "description": "Verify if the user has provided email and password", "input": {"email": "user@gmail.com", "password": "xyz123456"}, "expected": {"outcome": "Successful account creation", "status": "Success"}}, {"name": "Invalid User Details", "description": "Verify that the system handles the case where a user tries to submit an invalid profile information", "input": {"github_link": 123}, "expected": {"outcome": "Invalid input", "status": "Error"}}]}, {"usecase": {"name": "Summarizer inference", "scenario": "Users prompt the plugin with the content they want to summarize", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters summarizer", "User creates prompt to summarize"]}, "testcases": [{"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}]}, {"usecase": {"name": "Paraphraser inference", "scenario": "Users prompt the plugin with the content they want to paraphrase", "actors": "User", "preconditions": "User has created his/her profile on the platform", "steps": ["User enters paraphraser", "User creates prompt to paraphrase"]}, "testcases": [{"name": "Invalid Input", "description": "Verify if the user has given a valid input", "input": {"input": "{Valid text question}"}, "expected": {"outcome": "Invalid input", "status": "Inference Error"}}, {"name": "Token Limit Crossed", "description": "Model stopped due to token count exceeded", "input": {}, "expected": {"outcome": "Invalid ouput", "status": "Generation Error"}}, {"name": "OpenAI Error", "description": "OpenAI token error", "input": {"OPENAI_TOKEN": "{OPENAI_TOKEN}"}, "expected": {"outcome": "Token Error", "status": "Generation Error"}}]}, {"usecase": {"name": "Place Purchase Order Request", "scenario": "Distributor places a purchase order request to the warehouse via the central system", "actors": ["Warehouse", "Distributor", "Central System"], "precondition": "Distributor has enough balance to cover the purchase order value", "steps": [{"step": "(a) Distributor selects his required products for purchase order", "action": "Distributor selects products for the purchase order", "expected_result": "Distributor's selected products are ready for order placement"}, {"step": "(b) After confirmation from Distributor's end, purchase order is sent to the central system", "action": "Distributor confirms the selected products, and the purchase order is forwarded to the central system", "expected_result": "Purchase order is successfully transmitted to the central system"}, {"step": "(c) If requested products are available in the warehouse, confirmation is sent to the corresponding warehouse", "action": "Central system checks product availability and sends confirmation to the warehouse if products are available", "expected_result": "Warehouse receives confirmation and proceeds to check the load fill condition"}, {"step": "(d) Warehouse checks whether the goods in the purchase order satisfy the load fill condition. If the condition is satisfied, the purchase order is approved. If the condition is not satisfied, the purchase order is put on hold for combined orders", "action": "Warehouse evaluates load fill condition for the goods in the purchase order", "expected_result": "Purchase order is approved if load fill condition is satisfied; otherwise, it is put on hold for combined orders"}]}, "testcases": [{"request_body": {"purchase_order_request": {"distributor_id": "D123", "products": [{"product_id": "P001", "quantity": 100}, {"product_id": "P002", "quantity": 50}], "confirmation": true}}, "response_body": {"purchase_order_response": {"status": "success", "message": "Purchase order request successfully received and processed.", "order_details": {"order_id": "PO123", "status": "approved"}}}}, {"request_body": {"purchase_order_request": {"distributor_id": "D123", "products": [{"product_id": "P001", "quantity": -50}, {"product_id": "P002", "quantity": 30}], "confirmation": true}}, "response_body": {"purchase_order_response": {"status": "error", "message": "Invalid request. Quantity must be a positive integer.", "error_details": [{"field": "products[0].quantity", "error_message": "Quantity for product P001 must be a positive integer."}]}}}]}, {"usecase": {"name": "Purchase order to shipment", "description": "Warehouse confirms one or multiple incoming purchase orders, and the central system converts them to a shipment.", "actors": ["Warehouse", "Central System"], "steps": [{"step": "(a) Confirmation or hold status of purchase order is forwarded to central system", "action": "Warehouse forwards confirmation or hold status of the purchase order to the central system", "expected_result": "Central system receives and processes the confirmation or hold status"}, {"step": "(b) Central system checks load fill of pending purchase orders whether they can be combined and processes confirmed purchase orders to create a shipment", "action": "Central system checks load fill of pending purchase orders, combines eligible orders, and processes confirmed purchase orders to create a shipment", "expected_result": "Shipment is created with the combined purchase orders"}, {"step": "(c) Shipments are forwarded to corresponding transport agencies for vehicle confirmation", "action": "Shipment is forwarded to corresponding transport agencies for vehicle confirmation", "expected_result": "Transport agencies confirm the availability of vehicles for the shipments"}]}, "testcases": [{"request_body": {"purchase_orders": [{"order_id": "PO123", "status": "confirmed"}, {"order_id": "PO124", "status": "confirmed"}, {"order_id": "PO125", "status": "on_hold"}]}, "response_body": {"shipment": {"shipment_id": "SH123", "status": "created", "combined_orders": ["PO123", "PO124"]}, "transport_confirmation": {"status": "pending", "details": "Shipment SH123 forwarded to transport agencies for vehicle confirmation"}}}, {"request_body": {"purchase_orders": [{"order_id": "PO123", "status": "confirmed"}, {"order_id": "PO124"}, {"status": "on_hold"}]}, "response_body": {"error": {"code": "400", "message": "Invalid request. Some purchase orders are on hold, and cannot be processed for shipment creation.", "details": [{"order_id": "PO125", "error_message": "Purchase order on hold, cannot be included in the shipment."}]}}}]}, {"usecase": {"name": "Load a shipment to vehicle", "description": "List of products in a shipment is provided to the person in charge. After successful load of all products in a shipment, transport acknowledges that shipment is en route.", "actors": ["Warehouse", "Transport"], "precondition": "A valid shipment with products in stock for warehouse", "steps": [{"step": "(a) Warehouse in-charge receives a list of products to be loaded", "action": "receive_list_of_products", "actor": "Warehouse"}, {"step": "(b) Product status is updated one by one while loading a vehicle", "action": "update_product_status", "actor": "Warehouse"}, {"step": "(c) After loading of shipment, transport acknowledges that he has received the products without any issue", "action": "acknowledge_shipment_en_route", "actor": "Transport"}]}, "testcases": [{"request_body": {"action": "load_shipment_to_vehicle", "shipment_id": "12345", "products": [{"product_id": "P001", "status": "loaded"}, {"product_id": "P002", "status": "loaded"}, {"product_id": "P003", "status": "loaded"}]}, "response_body": {"status": "success", "message": "Shipment successfully loaded to the vehicle. En route acknowledgment sent."}}, {"request_body": {"action": "load_shipment_to_vehicle", "shipment_id": "67890", "products": [{"product_id": "P004", "status": "loaded"}, {"product_id": "P005", "status": "not_in_stock"}, {"product_id": "P006", "status": "loaded"}]}, "response_body": {"status": "error", "message": "Failed to load shipment. Product with ID P005 is not in stock."}}]}, {"usecase": {"name": "Choose the best route for combined town", "description": "Central system has multiple pending purchase orders with tonnage less than loadfill quantity. It has to combine multiple orders to save transport cost.", "actors": ["Central system"], "precondition": "Purchase order contains weight less than loadfill", "steps": [{"step": "(a) Central system lists the destination towns and checks which two towns can be combined", "action": "list_destination_towns", "actor": "Central system"}, {"step": "(b) For each possible combination, it checks which pair incurs less amount of transportation bill", "action": "check_best_combination", "actor": "Central system"}]}, "testcases": [{"request_body": {"action": "choose_best_route", "purchase_orders": [{"order_id": "PO001", "weight": 500, "destination_town": "Town_A"}, {"order_id": "PO002", "weight": 300, "destination_town": "Town_B"}, {"order_id": "PO003", "weight": 200, "destination_town": "Town_C"}]}, "response_body": {"status": "success", "message": "Best route identified. Combined orders for transportation cost savings.", "combined_towns": ["Town_A", "Town_C"]}}, {"request_body": {"action": "choose_best_route", "purchase_orders": [{"order_id": "PO004", "weight": 700, "destination_town": "Town_D"}, {"order_id": "PO005", "weight": 600, "destination_town": "Town_E"}]}, "response_body": {"status": "error", "message": "Unable to find a valid combination. Individual orders exceed loadfill quantity."}}]}, {"usecase": {"name": "Generate sales report", "description": "Sales report can be generated based on various attributes like sales volume, revenue generated by brand or category", "actors": ["Central System", "Distributor"], "precondition": "Distributor has regularly updated its sales quantity and product stock", "steps": [{"step": "(a) Central system requests sales data from distributor", "action": "request_sales_data", "actor": "Central System"}, {"step": "(b) Distributor provides data to generate report", "action": "provide_sales_data", "actor": "Distributor"}, {"step": "(c) Central system generates report according to his preference", "action": "generate_report", "actor": "Central System"}]}, "testcases": [{"request_body": {"action": "generate_sales_report", "attributes": ["sales_volume", "revenue"], "preference": "by_brand", "time_period": "last_month"}, "response_body": {"status": "success", "message": "Sales report generated successfully.", "report_data": {"brandwise_data": {"Brand_A": {"sales_volume": 1500, "revenue": 50000}, "Brand_B": {"sales_volume": 1200, "revenue": 45000}}, "time_period": "last_month"}}}, {"request_body": {"action": "generate_sales_report", "attributes": ["sales_volume", "revenue"], "preference": "by_brand", "time_period": "specific_month", "month": "January"}, "response_body": {"status": "error", "message": "Sales data not available for the requested month.", "error_details": "Distributor does not have sales data for the month of January."}}]}, {"usecase": {"name": "Pet Adoption Process", "scenario": "A user browses through available pets for adoption, selects a pet, and submits an adoption application. The system reviews the application and approves or rejects it based on predefined criteria.", "actors": "Adopter (User), System, PetOwner", "preconditions": "The user is registered and logged into the system. There are pets available for adoption.", "steps": ["User browses available pets.", "User selects a pet and views detailed information.", "User submits an adoption application for the pet.", "System validates the application.", "PetOwner reviews and approves or rejects the application."]}, "testcases": [{"name": "Valid Adoption Application", "description": "Verify that the system accepts a valid adoption application.", "input": {"selectedPet": "Pet1", "applicationDetails": "User provided all necessary information."}, "expected": {"outcome": "Application accepted.", "status": "Pending Review"}}, {"name": "Invalid Adoption Application (Missing Information)", "description": "Verify that the system rejects an adoption application with missing information.", "input": {"selectedPet": "Pet2", "applicationDetails": "User missed some necessary information."}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "PetOwner Approval of Adoption Application", "description": "Verify that the PetOwner can successfully approve a valid adoption application.", "input": {"petOwnerApproval": true, "applicationId": "12345"}, "expected": {"outcome": "Application approved.", "status": "Approved"}}, {"name": "PetOwner Rejection of Adoption Application", "description": "Verify that the PetOwner can reject an adoption application.", "input": {"petOwnerApproval": false, "applicationId": "12345"}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Invalid Adoption Application (False Information)", "description": "Verify that the system handles the case where a user provides false information in the adoption application.", "input": {"selectedPet": "Pet3", "applicationDetails": "User provided false or misleading information."}, "expected": {"outcome": "Application failed.", "status": "Rejected"}}]}, {"usecase": {"name": "Donation Process", "scenario": "A user decides to donate to a cause or a specific pet's care. The user enters donation details and submits the donation. The system confirms the donation and updates the donation status.", "actors": "Donor (User), System", "preconditions": "The user is registered and logged into the system.", "steps": ["User selects a donation cause or a specific pet for donation.", "User enters donation amount and details.", "User submits the donation.", "System processes the donation and updates the donation status."]}, "testcases": [{"name": "Valid Donation Submission", "description": "Verify that the system accepts a valid donation.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 100, "method": "Mobile Banking"}, "expected": {"outcome": "Donation successful.", "status": "Received"}}, {"name": "Zero Donation Amount", "description": "Verify that the system handles the case where a user tries to donate a zero amount.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 0, "method": "Mobile Banking"}, "expected": {"outcome": "Donation failed.", "status": "Rejected"}}, {"name": "Donation to Non-Existent Cause", "description": "Verify that the system handles the case where a user tries to donate to a non-existent cause.", "input": {"selectedCause": "NonExistentCause", "donationAmount": 50}, "expected": {"outcome": "Donation failed.", "status": "Cause Not Found"}}, {"name": "Exceeding Donation Limit", "description": "Verify that the system handles the case where a user tries to donate more than the needed amount for a cause.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 15000}, "expected": {"outcome": "Donation failed.", "status": "Exceeded Needed Amount"}}, {"name": "Donation Confirmation", "description": "Verify that the user receives a confirmation after a successful donation.", "input": {"selectedCause": "Animal Shelter Building", "donationAmount": 100}, "expected": {"outcome": "Donation confirmed.", "status": "Confirmed"}}]}, {"usecase": {"name": "Pet Profile Update", "scenario": "A pet owner or an admin updates the profile of a pet, including details like name, breed, health status, and other pertinent information.", "actors": "Pet Owner, System", "preconditions": "The pet is registered in the system, and the user has the necessary permissions to update the pet's profile.", "steps": ["User selects a pet to update.", "User edits pet details.", "User submits the updated pet profile.", "System validates and saves the updated profile."]}, "testcases": [{"name": "Valid Pet Profile Update", "description": "Verify that the system accepts a valid update to a pet's profile.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update successful.", "status": "Updated"}}, {"name": "Invalid Pet Profile Update (Missing Information)", "description": "Verify that the system rejects a profile update with missing information.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update failed.", "status": "Rejected"}}, {"name": "Unauthorized Profile Update Attempt", "description": "Verify that the system prevents unauthorized users from updating a pet's profile.", "input": {"petId": "Pet123", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}, "userId": "User987"}, "expected": {"outcome": "Profile update failed.", "status": "Unauthorized"}}, {"name": "Update Non-Existent Pet Profile", "description": "Verify that the system handles the case where a user tries to update a non-existent pet's profile.", "input": {"petId": "NonExistentPet", "updatedDetails": {"Name": "Buddy", "Breed": "Golden Retriever", "HealthStatus": "Healthy"}}, "expected": {"outcome": "Profile update failed.", "status": "Pet Not Found"}}]}, {"usecase": {"name": "Rescuer Application Process", "scenario": "A user applies to become a rescuer at the animal shelter. The system reviews the application and approves or rejects it based on predefined criteria.", "actors": "Applicant (User), System, Admin", "preconditions": "The user is registered and logged into the system.", "steps": ["User fills out the rescuer application form.", "User submits the application.", "System validates the application.", "Admin reviews and approves or rejects the application."]}, "testcases": [{"name": "Valid rescuer Application", "description": "Verify that the system accepts a valid rescuer application.", "input": {"applicationDetails": "User provided all necessary information."}, "expected": {"outcome": "Application accepted.", "status": "Pending Review"}}, {"name": "Incomplete rescuer Application", "description": "Verify that the system rejects an incomplete rescuer application.", "input": {"applicationDetails": "User missed some necessary information."}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Admin Approval of rescuer Application", "description": "Verify that the admin can successfully approve a valid rescuer application.", "input": {"adminApproval": true, "applicationId": "12345"}, "expected": {"outcome": "Application approved.", "status": "Approved"}}, {"name": "Admin Rejection of rescuer Application", "description": "Verify that the admin can reject a rescuer application.", "input": {"adminApproval": false, "applicationId": "12345"}, "expected": {"outcome": "Application rejected.", "status": "Rejected"}}, {"name": "Invalid rescuer Application (False Information)", "description": "Verify that the system handles the case where a user provides false information in the rescuer application.", "input": {"applicationDetails": "User provided false or misleading information."}, "expected": {"outcome": "Application failed.", "status": "Rejected"}}]}, {"usecase": {"name": "Pet Health Record Management", "scenario": "A veterinarian updates the health records of pets after check-ups or treatments. The system stores and displays the updated health records.", "actors": "Veterinarian, System", "preconditions": "The pet is registered in the system, and the veterinarian is logged in and assigned to the pet.", "steps": ["Veterinarian selects a pet to update health records.", "Veterinarian enters the details of the check-up or treatment.", "Veterinarian submits the updated health records.", "System stores and confirms the update."]}, "testcases": [{"name": "Valid Health Record Update", "description": "Verify that the system accepts a valid update to a pet's health record.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update successful.", "status": "Updated"}}, {"name": "Incomplete Health Record Update", "description": "Verify that the system rejects an incomplete health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Rejected"}}, {"name": "Incomplete Health Record Update", "description": "Verify that the system rejects an incomplete health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2001-02-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Rejected"}}, {"name": "Unauthorized Veterinarian Attempt", "description": "Verify that the system prevents unauthorized veterinarians from updating a pet's health records.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}, "veterinarianId": "Vet987"}, "expected": {"outcome": "Health record update failed.", "status": "Unauthorized"}}, {"name": "Update Health Record for Non-Existent Pet", "description": "Verify that the system handles the case where a veterinarian tries to update the health record for a non-existent pet.", "input": {"petId": "NonExistentPet", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record update failed.", "status": "Pet Not Found"}}, {"name": "Health Record Update Confirmation", "description": "Verify that the veterinarian receives a confirmation after a successful health record update.", "input": {"petId": "Pet123", "healthRecordDetails": {"CheckUpDate": "2023-03-01", "Notes": "Routine check-up, vaccinations up to date.", "Prescriptions": "None"}}, "expected": {"outcome": "Health record updated and confirmed.", "status": "Confirmed"}}]}, {"usecase": {"name": "User Registration", "scenario": "Farmers, SMEs, or Vendors register in Pushti.", "actors": "Farmers/SMEs/Vendors", "preconditions": "The individual is a Bangladeshi adult citizen and intends to use Pushti for agricultural business activities.", "steps": ["New user selects their account type (Farmer, SME, Vendor).", "If the user is a farmer, they also specify their farmer type.", "User selects their geographic location including division, district, upazila, and union.", "User provides personal and contact information including name, phone number, email, and address.", "User creates a password, confirms it, and sets up their account security.", "User reviews all provided information and submits the registration form."]}, "testcases": [{"name": "Valid Information Submission", "description": "Ensure the system successfully registers a user who provides all required and valid information for account creation.", "input": {"Name": "John Doe", "AccountType": "Farmer", "FarmerType": "Dairy", "Division": "Sylhet", "District": "Moulvibazar", "Upazilla": "Kamalganj", "Union": "Fulpur", "NID": 1234567890, "Phone": "01700000000", "Email": "djohn@gmail.com", "Address": "13/2 Fulpur, Kamalganj, Moulvibazar", "DOB": "01/01/1990", "Password": "123456", "ConfirmPassword": "123456"}, "expected": {"outcome": "Registration successful", "status": "Completed"}}, {"name": "Incomplete Information Submission", "description": "Test if the system appropriately rejects the registration when any required field is left empty or incomplete.", "input": {"Name": "John Doe", "AccountType": "Farmer", "FarmerType": "Dairy", "Division": "Sylhet", "District": "Moulvibazar", "Upazilla": "Kamalganj", "Union": "Fulpur", "NID": "", "Phone": "01700000000", "Email": "djohn@gmail.com", "Address": "13/2 Fulpur, Kamalganj, Moulvibazar", "DOB": "01/01/1990", "Password": "123456", "ConfirmPassword": "123456"}, "expected": {"outcome": "Registration failed", "status": "Incomplete information"}}, {"name": "Duplicate National ID Submission", "description": "Test if the system rejects a registration attempt when the provided National ID (NID) matches an existing user's NID in the system.", "input": {"Name": "Jane Smith", "AccountType": "SME", "Division": "Chittagong", "District": "Cox's Bazar", "Upazilla": "Teknaf", "Union": "Hnila", "NID": 1234567890, "Phone": "01710000000", "Email": "janesmith@gmail.com", "Address": "45/A Hnila, Teknaf, Cox's Bazar", "DOB": "02/02/1990", "Password": "654321", "ConfirmPassword": "654321"}, "expected": {"outcome": "Registration failed", "status": "Duplicate NID"}}, {"name": "Invalid Email Format Submission", "description": "Ensure the system denies registration when the email provided does not match standard email formatting.", "input": {"Name": "Alice Johnson", "AccountType": "Vendor", "Division": "Khulna", "District": "Satkhira", "Upazilla": "Shyamnagar", "Union": "Padmapukur", "NID": 9876543210, "Phone": "01720000000", "Email": "alice.johnsonatgmail.com", "Address": "98/B Padmapukur, Shyamnagar, Satkhira", "DOB": "03/03/1985", "Password": "789123", "ConfirmPassword": "789123"}, "expected": {"outcome": "Registration failed", "status": "Invalid email format"}}, {"name": "Password and Confirm Password Mismatch", "description": "Verify that the system prevents registration if the 'Password' and 'Confirm Password' fields do not match.", "input": {"Name": "Omar Faruk", "AccountType": "Farmer", "Division": "Barisal", "District": "Bhola", "Upazilla": "Borhanuddin", "Union": "Bapta", "NID": 4567891230, "Phone": "01730000000", "Email": "omarfaruk@example.com", "Address": "12/C Bapta, Borhanuddin, Bhola", "DOB": "04/04/1988", "Password": "123abc", "ConfirmPassword": "abc123"}, "expected": {"outcome": "Registration failed", "status": "Password fields mismatch"}}]}, {"usecase": {"name": "Loan Application", "scenario": "The scenario involves a Farmer or Small and Medium-sized Enterprise (SME) applying for a loan.", "actors": "Farmer or SME.", "preconditions": "The Farmer or SME is registered under an Agent.", "steps": ["The Farmer or SME logs into the system and submits a loan application.", "The system processes the loan application."]}, "testcases": [{"name": "Valid Loan Application", "description": "Verify that a Farmer or SME can successfully apply for a loan.", "input": {"min": 4000, "max": 5000, "description": "The requested loan is for the purchase of new cows."}, "expected": {"outcome": "The loan application is successful.", "loanStatus": "Pending"}}, {"name": "Loan Application with Empty Description", "description": "Verify that the system handles a loan application with an empty description appropriately.", "input": {"min": 4000, "max": 5000, "description": ""}, "expected": {"outcome": "The loan application failed", "status": "Empty description"}}, {"name": "Loan Application with Negative Loan Amount", "description": "Verify that the system handles a loan application with a negative loan amount appropriately.", "input": {"min": -4000, "max": 5000, "description": "The loan is needed for equipment purchase."}, "expected": {"outcome": "The loan application is rejected due to invalid input.", "status": "Negative loan amount"}}, {"name": "Loan Application with Special Characters in Description", "description": "Verify that the system handles a loan application with special characters in the description field appropriately.", "input": {"min": 4000, "max": 5000, "description": "Loan for @#$% project"}, "expected": {"outcome": "The loan application is rejected due to invalid input.", "status": "Special characters in description"}}]}, {"usecase": {"name": "Loan Approval Process", "scenario": "An agent reviews and makes a decision on loan applications submitted by registered farmers or SMEs.", "actors": "Agent", "preconditions": "A loan application has been submitted by a farmer or SME who is registered under the agent.", "steps": ["Agent accesses the system and reviews the list of pending loan requests.", "Agent evaluates the loan request considering the applicant's details and the requested amount.", "Based on the assessment and available budget, the agent either approves or rejects the loan."]}, "testcases": [{"name": "Successful Loan Approval", "description": "Test to confirm that an agent can approve a loan request when the requested amount is within the permissible limits and aligns with the applicant's profile.", "input": {"loan_id": 10, "approvedAmount": 5000}, "expected": {"outcome": "Loan approval successful", "status": "Approved"}}, {"name": "Loan Application Rejection", "description": "Evaluate the agent's ability to reject a loan application based on criteria such as insufficient documentation or unsatisfactory credit history.", "input": {"loan_id": 10}, "expected": {"outcome": "Loan rejection successful", "status": "Rejected"}}, {"name": "Loan Approval Budget Limitation", "description": "Assess the system's functionality to prevent loan approval if the requested amount exceeds the available budget.", "input": {"loan_id": 10, "approvedAmount": 50000}, "expected": {"outcome": "Loan approval failed", "status": "Rejected - Budget Limitation"}}]}, {"usecase": {"name": "Buy Request and Approval", "scenario": "An agent generates a buy request for products, which is then reviewed and approved or rejected by the farmer or SME.", "actors": "Agent, Farmer/SME", "preconditions": "The farmer or SME is registered under the agent and has products available for sale.", "steps": ["Agent assesses the available products and inputs their details along with the desired quantities.", "Agent generates and sends a buy request to the farmer or SME.", "Farmer or SME reviews the buy request and either approves or rejects it."]}, "testcases": [{"name": "Successful Buy Request Approval", "description": "Ensure that an agent can generate a valid buy request and that it can be successfully approved by the farmer or SME.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 10}]}, "expected": {"outcome": "Buy request approved", "status": "Approved"}}, {"name": "Rejected Buy Request", "description": "Test the functionality where a farmer or SME can reject a buy request generated by the agent.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 2}]}, "expected": {"outcome": "Buy request rejected", "status": "Rejected"}}, {"name": "Buy Request Exceeds Budget", "description": "Verify if the system appropriately handles scenarios where the total cost of the buy request exceeds the available budget of the agent.", "input": {"agent_id": 987654321, "farmer_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 50}, {"product_id": 24, "name": "Beef", "quantity": 30}]}, "expected": {"outcome": "Buy request denied", "status": "Denied - Exceeds budget"}}]}, {"usecase": {"name": "Sell Request and Approval", "scenario": "An agent creates a sell request for products, which is then reviewed and either approved or rejected by the vendor or SME.", "actors": "Agent/Vendor/SME", "preconditions": "The vendor or SME is registered under the agent and is interested in purchasing products from the agent.", "steps": ["Agent compiles a list of items available for sale along with their quantities.", "Agent formally generates a sell request and sends it to the vendor or SME.", "Vendor or SME reviews the sell request and decides to approve or reject it."]}, "testcases": [{"name": "Successful Sell Request Approval", "description": "Confirm that an agent can generate a valid sell request and that it is successfully approved by the vendor or SME.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 10}]}, "expected": {"outcome": "Sell request approved", "status": "Completed"}}, {"name": "Rejected Sell Request", "description": "Evaluate if a vendor or SME can effectively reject a sell request generated by the agent.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 24, "name": "Beef", "quantity": 2}]}, "expected": {"outcome": "Sell request rejected", "status": "Rejected"}}, {"name": "Insufficient Inventory for Sell Request", "description": "Verify the system's response when the sell request contains a quantity that exceeds the agent's available inventory.", "input": {"agent_id": 987654321, "vendor_id": 123456789, "products": [{"product_id": 23, "name": "Milk", "quantity": 10}, {"product_id": 100, "name": "Beef", "quantity": 200}]}, "expected": {"outcome": "Sell request denied", "status": "Denied - Insufficient inventory"}}]}, {"usecase": {"name": "New Product Addition Process", "scenario": "An administrative user adds a new product to the system's inventory.", "actors": "Admin", "preconditions": "Admin has the necessary privileges to add new products.", "steps": ["Admin logs into the system with appropriate credentials.", "Admin navigates to the product management section.", "Admin inputs the details of the new product and submits the information."]}, "testcases": [{"name": "Successful New Product Addition", "description": "Confirm that an admin can successfully add a new product to the system, provided that the product does not already exist in the inventory.", "input": {"productName": "Milk", "unitPrice": 50, "taxPercentage": 3}, "expected": {"outcome": "Product addition successful", "status": "Added"}}, {"name": "Duplicate Product Addition Prevention", "description": "Test the system's capability to prevent the addition of a product that already exists in the inventory to avoid duplication.", "input": {"productName": "Milk", "unitPrice": 50, "taxPercentage": 3}, "expected": {"outcome": "Product addition failed", "status": "Duplicate - Product already exists"}}, {"name": "Product Addition with Incomplete Details", "description": "Assess the system's response when attempting to add a new product with incomplete or missing details.", "input": {"productName": "Butter", "unitPrice": null, "taxPercentage": 5}, "expected": {"outcome": "Product addition failed", "status": "Failed - Incomplete product details"}}]}, {"usecase": {"name": "Buy Plant", "scenario": "A user wants to buy a plant from an online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user has access to the online plant store.", "The user is logged into their account."], "steps": ["The user navigates through the plant catalog to explore available plants.", "The user selects a specific plant they wish to purchase.", "The user adds the selected plant to their shopping cart.", "The user reviews the contents of their shopping cart, ensuring it includes the desired plant.", "The user proceeds to the checkout process.", "The user enters the required shipping information, such as address and contact details.", "The user selects a preferred payment method (e.g., credit card, bKash, cash on delivery).", "The user completes the purchase by confirming the order and making the payment.", "The user receives an order confirmation with details of the purchased plant and the transaction."]}, "testcases": [{"name": "Valid Plant Selection", "description": "Verify that a user can successfully select and buy a plant.", "input": {"selectedPlant": "RubyLime"}, "expected": {"outcome": "Order successful", "status": "Processing"}}, {"name": "Empty Cart Handling", "description": "Verify that the system handles the case where a user tries to submit an empty cart.", "input": {"selectedPlant": null}, "expected": {"outcome": "Order failed", "status": "Failed"}}, {"name": "Payment Authorization", "description": "Verify that the user's payment method is properly authorized.", "input": {"selectedPlant": "RubyLime", "paymentMethod": "bKash"}, "expected": {"outcome": "Payment authorized", "status": "Payment Authorized"}}, {"name": "Order Confirmation Email", "description": "Verify that the user receives an order confirmation email after completing the purchase.", "input": {"selectedPlant": "RubyLime", "paymentMethod": "bKash"}, "expected": {"outcome": "User receives an order confirmation email", "status": "Processing"}}]}, {"usecase": {"name": "Add Plant", "scenario": "An admin wants to add a new plant to the online plant store.", "actors": ["Admin", "Plant Store"], "preconditions": ["The admin has access to the admin panel of the online plant store.", "The admin is logged into their admin account."], "steps": ["The admin navigates to the plant management section in the admin panel.", "The admin selects the option to add a new plant.", "The admin provides details of the new plant, such as name, description, price, and stock quantity.", "The admin uploads images of the plant for display in the store.", "The admin specifies the category or tags associated with the plant for better organization.", "The admin reviews the entered information to ensure accuracy.", "The admin submits the new plant details for addition to the plant catalog.", "The admin receives a confirmation message indicating that the plant has been successfully added."]}, "testcases": [{"name": "Valid Plant Addition", "description": "Verify that an admin can successfully add a new plant to the catalog.", "input": {"newPlantDetails": {"name": "Sun Cactus", "description": "Beautiful cactus with vibrant colors.", "price": 19.99, "stock": 50, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Plant addition successful", "status": "Confirmed"}}, {"name": "Incomplete Plant Details", "description": "Verify that the system handles the case where an admin tries to add a plant with incomplete details.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Cactus with no specified price and stock."}}, "expected": {"outcome": "Plant addition failed", "status": "Failed"}}, {"name": "Image Upload", "description": "Verify that the admin can successfully upload images of the new plant.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Resilient and drought-resistant, Moon Cactus thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "stock": 30, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Image upload successful", "status": "Images Uploaded"}}, {"name": "Confirmation Message", "description": "Verify that the admin receives a confirmation message after adding the new plant.", "input": {"newPlantDetails": {"name": "Moon Cactus", "description": "Resilient and drought-resistant, Moon Cactus thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "stock": 40, "images": ["cactus_image1.jpg", "cactus_image2.jpg"], "category": "Cactus", "tags": ["Cactus", "Thorny", "Hybrid"]}}, "expected": {"outcome": "Admin receives confirmation message", "status": "Confirmed"}}]}, {"usecase": {"name": "Sell Plant", "scenario": "A user wants to sell a plant through the online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user has an active account on the online plant store.", "The user is logged into their account."], "steps": ["The user navigates to the 'Sell Plant' section in their profile.", "The user provides details of the plant they want to sell, such as name, description, and price.", "The user uploads images of the plant for display in the store.", "The user specifies the category associated with the plant for better organization.", "The user reviews the entered information to ensure accuracy.", "The user submits the plant details for listing in the online store.", "The user receives a confirmation message indicating that the plant has been successfully listed for approval from admin."]}, "testcases": [{"name": "Valid Plant Listing for approval", "description": "Verify that a user can successfully initiate a plant sale request.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 14.99, "images": ["succulent_image1.jpg", "succulent_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Indoor"]}}, "expected": {"outcome": "Plant request successful", "status": "Listed"}}, {"name": "Incomplete Plant Details", "description": "Verify that the system handles the case where a user tries to request a plant with incomplete details.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Bonsai with no specified price."}}, "expected": {"outcome": "Plant request failed", "status": "Failed"}}, {"name": "Image Upload", "description": "Verify that the user can successfully upload images of the plant for sale.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "images": ["bonsai_image1.jpg", "bonsai_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Outdoor"]}}, "expected": {"outcome": "Image upload successful", "status": "Images Uploaded"}}, {"name": "Confirmation Message", "description": "Verify that the user receives a confirmation message after listing the plant for sale.", "input": {"plantDetails": {"name": "Bronzestone", "description": "Resilient and drought-resistant, Bronzestone thrives on neglect, adding a touch of untamed beauty to your home.", "price": 19.99, "images": ["bonsai_image1.jpg", "bonsai_image2.jpg"], "category": "Bonsai", "tags": ["Bonsai", "Small", "Indoor"]}}, "expected": {"outcome": "User receives confirmation message", "status": "Listed for approval"}}]}, {"usecase": {"name": "Approve Plant Selling Request", "scenario": "An admin needs to review and approve a user's request to sell a plant on the online plant store.", "actors": ["Admin", "Plant Store"], "preconditions": ["The admin has access to the admin panel of the online plant store.", "A user has submitted a request to sell a plant."], "steps": ["The admin logs into the admin panel.", "The admin navigates to the 'Pending Requests' section.", "The admin views details of the pending plant selling request, including plant information and user details.", "The admin reviews the uploaded images of the plant.", "The admin evaluates the completeness and accuracy of the information provided by the user.", "The admin decides whether to approve or reject the plant selling request.", "If approved, the plant is listed in the online store; if rejected, the user is notified of the decision."]}, "testcases": [{"name": "Approve Plant Selling Request", "description": "Verify that the admin can successfully approve a user's request to sell a plant.", "input": {"requestDetails": {"user": "john_doe@example.com", "plantDetails": {"name": "Spider Plant", "description": "Spider plant with hanging clusters of baby plants.", "price": 12.99, "images": ["spider_plant_image1.jpg", "spider_plant_image2.jpg"], "category": "Indoor", "tags": ["Spider Plant", "Hanging", "Indoor"]}}}, "expected": {"outcome": "Request approval successful", "status": "Approved"}}, {"name": "Reject Plant Selling Request", "description": "Verify that the admin can successfully reject a user's request to sell a plant.", "input": {"requestDetails": {"user": "jane_smith@example.com", "plantDetails": {"name": "Bamboo Plant", "description": "Bamboo plant known for its fast growth.", "price": 15.99, "images": ["bamboo_plant_image1.jpg", "bamboo_plant_image2.jpg"], "category": "Outdoor Plants", "tags": ["Bamboo Plant", "Fast-growing", "Outdoor"]}}}, "expected": {"outcome": "Request rejection successful", "status": "Rejected"}}, {"name": "Incomplete Information", "description": "Verify that the admin can handle the case where the user's request has incomplete information.", "input": {"requestDetails": {"user": "mary_jones@example.com", "plantDetails": {"name": "Hazlemount", "description": "Hazlemount with no specified price."}}}, "expected": {"outcome": "Request rejection due to incomplete information", "status": "Rejected"}}]}, {"usecase": {"name": "Place Bid on a Plant", "scenario": "A user wants to participate in a bidding process for a specific plant available on the online plant store.", "actors": ["User", "Plant Store"], "preconditions": ["The user is registered and logged into their account.", "The online plant store is conducting a bidding event for the specified plant."], "steps": ["The user navigates to the 'Bidding Events' section of the online plant store.", "The user selects the plant for which they want to place a bid.", "The user views detailed information about the selected plant, including images and current highest bid.", "The user enters their bid amount in the provided input field.", "The user submits the bid for review.", "The system validates the bid amount and ensures it meets the minimum bid increment criteria.", "If the bid is valid, it is recorded, and the user is notified of the successful bid placement; if not, the user is notified of the error.", "The user can view their placed bids and the status of each bid in their account."]}, "testcases": [{"name": "Place Valid Bid", "description": "Verify that the user can successfully place a valid bid on a specific plant.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 20.5}, "expected": {"outcome": "Bid placement successful", "status": "Valid Bid"}}, {"name": "Place Invalid Bid (Below Minimum Increment)", "description": "Verify that the system rejects a bid that does not meet the minimum bid increment criteria.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 5.0}, "expected": {"outcome": "Bid placement failed", "status": "Invalid Bid (Below Minimum Increment)"}}, {"name": "Place Invalid Bid (Equal to Current Highest Bid)", "description": "Verify that the system rejects a bid that is equal to the current highest bid.", "input": {"selectedPlant": "Hazlemount", "bidAmount": 20.5}, "expected": {"outcome": "Bid placement failed", "status": "Invalid Bid (Equal to Current Highest Bid)"}}, {"name": "View Placed Bids", "description": "Verify that the user can view their placed bids and the status of each bid in their account.", "input": {}, "expected": {"outcome": "Viewing placed bids successful", "status": "Bids Displayed"}}]}, {"usecase": {"name": "Property Search with Selected Criteria", "scenario": "Users can search for properties based on various filters such as location, price range, beds and baths, perks.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Search' option on the website", "User inputs the search criteria: location, price range, beds and baths, perks", "System retrieves the properties from database that match the search criteria", "System displays the properties to the user"]}, "testcases": [{"name": "Search with Valid Results", "description": "User inputs valid search criteria and gets valid results", "input": {"search_criteria": ["location: Dhaka", "price range: 500,000 - 1,000,000", "beds: 3", "baths: 2", "perks: pool, mosque"]}, "expected": {"outcome": "Valid search results displayed", "status": "Success"}}, {"name": "Search with No Results", "description": "User inputs valid search criteria but gets no results. No property in the database match the criteria", "input": {"search_criteria": ["location: Dhaka", "price range: 50,000 - 100,000", "beds: 3", "baths: 6", "perks: park, mosque"]}, "expected": {"outcome": "No search results displayed", "status": "Failed"}}]}, {"usecase": {"name": "Posting Property for Rent or Sell", "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.", "actors": "User, System, Agent", "preconditions": "User is logged in", "steps": ["The user selects the 'Sell/Rent' option", "The user fills in property details (e.g., location, price, for rent/sell, contact information, photos)", "User submits the property for validation", "Agent validates the property and approves the listing", "System displays the property to the users"]}, "testcases": [{"name": "Post Valid Property for Rent", "description": "User posts a valid property for rent", "input": {"property info": ["location: Dhaka", "price: 50,000", "for: rent", "contact: 017xxxxxxxx", "email : abc@gmail.com", "photos: 3"]}, "expected": {"outcome": "Property approved by agent and posted for rent", "status": "Success"}}, {"name": "Post Invalid Property for Sell", "description": "User posts an invalid property for sell", "input": {"property info": ["location: afhweuhu", "price: 50,000", "for: sell", "contact: 017xxxxxxxx", "email :"]}, "expected": {"outcome": "Invalid location, property not approved", "status": "Failed"}}]}, {"usecase": {"name": "Post a Blog", "scenario": "Users can post blogs about real estate, sharing their experiences, tips, and advice.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Create Post' option", "The user fills in the blog details: title, content, photos", "User presses the 'Post' button", "System displays the blog to the users"]}, "testcases": [{"name": "Post a Blog with Title and Content", "description": "User posts a blog with title and content", "input": {"blog info": ["title: New buyer in town", "content: Hello, I'm a new buyer in town and I'm looking for a house. Any suggestions?"]}, "expected": {"outcome": "Blog posted successfully", "status": "Success"}}, {"name": "Post a Blog with No Title", "description": "User tries to post a blog with no title", "input": {"blog info": ["title: ", "content: Hello, I'm a new buyer in town and I'm looking for a house. Any suggestions?"]}, "expected": {"outcome": "Blog not posted, 'title is required' warning displayed", "status": "Failed"}}]}, {"usecase": {"name": "Messaging System", "scenario": "Buyers and sellers or renters and landlords can communicate with each other through the messaging system.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Send message' option", "The user fills in the message details: recipient, subject, content", "User presses the 'Send' button", "System delivers the message to the recipient", "Recipient receives the message and can reply"]}, "testcases": [{"name": "Send successful message", "description": "User sends a message to another user", "input": {"message info": ["recipient: user123", "subject: Property no #46034 Inquiry", "content: Hi, I'm interested in your property. Can we discuss further?"]}, "expected": {"outcome": "Message sent successfully", "status": "Success"}}, {"name": "Send message with no recipient", "description": "User tries to send a message without specifying a recipient", "input": {"message info": ["recipient: ", "subject: Property no #46034 Inquiry", "content: Hi, I'm interested in your property. Can we discuss further?"]}, "expected": {"outcome": "Message not sent, 'recipient is required' warning displayed", "status": "Failed"}}]}, {"usecase": {"name": "User Profile Management", "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.", "actors": "User, System", "preconditions": "User is logged in", "steps": ["The user selects the 'Profile' option", "The user can update personal information, change password, view activity history, wishlist", "User presses the 'Save' button", "System updates the user profile"]}, "testcases": [{"name": "Change Password", "description": "User changes their password", "input": {"password": ["old password: abc123", "new password: neha124", "confirm password: neha124"]}, "expected": {"outcome": "Password changed successfully", "status": "Success"}}, {"name": "Update Profile with Invalid Email", "description": "User tries to update their profile with an invalid email", "input": {"profile info": ["name: Neha", "email: neha", "phone: 017xxxxxxxx"]}, "expected": {"outcome": "Invalid email, profile not updated", "status": "Failed"}}]}, {"usecase": {"name": "Recipe Upload", "scenario": "Registered user can update the recipe", "actors": "User", "preconditions": "The user must be registered", "steps": ["User updates the form for the recipe update", "User submits the recipe form", "The recipe can be seen now from my_recipe section"]}, "testcases": [{"name": "Valid Recipe Upload", "description": "Verify that the recipe upload successful", "input": {"title": "Pasta with Creamy Tomato Sauce", "cooking_time": "30", "difficulty_level": "easy", "ingredients": [{"amount": 1, "unit": "box", "ingredient": "pasta"}, {"amount": 2, "unit": "cans", "ingredient": "diced tomatoes"}], "tags": ["pasta", "tomato", "snack", "lunch", "easy", "beginners", "vegetarian"], "meal_type": "breakfast", "image": null, "video": null, "steps": [{"order": 1, "step": "Cook the pasta according to package directions.", "image": null}, {"order": 2, "step": "Heat olive oil in a pan over medium heat. Add garlic and cook until fragrant.", "image": null}]}, "expected": {"outcome": "Recipe Upload successful", "status": "Success"}}, {"name": "Recipe with no steps", "description": "If the user tries to upload a recipe with no steps", "input": {"title": "Pasta with Creamy Tomato Sauce", "cooking_time": "30", "difficulty_level": "easy", "ingredients": [{"amount": 1, "unit": "box", "ingredient": "pasta"}, {"amount": 2, "unit": "cans", "ingredient": "diced tomatoes"}], "tags": ["pasta", "tomato", "snack", "lunch", "easy", "beginners", "vegetarian"], "meal_type": "breakfast", "image": null, "video": null, "steps": []}, "expected": {"outcome": "Upload failed: No steps provided", "status": "Error"}}]}, {"usecase": {"name": "Upload Blog", "scenario": "Registered users want to upload a blog", "actors": "User", "preconditions": "The user is registered and logged into the platform.", "steps": ["User selects 'Upload Blog' from the profile menu.", "User creates and drafts the content of the blog.", "User adds a title, description, and any relevant media (images, videos) to the blog.", "User specifies relevant tags for the blog.", "User initiates the upload process."]}, "testcases": [{"name": "Valid Blog Upload", "description": "Verify that a user can successfully upload a blog with valid content.", "input": {"title": "The Art of Cooking", "summary": "Lorem ipsum dolor...", "steps": "Lorem ipsum dolor sit amet, consectetur", "image": "https://firebasestorage.googleapis.com/v0/b/recipe\u2026=media&token=c8f1bf3b-917f-44ad-a6d0-1aa80a228938", "tags": ["Olive Oil", "Food", "Healthy recipe"]}, "expected": {"outcome": "Blog upload successful", "visibility": "Visible to other users"}}, {"name": "Empty Blog Upload", "description": "Verify that the system handles the case where a user tries to upload an empty blog.", "input": {"title": "", "summary": "Lorem ipsum dolor...", "steps": "", "image": "", "tags": []}, "expected": {"outcome": "Blog upload failed", "prompt": "System prompts the user to provide valid content"}}, {"name": "Draft Mode", "description": "Verify that a user can save a blog as a draft without publishing it immediately.", "input": {"title": "Drafting Ideas", "summary": "Lorem ipsum dolor...", "steps": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus...", "tags": ["diet", "healthy", "Vegetarian"], "draftMode": true}, "expected": {"outcome": "Blog saved as draft", "action": "User can continue editing and publish later"}}]}, {"usecase": {"name": "Recipe from Photo", "scenario": "User takes a photo of a food item, uploads it to the system, and receives a list of recipes based on the identified ingredients.", "actors": "User", "preconditions": "User is logged in to the platform.", "steps": ["User takes a photo of a food item", "User uploads the photo to the system", "System identifies ingredients using Clarifai Food Item Recognition", "System retrieves recipes using Spoonacular API based on identified ingredients", "User views a list of recommended recipes"]}, "testcases": [{"name": "Valid Photo Upload", "description": "Verify that the system successfully processes a valid photo upload and provides accurate recipe recommendations.", "input": {"url": "https://example.com/food-photo.jpg"}, "expected": {"outcome": "Recipe recommendations displayed", "accuracy": "Ingredients accurately identified", "userPrompt": "User can view and choose recipes from the list"}}, {"name": "Empty Photo Upload", "description": "Verify that the system handles the case where the user tries to upload an empty or non-identifiable photo.", "input": {"url": ""}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user to upload a clear photo of a food item"}}, {"name": "Invalid Photo Format", "description": "Verify that the system handles the case where the user uploads a photo in an unsupported format.", "input": {"url": "https://example.com/invalid-format.doc"}, "expected": {"outcome": "Invalid photo format", "userPrompt": "System prompts the user to upload a photo in a supported format (e.g., JPEG, PNG)"}}, {"name": "No Identified Ingredients", "description": "Verify that the system handles the case where no ingredients are identified from the uploaded photo.", "input": {"url": "https://example.com/no-ingredients.jpg"}, "expected": {"outcome": "No identified ingredients", "userPrompt": "System prompts the user to upload a clear photo of a food item with recognizable ingredients"}}]}, {"usecase": {"name": "Recipe from Ingredients", "scenario": "User provides a list of ingredients, and the system returns a list of recipes that can be created using those ingredients.", "actors": "User", "preconditions": "User is logged to the platform.", "steps": ["User enters a list of ingredients", "System retrieves recipes using Spoonacular API based on provided ingredients", "User views a list of recommended recipes"]}, "testcases": [{"name": "Valid Ingredients", "description": "Verify that the system successfully processes a valid list of ingredients and provides accurate recipe recommendations.", "input": {"ingredients": ["chicken", "broccoli", "soy sauce", "garlic", "ginger"]}, "expected": {"outcome": "Recipe recommendations displayed", "accuracy": "Recipes include provided ingredients", "userPrompt": "User can view and choose recipes from the list"}}, {"name": "Empty Ingredients", "description": "Verify that the system handles the case where the user submits an empty list of ingredients.", "input": {"ingredients": []}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user to enter ingredients to find recipes"}}, {"name": "Invalid Ingredients", "description": "Verify that the system handles the case where the user enters invalid or non-existent ingredients.", "input": {"ingredients": ["xyz meat", "dust"]}, "expected": {"outcome": "No recipes found", "userPrompt": "System prompts the user that entered ingredients are not recognized"}}]}, {"usecase": {"name": "Meal Plan as per Calorie Intake", "scenario": "User provides their details and calorie target. The system generates a meal plan based on the user's calorie requirements.", "actors": "User", "preconditions": "User is logged in and has access to the Meal Plan as per Calorie Intake feature.", "steps": ["User enters personal details (age, gender, height, weight) and calorie target", "System calculates the daily calorie requirement using a calorie calculator API", "System generates a meal plan using Spoonacular API based on the user's calorie target and preferences", "User views the recommended meal plan"]}, "testcases": [{"name": "Valid Calorie Intake", "description": "Verify that the system successfully calculates and generates a meal plan based on a valid calorie target and user details.", "input": {"age": 30, "gender": "female", "height": 160, "weight": 60, "level": "level_3", "timeFrame": "day", "targetCalories": 1800, "diet": "vegetarian", "exclude": ["shellfish", "nuts"]}, "expected": {"outcome": "Meal plan generated successfully", "userPrompt": "User can view and follow the recommended meal plan"}}, {"name": "Invalid Calorie Intake", "description": "Verify that the system handles the case where the user enters an unrealistic or invalid calorie target.", "input": {"age": 25, "gender": "male", "height": 180, "weight": 70, "level": "level_2", "timeFrame": "day", "targetCalories": 500, "diet": "paleo", "exclude": ["dairy"]}, "expected": {"outcome": "Calorie target too low", "userPrompt": "System prompts the user to enter a realistic calorie target"}}, {"name": "API Error Handling", "description": "Verify that the system gracefully handles errors from external APIs (calorie calculator and Spoonacular).", "input": {"age": 40, "gender": "female", "height": 170, "weight": 65, "level": "level_4", "timeFrame": "day", "targetCalories": 2000, "diet": "vegan", "exclude": ["gluten"]}, "expected": {"outcome": "Error handling", "userPrompt": "System displays a friendly error message and guides the user to retry"}}]}, {"usecase": {"name": "Registration", "scenario": "When a user wants to sign up our website", "actors": "User , Admin", "steps": ["users have to submit a form mentioning unique email,password,name,photo,phone,role,gender and birth type", "admin cross check these infos and give a activation of that user"]}, "testcases": [{"name": "valid registration", "description": "varify that user successfully register to the website ", "input": {"email": "have to give a unique email", "password": "have to give a strong password with at least 6 character", "name": "name is also required", "photo": "Photo of the user have required", "phone": "Have to give a phone number", "role": ["Doctor", "Patient"]}, "expected": {"outcome": "registration is successfully completed", "status": "approved"}}, {"name": "invalid Registration", "description": "varify that user gives all the required information to the website properly ", "expected": {"outcome": "Registration Failed", "status": "Rejected"}}, {"name": "Admin approval", "description": "varify that admin can successfully approves a user registration", "input": {"adminApproval": "true"}, "expected": {"outcome": "Registration Approved", "status": "approved"}}, {"name": "Admin rejection", "description": "varify that admin can reject a user registration", "input": {"adminApproval": "false"}, "expected": {"outcome": "Registration rejected", "status": "rejected"}}]}, {"usecase": {"name": "login", "scenario": "When a user wants to login to the website ", "actors": "User", "steps": ["user have to give email , password and role"]}, "testcases": [{"name": "Valid Log in", "description": "varify that user successfully log in to the website ", "input": {"Credentials": {"Email": "valid Email", "password": "valid Password", "Role": "Doctor, User, Admin"}}, "expected": {"outcome": "Successful Log in", "status": "Log in approved"}}, {"name": "invalid Log in", "description": "varify that user gives proper log in information ", "expected": {"outcome": "Unsuccessful Log in", "status": "Log in failed"}}]}, {"usecase": {"name": "find a doctor", "description": "User can search for doctors, analyze their ratings,reviews etc", "actors": "User", "steps": ["User have to go find a doctor page.", "User can filter doctor by their specialization , slot availability , fee  and reviews", "User can serach for doctors by their names"]}, "testcases": [{"name": "specialization filter successfull", "scenario": "When a user filter doctors by their specialization", "expected": {"outcome": "specialized doctors info"}}, {"name": "fee filter successfull", "scenario": "When a user filter doctors by their fee", "expected": {"outcome": "filtered doctors info"}}, {"name": "slot availability filter successfull", "scenario": "When a user filter doctors by their slot availabity", "expected": {"outcome": "filtered doctors info"}}, {"name": "review filter successfull", "scenario": "When a user filter doctors by their review", "expected": {"outcome": "filtered doctors info"}}, {"name": "search by name successfull", "scenario": "When a user search doctors by their name", "expected": {"outcome": "specific doctors info"}}]}, {"usecase": {"name": "Medishop", "description": "User can see vairous types of medicine and appropiate medicine for  appropiate deseases", "steps": ["User have to go medishop page."]}, "testcases": [{"name": "Medishop page successfull", "scenario": "When a user go to medishop page", "expected": {"outcome": "medishop page"}}]}, {"usecase": {"name": "Appoinment Creation", "description": "When a user create appointment.", "actors": "User , doctors", "steps": ["Users have to go create appioint page", "He/She has to fix slot,name,address, fee", "User submits the form and doctor approves it"]}, "testcases": [{"name": "appointment successfull", "scenario": "varify that user can successfully create an appointment.", "input": {"name": "Have to submit user name", "Phone Number": "have to give user phone number", "slot": "have to give desired slot"}, "expected": {"outcome": "Apointment successfull", "status": "appointment complete"}}]}, {"usecase": {"name": "MediLab", "description": "User can search for labtest, analyze their ratings,reviews etc", "actors": "User", "steps": ["User have to go MediLab page.", "User can filter Lab by their specialization , slot availability , fee  and reviews", "User can serach for Lab by their names"]}, "testcases": [{"name": "specialization filter successfull", "scenario": "When a user filter lab by their specialization", "expected": {"outcome": "specialized lab test info"}}, {"name": "fee filter successfull", "scenario": "When a user filter lab test by their fee", "expected": {"outcome": "filtered lab test info"}}, {"name": "slot availability filter successfull", "scenario": "When a user filter Lab by their slot availabity", "expected": {"outcome": "filtered lab info"}}, {"name": "review filter successfull", "scenario": "When a user filter lab test by their review", "expected": {"outcome": "filtered doctors info"}}, {"name": "search by name successfull", "scenario": "When a user search lab by their name", "expected": {"outcome": "specific lab info"}}]}, {"usecase": {"name": "Prescription Upload", "scenario": "Doctor uploads a prescription for a patient under a current treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. A treatment between the doctor and patient is present", "steps": ["Doctor navigates to the 'Prescription Upload' section.", "Doctor uploads the prescription", "System confirms the upload and updates the patient's medical history"]}, "testcases": [{"name": "Valid Prescription Upload", "description": "Verify that the system accepts a valid prescription upload.", "input": {"age": 20, "weight": 70, "height": 180, "bp": "80/120", "doctor name": "Zarif Hossain", "specialist": "Medicine", "clinic": "abcd", "continuation": "yes", "date": "2024-23-01", "symptoms": ["fever", "headache"], "tests": ["dengue", "cbc"], "diagnosis": ["typhoid"], "advices": ["bed rest for 21 days", "don't take outside food"], "medicines": [{"name": "Napa", "duration": 7, "meal timing": "after", "breakfast": "yes", "lunch": "yes", "dinner": "yes", "interval": 0}]}, "expected": {"outcome": "Prescription upload successful", "status": "Approved"}}, {"name": "Invalid Prescription Upload", "description": "Verify that the system rejects an invalid prescription upload.", "input": {"age": 20, "height": 180, "weight": 65}, "expected": {"outcome": "Prescription upload failed", "status": "Rejected"}}]}, {"usecase": {"name": "requesting patient patient data", "scenerio": "doctor requests access to incoming patient's health history to do proper treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. The doctor currently doesn't have access to the patient's data", "steps": ["Doctor searches for the patient", "Doctor sends access request"]}, "testcases": [{"name": "valid access request", "description": "verify that the system can accept a valid access request", "input": {"doctor_username": "zarif", "patient_username": "tomal", "date": "2024-12-01"}, "expected": {"outcome": "access request created", "status": "accepted"}}]}, {"usecase": {"name": "search for doctors", "scenerio": "patient searches for doctors based on department, name, visiting location and designation", "actors": "Patient", "preconditions": "Patient is registered and logged in", "steps": ["Patient goes to the 'Search for Doctors' section", "Patient enters search criteria"]}, "testcases": [{"name": "valid search by department and area", "description": "Verify that patients can successfully search for doctors by department and area", "input": {"area": "Mohammadpur", "department": "Medicine"}, "expected": {"outcome": "doctors are fetched", "status": "accepted"}}, {"name": "valid search by department", "description": "Verify that patients can successfully search for doctors by department", "input": {"department": "Medicine"}, "expected": {"outcome": "doctors are fetched", "status": "accepted"}}]}, {"usecase": {"name": "doctor views patient's treatments", "scenerio": "doctor views patient's health history before proceeding to do treatment", "actors": "Doctor", "preconditions": "Doctor is registered and logged in. Patient is registered. Doctor has access to Patient health history", "steps": ["Doctor searches for the patient", "Doctor goes to patient's current treatments section"]}, "testcases": [{"name": "Authorized doctor views patient's treatments", "description": "verify that authorized doctors can view patient's health history", "input": {"doctor_username": "zarif", "patient_username": "tomal"}, "expected": {"outcome": "treatments are fetched", "status": "accepted"}}, {"name": "Unauthorized doctor views patient's treatments", "description": "verify that unauthorized doctors cannot view patient's health history", "input": {"doctor_username": "zarif", "patient_username": "tomal"}, "expected": {"outcome": "treatments fetching failed", "status": "denied"}}]}, {"usecase": {"name": "admin downloads health data", "scenerio": "admin looks for downloading heath related data for further analysis", "actors": "Admin", "preconditions": "Admin is registered and logged in. Admin has access for the related data", "steps": ["admin searches for relevant data", "admin downloads the csv file"]}, "testcases": [{"name": "Authorized admin downloads data", "description": "verify that authorized admins can download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download successful", "status": "accepted"}}, {"name": "Unauthorized admin downloads data", "description": "verify that unauthorized admins cannot download health data", "input": {"admin_username": "admin"}, "expected": {"outcome": "data download failed", "status": "denied"}}]}, {"usecase": {"name": "Add a new task in To Do list", "description": "User should be able to add a new task", "preconditions": "User should be logged in", "steps": ["User should be logged in", "User should be on the To Do list page", "User should click on the Add button", "User should enter the task name and description", "User should choose the Deadline", "User should set the importance of the task on a scale of 1 to 10", "User should click on the Submit button"]}, "testcases": [{"name": "Correctly add a new task", "description": "User should be able to add a new task", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-31", "importance": "5"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}, {"name": "Given Deadline is in the past", "description": "User should not be able to set the deadline in the past", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2021-01-01", "importance": "5"}, "expected": {"outcome": "The deadline is in the past", "status": "Fail"}}, {"name": "The Deadline is in the future", "description": "User should be able to set the deadline in the future", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "5"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}, {"name": "The Importance is set to negative", "description": "User should not be able to set the importance to a negative value", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "-5"}, "expected": {"outcome": "The importance is set to a negative value", "status": "Fail"}}, {"name": "The Importance is set to 0", "description": "User should not be able to set the importance to 0", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "0"}, "expected": {"outcome": "The importance is set to 0", "status": "Fail"}}, {"name": "The Importance is set to 1 to 10", "description": "User should be able to set the importance to a value between 1 to 10", "input": {"taskName": "Task 1", "taskDescription": "Task 1 description", "deadline": "2024-12-12", "importance": "10"}, "expected": {"outcome": "The task is added to the list", "status": "Pass"}}]}, {"usecase": {"name": "Chat with AI bot", "description": "Every user can chat with an AI bot and take help from it", "preconditions": "User should be logged in", "steps": ["User should be logged in", "User should be on the chat page", "User can type in the chat box and get the response from the bot"]}, "testcases": [{"name": "Empty text submit", "description": "Verify the response when user submits empty text", "input": {"chatText": ""}, "expected": {"outcome": "Won't send the empty text", "status": "Fail"}}, {"name": "Text more than 1000 characters", "description": "Check the response when user submits text more than 1000 characters", "input": {"value": " 'a' * 1001"}, "expected": {"outcome": "Incomplete Response. First 1000 characters will be sent and the user will be notified about the limit", "status": "Fail"}}, {"name": "Text less than 1000 characters", "description": "Check the response when user submits text less than 1000 characters", "input": {"value": " 'a' * 999"}, "expected": {"outcome": "Complete Response", "status": "Pass"}}]}, {"usecase": {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "preconditions": ["The student has completed the quiz", "The student has submitted the quiz", "The trainer is logged in and has access to the quiz"], "steps": ["The trainer should be able to view the student's answers", "The trainer should be able to grade the student's answers", "The trainer should be able to view the student's score", "The trainer should be able to edit the student's performance"]}, "testcases": [{"name": "Over grading", "description": "The grade shoudln't exceed the maximum grade", "input": {"grade": "4.25"}, "expected": {"outcome": " The grade should not be greater than 4.00", "status": "Fail"}}, {"name": "Under grading", "description": "The grade shoudln't be less than the minimum grade", "input": {"grade": "1.25"}, "expected": {"outcome": " The grade should not be less than 2.00", "status": "Fail"}}, {"name": "Correct grading", "description": "The grade should be within the range of 2.00 to 4.00", "input": {"grade": "3.25"}, "expected": {"outcome": "The grade is within the range of 2.00 to 4.00", "status": "Pass"}}, {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "input": {"grade": "3.25", "status": "Contest is Running"}, "expected": {"outcome": "The quiz has not been completed yet", "status": "Fail"}}, {"name": "Grading the student after completion of the quiz", "description": "The trainer should be able to grade the student after the completion of the quiz", "input": {"grade": "3.25", "status": "Completed"}, "expected": {"outcome": "Successfully graded the student", "status": "Pass"}}]}, {"usecase": {"name": "Learner Sign Up", "description": "A learner can sign up to the platform, by mail and password, or by Google or by Discord", "preconditions": ["The learner is not signed in", "The learner has access to the internet", "The learner has a valid email id or Google account or Discrod account", "The learner has not used the same email or account to sign up before"], "steps": ["The learner opens the platform", "The learner clicks on the sign up button", "The learner chooses the sign up method", "The learner enters the email id and password or selects the Google or Discord account", "The learner clicks on the sign up button", "The learner verifies the email id or Google or Discord account", "The learner is registered to the platform", "The learner is signed in to the platform"]}, "testcases": [{"name": "Sign Up by previously used email id", "description": "A learner has to use a email id that is not used before to sign up", "input": {"email": "raihan@gmail.com", "password": "123456"}, "expected": {"outcome": "The email was used before", "status": "Rejected"}}, {"name": "Learner Sign Up unique email id", "description": "A learner has to use a email id that is not used before to sign up", "input": {"email": "random12@gmail.com", "password": "123456"}, "expected": {"outcome": "The email was not used before", "status": "Accepted"}}, {"name": "Learner Sign Up by previously used Google account", "description": "A learner has to use a Google account that is not used before to sign up", "input": {"gmail": "raihan@gmail.com"}, "expected": {"outcome": "The gmail was used before", "status": "Rejected"}}, {"name": "Learner Sign Up by unique Google Account", "description": "A learner has to use a Google account that is not used before to sign up", "input": {"gmail": "random1234@gmail.com"}, "expected": {"outcome": "The gmail was not used before", "status": "Accepted"}}, {"name": "Learner Sign Up by previously used Google account", "description": "A learner has to use a Discord account that is not used before to sign up", "input": {"discord account": "random#1234"}, "expected": {"outcome": "The discord account was used before", "status": "Rejected"}}, {"name": "Learner Sign Up by unique Discord Account", "description": "A learner has to use a Discord account that is not used before to sign up", "input": {"discord account": "random#12345"}, "expected": {"outcome": "The discord account was not used before", "status": "Accepted"}}]}, {"usecase": {"name": "Review and Rating Check", "description": ["Only who has taken the class can review the class", "The review should be a maximum of 50 characters", "The rating should be between 1 and 5"], "preconditions": ["Learner is logged in", "Learner has taken the class"], "steps": ["Learner clicks on the review button", "Learner writes the review", "Learner submits the review"]}, "testcases": [{"name": "Unenrolled student gives review of the class", "description": "Verify that the learner has taken the class", "input": {"Review": "This is a Bad class", "rating": "2", "enrolled": "No"}, "expected": {"outcome": "The Learner has not taken the class, hence he is not authorized to review the class", "status": "Fail"}}, {"name": "Enrolled student gives review of the class", "description": "Verify that the learner has taken the class", "input": {"Review": "This is a Good class", "rating": "4", "enrolled": "Yes"}, "expected": {"outcome": "The Learner has taken the class, hence he is authorized to review the class", "status": "Pass"}}, {"name": "Review given with more than 50 characters", "description": "Verify that the review is a maximum of 50 characters", "input": {"Review": "This is a Bad class, I did not like it at all, I would not recommend it to anyone, it was a waste of time and money", "rating": "2"}, "expected": {"outcome": "The review is more than 50 characters", "status": "Fail"}}, {"name": "Review given with less than 50 characters", "description": "Verify that the review is a maximum of 50 characters", "input": {"Review": "This is a Bad class", "rating": "2"}, "expected": {"outcome": "The review is less than 50 characters", "status": "Pass"}}, {"name": "Negative rating given", "description": "Verify that the rating is between 1 and 5", "input": {"Review": "This is a Bad class", "rating": "-5"}, "expected": {"outcome": "The rating is not between 1 and 5", "status": "Fail"}}, {"name": "Valid rating given", "description": "Verify that the rating is between 1 and 5", "input": {"Review": "This is a Good class", "rating": "4"}, "expected": {"outcome": "The rating is between 1 and 5", "status": "Pass"}}]}, {"usecase": {"name": "Adding a new class", "description": "This use case is used to add a new class to the system by the trainer ", "preconditions": "The trainer should be logged in", "steps": ["The trainer should click on the add class button", "The trainer should enter the class details", "The trainer should click on the save button"]}, "testcases": [{"name": "Added with valid start and end time", "description": "This test case is used to verify a new class with valid details", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-01-01", "class_end_date": "2025-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": " The class should be added successfully", "status": "Pass"}}, {"name": "Both The start time and end time is in the past", "description": "The start and end time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The start and end time is not in the future", "status": "Fail"}}, {"name": "The start time is in the past", "description": "The start time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2025-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The start time is not in the future", "status": "Fail"}}, {"name": "The end time is not in the future", "description": "The end time should be in the future", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The end time is not in the future", "status": "Fail"}}, {"name": "Inconsistent start and end time", "description": "The end time should be greater than the start time", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2025-03-01", "class_end_date": "2025-2-28", "class_start_time": "12:00", "class_end_time": "10:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The end time is not greater than the start time", "status": "Fail"}}, {"name": "Old class name given", "description": "The class name should be unique", "input": {"class_name": "Java_01", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The class name is not unique", "status": "Fail"}}, {"name": "Given class name is unique", "description": "The class name should be unique", "input": {"class_name": "Java_02", "class_description": "Java programming language, phase 1", "class_start_date": "2023-01-01", "class_end_date": "2023-2-28", "class_start_time": "10:00", "class_end_time": "12:00", "class_days": "Monday, Wednesday, Friday", "class_trainer": "Nazmus Sakib"}, "expected": {"outcome": "The class name is unique", "status": "Pass"}}]}, {"usecase": {"name": "Trainer Add Blogs", "description": "Trainer should be able to add blogs", "preconditions": ["Trainer should be logged in", "The blog post should not exceed 1000 words"], "steps": ["Trainer will click My Articles from the left menu", "Trainer will click Add New Post", "Trainer will fill the required fields", "Trainer will click Done With Editing"]}, "testcases": [{"name": "Large blog post added", "description": "The length of the blog post should not 1000 words", "input": {"title": "Test Blog", "short description": "This is a test blog", "time to read": "5", "tags": "test, blog", "content": "This is a test .... 5000 words"}, "expected": {"outcome": "The blog post exceeds 1000 words", "status": "Fail"}}, {"name": "Valid blog post added", "description": "The length of the blog post should not 1000 words", "input": {"title": "Test Blog", "short description": "This is a test blog", "time to read": "5", "tags": "test, blog", "content": "This is a test .... 500 words"}, "expected": {"outcome": "The blog post is added successfully", "status": "Pass"}}]}, {"usecase": {"name": "Sign Up as a Trainer", "scenario": "A trainer has to give his details to sign up", "actors": "Trainer", "preconditions": ["The trainer is not signed in.", "The trainer should have access to the internet.", "The trainer should have a valid email id and a contact number", "The learner has not used the same email or account to sign up before"], "steps": ["The trainer has to go to the sign up page", "The trainer has to fill in the details", "The trainer has to verify the email", "The trainer has to wait for the approval"]}, "testcases": [{"name": "Extremely Short name given", "description": "Verify that the name is of at least 3 characters", "input": {"Name": "AB"}, "expected": {"outcome": "Name is required and at least of length 3", "status": "Rejected"}}, {"name": "Name given correclty", "description": "Verify that the name is of at least 3 characters", "input": {"Name": "Raihan"}, "expected": {"outcome": "Name is of correct length", "status": "Approved"}}, {"name": "Date of Birth is in the future", "description": "Verify that the date of birth is in the past", "input": {"Date of Birth ": ["01/01/2025"]}, "expected": {"outcome": "Date of birth must be in the past", "status": "Rejected"}}, {"name": "Empty Date of Birth", "description": "Verify that the date of birth is not empty", "input": {"Date of Birth": ["Not Selected"]}, "expected": {"outcome": "Date of birth is required", "status": "Rejected"}}, {"name": "Date of birth is in the past and not 18 years ago", "description": "Verify that the date of birth is in the past and the trainer is at least 18 years old", "input": {"Date of Birth": ["01/01/2021"]}, "expected": {"outcome": "The trainer is less than 18 years old", "status": "Rejected"}}, {"name": "Date of birth is in the past and 18 years ago", "description": "Verify that the date of birth is in the past and the trainer is at least 18 years old", "input": {"Date of Birth": ["01/01/2003"]}, "expected": {"outcome": "Date of birth is in the past and the trainer is at least 18 years old", "status": "Approved"}}, {"name": "Empty Gender Selection", "description": "Verify that the trainer has selected his/her gender", "input": {"Gender": ["Not Selected"]}, "expected": {"outcome": "Required", "status": "Rejected"}}, {"name": "Correct gender selection", "description": "Verify that the trainer has selected his/her gender", "input": {"Gender": "male"}, "expected": {"outcome": "Correct", "status": "Approved"}}, {"name": "Contact number format invalid", "description": "Verify the format of the contact number, it should be of 11 digits and should start with 01", "input": {"Contact Number": ["1234567"]}, "expected": {"outcome": "Phone number must be exactly 11 digits and start with 01", "status": "Rejected"}}, {"name": "Contact number format valid", "description": "Verify the format of the contact number, it should be of 11 digits and should start with 01", "input": {"Contact Number": ["01853320911"]}, "expected": {"outcome": "Phone number is exactly 11 digits and start with 01", "status": "Approved"}}, {"name": "Empty or Invalid Email", "description": "Verify that the email is not empty and is in the correct format", "input": {"Email": ["abc.com"]}, "expected": {"outcome": "Invalid email address, email address is required", "status": "Rejected"}}, {"name": "Empty or Invalid Password", "description": "Verify that the password is not empty and is of at least 7 characters containing at least 1 uppercase letter, 1 special character, 1 number", "input": {"Password": ["abc"]}, "expected": {"outcome": "Password must be at least 7 characters long and contain at least 1 uppercase letter, 1 special character, 1 number", "status": "Rejected"}}, {"name": "Empty or Invalid Confirm Password", "description": "Verify that the confirm password is not empty and is same as the password", "input": {"Confirm Password": ["abc"]}, "expected": {"outcome": "Password and confirm password must match", "status": "Rejected"}}, {"name": "Verify teaching information", "description": "The reasoning should be of at least 15 characters", "input": {"Reason": ["abc"]}, "expected": {"outcome": "Reason must be at least 15 characters long", "status": "Rejected"}}, {"name": "Verify the mail ", "description": "Verify that the email is not previously used", "input": {"Email": ["raihan@gmail.com"]}, "expected": {"outcome": "Email already exists", "status": "Rejected"}}, {"name": "Verify All Details", "description": "Verify that all the details are correct and the email is verified", "input": {"Details": ["Correct"]}, "expected": {"outcome": "Details are correct and email is verified", "status": "Approved"}}]}, {"usecase": {"author": "Pramananda Sarkar", "id": "2005002", "name": "Train Selection", "scenario": "A custumer serches for a train from one station to anoter on a specified date", "actor": "Customer", "preconditions": "shold have registed", "steps": ["valid train searh", "select express", "book tickets", "confirm pyment"]}, "testcases": [{"name": "Valid date, location an clas selection", "description": "Verify the requird input for train search", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of express train services", "status": "Aproved"}}, {"name": "Empty date", "description": "Check response when no date is provided", "input": {"date": "", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Date is requred", "status": "Rejcted"}}, {"name": "Invalid date format", "description": "Check response when an invalid date format is provided", "input": {"date": "2024/05/10", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invaled date format", "status": "Rejeted"}}, {"name": "Empty source locaton", "description": "Check response when no source location is provided", "input": {"date": "26-09-2024", "source": "", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Source location is requred", "status": "Rejcted"}}, {"name": "Invalid source locaton", "description": "Check response when an invalid source location is provided", "input": {"date": "26-09-2024", "source": "InvalidCity", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "Error: Invalid source location", "status": "Rejeted"}}, {"name": "Empty destnation locaton", "description": "Check response when no destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "", "class": "Express"}, "expected": {"output": "Error: Destination locaton is requred", "status": "Rejcted"}}, {"name": "Invalid destnation locaton", "description": "Check response when an invalid destination location is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "InvalidCity", "class": "Express"}, "expected": {"output": "Error: Invalid destnation location", "status": "Rejeted"}}, {"name": "Non-select clas", "description": "Check response when no class is selectd", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": ""}, "expected": {"output": "Error: Class selectn is requred", "status": "Rejeted"}}, {"name": "Invalid clas selectn", "description": "Check response when an invalid class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "InvalidClas"}, "expected": {"output": "Error: Invalid class selectn", "status": "Rejeted"}}, {"name": "Select express", "description": "Verify the list of available express trains when 'Express' class is selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express"}, "expected": {"output": "List of available express trains", "status": "Aproved"}}, {"name": "Empty seat selection", "description": "Check response when no seats are selected", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 0}, "expected": {"output": "Error: At least one seat must be selectd", "status": "Rejeted"}}, {"name": "Select seats", "description": "Verify seat selecton functionality", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2}, "expected": {"output": "Seats selected sucessfully", "status": "Aproved"}}, {"name": "Insufficient seats available", "description": "Check response when the number of requested seats exceeds available seats", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 10}, "expected": {"output": "Error: Insufficient seats avaiable", "status": "Rejeted"}}, {"name": "Verification for starting transaction", "description": "Check the verificaton process when initiating a transacton", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "pending"}, "expected": {"output": "Transaction initiation verificatn", "status": "Aproved"}}, {"name": "Invalid pyment method", "description": "Check response when an invalid payment method is provided", "input": {"date": "26-09-2024", "source": "Dhaka", "destination": "Chittagong", "class": "Express", "seats": 2, "payment": "InvalidMethod"}, "expected": {"output": "Error: Invalid payment method", "status": "Rejeted"}}]}, {"usecase": {"author": "Turjoy Dey", "id": "2005016", "name": "Event Search and Ticket Booking of Registered Users", "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.", "actor": "A Registered User/Customer", "preconditions": "The customer should be registered and logged in. Events must be available in the system.", "steps": ["Navigate to the Events page", "Search for an event using filters (event name, location, date)", "Select an event from the search results", "Select the number of tickets and seat type (if applicable)", "Proceed to checkout", "Confirm payment", "Receive booking confirmation", "View booking history"], "postconditions": "The customer successfully books tickets for the event and receives a confirmation message and can see details in booking history."}, "testcases": [{"name": "Valid Event Search and Booking", "description": "Verify that a customer can successfully search for an event and book tickets.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "2024-10-30", "number_of_tickets": 2}, "expected": {"output": "Search results display the relevant event. Booking is successful for 2 tickets.", "status": "Approved"}}, {"name": "Search with Empty Event Name", "description": "Check the system response when the event name is not provided.", "input": {"event": "", "location": "Dhaka", "date": "2024-10-30"}, "expected": {"output": "System prompts the customer to enter an event name.", "status": "Rejected"}}, {"name": "Invalid Date Format", "description": "Test the response when the customer enters an invalid date format for event search.", "input": {"event": "Concert Nogorbaul", "location": "Dhaka", "date": "30/10/2024"}, "expected": {"output": "System shows an error indicating an invalid date format.", "status": "Rejected"}}, {"name": "No Events Found", "description": "Verify the system\u2019s behavior when no events match the search criteria.", "input": {"event": "Nonexistent Event", "location": "Dhaka", "date": "2024-12-31"}, "expected": {"output": "System displays 'No events found for your search.'", "status": "Rejected"}}, {"name": "Apply Discount Code", "description": "Check if a customer can apply a valid discount code during the booking process.", "input": {"event": "Concert XYZ", "discount_code": "OCTOFFER", "number_of_tickets": 2}, "expected": {"output": "Discount code applied successfully and the total amount is updated.", "status": "Approved"}}, {"name": "Select Number of Tickets", "description": "Test the response when a valid number of tickets is selected for booking.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 3}, "expected": {"output": "System confirms that 3 tickets are available and proceeds to checkout.", "status": "Approved"}}, {"name": "Exceed Ticket Limit", "description": "Check the response when the customer tries to book more tickets than available.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 10}, "expected": {"output": "System shows 'Insufficient tickets available.'", "status": "Rejected"}}, {"name": "Payment Confirmation", "description": "Verify the payment process after selecting event tickets.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Valid credit card"}, "expected": {"output": "Payment is processed and a confirmation message is displayed: 'Payment successful. Your booking is confirmed.'", "status": "Approved"}}, {"name": "Invalid Payment Method", "description": "Check the system\u2019s response when an invalid payment method is provided.", "input": {"event": "Concert Nogorbaul", "number_of_tickets": 2, "payment_method": "Invalid credit card"}, "expected": {"output": "System shows 'Invalid payment method.'", "status": "Rejected"}}, {"name": "Booking for Past Events", "description": "Verify that the customer cannot book tickets for past events.", "input": {"event": "Old Concert ABC", "location": "Dhaka", "date": "2023-09-15"}, "expected": {"output": "System shows an error: 'Tickets cannot be booked for past events.'", "status": "Rejected"}}]}, {"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "One way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"One Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and (optional) return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}]}, {"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Round way Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Round Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities", "User selects the journey date and return date", "User selects the number of tickets and service class", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from": "DAC, Hazrat Shahjalal International Airport", "Flying to": "CXB, Cox's Bazar Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Multiple Tickets Search", "description": "Verify that a user can search and successfully get multiple tickets of desired choice", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "6 Travellers", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Invalid Ticket Search", "description": "Verify that the system handles the case where the user tries to give same source and destination airports", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "LHR, London, Heathrow", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}, {"name": "No Ticket Available Search", "description": "Verify that the system handles the case where no tickets are available", "input": {"Flying from": "ZYL, Sylhet, Osmany International Airport", "Flying to": "ZYL, Sylhet, Osmany International Airport", "Journey Date": "Sep 21, 2024, Saturday", "Return Date": "Sep 28, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}]}, {"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Multi City Air Ticket Search", "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"Air\" tab", "User selects the \"Multi Way\" option", "User selects the \"Flying from\" and \"Flying to\" cities for the first flight", "For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight", "User can select a new \"Flying from\" city if he wants", "User selects the journey date for each trip", "User selects the number of tickets and service class", "User can add and remove flight", "User submits choice"]}, "testcases": [{"name": "Valid Ticket Search", "description": "Verify that a user can search and successfully get valid tickets.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Valid Ticket Search with More Than 3 Flights", "description": "Verify that a user can search and successfully get valid tickets for more than 3 flights.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "CXB, Cox's Bazar Airport", "Flying from 2": "CXB, Cox's Bazar Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Flying from 3": "ZYL, Sylhet, Osmany International Airport", "Flying to 3": "LHR, London, Heathrow", "Flying from 4": "LHR, London, Heathrow", "Flying to 4": "JFK, New York, John F. Kennedy International Airport", "Journey Date 1": "Sep 21, 2024, Saturday", "Journey Date 2": "Sep 24, 2024, Saturday", "Journey Date 3": "Sep 27, 2024, Saturday", "Journey Date 4": "Sep 30, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "Different Flying From Cities", "description": "Verify that a user can search and successfully get valid tickets with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "List of available tickets", "status": "Completed"}}, {"name": "No Ticket Available with Different Flying From Cities", "description": "Verify that the system handles the case where no tickets are available with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "SIN, Singapore Changi Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "LHR, London, Heathrow", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "No tickets available at the moment", "status": "Not found"}}, {"name": "Same Source and Destination with Different Flying From Cities", "description": "Verify that the system handles the case where the user tries to give the same source and destination airports with different 'Flying from' cities for each flight.", "input": {"Flying from 1": "DAC, Hazrat Shahjalal International Airport", "Flying to 1": "DAC, Hazrat Shahjalal International Airport", "Flying from 2": "ZYL, Sylhet, Osmany International Airport", "Flying to 2": "ZYL, Sylhet, Osmany International Airport", "Journey Date 1": "Oct 1, 2024, Tuesday", "Journey Date 2": "Oct 5, 2024, Saturday", "Traveller": "1 Traveller", "Class": "Economy"}, "output": {"tickets": "From & To airports can't be same", "status": "Failed"}}]}, {"usecase": {"author": "Mostafa Rifat Tazwar", "id": "2005020", "name": "Event Search Based on Location and Date Range in Bangladesh", "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range", "actors": "User", "preconditions": "None", "steps": ["User navigates to the \"events\" tab", "User selects a location from the available list", "User selects a 'From Date' and a 'To Date' to define the range", "User submits the search query"]}, "testcases": [{"name": "Valid Event Search in Dhaka", "description": "Verify that a user can search and successfully retrieve a list of events for Dhaka within the specified date range.", "input": {"Location": "Dhaka, Bangladesh", "From Date": "Oct 5, 2024", "To Date": "Oct 15, 2024"}, "output": {"events": "List of available events in Dhaka", "status": "Completed"}}, {"name": "Search with No Events Available in Sylhet", "description": "Verify that the system handles the case where no events are available in Sylhet during the specified date range.", "input": {"Location": "Sylhet, Bangladesh", "From Date": "Nov 1, 2024", "To Date": "Nov 10, 2024"}, "output": {"events": "No events available during this period in Sylhet", "status": "Not found"}}, {"name": "Invalid Date Range Search in Chittagong", "description": "Verify that the system handles the case where the 'From Date' is later than the 'To Date'.", "input": {"Location": "Chittagong, Bangladesh", "From Date": "Dec 15, 2024", "To Date": "Dec 5, 2024"}, "output": {"events": "'From Date' cannot be later than 'To Date'", "status": "Failed"}}, {"name": "Search with Empty Location", "description": "Verify that the system handles the case where the user does not select a location.", "input": {"Location": "", "From Date": "Oct 1, 2024", "To Date": "Oct 10, 2024"}, "output": {"events": "Location is required", "status": "Failed"}}]}, {"usecase": {"author": "Gourab Biswas", "id": "2005034", "name": "Launch Ticket Booking", "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.", "actors": "User", "preconditions": "there are available seats for the selected route and date.", "steps": ["User choose the launch option.", "User chooses origin, destination, journey date and searches for launches.", "User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively.", "User can see previous available trips (if date condition allows it) and future trips of any date.", "User selects desired trip and chooses seats.", "User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger.", "User pays by bank cards or mobile banking to book tickets."]}, "testcases": [{"name": "User choose the launch option", "description": "User chooses the launch option from the home page where by default the bus option is selected", "input": ["User clicks on the launch option from the home page."], "expected": "User should see the search page for booking a launch ticket."}, {"name": "Valid search", "description": "User searches for a launch from origin to destination on a valid date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": "A list of available launches from origin to destination for the selected date will be displayed.This list can be sorted based on departure time, arrival time, fare range respectively. User can see previous available trips (if date condition allows it) and future trips of any date. User can choose modify search to change the search criteria."}, {"name": "Input departure city after selecting destination city", "description": "User tries to input departure while aa particular destination city is selected", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "selected already", "journey date": "choose valid date from calendar or keep it null"}, "expected": {"outcome": {"destination city selection box": "empty and ready to take input"}}}, {"name": "No departure city selected", "description": "User searches for a launch without selecting the departure city", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city selected", "description": "User searches for a launch without selecting the destination city", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": "choose valid date from calendar", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No date selected", "description": "User searches for a launch without selecting the date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose date of your journey. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city, date selected", "description": "User searches for a launch without selecting the departure city, destination city, date", "input": {"departure city": [], "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No destination city, date selected", "description": "User searches for a launch without selecting destination city, date", "input": {"departure city": "type origin city and choose from suggested list", "destination city": [], "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose destination city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, date selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": "type destination city and choose from suggested list", "journey date": [], "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "No departure city, destination city selected", "description": "User searches for a launch without selecting departure city, date", "input": {"departure city": [], "destination city": [], "journey date": "choose valid date from calendar box", "search": "press search button to get list of available launches"}, "expected": {"outcome": "Please choose departure city. - Dialog box", "status": "Search page freezes till you press enter from keyboard or choose ok from dialog box"}}, {"name": "Launch selection", "description": "User selects a launch from the list of available launches", "input": ["User selects desired trip from launch/ship/house boat list."], "expected": "User should see the details of the selected launch."}, {"name": "Seat selection", "description": "User selects seats for the selected launch", "input": ["User chooses from available seats. Already booked seats are shown in grey."], "expected": "The selected seats should be highlighted in green."}, {"name": "No Seats Selected", "description": "User tries to proceed without selecting any seats.", "input": {"selectedSeats": []}, "expected": {"outcome": "Please select at least one seat. - Error message", "status": "proceed option disabled"}}, {"name": "Unavailable seat selection", "description": "User tries to select a seat that is already booked", "input": ["User selects seats."], "expected": "User should see a cross icon when he hovers over a booked seat.", "status": "User remains on the seat selection page."}, {"name": "Credentials missing", "description": "User does not provide required details", "input": {"phone number": [], "email": ""}, "expected": {"proceed to payment option": "disabled"}}, {"name": "Form Resets on Invalid Submission", "description": "Verify that form does reset when an invalid submission (e.g., missing phone number) is attempted.", "input": {"phoneNumber": "", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message", "status": "Form data should persist after error message"}}, {"name": "Invalid phone number case 1", "description": "User provides invalid phone number", "input": {"phone number": "press anything other than 0 to 9"}, "expected": {"outcome": "None of the nondigits pressed appear in the phone number box and The mobile number is invalid box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid phone number case 2", "description": "User provides invalid phone number", "input": {"phone number": "type any nonregistered nonauthorized number that is not compatible with the location/application's domain", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The mobile number is invalid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Email not provided", "description": "User does not provide email address", "input": {"phone number": "type any registered number", "email": [], "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Email address is required - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 1", "description": "User provides invalid email", "input": {"phone number": "type any registered number", "email": "user@example.", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Invalid Email case 2", "description": "Application is supposed to validate email", "input": {"phone number": "type any registered number", "email": "u@f", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "The email is inavlid - This box persists", "proceed to payment option": "disabled"}}, {"name": "Valid credentials provided", "description": "User provides valid phone number, email address, passenger details", "input": {"phone number": "01912441139", "email": "bellabose@gamil.com", "passengerDetails": [{"firstName": "Anjan", "lastName": "Dutta", "gender": "Male"}]}, "expected": {"proceed to payment option": "enabled"}}, {"name": "Invalid Email Address", "description": "User enters an invalid email address during booking.", "input": {"phoneNumber": "01712345678", "email": "userexample.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid email address. - Error message", "proceed to payment option": "disabled"}}, {"name": "Invalid Phone Number Format", "description": "User enters a phone number in an invalid format while booking tickets.", "input": {"phoneNumber": "abc1234567", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}]}, "expected": {"outcome": "Please enter a valid phone number. - Error message. Nondigits are not shown in the phone number box", "proceed to payment option": "disabled"}}, {"name": "Seat Already Taken", "description": "User tries to select a seat that is already taken.", "input": {"selectedSeats": ["Cabin-1", "Cabin-2"]}, "expected": {"outcome": "Seat Cabin-1 is already taken. Please select a different seat. - Error message", "status": "Seat selection blocked"}}, {"name": "Passenger Name Field Empty", "description": "User tries to proceed without filling in the passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "", "lastName": "", "gender": "Male"}]}, "expected": {"outcome": {"error message": ["First name is required.", "Last name is required."]}, "proceed to payment option": "disabled"}}, {"name": "Passenger Name Input Validation", "description": "User tries to input digits in passenger name.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "Robi123", "lastName": "56Thakur", "gender": "Male"}]}, "expected": {"outcome": {"first name": "Robi", "last name": "Thakur", "digits in name": "not taken as input in the name field"}, "proceed to payment option": "enabled"}}, {"name": "Payment", "description": "User pays for the ticket using bank cards or mobile banking", "input": ["User chooses bank cards or mobile banking to book tickets."], "expected": "User is redirected to sslcommerz page"}, {"name": "Payment Timeout", "description": "Simulate a payment timeout scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment timed out. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Session Timeout During Booking", "description": "Simulate session timeout while the user is booking tickets.", "input": {"phoneNumber": "01712345678", "email": "user@example.com", "passengerDetails": [{"firstName": "John", "lastName": "Doe", "gender": "Male"}], "sessionDuration": "Expired"}, "expected": {"outcome": "Your session has expired. Please restart your booking. - Error message", "status": "Session expired, booking failed"}}, {"name": "Payment Failure", "description": "Simulate a payment failure scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment failed. Please try again. - Error message", "status": "Booking failed"}}, {"name": "Payment Success", "description": "Simulate a successful payment scenario.", "input": {"cardNumber": "4123 4567 8912 3456", "expiryDate": "12/24", "cvv": "123"}, "expected": {"outcome": "Payment successful. Your booking is confirmed.", "status": "Booking confirmed"}}, {"name": "Only valid origin and destination city selection", "description": "When user selects valid origin, only valid destination city should be shown in the destination city selection box", "input": {"origin": "Dhaka", "destination": "Barishal"}, "expected": {"destination city selection box": "should show only the cities that are connected to Dhaka by launch/ water transport"}}]}, {"usecase": {"author": "Fahim Hasan", "id": "2005043", "name": "Park Ticket Booking", "scenario": "User books a park ticket from available parks and selects the date for entry.", "actors": "User", "preconditions": "Tickets are available for the selected park, location, and date.", "steps": ["User navigates to the parks option from the main menu.", "User selects a city or area in the location field to filter available parks.", "User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park.", "User selects a park card to view more details about the park, including ticket options for kids, infants, and adults.", "User reviews ticket options and selects the desired ticket type and quantity.", "User selects an entry date for the park visit.", "User provides necessary contact and passenger details for the booking.", "User proceeds to complete payment using a chosen payment method.", "User receives a booking confirmation via email or in-app notification."]}, "testcases": [{"name": "Navigate to Parks Option", "description": "Verify if user can access the parks booking section from the homepage.", "preconditions": "User is logged into the app.", "steps": ["1. Open the app and go to the homepage.", "2. Click on the 'Parks' option in the main menu."], "expected_result": "User should be directed to the parks booking section successfully."}, {"name": "Display Available Parks", "description": "Ensure that a list of available amusement parks is displayed in card format when the user accesses the parks section without any filters.", "preconditions": "User is on the parks booking page.", "steps": ["1. Access the parks section without selecting a specific city or area.", "2. Observe the displayed list of parks."], "expected_result": "User should see a card layout showing names, best attractions, and price ranges of available parks."}, {"name": "Search for Tickets - Valid", "description": "Check if the user can search for tickets after selecting a valid city/area, park, and date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a valid date from the calendar.", "4. Click on the 'Search' button."], "expected_result": "Available tickets for the selected park and date should be displayed successfully."}, {"name": "Search for Tickets - No Location Selected", "description": "Ensure that the search returns an error when no city or area is selected.", "preconditions": "User is on the parks search page.", "steps": ["1. Leave the location field empty.", "2. Select a park and a valid entry date.", "3. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a location.'"}, {"name": "Search for Tickets - No Park Selected", "description": "Ensure that the search returns an error when no park is selected after choosing a city/area.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Leave the park field empty.", "3. Select a valid entry date.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select a park.'"}, {"name": "Search for Tickets - No Date Selected", "description": "Ensure that the search returns an error when no entry date is selected after choosing a city/area and park.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Leave the entry date field empty.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Please select an entry date.'"}, {"name": "Select Ticket Type and Quantity", "description": "Check if the user can select the ticket type and quantity on the booking page.", "preconditions": "User has searched for tickets and ticket options are displayed.", "steps": ["1. Select a ticket type (e.g., Adult, Child).", "2. Specify the number of tickets required."], "expected_result": "The selected ticket type and quantity should be highlighted on the booking page."}, {"name": "Payment - Missing Details", "description": "Ensure that the user cannot proceed to payment without entering contact details.", "preconditions": "User has selected tickets and is on the payment page.", "steps": ["1. Leave the contact details fields (Name, Email, Phone) empty.", "2. Attempt to proceed to payment."], "expected_result": "User should see an error message: 'Please fill out all contact details.'"}, {"name": "Payment Success", "description": "Verify successful payment and booking confirmation.", "preconditions": "User has filled in all necessary details and is on the payment page.", "steps": ["1. Select a valid payment method (credit card or mobile wallet).", "2. Enter payment details and confirm the payment."], "expected_result": "Payment should be processed successfully, and the user should receive a booking confirmation message."}, {"name": "Session Timeout During Payment", "description": "Check system behavior when the session times out during the payment process.", "preconditions": "User is on the payment page with the session nearing timeout.", "steps": ["1. Wait until the session times out.", "2. Attempt to complete the payment."], "expected_result": "User should see a session timeout error and be prompted to restart the booking process."}, {"name": "Search for Tickets - Invalid Date", "description": "Verify if the user receives an error when selecting a past date.", "preconditions": "User is on the parks search page.", "steps": ["1. Select a city or area in the location field.", "2. Select a park from the dropdown list.", "3. Choose a past date from the calendar.", "4. Click on 'Search'."], "expected_result": "Error message should display: 'Selected date is invalid.'"}, {"name": "Cancel Booking", "description": "Check if the user can cancel a booking before the entry date.", "preconditions": "User has an active booking.", "steps": ["1. Navigate to 'My Bookings'.", "2. Select the booking to cancel.", "3. Click on 'Cancel Booking' and confirm the action."], "expected_result": "Booking should be canceled successfully, and a confirmation message should be displayed."}, {"name": "Check Booking History", "description": "Verify if the user can access their past booking history.", "preconditions": "User is logged into the app.", "steps": ["1. Go to 'My Account'.", "2. Click on 'Booking History' to view past transactions."], "expected_result": "User should see a list of past bookings with relevant details."}]}, {"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Bus Selection", "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.", "actor": "Customer", "preconditions": ["User must have access to the internet and the shohoz.com website or mobile app.", "User must be on the bus search page."], "postconditions": ["Successful completion of booking and ticket generation."], "steps": ["Customer searches for a bus from one station/bus_point to another.", "Filter buses by type (e.g. AC, non-AC,express).", "Select a bus from the available options.", "Choose a seat and book tickets.", "Enter contact and personal information.", "Review and confirm booking.", "proceed to payment"]}, "testcases": [{"name": "One Way Bus Selection - Valid", "description": "Customer searches for a one-way bus and selects the appropriate option.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display available buses from Dhaka to Rajshahi for the selected date.", "status": "Approved"}}, {"name": "One Way Bus Selection - No Buses Available", "description": "Customer searches for a bus but no buses are available on the selected date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display 'No buses available' message.", "status": "Failed"}}, {"name": "One Way Bus Selection - Invalid boarding point/ dropping point", "description": "Customer enters an invalid departure or arrival point.", "input": {"departurestation/bus_point": "Invalidstation/bus_point", "arrivalstation/bus_point": "Rajshahi", "date": "2024-10-10"}, "expected": {"output": "Display error message: 'Invalid station/bus_point'.", "status": "Failed"}}, {"name": "Round Trip Bus Selection - Valid", "description": "Customer searches for a round-trip bus and selects appropriate options for both legs of the journey.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "Rajshahi", "departureDate": "2024-10-10", "returnDate": "2024-10-12"}, "expected": {"output": "Display available buses for both departure and return journeys.", "status": "Approved"}}, {"name": "Round Trip Bus Selection - Invalid Return Date", "description": "Customer selects a return date that is earlier than the departure date.", "input": {"departurestation/bus_point": "Dhaka", "arrivalstation/bus_point": "station/bus_point B", "departureDate": "2024-10-12", "returnDate": "2024-10-10"}, "expected": {"output": "Display error message: 'Return date must be after departure date'.", "status": "Failed"}}, {"name": "Filter for Searching Express - Valid", "description": "Customer filters buses by selecting the 'Express' option.", "input": {"filter": "Express"}, "expected": {"output": "Display only express buses for the selected route.", "status": "Approved"}}, {"name": "Filter for Searching Express - No Express Buses", "description": "Customer selects 'Express' filter, but no express buses are available.", "input": {"filter": "Express"}, "expected": {"output": "Display 'No express buses available' message.", "status": "Failed"}}, {"name": "Select One Bus - Valid", "description": "Customer selects a specific bus from the filtered results.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display seating and ticket status for the selected bus.", "status": "Approved"}}, {"name": "Select One Bus - Bus Fully Booked", "description": "Customer selects a bus, but all seats are already booked.", "input": {"busId": "Rangpur express", "time": "10:00 AM"}, "expected": {"output": "Display 'Bus fully booked' message.", "status": "Failed"}}, {"name": "Select Tickets - Valid", "description": "Customer selects specific seats and the number of tickets.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Selected seats and ticket count confirmed.", "status": "Approved"}}, {"name": "Select Tickets - Invalid Seat Selection", "description": "Customer selects seats that are already booked.", "input": {"busId": "Rangpur express", "seats": ["1A", "1B"], "ticketCount": 2}, "expected": {"output": "Display 'Selected seats are unavailable' message.", "status": "Failed"}}, {"name": "Contact and Personal Information - Valid", "description": "Customer enters their personal and contact information during booking.", "input": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Valid personal and contact information accepted.", "status": "Approved"}}, {"name": "Contact and Personal Information - Invalid Email", "description": "Customer enters an invalid email address.", "input": {"contact": "1234567890", "email": "invalid_email", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "expected": {"output": "Display 'Invalid email address' error.", "status": "Failed"}}, {"name": "Proceed to Payment - Valid", "description": "Customer clicks 'Proceed to Payment' after entering all required booking information.", "input": {"customer_details": {"contact": "12345678901", "email": "abc@gmail.com", "firstname": "John", "lastname": "Doe", "Gender": "Male"}, "booking_details": {"busId": "Rangpur Travels", "seats": ["1A", "1B"], "ticketCount": 2}}, "expected": {"output": "Redirect to payment page with booking summary displayed.", "status": "Approved"}}]}, {"usecase": {"author": "Sheikh Rahat Mahmud", "id": "2005048", "name": "Complete Payment Process", "scenario": "Client selects seats and completes payment for the ticket", "actors": "Client", "preconditions": "Client must select one or more seats of any transport", "steps": ["Select payment method", "Authenticate payment via OTP", "Confirm payment", "Handle payment confirmation or failure", "Handle insufficient balance failure"]}, "testcases": [{"name": "Select Payment Method", "description": "User selects a payment method from multiple payment gateways like mobile banking (bkash/Nagad/Rocket) or Debit/Credit Cards", "input": {"selected_method": "bkash"}, "expected": {"output": "Proceeded to the payment section", "status": "approved"}}, {"name": "Send OTP", "description": "System sends an OTP to the user for payment authentication", "input": {"phone_number": "017XXXXXXX", "payment_gateway": "bkash"}, "expected": {"output": "OTP sent to the user's phone", "status": "sent"}}, {"name": "Authenticate Payment", "description": "User enters OTP received on their mobile to authenticate the payment", "input": {"OTP": "123456"}, "expected": {"output": "User is authenticated", "status": "authenticated"}}, {"name": "Payment Confirmation", "description": "Confirm payment after OTP authentication", "input": {"confirmation": "Yes"}, "expected": {"output": "Payment is confirmed and processed", "status": "confirmed"}}, {"name": "Payment Failure Handling", "description": "Handle cases where payment fails due to network issues, incorrect OTP, etc.", "input": {"error": "Network error"}, "expected": {"output": "Payment failure message displayed to the user", "status": "failed"}}, {"name": "Payment Failure for Insufficient Balance", "description": "Handle payment failure when there is insufficient balance in the user's payment account", "input": {"error": "Insufficient balance", "payment_gateway": "bkash"}, "expected": {"output": "Insufficient balance message displayed to the user", "status": "failed"}}, {"name": "Confirmation Parsing", "description": "Parse and display payment confirmation details to the user", "input": {"payment_details": {"amount": "550", "transaction_id": "TXN123456789", "status": "confirmed"}}, "expected": {"output": "Display detailed confirmation to the user", "status": "displayed"}}]}, {"usecase": {"name": "Login into Splitwise Account", "scenario": "Users can log into their Splitwise account using their credentials.", "actors": "User", "preconditions": "User has installed the Splitwise app and has a valid account.", "steps": ["User opens the Splitwise app.", "User navigates to the login screen.", "User enters their registered email address.", "User enters their password.", "User clicks on the 'Login' button.", "System verifies the credentials.", "User is redirected to the home screen if credentials are valid.", "Error message is displayed if credentials are invalid."]}, "testcases": [{"name": "Login - Valid Credentials", "description": "Verify that the user can successfully log in with valid credentials.", "input": {"email": "user@example.com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Invalid Email", "description": "Verify that the user cannot log in with an unregistered email address.", "input": {"email": "invalid@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email not found.'"}, {"name": "Login - Invalid Password", "description": "Verify that the user cannot log in with a registered email but incorrect password.", "input": {"email": "user@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Incorrect password.'"}, {"name": "Login - Empty Email", "description": "Verify that the user cannot log in with an empty email field.", "input": {"email": "", "password": "validPassword123"}, "expected": "Error message displayed: 'Email cannot be empty.'"}, {"name": "Login - Empty Password", "description": "Verify that the user cannot log in with an empty password field.", "input": {"email": "user@example.com", "password": ""}, "expected": "Error message displayed: 'Password cannot be empty.'"}, {"name": "Login - Invalid Email Format", "description": "Verify that the user cannot log in with an improperly formatted email address.", "input": {"email": "invalidemail", "password": "validPassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Login - Account Locked", "description": "Verify that the user cannot log in if their account is locked after multiple failed attempts.", "input": {"email": "locked@example.com", "password": "wrongPassword"}, "expected": "Error message displayed: 'Your account is locked. Please contact support.'"}, {"name": "Login - Password with Special Characters", "description": "Verify that the user can log in with a password that contains special characters.", "input": {"email": "user@example.com", "password": "P@ssw0rd!"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Very Long Email", "description": "Verify that the user cannot log in with an email address that exceeds the maximum length.", "input": {"email": "verylongemailaddress@example.com", "password": "validPassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Login - Very Long Password", "description": "Verify that the user can log in with a very long password within the acceptable limit.", "input": {"email": "user@example.com", "password": "a"}, "expected": "User is redirected to the home screen."}, {"name": "Login - SQL Injection Attempt", "description": "Verify that the system does not allow SQL injection attempts through the email field.", "input": {"email": "' OR '1'='1", "password": "anything"}, "expected": "Error message displayed: 'Invalid credentials.'"}, {"name": "Login - Mixed Case Email", "description": "Verify that the user can log in with an email address that has mixed case sensitivity.", "input": {"email": "User@Example.Com", "password": "validPassword123"}, "expected": "User is redirected to the home screen."}, {"name": "Login - Sign in with Google", "description": "Verify that the user can successfully log in using Google account credentials.", "input": {"googleAccount": "user@gmail.com"}, "expected": "User is authenticated via Google and redirected to the home screen."}]}, {"usecase": {"name": "Sign Up for Splitwise Account", "scenario": "Users can sign up for a Splitwise account using their details.", "actors": "New User", "preconditions": "User does not have an existing account and has internet access.", "steps": ["User opens the Splitwise app or website.", "User navigates to the 'Sign Up' screen.", "User enters their full name.", "User enters their email address.", "User enters their phone number.", "User sets a password.", "User confirms the password.", "User clicks on the 'Sign Up' button.", "System validates the provided information.", "System checks if the email or phone number is already registered.", "System sends a verification email if the email is not registered.", "User clicks the verification link in the email.", "System verifies the email and activates the account.", "User is redirected to the home screen upon successful sign-up."]}, "testcases": [{"name": "Sign Up - Valid Information", "description": "Verify that the user can successfully sign up with valid details.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "A verification email is sent, and the user is successfully registered."}, {"name": "Sign Up - Email Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered email.", "input": {"fullName": "John Doe", "email": "existinguser@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This email is already registered.'"}, {"name": "Sign Up - Phone Number Already Registered", "description": "Verify that the system shows an error when trying to sign up with an already registered phone number.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'This phone number is already registered.'"}, {"name": "Sign Up - Invalid Email Format", "description": "Verify that the user cannot sign up with an invalid email format.", "input": {"fullName": "John Doe", "email": "invalidemail", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid email format.'"}, {"name": "Sign Up - Invalid Phone Number Format", "description": "Verify that the user cannot sign up with an invalid phone number format.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "12345", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Invalid phone number format.'"}, {"name": "Sign Up - Weak Password", "description": "Verify that the system warns the user when entering a weak password.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "12345", "confirmPassword": "12345"}, "expected": "Error message displayed: 'Password is too weak.'"}, {"name": "Sign Up - Password Mismatch", "description": "Verify that the user cannot sign up when password and confirmation password do not match.", "input": {"fullName": "John Doe", "email": "johndoe@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "MismatchPassword"}, "expected": "Error message displayed: 'Passwords do not match.'"}, {"name": "Sign Up - Empty Fields", "description": "Verify that the user cannot sign up with any mandatory fields left empty.", "input": {"fullName": "", "email": "", "phone": "", "password": "", "confirmPassword": ""}, "expected": "Error message displayed: 'All fields are required.'"}, {"name": "Sign Up - Very Long Email", "description": "Verify that the system shows an error if the email exceeds the maximum length.", "input": {"fullName": "John Doe", "email": "averylongemailaddresswhichexceedsthemaximumlimit@example.com", "phone": "+1234567890", "password": "SecurePassword123", "confirmPassword": "SecurePassword123"}, "expected": "Error message displayed: 'Email is too long.'"}, {"name": "Sign Up - SQL Injection Attempt", "description": "Verify that the system prevents SQL injection attempts in the email field.", "input": {"fullName": "John Doe", "email": "' OR '1'='1", "phone": "+1234567890", "password": "anything", "confirmPassword": "anything"}, "expected": "Error message displayed: 'Invalid email format.'"}]}, {"usecase": {"name": "Add More Friends", "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Friends' screen.", "User enters the friend's name, contact number, or email address.", "System checks if the contact exists in the user's phone or is already a registered Splitwise user.", "If the contact exists in the user's phone, the system prompts the user to select the contact.", "If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account.", "If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message.", "User confirms the action, and the app link is sent as a text message to the provided contact number."]}, "testcases": [{"name": "Add Friend - Existing Splitwise User", "description": "Verify that the user can successfully add a friend who is already a registered Splitwise user.", "input": {"name": "John Doe", "contact": "1234567890"}, "expected": "Friend is added to the user's Splitwise account."}, {"name": "Add Friend - New Contact", "description": "Verify that the system prompts the user to send an app link when the friend is not a registered Splitwise user.", "input": {"name": "Jane Smith", "contact": "9876543210"}, "expected": "System prompts the user to send an app link via text message."}, {"name": "Add Friend - Select from Contacts", "description": "Verify that the user can select a friend from their contact list if the contact exists in their phone.", "input": {"contactList": ["9876543210", "1234567890"]}, "expected": "System shows the contact list, and the user can select a contact to add as a friend."}, {"name": "Add Friend - Email Input", "description": "Verify that the user can add a friend by entering their email address.", "input": {"email": "friend@example.com"}, "expected": "System checks if the email is registered with Splitwise and adds the friend if they have an account."}, {"name": "Send App Link - Unregistered Phone Number", "description": "Verify that the system sends an app download link via SMS when the user tries to add a friend using an unregistered phone number.", "input": {"name": "New Friend", "contact": "5555555555"}, "expected": "System prompts the user to send an SMS with an app download link."}]}, {"usecase": {"name": "Start a New Group", "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Start New Group' screen.", "User enters the group name.", "User uploads a group photo (optional).", "User selects a group type from the following options: Trip, Home, Couple, Other.", "If the selected group type is 'Trip', user must enter the start date and end date.", "User reviews the entered information.", "User clicks on the 'Create Group' button.", "System creates the group and redirects the user to the group page."]}, "testcases": [{"name": "Create Group - Valid Input", "description": "Verify that the user can successfully create a group with valid input.", "input": {"groupName": "Weekend Trip", "groupPhoto": "trip_photo.jpg", "groupType": "Trip", "startDate": "2024-10-01", "endDate": "2024-10-05"}, "expected": "Group is created successfully and user is redirected to the group page."}, {"name": "Create Group - Without Photo", "description": "Verify that the user can create a group without uploading a photo.", "input": {"groupName": "Family Gathering", "groupPhoto": null, "groupType": "Home"}, "expected": "Group is created successfully without a photo."}, {"name": "Create Group - Trip Type Without Dates", "description": "Verify that the group is created even when the trip type is selected without providing dates.", "input": {"groupName": "Beach Trip", "groupPhoto": "beach_photo.jpg", "groupType": "Trip", "startDate": null, "endDate": null}, "expected": "Group is created successfully without start and end dates."}, {"name": "Create Group - Invalid Group Name", "description": "Verify that the system allows the creation of a group with an empty or invalid name.", "input": {"groupName": "", "groupPhoto": "photo.jpg", "groupType": "Couple"}, "expected": "Group is created successfully with an empty name."}, {"name": "Create Group - Select Other Type", "description": "Verify that the user can create a group and select 'Other' as the type without providing additional information.", "input": {"groupName": "Project Team", "groupPhoto": "team_photo.jpg", "groupType": "Other"}, "expected": "Group is created successfully."}, {"name": "Create Group - Invalid Date Format", "description": "Verify that the group is created even when invalid dates are provided for a trip type.", "input": {"groupName": "Hiking Trip", "groupPhoto": "hiking_photo.jpg", "groupType": "Trip", "startDate": "2024-02-30", "endDate": "2024-01-01"}, "expected": "Group is created successfully."}]}, {"usecase": {"name": "Add Expense", "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.", "actors": "User", "preconditions": "User has installed the Splitwise app and is logged into their account.", "steps": ["User navigates to the 'Add Expense' screen.", "User selects one or more groups or friends to include in the expense.", "If a group is selected, all group members are automatically added to the expense list.", "User enters a description for the expense.", "User enters the total expense amount.", "User selects the member from the expense list who paid for the expense.", "User selects a split category from the following options:", "1. Equally", "2. Unequally", "3. By Percentages", "4. By Shares", "5. By Adjustments (if selected, the user enters specific amounts for each member in the list).", "User reviews the entered information.", "User clicks on the 'Add Expense' button.", "System verifies the input data and adds the expense to the selected groups or friends."]}, "testcases": [{"name": "Add Expense - Valid Input", "description": "Verify that the user can successfully add an expense with valid input.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner at the restaurant", "amount": 100, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Expense is added successfully and shared among selected members."}, {"name": "Add Expense - Unequally Split", "description": "Verify that the user can add an expense with an unequally split amount.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Grocery Shopping", "amount": 60, "payer": "Friend B", "splitCategory": "Unequally", "amounts": {"Friend A": 20, "Friend B": 30, "Friend C": 10}}, "expected": "Expense is added successfully with specified amounts for each member."}, {"name": "Add Expense - Percentage Split", "description": "Verify that the user can add an expense with a percentage split.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Concert Tickets", "amount": 200, "payer": "Friend A", "splitCategory": "By Percentages", "percentages": {"Friend A": 50, "Friend B": 50}}, "expected": "Expense is added successfully with specified percentages for each member."}, {"name": "Add Expense - By Shares", "description": "Verify that the user can add an expense by specifying shares.", "input": {"selectedMembers": ["Friend A", "Friend B", "Friend C"], "description": "Trip Expenses", "amount": 300, "payer": "Friend C", "splitCategory": "By Shares", "shares": {"Friend A": 1, "Friend B": 2, "Friend C": 3}}, "expected": "Expense is added successfully based on specified shares."}, {"name": "Add Expense - By Adjustments", "description": "Verify that the user can add an expense using adjustments for each member.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Movie Night", "amount": 50, "payer": "Friend B", "splitCategory": "By Adjustments", "amounts": {"Friend A": 30, "Friend B": 20}}, "expected": "Expense is added successfully with specified adjustments for each member."}, {"name": "Add Expense - No Payer Selected", "description": "Verify that the system prompts an error if no payer is selected.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Dinner", "amount": 80, "payer": null, "splitCategory": "Equally"}, "expected": "Error message displayed: 'Please select a payer for the expense.'"}, {"name": "Add Expense - Missing Description", "description": "Verify that the system prompts an error if the description is missing.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "", "amount": 50, "payer": "Friend A", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Description cannot be empty.'"}, {"name": "Add Expense - Negative Amount", "description": "Verify that the system prompts an error if a negative amount is entered.", "input": {"selectedMembers": ["Friend A", "Friend B"], "description": "Refund", "amount": -30, "payer": "Friend B", "splitCategory": "Equally"}, "expected": "Error message displayed: 'Amount cannot be negative.'"}]}, {"usecase": {"name": "View Activity Feed", "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has recorded activities.", "steps": ["User navigates to the 'Activity' section.", "System displays a chronological list of all activities, including expenses added, payments made, and friends added.", "User can filter activities by type (e.g., expenses, payments, friends).", "User can search for specific activities using a search bar.", "User can click on any activity for more details.", "User can edit the selected activity.", "User can delete an activity from the feed.", "User can return to the main activity list."]}, "testcases": [{"name": "View Recent Activities", "description": "Verify that the user can view a list of recent activities.", "input": {}, "expected": "User sees a chronological list of activities."}, {"name": "Filter Activities by Date Range", "description": "Verify that the user can filter activities by a specific date range.", "input": {"startDate": "2024-01-01", "endDate": "2024-01-31"}, "expected": "User sees activities from January 2024 only."}, {"name": "Filter Activities by Type", "description": "Verify that the user can filter activities by type (e.g., expenses, payments).", "input": {"activityType": "payments"}, "expected": "User sees only payment-related activities."}, {"name": "View Activity Details", "description": "Verify that the user can view details of a specific activity.", "input": {"activityId": 1}, "expected": "User sees detailed information about the selected activity."}, {"name": "Filter Activities by Friends", "description": "Verify that the user can filter activities by specific friends.", "input": {"friendEmail": "friend@example.com"}, "expected": "System displays activities related to the specified friend."}, {"name": "Delete Activity", "description": "Verify that the user can delete an activity from their feed.", "input": {"activityId": 1}, "expected": "Activity is removed from the activity feed."}, {"name": "Edit Activity", "description": "Verify that the user can edit an existing activity.", "input": {"activityId": 1, "newDescription": "Updated Dinner Expense", "newAmount": 70}, "expected": "Activity is updated with the new description and amount."}, {"name": "Search Activity", "description": "Verify that the user can search for a specific activity using keywords.", "input": {"searchTerm": "Dinner"}, "expected": "User sees a list of activities matching the search term."}, {"name": "No Activities Available", "description": "Verify that the user receives a message when there are no activities.", "input": {}, "expected": "Message displayed: 'No activities available.'"}]}, {"usecase": {"name": "View Groups and Non-Group Expenses", "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has created or joined groups.", "steps": ["User navigates to the 'Groups' section.", "System displays a list of groups the user is part of.", "User can see the total amount owed to them by each group.", "User can select a group to view detailed expenses within that group.", "User can also view non-group expenses that are related to their account.", "User can click on any non-group expense to see further details."]}, "testcases": [{"name": "View Groups List", "description": "Verify that the user can view a list of all groups they are part of.", "input": {}, "expected": "System displays a list of groups the user belongs to."}, {"name": "View Amount Owed by Groups", "description": "Verify that the user can see the total amount owed by each group.", "input": {}, "expected": "System displays the total amount owed to the user by each group."}, {"name": "Select Group to View Expenses", "description": "Verify that the user can select a group to view detailed expenses.", "input": {"groupId": 1}, "expected": "System displays a detailed list of expenses within the selected group."}, {"name": "View Non-Group Expenses", "description": "Verify that the user can view expenses that are not associated with any group.", "input": {}, "expected": "System displays a list of non-group expenses."}, {"name": "View Details of Non-Group Expense", "description": "Verify that the user can click on a non-group expense to see its details.", "input": {"expenseId": 1}, "expected": "System displays detailed information about the selected non-group expense."}, {"name": "No Groups Found", "description": "Verify that a message is displayed if the user is not part of any groups.", "input": {}, "expected": "Message displayed: 'You are not part of any groups.'"}, {"name": "No Non-Group Expenses Found", "description": "Verify that a message is displayed if there are no non-group expenses.", "input": {}, "expected": "Message displayed: 'No non-group expenses found.'"}]}, {"usecase": {"name": "View Group Details", "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.", "actors": "User", "preconditions": "User has logged into their Splitwise account and is a member of at least one group.", "steps": ["User navigates to the 'Groups' section.", "User selects a specific group from their list of groups.", "System displays the group's details, including the group name, type, and photo.", "User can view the list of all group members.", "User can see the total expenses shared in the group.", "User can view individual expense history related to the group.", "User can view the group's settings and options to edit or remove the group.", "User can invite new members to the group via email or a link.", "User can show individual settings for each member, such as their contribution and notifications.", "User can remove any individual from the group.", "User can view a summary of each member's contribution to the group expenses.", "User can leave the group if they wish to do so."]}, "testcases": [{"name": "View Group Details", "description": "Verify that the user can view detailed information about a selected group.", "input": {"groupId": 1}, "expected": "User sees the group's details, including name, type, photo, and members."}, {"name": "View Group Members", "description": "Verify that the user can view a list of all members in the group.", "input": {"groupId": 1}, "expected": "User sees a list of all group members."}, {"name": "View Total Expenses", "description": "Verify that the user can see the total expenses shared in the group.", "input": {"groupId": 1}, "expected": "User sees the total amount of expenses shared in the group."}, {"name": "View Individual Expense History", "description": "Verify that the user can view individual expense history related to the group.", "input": {"groupId": 1}, "expected": "User sees a list of individual expenses in the group."}, {"name": "Edit Group Settings", "description": "Verify that the user can access and edit group settings.", "input": {"groupId": 1}, "expected": "User can change the group name, type, or photo."}, {"name": "Invite New Members via Email", "description": "Verify that the user can invite new members to the group via email.", "input": {"groupId": 1, "newMemberEmail": "newfriend@example.com"}, "expected": "Invitation is sent to the new member via email."}, {"name": "Invite New Members via Link", "description": "Verify that the user can invite new members to the group via a shareable link.", "input": {"groupId": 1}, "expected": "User receives a shareable link to invite new members."}, {"name": "Show Individual Settings", "description": "Verify that the user can view individual settings for each member.", "input": {"groupId": 1, "memberId": 2}, "expected": "User sees the individual settings for the selected member."}, {"name": "Remove Member from Group", "description": "Verify that the user can remove an individual from the group.", "input": {"groupId": 1, "memberId": 2}, "expected": "Selected member is removed from the group."}, {"name": "View Member Contributions", "description": "Verify that the user can view a summary of each member's contribution to the group expenses.", "input": {"groupId": 1}, "expected": "User sees a summary of contributions for each member."}, {"name": "Leave Group", "description": "Verify that the user can leave the group.", "input": {"groupId": 1}, "expected": "User successfully leaves the group."}]}, {"usecase": {"name": "View Friends and Balances", "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has added friends.", "steps": ["User navigates to the 'Friends' section.", "System displays a list of all friends added by the user.", "User can see the total amount owed to each friend.", "User can see the total amount owed by each friend.", "User can click on a specific friend to view detailed transaction history with that friend.", "User can choose to make a payment to a specific friend.", "User selects a payment method and enters the amount to pay.", "User confirms the payment.", "System updates the balances accordingly and displays a confirmation message.", "User can return to the main friends list."]}, "testcases": [{"name": "View Friends List", "description": "Verify that the user can view a list of all friends.", "input": {}, "expected": "System displays a list of all friends added by the user."}, {"name": "View Amount Owed to Friends", "description": "Verify that the user can see the total amount owed to each friend.", "input": {}, "expected": "System displays the total amount owed by the user to each friend."}, {"name": "View Amount Owed by Friends", "description": "Verify that the user can see the total amount owed by each friend.", "input": {}, "expected": "System displays the total amount owed to the user by each friend."}, {"name": "Select Friend to View Transaction History", "description": "Verify that the user can select a friend to view detailed transaction history.", "input": {"friendId": 1}, "expected": "System displays detailed transaction history with the selected friend."}, {"name": "Pay Friend - Valid Payment", "description": "Verify that the user can successfully make a payment to a friend.", "input": {"friendId": 1, "amount": 20, "paymentMethod": "PayPal"}, "expected": "System updates the balance and displays a confirmation message."}, {"name": "Pay Friend - Insufficient Amount", "description": "Verify that the user cannot pay an amount greater than what they owe.", "input": {"friendId": 1, "amount": 1000, "paymentMethod": "PayPal"}, "expected": "Error message displayed: 'Amount exceeds the total owed.'"}, {"name": "No Friends Found", "description": "Verify that a message is displayed if the user has no friends added.", "input": {}, "expected": "Message displayed: 'You have no friends added.'"}, {"name": "Return to Friends List", "description": "Verify that the user can return to the main friends list from the transaction history.", "input": {}, "expected": "User is returned to the main friends list."}]}, {"usecase": {"name": "View Friends Details", "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.", "actors": "User", "preconditions": "User has logged into their Splitwise account and has friends added.", "steps": ["User navigates to the 'Friends' section.", "User selects a specific friend from their friend list.", "System displays the friend's details, including contact information and mutual groups.", "User can view the friend's expense history with the user.", "User can see all mutual groups they share with the friend.", "User has the option to 'Settle Up' to clear outstanding balances with the friend.", "User can send a reminder to the friend for pending payments.", "User can export the friend's expense data as a spreadsheet.", "User can manage friendship settings (block, report, remove) in the settings option.", "User can view detailed activity related to the friend."]}, "testcases": [{"name": "View Friend Details", "description": "Verify that the user can view detailed information about a selected friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees the friend's details, including contact info and mutual groups."}, {"name": "Settle Up with Friend", "description": "Verify that the user can settle up outstanding balances with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System processes the settlement and updates the balance."}, {"name": "Send Reminder", "description": "Verify that the user can send a payment reminder to the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "System sends a reminder notification to the friend."}, {"name": "Export Friend's Expense Data", "description": "Verify that the user can export the friend's expense data as a spreadsheet.", "input": {"friendEmail": "friend@example.com"}, "expected": "System generates and downloads a spreadsheet with the friend's expense data."}, {"name": "View Mutual Groups", "description": "Verify that the user can view all mutual groups shared with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of mutual groups with the friend."}, {"name": "Block Friend", "description": "Verify that the user can block the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User successfully blocks the friend."}, {"name": "Report Friend", "description": "Verify that the user can report the friend for inappropriate behavior.", "input": {"friendEmail": "friend@example.com", "reason": "Inappropriate behavior"}, "expected": "System processes the report and notifies the user."}, {"name": "Remove Friend", "description": "Verify that the user can remove the friend from their friend list.", "input": {"friendEmail": "friend@example.com"}, "expected": "Friend is removed from the user's friend list."}, {"name": "View Shared Expense History", "description": "Verify that the user can view the shared expense history with the friend.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees a list of shared expenses with the friend."}, {"name": "View Activity Related to Friend", "description": "Verify that the user can view activity related to the friend, including shared groups and expenses.", "input": {"friendEmail": "friend@example.com"}, "expected": "User sees detailed activity related to the friend."}]}, {"usecase": {"name": "Manage Account Settings", "scenario": "Users can edit their account information, manage notifications, and access support options.", "actors": "User", "preconditions": "User has logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User can edit their account information (e.g., email, password).", "User can scan a QR code to add friends or share their account details.", "User can view and subscribe to Splitwise Pro for additional features.", "User can adjust email notification settings.", "User can configure device and push notification settings.", "User can access security settings to enable two-factor authentication.", "User can rate the Splitwise app.", "User can contact Splitwise support for assistance."]}, "testcases": [{"name": "Edit Account Information", "description": "Verify that the user can successfully edit their account information.", "input": {"newEmail": "newuser@example.com", "newPassword": "NewPassword123"}, "expected": "System confirms that account information has been updated."}, {"name": "Scan QR Code", "description": "Verify that the user can scan a QR code to add friends.", "input": {"qrCodeData": "sampleQRCodeData"}, "expected": "System adds the friend associated with the QR code."}, {"name": "Subscribe to Splitwise Pro", "description": "Verify that the user can successfully subscribe to Splitwise Pro.", "input": {"paymentMethod": "Credit Card"}, "expected": "System confirms subscription to Splitwise Pro and unlocks additional features."}, {"name": "Adjust Email Notification Settings", "description": "Verify that the user can change their email notification preferences.", "input": {"notificationsEnabled": false}, "expected": "System confirms that email notifications have been disabled."}, {"name": "Configure Device Notifications", "description": "Verify that the user can adjust push notification settings.", "input": {"pushNotificationsEnabled": true}, "expected": "System confirms that push notifications are enabled."}, {"name": "Access Security Settings", "description": "Verify that the user can access and modify security settings.", "input": {"twoFactorAuthEnabled": true}, "expected": "System confirms that two-factor authentication has been enabled."}, {"name": "Rate Splitwise App", "description": "Verify that the user can submit a rating for the Splitwise app.", "input": {"rating": 5, "feedback": "Great app for managing expenses!"}, "expected": "System confirms that the rating and feedback have been submitted."}, {"name": "Contact Splitwise Support", "description": "Verify that the user can contact Splitwise support for assistance.", "input": {"message": "I need help with my account."}, "expected": "System confirms that the support request has been sent."}]}, {"usecase": {"name": "Logout from Account", "scenario": "Users can log out of their Splitwise account to ensure their account's security.", "actors": "User", "preconditions": "User is currently logged into their Splitwise account.", "steps": ["User navigates to the 'Account' section.", "User selects the 'Logout' option.", "System prompts the user to confirm the logout action.", "User confirms the logout action.", "System logs the user out and redirects them to the login screen.", "User can no longer access their account without logging in again."]}, "testcases": [{"name": "Logout - Successful Logout", "description": "Verify that the user can successfully log out of their account.", "input": {}, "expected": "System redirects the user to the login screen."}, {"name": "Logout - Cancel Logout", "description": "Verify that the user can cancel the logout action.", "input": {"confirmLogout": false}, "expected": "System remains on the current screen and the user remains logged in."}, {"name": "Logout - Session Invalidated", "description": "Verify that the user's session is invalidated after logging out.", "input": {}, "expected": "User cannot access any account features without logging in."}]}, {"usecase": {"author": "2005004", "name": "Post New Sale Ad", "scenario": "User posts a new advertisement for selling an item, service, or property.", "actors": "Seller", "preconditions": "Seller has an account and is logged in.", "steps": ["Seller selects 'Post Your Ad' option", "Seller selects 'Sell an item, property or service' option", "Seller selects an item or service catergory from shown options", "Seller selects a sub-catergory from shown options", "Seller selects a location from shown options", "Seller fills up necessary fields with relevant information (including price and image)", "Seller selects 'Post Ad' option and submits the ad for review"]}, "testcases": [{"name": "Valid Ad Submission", "description": "Verify that the seller can successfully post a valid ad.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": 50000, "description": "Slightly used, no scratches.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents submission of an ad with missing required fields.", "input": {"adDetails": {"title": "", "condition": "old", "category": "Electronics", "price": 500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Invalid Price", "description": "Verify that the system rejects an ad submission with an invalid price (e.g., negative value).", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": "iphone.jpg"}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}, {"name": "Missing Image", "description": "Verify that the system rejects an ad submission without any imaged attached.", "input": {"adDetails": {"title": "Used iPhone 12", "condition": "old", "category": "Electronics", "price": -500, "description": "Slightly used.", "image": ""}}, "expected": {"outcome": "Ad submission failed", "status": "Rejected"}}]}, {"usecase": {"author": "2005026", "name": "Search for Items", "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.", "actors": "Buyer", "preconditions": "Buyer is on the homepage of the platform.", "steps": ["Buyer selects 'All ads' option", "Buyer selects category of desired item", "(Optional) Buyer applies filters (type of ad, type of poster, location)", "(Optional) Buyer searches specific advertisement titles in the search bar", "Buyer selects a desired advertisement"]}, "testcases": [{"name": "Valid Search with All Options", "description": "Verify that the system returns relevant ads for a valid input in all options.", "input": {"searchTerm": "iPhone", "filters": {"category": "Electronics", "adType": "urgent", "posterType": "member", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "Valid Search with Some Options", "description": "Verify that the system returns relevant ads for a valid input in some options, and no input in other options.", "input": {"searchTerm": "", "filters": {"category": "Electronics", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "Relevant ads displayed", "adCount": "> 0"}}, {"name": "No Results for Search", "description": "Verify that the system handles a search where no results match the search term and filters.", "input": {"searchTerm": "Tesla", "filters": {"category": "Vehicle", "adType": "", "posterType": "", "location": "Dhaka"}}, "expected": {"outcome": "No ads found", "adCount": "0"}}, {"name": "Invalid Search Input", "description": "Verify that the system handles invalid search input (e.g., special characters or empty search).", "input": {"searchTerm": "!!@@$$", "filters": {"category": "", "adType": "", "posterType": "", "location": ""}}, "expected": {"outcome": "No ads found", "adCount": "0"}}]}, {"usecase": {"author": "2005008", "name": "Boost Ad Visibility", "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.", "actors": "Seller", "preconditions": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.", "steps": ["Seller logs into their Bikroy.com account", "Seller navigates to 'My Ads' section from the account dashboard", "Seller selects the ad they wish to boost", "Seller clicks on 'Boost Ad' option next to the ad", "Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight')", "Seller can select one or more boosting options using +", "Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days')", "Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330')", "Seller clicks 'Continue'", "Seller selects a payment method 'Pay online' or 'Pay by voucher'", "Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL)", "Seller clicks 'Continue'", "Seller enters payment details and confirms the transaction", "System processes the payment and activates the boost feature", "Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight')", "System sends a confirmation message and updates the ad\u2019s status to reflect the boost (e.g., 'Bumped', 'Urgent')"]}, "testcases": [{"name": "Valid Bump Up Boost", "description": "Verify that a seller can successfully apply the 'Bump Up' boost to an ad.", "input": {"boostOption": "Bump Up", "paymentMethod": "Visa", "adID": "A12345"}, "expected": {"outcome": "Ad bumped successfully", "status": "Bumped", "confirmationMessage": "Your ad has been bumped to the top of the listings."}}, {"name": "Valid Urgent Ad Boost", "description": "Verify that a seller can successfully mark their ad as 'Urgent' using the boost option.", "input": {"boostOption": "Urgent", "paymentMethod": "MasterCard", "adID": "A54321"}, "expected": {"outcome": "Ad marked as urgent successfully", "status": "Urgent", "confirmationMessage": "Your ad has been marked as Urgent and will receive more visibility."}}, {"name": "Insufficient Funds for Boost", "description": "Verify that the system prevents boosting when the seller has insufficient funds or balance.", "input": {"boostOption": "Bump Up", "paymentMethod": "bKash", "adID": "A98765", "balance": 0}, "expected": {"outcome": "Boost failed", "error": "Insufficient balance or funds", "status": "Payment Declined"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods (e.g., incorrect card details).", "input": {"boostOption": "Urgent", "paymentMethod": "Visa", "adID": "A76543", "paymentDetails": {"cardNumber": "1234 5678 9876 5432", "expiryDate": "12/23", "cvv": "123"}}, "expected": {"outcome": "Boost failed", "error": "Invalid card details", "status": "Payment Declined"}}, {"name": "Expired Ad Boost Attempt", "description": "Verify that the system prevents boosting for an expired or inactive ad.", "input": {"boostOption": "Urgent", "paymentMethod": "Rocket", "adID": "A65432", "adStatus": "Expired"}, "expected": {"outcome": "Boost failed", "error": "Ad is expired and cannot be boosted", "status": "Boost Unavailable"}}]}, {"usecase": {"author": "2005003", "name": "Post Job", "scenario": "An employer posts a new job listing.", "actors": "Employer", "preconditions": "Employer is logged in and has the necessary permissions to post jobs.", "steps": ["Employer navigates to the job posting page", "Employer fills in job details such as title, description, location, category, and optionally, years of experience", "Employer submits the job for review"]}, "testcases": [{"name": "Valid Job Posting", "description": "Verify that an employer can successfully post a valid job listing with all necessary details.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": ""}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Job Posting with Experience", "description": "Verify that the system accepts an optional 'years of experience' field when provided by the employer.", "input": {"jobDetails": {"title": "Senior Software Engineer", "category": "IT", "location": "Dhaka", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission successful", "status": "Under Review"}}, {"name": "Missing Required Fields", "description": "Verify that the system prevents posting a job with missing required fields.", "input": {"jobDetails": {"title": "", "category": "IT", "location": "Dhaka", "description": "Looking for software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Missing Required Fields"}}, {"name": "Invalid Location", "description": "Verify that the system prevents posting a job with an invalid location.", "input": {"jobDetails": {"title": "Software Engineer", "category": "IT", "location": "InvalidLocation", "description": "Looking for experienced software engineers.", "yearsOfExperience": 5}}, "expected": {"outcome": "Job submission failed", "status": "Error: Invalid Location"}}]}, {"usecase": {"author": "2005007", "name": "Apply for a Job", "scenario": "A job seeker applies for a job.", "actors": "Job Seeker", "preconditions": "Job seeker is logged in and viewing a job listing.", "steps": ["Job seeker selects a job listing", "Job seeker clicks 'Apply Now'", "Job seeker submits their application with a resume"]}, "testcases": [{"name": "Successful Job Application", "description": "Verify that a job seeker can successfully apply for a job.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Application submitted successfully", "status": "Success"}}, {"name": "Failed Application Without Resume", "description": "Verify that the system prevents the user from applying for a job without a resume.", "input": {"jobID": "J12345", "resume": ""}, "expected": {"outcome": "Application failed", "status": "Error: Resume Required"}}, {"name": "Failed Application Without Login", "description": "Verify that the system prompts the user to log in if they try to apply without being logged in.", "input": {"jobID": "J12345", "resume": "resume.pdf"}, "expected": {"outcome": "Login required", "status": "Prompted to log in"}}]}, {"usecase": {"author": "2005003", "name": "Look for Talents", "scenario": "An employer searches for and views profiles of job seekers.", "actors": "Employer", "preconditions": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.", "steps": ["Employer navigates to the profile database", "(Optional) Employer enters search criteria such as job category, location, or keywords", "(Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.)", "Employer views the profiles of job seekers and adds to shortlist", "(Optional) Employer with membership unlocks the full profile of selected job seekers"]}, "testcases": [{"name": "Valid Talent Search", "description": "Verify that an employer can search for job seekers with valid search criteria and add profiles to the shortlist.", "input": {"searchCriteria": {"category": "IT", "location": "Dhaka", "keywords": "Software Engineer"}}, "expected": {"outcome": "Relevant job seeker profiles displayed and added to the shortlist", "status": "Success"}}, {"name": "Talent Search Without Filters", "description": "Verify that an employer can search without any filters and see a general list of profiles.", "input": {"searchCriteria": {}}, "expected": {"outcome": "A general list of job seeker profiles is displayed", "status": "Success"}}, {"name": "Filter Search Results", "description": "Verify that the employer can filter search results by various criteria (e.g., education level, experience).", "input": {"searchCriteria": {"category": "IT", "filters": {"experience": "5+ years", "educationLevel": "Bachelor's"}}}, "expected": {"outcome": "Filtered profiles matching the criteria are displayed", "status": "Success"}}, {"name": "Unlock Full Profile with Membership", "description": "Verify that an employer with a membership can unlock and view the full profile of a job seeker.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Active"}, "expected": {"outcome": "Full profile of the job seeker is unlocked and displayed", "status": "Success"}}, {"name": "Attempt to Unlock Profile Without Membership", "description": "Verify that an employer without a membership is prompted to upgrade when trying to unlock a full profile.", "input": {"jobSeekerID": "JS12345", "membershipStatus": "Inactive"}, "expected": {"outcome": "Prompt to upgrade to membership is displayed", "status": "Upgrade Required"}}]}, {"usecase": {"author": "2005018", "name": "Membership Registration", "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.", "actors": "User", "preconditions": "User is on the membership registration page and has not registered previously.", "steps": ["User navigates to the 'Sign Up' page.", "System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.).", "User selects a business category (e.g., 'Mobile Accessories').", "System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories.", "User selects a membership plan (e.g., 'Plus - Monthly').", "User fills in their business information, such as Business Name, Email, and Phone Number.", "User clicks 'Continue to Pay'.", "System redirects the user to the payment page.", "User completes the payment for the selected plan.", "System confirms the payment and activates the user's account with the selected business category and membership plan."], "postconditions": "User becomes a registered member with access to features according to their selected plan and business category."}, "testcases": [{"name": "Valid Registration with Business Category and Plan", "description": "Verify that a user can register successfully with valid details, select a business category, and choose a membership plan.", "input": {"registrationDetails": {"businessCategory": "Mobile Accessories", "membershipPlan": "Plus - Monthly", "businessName": "XYZ Mobile Shop", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Monthly Plan"}}, {"name": "Invalid Registration - Missing Business Category", "description": "Verify that the system prevents registration if the user does not select a business category.", "input": {"registrationDetails": {"businessCategory": "", "membershipPlan": "Plus - Quarterly", "businessName": "ABC Electronics", "email": "example@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration failed", "error": "Business category is required"}}, {"name": "Invalid Registration - Missing Payment", "description": "Verify that the system prevents registration if the user does not complete the payment.", "input": {"registrationDetails": {"businessCategory": "Fashion & Beauty", "membershipPlan": "Premium - Yearly", "businessName": "FashionHub", "email": "fashion@domain.com", "phoneNumber": "0123456789"}, "paymentDetails": {"status": "Not Completed"}}, "expected": {"outcome": "Registration failed", "error": "Payment required to complete registration"}}, {"name": "Valid Registration - Business Category and Yearly Plan", "description": "Verify that a user can successfully register with a Yearly plan and valid business category selection.", "input": {"registrationDetails": {"businessCategory": "Cars", "membershipPlan": "Plus - Yearly", "businessName": "CarHub", "email": "carhub@domain.com", "phoneNumber": "0987654321"}, "paymentDetails": {"status": "Completed"}}, "expected": {"outcome": "Registration successful", "status": "Email Sent", "planDetails": "Plus - Yearly Plan"}}]}, {"usecase": {"name": "Creation of New Workspace", "scenario": "User creates a new workspace from their account.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User does not exceed the maximum number of workspaces allowed."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User selects 'Create or Join Workspace'.", "User enters the workspace name and email domain, if applicable.", "User clicks 'Create' to complete the process."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Creation", "description": "Verify that the user can successfully create a new workspace with a unique name.", "input": {"workspaceName": "ISD A1 G-4", "emailDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Duplicate Workspace Name", "description": "Verify that creating a workspace with an existing name does not matter", "input": {"workspaceName": "Existing Workspace"}, "expected": {"outcome": "Workspace created successfully.", "status": "Created"}}, {"name": "Exceeding Workspace Limit", "description": "Verify that the user cannot create more workspaces than their plan allows.", "input": {"workspaceName": "New Workspace"}, "expected": {"outcome": "Workspace creation failed due to exceeding workspace limit.", "status": "Not Created"}}]}, {"usecase": {"name": "Switching Workspaces", "scenario": "User switches between multiple workspaces they are a part of.", "actors": "User", "preconditions": ["User is a member of multiple workspaces.", "User is logged in."], "steps": ["User clicks on their profile picture in the top-left corner.", "User selects the workspace they want to switch to from the dropdown menu.", "User is redirected to the selected workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Switch", "description": "Verify that the user can successfully switch to another workspace.", "input": {"workspaceName": "Development Workspace"}, "expected": {"outcome": "Workspace switched successfully.", "status": "Switched"}}, {"name": "Switch to Unavailable Workspace", "description": "Verify that the user cannot switch to a workspace they have left or been removed from.", "input": {"workspaceName": "Unavailable Workspace"}, "expected": {"outcome": "Workspace switch failed due to unavailable access.", "status": "Not Switched"}}, {"name": "Switch to Same Workspace", "description": "Verify that selecting the current workspace does not reload or cause any issues.", "input": {"workspaceName": "Current Workspace"}, "expected": {"outcome": "No action taken; remains in the same workspace.", "status": "No Change"}}]}, {"usecase": {"name": "Joining an Existing Workspace", "scenario": "User joins an existing workspace by invitation or allowed domain.", "actors": "User", "preconditions": ["User has received an invitation or has an email matching the allowed domain.", "User is logged into their Notion account."], "steps": ["User clicks on the invitation link or logs in with an email matching the allowed domain.", "User accepts the invitation to join the workspace."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Join via Invitation", "description": "Verify that the user can join the workspace successfully using an invitation link.", "input": {"invitationLink": "valid-invite-link"}, "expected": {"outcome": "Joined workspace successfully.", "status": "Joined"}}, {"name": "Join with Invalid Invitation", "description": "Verify that the user cannot join the workspace using an expired or invalid invitation link.", "input": {"invitationLink": "invalid-invite-link"}, "expected": {"outcome": "Join failed due to invalid invitation.", "status": "Not Joined"}}, {"name": "Join via Allowed Domain", "description": "Verify that the user can join the workspace using an email with an allowed domain.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Joined workspace successfully using allowed domain.", "status": "Joined"}}, {"name": "Join via Restricted Domain", "description": "Verify that the user cannot join the workspace using an email with a restricted domain.", "input": {"email": "user@restricteddomain.com"}, "expected": {"outcome": "Join failed due to restricted domain.", "status": "Not Joined"}}]}, {"usecase": {"name": "Update Workspace Name", "scenario": "User updates the name of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User enters workspace name"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Name Selection", "description": "Verify that the user can successfully update the workspace name with a valid input.", "input": {"workspaceName": "New Workspace Name"}, "expected": {"outcome": "Workspace name updated", "status": "Approved"}}, {"name": "Empty Workspace Name", "description": "Verify that the user cannot update the workspace name with an empty input.", "input": {"workspaceName": ""}, "expected": {"outcome": "Workspace name not updated", "status": "Rejected"}}]}, {"usecase": {"name": "Upload Workspace Icon", "scenario": "User updates the icon of current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User selects workspace icon"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace Icon Selection", "description": "Verify that the user can successfully update the workspace icon with a valid file.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "1MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon updated", "status": "Approved"}}, {"name": "Empty Workspace Icon", "description": "Verify that the user cannot update the workspace icon without selecting a file.", "input": {"workspaceIcon": "", "fileSize": "0MB", "mimeType": ""}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Invalid Workspace Icon File Type", "description": "Verify that the user cannot update the workspace icon with an invalid file type.", "input": {"workspaceIcon": "icon.exe", "fileSize": "1MB", "mimeType": "application/octet-stream"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Corrupted Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a valid file type but corrupted data.", "input": {"workspaceIcon": "icon.png", "fileSize": "1MB", "mimeType": "text/plain"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}, {"name": "Large Workspace Icon", "description": "Verify that the user cannot update the workspace icon with a file that exceeds the maximum file size.", "input": {"workspaceIcon": "icon.jpg", "fileSize": "10MB", "mimeType": "image/jpeg"}, "expected": {"outcome": "Workspace icon not updated", "status": "Rejected"}}]}, {"usecase": {"name": "Delete Workspace", "scenario": "User deletes the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User types 'Workspace Name' confirms deletion"], "author_student_id": "2005023"}, "testcases": [{"name": "Correct Workspace Name", "description": "Verify that the user can successfully delete the workspace with the correct workspace name.", "input": {"workspaceName": "Workspace Name"}, "expected": {"outcome": "Workspace deleted", "status": "Approved"}}, {"name": "Incorrect Workspace Name", "description": "Verify that the user cannot delete the workspace with an incorrect workspace name.", "input": {"workspaceName": "Incorrect Name"}, "expected": {"outcome": "Workspace not deleted", "status": "Rejected"}}]}, {"usecase": {"name": "Leaving a Workspace", "scenario": "User leaves a workspace they are a member of.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User is a member of the workspace."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on the 'Leave Workspace' button.", "User confirms the action in the dialog box."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Workspace Leave", "description": "Verify that the user can successfully leave a workspace they are a member of.", "input": {"workspaceName": "Project Workspace"}, "expected": {"outcome": "User left the workspace successfully.", "status": "Left"}}, {"name": "Leave Non-Member Workspace", "description": "Verify that the user cannot leave a workspace they are not a member of.", "input": {"workspaceName": "Non-Member Workspace"}, "expected": {"outcome": "Leave action failed because the user is not a member.", "status": "Not Left"}}, {"name": "Cancel Leave Workspace", "description": "Verify that the user can cancel the leave action in the confirmation dialog.", "input": {"action": "Cancel"}, "expected": {"outcome": "Leave action canceled.", "status": "Not Left"}}]}, {"usecase": {"name": "Adding Another Account", "scenario": "User adds another email account to their Notion account.", "actors": "User", "preconditions": ["User is logged into their primary Notion account.", "User has access to the secondary email account."], "steps": ["User navigates to 'Settings & Members' in the sidebar.", "User clicks on 'My Account' and selects 'Add Email'.", "User enters the new email address and verifies it through the email link sent.", "User confirms the new email as added to their account."], "author_student_id": "2005023"}, "testcases": [{"name": "Successful Account Addition", "description": "Verify that the user can successfully add another email account to their Notion account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "New email added to the account successfully.Now all the workspaces related to the accounts are accessible from the Notion account", "status": "Added"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents adding an email with an invalid format.", "input": {"newEmail": "invalid-email"}, "expected": {"outcome": "Failed to add new email due to invalid format.", "status": "Not Added"}}, {"name": "Email Already Linked", "description": "Verify that the system prevents adding an email that is already linked to the account.", "input": {"newEmail": "2005017existing@gmail.com"}, "expected": {"outcome": "No action taken; remains in the same", "status": "No change"}}, {"name": "Verify Email for Account Addition", "description": "Verify that the user must verify the email through the link sent to successfully add the account.", "input": {"newEmail": "amimulamim@gmail.com"}, "expected": {"outcome": "Email added successfully after verification.", "status": "Verified and Added"}}]}, {"usecase": {"name": "Import Workspace", "scenario": "User imports entire workspace data from a file or cloud storage", "actors": "User", "preconditions": "User is logged in", "steps": ["User uploads the file to be imported", "Alternatively, user selects a cloud storage"], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Workspace File", "description": "Verify that the user can successfully import the workspace with a valid file.", "input": {"workspaceFile": "workspace.csv"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace File", "description": "Verify that the user cannot import the workspace with an invalid file.", "input": {"workspaceFile": "workspace.mkv"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}, {"name": "Valid Workspace Cloud Storage", "description": "Verify that the user can successfully import the workspace from a valid cloud storage.", "input": {"workspaceCloud": "Google Drive"}, "expected": {"outcome": "Workspace imported", "status": "Approved"}}, {"name": "Invalid Workspace Cloud Storage", "description": "Verify that the user cannot import the workspace from an invalid cloud storage.", "input": {"workspaceCloud": "Moodle"}, "expected": {"outcome": "Workspace not imported", "status": "Rejected"}}]}, {"usecase": {"name": "Add Member to Workspace", "scenario": "User adds a member to the current workspace", "actors": "User", "preconditions": "User is logged in", "steps": ["User searches the email of the member to be added", "User selects the person to be added or alternatively sends an invitation email"], "author_student_id": "2005023"}, "testcases": [{"name": "Invalid Email", "description": "Verify that the user cannot send an invitation to a member with an invalid email.", "input": {"email": "inval$@#idemail@aasda.23"}, "expected": {"outcome": "Invitation not sent", "status": "Rejected"}}, {"name": "Person Already in Workspace", "description": "Verify that the user cannot add a person to the workspace who is already a member.", "input": {"email": "alreadyadded@gmail.com"}, "expected": {"outcome": "Person not added", "status": "Rejected"}}, {"name": "Person Found on Search", "description": "Verify that the user can successfully add a person to the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Person added", "status": "Approved"}}, {"name": "Person not Found on Search", "description": "Verify that the user can successfully send an invitation to a person to join the workspace.", "input": {"email": "validemail@gmail.com"}, "expected": {"outcome": "Invitation sent", "status": "Approved"}}, {"name": "Add Valid Member with Plus Subscription", "description": "Verify that the user can successfully add a member with the 'Member' role when the workspace has a Plus subscription.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Invitation sent successfully with 'Member' role assigned.", "status": "Invited"}}, {"name": "Add Member Without Plus Subscription", "description": "Verify that when the user does not have a Plus subscription, all new members are assigned the 'Owner' role.", "input": {"email": "2005017@ugrad.cse.buet.ac.bd", "role": "Member"}, "expected": {"outcome": "Role selection defaults to 'Owner' as 'Member' role is not available without Plus subscription.", "status": "Assigned Owner Role"}}, {"name": "Add Member with Invalid Email", "description": "Verify that the system handles invalid email addresses during member addition.", "input": {"email": "invalid-email", "role": "Owner"}, "expected": {"outcome": "Failed to send invitation due to invalid email format.", "status": "Not Invited"}}, {"name": "Assign Workspace Owner Role", "description": "Verify that the user can assign the 'Workspace Owner' role to a new member regardless of subscription.", "input": {"email": "amimul.ehsan2001@gmail.com", "role": "Workspace Owner"}, "expected": {"outcome": "Member added with 'Workspace Owner' role.", "status": "Role Assigned"}}, {"name": "Invite Using Restricted Domain", "description": "Verify that the system prevents adding members with email addresses from restricted domains.", "input": {"email": "user@restricted.com", "role": "Member"}, "expected": {"outcome": "Failed to send invitation due to restricted domain.", "status": "Not Invited"}}]}, {"usecase": {"name": "Managing Allowed Email Domains", "scenario": "User sets or updates allowed email domains for the workspace.", "actors": "User", "preconditions": "User is a workspace owner with permissions to modify settings.", "steps": ["User navigates to 'Settings' under the workspace menu.", "User scrolls to 'Allowed email domains'.", "User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd').", "User clicks 'Update' to save changes."], "author_student_id": "2005023"}, "testcases": [{"name": "Adding Valid Allowed Domain", "description": "Verify that the user can add a valid email domain to the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain added successfully to the allowed list.", "status": "Updated"}}, {"name": "Adding Invalid Allowed Domain", "description": "Verify that the system handles invalid domain inputs correctly.", "input": {"allowedDomain": "invalid-domain"}, "expected": {"outcome": "Field not shown to be updated", "status": "Not Updated"}}, {"name": "Adding Public Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "gmail.com"}, "expected": {"outcome": "Sorry ,this domain not allowed.", "status": "Not Updated"}}, {"name": "Adding Educational Domain", "description": "Verify that the system handles public domain inputs correctly.", "input": {"allowedDomain": "ugrad.cse.buet.ac.bd"}, "expected": {"outcome": "Sorry ,educational domain not allowed.", "status": "Not Updated"}}, {"name": "Removal Allowed Domain", "description": "Verify that the user can remove a previously added domain from the allowed list.", "input": {"allowedDomain": "company.com"}, "expected": {"outcome": "Domain removed successfully from the allowed list.", "status": "Updated"}}]}, {"usecase": {"name": "Export Workspace Content", "scenario": "User exports all workspace content for backup, sharing, or legal purposes.", "actors": "User", "preconditions": ["User is a workspace owner with permissions to export content.", "User has a Business or Enterprise plan for PDF export."], "steps": ["User navigates to 'Settings' under the workspace menu.", "User clicks on 'Export all workspace content'.", "User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion.", "User clicks 'Export' to download the content."], "author_student_id": "2005023"}, "testcases": [{"name": "Valid Export as Markdown & CSV", "description": "Verify that the user can successfully export all workspace content in Markdown & CSV format.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully.", "status": "Exported"}}, {"name": "Valid Export as HTML", "description": "Verify that the user can successfully export all workspace content in HTML format.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in HTML format.", "status": "Exported"}}, {"name": "Valid Export as PDF with Enterprise Plan", "description": "Verify that the user can export workspace content as PDF when subscribed to an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully in PDF format.", "status": "Exported"}}, {"name": "PDF Export without Enterprise Plan", "description": "Verify that PDF export is not available without an Enterprise plan.", "input": {"exportFormat": "PDF", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "PDF export failed due to lack of Enterprise plan.", "status": "Not Exported"}}, {"name": "Export with Insufficient Permissions", "description": "Verify that members without export permissions cannot export workspace content.", "input": {"exportFormat": "Markdown & CSV", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Export failed due to insufficient permissions.", "status": "Not Exported"}}, {"name": "Exclude Private Pages from Export", "description": "Verify that private pages of other users are not included in the export.", "input": {"exportFormat": "HTML", "includeDatabases": "All", "includeContent": "Everything"}, "expected": {"outcome": "Workspace content exported successfully, excluding private pages.", "status": "Exported"}}, {"name": "Incorrect Export Format", "description": "Verify that the user cannot export the workspace with incorrect workspace export format.", "input": {"exportFormat": "mp3"}, "expected": {"outcome": "Workspace not exported", "status": "Rejected"}}]}, {"usecase": {"name": "Rich Text Formatting", "scenario": "Users format their text with rich options adding links.", "actors": "User", "preconditions": "The text block exists in the document.", "steps": ["User selects the text block.", "User applies the formatting options", "User checks the formatted result."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Text Hyperlinking", "description": "Verify that a user can add a hyperlink to selected text.", "input": {"text": "Click here", "link": "http://example.com"}, "expected": {"outcome": "Hyperlink added to text.", "status": "Link Working"}}, {"name": "Valid Markdown Syntax", "description": "Verify that correct markdown content is rendered successfully.", "input": {"markdown": "**Hello World**"}, "expected": {"outcome": "Formatting successfully applied.", "status": "Success"}}, {"name": "Invalid Markdown Syntax", "description": "Verify that incorrect markdown results in failure to apply formatting.", "input": {"markdown": "*incorrect_bold"}, "expected": {"outcome": "Formatting not applied due to incorrect markdown syntax.", "status": "Error"}}, {"name": "Invalid Text Hyperlinking", "description": "Verify that an invalid link is not added to a content text.", "input": {"text": "Click here", "link": "invalid.com"}, "expected": {"outcome": "Hyperlink not added to text.", "status": "Link Discarded"}}, {"name": "Valid font change", "description": "Verify that a user can select a valid font of selected text.", "input": {"text": "Sample text", "fontStyle": "Sans-serif"}, "expected": {"outcome": "Sans-Serif font applied", "status": "Success"}}, {"name": "Valid Text Coloring", "description": "Verify that a user can apply a color to the text.", "input": {"text": "Sample text", "fontColor": "Red"}, "expected": {"outcome": "Text appears in the chosen color.", "status": "Success"}}]}, {"usecase": {"name": "Organize Content into Columns", "scenario": "A user arranges content side-by-side by creating multiple columns on a page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User drags and drops blocks into columns.", "Content is organized into multiple columns."], "author_student_id": "2005013"}, "testcases": [{"name": "Create Two Columns", "description": "Verify that a user can create two columns by dragging and dropping blocks.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Two columns created successfully.", "status": "Success"}}, {"name": "Remove Columns", "description": "Verify that a user can remove a column by dragging the content back.", "input": {"blocks": ["Text block 1", "Text block 2"]}, "expected": {"outcome": "Columns removed successfully.", "status": "Success"}}]}, {"usecase": {"name": "Add Headings for Structure", "scenario": "The user adds headings to structure the content on a Notion page.", "actors": "User", "preconditions": "A Notion page with content exists.", "steps": ["User adds H1, H2, and H3 headings for different sections.", "Content is structured with headings."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Heading Creation", "description": "Verify that a user can add an heading to the page.", "input": {"headingText": "Main Title", "headingLevel": "H1"}, "expected": {"outcome": "H1 heading added successfully.", "status": "Success"}}, {"name": "Header Creation in Incorrect Block", "description": "Verify that trying to add a header inside unsupported blocks (e.g., code blocks) fails.", "input": {"blockType": "code", "header": "H1"}, "expected": {"outcome": "Header not applied.", "status": "Error"}}]}, {"usecase": {"name": "Add Icons and Cover Art", "scenario": "A user personalizes a page by adding icons and cover images.", "actors": "User", "preconditions": "A Notion page exists.", "steps": ["User adds or changes the page icon.", "User adds or changes the cover image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Icon Selection", "description": "Verify that a user can successfully add an icon to a page.", "input": {"icon": "emo.jpg"}, "expected": {"outcome": "Icon is added to the page.", "status": "Success"}}, {"name": "Valid Cover Image", "description": "Verify that a user can successfully change the cover image on a page.", "input": {"coverImage": "mycover.png"}, "expected": {"outcome": "Cover image is updated.", "status": "Success"}}, {"name": "Invalid Cover Image type", "description": "Verify that an image change is rejected if the image type is wrong.", "input": {"coverImage": "mycover.pdf"}, "expected": {"outcome": "Cover image is not updated.", "status": "Discarded"}}]}, {"usecase": {"name": "Add and Manage Images in Content", "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.", "actors": "User", "preconditions": "A Notion page is open and ready for editing.", "steps": ["User uploads an image to the page.", "User arranges and resizes the image.", "User adds captions and alt text for the image."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Image Upload", "description": "Verify that a user can successfully upload an image to a page.", "input": {"imageFile": "sample.jpg"}, "expected": {"outcome": "Image uploaded successfully.", "status": "Success"}}, {"name": "Valid Image Resize", "description": "Verify that a user can resize an uploaded image to a reasonable percentage.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "50%"}, "expected": {"outcome": "Image resized successfully.", "status": "Success"}}, {"name": "Too Large Resize Percentage", "description": "Verify that an image resize is rejected when the entered percentage amount is too large.", "input": {"imageFile": "sample.jpg", "resizeDimensions": "5000%"}, "expected": {"outcome": "Image not resized.", "status": "Unchanged"}}]}, {"usecase": {"name": "Add and Embed Files", "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.", "actors": "User", "preconditions": "A Notion page is ready for file uploads.", "steps": ["User uploads a PDF file to the page.", "User embeds a file link from an external source.", "User arranges the file block on the page."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid PDF Upload", "description": "Verify that a user can upload a PDF file to the page.", "input": {"file": "document.pdf", "fileSize": "1 MB"}, "expected": {"outcome": "PDF file uploaded successfully.", "status": "Success"}}, {"name": "Too Large Filesize", "description": "Verify that a file that is too large is discarded.", "input": {"file": "document.pdf", "fileSize": "1 GB"}, "expected": {"outcome": "File rejected.", "status": "Failed"}}, {"name": "Valid External File Embed", "description": "Verify that a user can embed a file link from an external URL.", "input": {"fileLink": "https://example.com/document.pdf"}, "expected": {"outcome": "File embedded successfully.", "status": "Success"}}, {"name": "Invalid External File Embed Link", "description": "Verify that a file embed is rejected when the link is invalid.", "input": {"fileLink": "invalidlink.com/document.pdf"}, "expected": {"outcome": "File not embedded.", "status": "Discarded"}}]}, {"usecase": {"name": "Embed and Manage Media", "scenario": "A user embeds videos and audio files into a Notion page.", "actors": "User", "preconditions": "A Notion page is open for editing.", "steps": ["User embeds a video from a streaming service.", "User uploads an audio file.", "User resizes and aligns the media blocks."], "author_student_id": "2005013"}, "testcases": [{"name": "Embed Video", "description": "Verify that a user can embed a video from a streaming platform.", "input": {"videoURL": "https://www.youtube.com/watch?v=example"}, "expected": {"outcome": "Video embedded successfully.", "status": "Success"}}, {"name": "Upload Audio File", "description": "Verify that a user can upload an audio file and play it in Notion.", "input": {"audioFile": "audio.mp3"}, "expected": {"outcome": "Audio file uploaded and playable.", "status": "Success"}}, {"name": "Unsupported Media Format", "description": "Verify that unsupported audio or video formats fail to play.", "input": {"mediaType": "video", "format": "unsupportedFormat"}, "expected": {"outcome": "Playback fails, with a message indicating unsupported format.", "status": "Error"}}, {"name": "Exceeds File Size Limit", "description": "Verify that uploading a file that exceeds the size limit fails.", "input": {"mediaType": "image", "fileSize": "100GB"}, "expected": {"outcome": "Upload fails with a message about exceeding the file size limit.", "status": "Error"}}]}, {"usecase": {"name": "Link to Notion Page", "scenario": "A user links one Notion page to another within a paragraph or as a block.", "actors": "User", "preconditions": "Both Notion pages exist and are accessible.", "steps": ["User types '@', '[[' or '+' followed by the page name.", "User selects the page from the dropdown.", "Link is added in the desired format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Page Linking in Paragraph", "description": "Verify that a user can link another Notion page inline within a paragraph.", "input": {"linkCommand": "@", "pageName": "Project Overview"}, "expected": {"outcome": "Page linked successfully.", "status": "Link visible in paragraph."}}, {"name": "Valid Page linking as Block", "description": "Verify that a user can add a Notion page link as a block.", "input": {"linkCommand": "/link", "pageName": "Meeting Notes"}, "expected": {"outcome": "Page link block created successfully.", "status": "Link block visible."}}, {"name": "Broken Link Creation", "description": "Verify that trying to create a link to a deleted or non-existent page results in an error.", "input": {"linkDestination": "DeletedPage"}, "expected": {"outcome": "Link creation fails with an error about the destination page not existing.", "status": "Error"}}]}, {"usecase": {"name": "Link to a Web Page", "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.", "actors": "User", "preconditions": "A web page link is copied.", "steps": ["User pastes the URL into a Notion page.", "User selects 'Paste as mention' to format the link."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Web Link Embedding", "description": "Verify that a user can embed a web link and format it as a mention.", "input": {"webURL": "https://example.com"}, "expected": {"outcome": "Web link embedded as a mention and preview generated.", "status": "Link mention formatted."}}, {"name": "Broken Web Link", "description": "Verify that a broken link is detected by the system and rejected.", "input": {"webURL": "invalid.com"}, "expected": {"outcome": "Web link not embedded.", "status": "Embed failed."}}]}, {"usecase": {"name": "Transfer Content to Another Account", "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.", "actors": "User, New Account Owner", "preconditions": "Both Notion accounts exist.", "steps": ["User shares the page with the new account.", "User grants ownership permissions to the new account."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Ownership Transfer", "description": "Verify that a user can transfer ownership of a page to another account.", "input": {"pageName": "Project Plan", "newOwner": "userB@example.com"}, "expected": {"outcome": "Ownership successfully transferred.", "status": "Success"}}, {"name": "Transfer Between Incompatible Accounts", "description": "Verify that transferring content between a free plan and a paid account fails if file size limits are exceeded.", "input": {"accountTypeSource": "Paid", "accountTypeDestination": "Free", "fileSize": "10GB"}, "expected": {"outcome": "Transfer fails with a file size limit error.", "status": "Error"}}]}, {"usecase": {"name": "Duplicate and Delete Content", "scenario": "A user duplicates or deletes content on a Notion page.", "actors": "User", "preconditions": "A Notion page exists with content.", "steps": ["User selects a block of content.", "User chooses either 'Duplicate' or 'Delete' from the menu."], "author_student_id": "2005013"}, "testcases": [{"name": "Duplicate Block", "description": "Verify that a user can duplicate a block of content.", "input": {"blockContent": "Meeting Notes"}, "expected": {"outcome": "Block successfully duplicated.", "status": "Success"}}, {"name": "Delete Page", "description": "Verify that a user can delete an entire page.", "input": {"pageName": "Old Notes"}, "expected": {"outcome": "Page successfully deleted.", "status": "Moved to Trash"}}]}, {"usecase": {"name": "Restore Deleted Content", "scenario": "A user restores deleted content from the trash within 30 days.", "actors": "User", "preconditions": "The content is in the trash and within the restoration window.", "steps": ["User navigates to the trash.", "User selects the deleted page to restore."], "author_student_id": "2005013"}, "testcases": [{"name": "Restore Deleted Page", "description": "Verify that a user can restore a deleted page from the trash.", "input": {"pageName": "Archived Project"}, "expected": {"outcome": "Page successfully restored.", "status": "Restored"}}, {"name": "Restore Deleted Page After Timeout", "description": "Verify that restoring a deleted page fails after the allowed restoration time has passed.", "input": {"deletedTime": "31Days"}, "expected": {"outcome": "Restore fails due to exceeded restoration period.", "status": "Error"}}]}, {"usecase": {"name": "Sync Content Across Pages", "scenario": "A user syncs content across multiple Notion pages.", "actors": "User", "preconditions": "Pages must exist, and user must have edit permissions.", "steps": ["User copies the content from a page.", "User pastes it on a different page with the 'Paste and sync' option.", "Content is now synced across pages."], "author_student_id": "2005013"}, "testcases": [{"name": "Sync Content Successfully", "description": "Verify that the user can sync content across two pages.", "input": {"page1": "Project Overview", "page2": "Meeting Notes"}, "expected": {"outcome": "Content successfully synced.", "status": "Success"}}, {"name": "Sync Content Failure - No Permissions", "description": "Verify that a user cannot sync content to a page where they don't have permission.", "input": {"page1": "Team Wiki", "page2": "Private Notes"}, "expected": {"outcome": "Sync failed due to insufficient permissions.", "status": "Failure"}}]}, {"usecase": {"name": "Unsync Content", "scenario": "A user unsyncs specific content across pages.", "actors": "User", "preconditions": "Synced blocks exist across multiple pages.", "steps": ["User selects the synced block.", "User chooses the 'Unsync' option to remove the sync."], "author_student_id": "2005013"}, "testcases": [{"name": "Unsync Specific Block", "description": "Verify that a user can unsync a specific copy of the block.", "input": {"block": "Task List"}, "expected": {"outcome": "Block unsynced from other copies.", "status": "Success"}}, {"name": "Unsync Failure - Not Original Block", "description": "Verify that unsyncing fails when attempting to unsync a block that is not the original.", "input": {"block": "Meeting Agenda"}, "expected": {"outcome": "Unable to unsync non-original block.", "status": "Failure"}}]}, {"usecase": {"name": "Create and Edit Code Blocks", "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.", "actors": "User", "preconditions": "User is logged into Notion and has access to a workspace or page.", "steps": ["User navigates to a Notion page and selects the option to add a new block.", "User selects the code block option from the available block types.", "User types or pastes code into the code block.", "User modifies the code block by selecting the language, formatting, or editing the code."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Code Block Creation", "description": "Verify that a user can successfully create a code block and input code.", "input": {"blockType": "Code Block", "code": "print('Hello World')"}, "expected": {"outcome": "Code block created successfully", "status": "Created"}}, {"name": "Valid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Python"}, "expected": {"outcome": "Codeblock rendered with Python syntax highlighting", "status": "Success"}}, {"name": "Invalid Language Selection", "description": "Verify that a user can select a programming language for a code block.", "input": {"code": "def add(a, b): return a + b", "language": "Java"}, "expected": {"outcome": "Codeblock rendered with improper syntax highlighting", "status": "Improperly Highlighted"}}, {"name": "Empty Code Block", "description": "Verify that the system handles an empty code block without any code input.", "input": {"blockType": "Code Block", "code": ""}, "expected": {"outcome": "Code block creation failed", "status": "Rejected"}}, {"name": "Valid Code Block Editing", "description": "Verify that a user can successfully edit an existing code block.", "input": {"blockID": "123", "newCode": "print('Updated Code')"}, "expected": {"outcome": "Code block updated successfully", "status": "Edited"}}]}, {"usecase": {"name": "Create and Display Math Equations in Notion", "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.", "actors": "User", "preconditions": "The user must have access to a Notion page.", "steps": ["User types an equation using the inline math command `$$` or the block equation command `/math`.", "The system processes the LaTeX syntax.", "The system displays the equation in the correct format."], "author_student_id": "2005013"}, "testcases": [{"name": "Valid Inline Equation", "description": "Verify that a valid inline math equation is rendered correctly.", "input": {"equation": "$$a^2 + b^2 = c^2$$"}, "expected": {"outcome": "Equation rendered correctly", "status": "Success"}}, {"name": "Invalid Inline Equation", "description": "Verify that the system handles improper LaTeX syntax in inline equations.", "input": {"equation": "$$a^2 + b^$$"}, "expected": {"outcome": "Equation rendering failed due to improper syntax", "status": "Error"}}, {"name": "Valid Block Equation", "description": "Verify that a block equation is correctly rendered in Notion.", "input": {"equation": "/math \\sqrt{9}"}, "expected": {"outcome": "Block equation rendered correctly", "status": "Success"}}, {"name": "Invalid Block Equation", "description": "Verify that the system handles incorrect LaTeX syntax in block equations.", "input": {"equation": "/math \\squr{9}"}, "expected": {"outcome": "Block equation rendering failed due to unrecognized command", "status": "Error"}}]}, {"usecase": {"name": "Creating a Database", "scenario": "User creates a new database in Notion.", "actors": "User", "preconditions": ["User is logged into their Notion account.", "User has permission to create databases in the workspace."], "steps": ["User navigates to a Notion page and types '/' to access the command menu.", "User selects a database type (e.g., table, board, list).", "User enters the name of the new database.", "User configures properties for the database."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Table Database", "description": "Verify that the user can create a new table database.", "input": {"databaseType": "Table", "databaseName": "Project Tasks"}, "expected": {"outcome": "Table database created successfully.", "status": "Created"}}, {"name": "Creating a Database Without Name", "description": "Verify that the user cannot create a database without providing a name.", "input": {"databaseType": "List", "databaseName": ""}, "expected": {"outcome": "Database creation failed due to missing name.", "status": "Not Created"}}, {"name": "Creating a Database with Existing Name", "description": "Verify that the system handles duplicate database names within the same workspace.", "input": {"databaseType": "Board", "databaseName": "Existing Database"}, "expected": {"outcome": "Warning about duplicate name or suffix added.", "status": "Created with Suffix or Not Created"}}]}, {"usecase": {"name": "Customizing Database Views", "scenario": "User customizes the views of a database to display data in different formats.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has editing permissions for the database."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view by adding filters, sorts, and grouping.", "User saves the view for future use."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Kanban Board View", "description": "Verify that the user can create a board view to display tasks by status.", "input": {"viewType": "Board", "groupBy": "Status"}, "expected": {"outcome": "Board view created successfully, grouping tasks by 'Status'.", "status": "View Created"}}, {"name": "Applying Filters to Calendar View", "description": "Verify that the user can apply filters to show only events for a specific team in the calendar view.", "input": {"viewType": "Calendar", "filter": "Team = 'Marketing'"}, "expected": {"outcome": "Calendar view shows only events for the Marketing team.", "status": "Filtered"}}, {"name": "Sorting Table View by Priority", "description": "Verify that the user can sort tasks by priority in the table view.", "input": {"viewType": "Table", "sortBy": "Priority"}, "expected": {"outcome": "Tasks sorted successfully by priority in the table view.", "status": "Sorted"}}]}, {"usecase": {"name": "Managing Database Pages", "scenario": "User manages individual pages within a database, adding, opening, and editing them.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to add and edit database pages."], "steps": ["User navigates to the database and clicks on 'New' to add a new page.", "User enters the details for the new page and saves it.", "User opens an existing page to edit its content.", "User modifies properties or adds new content to the page."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New Database Page", "description": "Verify that the user can create a new page within the database.", "input": {"pageName": "New Task", "properties": {"Status": "To-Do", "Due Date": "2024-10-20"}}, "expected": {"outcome": "New page created successfully in the database.", "status": "Page Created"}}, {"name": "Editing Existing Page Content", "description": "Verify that the user can edit an existing page's content in the database.", "input": {"pageName": "Task 1", "newContent": "Updated task details."}, "expected": {"outcome": "Page content updated successfully.", "status": "Updated"}}, {"name": "Deleting a Database Page", "description": "Verify that the user can delete a page from the database.", "input": {"pageName": "Old Task"}, "expected": {"outcome": "Page deleted successfully from the database.", "status": "Deleted"}}]}, {"usecase": {"name": "Collaborating in a Database", "scenario": "User collaborates with team members in a shared database with specific permissions.", "actors": "User", "preconditions": ["Database is shared with team members.", "User has appropriate permissions for collaboration."], "steps": ["User shares the database with team members with 'Can edit content' permissions.", "Team members add and edit pages within the database.", "User reviews changes made by team members and provides feedback in comments."], "author_student_id": "2005017"}, "testcases": [{"name": "Granting Edit Permissions", "description": "Verify that the user can grant 'Can edit content' permissions to team members.", "input": {"teamMember": "member@example.com", "permissions": "Can edit content"}, "expected": {"outcome": "Edit permissions granted successfully.", "status": "Permissions Granted"}}, {"name": "Editing Content with Edit Permissions", "description": "Verify that team members with 'Can edit content' permissions can add and edit pages in the database.", "input": {"teamMember": "member@example.com", "action": "Edit page content"}, "expected": {"outcome": "Team member successfully edited page content.", "status": "Content Edited"}}, {"name": "Restricting Property Editing", "description": "Verify that team members cannot edit properties or views with 'Can edit content' permissions.", "input": {"teamMember": "member@example.com", "action": "Edit property"}, "expected": {"outcome": "Action blocked due to insufficient permissions.", "status": "Not Allowed"}}]}, {"usecase": {"name": "Managing Database Lock", "scenario": "User locks and unlocks a database to control structure changes.", "actors": "User", "preconditions": ["User is an admin with permissions to lock/unlock the database."], "steps": ["User navigates to the database settings.", "User selects 'Lock/Unlock database' and confirms the action."], "author_student_id": "2005017"}, "testcases": [{"name": "Lock and Unlock Database", "description": "Verify that the user can lock and unlock a database, preventing or allowing structural changes.", "input": {"action": "Lock/Unlock", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": "true/false", "structureChangesAllowed": "false/true"}, "status": "Success"}}, {"name": "Lock Database Without Permission", "description": "Verify that users without permissions cannot lock/unlock the database.", "input": {"action": "Lock Database", "databaseName": "Project Tracker"}, "expected": {"outcome": {"databaseName": "Project Tracker", "locked": false, "error": "Insufficient permissions"}, "status": "Failed"}}]}, {"usecase": {"name": "Handling Changes in a Locked Database", "scenario": "User attempts to change structure of a locked database.", "actors": "User", "preconditions": ["Database is locked; user has edit permissions for content only."], "steps": ["User tries to modify properties or views of the locked database."], "author_student_id": "2005017"}, "testcases": [{"name": "Edit Locked Database Properties or Views", "description": "Verify that users cannot modify properties, add views, or delete properties in a locked database.", "input": {"action": "Modify Structure", "changes": ["Edit Property", "Add View", "Delete Property"]}, "expected": {"outcome": {"changesAllowed": false, "error": "Database is locked, structural changes are restricted."}, "status": "Failed"}}]}, {"usecase": {"name": "Managing Database Properties", "scenario": "User adds, edits, and deletes properties in a database.", "actors": "User", "preconditions": ["User has permissions to modify the database."], "steps": ["User navigates to database settings.", "User selects 'New property' to add a property.", "User edits or deletes properties as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding a New Property", "description": "Verify that the user can add a new property with a valid name and type.", "input": {"action": "Add Property", "propertyName": "Priority", "propertyType": "Select"}, "expected": {"outcome": {"propertyAdded": true, "propertyName": "Priority", "propertyType": "Select"}, "status": "Success"}}, {"name": "Adding a Property with Empty Name", "description": "Verify that the user cannot add a property with an empty name.", "input": {"action": "Add Property", "propertyName": "", "propertyType": "Text"}, "expected": {"outcome": {"propertyAdded": false, "error": "Property name cannot be empty."}, "status": "Failed"}}, {"name": "Deleting a Property", "description": "Verify that the user can delete a property.", "input": {"action": "Delete Property", "propertyName": "Priority"}, "expected": {"outcome": {"propertyDeleted": true, "propertyName": "Priority"}, "status": "Success"}}]}, {"usecase": {"name": "Handling Invalid and Empty Values for Properties", "scenario": "User enters invalid or empty values for different property types in a database.", "actors": "User", "preconditions": ["Database has predefined properties for testing different data types."], "steps": ["User selects a property cell in the database.", "User attempts to enter invalid or empty values for each property type.", "System validates and either accepts or rejects the input."], "author_student_id": "2005017"}, "testcases": [{"name": "Entering Invalid Number", "description": "Verify that the system rejects non-numeric values for a number property.", "input": {"propertyType": "Number", "value": "abc123"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid input; numbers only."}, "status": "Failed"}}, {"name": "Empty Number Property", "description": "Verify that the system accepts an empty value for a number property.", "input": {"propertyType": "Number", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Email Format", "description": "Verify that the system rejects an invalid email format.", "input": {"propertyType": "Email", "value": "invalid-email"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid email format."}, "status": "Failed"}}, {"name": "Empty Email Property", "description": "Verify that the system accepts an empty value for an email property.", "input": {"propertyType": "Email", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid URL Format", "description": "Verify that the system rejects an invalid URL format.", "input": {"propertyType": "URL", "value": "www.invalid-url"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid URL format."}, "status": "Failed"}}, {"name": "Empty URL Property", "description": "Verify that the system accepts an empty value for a URL property.", "input": {"propertyType": "URL", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Date Format", "description": "Verify that the system rejects an invalid date format.", "input": {"propertyType": "Date", "value": "32-12-2024"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Empty Date Property", "description": "Verify that the system accepts an empty value for a date property.", "input": {"propertyType": "Date", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}, {"name": "Invalid Phone Format", "description": "Verify that the system rejects an invalid phone number format.", "input": {"propertyType": "Phone", "value": "123-ABCD"}, "expected": {"outcome": {"valueAccepted": false, "error": "Invalid phone number format."}, "status": "Failed"}}, {"name": "Empty Phone Property", "description": "Verify that the system accepts an empty value for a phone property.", "input": {"propertyType": "Phone", "value": ""}, "expected": {"outcome": {"valueAccepted": true, "newValue": null}, "status": "Success"}}]}, {"usecase": {"name": "Creating and Managing Relations", "scenario": "User creates and manages relations between databases to link related data.", "actors": "User", "preconditions": ["User has two databases created in Notion.", "User has permissions to modify database properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Relation' property.", "User selects the target database to link.", "User configures relation settings and saves."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a One-Way Relation", "description": "Verify that the user can create a one-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "One-Way", "sourceDatabase": "Projects", "targetDatabase": "Tasks"}, "status": "Success"}}, {"name": "Creating a Two-Way Relation", "description": "Verify that the user can create a two-way relation between two databases.", "input": {"action": "Create Relation", "sourceDatabase": "Clients", "targetDatabase": "Meetings", "relationType": "Two-Way"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Two-Way", "sourceDatabase": "Clients", "targetDatabase": "Meetings"}, "status": "Success"}}, {"name": "Relating a Database to Itself", "description": "Verify that the user can create a relation within the same database to link related items.", "input": {"action": "Create Self-Relation", "databaseName": "Tasks", "relationName": "Subtasks"}, "expected": {"outcome": {"relationCreated": true, "relationType": "Self-Relation", "databaseName": "Tasks"}, "status": "Success"}}]}, {"usecase": {"name": "Creating and Managing Rollups", "scenario": "User creates rollup properties to aggregate data from related databases.", "actors": "User", "preconditions": ["User has related databases with numeric or date properties."], "steps": ["User navigates to the database settings.", "User adds a new 'Rollup' property.", "User selects the related property to roll up and chooses a calculation method.", "User saves the rollup property settings."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a Sum Rollup", "description": "Verify that the user can create a rollup property to sum numeric values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Sum", "result": 250.0}, "status": "Success"}}, {"name": "Creating a Count Rollup", "description": "Verify that the user can create a rollup property to count non-empty values from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Status", "calculation": "Count Not Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Not Empty", "result": 15}, "status": "Success"}}, {"name": "Creating a Date Rollup", "description": "Verify that the user can create a rollup property to find the latest date from related items.", "input": {"action": "Create Rollup", "relationProperty": "Tasks", "propertyToRollup": "Due Date", "calculation": "Latest Date"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Latest Date", "result": "2024-12-31"}, "status": "Success"}}]}, {"usecase": {"name": "Handling Invalid or Empty Rollup Values", "scenario": "User tries to create rollup properties with invalid or empty values.", "actors": "User", "preconditions": ["Related databases contain inconsistent or empty data."], "steps": ["User attempts to create a rollup with invalid data types or empty values."], "author_student_id": "2005017"}, "testcases": [{"name": "Invalid Data Type for Rollup", "description": "Verify that the system rejects rollup creation if the selected property is not compatible with the calculation.", "input": {"action": "Create Rollup", "relationProperty": "Projects", "propertyToRollup": "Name", "calculation": "Sum"}, "expected": {"outcome": {"rollupCreated": false, "error": "Invalid data type for selected calculation."}, "status": "Failed"}}, {"name": "Empty Values in Rollup Property", "description": "Verify that the system can handle rollup calculations with empty values correctly.", "input": {"action": "Create Rollup", "relationProperty": "Items Purchased", "propertyToRollup": "Price", "calculation": "Count Empty"}, "expected": {"outcome": {"rollupCreated": true, "calculationType": "Count Empty", "result": 3}, "status": "Success"}}]}, {"usecase": {"name": "Managing Database Views", "scenario": "User creates, customizes, and switches between different views in a database.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to create and edit views."], "steps": ["User navigates to the database and selects 'Add a view'.", "User chooses a view type such as 'Table', 'Board', 'Calendar', etc.", "User customizes the view settings (properties, filters, sorts).", "User switches between different views using the dropdown menu."], "author_student_id": "2005017"}, "testcases": [{"name": "Creating a New View", "description": "Verify that the user can create a new view with customized settings.", "input": {"action": "Create View", "viewType": "List", "viewName": "Project List", "properties": ["Task", "Due Date", "Priority"]}, "expected": {"outcome": {"viewCreated": true, "viewName": "Project List", "propertiesIncluded": ["Task", "Due Date", "Priority"]}, "status": "Success"}}, {"name": "Switching Between Views", "description": "Verify that the user can switch between different database views without errors.", "input": {"action": "Switch View", "views": ["Table", "Calendar"]}, "expected": {"outcome": {"currentView": "Calendar", "previousView": "Table"}, "status": "Success"}}, {"name": "Editing View Components", "description": "Verify that the user can edit existing view components such as layout and properties.", "input": {"action": "Edit View", "viewName": "Kanban Board", "properties": ["Task", "Status", "Assignee"]}, "expected": {"outcome": {"viewName": "Kanban Board", "propertiesUpdated": ["Task", "Status", "Assignee"]}, "status": "Success"}}]}, {"usecase": {"name": "Applying Filters to a Database", "scenario": "User applies filters to a database view to display specific data.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to edit filters in the database."], "steps": ["User navigates to the database and clicks 'Filter'.", "User selects a property and sets criteria for filtering.", "User adds additional filters or groups using 'AND'/'OR' logic.", "User saves the filter configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Applying a Simple Filter", "description": "Verify that the user can apply a simple filter based on a single property.", "input": {"action": "Apply Filter", "filterProperty": "Status", "criteria": "Completed"}, "expected": {"outcome": {"filteredItems": ["Task 1", "Task 3"], "filterProperty": "Status", "criteria": "Completed"}, "status": "Success"}}, {"name": "Creating an Advanced Filter", "description": "Verify that the user can create an advanced filter using 'AND'/'OR' logic.", "input": {"action": "Apply Filter", "filters": [{"property": "Priority", "criteria": "High", "logic": "AND"}, {"property": "Due Date", "criteria": "Next 7 Days", "logic": "OR"}]}, "expected": {"outcome": {"filteredItems": ["Task 2", "Task 4"], "filtersApplied": [{"property": "Priority", "criteria": "High"}, {"property": "Due Date", "criteria": "Next 7 Days"}]}, "status": "Success"}}, {"name": "Removing a Filter", "description": "Verify that the user can remove an applied filter from the database view.", "input": {"action": "Remove Filter", "filterProperty": "Priority"}, "expected": {"outcome": {"filterRemoved": true, "filterProperty": "Priority", "allItemsDisplayed": true}, "status": "Success"}}]}, {"usecase": {"name": "Sorting Items in a Database", "scenario": "User sorts database items based on a specific property in ascending or descending order.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to sort items in the database."], "steps": ["User navigates to the database and clicks 'Sort'.", "User selects a property and chooses ascending or descending order.", "User adds multiple sorts if needed and adjusts their order.", "User saves the sort configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Sorting by Due Date", "description": "Verify that the user can sort items by 'Due Date' in ascending order.", "input": {"action": "Sort", "sortProperty": "Due Date", "order": "Ascending"}, "expected": {"outcome": {"sortedItems": ["Task 1", "Task 2", "Task 3"], "sortProperty": "Due Date", "order": "Ascending"}, "status": "Success"}}, {"name": "Sorting by Priority and Status", "description": "Verify that the user can sort items by 'Priority' and 'Status' with different orders.", "input": {"action": "Sort", "sorts": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "expected": {"outcome": {"sortedItems": ["Task 4", "Task 1", "Task 3"], "sortsApplied": [{"property": "Priority", "order": "Descending"}, {"property": "Status", "order": "Ascending"}]}, "status": "Success"}}, {"name": "Removing a Sort", "description": "Verify that the user can remove an applied sort from the database view.", "input": {"action": "Remove Sort", "sortProperty": "Priority"}, "expected": {"outcome": {"sortRemoved": true, "sortProperty": "Priority", "defaultOrderRestored": true}, "status": "Success"}}]}, {"usecase": {"name": "Grouping Items in a Database", "scenario": "User groups database items by a specific property to organize data visually.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to group items in the database."], "steps": ["User navigates to the database and clicks 'Group'.", "User selects a property to group by (e.g., 'Status').", "User arranges the groups in a desired order.", "User saves the group configuration."], "author_student_id": "2005017"}, "testcases": [{"name": "Grouping by Status", "description": "Verify that the user can group items by 'Status' in a board view.", "input": {"action": "Group", "groupProperty": "Status"}, "expected": {"outcome": {"groupedItems": ["Task 1", "Task 2"], "groupProperty": "Status"}, "status": "Success"}}, {"name": "Hiding Empty Groups", "description": "Verify that the user can hide groups without items in the database view.", "input": {"action": "Update Group", "hideEmptyGroups": true}, "expected": {"outcome": {"emptyGroupsHidden": true, "visibleGroups": ["Task 1", "Task 2"]}, "status": "Success"}}, {"name": "Removing Grouping", "description": "Verify that the user can remove grouping from the database view.", "input": {"action": "Remove Group", "groupProperty": "None"}, "expected": {"outcome": {"groupingRemoved": true, "allItemsDisplayed": true}, "status": "Success"}}]}, {"usecase": {"name": "Searching a Database", "scenario": "User searches for specific items within a database using keywords.", "actors": "User", "preconditions": ["User has a database created in Notion.", "User has permissions to search within the database."], "steps": ["User navigates to the database and clicks the search icon.", "User enters keywords related to page titles or properties.", "User reviews the search results displayed in real-time."], "author_student_id": "2005017"}, "testcases": [{"name": "Searching by Keyword", "description": "Verify that the user can search for items using a keyword.", "input": {"action": "Search", "keyword": "Project"}, "expected": {"outcome": {"itemsFound": ["Project A", "Project B"], "keyword": "Project"}, "status": "Success"}}, {"name": "No Matching Results", "description": "Verify that no items are displayed when there are no matching results.", "input": {"action": "Search", "keyword": "Nonexistent"}, "expected": {"outcome": {"itemsFound": [], "keyword": "Nonexistent"}, "status": "No Results"}}, {"name": "Clearing Search", "description": "Verify that the user can clear the search input to return to the default view.", "input": {"action": "Clear Search"}, "expected": {"outcome": {"searchCleared": true, "defaultViewRestored": true}, "status": "Success"}}]}, {"usecase": {"name": "Managing Data in Table View", "scenario": "User creates, modifies, and deletes rows and columns in a table view.", "actors": "User", "preconditions": ["User has permissions to modify the table view.", "Table view is already created."], "steps": ["User navigates to the database table view.", "User adds, edits, or deletes rows and columns as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Rows", "description": "Verify that the user can add a new row to the table with all columns populated.", "input": {"action": "Add Row", "columns": ["Task", "Due Date", "Priority"], "values": ["New Task", "2024-10-10", "High"]}, "expected": {"outcome": {"rowAdded": true, "rowValues": ["New Task", "2024-10-10", "High"]}, "status": "Success"}}, {"name": "Deleting Columns", "description": "Verify that the user can delete a column and all associated data is removed.", "input": {"action": "Delete Column", "columnName": "Priority"}, "expected": {"outcome": {"columnDeleted": true, "columnName": "Priority", "dataRemoved": true}, "status": "Success"}}, {"name": "Empty Values", "description": "Verify that leaving a cell empty in a required column triggers a validation message.", "input": {"action": "Edit Cell", "columnName": "Task", "newValue": ""}, "expected": {"outcome": {"validationMessage": "Task cannot be empty."}, "status": "Failed"}}]}, {"usecase": {"name": "Organizing Simple Data in List View", "scenario": "User organizes notes or articles using list view with minimal properties.", "actors": "User", "preconditions": ["User has permissions to modify the list view.", "List view is already created."], "steps": ["User navigates to the database list view.", "User adds, edits, or deletes list items as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Items", "description": "Verify that the user can add a new item with minimal properties like title and date.", "input": {"action": "Add Item", "properties": ["Title", "Date"], "values": ["New Note", "2024-10-15"]}, "expected": {"outcome": {"itemAdded": true, "itemValues": ["New Note", "2024-10-15"]}, "status": "Success"}}, {"name": "Invalid Date", "description": "Verify that entering an invalid date format shows an error message.", "input": {"action": "Edit Property", "propertyType": "Date", "value": "15-October-2024"}, "expected": {"outcome": {"valueUpdated": false, "error": "Invalid date format."}, "status": "Failed"}}, {"name": "Editing Item Title", "description": "Verify that the user can successfully edit the title of a list item.", "input": {"action": "Edit Title", "newValue": "Updated Note Title"}, "expected": {"outcome": {"titleUpdated": true, "newTitle": "Updated Note Title"}, "status": "Success"}}]}, {"usecase": {"name": "Visualizing Workflows in Board View", "scenario": "User creates boards to manage project stages or tasks.", "actors": "User", "preconditions": ["User has permissions to modify the board view.", "Board view is already created."], "steps": ["User navigates to the database board view.", "User moves items between columns to represent changes in workflow stages."], "author_student_id": "2005017"}, "testcases": [{"name": "Moving Items Across Stages", "description": "Verify that the user can drag and drop items between different stages (columns).", "input": {"action": "Move Item", "itemName": "Task 1", "fromColumn": "To Do", "toColumn": "In Progress"}, "expected": {"outcome": {"itemMoved": true, "itemName": "Task 1", "newColumn": "In Progress"}, "status": "Success"}}, {"name": "Invalid Stage Name", "description": "Verify that the system rejects a stage name with special characters.", "input": {"action": "Add Column", "columnName": "In-Progress#1"}, "expected": {"outcome": {"columnAdded": false, "error": "Invalid column name; special characters are not allowed."}, "status": "Failed"}}, {"name": "Archiving Columns", "description": "Verify that the user can hide or archive columns with completed tasks.", "input": {"action": "Archive Column", "columnName": "Completed"}, "expected": {"outcome": {"columnArchived": true, "columnName": "Completed"}, "status": "Success"}}]}, {"usecase": {"name": "Managing Events in Calendar View", "scenario": "User schedules and views events on a calendar.", "actors": "User", "preconditions": ["User has permissions to modify the calendar view.", "Calendar view is already created."], "steps": ["User navigates to the database calendar view.", "User adds, edits, or deletes events as needed."], "author_student_id": "2005017"}, "testcases": [{"name": "Adding Multi-Day Events", "description": "Verify that the user can add events that span multiple days.", "input": {"action": "Add Event", "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": true, "eventTitle": "Project Kickoff", "startDate": "2024-10-10", "endDate": "2024-10-12"}, "status": "Success"}}, {"name": "Invalid Date Range", "description": "Verify that entering a start date later than the end date triggers an error.", "input": {"action": "Add Event", "eventTitle": "Invalid Event", "startDate": "2024-10-15", "endDate": "2024-10-12"}, "expected": {"outcome": {"eventAdded": false, "error": "Start date cannot be later than end date."}, "status": "Failed"}}, {"name": "Changing Calendar Start Day", "description": "Verify that changing the week start day updates the view correctly.", "input": {"action": "Change Start Day", "newStartDay": "Monday"}, "expected": {"outcome": {"startDayChanged": true, "newStartDay": "Monday"}, "status": "Success"}}]}, {"usecase": {"name": "Assigning Unique Identifiers to Database Items", "scenario": "User assigns unique identifiers to each item for easy reference.", "actors": "User", "preconditions": ["User has permissions to modify the database.", "Database has a unique ID property set up."], "steps": ["User navigates to the database settings.", "User configures or updates the unique ID format for each new item."], "author_student_id": "2005017"}, "testcases": [{"name": "Generating Unique ID", "description": "Verify that each new item in the database is assigned a unique identifier automatically.", "input": {"action": "Add Item", "itemTitle": "New Task"}, "expected": {"outcome": {"itemAdded": true, "itemTitle": "New Task", "uniqueIDGenerated": true}, "status": "Success"}}, {"name": "Custom ID Format", "description": "Verify that the user can set a custom format for unique IDs (e.g., prefix or suffix).", "input": {"action": "Configure Unique ID", "format": "Task-####"}, "expected": {"outcome": {"formatApplied": true, "exampleID": "Task-0001"}, "status": "Success"}}, {"name": "Duplicate ID Error", "description": "Verify that trying to manually set a duplicate ID triggers an error.", "input": {"action": "Set Unique ID", "itemTitle": "Task 1", "uniqueID": "ID-001"}, "expected": {"outcome": {"IDSet": false, "error": "Duplicate unique ID detected."}, "status": "Failed"}}]}, {"usecase": {"name": "Create New Teamspace", "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.", "actors": "User", "preconditions": "User is logged in to Notion and has at least one workspace in Notion.", "steps": ["User provides name of the new Teamspace", "User provides icon of the new Teamspace", "User provides emails of other invited members"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Teamspace Creation", "description": "Verify that a user can successfully create a teamspace when he provides valid information.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation successful", "status": "Created"}}, {"name": "Empty Teamspace Name", "description": "Verify that the system handles the case where a user provides empty teamspace name.", "input": {"subscriptionPlan": "Free", "teamspaceName": "", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Icon Type", "description": "Verify that the system rejects unsupported file types for the teamspace icon.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.txt", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Too Many Invited Emails", "description": "Verify that the system prevents a user under Free plan from inviting more than 10 guests in a single teamspace creation.", "input": {"subscriptionPlan": "Free", "teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "kowshik.2001@gmail.com", "jane.doe@gmail.com", "john.doe@gmail.com", "alice.smith@gmail.com", "bob.brown@gmail.com", "amim2.2001@gmail.com", "kowshik3.2001@gmail.com", "jane4.doe@gmail.com", "john6.doe@gmail.com", "alice7.smith@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invalid Email Format", "description": "Verify that the system detects and rejects invalid email formats.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "invalid-email", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}, {"name": "Invitaion to an Email without Notion", "description": "Verify that the system detects when the given email address has no associated Notion account.", "input": {"teamspaceName": "Coding Ninjas", "teamspaceIcon": "favicon.png", "invitedEmails": ["amim.2001@gmail.com", "non-existent-2001@gmail.com", "kowshik.2001@gmail.com", "2005001@ugrad.cse.buet.ac.bd"]}, "expected": {"outcome": "Teamspace creation failed", "status": "Aborted"}}]}, {"usecase": {"name": "Manage Teamspace Permissions", "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.", "actors": "Teamspace Owner, Teamspace Member", "preconditions": "The teamspace is created and members have joined successfully.", "steps": ["Teamspace owner changes the permission level of other members to one of 'Full Access', '\u00c7an View', 'Can Edit' or 'Can Comment'", "Alternatively, Teamspace owner upgrades another member to owner.", "Alternatively, Teamspace owner downgrades another owner to member."], "author_student_id": "2005001"}, "testcases": [{"name": "Consistent Permissions", "description": "Verify that consistent teamspace permissions can be set properly.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permissions changed successfully", "status": "Updated"}}, {"name": "Invalid Permission Level", "description": "Verify that the permission level falls under one of the 4 categories.", "input": {"memberPermissionLevel": "No Access", "memberPermissionLevelSetBy": "Teamspace Owner", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Permission Level Update by Member", "description": "Verify that a general member cannot alter the permission levels of all members.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Owner"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}, {"name": "Downgrade of Owner by Member", "description": "Verify that a general member cannot downgrade a owner to a general member.", "input": {"memberPermissionLevel": "Full Access", "memberPermissionLevelSetBy": "Teamspace Member", "previousPrivilege": "Teamspace Owner", "newPrivilege": "Teamspace Member", "privilegeUpdatedBy": "Teamspace Member"}, "expected": {"outcome": "Permission changes refused", "status": "Rejected"}}]}, {"usecase": {"name": "Share Page with Individuals", "scenario": "A user shares his page with other members or groups while specifying the access levels of each.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User selects a page from his workspace.", "User selects names of members or groups to share with.", "User sets permission levels of each of the members or groups."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Sharing", "description": "Verify that the page is shared properly when invites members and groups are valid.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Members", "description": "Verify that the page sharing is successful when only members are added and no groups are added.", "input": {"invitedMembers": [{"name": "Amim", "permission": "Full Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": []}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Sharing with only Groups", "description": "Verify that the page sharing is successful when only groups are added and no individual members are added.", "input": {"invitedMembers": [], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page shared successfully", "status": "Shared"}}, {"name": "Empty Sharing Specification", "description": "Verify that the page sharing is rejected when no members or groups are selected.", "input": {"invitedMembers": [], "invitedGroups": []}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}, {"name": "Invalid Permission Category", "description": "Verify that the page sharing is rejected when the chosen permission category does not fall under the allowed 4 types of permissions.", "input": {"invitedMembers": [{"name": "Amim", "permission": "No Access"}, {"name": "Jahin", "permission": "Can Edit"}], "invitedGroups": [{"name": "CTF Club Memebers", "permission": "Can View"}]}, "expected": {"outcome": "Page sharing failed.", "status": "Failed"}}]}, {"usecase": {"name": "Publish Page as Website", "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.", "actors": "User", "preconditions": "The user is logged in and the page is created.", "steps": ["User opens a page from his workspace.", "User proceeds to publish as Website option.", "User approves the proposed randomly generated website domain.", "Alternatively, the user may choose his own domain if he is in a PLus subscription", "The user chooses SEO and LInk Expiration related preferences and finalizes publishing."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Publishing", "description": "Verify that the website is created properly when the user follows a valid process.", "input": {"subscriptionPlan": "Free", "domain": "abc-234-rt.notion.site", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Choosing Custom Domain in Free Plan", "description": "Verify that the cannot choose a custom domain when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}, {"name": "Choosing Custom Domain in Plus Plan", "description": "Verify that the can choose a custom domain when he is in a Plus subscription plan.", "input": {"subscriptionPlan": "PLus", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "None"}, "expected": {"outcome": "Website published successfully", "status": "Published"}}, {"name": "Specifying Link Expiry Period in Free Plan", "description": "Verify that the cannot specify a link expiry period when he is in a Free plan.", "input": {"subscriptionPlan": "Free", "domain": "mydomain.com", "SEOindexing": "On", "Link Expiration": "15 days"}, "expected": {"outcome": "Website publish canceled", "status": "Aborted"}}]}, {"usecase": {"name": "Collaborate in real-time", "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.", "actors": "User", "preconditions": "The page is shared with the user(s).", "steps": ["User opens tha shared page.", "User selects a particular block of the page.", "User edits the content of the selected block."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Editing", "description": "Verify that the editing is successful when all editors have enough privilege and they are not simultaneously modifying the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Content Edited successfully", "status": "Saved"}}, {"name": "Insufficient Permission", "description": "Verify that the editing is discarded when some editor has insufficient access privilege.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Can View"}], "editedBlocks": ["Block A", "Block B"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}, {"name": "Simultaneous Editing", "description": "Verify that the editing is discarded when more than one editor are trying to simultaneously modify the same block.", "input": {"editors": [{"name": "Amim", "permissionLevel": "Can Edit"}, {"name": "Muhit", "permissionLevel": "Full Access"}], "editedBlocks": ["Block A", "Block A"]}, "expected": {"outcome": "Edit discarded", "status": "Unchanged"}}]}, {"usecase": {"name": "Add comments to Page Content", "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.", "actors": "User", "preconditions": "User is logged in and has a privilege level equal or higher than 'Can Comment'.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Comment", "description": "Verify that the comment is successfully posted when all parameters are correct.", "input": {"commentor": "Amim", "commentText": "Done!", "mentionedPersons": ["Muhit", "Kowshik"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}, {"name": "Self Mentioning", "description": "Verify that the comment is successfully posted without sending notification when a user mentions himself/herself.", "input": {"commentor": "Jaber", "commentText": "Done!", "mentionedPersons": ["Jaber"], "mentionedGroups": []}, "expected": {"outcome": "Comment posted successfully but no one is notified.", "status": "Posted"}}, {"name": "Empty Text and Mention", "description": "Verify that the comment is rejected if no text or mention is there.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": [], "mentionedGroups": []}, "expected": {"outcome": "Comment rejected.", "status": "Discarded"}}, {"name": "Only Mentioning without Text", "description": "Verify that the comment is posted even if it does not have a text but mentions some users/groups.", "input": {"commentor": "Jaber", "commentText": "", "mentionedPersons": ["Amim"], "mentionedGroups": ["CSE-325"]}, "expected": {"outcome": "Comment posted and mentioned persons and groups notified successfully", "status": "Posted"}}]}, {"usecase": {"name": "Suggest Edits to Content", "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.", "actors": "Page owner, Guest User", "preconditions": "Guest user has enough privilege.", "steps": ["User selects a particular block of the page.", "User writes a textual comment.", "Alternatively, user may mention other persons or groups or pages."], "author_student_id": "2005001"}, "testcases": [{"name": "Acceptance by Owner", "description": "Verify that the edit is properly reflected on the content when the owner approves the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Accept"}, "expected": {"outcome": "Previous content replaced by suggested new content.", "status": "Updated"}}, {"name": "Rejection by Owner", "description": "Verify that the edit is discarded when the owner rejects the change.", "input": {"previousContent": "A", "editedContent": "B", "owenerResponse": "Reject"}, "expected": {"outcome": "Previous content not changed.", "status": "Unchanged"}}]}, {"usecase": {"name": "View Page Analytics", "scenario": "User accesses and views analytics data for a page including view counts and user interaction history", "actors": "Page Owner, Page Editor", "preconditions": "User has Full Access or Can Edit privileges for the page", "steps": ["User clicks on the clock icon in the top right of the page", "User selects 'Analytics' option", "System displays graph with total and unique page views", "User can hover over specific days to see detailed view counts", "System shows page creator information and recent viewer/editor list"], "author_student_id": "2005001"}, "testcases": [{"name": "Valid Analytics View", "description": "Verify that analytics data is correctly displayed for a user with proper permissions", "input": {"user": "Kowshik", "permissionLevel": "Full Access", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics graph and user interaction history displayed successfully", "status": "Displayed"}}, {"name": "Unauthorized Access", "description": "Verify that analytics are not accessible to users without proper permissions", "input": {"user": "Muhit", "permissionLevel": "Can View", "pageId": "page123", "timeRange": "last 30 Days"}, "expected": {"outcome": "Analytics access denied", "status": "Denied"}}, {"name": "Opted Out User", "description": "Verify that opted-out users' views are not recorded in analytics", "input": {"user": "OptedOutUser1", "userSettings": {"optOutOfAnalytics": "true"}, "permissionLevel": "Can Edit"}, "expected": {"outcome": "Page view not recorded in analytics", "status": "Denied"}}, {"name": "Hovering Interaction", "description": "Verify that hovering over specific days shows correct detailed view counts", "input": {"user": "Anik", "permissionLevel": "Full Access", "pageId": "page123", "hoverDate": "2024-10-18", "graphPoint": {"x": 250, "y": 150}}, "expected": {"outcome": "Detailed view counts displayed for selected date", "status": "Displayed"}}]}, {"usecase": {"name": "Upgrade plan", "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Upgrade plan or Explore plans section in the workspace settings", "User selects the desired plan to upgrade to", "User inputs the payment details", "User confirms the upgrade", "The system processes the payment and upgrades the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan upgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment details", "description": "Verify the payment information provided by the user can yield the payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Processing payment"}}, {"name": "Invalid payment details", "description": "Verify that the payment information provided by the user is invalid and cannot be used for payment", "input": {"paymentDetails": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment failed", "reason": "Invalid payment details"}}, {"name": "Sufficient balance", "description": "Verify that the user has sufficient balance to upgrade the plan", "input": {"balance": 100, "planCost": 50}, "expected": {"outcome": "Plan upgraded successfully", "planUpgraded": true}}, {"name": "Insufficient balance", "description": "Verify that the user does not have sufficient balance to upgrade the plan", "input": {"balance": 50, "planCost": 100}, "expected": {"outcome": "Payment failed", "reason": "Insufficient balance"}}, {"name": "Successful upgrade", "description": "Verify that the plan is successfully upgraded after payment processing", "preconditions": "The user has completed the payment process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan upgraded from the past plan", "The user uses the new features of the upgraded plan"], "expected": {"outcome": "Plan upgraded successfully", "newFeaturesAccessible": true}}]}, {"usecase": {"name": "Downgrade plan", "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Plans section in the workspace settings", "User selects the desired plan to downgrade to", "User confirms the downgrade", "The system processes the request and adjusts the plan", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Plan downgradation failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Successful downgrade", "description": "Verify that the plan is successfully downgraded after the user confirms the downgrade", "preconditions": "The user has completed the downgrade process", "steps": ["User navigates to the Plans section in the workspace settings", "User witnesses the current plan downgraded from the past plan", "The user tries to access the features of the past plan"], "expected": {"outcome": "Plan downgraded successfully", "featuresRestricted": true}}]}, {"usecase": {"name": "Update payment method", "scenario": "A user wants to update their payment method for the subscription plan", "actors": "User", "preconditions": "User is loggged in", "steps": ["User navigates to the Billing section in the workspace settings", "User modifies the details in the Payment method section", "User confirms the update", "The system processes the request and updates the payment method", "User receives a confirmation message along with an email"], "author_student_id": "2005006"}, "testcases": [{"name": "User is not an admin or workspace owner", "description": "Verify that only an admin or workspace owner can upgrade the plan", "input": {"userRole": "member"}, "expected": {"outcome": "Upgrade plan failed", "reason": "User is not an admin or workspace owner"}}, {"name": "Valid payment method", "description": "Verify that the new payment method provided by the user is valid and can be used for future payments", "input": {"paymentMethod": {"cardNumber": "1234 5678 9012 3456", "expiryDate": "12/23", "cvv": "123", "zipCode": "12345"}}, "expected": {"outcome": "Payment method updated successfully", "Confirmation email received": true}}, {"name": "Successful payment method update", "description": "Verify that the payment method is successfully updated after the user confirms the update", "preconditions": "The user has completed the payment method update process", "steps": ["User navigates to the Billing section in the workspace settings", "User witnesses the updated payment method details"], "expected": {"successful update": true, "newPaymentMethodAccessible": true}}]}, {"usecase": {"name": "Task Management Integration", "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.", "actors": "User, Notion API, Third-Party Task Management System", "preconditions": "User has valid accounts on both platforms, and the integration is authorized.", "steps": ["User creates or updates tasks in the third-party app", "Tasks are synchronized with Notion", "Notion database reflects updated task information"], "author_student_id": "2005012"}, "testcases": [{"name": "Successful Task Synchronization", "description": "Verify that tasks created in the third-party app are successfully synced to the Notion database.", "input": {"taskDetails": {"title": "Complete project", "dueDate": "2024-09-30", "status": "In Progress"}}, "expected": {"outcome": "Task synced successfully", "notionDatabaseUpdate": true}}, {"name": "Task Deletion", "description": "Verify that tasks deleted in the third-party app are removed from the Notion database.", "input": {"taskDetails": {"taskId": "1234", "action": "Delete"}}, "expected": {"outcome": "Task removed from Notion", "notionDatabaseUpdate": true}}, {"name": "API Rate Limit Handling", "description": "Verify that the system correctly handles API rate limits when syncing a large number of tasks to Notion.", "input": {"taskSyncRequest": "Batch of 100 tasks"}, "expected": {"outcome": "Tasks synced successfully after retry", "rateLimitExceeded": true, "retrySuccessful": true}}, {"name": "Unauthorized API Call", "description": "Verify that unauthorized API calls are blocked by Notion during task sync attempts.", "input": {"userRole": "Unauthenticated", "attemptedAction": "Sync tasks"}, "expected": {"outcome": "Sync blocked", "notionStatus": "Unauthorized"}}]}, {"usecase": {"name": "CRM Data Synchronization", "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.", "actors": "Sales Representative, Notion API, CRM System", "preconditions": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.", "steps": ["Sales rep adds or updates customer data in the CRM", "The system syncs customer data to the Notion database", "Notion database reflects updated customer information"], "author_student_id": "2005012"}, "testcases": [{"name": "Customer Data Sync Success", "description": "Verify that the customer data is correctly synchronized from the CRM system to Notion.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Data synced successfully", "notionDatabaseUpdate": true}}, {"name": "Duplicate Data Handling", "description": "Verify that duplicate customer data entries are properly handled by the integration.", "input": {"customerData": {"name": "Acme Corp", "contactPerson": "Jane Doe", "email": "jane.doe@acme.com"}}, "expected": {"outcome": "Duplicate entry detected", "notionDatabaseUpdate": false}}, {"name": "Sync Failure Due to Invalid Data", "description": "Verify that invalid data (e.g., missing required fields) causes the sync to fail.", "input": {"customerData": {"name": "", "contactPerson": "John Smith", "email": "john.smith@invalid"}}, "expected": {"outcome": "Data sync failed", "notionStatus": "Error", "errorMessage": "Invalid data format"}}]}, {"usecase": {"name": "Search for Restaurants", "scenario": "Customer searches for restaurants using keywords such as cuisine type, restaurant name, or dish name.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer clicks on the search bar", "Customer enters a keyword or phrase", "System displays search results based on the keyword or phrase", "Customer selects a restaurant from the search results"]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that the system shows the correct restaurant options when a valid restaurant name is entered.", "input": {"searchQuery": "Burger King"}, "expected": {"outcome": "Search results display Burger King and related options", "status": "Success"}}, {"name": "Search with Popular Dish Name", "description": "Verify that the system shows relevant restaurants when a popular dish name is entered.", "input": {"searchQuery": "Pizza"}, "expected": {"outcome": "Search results display restaurants offering pizza", "status": "Success"}}, {"name": "Search with Invalid Query", "description": "Verify that the system handles invalid or unknown queries appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "Show no search result and display we're not in your area yet. NO resturants matches the slected criteria", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify that the system handles empty search queries gracefully.", "input": {"searchQuery": ""}, "expected": {"outcome": "No search results", "status": "Error"}}], "id": "2005005"}, {"usecase": {"name": "Search for Restaurants with Offers", "scenario": "Customer searches for restaurants offering discounts or promotions.", "actors": "Customer", "preconditions": "FoodPanda app is running and is on the home or search page.", "steps": ["Customer filters search results by offers", "System displays restaurants with active offers or discounts", "Customer selects a restaurant with an offer"]}, "testcases": [{"name": "Search with Offers Filter", "description": "Verify that the system shows only restaurants offering discounts when the 'Offers' filter is applied.", "input": {"filter": "Offers"}, "expected": {"outcome": "Only restaurants with active offers are displayed", "status": "Success"}}, {"name": "Search with No Offers Available", "description": "Verify that the system appropriately handles cases where no restaurants are offering discounts.", "input": {"filter": "Offers"}, "expected": {"outcome": "No restaurants displayed if no offers are available", "status": "No Results"}}, {"name": "Invalid Offer Filter", "description": "Verify that the system handles invalid or unknown filter options.", "input": {"filter": "InvalidOffer"}, "expected": {"outcome": "System ignores the filter and displays standard search results", "status": "Ignored"}}], "id": "2005019"}, {"usecase": {"name": "Recent Searches", "scenario": "Customer views and selects from a list of their recent search queries.", "actors": "Customer", "preconditions": "Customer has performed previous searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Search", "description": "Verify that a customer can view results for a previous valid search query.", "input": {"recentSearchQuery": "Burger King"}, "expected": {"outcome": "Search results for Burger King are displayed", "status": "Success"}}, {"name": "Expired or Removed Restaurant", "description": "Verify how the system handles cases where a previously searched restaurant is no longer available.", "input": {"recentSearchQuery": "ClosedRestaurant"}, "expected": {"outcome": "Prompt user that the restaurant is unavailable", "status": "No Results"}}, {"name": "Empty Recent Search List", "description": "Verify that the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts user to enter a new search query", "status": "Error"}}], "id": "2005021"}, {"usecase": {"name": "Select Food from Restaurant Menu", "scenario": "Customer selects food items from a restaurant's menu to add to his cart.", "actors": "Customer", "preconditions": "Customer is logged in and has selected a restaurant from the search results.", "steps": ["Customer views the restaurant menu", "Customer selects a food item", "System displays the food item details", "Customer adds the item to the cart"]}, "testcases": [{"name": "Valid Food Selection", "description": "Verify that the customer can successfully select and add a valid food item to their cart.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino is added to the cart", "status": "Success"}}, {"name": "Customizations for Food Item", "description": "Verify that the system allows customizations for food items before adding to the cart if applicable.", "input": {"foodItem": "Burger", "customizations": {"extraCheese": true, "noOnions": true, "lettuce": false}}, "expected": {"outcome": "Burger with customizations is added to the cart", "status": "Success"}}, {"name": "Unavailable Food Item", "description": "Verify that the system appropriately handles cases where a food item is out of stock.", "input": {"foodItem": "Unavailable Dish"}, "expected": {"outcome": "System removes the food item from order and notifies", "status": "Error"}}], "id": "2005024"}, {"usecase": {"name": "View Food Item Details", "scenario": "Customer views the details of a food item like its description, ingredients, and price.", "actors": "Customer", "preconditions": "Customer is viewing the restaurant menu.", "steps": ["Customer selects a food item", "System displays the item's details (e.g., price, ingredients, description)"]}, "testcases": [{"name": "View Correcponding Details of Food Item", "description": "Verify that the system correctly displays the details of a food item that is selected.", "input": {"foodItem": "Cappuccino"}, "expected": {"outcome": "Cappuccino details are displayed like price, ingredients, description etc.", "status": "Success"}}], "id": "2005027"}, {"usecase": {"name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant", "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.", "actors": "Customer", "preconditions": "Customer is logged in and browsing the homepage.", "steps": ["Customer browses the homepage or search results", "Customer switches between delivery and pickup options", "System updates the restaurant list based on the chosen option"]}, "testcases": [{"name": "Switch from Delivery to Pickup", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from delivery to pickup.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Restaurants offering pickup are displayed", "status": "Success"}}, {"name": "Switch from Pickup to Delivery", "description": "Verify that the system correctly updates the list of restaurants when the customer switches from pickup to delivery.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Restaurants offering delivery are displayed", "status": "Success"}}], "id": "2005030"}, {"usecase": {"name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu", "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.", "actors": "Customer", "preconditions": "Customer is logged in, has selected a restaurant, and is viewing the menu.", "steps": ["Customer switches between delivery and pickup options while browsing the menu", "System updates the estimated delivery/pickup time and any available options based on the selection"]}, "testcases": [{"name": "Switch to Pickup During Menu Browsing", "description": "Verify that the system updates the menu and pickup time when switching to the pickup option while browsing a restaurant menu.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup time and availability are updated for the restaurant", "status": "Success"}}, {"name": "Switch to Delivery During Menu Browsing", "description": "Verify that the system updates the menu and delivery time when switching to the delivery option while browsing a restaurant menu.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery time and availability are updated for the restaurant", "status": "Success"}}], "id": "2005005"}, {"usecase": {"name": "Switch Between Delivery and Pickup After Adding Items to Cart", "scenario": "Customer switches between delivery and pickup after adding food items to their cart.", "actors": "Customer", "preconditions": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.", "steps": ["Customer switches between delivery and pickup options after adding items to the cart", "System updates the estimated time and other details based on the selection", "Customer reviews the cart and proceeds to checkout"]}, "testcases": [{"name": "Switch to Pickup After Adding Items", "description": "Verify that the system updates the order to pickup and adjusts the available options after the customer has added items to the cart.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Order is updated to pickup, and the estimated pickup time is displayed", "status": "Success"}}, {"name": "Switch to Delivery After Adding Items", "description": "Verify that the system updates the order to delivery and adjusts the delivery time after items are added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Order is updated to delivery, and the estimated delivery time is displayed", "status": "Success"}}, {"name": "Switch with Unavailable Option After Adding Items", "description": "Verify how the system handles cases where the selected restaurant does not offer the switched option after items have been added to the cart.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error or warning that Delivery is not available, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005021"}, {"usecase": {"name": "Switch Between Delivery and Pickup at Payment Stage", "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.", "actors": "Customer", "preconditions": "Customer has added food items to their cart and is at the payment stage.", "steps": ["Customer switches between delivery and pickup options at the payment stage", "System updates the total cost, estimated time, and any service charges based on the selection", "Customer confirms the order and places it"]}, "testcases": [{"name": "Switch to Pickup During Payment", "description": "Verify that the system updates the total cost and pickup details when switching to pickup during the payment process.", "input": {"currentOption": "Delivery", "switchTo": "Pickup"}, "expected": {"outcome": "Pickup cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Delivery During Payment", "description": "Verify that the system updates the total cost and delivery details when switching to delivery during the payment process.", "input": {"currentOption": "Pickup", "switchTo": "Delivery"}, "expected": {"outcome": "Delivery cost and details are updated, and the customer proceeds to place the order", "status": "Success"}}, {"name": "Switch to Unavailable Option During Payment", "description": "Verify that the system handles cases where the switched option is not available after the customer has reached the payment stage.", "input": {"currentOption": "Pickup", "switchTo": "Delivery", "restaurantAvailability": "No Delivery Option"}, "expected": {"outcome": "System displays an error that Delivery is unavailable, and the customer must continue with Pickup", "status": "Error"}}], "id": "2005024"}, {"usecase": {"name": "Send a Parcel Using Pandago", "scenario": "Customer sends a parcel using the Pandago service, specifying the sender and recipient addresses and collection time.", "actors": "Customer, Rider", "preconditions": "Customer is logged in and has access to the Pandago service.", "steps": ["Customer opens the Pandago service", "Customer enters the sender and recipient addresses", "Customer selects the collection time (ASAP or schedule for later)", "Customer confirms the parcel details and adds delivery specifications", "Rider picks up the parcel and delivers it to the recipient"]}, "testcases": [{"name": "Valid Parcel Sending", "description": "Verify that a customer can successfully send a parcel with valid sender and recipient addresses.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "ASAP"}, "expected": {"outcome": "Parcel pickup is confirmed, and the rider is dispatched to the sender's location", "status": "Success"}}, {"name": "Invalid Sender Address", "description": "Verify that the system handles an invalid sender address appropriately.", "input": {"senderAddress": "Invalid Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "ASAP"}, "expected": {"outcome": "System displays an error prompting the customer to provide a valid sender address", "status": "Error"}}, {"name": "Invalid Recipient Address", "description": "Verify that the system handles an invalid recipient address appropriately.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Invalid Address", "collectionTime": "ASAP"}, "expected": {"outcome": "System displays an error prompting the customer to provide a valid recipient address", "status": "Error"}}, {"name": "Scheduled Parcel Pickup", "description": "Verify that the system allows customers to schedule parcel pickup for a later time.", "input": {"senderAddress": "Valid Sender Address", "recipientAddress": "Valid Recipient Address", "collectionTime": "Scheduled (Next Day)"}, "expected": {"outcome": "System schedules the parcel pickup for the specified time", "status": "Success"}}], "id": "2005027"}, {"usecase": {"name": "Receive a Parcel Using Pandago", "scenario": "Customer receives a parcel sent by another user using the Pandago service.", "actors": "Customer, Rider", "preconditions": "Recipient has a valid delivery address and is awaiting the parcel.", "steps": ["Customer receives notification of a parcel being sent", "Customer tracks the parcel in real-time via the app", "Rider delivers the parcel to the recipient's address", "Customer confirms the receipt of the parcel"]}, "testcases": [{"name": "Valid Parcel Delivery", "description": "Verify that the recipient successfully receives a parcel with a valid delivery address.", "input": {"recipientAddress": "Hare Road,Dhaka, Bangladesh Hare Road Dhaka"}, "expected": {"outcome": "Rider delivers the parcel, and customer confirms receipt", "status": "Success"}}, {"name": "Invalid Delivery Address", "description": "Verify how the system handles an invalid or incomplete delivery address for the recipient.", "input": {"recipientAddress": "Amar Basha"}, "expected": {"outcome": "System displays an error and prevents the delivery", "status": "Error"}}, {"name": "Tracking Parcel in Real-Time", "description": "Verify that the customer can track the parcel in real-time while it's being delivered.", "input": {"trackingStatus": "In Transit"}, "expected": {"outcome": "System shows real-time tracking of the rider's location", "status": "Success"}}, {"name": "Failed Delivery Attempt", "description": "Verify that the system handles cases where the rider cannot deliver the parcel due to an unavailable recipient.", "input": {"recipientAddress": "Valid Recipient Address", "recipientAvailable": false}, "expected": {"outcome": "System notifies the customer of the failed delivery attempt and reschedules or cancels the delivery", "status": "Error"}}], "id": "2005030"}, {"usecase": {"name": "Cancel a Pandago Delivery", "scenario": "Customer cancels the parcel delivery before it is picked up by the rider.", "actors": "Customer, Rider", "preconditions": "Parcel has not been picked up yet.", "steps": ["Customer initiates a cancellation request", "System processes the cancellation if the rider has not yet picked up the parcel", "Customer receives a cancellation confirmation"]}, "testcases": [{"name": "Successful Cancellation Before Pickup", "description": "Verify that the customer can successfully cancel the delivery before the rider picks up the parcel.", "input": {"pickupStatus": "Order confirmed but No rider assigned"}, "expected": {"outcome": "Delivery is cancelled successfully, and the customer receives confirmation", "status": "Success"}}, {"name": "Failed Cancellation After Pickup", "description": "Verify that the system prevents the customer from cancelling the delivery after the rider has picked up the parcel.", "input": {"pickupStatus": "Rider Assigned"}, "expected": {"outcome": "System displays an error that the parcel cannot be cancelled after pickup", "status": "Error"}}], "id": "2005005"}, {"usecase": {"name": "Search for Products in Shops", "scenario": "Customer searches for products available in various shops using a keyword or product category.", "actors": "Customer", "preconditions": "Customer has launched app and is on the shop search page.", "steps": ["Customer enters a search keyword or selects a product category", "System displays relevant products based on the search query or selected category", "Customer selects a product from the search results"]}, "testcases": [{"name": "Valid Product Search", "description": "Verify that the system displays relevant products when a valid search query is entered.", "input": {"searchQuery": "Hand Wash"}, "expected": {"outcome": "Relevant hand wash products are displayed from different shops", "status": "Success"}}, {"name": "Invalid Product Search", "description": "Verify that the system handles invalid or unknown product searches appropriately.", "input": {"searchQuery": "xyz123"}, "expected": {"outcome": "System displays no results for the invalid query", "status": "No Results"}}, {"name": "Empty Search Query", "description": "Verify how the system handles empty search queries.", "input": {"searchQuery": ""}, "expected": {"outcome": "System prompts the customer to enter a search query", "status": "Error"}}, {"name": "Search by Product Category", "description": "Verify that the system displays relevant products when the customer selects a product category.", "input": {"category": "Fruits"}, "expected": {"outcome": "Relevant products are displayed from various shops", "status": "Success"}}], "id": "2005019"}, {"usecase": {"name": "Search for Shops by Name", "scenario": "Customer searches for a specific shop by entering its name in the search bar.", "actors": "Customer", "preconditions": "Customer has launched app and is on the shop search page.", "steps": ["Customer enters a shop name in the search bar", "System displays matching shops based on the entered name", "Customer selects a shop from the search results"]}, "testcases": [{"name": "Valid Shop Name Search", "description": "Verify that the system displays the correct shop when a valid shop name is entered.", "input": {"searchQuery": "Bengal Meat"}, "expected": {"outcome": "Searched shop is displayed in the search results", "status": "Success"}}, {"name": "Invalid Shop Name Search", "description": "Verify that the system handles invalid shop name queries appropriately.", "input": {"searchQuery": "UnknownShop"}, "expected": {"outcome": "System displays no matching shops", "status": "No Results"}}, {"name": "Search by Partial Shop Name", "description": "Verify that the system displays matching shops when a partial shop name is entered.", "input": {"searchQuery": "Pan"}, "expected": {"outcome": "Shops with names matching the partial query, such as 'Pandamart,' are displayed", "status": "Success"}}], "id": "2005021"}, {"usecase": {"name": "Filter Product Search Results by Availability", "scenario": "Customer filters product search results to display only products available for delivery or pickup.", "actors": "Customer", "preconditions": "Customer has launched app and has performed a product search.", "steps": ["Customer applies a filter to show only products available for delivery or pickup", "System filters the search results based on availability", "Customer selects a product from the filtered results"]}, "testcases": [{"name": "Filter by Fast Delivery", "description": "Verify that the system displays only shops from where we can get products fast when the fast delivery filter is applied.", "input": {"filter": "Fast Delivery"}, "expected": {"outcome": "Only shops from where fast delivery is possible are displayed", "status": "Success"}}, {"name": "No Products Available for Selected Filter", "description": "Verify that the system handles cases where no products are available for the selected filter.", "input": {"filter": "Pickup", "availability": "No Pickup"}, "expected": {"outcome": "System displays no results and informs the customer that no shops are available for pickup", "status": "No Results"}}], "id": "2005024"}, {"usecase": {"name": "View Recent and Popular Product Searches", "scenario": "Customer views and selects from a list of their recent product searches and popular product searches.", "actors": "Customer", "preconditions": "Customer has launched app and performed some product searches.", "steps": ["Customer clicks on the search bar", "System displays a list of recent searches", "System displays a list of popular searches", "Customer selects a recent search query to view the results"]}, "testcases": [{"name": "Valid Recent Product Search", "description": "Verify that a customer can view results for a previous valid product search.", "input": {"recentSearchQuery": "Chocolate"}, "expected": {"outcome": "Search results for given recent product are displayed", "status": "Success"}}, {"name": "No Recent Searches", "description": "Verify how the system handles scenarios where there are no recent searches available.", "input": {"recentSearchQuery": ""}, "expected": {"outcome": "System prompts the customer to enter a new search query", "status": "Error"}}], "id": "2005027"}, {"usecase": {"name": "Select and View Product Details", "scenario": "Customer views the details of a product, including description, price, and availability.", "actors": "Customer", "preconditions": "Customer has performed a search, and relevant product results are displayed.", "steps": ["Customer views the search results", "Customer selects a product from the search results or shop menu", "System displays the product details (description, price, availability, etc.)"]}, "testcases": [{"name": "Valid Product Details View", "description": "Verify that the system displays the correct product details when a valid product is selected.", "input": {"productName": "Cappuccino"}, "expected": {"outcome": "Product details (description, price, availability) are displayed", "status": "Success"}}, {"name": "Out of Stock Product", "description": "Verify how the system handles cases where the selected product is out of stock.", "input": {"productName": "Cappuccino", "stockStatus": "Out of Stock"}, "expected": {"outcome": "System displays an 'Out of Stock' message", "status": "Error"}}, {"name": "Invalid Product Details View", "description": "Verify that the system handles invalid product selections (e.g., non-existent product) appropriately.", "input": {"productName": "InvalidProduct"}, "expected": {"outcome": "System displays an error or no product details", "status": "Error"}}], "id": "2005030"}, {"usecase": {"name": "Add Product to Cart", "scenario": "Customer adds a selected product to their cart.", "actors": "Customer", "preconditions": "Customer has selected a product from search results to view its details.", "steps": ["Customer selects a product from the shop or search results", "System displays the product details", "Customer adds the product to the cart"]}, "testcases": [{"name": "Valid Product Added to Cart", "description": "Verify that the system successfully adds a valid product to the cart.", "input": {"productName": "Cappuccino", "quantity": 1}, "expected": {"outcome": "Product is successfully added to the cart", "status": "Success"}}, {"name": "Product Out of Stock", "description": "Verify that the system prevents adding an out-of-stock product to the cart.", "input": {"productName": "Out of Stock Product", "quantity": 1}, "expected": {"outcome": "System displays an 'Out of Stock' message and prevents the product from being added to the cart", "status": "Error"}}, {"name": "Invalid Product Addition", "description": "Verify how the system handles attempts to add an invalid or non-existent product to the cart.", "input": {"productName": "InvalidProduct", "quantity": 1}, "expected": {"outcome": "System displays an error and prevents the product from being added to the cart", "status": "Error"}}], "id": "2005005"}, {"usecase": {"name": "Modify Product Quantity in Cart", "scenario": "Customer modifies the quantity of a product in their cart before proceeding to checkout.", "actors": "Customer", "preconditions": "Customer has already added a product to their cart.", "steps": ["Customer views their cart", "Customer modifies the quantity of the product", "System updates the cart with the new quantity and recalculates the total cost"]}, "testcases": [{"name": "Increase Product Quantity", "description": "Verify that the system updates the cart correctly when the customer increases the quantity of a product.", "input": {"productName": "Cappuccino", "newQuantity": 2}, "expected": {"outcome": "Product quantity is updated, and the total cost is recalculated", "status": "Success"}}, {"name": "Decrease Product Quantity", "description": "Verify that the system updates the cart correctly when the customer decreases the quantity of a product.", "input": {"productName": "Cappuccino", "newQuantity": 1}, "expected": {"outcome": "Product quantity is updated, and the total cost is recalculated", "status": "Success"}}, {"name": "Remove Product from Cart", "description": "Verify that the system correctly removes a product when its quantity is set to zero.", "input": {"productName": "Cappuccino", "newQuantity": 0}, "expected": {"outcome": "Product is removed from the cart", "status": "Success"}}, {"name": "Negative Number of Product in Cart", "description": "Verify how the system handles attempts to add a negative number of product to the cart.", "input": {"productName": "Cappuccino", "newQuantity": -1}, "expected": {"outcome": "System displays an error and prevents the number of product from being negative", "status": "Error"}}], "id": "2005019"}, {"usecase": {"name": "Apply a Voucher Code", "scenario": "Customer applies a voucher code to their order during checkout.", "actors": "Customer", "preconditions": "Customer is logged in, has items in their cart, and is at the cart page of the checkout process.", "steps": ["Customer clicks on the 'Apply a voucher' option", "Applicable voucher codes are displayed to the customer", "Customer can select voucher valid for this order or enter a voucher code manually"]}, "testcases": [{"name": "Valid Voucher Code", "description": "Verify that the system applies the voucher discount correctly when a valid voucher code is entered and order amount is enough for this voucher.", "input": {"voucherCode": "VALID100", "OrderValue": 349}, "expected": {"outcome": "Voucher discount is applied, and the total cost is updated", "status": "Success"}}, {"name": "Invalid Voucher Code", "description": "Verify that the system displays an error when an invalid voucher code is entered.", "input": {"voucherCode": "INVALIDCODE", "OrderValue": 100}, "expected": {"outcome": "System displays an error message indicating the voucher code is invalid", "status": "Error"}}, {"name": "Expired Voucher Code", "description": "Verify that the system handles cases where the voucher code has expired.", "input": {"voucherCode": "EXPIRED123"}, "expected": {"outcome": "System displays an error message indicating the voucher code has expired", "status": "Error"}}, {"name": "Voucher Not Applicable for Restaurant", "description": "Verify that the system handles cases where a valid voucher code is entered but is not applicable to the selected restaurants", "input": {"voucherCode": "Chillox30", "Restaurant": "Khanas"}, "expected": {"outcome": "System displays an error message indicating that the voucher is not applicable for this restaurant", "status": "Error"}}], "id": "2005021"}, {"usecase": {"name": "Choose Payment Method", "scenario": "Customer selects a payment method (mobile banking, credit card, cash on delivery or other online methods) during checkout.", "actors": "Customer", "preconditions": "Customer is logged in, has items in their cart, and is at the payment stage in checkout page", "steps": ["Customer chooses a payment method", "If information is needed for that method, such as credit card or mobile banking information, system asks those information.", "System asks whether this would be a default payment option", "System confirms the selected payment method and updates the order details", "If discount is applied on certain payment methods, system handles that"]}, "testcases": [{"name": "Select Credit Card Payment", "description": "Verify that the system processes payment correctly when the customer selects the credit card option.", "input": {"paymentMethod": "Credit Card", "cardDetails": {"Card Number": 19004300578, "MM/YY": "09/25", "CVC": 678, "Cardholder Name": "Jarin Tasnim"}}, "expected": {"outcome": "Payment is successfully processed, and the order is confirmed", "status": "Success"}}, {"name": "Select Mobile Wallet Payment", "description": "Verify that the system processes payment correctly when the customer selects a mobile wallet payment method.", "input": {"paymentMethod": "Mobile Banking", "walletDetails": "confirmationID_From_Mobile_Banking_Platform"}, "expected": {"outcome": "Payment is successfully processed, and the order is confirmed", "status": "Success"}}, {"name": "Select Cash on Delivery", "description": "Verify that the system allows customers to select cash on delivery and proceed with the order.", "input": {"paymentMethod": "Cash on Delivery"}, "expected": {"outcome": "System confirms the order and sets the payment method to cash on delivery", "status": "Success"}}, {"name": "Invalid Credit Card", "description": "Verify that the system handles cases where an invalid credit card is used for payment.", "input": {"paymentMethod": "Credit Card", "cardDetails": {"Card Number": 19004300578, "MM/YY": "09/21", "CVC": 678, "Cardholder Name": "Jarin Tasnim"}}, "expected": {"outcome": "System displays an error and prevents the order from being processed", "status": "Error"}}], "id": "2005024"}, {"usecase": {"name": "Process Payment", "scenario": "Customer completes the payment process and confirms the order.", "actors": "Customer, Payment Gateway", "preconditions": "Customer is logged in, has selected a payment method, and is at the confirmation stage.", "steps": ["Customer initiates the payment", "Customer enters payment information to the payment gateway", "Payment gateway processes the payment and returns a response", "System confirms the order if payment is successful"]}, "testcases": [{"name": "Successful Payment", "description": "Verify that the system processes payment successfully and confirms the order.", "input": {"paymentMethod": "Credit Card", "paymentStatus": "Successful"}, "expected": {"outcome": "Order is confirmed, and a payment receipt is generated", "status": "Success"}}, {"name": "Failed Payment", "description": "Verify that the system handles payment failures appropriately.", "input": {"paymentMethod": "Credit Card", "paymentStatus": "Failed"}, "expected": {"outcome": "System displays an error message and prompts the customer to retry the payment or select a different payment method", "status": "Error"}}], "id": "2005027"}, {"usecase": {"name": "Apply Discount Automatically", "scenario": "Customer receives an automatic discount based on the items in their cart (e.g., restaurant offers or app-specific promotions).", "actors": "Customer", "preconditions": "Users select those specific foods or specific restaurants that is eligible for discount.", "steps": ["Customer adds eligible items to the cart", "System applies the applicable discount automatically based on the promotion", "Customer proceeds to checkout with the discount applied"]}, "testcases": [{"name": "Valid Automatic Discount Application", "description": "Verify that the system applies the automatic discount correctly when the customer adds eligible items to the cart.", "input": {"cartItems": ["Eligible Item 1", "Eligible Item 2"], "discount": 20}, "expected": {"outcome": "Discount is automatically applied to the total cost", "status": "Success"}}, {"name": "No Eligible Items for Discount", "description": "Verify that the system does not apply a discount when no eligible items are in the cart.", "input": {"cartItems": ["Ineligible Item 1", "Ineligible Item 2"]}, "expected": {"outcome": "No discount is applied, and the system does not display a discount on the total cost", "status": "No Discount"}}, {"name": "Expired Discount", "description": "Verify that the system does not apply a discount if the promotion has expired.", "input": {"cartItems": ["Eligible Item 1", "Eligible Item 2"], "discountStatus": "Expired"}, "expected": {"outcome": "System does not apply the expired discount and displays the full price", "status": "Error"}}], "id": "2005030"}, {"usecase": {"name": "Apply Discount on Minimum Order Value", "scenario": "Customer receives a discount only if their order exceeds a minimum value (e.g., Tk 500 or more).", "actors": "Customer", "preconditions": "Customer has added items to the cart, and the cart value must meet the minimum order value for the discount to be applied.", "steps": ["Customer adds items to the cart", "System checks if the total cart value exceeds the minimum threshold for the discount", "If eligible, system applies the discount automatically"]}, "testcases": [{"name": "Discount Applied for Order Above Minimum Value", "description": "Verify that the system applies the discount when the cart value exceeds the minimum order value.", "input": {"cartValue": 600, "minOrderValue": 500, "discount": 50}, "expected": {"outcome": "Discount is applied to the total cost", "status": "Success"}}, {"name": "Discount Not Applied for Order Below Minimum Value", "description": "Verify that the system does not apply the discount when the cart value is below the minimum order value.", "input": {"cartValue": 400, "minOrderValue": 500}, "expected": {"outcome": "System does not apply the discount and informs the customer of the minimum order value required", "status": "No Discount"}}, {"name": "Valid Voucher and Automatic Discount", "description": "Verify that the system applies both a valid voucher and an automatic discount correctly.", "input": {"voucherCode": "FOOD50", "automaticDiscount": 20}, "expected": {"outcome": "Both discounts are applied, and the total cost is updated", "status": "Success"}}, {"name": "Doesn't Allow Two Vouchers", "description": "Verify that the system doesn't allow to add two vouchers even if they are valid.", "input": {"voucherCode1": "FOOD50", "voucherCode2": "BKASH50"}, "expected": {"outcome": "Only the first voucher is applied, an error message is shown and the total cost is updated", "status": "Success"}}], "id": "2005005"}, {"usecase": {"name": "Accept a Delivery Order", "scenario": "Rider accepts an available delivery order from a restaurant or shop.", "actors": "Rider", "preconditions": "Rider is logged into the app and has active orders waiting for acceptance.", "steps": ["Rider receives notification of an available delivery order", "Rider views the order details", "Rider accepts the order and heads to the pickup location"]}, "testcases": [{"name": "Valid Order Acceptance", "description": "Verify that the rider can accept an available delivery order and proceed to the pickup location.", "input": {"orderStatus": "Available"}, "expected": {"outcome": "Order is accepted, and the rider heads to the pickup location", "status": "Success"}}, {"name": "Order Already Accepted by Another Rider", "description": "Verify that the system handles cases where another rider has already accepted the order.", "input": {"orderStatus": "Already Accepted"}, "expected": {"outcome": "System displays a message indicating the order has already been accepted by another rider", "status": "Error"}}, {"name": "Expired Order", "description": "Verify that the system prevents the rider from accepting an order if it has expired (e.g., time limit exceeded).", "input": {"orderStatus": "Expired"}, "expected": {"outcome": "System displays a message that the order is no longer available", "status": "Error"}}], "id": "2005019"}, {"usecase": {"name": "Pickup Order from Restaurant", "scenario": "Rider picks up the order from the restaurant and updates the system.", "actors": "Rider, Restaurant", "preconditions": "Rider has accepted the order and arrived at the restaurant.", "steps": ["Rider arrives at the restaurant", "Restaurant hands over the order", "Rider confirms the pickup in the system"]}, "testcases": [{"name": "Successful Order Pickup", "description": "Verify that the rider can successfully pick up the order and update the system.", "input": {"orderStatus": "Ready for Pickup"}, "expected": {"outcome": "Order is confirmed as picked up, and the rider heads to the delivery location", "status": "Success"}}, {"name": "Order Not Ready at Restaurant", "description": "Verify that the system handles cases where the order is not ready when the rider arrives.", "input": {"orderStatus": "Not Ready"}, "expected": {"outcome": "System displays a message indicating the order is not ready and updates the rider\u2019s wait time", "status": "Error"}}], "id": "2005021"}, {"usecase": {"name": "Deliver Order to Customer", "scenario": "Rider delivers the order to the customer and updates the system with the delivery status.", "actors": "Rider, Customer", "preconditions": "Rider has picked up the order and arrived at the delivery location.", "steps": ["Rider arrives at the delivery location", "Rider hands over the order to the customer", "Rider confirms the delivery in the system"]}, "testcases": [{"name": "Successful Order Delivery", "description": "Verify that the rider can deliver the order and update the system with the delivery status.", "input": {"deliveryStatus": "Delivered", "paymentStatus": "paid"}, "expected": {"outcome": "Order is marked as delivered, and the system updates the customer and restaurant", "status": "Success"}}, {"name": "Payment pending", "description": "Verify that the rider can deliver the order and update the system with the delivery status.", "input": {"deliveryStatus": "Delivered", "paymentStatus": "not paid"}, "expected": {"outcome": "System displays an error, and the rider is instructed to wait or return the order", "status": "Error"}}, {"name": "Customer Not Available for Delivery", "description": "Verify that the system handles cases where the customer is unavailable at the delivery location.", "input": {"deliveryStatus": "Customer Not Available"}, "expected": {"outcome": "System displays an error, and the rider is instructed to retry or return the order", "status": "Error"}}], "id": "2005024"}, {"usecase": {"name": "Accept a Customer Order", "scenario": "Restaurant receives a new order from a customer and accepts it to begin preparation.", "actors": "Restaurant", "preconditions": "Restaurant is logged in to the system and receives an order notification.", "steps": ["Restaurant receives a new order", "Restaurant views the order details", "Restaurant accepts the order and begins preparing it"]}, "testcases": [{"name": "Valid Order Acceptance", "description": "Verify that the restaurant can accept an order and begin preparation.", "input": {"orderStatus": "New", "restaurantAction": "Accept Order"}, "expected": {"outcome": "Order is accepted, and the restaurant begins preparing the food", "status": "Success"}}], "id": "2005027"}, {"usecase": {"name": "Mark Order as Ready for Pickup", "scenario": "Restaurant marks the order as ready for the rider to pick up once preparation is complete.", "actors": "Restaurant, Rider", "preconditions": "Restaurant has accepted the order and completed the preparation.", "steps": ["Restaurant finishes preparing the order", "Restaurant marks the order as ready for pickup", "Rider is notified to pick up the order"]}, "testcases": [{"name": "Order Ready for Pickup", "description": "Verify that the restaurant can mark the order as ready for pickup.", "input": {"orderStatus": "Ready for Pickup"}, "expected": {"outcome": "Order status is updated, and the rider is notified to pick up the order", "status": "Success"}}], "id": "2005030"}, {"usecase": {"name": "Login to the Application", "scenario": "Customer logs in to the app using valid or invalid credentials.", "actors": "Customer,System", "preconditions": "Customer has an account with valid credentials.", "steps": ["Customer enters email", "System verifies the credentials", "If valid, the system logs the customer in", "If invalid, the system displays an error message"]}, "testcases": [{"name": "Valid Credentials", "description": "Verify that the system logs the customer in with valid credentials.", "input": {"email": "saba@gmail.com"}, "expected": {"outcome": "Customer is logged in successfully to the homepage", "status": "Success"}}, {"name": "Unregistered Email", "description": "Verify that the system displays an error when the email is not registered.", "input": {"email": "unregistered@example.com"}, "expected": {"outcome": "System displays an error message indicating the email is not registered", "status": "Error"}}], "id": "2005005"}, {"usecase": {"name": "Sign Up for a New Account", "scenario": "A new customer signs up for an account using google or facebook account.", "actors": "Customer,System", "preconditions": "Customer does not have an existing account with the given g-mail or facebook account.", "steps": ["Customer gives a valid g-mail or facebook account", "Customer gives a valid phone number", "System creates the account and sends a confirmation email/SMS"]}, "testcases": [{"name": "Valid Account Creation using g-mail", "description": "Verify that the system creates an account when valid g-mail.", "input": {"email": "user@gmail.com"}, "expected": {"outcome": "Account is created, and a confirmation email or SMS is sent", "status": "Success"}}, {"name": "Valid Account Creation using facebook", "description": "Verify that the system creates an account when valid facebook.", "input": {"facebook ID": "www.facebook.com/saba/23445"}, "expected": {"outcome": "Account is created, and a confirmation email or SMS is sent", "status": "Success"}}, {"name": "Account Creation with Existing Gmail", "description": "Verify that the system prevents account creation when the email is already registered.", "input": {"email": "swastika@gmail.com"}, "expected": {"outcome": "System displays an error message indicating the email is already registered", "status": "Error"}}, {"name": "Account Creation with Existing Facebook ID", "description": "Verify that the system prevents account creation when the Facebook Id is already registered.", "input": {"email": "www.facebook.com/saba123"}, "expected": {"outcome": "System displays an error message indicating the Facebook ID is already registered", "status": "Error"}}, {"name": "Invalid Email Format", "description": "Verify that the system validates the email format during sign-up.", "input": {"email": "invalid-email-format"}, "expected": {"outcome": "System displays an error message indicating the email format is invalid", "status": "Error"}}, {"name": "Invalid facebook ID", "description": "Verify that the system validates that facebook Id.", "input": {"email": "invalid facebook-id"}, "expected": {"outcome": "System displays an error message indicating the facebook id invalid", "status": "Error"}}], "id": "2005021"}, {"usecase": {"name": "Track Order in Real-Time", "scenario": "Customer tracks the status of their food or parcel delivery in real-time.", "actors": "Customer, Rider", "preconditions": "Customer has placed an order, and the rider is assigned to the delivery.", "steps": ["Customer opens the app and views the current order status", "System displays real-time tracking of the rider\u2019s location", "Customer sees estimated time of arrival"]}, "testcases": [{"name": "Real-Time Tracking Available", "description": "Verify that the system displays real-time tracking for an active order.", "input": {"orderStatus": "Out for Delivery", "riderLocation": "On the Way"}, "expected": {"outcome": "Customer can see the rider's location in real-time and track the order status", "status": "Success"}}], "id": "2005024"}, {"usecase": {"name": "User Login", "scenario": "A registered user sign in into his Tripadvisor account.", "actors": "User", "preconditions": "User is not logged in.", "steps": ["User attempts to post a review or manage a booking.", "System prompts the user to log in.", "User enters their email and password.", "System verifies the credentials and logs the user in.", "User continues with the initial action (e.g., review submission or booking)."]}, "testcases": [{"name": "Valid Login via Action", "description": "Verify that a user is logged in when performing an action that prompts for login (e.g., submitting a review).", "steps": ["User attempts to submit a review.", "The system prompts for login.", "The user selects a third-party login method (e.g., Google or Facebook).", "System successfully logs the user in."], "expected": {"outcome": "User is logged in and can continue the action.", "status": "Login successful"}}, {"name": "Invalid Login via Action", "description": "Verify that the system handles invalid login attempts via a third-party login provider.", "steps": ["User attempts to submit a review.", "The system prompts for login.", "User selects a third-party login provider but fails authentication.", "System displays an error message."], "expected": {"outcome": "Login fails and user is notified.", "errorMessage": "Login failed. Please try again."}}]}, {"usecase": {"name": "Trip Planning", "scenario": "A user creates a trip plan by adding places to visit, hotels, and restaurants.", "actors": "User", "preconditions": "User is logged in and has started a trip plan.", "steps": ["User adds places to visit.", "User selects hotels and restaurants.", "System saves the trip plan."]}, "testcases": [{"name": "Valid Trip Plan Creation", "description": "Verify that a user can successfully create a trip plan with valid details.", "input": {"Trip name": ["Eiffel Tower", "Louvre Museum"], "hotels": ["Hotel Paris"], "restaurants": ["Le Meurice"]}, "expected": {"outcome": "Trip plan created successfully", "status": "Saved"}}, {"name": "Trip Plan with Missing Details", "description": "Verify that the system handles trip planning with missing places or hotels.", "input": {"places": [], "hotels": ["Hotel Paris"], "restaurants": []}, "expected": {"outcome": "Trip plan creation failed", "errorMessage": "At least one place must be added."}}]}, {"usecase": {"name": "Flight Search", "scenario": "A user searches for flights between two destinations on specific dates.", "actors": "User", "preconditions": "User is on the flight search page.", "steps": ["User selects departure and destination locations.", "User selects travel dates.", "System displays available flights."]}, "testcases": [{"name": "Valid Flight Search", "description": "Verify that a user can successfully search for flights with valid destinations and dates.", "input": {"departureLocation": "New York", "destinationLocation": "Los Angeles", "departureDate": "2024-12-01", "returnDate": "2024-12-10"}, "expected": {"outcome": "Flight search successful", "resultsCount": ">0"}}, {"name": "Flight Search with Invalid Dates", "description": "Verify that the system handles searches with past or invalid dates.", "input": {"departureLocation": "New York", "destinationLocation": "Los Angeles", "departureDate": "2020-01-01", "returnDate": "2020-01-10"}, "expected": {"outcome": "Flight search failed", "errorMessage": "Invalid travel dates."}}]}, {"usecase": {"name": "Tour or Activity Booking", "scenario": "A user books a tour or activity after reviewing the details and confirming payment.", "actors": "User", "preconditions": "User is logged in and has selected a tour or activity.", "steps": ["User reviews tour or activity details.", "User selects the date and number of participants.", "User enters payment details.", "System confirms the booking."]}, "testcases": [{"name": "Valid Tour Booking", "description": "Verify that a user can successfully book a tour with valid details and payment.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 2, "paymentDetails": {"cardNumber": "1234567890123456", "expiryDate": "12/25", "CVV": "123"}}, "expected": {"outcome": "Booking successful", "bookingID": "B456"}}, {"name": "Booking with Invalid Payment", "description": "Verify that the system handles invalid payment details during tour booking.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 2, "paymentDetails": {"cardNumber": "invalid", "expiryDate": "12/25", "CVV": "123"}}, "expected": {"outcome": "Booking failed", "errorMessage": "Invalid payment details."}}, {"name": "Overbooking Participants", "description": "Verify that the system handles the case where the number of participants exceeds the tour capacity.", "input": {"tourID": "T123", "date": "2024-12-01", "participants": 100}, "expected": {"outcome": "Booking failed", "errorMessage": "Number of participants exceeds capacity."}}]}, {"usecase": {"name": "Hotel Booking", "scenario": "A user books a selected hotel after reviewing the details and confirming payment.", "actors": "User", "preconditions": "User has selected a hotel and entered the booking flow.", "steps": ["User reviews the hotel details.", "User selects check-in and check-out dates.", "User enters payment details.", "System confirms the booking."]}, "testcases": [{"name": "Valid Booking", "description": "Verify that a user can successfully see a hotel with valid details.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Redirect to the offer in booking.com page", "link": "H123 link at booking.com"}}, {"name": "Booking with an invalid check in date ", "description": "Verify that the given check in date is reasonable to current date.", "input": {"hotelID": "H123", "Check In": "2024-09-23", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Invalid Check In Date"}}, {"name": "Booking with invalid input in Guest field", "description": "Verify that the given data in guest field is reasonable.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "0", "Adults": "1", "Children": "1"}, "View Deal": "Booking.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Invalid Rooms In Guest Field"}}, {"name": "Booking with a deal that is not available on that date", "description": "Verify whether the deal is available on that data.", "input": {"hotelID": "H123", "Check In": "2024-09-27", "Check Out": "2024-09-29", "Current Date": "2024-09-27", "Guests": {"Rooms": "1", "Adults": "1", "Children": "1"}, "View Deal": "Trip.com"}, "expected": {"outcome": "Further Booking Process Halted", "errorMessage": "Deal is not available"}}]}, {"usecase": {"name": "Personalized Trip Recommendations", "scenario": "A user requests personalized recommendations for hotels, restaurants, and attractions based on their preferences, reviews, and interaction history.", "actors": "User, Recommendation System", "preconditions": "User is logged in with a completed profile and previous interaction history (e.g., reviews, favorites).", "steps": ["User navigates to the 'Recommendations' section from their dashboard.", "User selects a new destination or activity type for recommendations.", "System retrieves the user's profile details, including past interactions such as reviews, favorites, and past trips.", "System analyzes these interactions using a recommendation algorithm and compares them with available listings for the selected destination.", "System filters and ranks listings based on relevance to the user's preferences and other criteria (e.g., similar reviews from like-minded users).", "Personalized recommendations for hotels, restaurants, and attractions are displayed to the user with detailed descriptions, reviews, and ratings.", "User views the recommendations and can choose to save, share, or book directly from the recommendation list."]}, "testcases": [{"name": "Generate Valid Recommendations", "description": "Verify that the system can generate personalized recommendations based on the user's previous reviews, favorites, and preferences.", "input": {"userID": "U123", "destination": "Paris", "preferences": {"favoriteCuisines": ["French", "Italian"], "preferredHotelType": "Luxury", "pastInteractions": {"favoritedListings": ["R245", "H678"], "reviewedListings": ["A567", "R124"]}}}, "expected": {"outcome": "System returns a list of personalized hotel, restaurant, and attraction recommendations in Paris that match the user's preferences.", "status": "Success", "recommendedListings": [{"listingID": "H789", "type": "Hotel", "name": "Le Meurice", "rating": "5 stars", "matchScore": 95}, {"listingID": "R890", "type": "Restaurant", "name": "Chez Janou", "cuisine": "French", "matchScore": 90}, {"listingID": "A123", "type": "Attraction", "name": "Louvre Museum", "matchScore": 88}]}}, {"name": "Generate Recommendations Without Interaction History", "description": "Verify the system's behavior when the user has no past interactions or preferences on file.", "input": {"userID": "U456", "destination": "New York", "preferences": {}}, "expected": {"outcome": "System provides generic recommendations for New York based on popular listings and general traveler preferences.", "status": "Success", "recommendedListings": [{"listingID": "H101", "type": "Hotel", "name": "The Plaza", "rating": "5 stars", "matchScore": 85}, {"listingID": "R202", "type": "Restaurant", "name": "Katz's Delicatessen", "cuisine": "American", "matchScore": 80}, {"listingID": "A303", "type": "Attraction", "name": "Statue of Liberty", "matchScore": 78}]}}, {"name": "Generate Recommendations for Multiple Destinations", "description": "Verify the system's ability to provide personalized recommendations when the user selects multiple destinations for a longer trip.", "input": {"userID": "U789", "destination": ["Tokyo", "Kyoto"], "preferences": {"favoriteCuisines": ["Japanese", "Sushi"], "preferredHotelType": "Traditional Ryokan", "pastInteractions": {"favoritedListings": ["R987"], "reviewedListings": ["A654", "H321"]}}}, "expected": {"outcome": "System returns a list of personalized recommendations for both Tokyo and Kyoto, with tailored suggestions based on the user's preferences and interactions.", "status": "Success", "recommendedListings": [{"listingID": "H432", "type": "Hotel", "name": "Hoshinoya Tokyo", "rating": "5 stars", "location": "Tokyo", "matchScore": 96}, {"listingID": "R543", "type": "Restaurant", "name": "Kyoto Kitcho", "cuisine": "Japanese Kaiseki", "location": "Kyoto", "matchScore": 93}, {"listingID": "A678", "type": "Attraction", "name": "Fushimi Inari Shrine", "location": "Kyoto", "matchScore": 91}]}}]}, {"usecase": {"name": "Hotel Review Submission", "scenario": "A user writes and submits a review for a hotel they stayed at.", "actors": "User", "preconditions": "User has completed a stay at the hotel and is logged in.", "steps": ["User navigates to the review section for the hotel.", "User writes a review and rates the hotel.", "User submits the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review with valid details.", "input": {"hotelID": "H789", "review": "Great hotel with excellent service.", "rating": 5}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Empty Review Submission", "description": "Verify that the system handles review submission without text or rating.", "input": {"hotelID": "H789", "review": "", "rating": 0}, "expected": {"outcome": "Review submission failed", "errorMessage": "Please provide a rating and review."}}]}, {"usecase": {"name": "Account Registration", "scenario": "A new user creates an account on Tripadvisor.", "actors": "User", "preconditions": "User is on the registration page.", "steps": ["User enters their details (name, email, password, etc.).", "User agrees to the terms and conditions.", "User submits the registration form.", "System creates the account and sends a confirmation email."]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a user can successfully create an account with valid details.", "input": {"name": "John Doe", "email": "john.doe@example.com", "password": "strongpassword", "termsAccepted": true}, "expected": {"outcome": "Registration successful", "userID": "U456"}}, {"name": "Registration with Existing Email", "description": "Verify that the system handles account registration with an already existing email.", "input": {"name": "Jane Doe", "email": "john.doe@example.com", "password": "strongpassword", "termsAccepted": true}, "expected": {"outcome": "Registration failed", "errorMessage": "Email already in use."}}]}, {"usecase": {"name": "Restaurant Review Submission", "scenario": "A user writes and submits a review for a restaurant they visited.", "actors": "User", "preconditions": "User has visited the restaurant and is logged in.", "steps": ["User navigates to the review section for the restaurant.", "User writes a review and rates the restaurant.", "User submits the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review with valid details.", "input": {"restaurantID": "R123", "review": "Delicious food and great ambiance.", "rating": 5}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Empty Review Submission", "description": "Verify that the system handles review submission without text or rating.", "input": {"restaurantID": "R123", "review": "", "rating": 0}, "expected": {"outcome": "Review submission failed", "errorMessage": "Please provide a rating and review."}}]}, {"usecase": {"name": "User Profile Update", "scenario": "A logged-in user updates their personal profile information on Tripadvisor.", "actors": "User", "preconditions": "User is logged into their account.", "steps": ["User navigates to the profile settings.", "User updates personal information (name, bio, etc.).", "System saves the updated information."]}, "testcases": [{"name": "Valid Profile Update", "description": "Verify that a user can successfully update their profile with valid details.", "input": {"userID": "U123", "name": "John Doe", "bio": "Travel enthusiast."}, "expected": {"outcome": "Profile update successful", "status": "Updated"}}, {"name": "Profile Update with Empty Fields", "description": "Verify that the system handles profile update attempts with empty mandatory fields.", "input": {"userID": "U123", "name": "", "bio": ""}, "expected": {"outcome": "Profile update failed", "errorMessage": "Name field is required."}}]}, {"usecase": {"name": "Hotel Search", "scenario": "A user searches for hotels in a specific destination with specific filters.", "actors": "User", "preconditions": "User is on the homepage or hotel search page.", "steps": ["User enters a destination.", "User applies filters (price range, rating, amenities, etc.).", "System displays the search results."]}, "testcases": [{"name": "Valid Search with Filters", "description": "Verify that a user can successfully search for hotels with valid destination and filters.", "input": {"destination": "New York", "filters": {"priceRange": "$100-$300", "rating": "4+", "amenities": ["WiFi", "Pool"]}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Search with No Filters", "description": "Verify that a user can search for hotels without applying filters.", "input": {"destination": "Paris", "filters": {}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Invalid Destination", "description": "Verify that the system handles searches with invalid or empty destination.", "input": {"destination": "", "filters": {}}, "expected": {"outcome": "Search failed", "errorMessage": "Please enter a destination."}}]}, {"usecase": {"name": "Restaurant Search", "scenario": "A user searches for restaurants in a specific location with filters like cuisine type and rating.", "actors": "User", "preconditions": "User is on the restaurant search page.", "steps": ["User selects a location.", "User applies filters (cuisine type, rating, etc.).", "System displays the search results."]}, "testcases": [{"name": "Valid Restaurant Search", "description": "Verify that a user can successfully search for restaurants with valid filters.", "input": {"location": "San Francisco", "filters": {"cuisine": "Italian", "rating": "4+"}}, "expected": {"outcome": "Search successful", "resultsCount": ">0"}}, {"name": "Invalid Location Search", "description": "Verify that the system handles invalid or empty location inputs during restaurant search.", "input": {"location": "", "filters": {}}, "expected": {"outcome": "Search failed", "errorMessage": "Please enter a valid location."}}]}, {"usecase": {"name": "Individual Course enrollment", "scenario": "Learner selects a course, if its not free, he pays money to access all course content", "actors": "Learner", "preconditions": "Learner has a coursera account", "steps": ["Learner selects a paid course", "Learner provides his name and country", "Learner selects payment via card or paypal", "For card payment, Learner provides number, Expiration date and Security code and make payment", "For paypal payment, Learner logs in to his paypal account and make payment"]}, "testcases": [{"name": "Valid personal and Card info", "description": "Verify successful payment", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "189"}, "expected": {"outcome": "Enrollment Successful", "status": "Successful"}}, {"name": "Country not provided", "description": "Verify that the system handles the case where country field is empty.", "input": {"Name": "name", "Country": "", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "There was a problem. Country is required.", "status": "Failed"}}, {"name": "Empty/incomplete card number", "description": "Verify that the system handles the case where card number is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 11", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "Your card number is incomplete.", "status": "Failed"}}, {"name": "Invalid card number", "description": "Verify that the system handles the case where where card number is invalid.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1236", "Expiration date": "06/27", "Security Code": "126"}, "expected": {"outcome": "Your card number is invalid.", "status": "Failed"}}, {"name": "Empty/incomplete card Expiration date", "description": "Verify that the system handles the case where Expiration date is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "02/", "Security Code": "458"}, "expected": {"outcome": "Your card's expiration date is incomplete.", "status": "Failed"}}, {"name": "past card Expiration date", "description": "Verify that the system handles the case where a past Expiration date is provided.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "11/23", "Security Code": "458"}, "expected": {"outcome": "Your card's expiration date is in the past.", "status": "Failed"}}, {"name": "Empty/Incomplete card Security Code", "description": "Verify that the system handles the case where security code field is empty or incomplete.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "12"}, "expected": {"outcome": "Your card's security code is incomplete.", "status": "Failed"}}, {"name": "Incorrect card Security Code", "description": "Verify that the system handles the case where security code is incorrect.", "input": {"Name": "name", "Country": "Bangladesh", "Card Number": "4111 1111 1111 1111", "Expiration date": "06/27", "Security Code": "485"}, "expected": {"outcome": "Your card's security code is incorrect.", "status": "Failed"}}]}, {"usecase": {"name": "Giving quiz", "scenario": "Learner gives quiz to test the learning of course contents.", "actors": "Learner", "preconditions": "Learner enrolled in the course", "steps": ["Learner select the quiz", "Learner answers the MCQs", "Learner submit the ans", "System automatically shows the result"]}, "testcases": [{"name": "Valid quiz submission", "description": "Verify that learner can submit quiz answer properly and see the result.", "input": {"HonorCodeCheckBox": true, "LegalName": "name"}, "expected": {"submitButtonActivated": true, "outcome": "submission successful", "status": "successful"}}, {"name": "Unticked honour Code check box", "description": "Verify that the system handles the case where Honour Code checkbox is unticked.", "input": {"HonorCodeCheckBox": false, "LegalName": "name"}, "expected": {"submitButtonActivated": false, "outcome": "submit button not activated", "status": "unsuccessful"}}, {"name": "Empty legal name", "description": "Verify that the system handles the case where legal name not provided.", "input": {"HonorCodeCheckBox": true, "LegalName": ""}, "expected": {"submitButtonActivated": false, "outcome": "submit button not activated", "status": "unsuccessful"}}]}, {"usecase": {"name": "Post or reply on discussion forums", "scenario": "Learner creates a new discussion.", "actors": "Student", "preconditions": "Student is enrolled in the course", "steps": ["Learner clicks create post button", "Learner add a Post title", "Learner add a Post body", "Learner select a forum"]}, "testcases": [{"name": "Valid new post", "description": "Verify that a learner can successfully create a new post.", "input": {"Title": "title", "Body": "Body", "Forum": "Week 4"}, "expected": {"outcome": "new post created", "status": "Successful"}}, {"name": "Empty Title", "description": "Verify that the system handles the case where the post title is empty.", "input": {"Title": "", "Body": "Body", "Forum": "Week 4"}, "expected": {"outcome": "Error: Please enter a longer title", "status": "failed"}}, {"name": "Empty Body", "description": "Verify that the system handles the case where the post description is empty.", "input": {"Title": "title", "Body": "", "Forum": "Week 4"}, "expected": {"outcome": "Error: Please enter a longer thread description", "status": "failed"}}]}, {"usecase": {"name": "Apply for financial aid", "scenario": "An user requests for financial aid for a specific course", "actors": "User", "preconditions": "User has an account and the account is logged in", "steps": ["User clicks on a paid course to enroll it", "User clicks on Financial aid available", "User provides the required information", "User clicks on Next button at the bottom of the form", "User provides the required information and response", "User clicks on Review button at the bottom"]}, "testcases": [{"name": "All the required information provided in the first step of a financial aid request", "description": "User provides all the reuired information for the first step of a financial aid request", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Information forwarded to the next step", "status": "Approved"}}, {"name": "Empty level of education", "description": "Verify that the system handles the case where level of education is not provided.", "input": {"Level of education": "", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Level of education must be provided", "status": "Rejected"}}, {"name": "empty annual income", "description": "Verify that the system handles the case where annual income field is empty.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "", "Currency": ""}, "Employment status": "Part time", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Annual income must be provided", "status": "Rejected"}}, {"name": "Empty Employment status.", "description": "Verify that the system handles the case where Employment status is not provided.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "", "Reason for applying": "My father have passed last year. So currently I don't have a reliable income source. (must be above 150 wards)"}, "expected": {"outcome": "Employment status must be provided", "status": "Rejected"}}, {"name": "Empty Reason for applying", "description": "Verify that the system handles the case where reason for applying is not provoded.", "input": {"Level of education": "College degree", "Annual income": {"Amount of annual income": "1000", "Currency": "$ CAD"}, "Employment status": "Part time", "Reason for applying": ""}, "expected": {"outcome": "Reason for applying must be provided", "status": "Rejected"}}, {"name": "All the required information provided in the second step", "description": "User provides all the reuired information for the second step of a financial aid request", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Information forwarded for reviewing", "status": "Approved"}}, {"name": "All the required information provided in the second step", "description": "User provides all the reuired information for the second step of a financial aid request", "input": {"Pay for your selected course": "0$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Information forwarded for reviewing", "status": "Approved"}}, {"name": "Empty reason for selecting course", "description": "Verify that the system handles the case where reason for selecting course not provided.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "Reason for selecting the course must be provided", "status": "Rejected"}}, {"name": "Accurate information checkbox unchecked", "description": "Verify that the system handles the case where accurate information checkbox is unchecked.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": false, "I commit to finishing my Coursera course": true, "Type the required sentence": "I agree to the terms above"}, "expected": {"outcome": "All checkboxes must checked", "status": "Rejected"}}, {"name": "Empty Required sentence", "description": "Verify that the system handles the case where required sentence is not provided.", "input": {"Pay for your selected course": "10$", "Reason for selecting the course": "It will help me to build a suitable career. (must be above 150 wards)", "I'm sharing accurate information on my application": true, "I commit to finishing my Coursera course": true, "Type the required sentence": ""}, "expected": {"outcome": "Required sentence must be written", "status": "Rejected"}}]}, {"usecase": {"name": "Team's Course Registration", "scenario": "An user wants to register for a team-based course ", "actors": "User", "preconditions": "User has an account and is logged in", "steps": ["User choose number of users for a team", "User clicks on  Continue button in under plan details", "User provides the required information in the form that appears", "User clicks on the Continue button under account details"]}, "testcases": [{"name": "Invalid team member numbers", "description": "Verify that the system handles the case where team members number invalid or this field is empty", "input": {"Number of users": "2"}, "expected": {"outcome": "Minimum 5 users.", "status": "Failed"}}, {"name": "Valid team members number", "description": "Verify valid team members number", "input": {"Number of users": "10"}, "expected": {"outcome": "Plan details complete", "status": "Accepted"}}, {"name": "Valid account details", "description": "Verify valid account details", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Account details set up", "status": "Successful"}}, {"name": "Full name not provided", "description": "Verify that the system handles the case where full name field is empty.", "input": {"Full name": "", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Full name is required.", "status": "Failed"}}, {"name": "Empty/Invalid business email", "description": "Verify that the system handles the case where business email field is empty or invalid.", "input": {"Full name": "user", "Business email": "user.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Please enter a valid email.", "status": "Failed"}}, {"name": "Empty job title", "description": "Verify that the system handles the case where job title field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "", "Organization name": "BUET", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Job title is required.", "status": "Failed"}}, {"name": "Empty organization name", "description": "Verify that the system handles the case where organization name field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "", "Organization type": "University", "Organization size": "1001-5000"}, "expected": {"outcome": "Organization name is required.", "status": "Failed"}}, {"name": "Not selected organization type", "description": "Verify that the system handles the case where organization type field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "", "Organization size": "1001-5000"}, "expected": {"outcome": "Organization type is required.", "status": "Failed"}}, {"name": "Not selected organization size", "description": "Verify that the system handles the case where organization size field is empty.", "input": {"Full name": "user", "Business email": "user@gmail.com", "Job title": "Student", "Organization name": "BUET", "Organization type": "University", "Organization size": ""}, "expected": {"outcome": "Organization size is required.", "status": "Failed"}}]}, {"usecase": {"name": "Add Education Credentials", "scenario": "An user adds their education credentials to their profile", "actors": "User", "preconditions": "User has an account and is logged in", "steps": ["User clicks on + Add button in the Credentials section under the Education Heading", "User provides the required information in the form that appears", "User clicks on the Save button to save the information"]}, "testcases": [{"name": "All Credentials entered", "description": "Verify that an user can successfully add their education credentials to their profile.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2026"}, "I currently study here": true, "Cumulative grade": "x.yz"}, "expected": {"outcome": "Credential added to profile", "status": "Approved"}}, {"name": "Only Institution name entered", "description": "User only provides Institution name", "input": {"Name of Institution": "BUET", "Degree": "", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Degree entered", "description": "User only provides Degree", "input": {"Name of Institution": "", "Degree": "Less than High School Diploma (or equivalent)", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Start date entered", "description": "User only provides Start date", "input": {"Name of Institution": "", "Degree": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "", "Year": ""}, "I currently study here": false}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Only Graduation date entered", "description": "User only provides Graduation date", "input": {"Name of Institution": "", "Degree": "", "Start date": {"Month": "", "Year": ""}, "Graduation date or expected graduation date": {"Month": "January", "Year": "2026"}, "I currently study here": true}, "expected": {"outcome": "Credential added to profile", "status": "Accepted"}}, {"name": "Start date is later than Graduation date", "description": "Verify that the system handles the case where an user enters a start date later than the graduation date.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "December", "Year": "2024"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2024"}, "I currently study here": true, "Cumulative grade": ""}, "expected": {"outcome": "Graduation date must be later than start date", "status": "Rejected"}}, {"name": "User selects 'I currently study here' but provides a Graduation date in the past", "description": "Verify that the system doesn't allow an user to select 'I currently study here' but provide a Graduation date in the past.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2024"}, "I currently study here": true, "Cumulative grade": ""}, "expected": {"outcome": "Please select a future date", "status": "Rejected"}}, {"name": "User doesn't select 'I currently study here' but provides a Graduation date in the future", "description": "Verify that the system doesn't allow an user to provide a Graduation date in the future without selecting 'I currently study here'.", "input": {"Name of Institution": "BUET", "Degree": "Bachelor's Degree (e.g., BA, AB, BS)", "Discipline": "Computer Science", "Area of concentration": "", "Start date": {"Month": "January", "Year": "2022"}, "Graduation date or expected graduation date": {"Month": "March", "Year": "2026"}, "I currently study here": false, "Cumulative grade": ""}, "expected": {"outcome": "Please select a date before today", "status": "Rejected"}}]}, {"author": "Student ID: 2005015", "usecase": {"name": "Project Intake", "scenario": "A user submits new project requests through a structured process that includes inputting details and prioritizing projects for review.", "actors": "User, Reviewer", "preconditions": "User has permission to submit project requests.", "steps": ["User navigates to the project intake section.", "User fills in the project details: title, description, and start date.", "User submits the project request.", "The request is routed to the appropriate reviewer for approval.", "Reviewer approves or rejects the project based on the details."]}, "testcases": [{"name": "Submit Project Request", "description": "Verify that a user can successfully submit a new project request with valid details.", "input": {"title": "Implement new customer support system", "description": "Research and select a suitable software solution.", "start_date": "2024-11-01"}, "expected": {"outcome": "Project request submitted successfully", "status": "Routed to reviewer"}}, {"name": "Missing Project Title", "description": "Verify that the system displays an error when the user attempts to submit a project request without a title.", "input": {"description": "Improve website performance and user experience.", "start_date": "2024-12-01"}, "expected": {"outcome": "Project request submission failed", "status": "Error", "error": "Title is required"}}, {"name": "Project Prioritization", "description": "Verify that when two project requests are submitted, the project with higher priority appears first in the list.", "input": {"project_request_1": {"title": "Launch new product line", "priority": "High"}, "project_request_2": {"title": "Upgrade company software", "priority": "Medium"}}, "expected": {"outcome": "High priority project appears first in the list", "status": "Success"}}, {"name": "Duplicate Project Submission", "description": "Verify that the system prevents a duplicate project request with the same title and start date from being submitted.", "input": {"title": "Implement new customer support system", "description": "Duplicate request of the same project", "start_date": "2024-11-01"}, "expected": {"outcome": "Duplicate project request submission failed", "status": "Error", "error": "Project with the same title and start date already exists"}}, {"name": "Set Project Start Date in the Past", "description": "Verify that the system does not allow a project request to be submitted with a start date in the past.", "input": {"title": "Revamp HR system", "description": "Plan to overhaul the HR system.", "start_date": "2023-10-01"}, "expected": {"outcome": "Project request submission failed", "status": "Error", "error": "Start date cannot be in the past"}}, {"name": "Valid Future Start Date", "description": "Verify that the system accepts a valid future start date for a project request.", "input": {"title": "Digital Marketing Campaign", "description": "Launch a digital marketing campaign for the new product.", "start_date": "2025-03-15"}, "expected": {"outcome": "Project request submitted successfully", "status": "Success"}}]}, {"author": "Student ID: 2005029", "usecase": {"name": "Resource Planning", "scenario": "A project manager identifies and allocates resources (team members, time, budget) to various tasks in a project.", "actors": "Project Manager, Team Members", "preconditions": "Project is created, and team members are available for resource allocation.", "steps": ["Project Manager navigates to the resource planning section of the project.", "Manager assigns a team member to a task and estimates the required effort.", "Manager reviews potential resource conflicts.", "The assigned tasks and resources are updated in the system."]}, "testcases": [{"name": "Resource Allocation", "description": "Verify that a project manager can assign a team member to a task and estimate the time required for its completion.", "input": {"task_id": "12345", "assignee": "Tausif", "estimated_time": "40 hours"}, "expected": {"outcome": "Resource allocated successfully", "status": "Reflected in team member's workload view"}}, {"name": "Resource Conflict", "description": "Verify that the system highlights a conflict when a team member is assigned to two tasks with overlapping deadlines.", "input": {"task_1_id": "12345", "task_2_id": "67890", "assignee": "Azmal", "task_1_due_date": "2024-10-15", "task_2_due_date": "2024-10-17"}, "expected": {"outcome": "Conflict warning displayed", "status": "Warning message: Resource conflict due to overlapping tasks"}}, {"name": "Track Resource Utilization", "description": "Verify that the system generates an accurate report on the workload and resource utilization of a team member over a specific time period.", "input": {"team_member": "Tamim", "time_period": "October 2024"}, "expected": {"outcome": "Report generated successfully", "status": "Reflects accurate resource utilization"}}, {"name": "Over-allocation Warning", "description": "Verify that the system warns the project manager when they attempt to assign more tasks to a team member than they can handle within the estimated time.", "input": {"task_id": "98765", "assignee": "Fuad", "estimated_time": "50 hours"}, "expected": {"outcome": "Over-allocation warning displayed", "status": "Warning message: Resource over-allocated"}}, {"name": "Unassigned Task", "description": "Verify that a task without an assigned team member is flagged for review.", "input": {"task_id": "11223", "assignee": null}, "expected": {"outcome": "Unassigned task flagged", "status": "Alert: Task not assigned to any resource"}}]}, {"author": "Student ID: 2005028", "usecase": {"name": "Task Management", "scenario": "A user creates, assigns, and manages tasks within a project, including modifying due dates.", "actors": "User, Team Members", "preconditions": "User is logged in, has access to the project, and permissions to manage tasks.", "steps": ["User navigates to the project and clicks 'Add Task'.", "User fills in task details, assigns it to a team member, and sets a due date.", "User can edit task details or modify the due date as required.", "System updates the task details and ensures all assignments are reflected."]}, "testcases": [{"name": "Valid Task Creation", "description": "Verify that the user can successfully create a task with valid details.", "input": {"taskName": "Design new homepage", "assignee": "Adibah", "dueDate": "2024-10-01"}, "expected": {"outcome": "Task created successfully", "status": "Success"}}, {"name": "Empty Task Name", "description": "Verify that the system prevents task creation with an empty task name.", "input": {"taskName": "", "assignee": "Mumu", "dueDate": "2024-10-01"}, "expected": {"outcome": "Task creation failed", "status": "Failure"}}, {"name": "Successful Task Assignment", "description": "Verify that the user can assign a task to another team member.", "input": {"taskID": "1234", "assignee": "Fuad"}, "expected": {"outcome": "Task assigned successfully", "status": "Success"}}, {"name": "Invalid Assignee", "description": "Verify that the system prevents assigning a task to a user who is not a member of the project.", "input": {"taskID": "1234", "assignee": "Nabil"}, "expected": {"outcome": "Task assignment failed", "status": "Failure", "error": "Assignee is not a project member"}}, {"name": "Successful Due Date Modification", "description": "Verify that the user can modify the due date of a task.", "input": {"taskID": "1234", "newDueDate": "2024-10-15"}, "expected": {"outcome": "Due date modified successfully", "status": "Success"}}, {"name": "Invalid Due Date in the Past", "description": "Verify that the system prevents a user from selecting a single due date in the past.", "input": {"taskID": "1234", "newDueDate": "2023-09-15"}, "expected": {"outcome": "Due date modification failed", "status": "Failure", "error": "Cannot set due date in the past"}}, {"name": "Valid Date Range", "description": "Verify that the user can successfully select a valid future date range for a task.", "input": {"taskID": "1234", "dateRange": {"startDate": "2024-11-01", "endDate": "2024-12-01"}}, "expected": {"outcome": "Due date range modified successfully", "status": "Success"}}, {"name": "Remove Assignee", "description": "Verify that the user can remove an assignee from a task, leaving the task unassigned.", "input": {"taskID": "1234", "assignee": ""}, "expected": {"outcome": "Assignee removed successfully", "status": "Success"}}, {"name": "Delete Existing Task", "description": "Verify that the system can delete an existing task", "input": {"taskID": "12345"}, "expected": {"outcome": "Task deleted", "status": "Success"}}, {"name": "Delete Non-Existent Task", "description": "Verify that the system prevents deletion of a task that does not exist.", "input": {"taskID": "0000"}, "expected": {"outcome": "Task deletion failed", "status": "Failure", "error": "Task does not exist"}}, {"name": "Delete Task with Dependencies", "description": "Verify that the system warns when attempting to delete a task that has dependencies.", "input": {"taskID": "1234", "dependentTasks": ["5678", "9101"]}, "expected": {"outcome": "Task deletion failed", "status": "Failure", "error": "Cannot delete task with active dependencies"}}, {"name": "Set Dependency on a Task", "description": "Verify that the system can set dependency on a task.", "input": {"taskID": "1234", "dependentTaskID": "5678"}, "expected": {"outcome": "Dependency setting successful", "status": "Success"}}, {"name": "Set Dependency on Completed Task", "description": "Verify that the system prevents setting a dependency on a task that is already completed.", "input": {"taskID": "1234", "dependentTaskID": "5678", "dependentTaskStatus": "Completed"}, "expected": {"outcome": "Dependency setting failed", "status": "Failure", "error": "Cannot set dependency on a completed task"}}, {"name": "Set Circular Task Dependencies", "description": "Verify that the system prevents setting circular dependencies between tasks.", "input": {"taskID": "1234", "dependentTaskID": "5678", "existingDependencies": [{"taskID": "5678", "dependentTaskID": "1234"}]}, "expected": {"outcome": "Dependency setting failed", "status": "Failure", "error": "Cannot set circular dependencies"}}, {"name": "Set Valid Priority Level", "description": "Verify that the system successfully sets a valid priority level for a task.", "input": {"taskID": "1234", "priority": "High"}, "expected": {"outcome": "Priority successfully set", "status": "Success"}}, {"name": "Invalid Priority Level", "description": "Verify that the system prevents setting an invalid priority level for a task.", "input": {"taskID": "1234", "priority": "Urgent"}, "expected": {"outcome": "Priority setting failed", "status": "Failure", "error": "Invalid priority level. Allowed values are: Low, Medium, High"}}]}, {"author": "Student ID: 2005052", "usecase": {"name": "Add Rules", "scenario": "A user adds automated rules to a project to trigger specific actions based on conditions.", "actors": "User", "preconditions": "User has access to the project and permission to manage rules.", "steps": ["User navigates to the project settings.", "User selects the 'Rules' tab.", "User clicks 'Add Rule' and selects a trigger (e.g., task moved to a section).", "User selects the corresponding action (e.g., assign task, mark task as complete).", "System saves the rule and applies it to the project."]}, "testcases": [{"name": "Successful Rule Addition", "description": "Verify that the user can successfully add a rule to a project.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Adibah'"}, "expected": {"outcome": "Rule added successfully", "status": "Success"}}, {"name": "Duplicate Rule", "description": "Verify that the system prevents adding a duplicate rule with the same trigger and action.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Adibah'"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Duplicate rule detected"}}, {"name": "Invalid Trigger", "description": "Verify that the system prevents adding a rule with an invalid or non-existent trigger.", "input": {"projectID": "5678", "trigger": "Invalid Trigger", "action": "Assign task to 'Mumu'"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Invalid trigger"}}, {"name": "Invalid Action", "description": "Verify that the system prevents adding a rule with an invalid or non-existent action.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Invalid Action"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Invalid action"}}, {"name": "Rule Without Permission", "description": "Verify that a user without proper permissions cannot add a rule to the project.", "input": {"projectID": "5678", "trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Mumu'", "userPermissions": "Read-only"}, "expected": {"outcome": "Rule addition failed", "status": "Failure", "error": "Insufficient permissions"}}, {"name": "Multiple Rules Addition", "description": "Verify that a user can successfully add multiple unique rules to a project.", "input": {"projectID": "5678", "rules": [{"trigger": "Task moved to 'In Progress'", "action": "Assign task to 'Fuad'"}, {"trigger": "Task marked as complete", "action": "Move task to 'Completed'"}]}, "expected": {"outcome": "Multiple rules added successfully", "status": "Success"}}]}, {"author": "Student ID: 2005056", "usecase": {"name": "Custom Fields Management", "scenario": "A user adds, modifies, or deletes custom fields in a project to track additional task attributes.", "actors": "User", "preconditions": "User has access to the project and permission to manage custom fields.", "steps": ["User navigates to the project settings.", "User selects the 'Custom Fields' tab.", "User clicks 'Add Field' to create a new custom field with specific attributes (e.g., text, dropdown, number).", "User can also edit existing custom fields or remove them from the project.", "System saves or updates the custom fields and applies them to tasks within the project."]}, "testcases": [{"name": "Successful Custom Field Addition", "description": "Verify that a user can successfully add a custom field to a project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}}, "expected": {"outcome": "Custom field added successfully", "status": "Success"}}, {"name": "Custom Field Addition with Duplicate Name", "description": "Verify that the system prevents adding a custom field with a name that already exists in the project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}}, "expected": {"outcome": "Custom field addition failed", "status": "Failure", "error": "Custom field with this name already exists"}}, {"name": "Invalid Custom Field Type", "description": "Verify that the system prevents adding a custom field with an invalid type.", "input": {"projectID": "5678", "customField": {"name": "Deadline", "type": "InvalidType"}}, "expected": {"outcome": "Custom field addition failed", "status": "Failure", "error": "Invalid custom field type"}}, {"name": "Successful Custom Field Modification", "description": "Verify that a user can modify an existing custom field\u2019s attributes.", "input": {"projectID": "5678", "customField": {"fieldID": "1234", "newName": "Task Urgency", "newType": "Dropdown", "newOptions": ["Urgent", "Non-urgent"]}}, "expected": {"outcome": "Custom field modified successfully", "status": "Success"}}, {"name": "Custom Field Without Permission", "description": "Verify that a user without proper permissions cannot add, modify, or delete custom fields in the project.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}, "userPermissions": "Read-only"}, "expected": {"outcome": "Custom field modification failed", "status": "Failure", "error": "Insufficient permissions"}}, {"name": "Successful Custom Field Addition with Rules", "description": "Verify that a user can successfully add a custom field and define rules that trigger actions based on custom field changes.", "input": {"projectID": "5678", "customField": {"name": "Priority", "type": "Dropdown", "options": ["High", "Medium", "Low"]}, "rule": {"trigger": "Custom Field 'Priority' is set to 'High'", "action": "Assign task to 'Team Lead'"}}, "expected": {"outcome": "Custom field and rule added successfully", "status": "Success"}}]}, {"author": "Student ID: 2005050", "usecase": {"name": "Goal Management", "scenario": "A user creates and manages goals with clear objectives, deadlines, link tasks to goal and tracks progress towards goal completion.", "actors": "User", "preconditions": "User has permission to create and manage goals within the project.", "steps": ["User navigates to the Goals section in the project.", "User clicks on 'Create New Goal'.", "User fills in the goal details: title, description, and deadline.", "User clicks 'Save' to create the goal.", "User updates the goal's progress by tracking completed tasks related to the goal.", "User can edit, monitor, and adjust the goal status until completion."]}, "testcases": [{"name": "Valid Goal Creation", "description": "Verify that a user can create a new goal with a valid title, description, and deadline.", "input": {"title": "Achieve 20% increase in sales by Q4", "description": "Implement new marketing strategies and improve sales processes.", "deadline": "2024-12-31"}, "expected": {"outcome": "Goal created successfully", "status": "Success"}}, {"name": "Missing Title in Goal Creation", "description": "Verify that the system shows an error message if a user attempts to create a goal without a title.", "input": {"description": "Increase customer satisfaction by 15%.", "deadline": "2024-10-31"}, "expected": {"outcome": "Goal creation failed", "status": "Error", "error": "Title is required"}}, {"name": "Link Task to a Goal", "description": "Verify that the system successfully links a task to a specific goal.", "input": {"taskID": "5678", "goalID": "1234"}, "expected": {"outcome": "Task successfully linked to goal", "status": "Success"}}, {"name": "Link Non-Existent Task to a Goal", "description": "Verify that the system prevents linking a non-existent task to a goal.", "input": {"taskID": "0000", "goalID": "1234"}, "expected": {"outcome": "Task linking failed", "status": "Failure", "error": "Task does not exist"}}, {"name": "Link Task to Non-Existent Goal", "description": "Verify that the system prevents linking a task to a non-existent goal.", "input": {"taskID": "5678", "goalID": "0000"}, "expected": {"outcome": "Task linking failed", "status": "Failure", "error": "Goal does not exist"}}, {"name": "Link Task to Multiple Goals", "description": "Verify that the system supports linking a single task to multiple goals.", "input": {"taskID": "5678", "goalIDs": ["1234", "5679"]}, "expected": {"outcome": "Task successfully linked to multiple goals", "status": "Success"}}, {"name": "Unlink Task from Goal", "description": "Verify that the system successfully unlinks a task from a goal.", "input": {"taskID": "5678", "goalID": "1234"}, "expected": {"outcome": "Task successfully unlinked from goal", "status": "Success"}}, {"name": "Track Goal Progress", "description": "Verify that the system allows the user to update the progress of a goal as tasks are completed.", "input": {"goal_id": "12345", "progress": "50%"}, "expected": {"outcome": "Progress updated successfully", "status": "Success", "progressBar": "50%"}}, {"name": "Edit Goal Details", "description": "Verify that a user can modify the title, description, or deadline of an existing goal.", "input": {"goal_id": "12345", "newTitle": "Achieve 25% increase in sales by Q4", "newDeadline": "2024-11-30"}, "expected": {"outcome": "Goal details updated successfully", "status": "Success"}}, {"name": "Set Goal Deadline in the Past", "description": "Verify that the system prevents the user from setting a goal deadline in the past.", "input": {"title": "Reduce churn rate by 10%", "description": "Improve customer retention strategies.", "deadline": "2023-01-01"}, "expected": {"outcome": "Goal creation failed", "status": "Error", "error": "Deadline cannot be in the past"}}, {"name": "Valid Goal Deadline", "description": "Verify that the user can set a valid future deadline for a goal.", "input": {"title": "Launch new product line", "description": "Develop and launch a new range of eco-friendly products.", "deadline": "2025-05-01"}, "expected": {"outcome": "Goal created successfully", "status": "Success"}}, {"name": "Automatic Rule Trigger on Goal Completion", "description": "Verify that a predefined rule triggers when a goal's progress reaches 100%, for example, notifying the team.", "input": {"goal_id": "12345", "progress": "100%"}, "expected": {"outcome": "Rule triggered, notification sent to team", "status": "Success"}}]}, {"author": "Student ID: 2005015", "usecase": {"name": "Reporting and Analytics", "scenario": "A user generates reports for task completion rates, project deadlines, and overall project progress. The user can also create custom dashboards to track project performance metrics.", "actors": "User, System", "preconditions": "User has permission to access reporting features.", "steps": ["User navigates to the reporting and analytics section.", "User selects the type of report (e.g., task completion rate, project deadline overview).", "User configures the report parameters (e.g., date range, project selection).", "User generates the report and views the output.", "User customizes the dashboard to display key performance metrics."]}, "testcases": [{"name": "Generate Task Completion Rate Report", "description": "Verify that the system generates a task completion rate report for a given project within a selected date range.", "input": {"reportType": "Task Completion Rate", "projectID": "5678", "dateRange": {"start": "2024-09-01", "end": "2024-09-30"}}, "expected": {"outcome": "Task completion rate report generated successfully", "status": "Success"}}, {"name": "Generate Project Deadline Overview", "description": "Verify that the system generates a report showing the deadlines for all tasks in a project within a selected date range.", "input": {"reportType": "Project Deadline Overview", "projectID": "5678", "dateRange": {"start": "2024-09-01", "end": "2024-09-30"}}, "expected": {"outcome": "Project deadline overview report generated successfully", "status": "Success"}}, {"name": "Create Custom Performance Dashboard", "description": "Verify that the user can create a custom dashboard to track project performance metrics such as task completion rates and upcoming deadlines.", "input": {"dashboardName": "Project Performance", "widgets": [{"type": "Task Completion Rate", "projectID": "5678"}, {"type": "Upcoming Deadlines", "projectID": "5678"}]}, "expected": {"outcome": "Custom dashboard created successfully", "status": "Success"}}, {"name": "Invalid Date Range for Report", "description": "Verify that the system prevents generating a report when an invalid date range (e.g., start date after end date) is provided.", "input": {"reportType": "Task Completion Rate", "projectID": "5678", "dateRange": {"start": "2024-09-30", "end": "2024-09-01"}}, "expected": {"outcome": "Report generation failed", "status": "Failure", "error": "Invalid date range"}}]}, {"author": "Student ID: 2005028", "usecase": {"name": "Product Launches", "scenario": "A team creates and manages product launch roadmaps with key milestones, deadlines, and collaboration features.", "actors": "Product Manager, Team Members, Marketing Team", "preconditions": "Product concept is approved, and team members are assigned to the project.", "steps": ["Product Manager creates a product launch roadmap with key milestones and deadlines.", "Team members collaborate by assigning tasks and commenting on milestones.", "Milestones are tracked, and progress is updated based on completion."]}, "testcases": [{"name": "Roadmap Creation", "description": "Verify that a new product launch roadmap with key milestones and deadlines can be created successfully.", "input": {"product_name": "New Mobile App", "launch_date": "2024-12-01", "milestones": [{"title": "Design and prototyping", "deadline": "2024-09-30"}, {"title": "Development and testing", "deadline": "2024-11-15"}]}, "expected": {"outcome": "Roadmap created successfully", "status": "Displayed visually with clear milestones and progress tracking"}}, {"name": "Collaboration", "description": "Verify that team members can leave comments and assign tasks within the product launch roadmap, and that changes are visible to all collaborators.", "input": {"roadmap_id": "12345", "comment": "Need to discuss marketing strategy with the team.", "task_assignment": {"task_id": "67890", "assignee": "Adibah"}}, "expected": {"outcome": "Collaboration successful", "status": "Comments and task assignments are visible to all collaborators"}}, {"name": "Track Progress", "description": "Verify that marking a milestone as complete updates the overall roadmap progress.", "input": {"milestone_id": "12345"}, "expected": {"outcome": "Milestone marked as complete", "status": "Overall roadmap progress updated"}}, {"name": "Duplicate Milestone Prevention", "description": "Verify that the system prevents duplicate milestones with the same title and deadline in a single roadmap.", "input": {"milestone_title": "Design and prototyping", "deadline": "2024-09-30"}, "expected": {"outcome": "Duplicate milestone prevented", "status": "Error message: Duplicate milestone"}}, {"name": "Missed Deadline Notification", "description": "Verify that the system sends a notification when a milestone deadline is missed.", "input": {"milestone_id": "12345", "deadline": "2024-09-30", "current_date": "2024-10-01"}, "expected": {"outcome": "Notification sent", "status": "Alert: Milestone deadline missed"}}]}, {"author": "Student ID: 2005029", "usecase": {"name": "Permissions and Access Control", "scenario": "A user manages who can view, edit, or delete tasks/projects by configuring role-based access for different teams or individuals.", "actors": "Admin, User, Team", "preconditions": "Admin has permission to manage access control settings.", "steps": ["Admin navigates to the permissions settings of a project or task.", "Admin assigns roles (e.g., Viewer, Editor, Admin) to users or teams.", "Admin configures permissions for viewing, editing, or deleting tasks or projects.", "User actions are restricted based on their assigned roles.", "System prevents unauthorized actions like editing or deleting without the necessary permissions."]}, "testcases": [{"name": "Assign Viewer Role to User", "description": "Verify that the system allows the admin to assign the 'Viewer' role to a user, limiting them to view-only access.", "input": {"projectID": "1234", "userID": "5678", "role": "Viewer"}, "expected": {"outcome": "User assigned 'Viewer' role successfully", "status": "Success"}}, {"name": "Assign Editor Role to User", "description": "Verify that the system allows the admin to assign the 'Editor' role to a user, enabling them to edit tasks or projects.", "input": {"projectID": "1234", "userID": "5678", "role": "Editor"}, "expected": {"outcome": "User assigned 'Editor' role successfully", "status": "Success"}}, {"name": "Prevent Deletion by Viewer Role", "description": "Verify that a user with the 'Viewer' role is unable to delete tasks or projects.", "input": {"taskID": "4321", "userID": "5678", "action": "Delete Task"}, "expected": {"outcome": "Deletion action failed", "status": "Failure", "error": "User does not have permission to delete tasks"}}, {"name": "Prevent Editing by Non-Editor Role", "description": "Verify that a user without 'Editor' or 'Admin' roles cannot edit tasks or projects.", "input": {"taskID": "4321", "userID": "5678", "action": "Edit Task", "role": "Viewer"}, "expected": {"outcome": "Edit action failed", "status": "Failure", "error": "User does not have permission to edit tasks"}}, {"name": "Grant Admin Role to User", "description": "Verify that the system allows the admin to grant 'Admin' role to a user, enabling full control over tasks and projects.", "input": {"projectID": "1234", "userID": "5678", "role": "Admin"}, "expected": {"outcome": "User assigned 'Admin' role successfully", "status": "Success"}}, {"name": "Configure Role-Based Access for Teams", "description": "Verify that the system allows the admin to configure role-based access for entire teams (e.g., assign 'Editor' role to a team).", "input": {"projectID": "1234", "teamID": "7890", "role": "Editor"}, "expected": {"outcome": "Team assigned 'Editor' role successfully", "status": "Success"}}]}, {"author": "Student ID: 2005050", "usecase": {"name": "Integration with External Tools", "scenario": "A user links Asana with external tools such as Google Drive, Dropbox, GitHub, or Jira to enhance project collaboration and streamline workflows. The user can access files, sync issues, and automate task creation between Asana and third-party tools.", "actors": "User, System, External Tools (Google Drive, Dropbox, GitHub, Jira)", "preconditions": "User has appropriate permissions to configure external tool integrations.", "steps": ["User navigates to the integration settings in Asana.", "User selects an external tool (e.g., Google Drive, Dropbox, GitHub, Jira).", "User authorizes Asana to connect with the selected external tool by logging in or granting access.", "User configures integration settings, such as linking files, syncing tasks, or creating automated workflows.", "User verifies the successful integration by performing actions (e.g., attaching files from Google Drive or creating a task from GitHub issues)."]}, "testcases": [{"name": "Link Asana with Google Drive", "description": "Verify that the user can successfully link Google Drive with Asana and attach files to tasks.", "input": {"integrationTool": "Google Drive", "action": "Link Account"}, "expected": {"outcome": "Google Drive linked successfully", "status": "Success"}}, {"name": "Attach File from Google Drive to Task", "description": "Verify that a user can attach a file from Google Drive to an Asana task after linking the Google Drive account.", "input": {"taskID": "1234", "fileFrom": "Google Drive", "fileID": "abcd1234"}, "expected": {"outcome": "File successfully attached to task", "status": "Success"}}, {"name": "Link Asana with Dropbox", "description": "Verify that the user can successfully link Dropbox with Asana and attach files to tasks.", "input": {"integrationTool": "Dropbox", "action": "Link Account"}, "expected": {"outcome": "Dropbox linked successfully", "status": "Success"}}, {"name": "Create Task from GitHub Issue", "description": "Verify that a user can create an Asana task from a GitHub issue after linking the GitHub account to Asana.", "input": {"integrationTool": "GitHub", "action": "Create Task", "githubIssueID": "GH1234"}, "expected": {"outcome": "Task created from GitHub issue", "status": "Success"}}, {"name": "Link Asana with Jira", "description": "Verify that the user can successfully link Jira with Asana and synchronize tasks between both platforms.", "input": {"integrationTool": "Jira", "action": "Link Account"}, "expected": {"outcome": "Jira linked successfully", "status": "Success"}}, {"name": "Sync Jira Issues with Asana Tasks", "description": "Verify that a user can sync Jira issues with Asana tasks, ensuring that updates in Jira are reflected in Asana and vice versa.", "input": {"taskID": "5678", "jiraIssueID": "JIR1234", "action": "Sync"}, "expected": {"outcome": "Jira issue synced with Asana task", "status": "Success"}}, {"name": "Automate Workflow with External Tools", "description": "Verify that the user can automate a workflow, such as automatically creating an Asana task when a new GitHub issue is opened.", "input": {"workflow": "Create Task on GitHub Issue", "action": "Enable Automation"}, "expected": {"outcome": "Workflow automation enabled successfully", "status": "Success"}}, {"name": "Failed Integration with Invalid Credentials", "description": "Verify that the system prevents integration with external tools when invalid credentials are provided.", "input": {"integrationTool": "Google Drive", "action": "Link Account", "credentials": "Invalid"}, "expected": {"outcome": "Integration failed due to invalid credentials", "status": "Failure", "error": "Invalid credentials"}}]}, {"usecase": {"name": "View Price for Selected Route", "scenario": "User selects the pickup location and destination, and the system shows the ride price. If the user is not logged in, they are prompted to log in before viewing the price.", "actors": "User", "preconditions": ["User is on the ride booking page.", "Location and destination fields are available for selection."], "steps": ["User selects their pickup location.", "User selects their destination.", "System checks if the user is logged in.", {"condition": "User is not logged in", "steps": ["System prompts the user to log in.", "User provides login credentials.", "System verifies the login and, if valid, redirects to the price page."]}, {"condition": "User is logged in", "steps": ["System calculates the price for the selected route.", "System displays the price along with ride options (e.g., UberX, UberXL, etc.)."]}], "postconditions": "The price for the selected route is displayed if the user is logged in."}, "testcases": [{"name": "View Price After Logging In", "description": "Verify that a user can view the price after selecting location and destination when logged in.", "input": {"userId": "user123", "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka"}, "expected": {"outcome": "Price displayed successfully", "price": "150 taka", "rideOptions": ["UberX", "UberXL", "UberBlack"]}}, {"name": "Prompt to Log In When Not Logged In", "description": "Verify that the user is prompted to log in if they are not logged in when selecting location and destination.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka"}, "expected": {"outcome": "Prompt to log in", "loginPage": "Displayed", "status": "Not logged in"}}, {"name": "Failed Login When Viewing Price", "description": "Verify that the system rejects incorrect login details and doesn't display the price if login fails.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka", "loginCredentials": {"username": "user@example.com", "password": "wrongpassword"}}, "expected": {"outcome": "Login failed", "errorMessage": "Invalid username or password", "status": "Error recorded"}}, {"name": "View Price After Login with Correct Credentials", "description": "Verify that after logging in with correct credentials, the price is displayed for the selected route.", "input": {"userId": null, "pickupLocation": "Palashi Bazar ,Lalbagh", "destination": "Shantinagar, Dhaka", "loginCredentials": {"username": "user@example.com", "password": "correctpassword"}}, "expected": {"outcome": "Login successful and price displayed", "price": "150 taka", "rideOptions": ["UberX", "UberXL", "Motor Cycle"]}}]}, {"usecase": {"name": "Sign Up with Account Verification", "scenario": "The user tries to sign up for a new Uber account. The system checks if an account with the provided email or phone number already exists. If the account exists, the user is notified and cannot proceed. If the account does not exist, the signup is successful.", "actors": "User", "preconditions": ["User is on the sign-up page.", "User provides valid account information (email/phone number, password, and other required details)."], "steps": ["User enters the required account information (e.g., email, phone number, password).", "User submits the sign-up form.", "System checks if an account with the provided email or phone number already exists.", {"condition": "An account exists with the provided email or phone number", "steps": ["System displays an error message to the user: 'An account with this email/phone number already exists. Please log in.'", "User is prompted to log in or use a different email/phone number."]}, {"condition": "No account exists with the provided email or phone number", "steps": ["System successfully creates a new account.", "User is automatically logged in or directed to complete the sign-up process (e.g., email/phone verification)."]}], "postconditions": "The user either successfully creates a new account or receives an error if the account already exists."}, "testcases": [{"name": "Successful Sign-Up", "description": "Verify that the user can successfully sign up when no account exists with the provided email or phone number.", "input": {"email": "newuser@example.com", "phoneNumber": "01712345678", "accountStatus": "No existing account"}, "expected": {"outcome": "New account created", "status": "Sign-up successful"}}, {"name": "Failed Sign-Up: Account Already Exists", "description": "Verify that the system displays an error message if the user tries to sign up with an email or phone number that is already associated with an existing account.", "input": {"email": "existinguser@example.com", "phoneNumber": "01712345678", "accountStatus": "Account already exists"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "An account with this email/phone number already exists. Please log in."}}, {"name": "Invalid Email Format", "description": "Verify that the system displays an error when the user enters an invalid email format.", "input": {"email": "invalid-email-format", "phoneNumber": "01712345678"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please enter a valid email address."}}, {"name": "Missing Required Fields", "description": "Verify that the system prompts the user to fill in all required fields if they are left empty.", "input": {"email": "", "phoneNumber": "01712345678", "password": ""}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please complete all required fields."}}, {"name": "Invalid Phone Number Format", "description": "Verify that the system displays an error if the user enters an invalid phone number format during sign-up.", "input": {"email": "newuser@example.com", "phoneNumber": "invalid-phone"}, "expected": {"outcome": "Sign-up failed", "errorMessage": "Please enter a valid phone number."}}]}, {"usecase": {"name": "Log in with QR Code", "scenario": "The user can log in by scanning a QR code displayed on their device using their phone\u2019s camera. Both devices must be connected to the same WiFi or hotspot, and the user must be logged in to the Uber app on their phone.", "actors": "User", "preconditions": ["User is on the login page on a desktop or another device (not the phone).", "A valid QR code is generated and displayed on the desktop/device.", "User has the Uber app installed on their phone and is logged in.", "Both devices (desktop and phone) are connected to the same WiFi network or hotspot."], "steps": ["User selects the 'Log in with QR code' option on the desktop/device.", "System generates and displays a QR code on the screen.", "User scans the QR code with their phone\u2019s camera.", "The Uber app on the phone detects the QR code and processes the login request.", "The phone app verifies if the devices are on the same WiFi or hotspot.", {"condition": "Both devices are on the same network", "steps": ["User is automatically logged in on the desktop/device.", "System redirects the user to the next page (e.g., dashboard or price page)."]}, {"condition": "Devices are not on the same network", "steps": ["System displays an error message to the user: 'Devices must be connected to the same WiFi or hotspot.'"]}], "postconditions": "The user is logged in on the desktop/device if the scan and verification are successful."}, "testcases": [{"name": "Successful Login with QR Code", "description": "Verify that the user can successfully log in using a QR code when both devices are connected to the same WiFi and the user is logged in to the Uber app on their phone.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Same", "uberAppStatus": "Logged in"}, "expected": {"outcome": "Login successful on desktop/device", "redirectPage": "Dashboard or price page"}}, {"name": "Failed Login with Different Networks", "description": "Verify that the system displays an error if the phone and desktop/device are not on the same WiFi or hotspot.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Different", "uberAppStatus": "Logged in"}, "expected": {"outcome": "Error message displayed", "errorMessage": "Devices must be connected to the same WiFi or hotspot", "status": "Login failed"}}, {"name": "Failed Login when Not Logged into Uber App", "description": "Verify that the system fails to log in if the user is not logged into the Uber app on their phone.", "input": {"qrCode": "Valid QR code", "wifiNetwork": "Same", "uberAppStatus": "Not logged in"}, "expected": {"outcome": "Login failed", "errorMessage": "Please log in to your Uber app to continue", "status": "Login not initiated"}}, {"name": "QR Code Scan Timeout", "description": "Verify that the system times out if the QR code is not scanned within a certain time.", "input": {"qrCode": "Valid QR code", "timeElapsed": "More than timeout duration"}, "expected": {"outcome": "QR code expired", "errorMessage": "QR code expired, please generate a new one", "status": "QR code invalidated"}}]}, {"usecase": {"name": "Request a Ride", "scenario": "Passengers request for a ride to reach their destination", "actors": "Passengers, Riders", "preconditions": "Passengers must be logged in to Uber", "steps": ["Passengers choose their preferred vehicle type", "Request a ride", "Riders confirm the ride"]}, "testcases": [{"name": "Valid pick-up and drop-off locations", "description": "Verify that passengers can request a ride with valid pick-up and drop-off locations.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Dhanmondi 9A"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request successful", "rideId": "abcdef12345", "driverAssigned": {"driverId": "driver98765", "driverName": "Abdul Kalam", "estimatedArrivalTime": "5 minutes"}, "estimatedFare": "250 taka", "status": "Driver assigned"}}, {"name": "Drop-off location too far", "description": "Verify the system shows an error when the drop-off location is too far.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Sylhet City"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request failed", "error": {"message": "Drop-off location is too far", "code": "LOCATION_TOO_FAR"}, "status": "Request denied"}}, {"name": "No drivers available", "description": "Verify user is notified if no drivers are available.", "input": {"pickUpLocation": {"address": "Palashi Bazar"}, "dropOffLocation": {"address": "Dhanmondi 9A"}, "userId": "1234567890", "rideType": "UberX", "paymentMethod": "Cash"}, "expected": {"outcome": "Ride request failed", "error": {"message": "No drivers available at the moment", "code": "NO_DRIVERS_AVAILABLE"}, "status": "Request denied"}}]}, {"usecase": {"name": "Payment Option Selection", "scenario": "A user selects a preferred payment method for their Uber ride.", "actors": "Registered User", "preconditions": "The user has an active Uber account and is ready to request or complete a ride.", "steps": [{"scenario": "Before placing order", "description": "Select payment method before requesting a ride.", "steps": ["Open payment methods section in the app menu", "Select payment method"]}, {"scenario": "While placing order", "description": "Select payment method while requesting a ride.", "steps": ["Tap the payment icon next to the pickup address", "Select payment method"]}]}, "testcases": [{"name": "Before placing an order", "description": "User selects a payment method before placing an order (via app menu).", "inputs": {"action": "Select payment method", "time": "Before placing order", "paymentMethod": "Cash"}, "expected": {"paymentStatus": "Payment method saved", "selectedMethod": "Cash"}}, {"name": "While placing an order", "description": "User selects a payment method while placing an order (via payment icon).", "inputs": {"action": "Select payment method", "time": "While placing order", "paymentMethod": "Card"}, "expected": {"paymentStatus": "Payment method saved", "selectedMethod": "Card"}}, {"name": "Switching from cash to card during ride", "description": "User switches from cash to card during the ride.", "inputs": {"currentMethod": "Cash", "newMethod": "Card", "time": "During the ride"}, "expected": {"paymentStatus": "Success", "selectedMethod": "Card"}}, {"name": "Invalid switch from card to cash during ride", "description": "User attempts to switch from card to cash during the ride.", "inputs": {"currentMethod": "Card", "newMethod": "Cash", "time": "During the ride"}, "expected": {"paymentStatus": "Failure", "error": "Switching from card to cash not allowed"}}, {"name": "Card payment failure, automatic switch to cash", "description": "User's card is blocked or has insufficient funds; payment method changes automatically to cash.", "inputs": {"paymentMethod": "Card", "cardStatus": "Blocked or Insufficient funds"}, "expected": {"paymentStatus": "Switched to Cash", "notification": {"user": "Card issue, payment switched to cash", "driver": "User's payment method switched to cash"}}}]}, {"usecase": {"name": "Send Parcel with Uber Package System", "scenario": "A user wants to send a parcel to a specified destination through the Uber package delivery system. The system collects both the sender and receiver's information and asks for payment details, allowing either the sender or receiver to pay.", "actors": "Sender, Receiver, Uber System", "preconditions": ["The user is on the Uber app's parcel sending page.", "The user has the parcel details ready (e.g., parcel size, weight, and type)."], "steps": ["The sender selects the 'Send Parcel' option in the Uber app.", "The system asks for sender's information (name, phone number, pickup location).", "The sender fills in the required information.", "The system asks for receiver's information (name, phone number, delivery location).", "The sender enters the receiver's details.", "The system prompts for the payment method, with options for the sender or receiver to pay.", {"condition": "Sender opts to pay", "steps": ["The system asks for the sender's payment details.", "The sender provides payment information.", "The system verifies the payment method and processes the payment."]}, {"condition": "Receiver opts to pay", "steps": ["The system informs the receiver that payment is required upon delivery.", "The system completes the order, and the parcel is picked up from the sender."]}, "The system confirms the booking and sends a notification to both the sender and receiver."], "postconditions": "The parcel is scheduled for pickup, and both the sender and receiver receive confirmations. Payment is either processed immediately (if the sender pays) or upon delivery (if the receiver pays)."}, "testcases": [{"name": "Successful Parcel Sending with Sender Payment", "description": "Verify that the user can successfully send a parcel when the sender opts to pay.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Sender"}, "expected": {"outcome": "Parcel booking confirmed", "status": "Payment successfully processed by sender"}}, {"name": "Successful Parcel Sending with Receiver Payment", "description": "Verify that the parcel can be successfully booked when the receiver opts to pay upon delivery.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Receiver"}, "expected": {"outcome": "Parcel booking confirmed", "status": "Receiver will be charged upon delivery"}}, {"name": "Failed Parcel Sending: Invalid Receiver Phone Number", "description": "Verify that the system displays an error when the receiver's phone number is invalid.", "input": {"senderInfo": {"name": "Abdul Kalam", "phoneNumber": "01712345678", "pickupLocation": "Palashi Bazar ,Lalbagh"}, "receiverInfo": {"name": "Obaidul Kalam", "phoneNumber": "01709876543", "deliveryLocation": "Shantinagar"}, "paymentBy": "Sender"}, "expected": {"outcome": "Parcel booking failed", "errorMessage": "Please enter a valid phone number for the receiver."}}]}, {"usecase": {"name": "Rent a Vehicle through Uber Rental System", "scenario": "A user wants to rent a vehicle for multiple stops with a custom pickup time. The system allows the user to select the pickup location, multiple destinations, and pick a time for pickup. The rental duration affects the price, and users can select a car model to determine the final cost.", "actors": "User, Uber System", "preconditions": ["The user is logged into their Uber account.", "The user has a clear idea of the pickup location, drop-off locations, and rental duration."], "steps": ["The user selects the 'Rent a Vehicle' option on the Uber app.", "The system prompts the user to select a pickup location.", "The user chooses a pickup location from available places or enters a custom address.", "The system asks for one or more destinations where the user wants to go.", "The user selects the destination(s) (one or multiple).", "The system prompts the user to select a pickup time.", "The user selects a custom pickup time (up to 90 days in advance).", "The system displays options for rental durations, allowing the user to select the time for how long they need the vehicle (e.g., 1 hour, 2 hours, 4 hours).", "The user chooses the rental time.", "The system calculates and shows the price based on the rental time.", "The system displays car options, along with prices based on the selected duration and vehicle type.", "The user selects a car.", "The system confirms the rental booking and provides details for both the pickup time and estimated cost.", "The user receives a confirmation notification with booking details."], "postconditions": "The vehicle is reserved, and the user receives a confirmation with the rental time, pickup time, and estimated fare."}, "testcases": [{"name": "Successful Vehicle Rental with Multiple Stops", "description": "Verify that the user can successfully rent a vehicle with multiple destinations and a custom pickup time.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhaka University", "Shahbagh", "Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "4 hours", "carType": "XL Rentals"}, "expected": {"outcome": "Vehicle rental confirmed", "status": "Price calculated for selected duration and car type"}}, {"name": "Failed Vehicle Rental: Invalid Pickup Time", "description": "Verify that the system displays an error if the user selects an invalid pickup time (outside of the 90-day range).", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "6 months from today"}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Pickup time must be within 90 days from today."}}, {"name": "Failed Vehicle Rental: Missing Pickup Location", "description": "Verify that the system displays an error if the user does not select a pickup location.", "input": {"pickupLocation": "", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "2 hours", "carType": "Go Rentals"}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Pickup location is required."}}, {"name": "Failed Vehicle Rental: No Car Selected", "description": "Verify that the system prevents the user from proceeding if no car is selected.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "2 hours", "carType": ""}, "expected": {"outcome": "Rental booking failed", "errorMessage": "Please select a car to proceed with the booking."}}, {"name": "Successful Rental with Rental Time Price Increment", "description": "Verify that the price is incremented correctly based on the rental time selected.", "input": {"pickupLocation": "Palashi Bazar Masjid", "destinations": ["Dhanmondi 27"], "pickupTime": "Tomorrow at 10:00 AM", "rentalTime": "4 hours", "carType": "Premiere Rentals"}, "expected": {"outcome": "Price increased", "status": "Price reflects a 4-hour rental period for the selected car"}}]}, {"usecase": {"name": "Ride Payment", "scenario": "A user completes a ride and makes payment via card or mobile wallet.", "actors": "Passenger", "preconditions": "The passenger is logged in to Uber and requests a ride.", "steps": ["Passenger requests a ride and selects a payment method (card or mobile wallet).", "System assigns a driver and provides an estimated fare for the ride.", "Passenger completes the ride and reaches the drop-off location.", "System calculates the final fare based on the ride details (e.g., distance, time).", "Passenger confirms the payment method and initiates payment.", "System processes the payment through the selected method.", "System updates the ride status as completed and sends a payment confirmation to the passenger.", "Passenger receives a receipt via the app or email."]}, "testcases": [{"name": "Ride Payment using Credit Card", "description": "Verify user can pay for a completed ride using a valid credit card.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Credit Card", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "12/25", "cvv": "123", "cardHolderName": "John Doe"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment successful", "receipt": {"rideId": "abcdef12345", "amountCharged": "250 taka", "paymentMethod": "Credit Card", "transactionId": "txn987654321"}, "status": "Payment processed, receipt sent"}}, {"name": "Ride Payment using Mobile Wallet", "description": "Verify user can pay for a completed ride using a mobile wallet.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Mobile Wallet", "walletDetails": {"walletProvider": "bkash", "email": "user@gmail.com"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment successful", "receipt": {"rideId": "abcdef12345", "amountCharged": "250 taka", "paymentMethod": "Mobile Wallet", "transactionId": "txn987654321"}, "status": "Payment processed, receipt sent"}}, {"name": "Payment Failure due to Expired Credit Card", "description": "Verify system shows an error when a user attempts to pay with an expired credit card.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "paymentMethod": "Credit Card", "paymentDetails": {"cardNumber": "4111111111111111", "expiryDate": "01/23", "cardHolderName": "Abdul Kalam"}, "totalFare": "250 taka"}, "expected": {"outcome": "Payment failed", "error": {"message": "Expired card", "code": "CARD_EXPIRED"}, "status": "Ride completed but payment failed, new payment method required"}}]}, {"usecase": {"name": "Rate the Ride", "scenario": "User rates the driver and the ride experience after completion of a trip.", "actors": "Passenger, System", "preconditions": "Ride must be completed, and the user should have access to rating options on the app.", "steps": ["Passenger receives a notification after the ride to rate the driver.", "Passenger navigates to the rating screen in the app.", "Passenger selects a rating from 1 to 5 stars.", "Passenger can optionally add feedback or comments.", "System records the rating and feedback in the driver\u2019s profile."]}, "testcases": [{"name": "Successful rating", "description": "Verify that a passenger can successfully rate the ride after completion.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 5, "feedback": "Great ride!"}, "expected": {"outcome": "Rating submitted successfully", "driverRatingUpdated": true, "feedbackRecorded": true}}, {"name": "Rating without feedback", "description": "Verify that a passenger can submit a rating without additional feedback.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 3}, "expected": {"outcome": "Rating submitted successfully", "driverRatingUpdated": true, "feedbackRecorded": false}}, {"name": "Submit rating after timeout", "description": "Verify that a rating cannot be submitted after the allowed time period.", "input": {"rideId": "abcdef12345", "userId": "1234567890", "rating": 4, "timeSinceRideCompletion": "48 hours"}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating period expired", "code": "RATING_TIMEOUT"}}}]}, {"usecase": {"name": "Rate the Passenger", "scenario": "Driver rates the passenger and their behavior after completion of a trip.", "actors": "Driver, System", "preconditions": "The ride must be completed, and the driver should have access to rating options on the app.", "steps": ["Driver receives a prompt or notification to rate the passenger after the ride is completed.", "Driver navigates to the rating screen in the app.", "Driver selects a rating from 1 to 5 stars.", "Driver can optionally add feedback or comments about the passenger's behavior.", "System records the rating and feedback in the passenger\u2019s profile."]}, "testcases": [{"name": "Successful rating", "description": "Verify that a driver can successfully rate the passenger after the trip.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 5, "feedback": "Passenger was polite and prompt."}, "expected": {"outcome": "Rating submitted successfully", "passengerRatingUpdated": true, "feedbackRecorded": true}}, {"name": "Rating without feedback", "description": "Verify that a driver can submit a rating without additional feedback.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 4}, "expected": {"outcome": "Rating submitted successfully", "passengerRatingUpdated": true, "feedbackRecorded": false}}, {"name": "Submit rating after timeout", "description": "Verify that a rating cannot be submitted after the allowed time period has passed.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 3, "timeSinceRideCompletion": "48 hours"}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating period expired", "code": "RATING_TIMEOUT"}}}, {"name": "Invalid rating value", "description": "Verify that an error is displayed if the driver tries to submit a rating outside the valid range (1-5).", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 6}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Invalid rating value", "code": "INVALID_RATING"}}}, {"name": "Rating for ride with disputes", "description": "Verify that the driver cannot submit a rating for a ride currently in dispute.", "input": {"rideId": "abcdef12345", "driverId": "driver98765", "rating": 2}, "expected": {"outcome": "Rating submission failed", "error": {"message": "Rating not allowed due to active dispute", "code": "RATING_BLOCKED"}}}]}, {"usecase": {"name": "Cancel a Ride", "scenario": "User cancels a ride before or after a driver is assigned.", "actors": "User", "preconditions": ["User must be logged in", "User must have requested a ride", "Penalty rules must apply based on the cancellation time"], "steps": ["User navigates to their active ride request", "User selects the option to cancel the ride", "System checks if a driver has already been assigned or if the driver is en route", "System applies penalty if applicable", "System updates the ride status to canceled", "System sends a notification to the driver about the cancellation", "System confirms the cancellation to the user"]}, "testcases": [{"name": "Cancel ride before driver is assigned", "description": "Verify that the user can cancel a ride without penalty if no driver has been assigned.", "input": {"rideId": "ride12345", "userId": "1234567890", "driverAssigned": false}, "expected": {"outcome": "Ride canceled successfully", "penalty": "NONE", "status": "Ride canceled"}}, {"name": "Cancel ride after driver is assigned but before pick-up", "description": "Verify that the system applies a penalty if the user cancels the ride after the driver has been assigned but before the driver arrives.", "input": {"rideId": "ride12346", "userId": "1234567890", "driverAssigned": true, "driverEnRoute": true}, "expected": {"outcome": "Ride canceled successfully", "penalty": "10% of Fare", "status": "Ride canceled"}}, {"name": "Cancel ride after driver arrives at pick-up location", "description": "Verify that a higher penalty is applied if the user cancels the ride after the driver has arrived at the pick-up location.", "input": {"rideId": "ride12347", "userId": "1234567890", "driverAssigned": true, "driverAtPickupLocation": true}, "expected": {"outcome": "Ride canceled successfully", "penalty": "30% of Fare", "status": "Ride canceled"}}, {"name": "Cancel ride with invalid ride ID", "description": "Verify that the system handles cases where the user attempts to cancel a non-existent or invalid ride.", "input": {"rideId": "invalidRideId", "userId": "1234567890"}, "expected": {"outcome": "Cancellation failed", "error": "Invalid ride ID"}}, {"name": "Cancel ride while ongoing", "description": "Verify that the system prevents ride cancellation while it is ongoing", "input": {"rideId": "ride12351", "userId": "1234567890", "rideStatus": "ongoing"}, "expected": {"outcome": "Cancellation not allowed", "error": "Ride is ongoing"}}, {"name": "Cancel ride after ride is already completed", "description": "Verify that the system prevents ride cancellation after the ride has been completed.", "input": {"rideId": "ride12348", "userId": "1234567890", "rideStatus": "completed"}, "expected": {"outcome": "Cancellation not allowed", "error": "Ride is already completed."}}, {"name": "Cancel ride due to no driver availability", "description": "Verify that the user can cancel the ride without penalty if no driver is available to accept the ride.", "input": {"rideId": "ride12350", "userId": "1234567890", "driverAssigned": false}, "expected": {"outcome": "Ride canceled successfully", "penalty": "NONE", "status": "No drivers available, ride canceled"}}]}, {"usecase": {"name": "Access Help/Support Option", "scenario": "User seeks assistance through the Help section in the Uber app for ride-related issues, payment concerns, or account management.", "actors": "User", "preconditions": ["User must be logged in to the Uber app"], "steps": ["User navigates to the Help section from the menu", "User selects a help category (e.g., ride issues, payment, account, etc.)", "User chooses the relevant issue within the selected category", "System displays information or prompts user to provide details", "User submits a support request if the issue is not resolved by the information provided", "System sends a confirmation and assigns the issue to Uber support"]}, "testcases": [{"name": "Access Help for Ride Issues", "description": "Verify that the user can access relevant articles related to specific problems", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare discrepancy"}, "expected": {"outcome": "Ride issue support page displayed with relevant FAQs and articles", "status": "Support request initiated"}}, {"name": "Submit a query for unresolved issue", "description": "Verify that the user can submit a support request if the provided help information does not resolve the issue.", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare Discrepancy", "submitquery": true, "query": "During the ride, I noticed a significant discrepancy in the fare charged", "Attachment": "Screenshot.jpg"}, "expected": {"outcome": "Support request submitted successfully", "supportTicketId": "8916", "status": "Pending response"}}, {"name": "Submit a query with empty message or attachment", "description": "Verify that the system handles submissions with empty message fields or missing attachments appropriately.", "input": {"userId": "1234567890", "helpCategory": "Ride Issues", "rideId": "ride12345", "issue": "Fare Discrepancy", "submitquery": true, "query": "", "attachment": null}, "expected": {"outcome": "Submission failed", "error": "Message field cannot be empty", "status": "Error displayed to the user"}}, {"name": "Access Help without selecting a category", "description": "Verify that the system prompts the user to select a category if they try to proceed without choosing one.", "input": {"userId": "1234567890", "helpCategory": null}, "expected": {"outcome": "System prompts user to select a help category", "status": "No support request initiated"}}]}, {"usecase": {"name": "User Registration", "scenario": "A new user registers on the platform.", "actors": ["User", "System"], "preconditions": ["User must not already have an account.", "User must provide valid registration information."], "steps": ["User navigates to the registration page.", "User fills in the required details (email, password, etc.).", "System validates the details and creates a new user account."]}, "testcases": [{"name": "Successful Registration", "description": "Verify that a new user can register successfully.", "input": {"email": "user@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Registration successful", "status": "Account created, user redirected to login page."}}, {"name": "Duplicate Email", "description": "Verify that the system prevents registration with an existing email.", "input": {"email": "existinguser@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Registration failed", "status": "Email already in use error message displayed."}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs into their account.", "actors": ["User", "System"], "preconditions": ["User must have a registered account.", "User must enter valid login credentials."], "steps": ["User navigates to the login page.", "User enters email and password.", "System validates the credentials and grants access to the account."]}, "testcases": [{"name": "Successful Login", "description": "Verify that a user can log in with valid credentials.", "input": {"email": "user@example.com", "password": "SecurePass123"}, "expected": {"outcome": "Login successful", "status": "User is redirected to the homepage."}}, {"name": "Invalid Login", "description": "Verify that an error message is displayed when the user enters invalid credentials.", "input": {"email": "user@example.com", "password": "WrongPass"}, "expected": {"outcome": "Login failed", "status": "Invalid login credentials error message displayed."}}]}, {"usecase": {"name": "Product Search", "scenario": "A user searches for products on Amazon.", "actors": ["User", "System"], "preconditions": ["User must be on the homepage or product search page."], "steps": ["User enters a search term into the search bar.", "System fetches relevant products and displays them."]}, "testcases": [{"name": "Valid Search Term", "description": "Verify that the system returns products matching a valid search term.", "input": {"searchTerm": "laptop"}, "expected": {"outcome": "Products displayed", "status": "List of relevant products displayed."}}, {"name": "No Results Found", "description": "Verify that the system handles the case where no products match the search term.", "input": {"searchTerm": "xyz123"}, "expected": {"outcome": "No products found", "status": "No products matching search term message displayed."}}]}, {"usecase": {"name": "Add to Cart", "scenario": "A user adds a product to their shopping cart.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "Product must be in stock."], "steps": ["User selects a product.", "User clicks 'Add to Cart'.", "System adds the product to the user's cart."]}, "testcases": [{"name": "Product Successfully Added", "description": "Verify that a product is added to the cart successfully.", "input": {"productID": "P12345"}, "expected": {"outcome": "Product added", "status": "Product added to cart message displayed."}}, {"name": "Out of Stock", "description": "Verify that the system prevents adding out-of-stock products to the cart.", "input": {"productID": "P67890"}, "expected": {"outcome": "Product not added", "status": "Product out of stock message displayed."}}]}, {"usecase": {"name": "Checkout", "scenario": "A user proceeds to checkout with products in their cart.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "User must have items in their cart."], "steps": ["User clicks 'Proceed to Checkout'.", "System presents the shipping and payment options.", "User completes the order."]}, "testcases": [{"name": "Successful Checkout", "description": "Verify that a user can successfully complete a purchase.", "input": {"cartID": "C12345"}, "expected": {"outcome": "Order completed", "status": "Order confirmation page displayed."}}, {"name": "No Items in Cart", "description": "Verify that the system prevents checkout with an empty cart.", "input": {"cartID": "C67890"}, "expected": {"outcome": "Checkout failed", "status": "No items in cart message displayed."}}]}, {"usecase": {"name": "View Order History", "scenario": "A user views their past orders on Amazon.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "User must have placed at least one order."], "steps": ["User navigates to 'Account' and selects 'Order History'.", "System fetches the order history from the database.", "System displays the list of past orders."]}, "testcases": [{"name": "Valid Order History", "description": "Verify that a user can successfully view their past orders.", "input": {"userID": "U12345"}, "expected": {"outcome": "Order history displayed", "status": "List of past orders displayed."}}, {"name": "No Order History", "description": "Verify that the system handles the case where the user has no order history.", "input": {"userID": "U67890"}, "expected": {"outcome": "No order history", "status": "You have no past orders message displayed."}}]}, {"usecase": {"name": "Product Review Submission", "scenario": "A user submits a review for a product they purchased.", "actors": ["User", "System"], "preconditions": ["User must have purchased the product they are reviewing."], "steps": ["User selects a product from their order history.", "User writes and submits a review.", "System posts the review on the product page."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that a user can successfully submit a review for a product they purchased.", "input": {"productID": "P12345", "review": "Great product, highly recommended!", "rating": 5}, "expected": {"outcome": "Review submission successful", "status": "Review displayed on the product page."}}, {"name": "Invalid Rating Submission", "description": "Verify that the system handles the case where the user submits a review with an invalid rating.", "input": {"productID": "P12345", "review": "Not good.", "rating": 6}, "expected": {"outcome": "Review submission failed", "status": "Invalid rating error message."}}]}, {"usecase": {"name": "Cancel Order", "scenario": "A user cancels an order they have placed.", "actors": ["User", "System"], "preconditions": ["The order must not be shipped."], "steps": ["User navigates to 'Order History'.", "User selects an order and clicks 'Cancel Order'.", "System processes the cancellation."]}, "testcases": [{"name": "Valid Order Cancellation", "description": "Verify that a user can successfully cancel an order before it is shipped.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Order cancelled", "status": "Cancellation confirmation message displayed."}}, {"name": "Order Already Shipped", "description": "Verify that the system prevents the user from canceling an order that has already been shipped.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Cancellation failed", "status": "Order already shipped message displayed."}}]}, {"usecase": {"name": "Change Shipping Address", "scenario": "A user changes the shipping address for an upcoming order.", "actors": ["User", "System"], "preconditions": ["Order must not be shipped.", "User must provide a valid shipping address."], "steps": ["User navigates to 'Order History'.", "User selects an order and clicks 'Change Shipping Address'.", "User provides a new shipping address.", "System updates the shipping address."]}, "testcases": [{"name": "Shipping Address Successfully Updated", "description": "Verify that the user can change the shipping address before the order is shipped.", "input": {"orderID": "O12345", "newAddress": "123 New St, City, Country"}, "expected": {"outcome": "Shipping address updated", "status": "Confirmation message displayed."}}, {"name": "Order Already Shipped", "description": "Verify that the system prevents changing the shipping address after the order is shipped.", "input": {"orderID": "O67890", "newAddress": "123 New St, City, Country"}, "expected": {"outcome": "Update failed", "status": "Order already shipped message displayed."}}]}, {"usecase": {"name": "Apply Discount Code", "scenario": "A user applies a discount code to their purchase.", "actors": ["User", "System"], "preconditions": ["User must have a valid discount code.", "User must have items in their cart."], "steps": ["User enters a discount code during checkout.", "System validates the code and applies the discount."]}, "testcases": [{"name": "Valid Discount Code", "description": "Verify that the system applies a valid discount code successfully.", "input": {"cartID": "C12345", "discountCode": "DISCOUNT10"}, "expected": {"outcome": "Discount applied", "status": "Discount successfully applied to the cart."}}, {"name": "Expired Discount Code", "description": "Verify that the system handles expired discount codes appropriately.", "input": {"cartID": "C12345", "discountCode": "EXPIRED10"}, "expected": {"outcome": "Discount failed", "status": "Expired discount code error message displayed."}}]}, {"usecase": {"name": "Track Shipment", "scenario": "A user tracks the status of their shipment.", "actors": ["User", "System"], "preconditions": ["User must be logged in.", "Order must have been shipped."], "steps": ["User navigates to 'Order History'.", "User selects the shipped order and clicks 'Track Shipment'.", "System displays the current status of the shipment."]}, "testcases": [{"name": "Valid Shipment Tracking", "description": "Verify that the user can track the status of a shipped order.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Shipment tracking successful", "status": "Current shipment status displayed."}}, {"name": "Order Not Shipped Yet", "description": "Verify that the system prevents shipment tracking for orders that are not yet shipped.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Tracking failed", "status": "Order not shipped yet message displayed."}}]}, {"usecase": {"name": "Request Refund", "scenario": "A user requests a refund for an order they have received.", "actors": ["User", "System"], "preconditions": ["User must have received the order.", "Order must be eligible for a refund."], "steps": ["User navigates to 'Order History'.", "User selects the received order and clicks 'Request Refund'.", "System processes the refund request."]}, "testcases": [{"name": "Refund Request Approved", "description": "Verify that the system approves a refund request for an eligible order.", "input": {"orderID": "O12345"}, "expected": {"outcome": "Refund approved", "status": "Refund request approved message displayed."}}, {"name": "Refund Request Denied", "description": "Verify that the system denies a refund request for an ineligible order.", "input": {"orderID": "O67890"}, "expected": {"outcome": "Refund denied", "status": "Refund request denied message displayed."}}]}, {"usecase": {"name": "Search for Listings", "scenario": "A guest searches for available listings based on location, dates, and other filters.", "actors": "Guest", "preconditions": "The guest is on the Airbnb homepage or search page.", "steps": ["Guest enters a location in the search bar.", "Guest selects dates for the stay.", "Guest applies additional filters like number of guests, type of property, and amenities.", "System displays available listings that match the search criteria."]}, "testcases": [{"name": "Valid Search", "description": "Verify that a guest can successfully search for listings with valid location and dates.", "input": {"location": "New York", "checkIn": "2024-10-01", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Listings displayed", "status": "Success"}}, {"name": "No Listings Available", "description": "Verify that the system handles the case where no listings match the search criteria.", "input": {"location": "Atlantis", "checkIn": "2024-12-25", "checkOut": "2024-12-30", "guests": 4}, "expected": {"outcome": "No listings available message displayed", "status": "No Listings"}}, {"name": "Search with Invalid Dates", "description": "Verify that the system displays an error message when the guest selects an invalid date range.", "input": {"location": "Paris", "checkIn": "2024-10-10", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Error message displayed", "status": "Invalid Dates"}}], "author": "2005077"}, {"usecase": {"name": "Booking a Listing", "scenario": "A guest books a listing after selecting the property, dates, and number of guests.", "actors": "Guest", "preconditions": "Guest has selected a listing and dates are available for booking.", "steps": ["Guest selects a listing and enters booking details.", "System calculates the total price including service fees and taxes.", "Guest confirms the booking.", "System sends a confirmation to the guest and host."]}, "testcases": [{"name": "Valid Booking", "description": "Verify that a guest can successfully book a listing with valid information.", "input": {"listingID": "12345", "checkIn": "2024-10-01", "checkOut": "2024-10-05", "guests": 2}, "expected": {"outcome": "Booking successful", "status": "Confirmed"}}, {"name": "Invalid Payment Method", "description": "Verify that the system handles invalid payment methods during booking.", "input": {"listingID": "12345", "checkIn": "2024-11-10", "checkOut": "2024-11-15", "guests": 3, "paymentMethod": "ExpiredCard"}, "expected": {"outcome": "Booking failed", "status": "Payment Declined"}}, {"name": "Booking Unavailable Dates", "description": "Verify that the system restricts booking when the selected dates are unavailable.", "input": {"listingID": "12345", "checkIn": "2024-12-24", "checkOut": "2024-12-26", "guests": 2}, "expected": {"outcome": "Booking failed", "status": "Dates Unavailable"}}], "author": "2005070"}, {"usecase": {"name": "Cancel a Booking", "scenario": "A guest cancels a confirmed booking before the check-in date.", "actors": "Guest", "preconditions": "Guest has a confirmed booking.", "steps": ["Guest navigates to the booking details page.", "Guest selects the option to cancel the booking.", "System confirms the cancellation and updates the booking status."]}, "testcases": [{"name": "Valid Cancellation", "description": "Verify that the guest can successfully cancel a confirmed booking.", "input": {"bookingID": "12345"}, "expected": {"outcome": "Booking cancelled", "status": "Cancelled"}}, {"name": "Late Cancellation", "description": "Verify that the system applies the correct penalty for a late cancellation.", "input": {"bookingID": "12345", "cancellationTime": "1 day before check-in"}, "expected": {"outcome": "Booking cancelled with penalty", "status": "Late Cancellation Fee Applied"}}], "author": "2005083"}, {"usecase": {"name": "Host Listing Creation", "scenario": "A host creates a new listing by providing property details, pricing, and availability.", "actors": "Host", "preconditions": "Host is logged in and has completed the account verification process.", "steps": ["Host navigates to the create listing page.", "Host enters property details (e.g., location, size, amenities).", "Host sets pricing and availability.", "Host submits the listing for review."]}, "testcases": [{"name": "Valid Listing Creation", "description": "Verify that a host can successfully create a valid listing with complete details.", "input": {"location": "New York", "size": "2-bedroom apartment", "amenities": ["WiFi", "Kitchen", "Air Conditioning"], "pricePerNight": 150}, "expected": {"outcome": "Listing created successfully", "status": "Pending Review"}}, {"name": "Listing Without Price", "description": "Verify that the system prevents a host from submitting a listing without setting a price.", "input": {"location": "Los Angeles", "size": "Studio", "amenities": ["WiFi", "Heating"], "pricePerNight": null}, "expected": {"outcome": "Listing creation failed", "status": "Price Required"}}, {"name": "Invalid Location Format", "description": "Verify that the system handles cases where the host enters an invalid location format.", "input": {"location": "", "size": "2-bedroom apartment", "amenities": ["WiFi", "Kitchen", "Air Conditioning"], "pricePerNight": 150}, "expected": {"outcome": "Listing creation failed", "status": "Invalid Location"}}], "author": "2005080"}, {"usecase": {"name": "Host Reviews a Guest", "scenario": "A host leaves a review for a guest after their stay is complete.", "actors": "Host", "preconditions": "Guest has completed their stay.", "steps": ["Host navigates to the review section.", "Host enters a review and rating.", "Host submits the review.", "System publishes the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that the host can successfully submit a review for the guest.", "input": {"guestID": "G123", "rating": 4, "comments": "Respectful and clean guest."}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Review Without Rating", "description": "Verify that the system prevents the host from submitting a review without a rating.", "input": {"guestID": "G123", "rating": null, "comments": "Good guest."}, "expected": {"outcome": "Review submission failed", "status": "Rating Required"}}], "author": "2005082"}, {"usecase": {"name": "Guest Reviews a Host", "scenario": "A guest leaves a review for a host after their stay is complete.", "actors": "Guest", "preconditions": "Guest has completed their stay.", "steps": ["Guest navigates to the review section.", "Guest enters a review and rating.", "Guest submits the review.", "System publishes the review."]}, "testcases": [{"name": "Valid Review Submission", "description": "Verify that the guest can successfully submit a review for the host.", "input": {"hostID": "H123", "rating": 5, "comments": "Great host, wonderful stay!"}, "expected": {"outcome": "Review submitted successfully", "status": "Published"}}, {"name": "Review with Invalid Rating", "description": "Verify that the system handles cases where the guest enters an invalid rating (e.g., more than 5 stars).", "input": {"hostID": "H123", "rating": 6, "comments": "Amazing!"}, "expected": {"outcome": "Review submission failed", "status": "Invalid Rating"}}], "author": "2005082"}, {"usecase": {"name": "Guest Messaging Host", "scenario": "A guest sends a message to the host to inquire about a listing.", "actors": "Guest", "preconditions": "Guest has found a listing they are interested in.", "steps": ["Guest clicks on the message host button.", "Guest enters their message.", "Guest sends the message to the host.", "System delivers the message to the host."]}, "testcases": [{"name": "Valid Message", "description": "Verify that a guest can successfully send a message to the host.", "input": {"message": "Hi, is your listing available for these dates?"}, "expected": {"outcome": "Message delivered successfully", "status": "Sent"}}, {"name": "Empty Message", "description": "Verify that the system prevents the guest from sending an empty message.", "input": {"message": ""}, "expected": {"outcome": "Message not sent", "status": "Message Required"}}, {"name": "Excessively Long Message", "description": "Verify that the system handles messages that exceed the maximum allowed length.", "input": {"message": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."}, "expected": {"outcome": "Message not sent", "status": "Message Too Long"}}], "author": "2005083"}, {"usecase": {"name": "Host Blocking Dates", "scenario": "A host blocks off dates on their listing to prevent bookings.", "actors": "Host", "preconditions": "Host has an active listing.", "steps": ["Host navigates to the calendar section of their listing.", "Host selects the dates to block.", "Host saves the changes.", "System updates the calendar to reflect the blocked dates."]}, "testcases": [{"name": "Valid Blocked Dates", "description": "Verify that a host can successfully block dates on their calendar.", "input": {"blockedDates": ["2024-10-10", "2024-10-12"]}, "expected": {"outcome": "Dates blocked successfully", "status": "Blocked"}}, {"name": "Overlapping Blocked Dates", "description": "Verify that the system handles attempts to block dates that overlap with existing bookings.", "input": {"blockedDates": ["2024-10-15", "2024-10-20"]}, "expected": {"outcome": "Blocking failed due to overlapping bookings", "status": "Overlap Error"}}], "author": "2005080"}, {"usecase": {"name": "View Booking History", "scenario": "A guest views their booking history.", "actors": "Guest", "preconditions": "Guest has past bookings.", "steps": ["Guest navigates to the booking history page.", "System displays a list of all past bookings."]}, "testcases": [{"name": "Valid History Retrieval", "description": "Verify that a guest can view their past bookings.", "input": {"guestID": "G123"}, "expected": {"outcome": "Booking history displayed", "status": "Success"}}, {"name": "No Past Bookings", "description": "Verify that the system handles guests with no past bookings appropriately.", "input": {"guestID": "G999"}, "expected": {"outcome": "No bookings found message displayed", "status": "No Bookings"}}], "author": "2005063"}, {"usecase": {"name": "Guest Payment Processing", "scenario": "A guest books a property on Airbnb, selects payment options, and completes the payment process. The system validates the payment details, processes the payment, and updates the booking status to confirmed or fails with an error message.", "actors": "Guest, Payment Gateway, Airbnb System", "preconditions": ["Guest has selected a property to book.", "Guest is on the payment page with booking details."], "steps": ["Guest selects a payment method (e.g., credit card, PayPal).", "Guest enters valid payment details.", "System validates the payment details.", "System sends payment details to the payment gateway.", "Payment Gateway processes the payment and returns the response.", "If successful, booking status is updated to 'confirmed' and a confirmation email is sent to the guest.", "If failed, the booking remains 'pending' and an error message is displayed to the guest."]}, "testcases": [{"name": "Successful Payment Processing", "description": "Verify that a guest can successfully make a payment and confirm their booking using valid payment details.", "input": {"paymentMethod": "CreditCard", "cardNumber": "4111 1111 1111 1111", "expiryDate": "12/25", "cvv": "123", "bookingID": "B12345"}, "expected": {"outcome": "Payment processed successfully, booking confirmed", "status": "Success"}}, {"name": "Failed Payment Due to Insufficient Funds", "description": "Verify that the system correctly handles a failed payment when the guest\u2019s card has insufficient funds.", "input": {"paymentMethod": "CreditCard", "cardNumber": "4000 0000 0000 9995", "expiryDate": "12/25", "cvv": "123", "bookingID": "B67890"}, "expected": {"outcome": "Payment failed, error message displayed, booking remains pending", "status": "Failed"}}], "author": "2005063"}, {"usecase": {"name": "Manage Wishlist", "scenario": "User adds listings to their wishlist to save for future reference. They can remove or view listings later.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User browses listings", "User adds a listing to the wishlist", "User removes a listing from the wishlist", "User views wishlist"]}, "testcases": [{"name": "Add to Wishlist", "description": "Verify that the user can successfully add a listing to their wishlist.", "input": {"listingID": "L12345"}, "expected": {"outcome": "Listing added to wishlist", "status": "Success"}}, {"name": "Remove from Wishlist", "description": "Verify that the user can successfully remove a listing from their wishlist.", "input": {"listingID": "L12345"}, "expected": {"outcome": "Listing removed from wishlist", "status": "Success"}}, {"name": "View Wishlist", "description": "Verify that the user can view their saved listings in the wishlist.", "input": {}, "expected": {"outcome": "Wishlist displayed", "listings": [{"listingID": "L12345", "name": "Oceanfront Villa"}, {"listingID": "L67890", "name": "Mountain Cabin"}]}}], "author": "2005070"}, {"usecase": {"name": "Redeem Airbnb Gift Card", "scenario": "A guest redeems an Airbnb gift card to add credit to their account, which can be used for future bookings.", "actors": "Guest, Airbnb System", "preconditions": ["Guest has an Airbnb gift card.", "Guest is logged into their Airbnb account."], "steps": ["Guest navigates to the gift card redemption page.", "Guest enters the gift card code.", "System validates the gift card code.", "If valid, system adds the gift card balance to the guest's account.", "If invalid, system displays an error message."]}, "testcases": [{"name": "Successful Gift Card Redemption", "description": "Verify that a guest can successfully redeem a valid Airbnb gift card and the balance is added to their account.", "input": {"giftCardCode": "ABC123456789", "accountID": "G12345"}, "expected": {"outcome": "Gift card redeemed successfully, balance added to account", "status": "Success"}}, {"name": "Invalid Gift Card Code", "description": "Verify that the system handles an invalid gift card code correctly by displaying an error message.", "input": {"giftCardCode": "INVALID123", "accountID": "G67890"}, "expected": {"outcome": "Gift card redemption failed, error message displayed", "status": "Failed"}}], "author": "2005077"}, {"usecase": {"name": "Buy Airbnb Gift Card", "scenario": "A guest purchases an Airbnb gift card to send to themselves or another recipient.", "actors": "Guest, Payment Gateway, Airbnb System", "preconditions": ["Guest is logged into their Airbnb account.", "Guest has a valid payment method."], "steps": ["Guest navigates to the gift card purchase page.", "Guest selects a gift card amount or customizes the amount.", "Guest provides recipient information (name, email, message) or chooses to send the card to themselves.", "Guest reviews the order and proceeds to payment.", "System processes the payment via the payment gateway.", "If successful, the system sends the gift card to the recipient via email.", "If payment fails, an error message is displayed, and the order is not completed."]}, "testcases": [{"name": "Successful Gift Card Purchase", "description": "Verify that a guest can successfully purchase a gift card and the recipient receives the card via email.", "input": {"giftCardAmount": 100, "recipientEmail": "recipient@example.com", "paymentMethod": "CreditCard", "cardNumber": "4111 1111 1111 1111", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Gift card purchased successfully, recipient receives email", "status": "Success"}}, {"name": "Failed Gift Card Purchase Due to Invalid Payment", "description": "Verify that the system correctly handles a failed gift card purchase due to an invalid payment method.", "input": {"giftCardAmount": 50, "recipientEmail": "recipient@example.com", "paymentMethod": "CreditCard", "cardNumber": "4000 0000 0000 9995", "expiryDate": "12/25", "cvv": "123"}, "expected": {"outcome": "Payment failed, error message displayed, gift card not sent", "status": "Failed"}}], "author": "2005077"}, {"usecase": {"name": "Admission Test Quiz Attempt", "author": "2005061", "scenario": "A registered user attempts a quiz of any unit.", "actors": "Registered User", "preconditions": "User is logged in and the quiz is available.", "steps": ["User chooses unit and a set", "User navigates to the quiz page", "User answers the questions", "User submits the quiz"]}, "testcases": [{"name": "Quiz Submission with all answers", "description": "Verify that a user can successfully submit a quiz with all answers.", "input": {"answers": {"Q1": "A", "Q2": "B", "Q3": "C", "Q4": "B", "Q5": "C"}}, "expected": {"outcome": "Quiz submitted successfully and score shown", "status": "Submitted"}}, {"name": "Quiz Submission with Missing Answers", "description": "Verify that the system handles quiz submissions with missing answers.", "input": {"answers": {"Q1": "A", "Q2": "", "Q3": "C", "Q4": "B", "Q5": ""}}, "expected": {"outcome": "Quiz submitted successfully and score shown", "status": "Submitted"}}, {"name": "Multiple Answer Selection for a Single Question", "description": "Verify that when a user selects multiple answers for a question, the system automatically unselects the previously selected answer and retains only the last selected answer.", "input": {"answers": {"Q1": ["B", "C"]}}, "expected": {"outcome": "The system unselects the previously selected answers (B) and retains only the last selected answer (C) for question Q1.", "status": "Submitted", "finalAnswer": {"Q1": "C"}}}, {"name": "Quiz Attempt without Login", "description": "Verify that the system prompts for login if a user tries to attempt a quiz without being logged in.", "input": {"action": "Click Admission Test Quiz Attempt button"}, "expected": {"outcome": "Quiz access denied", "status": "Login required"}}, {"name": "Quiz Attempt when user is logged in but not registered for quiz", "description": "Verify that the system prompts for quiz registration if a user tries to attempt a quiz when logged in but not registered.", "input": {"action": "Click Admission Test Quiz Attempt button"}, "expected": {"outcome": "Quiz access denied", "status": "Registration required"}}]}, {"usecase": {"name": "Course Enrollment", "author": "2005061", "scenario": "A registered user enrolls in a course on the 10 Minute School's website.", "actors": "Registered User", "preconditions": "User is logged in and the course is available for enrollment.", "steps": ["User selects course", "User navigates to the course page", "User clicks on the 'Buy course' button", "User confirms enrollment"]}, "testcases": [{"name": "Successful Enrollment to free course", "description": "Verify that a user can successfully enroll in a free course.", "input": {"action": "Click 'Buy course' button"}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Successful Enrollment to paid course", "description": "Verify that a user with sufficient balance in his/her account can successfully enroll in a paid course.", "input": {"promo code": "example promo code", "payment method": "bkash", "bkash number": "01711111111", "verification code": "123456", "pin": "12345"}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Attempt to enroll to paid course with wrong payment credentials(wrong pin/wrong verification code) or insufficient balance", "description": "Verify that a user with wrong payment credentials or insufficient balance cannot enroll in a paid course.", "input": {"promo code": "example promo code", "payment method": "bkash", "bkash number": "01711111111", "verification code": "123456", "pin": "12345"}, "expected": {"outcome": "Enrollment unsuccessful", "status": "Payment required"}}, {"name": "Enrollment Without Login", "description": "Verify that the system prompts for login if a user tries to enroll without being logged in.", "input": {"action": "Click 'Buy course' button"}, "expected": {"outcome": "Enrollment failed", "status": "Login required"}}]}, {"usecase": {"name": "Beta Tester Registration", "author": "2005069", "scenario": "User registers to become a beta tester by providing all required personal information and agreeing to be contacted for feedback.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User navigates to the 'Beta Tester Registration' page.", "User fills in the 'Full Name' field.", "User enters their 'Mobile Number'.", "User provides their 'Email Address'.", "User enters their 'Profession'.", "User selects their 'Segment' from the dropdown.", "User selects their 'District' from the dropdown.", "User provides their 'Thana'.", "User fills in their 'Address'.", "User shares ideas in the provided field.", "User shares feedback in the provided field.", "User selects their preference for being contacted.", "User clicks on the 'Submit' button.", "System validates all input fields and submits the registration."]}, "testcases": [{"name": "Successful Registration", "description": "Verify that the user can successfully register as a beta tester with valid information in all required fields.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik@example.com", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration successful", "status": "Approved"}}, {"name": "Missing Required Fields", "description": "Verify that the system does not allow registration when any required fields are left empty.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik@example.com", "profession": "", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Invalid Email Format", "description": "Verify that the system does not allow registration with an invalid email format.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "invalid-email", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Integrate interactive quizzes.", "shareFeedback": "More video content needed.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}, {"name": "Duplicate Mobile Number", "description": "Verify that the system does not allow registration with a mobile number already registered as a beta tester.", "input": {"fullName": "Souvik", "mobileNumber": "01880701243", "email": "souvik2@example.com", "profession": "Student", "segment": "Education", "district": "Dhaka", "thana": "Banani", "address": "123 Main Street", "shareIdeas": "Provide in-app notifications.", "shareFeedback": "Add offline download support.", "contactPreference": "Yes"}, "expected": {"outcome": "Registration failed", "status": "Rejected"}}]}, {"usecase": {"name": "Change Password", "author": "2005069", "scenario": "User changes their password by entering the old password, new password, and confirming the new password.", "actors": "User", "preconditions": "User is logged in to their account.", "steps": ["User navigates to the 'Change Password' page.", "User enters the current password in the 'Old Password' field.", "User enters the new password in the 'New Password' field.", "User re-enters the new password in the 'Confirm Password' field.", "User clicks on the 'Submit' button.", "System verifies the old password, checks if the new passwords match, and updates the password if valid."]}, "testcases": [{"name": "Successful Password Change", "description": "Verify that the user can successfully change their password by entering valid information.", "input": {"oldPassword": "oldPassword123", "newPassword": "newPassword456", "confirmPassword": "newPassword456"}, "expected": {"outcome": "Password changed successfully", "status": "Approved"}}, {"name": "Incorrect Old Password", "description": "Verify that the system does not allow the user to change the password when the old password is incorrect.", "input": {"oldPassword": "wrongOldPassword", "newPassword": "newPassword456", "confirmPassword": "newPassword456"}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}, {"name": "New Passwords Do Not Match", "description": "Verify that the system handles the case where the new password and the confirmation password do not match.", "input": {"oldPassword": "oldPassword123", "newPassword": "newPassword456", "confirmPassword": "newPassword789"}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}, {"name": "Empty Fields", "description": "Verify that the system handles the case where one or more fields are left empty.", "input": {"oldPassword": "", "newPassword": "newPassword456", "confirmPassword": ""}, "expected": {"outcome": "Password change failed", "status": "Rejected"}}]}, {"usecase": {"name": "Book Purchase Process", "author": "2005072", "actors": "User, System", "scenario": "User selects books, adds them to the cart, provides personal details and payment method, and completes the purchase.", "preconditions": "User is on the bookstore page.", "steps": ["System displays a list of available books.", "User selects one or more books and adds them to the cart.", "User clicks 'Proceed to Checkout' and fills out their name, phone number, and delivery address.", "User selects a payment method", "User clicks 'Place Order' to complete the purchase."]}, "testcases": [{"name": "Valid Book Selection and Purchase", "description": "Verify that the user can successfully select books, add them to the cart, and complete the purchase.", "input": {"selectedBooks": ["Book A", "Book B"], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Bkash"}, "expected": {"outcome": "Purchase successful", "status": "Order confirmed"}}, {"name": "Incomplete Personal Information", "description": "Verify that the system prevents the user from placing an order with incomplete personal details.", "input": {"selectedBooks": ["Book A"], "userName": "", "phoneNumber": "0123456789", "paymentMethod": "Bkash"}, "expected": {"outcome": "Purchase failed", "status": "Error: Missing user name"}}, {"name": "Empty Cart", "description": "Verify that the system prevents the user from proceeding to checkout with an empty cart.", "input": {"selectedBooks": [], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Cash on Delivery"}, "expected": {"outcome": "Checkout failed", "status": "Error: Cart is empty"}}, {"name": "Duplicate Order Prevention", "description": "Verify that the system prevents the user from placing the same order multiple times.", "input": {"selectedBooks": ["Book A", "Book B"], "userName": "John Doe", "phoneNumber": "0123456789", "paymentMethod": "Bkash", "previousOrderExists": true}, "expected": {"outcome": "Purchase failed", "status": "Error: Duplicate order"}}]}, {"usecase": {"name": "Online Batch Admission Process", "author": "2005072", "actors": "User, System", "scenario": "User selects an HSC batch, chooses an available online course, fills in personal details, receives OTP for verification, provides city and address, selects payment method, and completes batch enrollment.", "preconditions": "User is on the online batch admission page.", "steps": ["User selects 'HSC Batch' from the batch options.", "System displays a list of available online courses.", "User selects one or more courses from the list.", "User fills in their name and phone number.", "System sends an OTP to the provided phone number for verification.", "User enters the OTP.", "User provides city and address details.", "User selects a payment method.", "User clicks 'Enroll' to complete the batch enrollment."]}, "testcases": [{"name": "Valid Batch Selection and Enrollment", "description": "Verify that the user can successfully select an HSC batch, choose an online course, and complete the enrollment after OTP verification.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment successful", "status": "Batch enrollment confirmed"}}, {"name": "OTP Verification Failed", "description": "Verify that the system prevents the user from proceeding if an incorrect OTP is provided.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "wrongOTP", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment failed", "status": "Error: Incorrect OTP"}}, {"name": "Incomplete Personal Information", "description": "Verify that the system prevents the user from submitting incomplete personal details.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics"], "userName": "", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash"}, "expected": {"outcome": "Enrollment failed", "status": "Error: Missing user name"}}, {"name": "Duplicate Batch Enrollment", "description": "Verify that the system prevents the user from enrolling in the same batch multiple times.", "input": {"selectedBatch": "HSC Batch", "selectedCourses": ["Mathematics", "Physics"], "userName": "Jane Doe", "phoneNumber": "01987654321", "OTP": "123456", "city": "Dhaka", "address": "123 Main Street", "paymentMethod": "Bkash", "previousEnrollmentExists": true}, "expected": {"outcome": "Enrollment failed", "status": "Error: Already enrolled in this batch"}}]}, {"usecase": {"name": "Enroll in Free Online Demo Class", "author": "2005076", "scenario": "A student or guardian enrolls in a free online demo class, selects the desired time slot, and provides the necessary login credentials.", "actors": "Student, Guardian", "preconditions": "User must be a student or guardian and must have access to valid login credentials.", "steps": ["User selects their role as either a 'Student' or 'Guardian'.", "User selects their district from a drop-down menu or search bar.", "User selects the class/Batch (HSC 26 Batch or HSC 25 Batch).", "User selects an available time slot for the demo class (e.g., 29 Sept 8:30 PM, English: Completing Sentence).", "User provides their mobile number or email address for verification.", "User enters their password for authentication.", "Upon successful login, the user is enrolled in the demo class and can access previous recorded classes."]}, "testcases": [{"name": "Valid Role, District, and Class Selection", "description": "Verify that the user can successfully select their role, district, and class batch and proceed to the next page.", "input": {"role": "Student", "district": "Dhaka", "classBatch": "HSC 26 Batch"}, "expected": {"outcome": "Proceed to next page for time slot selection", "status": "Success"}}, {"name": "Invalid Mobile Number Format", "description": "Verify that the system handles the case where the user enters an invalid mobile number format and prevents proceeding.", "input": {"mobileNumber": "12345"}, "expected": {"outcome": "Unable to proceed, validation error for invalid mobile number format", "status": "Submission Failed"}}, {"name": "Valid Mobile Number and Time Slot Selection", "description": "Verify that the user can select a valid time slot for the demo class and provide a valid mobile number.", "input": {"mobileNumber": "017XXXXXXXX", "timeSlot": "29 Sept 8:30 PM, English: Completing Sentence"}, "expected": {"outcome": "Proceed to password entry page", "status": "Success"}}, {"name": "Invalid Password", "description": "Verify that the system shows an error when the user enters an incorrect password.", "input": {"password": "wrongpassword"}, "expected": {"outcome": "Failed, wrong password", "status": "Error Message Displayed"}}, {"name": "Successful Enrollment", "description": "Verify that the user is successfully enrolled in the demo class after providing the correct credentials.", "input": {"mobileNumber": "017XXXXXXXX", "password": "correctpassword"}, "expected": {"outcome": "Successfully enrolled in demo class", "status": "Success"}}, {"name": "Access Recorded Class After Enrollment", "description": "Verify that the user can access the option to view the previous recorded class after successful enrollment.", "input": {"mobileNumber": "017XXXXXXXX", "password": "correctpassword"}, "expected": {"outcome": "Option to view recorded classes appears", "status": "Success"}}]}, {"usecase": {"name": "Free Offline Course Booking", "author": "2005076", "scenario": "User selects a free Course Programme with suitable branch location, fills in their personal details, and completes the booking process.", "actors": "Student, System", "preconditions": "Student is on the free offline class booking page", "steps": ["Student selects 'IELTS Programme' from the two course options: 'IELTS Programme' and 'Spoken English'.", "Student selects a class location with available slots.", "Student fills out their name, mobile number, district, education level, and expected IELTS score.", "Student selects an expected IELTS class date.", "Student submits the booking form."]}, "testcases": [{"name": "Valid Course Selection", "description": "Verify that the user can successfully select the 'IELTS Programme' and a valid class location.", "input": {"selectedProgramme": "IELTS Programme", "selectedLocation": "Uttara, Sector 3, Dhaka"}, "expected": {"outcome": "Programme and location selection successful", "status": "Next step allowed"}}, {"name": "Valid Information Submission", "description": "Verify that the user can submit all valid personal details and complete the booking.", "input": {"studentName": "Kausar Parvej", "mobileNumber": "0123456789", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "DateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Booking form submission successful", "status": "Booking confirmed"}}, {"name": "Incomplete Form Submission", "description": "Verify that the system prevents the user from submitting the form with incomplete details.", "input": {"studentName": "", "mobileNumber": "0123456789", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "examDateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Form submission failed", "status": "Error: Missing student name"}}, {"name": "Invalid Mobile Number Format", "description": "Verify that the system handles invalid mobile number formats.", "input": {"studentName": "Kausar Parvej", "mobileNumber": "invalidNumber", "district": "Dhaka", "educationLevel": "HSC or Equivalent", "institutionName": "Dhaka College", "expectedIELTSScore": 7, "examDateRange": "August 2024 - October 2024"}, "expected": {"outcome": "Form submission failed", "status": "Error: Invalid mobile number format"}}, {"name": "Invalid User Account", "description": "Verify that the system handles the case where an unregistered user tries to book a free live class.", "input": {"selectedProgramme": "Spoken English", "selectedLocation": "Uttara, Sector 3, Dhaka", "userAccount": "InvalidUser"}, "expected": {"outcome": "Booking failed", "status": "Unauthorized"}}, {"name": "Duplicate Class Booking", "description": "Verify that the system prevents a user from booking the same live class multiple times.", "input": {"selectedProgramme": "IELTS Programme", "selectedLocation": "Uttara, Sector 3, Dhaka", "previousBookingExists": true}, "expected": {"outcome": "Booking failed", "status": "Already Booked"}}]}, {"usecase": {"name": "User Login", "author": "2005079", "scenario": "A user logs into their account on the 10 Minute School website or registers if they don't have an account.", "actors": "User", "preconditions": "User has access to the internet and a valid email address or mobile number.", "steps": ["User navigates to the login/registration page", "User enters required details (e.g., email, password, or mobile number, OTP if registering)", "User submits the login/registration form"]}, "testcases": [{"name": "Valid Login with email", "description": "Verify that a user can successfully log in with a valid email and password.", "input": {"email": "user@example.com", "password": "ValidPassword123"}, "expected": {"outcome": "Login successful", "status": "User logged in"}}, {"name": "Valid Login with mobile number", "description": "Verify that a user can successfully log in with a valid mobile number and password.", "input": {"mobile number": "+8801234567890", "password": "ValidPassword123"}, "expected": {"outcome": "Login successful", "status": "User logged in"}}, {"name": "Login with incorrect password (email)", "description": "Verify that the system denies access when a user enters an incorrect password during login with an email.", "input": {"email": "user@example.com", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "Login with incorrect password (mobile number)", "description": "Verify that the system denies access when a user enters an incorrect password during login with a mobile number.", "input": {"mobile number": "+8801234567890", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Incorrect password"}}, {"name": "New Registration with email", "description": "Verify that a user can register a new account with a valid email and OTP.", "input": {"email": "newuser@example.com", "OTP": "1234", "password": "Password123"}, "expected": {"outcome": "Registration successful", "status": "New account created"}}, {"name": "New Registration with mobile number", "description": "Verify that a user can register a new account with a valid mobile number and OTP.", "input": {"mobile number": "+8801234567890", "OTP": "1234", "password": "Password123"}, "expected": {"outcome": "Registration successful", "status": "New account created"}}, {"name": "Registration with incorrect OTP (email)", "description": "Verify that the system denies registration when a user enters an incorrect OTP during email registration.", "input": {"email": "newuser@example.com", "OTP": "9999", "password": "Password123"}, "expected": {"outcome": "Registration failed", "status": "Incorrect OTP"}}, {"name": "Registration with incorrect OTP (mobile number)", "description": "Verify that the system denies registration when a user enters an incorrect OTP during mobile number registration.", "input": {"mobile number": "+8801234567890", "OTP": "9999", "password": "Password123"}, "expected": {"outcome": "Registration failed", "status": "Incorrect OTP"}}]}, {"usecase": {"name": "Search Courses", "author": "2005079", "scenario": "A user searches for courses using keywords and filters.", "actors": "User", "preconditions": "User is on the search page.", "steps": ["User enters a keyword in the search bar", "User applies filters (e.g., class, course type, price)", "User submits the search", "System displays search results"]}, "testcases": [{"name": "Successful Search", "description": "Verify that the system returns relevant courses when a valid keyword is entered.", "input": {"keyword": "Python"}, "expected": {"outcome": "Search results displayed", "status": "Relevant courses shown"}}, {"name": "Search with No Results", "description": "Verify that the system handles searches that return no results.", "input": {"keyword": "NonExistentCourse"}, "expected": {"outcome": "Search results displayed", "status": "No courses found"}}, {"name": "Search with Class Filter", "description": "Verify that the system returns courses relevant to a specific class filter.", "input": {"keyword": "Math", "filters": {"class": "Class 11-12"}}, "expected": {"outcome": "Search results displayed", "status": "Relevant courses for Class 11-12 shown"}}, {"name": "Search with Course Type Filter", "description": "Verify that the system returns courses filtered by course type (e.g., free or premium).", "input": {"keyword": "Physics", "filters": {"courseType": "Live class"}}, "expected": {"outcome": "Search results displayed", "status": "Live classes for Physics shown"}}, {"name": "Search with Price Filter", "description": "Verify that the system returns courses within the specified price range.", "input": {"keyword": "Web Development", "filters": {"price": "Free"}}, "expected": {"outcome": "Search results displayed", "status": "Free courses on web development shown"}}, {"name": "Search with Multiple Filters", "description": "Verify that the system returns courses when multiple filters (e.g., class and course type) are applied.", "input": {"keyword": "Biology", "filters": {"class": "Admission", "courseType": "Recorded class", "price": "Paid"}}, "expected": {"outcome": "Search results displayed", "status": "Relevant paid courses with recorded class for admission category shown"}}, {"name": "Invalid Filter Combination", "description": "Verify that the system handles cases where no courses are found with the selected filters.", "input": {"keyword": "SSC", "filters": {"class": "Admission", "price": "Free"}}, "expected": {"outcome": "Search results displayed", "status": "No courses found with the selected filters"}}]}, {"usecase": {"name": "Free Session Booking", "author": "2005089", "scenario": "A user schedules a session with a student advisor. There are two types of sessions available: one for students in grades 6-12 and admission seekers, and another for individuals interested in skill development.", "actors": "User", "preconditions": "User is on the 'Book a free session page' of either types.", "steps": ["User either selects the class he/she is in or selects the 'Skill Development' option.", "User writes his/her full name.", "User enters his/her valid contact no.", "User chooses the time when a student advisor will call him."]}, "testcases": [{"name": "Successful booking for a student.", "description": "A student of grade 6-12 or an admission candidate successfully books a session with a student advisor.", "input": {"course": "Class 10", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "The booking was successful. The advisor will call you.", "status": "Booked"}}, {"name": "Successful booking for Skill Development", "description": "A user successfully books a session for skill development.", "input": {"course": "Freelancing", "name": "John Doe", "contact": "01711111111", "bookingTime": "Noon"}, "expected": {"outcome": "The booking was successful. The advisor will call you.", "status": "Booked"}}, {"name": "Invalid Contact No.", "description": "User enters an invalid contact number.", "input": {"course": "Class 9", "name": "John Doe", "contact": "017456789", "bookingTime": "Morning"}, "expected": {"outcome": "Enter a valid contact number.", "status": "Rejected"}}, {"name": "Empty Name Field", "description": "User leaves the name field empty.", "input": {"course": "Design and Creatives", "name": "", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "Empty name field.", "status": "Rejected"}}, {"name": "Duplicate Booking Attempt", "description": "User attempts to book the same session twice with identical details.", "input": {"course": "Class 11", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "A duplicate session booking.", "status": "Duplicate booking detected"}}, {"name": "No time selected", "description": "User doesn't choose a time for the session.", "input": {"course": "Admission Candidate", "name": "John Doe", "contact": "01711111111", "bookingTime": ""}, "expected": {"outcome": "Select a time before submitting the form.", "status": "Rejected"}}, {"name": "Empty Course Field", "description": "User leaves the class field empty.", "input": {"course": "", "name": "John Doe", "contact": "01711111111", "bookingTime": "Night"}, "expected": {"outcome": "Select a course before submitting.", "status": "Rejected"}}]}, {"usecase": {"name": "Joining as a teacher", "author": "2005089", "scenario": "A user fills out the form to join as a teacher.", "actors": "User", "preconditions": "User is on the 'Join as a teacher' page.", "steps": ["User writes his/her full name.", "User inputs his/her email address.", "User enters his/her contact no.", "User selects his/her current location between Inside Dhaka and Outside Dhaka.", "User writes his/her current profession.", "User fills in his/her university name.", "User writes his/her department name.", "User specifies his/her current education year.", "User inputs his/her Facebook ID Link.", "User selects two subjects he/she is interested in teaching.", "User chooses the segment he/she is most comfortable teaching. The segments are: Class 6-10, HSC and University Admission and both.", "User can provide link to a LIVE or recorded class he/she has taken.", "User specifies if he/she has any teaching experience.", "User writes the years of experience he/she has.", "User can elaborate on his/her teaching experience along with other platform experience if any.", "User can summarize why he/she wants to teach there.", "User can upload his/her CV."]}, "testcases": [{"name": "Successful form submission", "description": "User successfully submits the form.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "North South University", "department": "Computer Science and Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "I have taught students of class 9 and 10 in Udvash.", "summary": "I want to teach because I love teaching.", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "The form was successfully submitted. The user will receive a confirmation email.", "status": "Submitted"}}, {"name": "Empty Name Field", "description": "User leaves the name field empty.", "input": {"name": "", "email": "johndoe@gmail.com", "contact": "1231233231", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "North South University", "department": "Civil Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "I have taught students of class 9 and 10 in Udvash.", "summary": "I want to teach because I love teaching.", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Fill in the name field.", "status": "Rejected"}}, {"name": "Invalid email address entered", "description": "User enters an invalid email address.", "input": {"name": "John Doe", "email": "johndoegmail.com", "contact": "018923130121", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "English", "educationYear": "4th year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["English", "HS"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Invalid email format.", "status": "Rejected"}}, {"name": "Not uploading CV properly", "description": "User uploads a file that is not a PDF or uploads a file that is too large.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "BRAC University", "department": "Computer Science and Engineering", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Both", "classLink": "", "experience": "Yes", "yearsOfExperience": "4", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.xlsx"}, "expected": {"outcome": "Invalid CV format.", "status": "Rejected"}}, {"name": "Not specifying University or Department or Education Year", "description": "User leaves the University and Department fields empty.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "", "department": "", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Mathematics", "Physics"], "segment": "Class 6-10", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Fill in the required University or Department fields.", "status": "Rejected"}}, {"name": "Invalid Facebook ID Link", "description": "User enters an invalid or broken Facebook ID link.", "input": {"name": "John Doe", "email": "johndoe@gmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "Physics", "educationYear": "3rd year", "facebookIDLink": "https//fb//doe", "subjects": ["Physics", "Mathematics"], "segment": "HSC", "classLink": "", "experience": "Yes", "yearsOfExperience": "2", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Invalid Facebook ID link.", "status": "Rejected"}}, {"name": "Invalid options selection", "description": "User selects an invalid option in the form.", "input": {"name": "John Doe", "email": "johndoegmail.com", "contact": "01711111111", "location": "Inside Dhaka", "currentAddress": "House-1, Road-3, Block-C, Banani, Dhaka", "university": "Dhaka University", "department": "Physics", "educationYear": "3rd year", "facebookIDLink": "https://www.facebook.com/johndoe", "subjects": ["Physics", "Mathematics"], "segment": "HSC", "classLink": "", "experience": "Choose", "yearsOfExperience": "Choose", "experienceDetails": "", "summary": "", "cv": "johndoe_cv.pdf"}, "expected": {"outcome": "Select the options properly.", "status": "Rejected"}}]}, {"usecase": {"name": "Create a New Task", "scenario": "A user creates a new task in their Todoist account.", "actors": "User", "preconditions": "User is logged into their Todoist account.", "steps": ["User clicks on the 'Add Task' button.", "User enters the task name.", "User sets optional details such as due date, priority, labels.", "User saves the task.", "System adds the task to the user's task list."]}, "testcases": [{"name": "Create Task with Minimal Details", "description": "Verify that the user can create a task by only providing the task name.", "input": {"taskName": "Buy groceries"}, "expected": {"outcome": "Task created successfully", "status": "Success"}}, {"name": "Create Task with All Details", "description": "Verify that the user can create a task with a due date, priority, and labels.", "input": {"taskName": "Prepare presentation", "dueDate": "2024-10-20", "priority": "High", "labels": ["Work", "Urgent"]}, "expected": {"outcome": "Task created successfully with all details", "status": "Success"}}, {"name": "Create Task Without Task Name", "description": "Verify that the system prevents the user from creating a task without a name.", "input": {"taskName": ""}, "expected": {"outcome": "Task creation failed, error message displayed", "status": "Failure"}}], "author": "2005081"}, {"usecase": {"name": "Edit an Existing Task", "scenario": "A user edits the details of an existing task.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task from their task list.", "User clicks on the 'Edit' option.", "User modifies the task details.", "User saves the changes.", "System updates the task with new details."]}, "testcases": [{"name": "Edit Task Name", "description": "Verify that the user can edit the name of a task.", "input": {"taskID": "T123", "newTaskName": "Buy groceries and cook dinner"}, "expected": {"outcome": "Task updated successfully", "status": "Success"}}, {"name": "Edit Task to Remove Name", "description": "Verify that the system prevents the user from saving a task without a name when editing.", "input": {"taskID": "T123", "newTaskName": ""}, "expected": {"outcome": "Task update failed, error message displayed", "status": "Failure"}}], "author": "2005086"}, {"usecase": {"name": "Complete a Task", "scenario": "A user marks a task as completed.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User views their task list.", "User clicks on the checkbox next to the task.", "System marks the task as completed and moves it to the completed tasks list."]}, "testcases": [{"name": "Mark Task as Complete", "description": "Verify that the user can mark a task as completed.", "input": {"taskID": "T124"}, "expected": {"outcome": "Task marked as completed", "status": "Success"}}, {"name": "Complete Non-existent Task", "description": "Verify that the system handles attempts to complete a task that does not exist.", "input": {"taskID": "T999"}, "expected": {"outcome": "Task completion failed, error message displayed", "status": "Failure"}}], "author": "2005086"}, {"usecase": {"name": "Delete a Task", "scenario": "A user deletes a task from their task list.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task from their task list.", "User clicks on the 'Delete' option.", "System prompts for confirmation.", "User confirms the deletion.", "System deletes the task."]}, "testcases": [{"name": "Delete Task Successfully", "description": "Verify that the user can delete a task after confirming.", "input": {"taskID": "T125", "confirmDeletion": true}, "expected": {"outcome": "Task deleted successfully", "status": "Success"}}, {"name": "Cancel Task Deletion", "description": "Verify that the task is not deleted if the user cancels the deletion.", "input": {"taskID": "T125", "confirmDeletion": false}, "expected": {"outcome": "Task not deleted", "status": "Cancelled"}}], "author": "2005081"}, {"usecase": {"name": "Create a New Project", "scenario": "A user creates a new project to organize tasks.", "actors": "User", "preconditions": "User is logged in.", "steps": ["User clicks on the 'Add Project' button.", "User enters the project name.", "User selects a color and other optional settings.", "User saves the project.", "System adds the new project to the user's project list."]}, "testcases": [{"name": "Create Project with Name", "description": "Verify that the user can create a project by providing a name.", "input": {"projectName": "Work", "color": "Blue"}, "expected": {"outcome": "Project created successfully", "status": "Success"}}, {"name": "Create Project Without Name", "description": "Verify that the system prevents creating a project without a name.", "input": {"projectName": ""}, "expected": {"outcome": "Project creation failed, error message displayed", "status": "Failure"}}], "author": "2005087"}, {"usecase": {"name": "Share a Project with Another User", "scenario": "A user shares a project with another Todoist user for collaboration.", "actors": "User", "preconditions": "User is logged in and has a project to share.", "steps": ["User selects a project.", "User clicks on the 'Share' option.", "User enters the email address of the collaborator.", "User sends the invitation.", "System sends an invitation to the collaborator."]}, "testcases": [{"name": "Share Project with Valid User", "description": "Verify that a project can be shared with a valid Todoist user.", "input": {"projectID": "P123", "collaboratorEmail": "collab@example.com"}, "expected": {"outcome": "Invitation sent successfully", "status": "Success"}}, {"name": "Share Project with Non-existent User", "description": "Verify that the system handles sharing a project with an email that is not associated with a Todoist account.", "input": {"projectID": "P123", "collaboratorEmail": "nonexistent@example.com"}, "expected": {"outcome": "Invitation sent, user prompted to create an account", "status": "Success with Notification"}}, {"name": "Share Project with Invalid Email", "description": "Verify that the system prevents sharing a project when an invalid email format is provided.", "input": {"projectID": "P123", "collaboratorEmail": "invalid-email"}, "expected": {"outcome": "Invitation not sent, error message displayed", "status": "Failure"}}], "author": "2005075"}, {"usecase": {"name": "Set Reminders for Tasks", "scenario": "A user sets reminders for their tasks to receive notifications.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task.", "User adds a reminder to the task, specifying time and method (push notification, email).", "User saves the reminder.", "System schedules the reminder."]}, "testcases": [{"name": "Set Reminder Successfully", "description": "Verify that the user can set a reminder for a task.", "input": {"taskID": "T126", "reminderTime": "2024-10-20T09:00:00"}, "expected": {"outcome": "Reminder set successfully", "status": "Success"}}], "author": "2005087"}, {"usecase": {"name": "Assign Labels and Priorities to Tasks", "scenario": "A user assigns labels and priorities to tasks for better organization.", "actors": "User", "preconditions": "User is logged in and has existing tasks.", "steps": ["User selects a task.", "User assigns one or more labels to the task.", "User sets the priority level of the task.", "User saves the changes.", "System updates the task with labels and priority."]}, "testcases": [{"name": "Assign Labels and Priority", "description": "Verify that the user can assign multiple labels and set priority.", "input": {"taskID": "T127", "labels": ["Personal", "Errands"], "priority": "Medium"}, "expected": {"outcome": "Labels and priority assigned successfully", "status": "Success"}}, {"name": "Assign Non-existent Label", "description": "Verify that the system allows creating new labels when assigning to a task.", "input": {"taskID": "T127", "labels": ["NewLabel"], "priority": "Low"}, "expected": {"outcome": "New label created and assigned, priority set", "status": "Success"}}], "author": "2005075"}, {"usecase": {"name": "Use Filters to View Tasks", "scenario": "A user uses filters to view tasks based on specific criteria.", "actors": "User", "preconditions": "User is logged in and has tasks with various attributes.", "steps": ["User navigates to the filters section.", "User selects or creates a filter (e.g., tasks due today, high priority).", "System displays tasks matching the filter criteria."]}, "testcases": [{"name": "Create and Use Custom Filter", "description": "Verify that the user can create a custom filter and view tasks accordingly.", "input": {"filterName": "Work High Priority", "filterQuery": "##Work & p1"}, "expected": {"outcome": "Custom filter created, matching tasks displayed", "status": "Success"}}, {"name": "View Tasks Due Today", "description": "Verify that the user can view tasks that are due today.", "input": {"filter": "Due Today"}, "expected": {"outcome": "Tasks due today are displayed", "status": "Success"}}, {"name": "Use Invalid Filter Query", "description": "Verify that the system handles invalid filter queries appropriately.", "input": {"filterName": "Invalid Filter", "filterQuery": "???"}, "expected": {"outcome": "Filter created but shows error message displayed for invalid filter query", "status": "Failure"}}], "author": "2005075"}, {"usecase": {"name": "Search for Tasks", "scenario": "A user searches for tasks based on keywords, projects, labels, and other filters.", "actors": "User", "preconditions": "User is logged in and has tasks with various attributes.", "steps": ["User enters a search query in the search bar.", "System displays tasks that match the search criteria."]}, "testcases": [{"name": "Valid Search by Keyword", "description": "Verify that a user can successfully search for tasks using a valid keyword.", "input": {"searchQuery": "Report"}, "expected": {"outcome": "Tasks containing the keyword 'Report' are displayed.", "status": "Success"}}, {"name": "Search with No Matching Tasks", "description": "Verify that the system handles searches that yield no matching tasks.", "input": {"searchQuery": "UnicornTask123"}, "expected": {"outcome": "No tasks found message is displayed.", "status": "Failure"}}], "author": "1705083"}, {"usecase": {"name": "Integrate Todoist with Google Calendar", "scenario": "A user integrates their Todoist account with Google Calendar to synchronize tasks.", "actors": "User", "preconditions": "User is logged in to Todoist and has a Google account.", "steps": ["User navigates to the integrations settings.", "User selects Google Calendar integration.", "User authorizes Todoist to access their Google account.", "User configures synchronization settings.", "System syncs tasks with Google Calendar."]}, "testcases": [{"name": "Successful Integration", "description": "Verify that the user can successfully integrate Todoist with Google Calendar.", "input": {"googleAccountEmail": "user@gmail.com", "syncSettings": "Two-way sync"}, "expected": {"outcome": "Integration successful, tasks synchronized", "status": "Success"}}, {"name": "Failed Integration Due to Denied Permissions", "description": "Verify that the system handles cases where the user denies permissions during integration.", "input": {"googleAccountEmail": "user@gmail.com", "permissionsGranted": "false"}, "expected": {"outcome": "Integration failed, error message displayed", "status": "Failure"}}], "author": "2005078"}, {"usecase": {"name": "Product Search and Selection", "scenario": "User searches for products using a keyword and selects a desired product from the search results.", "actors": "User, System", "preconditions": "User is on the product search page, and the product catalog is loaded in the system.", "steps": ["User enters a product name or keyword in the search bar.", "System displays a list of products that match the entered keyword.", "User selects a product from the search results.", "System displays the product details page."]}, "testcases": [{"name": "Valid Product Search and Selection", "description": "Verify that a user can successfully search for a product with a valid name and select it from the search results.", "input": {"searchKeyword": "iPhone 15"}, "expected": {"outcome": "Product details page is displayed", "selectedProduct": "iPhone 15"}}, {"name": "No Results Found for Invalid Product Name", "description": "Verify that the system displays a 'No products found' message when a user searches for a product name that does not exist.", "input": {"searchKeyword": "NonExistentProduct"}, "expected": {"outcome": "No products found message is displayed", "selectedProduct": null}}, {"name": "Partial Match Product Search", "description": "Verify that the system displays products that partially match the entered keyword.", "input": {"searchKeyword": "iPhone"}, "expected": {"outcome": "List of products like 'iPhone 15', 'iPhone 16', etc., is displayed", "selectedProduct": null}}, {"name": "Special Characters in Search Keyword", "description": "Verify that the system can handle and return appropriate results for search queries containing special characters.", "input": {"searchKeyword": "iPhone 15 (2023)"}, "expected": {"outcome": "Product details page for 'iPhone 15 (2023)' is displayed", "selectedProduct": "iPhone 15 (2023)"}}, {"name": "Empty Search Query", "description": "Verify that the system prompts the user to enter a search keyword when the search bar is submitted empty.", "input": {"searchKeyword": ""}, "expected": {"outcome": "System displays a message prompting the user to enter a search keyword", "selectedProduct": null}}], "Author": "2005074"}, {"usecase": {"name": "Product Filtering", "scenario": "User filters products based on various attributes such as category, price range, brand, and rating to narrow down the search results.", "actors": "User, System", "preconditions": "User is on the product listing page, and the product catalog is loaded with attribute filters available.", "steps": ["User selects one or more filter attributes (e.g., category, price range, brand, rating).", "System updates the product listing based on the selected filters.", "User reviews the filtered product list.", "User can further refine the results by selecting additional filters or removing some filters."]}, "testcases": [{"name": "Filter by Category", "description": "Verify that the system correctly filters products based on the selected category.", "input": {"selectedFilters": {"category": "Electronics"}}, "expected": {"outcome": "Only products belonging to the 'Electronics' category are displayed.", "productCount": 25}}, {"name": "Filter by Price Range", "description": "Verify that the system correctly filters products within the specified price range.", "input": {"selectedFilters": {"priceRange": {"min": 100, "max": 500}}}, "expected": {"outcome": "Only products with prices between $100 and $500 are displayed.", "productCount": 15}}, {"name": "Filter by Brand", "description": "Verify that the system correctly filters products based on the selected brand.", "input": {"selectedFilters": {"brand": "Apple"}}, "expected": {"outcome": "Only products from the brand 'Apple' are displayed.", "productCount": 10}}, {"name": "Filter by Rating", "description": "Verify that the system correctly filters products with ratings equal to or greater than the specified value.", "input": {"selectedFilters": {"rating": 4}}, "expected": {"outcome": "Only products with a rating of 4 stars or higher are displayed.", "productCount": 20}}, {"name": "Filter by Multiple Attributes", "description": "Verify that the system correctly filters products based on multiple attributes: category, price range, and brand.", "input": {"selectedFilters": {"category": "Electronics", "priceRange": {"min": 100, "max": 1000}, "brand": "Sony"}}, "expected": {"outcome": "Only products from the category 'Electronics', within the price range $100-$1000, and of the brand 'Sony' are displayed.", "productCount": 5}}, {"name": "Clear All Filters", "description": "Verify that the system displays all products when all filters are cleared.", "input": {"selectedFilters": {}}, "expected": {"outcome": "All products in the catalog are displayed without any filters.", "productCount": 100}}], "Author": "2005074"}, {"usecase": {"name": "Add New Product", "scenario": "Seller adds a new product on the product list, with the available number", "actors": "Seller, Admin, System", "preconditions": "Seller is already registered in the application as a verified seller", "steps": ["Seller adds the name and price of the product he/she wants to add", "Seller gives additional informations about the product", "Seller submits his/her add product request", "System checks if his/her addition request is valid", "Admin approves or disapproves"]}, "testcases": [{"name": "Valid Add Product Request Submission", "description": "Verify that when a seller add every valid information needed about the product, the product request will be accepted.", "input": {"productName": "Western Digital Internal Green Sata III SSD", "productPrice": "$3,399", "productType": "Electronics", "deliveryOptions": ["Dhaka, Dhaka North", "Rajshahi, Ghoramara post Office", "Chattogram, Zero Point"], "productDetails": {"brand": "Western Digital", "modelNo": "WDS240G3G0A", "shockResistant": true, "colorFamily": ["Green"], "storageCapacity": ["240 GB", "512 GB"], "SLC": true, "Speed": "6 Gb/s", "Type": "SATA III", "Size": "2.5 inch/7 mm"}, "paymentAmount": ["https://cloudinary.com/home/WDS240G3G0A.png", "https://cloudinary.com/home/WDS240G3G0A(frontView).png"], "availibility": 100}, "expected": {"outcome": "Product Addition Request Successful", "status": "Request Accepted"}}, {"name": "Incomplete Product Addition Request", "description": "Verify that the system handles the case where a incomplete product addition request.", "input": {"productName": "Sandisk 128 GB Ultra Luxe USB 3.2 Flash Drive", "productPrice": "$1,550", "productType": null, "deliveryOptions": [null], "productDetails": {"brand": "Sandisk", "modelNo": "SDCZ74-128G-G46", "colorFamily": ["Silver"], "storageCapacity": ["128 GB"], "SLC": true, "Speed": "120 Mb/s", "Size": "5 cm"}, "productImage": [null], "availibility": 90}, "expected": {"outcome": "Product Addition Request Unsuccessful", "status": "Incomplete Request"}}, {"name": "Corrupted Product Request Submission", "description": "Verify that system checks if all the information provided by the seller is accessable.", "input": {"productName": "Russian Winter Ushanka Hat for Men", "productPrice": "-$33", "productType": "Accessories", "deliveryOptions": ["Rajshahi, Ghoramara post Office"], "productDetails": {"brand": "Unknown", "colorFamily": ["Black"], "size": "56 - 60 cm"}, "productImage": ["https://cloudinary.com/home/hat2VD334UI45IU45JK45J.png"], "availibility": -10}, "expected": {"outcome": "Product Information Corrupted", "status": "Request Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a product addition request.", "input": {"adminApproval": true}, "expected": {"outcome": "Product Addition Approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a product addition request.", "input": {"adminApproval": false}, "expected": {"outcome": "Product Addition Failed", "status": "Rejected"}}], "Author": "2005090"}, {"usecase": {"name": "Ask a Question.", "scenario": "Customers can ask questions about any specific product.", "actors": "Customer, System", "preconditions": ["Customer must be logged in as a valid and registered user.", "Customer must be in a product's page."], "steps": ["Customer selects a product.", "System shows all the Q&A about the specific product.", "Customer submits a new question about the specific product."]}, "testcases": [{"name": "Submit a Valid Question.", "description": "Customer submits a valid question for a specific product.", "input": {"productID": "N2N3J2NJ23", "question": "Is there any side effect of this product on skin?"}, "expected": {"outcome": "Question Submitted Successfully.", "status": "Success"}}, {"name": "Submit a Blank Question.", "description": "Customer submits an empty question.", "input": {"productID": "N2N3J2NJ23", "question": ""}, "expected": {"outcome": "Submission Failed. Question can't be empty.", "status": "Failure"}}], "Author": "2005084"}, {"usecase": {"name": "Answer a Question.", "scenario": "Seller or other customers can answer any specific question about any specific product.", "actors": "Customer, Seller, System", "preconditions": ["Customer or seller must be logged in as a valid and registered user.", "Customer or seller must select a question in a product page."], "steps": ["Customer or seller selects a product.", "System shows all the Q&A about the specific product.", "Customer or seller selects a specific question.", "Customer or seller submits an answer for the specific question."]}, "testcases": [{"name": "Submit a Valid Answer.", "description": "Customer submits a valid answer for a specific question of a specific product.", "input": {"productID": "N2N3J2NJ23", "questionID": "C2P3D2KL55", "answer": "The product does not have any side effects on skin."}, "expected": {"outcome": "Answer Submitted Successfully.", "status": "Success"}}, {"name": "Submit a Blank Answer.", "description": "Customer submits an empty answer.", "input": {"productID": "N2N3J2NJ23", "questionID": "C2P3D2KL55", "answer": ""}, "expected": {"outcome": "Submission Failed. Answer can't be empty.", "status": "Failure"}}], "Author": "2005084"}, {"usecase": {"name": "Add a New Product to the Cart", "scenario": "Customer adds a new product to his cart", "actors": "Customer", "preconditions": ["Customer must be in a product's page", "The product is available in stock", "If the product is already in the cart, the quantity is less than 5"], "steps": ["Customer goes to the product page", "Customer clicks the \"Add to Cart\" button"]}, "testcases": [{"name": "Add to Cart Request for an Available Product That Is Not Already in the Cart", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock and not already in the cart, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Addition to Cart Request Successful", "status": "Request Accepted", "message": "Added to cart successfully", "quantityOfTheProductInCart": 1}}, {"name": "Add to Cart Request for An Available Product That Is Already in The Cart with Quantity Less than 5", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock and already in the cart with quantity less than 5, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Addition to Cart Request Successful", "status": "Request Accepted", "message": "Added to cart successfully", "quantityOfTheProductInCart": 5}}, {"name": "Add to Cart Request for An Available Product That Is Already in The Cart with Quantity 5", "description": "Verify that when a customer submits a Add to Cart request for a product that is available in stock but already in the cart with quantity 5, the request is rejected and appropriate message is shown.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 5}, "expected": {"outcome": "Addition to Cart Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, up to 5 items of the product can be purchased per order.", "quantityOfTheProductInCart": 5}}, {"name": "Add to Cart Request for An Unavailable Product", "description": "Verify that when a customer submits a Add to Cart request for a product that is not available in stock, the request is rejected.", "input": {"productID": "Product123", "availability": 0, "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Addition to Cart Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, the product is out of stock.", "quantityOfTheProductInCart": 0}}], "Author": "2005085"}, {"usecase": {"name": "Increase Quantity of A Product in The Cart", "scenario": "Customer increases quantity of a product in his cart", "actors": "Customer", "preconditions": ["Product must be in the cart", "The product is available in stock", "The quantity of the product in the cart is less than 5"], "steps": ["Customer goes to his cart page", "Customer clicks the \"+\" button for a product"]}, "testcases": [{"name": "Increase Request for An Available Product in The Cart with Quantity Less than 5", "description": "Verify that when a customer submits an increase quantity request for a product that is available in stock and has quantity in cart less than 5, the request is accepted.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Increase Quantity Request Successful", "status": "Request Accepted", "quantityOfTheProductInCart": 5}}, {"name": "Increase Request for An Available Product in The Cart with Quantity 5", "description": "Verify that when a customer submits an increase quantity request for a product that is available in stock and has quantity in cart equals to 5, the request is rejected and appropriate message is shown.", "input": {"productID": "Product123", "availability": 100, "quantityOfTheProductInCart": 5}, "expected": {"outcome": "Increase Quantity Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, up to 5 items of the product can be purchased per order.", "quantityOfTheProductInCart": 5}}, {"name": "Increase Request for An Unavailable Product", "description": "Verify that when a customer submits an increase quantity request for a product that is not available in stock, the request is rejected.", "input": {"productID": "Product123", "availability": 0, "quantityOfTheProductInCart": 2}, "expected": {"outcome": "Increase Quantity Request Unsuccessful", "status": "Request Rejected", "message": "Sorry, the product is out of stock.", "quantityOfTheProductInCart": 2}}], "Author": "2005085"}, {"usecase": {"name": "Decrease Quantity of A Product in The Cart", "scenario": "Customer decreases quantity of a product in his cart", "actors": "Customer", "preconditions": ["Product must be in the cart"], "steps": ["Customer goes to his cart page", "Customer clicks the \"-\" button for a product"]}, "testcases": [{"name": "Decrease Request for A Product in The Cart with Quantity Greater than 1", "description": "Verify that when a customer submits a decrease quantity request for a product with quantity in cart greater than 1, the quantity is decreased by 1.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 4}, "expected": {"outcome": "Decrease Quantity Request Successful", "status": "Request Accepted", "quantityOfTheProductInCart": 3}}, {"name": "Decrease Request for A Product in The Cart with Quantity 1", "description": "Verify that when a customer submits a decrease quantity request for a product with quantity in cart equals to 1, the product is removed from cart.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 1}, "expected": {"outcome": "Decrease Quantity Request Successful", "status": "Request Accepted", "message": "Delete success!", "quantityOfTheProductInCart": 0}}], "Author": "2005085"}, {"usecase": {"name": "Remove A Product from The Cart", "scenario": "Customer removes a product from his cart", "actors": "Customer", "preconditions": ["Customer must be in his cart page", "The product is in the cart"], "steps": ["Customer goes to his cart page", "Customer selects the product", "Customer clicks the delete button", "Customer confirms deletion"]}, "testcases": [{"name": "Remove from Cart Request for A Product That Is in The Cart", "description": "Verify that when a customer submits a remove request for a product that is in the cart, the product is removed from the cart.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 2}, "expected": {"outcome": "Remove from Cart Request Successful", "status": "Request Accepted", "message": "Delete success!", "quantityOfTheProductInCart": 0}}, {"name": "Remove from Cart Request for A Product That Is Not in The Cart", "description": "Verify that when a customer submits a remove request for a product that is not in the cart, request is rejected.", "input": {"productID": "Product123", "quantityOfTheProductInCart": 0}, "expected": {"outcome": "Remove from Cart Request Unsuccessful", "status": "Request Rejected", "message": "The product is not in your cart."}}], "Author": "2005085"}, {"usecase": {"name": "Process a Payment", "scenario": "Customer completes the payment for an order.", "actors": "Customer, System, Payment Gateway", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer has added products to the cart.", "Customer has selected a payment method."], "steps": ["Customer proceeds to the checkout page.", "System displays the available payment options.", "Customer selects a payment method (e.g., Credit/Debit Card, bKash, Nagad, Rocket, Cash on Delivery).", "System redirects to the payment gateway if required (e.g., for Credit Card or bKash).", "Customer completes the payment process.", "Payment gateway confirms the payment status.", "System updates the order status to 'Payment Successful' or 'Payment Failed' or with necessary information.", "System sends confirmation of the order to the customer."]}, "testcases": [{"name": "Successful Payment with Credit/Debit Card", "description": "Verify that a customer can successfully make a payment using a credit/debit card.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Successful", "status": "Order Confirmed"}}, {"name": "Failed Payment due to Insufficient Funds", "description": "Verify that a customer cannot make a payment with a credit/debit card that has insufficient funds.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Insufficient Funds"}}, {"name": "Failed Payment due to Expired Card", "description": "Verify that a customer cannot make a payment using a credit/debit card that has expired.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/22", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Card Expired"}}, {"name": "Failed Payment due to Invalid Card Details", "description": "Verify that a customer cannot make a payment using invalid credit/debit card details.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "1234XYZ812345678", "expirationDate": "12/25", "cvv": "999", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Invalid Card Details"}}, {"name": "Successful Payment with Mobile Banking(Bkash, Nagad, Rocket etc.)", "description": "Verify that a customer can successfully make a payment using a mobile banking payment system.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "1234", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Successful", "status": "Order Confirmed"}}, {"name": "Failed Payment due to Incorrect Account Number", "description": "Verify that a customer cannot make a payment with an incorrect account number during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "018XY345678", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect Account Number"}}, {"name": "Failed Payment due to Incorrect OTP", "description": "Verify that a customer cannot make a payment with an incorrect OTP during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "000000", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect OTP"}}, {"name": "Failed Payment due to Incorrect PIN", "description": "Verify that a customer cannot make a payment with an incorrect PIN during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "XY00", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Incorrect PIN"}}, {"name": "Failed Payment due to Insufficient Balance in the Mobile Banking Account", "description": "Verify that a customer cannot make a payment with insufficient balance in the mobile banking account.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "bkashNumber": "01612345678", "otp": "654321", "amount": 5000, "orderID": "ORD24680"}, "expected": {"outcome": "Payment Failed", "status": "Insufficient Balance"}}, {"name": "Failed Payment due to Network Timeout in Credit/Debit Card Payment", "description": "Verify that a customer cannot make a payment when the network times out during the payment process.", "input": {"paymentMethod": "Credit/Debit Card", "cardNumber": "4111111111111111", "expirationDate": "12/25", "cvv": "123", "amount": 5000, "orderID": "ORD12345"}, "expected": {"outcome": "Payment Failed", "status": "Network Timeout"}}, {"name": "Failed Payment due to Network Timeout in Mobile Banking", "description": "Verify that a customer cannot make a payment when the network times out during the mobile banking payment process.", "input": {"paymentMethod": "Any of the allowed mobile banking payment system", "accountNumber": "01712345678", "otp": "123456", "pin": "1234", "amount": 2500, "orderID": "ORD67890"}, "expected": {"outcome": "Payment Failed", "status": "Network Timeout"}}, {"name": "Unavailable Cash On Delivery Payment Method", "description": "Verify that Cash on Delivery is not available for the items in the cart", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "COD Unavailable", "status": "Cash on Delivery Unavailable For the Selected Items"}}, {"name": "Succesfull Cash on Delivery Payment Process", "description": "Customer selects Cash on Delivery and proceeds with the order.", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "Order Confirmed, Payment Pending", "status": "Cash on Delivery"}}, {"name": "Failed Cash on Delivery Payment Process", "description": "Verify that a customer cannot make a payment using Cash on Delivery if the payment is not received.", "input": {"paymentMethod": "Cash on Delivery", "orderID": "ORD54321", "amount": 1500}, "expected": {"outcome": "Payment Failed", "status": "Payment Not Received"}}], "Author": "2005067"}, {"usecase": {"name": "Track Order", "scenario": "Customer tracks the status of an order.", "actors": "Customer, System", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer has placed an order."], "steps": ["Customer goes to the Accounts section.", "Customer selects Track Package Slider.", "System displays the list of orders placed by the customer.", "Customer selects the order to track.", "System shows the current status of the order (e.g., Processing, Shipped, Delivered)."]}, "testcases": [{"name": "Track Order Status - Delivered", "description": "Verify that a customer can track the status of an order.", "input": {"orderID": "ORD12345"}, "expected": {"status": "Delivered", "estimatedDelivery": null, "trackingNumber": null}}, {"name": "Track Order Status - Processing", "description": "Verify that a customer can track the status of an order that is still being processed.", "input": {"orderID": "ORD67890"}, "expected": {"status": "Processing", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Processed and Ready to Ship", "description": "Verify that a customer can track the status of an order where the products are processed and ready to ship.", "input": {"orderID": "ORD13579"}, "expected": {"status": "Processed and Ready to Ship", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Reached The Logistics Facility", "description": "Verify that a customer can track the status of an order where the products have reached the logistics facility.", "input": {"orderID": "ORD54321"}, "expected": {"status": "Products Reached Logistics Facility", "estimatedDelivery": "2024-11-12", "trackingNumber": null}}, {"name": "Track Order Status - Shipped", "description": "Verify that a customer can track the status of an order that has been shipped.", "input": {"orderID": "ORD24680"}, "expected": {"status": "Shipped", "estimatedDelivery": "2024-11-12", "trackingNumber": "LZ987654321CN"}}, {"name": "Track Order Status - Ready for Collection", "description": "Verify that a customer can track the status of an order where the products are ready for collection.", "input": {"orderID": "ORD97531"}, "expected": {"status": "Ready for Collection"}}, {"name": "Track Order Status - Out for Delivery", "description": "Verify that a customer can track an order that is out for delivery.", "input": {"orderID": "ORD97531"}, "expected": {"status": "Out for Delivery", "estimatedDelivery": "2024-11-12", "trackingNumber": "LZ987654321CN"}}, {"name": "Track Order Status- Returned and Refunded", "description": "Verify that a customer can track the status of an order that has been returned.", "input": {"orderID": "ORD24680"}, "expected": {"status": "Returned and Refunded", "refundAmount": "1000 BDT"}}, {"name": "Track Order Status - Cancelled", "description": "Verify that a customer can track the status of an order that has been cancelled.", "input": {"orderID": "ORD13579"}, "expected": {"status": "Cancelled"}}, {"name": "Track Order Status - Invalid Order ID", "description": "Verify that the system handles an invalid order ID properly.", "input": {"orderID": "ORDINVALID"}, "expected": {"status": "Error", "message": "Order not found"}}], "Author": "2005067"}, {"usecase": {"name": "Review a Product", "scenario": "Customer reviews a specific product.", "actors": "Customer, System, Admin", "preconditions": ["Customer is logged in as a valid and registered user.", "Customer purchased the product."], "steps": ["Customer selects a product.", "System shows all the reviews about the specific product.", "Customer submits a review for the specific product.", "Admin approves or disapproves."]}, "testcases": [{"name": "Submit a Valid Review of Purchased", "description": "Customer submits a review which is valid as he already purchased the product.", "input": {"productID": "N2N3J2NJ23", "review": "The quality of the product was good and fulfilled my expectation."}, "expected": {"outcome": "Review Submitted Successfully.", "status": "Valid Review Addition Requested."}}, {"name": "Submit an Invalid Review of not Purchased", "description": "Customer submits a review which is invalid as he has not purchased the product.", "input": {"productID": "N2N3J2NJ23", "review": "The product quality was not upto the mark."}, "expected": {"outcome": "Submission Invalid. Can't review a product before purchase.", "status": "Invalid Review Addition Requested."}}, {"name": "Submit a Blank Review.", "description": "Customer submits an empty review.", "input": {"productID": "N2N3J2NJ23", "review": ""}, "expected": {"outcome": "Submission Invalid. Review can't be empty.", "status": "Blank Review Addition Requested."}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve to add a customer's product review.", "input": {"adminApproval": true}, "expected": {"outcome": "Review Addition Request Approved.", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject to add a customer's product review.", "input": {"adminApproval": false}, "expected": {"outcome": "Review Addition Request Rejected.", "status": "Rejected"}}], "Author": "2005084"}, {"usecase": {"name": "View Product Information", "scenario": "User navigates to the product page or searches for a product", "actors": "Customer,System", "preconditions": "User is logged in or browsing anonymously", "steps": ["User navigates to the product page or searches for a product", "System retrieves product details from the database", "System displays product information including title, description, price, availability, and images", "User views additional information such as reviews, ratings, and related products"]}, "testcases": [{"name": "Invalid Product Search", "description": "Verify that the system handles invalid or non-existent product searches gracefully.", "input": {"productId": "InvalidProduct999"}, "expected": {"message": "search no result"}}, {"name": "View Product Information Without Login", "description": "Verify that a user can view product details without logging in.", "input": {"productId": "ValidProduct789"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "Out of stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "enabled"}}, {"name": " Out of Stock Product", "description": "Verify that the system shows appropriate messaging when a product is out of stock.", "input": {"productId": "OutOfStockProduct456"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "Out of stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "Disabled"}}, {"name": "Valid Product Information Display", "description": "Verify that product information is displayed when a valid product is selected.", "input": {"productId": "ValidProduct123"}, "expected": {"title": "Product Title", "description": "Product Description", "price": "$50", "availability": "In Stock", "images": ["image1.jpg", "image2.jpg"], "addToCartButton": "Enabled"}}], "Author": "2005088"}, {"usecase": {"name": "Apply Promo Code at Checkout", "scenario": "A customer wants to apply a discount promo code while completing their purchase to receive a reduced total price.", "actors": "User,System", "preconditions": ["Uder is logged in", "User has selected items to purchase", "Promo code is applicable to selected items"], "steps": ["User navigates to the checkout page after adding items to the cart.", "User enters the promo code in the designated promo code field.", "System validates the promo code (validity, expiration, applicability to products).", "If the promo code is valid, the system applies the discount to the total price and shows the updated total.", "User reviews the updated total price with the discount applied and proceeds with payment."]}, "testcases": [{"name": "Valid Promo Code Application", "description": "Verify that the promo code is applied successfully when a valid code is used during checkout.", "input": {"promoCode": "SAVE20", "cartItems": [{"itemId": "Product123", "price": "$100"}]}, "expectedOutput": {"discountApplied": true, "discountAmount": "$20", "newTotal": "$80", "message": "Promo code applied successfully"}}, {"name": "Expired Promo Code", "description": "Verify that the system displays an error message when an expired promo code is entered.", "input": {"promoCode": "EXPIRED30", "cartItems": [{"itemId": "Product123", "price": "$100"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$100", "message": "Promo code has expired"}}, {"name": "Invalid Promo Code", "description": "Verify that the system shows an appropriate error message when an invalid promo code is used.", "input": {"promoCode": "INVALIDCODE", "cartItems": [{"itemId": "Product789", "price": "$200"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$200", "message": "Invalid promo code"}}, {"name": "Promo Code Not Applicable to Cart Items", "description": "Verify that the system shows a message when a valid promo code is not applicable to the items in the cart.", "input": {"promoCode": "SAVE50", "cartItems": [{"itemId": "Product999", "price": "$300", "category": "Electronics"}]}, "expectedOutput": {"discountApplied": false, "newTotal": "$300", "message": "Promo code not applicable to selected items"}}], "Author": "2005088"}, {"usecase": {"name": "Update Information of a Product", "scenario": "A seller updates the information about a product, the systems checks if the update request is valid and send the request to the admin for approval", "actors": "Seller, Admin, System", "preconditions": "The Product is already added in the product list.", "steps": ["Seller selects the product to update information", "Seller updates all the information needed to be changed", "Seller submits his/her update request", "System checks if his/her update request is valid", "Admin approves or disapproves"]}, "testcases": [{"name": "Valid Update Request", "description": "Verify that the Seller can make a valid update request by filling all the necessary field.", "input": {"productID": "N2N3J2NJ23", "updateFields": {"productName": "Qiunery QX11 Smart Watch", "availibility": 30, "productPrice": "$100", "productDetails": {"brand": "Xiomi"}}}, "expected": {"outcome": "Update Request successful", "status": "Request Accepted"}}, {"name": "Incomplete Update Request", "description": "Verify that the system handles the case where the seller give a update request keeping incomplete information about the product.", "input": {"productID": "NJN34JN34J", "updateFields": {"productName": "GIGABYTE GeForce GTX 1650 D6 4G GDDR6 Graphics Card", "productType": null, "productPrice": null, "productDetails": {"brand": "Gigabyte", "Series": "GTX1650"}}}, "expected": {"outcome": "Update Request unsuccessful", "status": "Incomplete request"}}, {"name": "invalid Update Request", "description": "Verify that the system handles the case where the seller gives a request keeping invalid information about the product.", "input": {"productID": "D4OFKOERO44O5TMKO", "updateFields": {"productPrice": "-$40", "availibility": -10, "deliveryOptions": ["Russia, Moscow"]}}, "expected": {"outcome": "Update Request unsuccessful", "status": "Request Rejected"}}, {"name": "Admin Approval", "description": "Verify that the admin can successfully approve a product update information request.", "input": {"adminApproval": true}, "expected": {"outcome": "Product information Update Approved", "status": "Approved"}}, {"name": "Admin Rejection", "description": "Verify that the admin can successfully reject a product update information request.", "input": {"adminApproval": false}, "expected": {"outcome": "Product Information Update Failed", "status": "Rejected"}}], "Author": "2005090"}, {"usecase": {"name": "Add Expense or Income Transaction in YNAB", "author": "Sumon", "scenario": "User adds a new transaction (expense or income) to track financial activity within their budget.", "actors": "User", "preconditions": "User is logged into their YNAB account and has an active budget with categories.", "steps": ["User navigates to the 'Budget' or 'Accounts' section.", "User selects 'Add Transaction' in a specific account.", "User inputs the transaction details including the payee, amount, date, and category.", "User saves the transaction.", "System updates the user's budget and account balance to reflect the new transaction."]}, "testcases": [{"name": "Valid Expense Transaction Entry", "description": "Verify that a user can add an expense transaction with valid details.", "input": {"type": "Expense", "account": "Checking Account", "category": "Groceries", "payee": "Supermarket", "transactionAmount": 100, "transactionDate": "2024-10-10", "memo": "Weekly groceries"}, "expected": {"outcome": "Transaction added successfully and the budget is updated.", "status": "Success"}}, {"name": "Valid Income Transaction Entry", "description": "Verify that a user can add an income transaction with valid details.", "input": {"type": "Income", "account": "Checking Account", "category": "To Be Budgeted", "payee": "Employer", "transactionAmount": 2000, "transactionDate": "2024-10-01", "memo": "October salary"}, "expected": {"outcome": "Income transaction added successfully and the budget is updated.", "status": "Success"}}, {"name": "Negative Transaction Amount", "description": "Verify that the system prevents adding a transaction with a negative amount.", "input": {"type": "Expense", "account": "Credit Card", "category": "Restaurants", "payee": "Cafe", "transactionAmount": -30, "transactionDate": "2024-10-15", "memo": "Lunch"}, "expected": {"outcome": "Transaction entry failed", "status": "Invalid amount"}}, {"name": "Missing Transaction Amount", "description": "Verify that the system handles the case where the user tries to add a transaction without specifying an amount.", "input": {"type": "Expense", "account": "Savings Account", "category": "Entertainment", "payee": "Movie Theater", "transactionAmount": null, "transactionDate": "2024-10-20", "memo": "Movie tickets"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Missing transaction amount"}}, {"name": "Future Transaction Date", "description": "Verify that the system prevents adding a transaction with a future date.", "input": {"type": "Expense", "account": "Checking Account", "category": "Utilities", "payee": "Electric Company", "transactionAmount": 150, "transactionDate": "2025-01-01", "memo": "Future bill payment"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Future transaction date not allowed"}}, {"name": "Invalid Category Selection", "description": "Verify that the system handles the case where the user tries to add a transaction without selecting a valid category.", "input": {"type": "Expense", "account": "Checking Account", "category": null, "payee": "Coffee Shop", "transactionAmount": 5, "transactionDate": "2024-10-20", "memo": "Coffee"}, "expected": {"outcome": "Transaction addition failed", "status": "Error: Missing or invalid category"}}, {"name": "Adding Split Transactions", "description": "Verify that the system supports adding split transactions under multiple categories.", "input": {"type": "Expense", "account": "Checking Account", "payee": "Supermarket", "transactionAmount": 150, "transactionDate": "2024-10-15", "splitTransactions": [{"category": "Groceries", "amount": 100, "memo": "Food items"}, {"category": "Household Items", "amount": 50, "memo": "Cleaning supplies"}]}, "expected": {"outcome": "Split transaction added successfully and the budget is updated.", "status": "Success"}}]}, {"usecase": {"name": "Manage Payees", "author": "Abdullah", "scenario": "The user manages payees by editing, merging, or deleting payees in the budget.", "actors": "User", "preconditions": "User must have an existing budget with transactions that contain payees.", "steps": ["User navigates to the 'Manage Payees' section.", "User selects a payee to edit, merge, or delete.", "User performs the desired action (edit, merge, or delete).", "The system updates the payee list and reflects changes in the budget."]}, "testcases": [{"name": "Edit Payee Name", "description": "Verify that the user can successfully rename a payee.", "input": {"originalPayee": "Grocery Store", "newPayee": "Supermarket"}, "expected": {"outcome": "The payee name is updated to 'Supermarket' in all related transactions.", "status": "Success"}}, {"name": "Merge Two Payees", "description": "Verify that the user can merge two payees into one.", "input": {"payee1": "Gas Station", "payee2": "Fuel Station"}, "expected": {"outcome": "All transactions with 'Gas Station' are updated to 'Fuel Station'.", "status": "Success"}}, {"name": "Delete Payee Without Transactions", "description": "Verify that the user can delete a payee with no transactions attached.", "input": {"payee": "Old Subscription"}, "expected": {"outcome": "Payee 'Old Subscription' is removed from the list.", "status": "Deleted"}}, {"name": "Delete Payee With Transactions", "description": "Verify that the system prevents deleting a payee that is linked to active transactions.", "input": {"payee": "Internet Provider"}, "expected": {"outcome": "The system does not allow deleting the payee and displays an error.", "status": "Error: Payee linked to transactions"}}, {"name": "Prevent Duplicate Payees", "description": "Verify that the system prevents creating a duplicate payee with an identical name.", "input": {"payee": "Supermarket"}, "expected": {"outcome": "The system prevents adding the duplicate payee and shows a warning.", "status": "Error: Duplicate payee"}}]}, {"usecase": {"name": "Set Savings Goal in YNAB", "author": "Tahsin", "scenario": "User sets a savings goal to allocate money for a specific purpose (e.g., vacation, emergency fund).", "actors": "User", "preconditions": "User is logged into their YNAB account and has an active budget with categories.", "steps": ["User navigates to the 'Budget' section.", "User selects a category to set a savings goal (e.g., 'Vacation').", "User clicks on 'Set Goal' option.", "User inputs the target amount and the target date for the goal.", "User saves the goal.", "System updates the budget to reflect the goal and tracks progress toward the savings goal."]}, "testcases": [{"name": "Valid Savings Goal Entry", "description": "Verify that the user can set a savings goal with valid details.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "targetDate": "2025-06-01"}, "expected": {"outcome": "Savings goal set successfully and reflected in the budget.", "status": "Success"}}, {"name": "Savings Goal with Past Date", "description": "Verify that the system prevents setting a savings goal with a target date in the past.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "targetDate": "2023-01-01"}, "expected": {"outcome": "Savings goal entry failed", "status": "Error: Target date cannot be in the past"}}, {"name": "Missing Target Amount", "description": "Verify that the system handles cases where the user attempts to set a savings goal without specifying a target amount.", "input": {"category": "Emergency Fund", "goalType": "Target by Date", "targetAmount": null, "targetDate": "2024-12-01"}, "expected": {"outcome": "Savings goal entry failed", "status": "Error: Missing target amount"}}, {"name": "Set Savings Goal with Flexible Date", "description": "Verify that the user can set a savings goal without a specific end date.", "input": {"category": "Emergency Fund", "goalType": "Target Balance", "targetAmount": 5000, "targetDate": null}, "expected": {"outcome": "Savings goal set successfully without a specific end date.", "status": "Success"}}, {"name": "View Progress on Savings Goal", "description": "Verify that the user can view their progress toward an existing savings goal.", "input": {"category": "Vacation", "goalType": "Target by Date", "targetAmount": 2000, "amountSaved": 1000}, "expected": {"outcome": "The system displays that 50% of the goal has been achieved.", "status": "Success"}}]}, {"usecase": {"name": "Create YNAB Together Group", "author": "Shanto", "scenario": "A user creates a YNAB Together group to share budgeting with family members.", "actors": "User", "preconditions": "User is logged into YNAB with an active subscription.", "steps": ["User navigates to the 'YNAB Together' section in the settings.", "User creates a new group and adds family members by email.", "Members receive an invite and accept the invitation.", "User and family members are linked under one YNAB Together group."]}, "testcases": [{"name": "Valid YNAB Together Group Creation", "description": "Verify that a user can create a YNAB Together group and invite valid members.", "input": {"groupName": "Family Budget Group", "emails": ["spouse@domain.com", "child@domain.com"]}, "expected": {"outcome": "YNAB Together group created successfully", "status": "Group and invitations sent"}}, {"name": "Invalid Email for Group Member", "description": "Verify that the system prevents inviting a user with an invalid email.", "input": {"groupName": "Family Budget Group", "emails": ["invalid-email"]}, "expected": {"outcome": "Group creation failed", "status": "Invalid email format"}}, {"name": "Empty Group Name", "description": "Verify that the system prevents creating a YNAB Together group without a group name.", "input": {"groupName": "", "emails": ["spouse@domain.com"]}, "expected": {"outcome": "Group creation failed", "status": "Missing group name"}}]}, {"usecase": {"name": "Collaborate on Shared Budget", "author": "Shanto", "scenario": "Members of a YNAB Together group work on a shared family budget.", "actors": "User, Family Members", "preconditions": "User and family members are part of a YNAB Together group.", "steps": ["User creates a shared family budget.", "Other members access the shared budget.", "Members can edit and view categories and budget allocations.", "Changes are updated in real time for all members."]}, "testcases": [{"name": "Valid Shared Budget Collaboration", "description": "Verify that users can collaborate on a shared family budget with valid inputs.", "input": {"budgetName": "Family Monthly Budget", "categories": [{"name": "Groceries", "amount": 500}, {"name": "Rent", "amount": 1500}]}, "expected": {"outcome": "Shared budget updated successfully", "status": "Changes reflected for all members"}}, {"name": "Edit Budget Category by Member", "description": "Verify that any member of the YNAB Together group can update budget categories.", "input": {"memberEmail": "spouse@domain.com", "categoryChanges": {"Groceries": 600}}, "expected": {"outcome": "Category updated successfully", "status": "Changes reflected in real-time"}}, {"name": "View Only Permission", "description": "Verify that users with view-only permission cannot edit the budget.", "input": {"memberEmail": "child@domain.com", "attemptedCategoryChange": {"Rent": 1200}}, "expected": {"outcome": "Category update failed", "status": "Insufficient permissions"}}]}, {"usecase": {"name": "Create a Budget", "author": "Shanto", "scenario": "User creates a new Budget to track income and expenses for a specific time period.", "actors": "User", "preconditions": "User is logged into their account.", "steps": ["User selects 'Create New Budget' from the dashboard.", "User provides the 'Budget Name', sets the currency, number format and sets the time period (monthly, yearly, etc.).", "User enters initial income sources and categories for the expenses (Bills, Needs, Wants, etc.).", "System saves the budget and returns the user to the dashboard."]}, "testcases": [{"name": "Valid Budget Creation", "description": "Verify that a user can successfully create a budget with valid details.", "input": {"budgetName": "September 2024", "timePeriod": "Monthly", "incomeSources": ["Salary"], "expenseCategories": ["Bills", "Rent/Mortgage", "Utilities"]}, "expected": {"outcome": "Budget created successfully", "status": "Success"}}, {"name": "Missing Budget Name", "description": "Verify that the system handles the case where the user tries to create a budget without providing the budget name", "input": {"budgetName": "", "timePeriod": "Monthly", "incomeSources": ["Freelance"], "expenseCategories": ["Entertainment"]}, "expected": {"outcome": "Budget creation failed", "status": "Error: Missing budget Name"}}, {"name": "Duplicate Budget Name", "description": "Verify that the sytem prevents the creation of multiple budgets with the same name", "input": {"budgetName": "September 2024", "timePeriod": "Monthly", "incomeSources": ["Salary"], "expenseCategories": ["Groceries", "Medical Emergencies", "Vacation", "YNAM Subscription"]}, "expected": {"outcome": "Budget creation failed", "status": "Error: Duplicate budget name"}}, {"name": "Successful Budget creation with default Categories", "description": "Create a new budget and check if the default spending categories (if any exist) are set up automatically.", "input": {"budgetName": "October 2024", "timePeriod": "Monthly", "incomeSources": ["Salary", "Freelance"], "expenseCategories": ""}, "expected": {"outcome": "The Budget is created successfully", "status": "Success"}}, {"name": "Max Character Limit for Budget Name", "description": "Try creating a budget name that exceeds the character limit", "input": {"budgetName": "Qwertyuiop asdfghjkl zxcvbnm qaz wsx edc rfv tgb", "timePeriod": "Monthly", "incomeSources": ["Selling Home stuffs"], "expenseCategories": ["Dining Out", "Internet", "Phone"]}, "expected": {"outcome": "Restrict the input", "status": "Warning: Budget Name exceeded the limit"}}]}, {"usecase": {"name": "Sync Bank Account", "author": "Rayan", "scenario": "User links their bank account to sync transactions automatically.", "actors": "User", "preconditions": "User must have an account with a supported bank.", "steps": ["User navigates to the 'Bank Accounts' section", "User selects their bank and provides authentication details", "System syncs the transactions"]}, "testcases": [{"name": "Valid Bank Sync", "description": "Verify that the user can sync their bank account successfully.", "input": {"bankName": "ExampleBank", "authDetails": {"username": "user123", "password": "pass123"}}, "expected": {"outcome": "Sync successful", "status": "Transactions synced"}}, {"name": "Invalid Bank Credentials", "description": "Verify that the system handles invalid bank credentials properly.", "input": {"bankName": "ExampleBank", "authDetails": {"username": "wronguser", "password": "wrongpass"}}, "expected": {"outcome": "Sync failed", "status": "Invalid credentials"}}]}, {"usecase": {"id": "by 2005091", "name": "Browse, Search Books and Filter", "scenario": "User browses and searches the website to find books based on categories, authors, titles and apply filters.", "actors": "User", "preconditions": "User accesses the Rokomari website.", "steps": ["User navigates to the books section.", "User selects categories or applies filters such as author, genre and publication.", "User searches by title, author, or category using the search bar.", "The system displays matching results based on search and filter criteria."]}, "testcases": [{"name": "Valid Book Search by Title", "description": "Verify that the user can search for a book by a valid title and browse results.", "input": {"searchQuery": "Math Olympiad"}, "expected": {"outcome": "Relevant books are displayed successfully.", "status": "Success"}}, {"name": "Search with No Results", "description": "Ensure that the system handles searches with no matching results.", "input": {"searchQuery": "Unknown Title"}, "expected": {"outcome": "No results found message is displayed.", "status": "No Results"}}, {"name": "Search with Special Characters", "description": "Ensure the system handles special characters in search queries correctly.", "input": {"searchQuery": "#$@%BookTitle"}, "expected": {"outcome": "No results found message is displayed.", "status": "No Results"}}, {"name": "Filter by Genre , Publication and Author", "description": "Verify that the system applies multiple filters and displays results accordingly.", "input": {"filters": {"author": "Rahim", "genre": "Fiction", "publication": "prothoma prokashon"}}, "expected": {"outcome": "Books matching the selected genre ,author and publication are displayed.", "status": "Success"}}, {"name": "Invalid Filter Input", "description": "Ensure that the system handles invalid filter inputs gracefully.", "input": {"filters": {"rating": "InvalidRating"}}, "expected": {"outcome": "No results found or error message is displayed.", "status": "Failed"}}]}, {"usecase": {"id": "by 2005091", "name": "Add to Cart", "scenario": "User adds a selected book to the shopping cart for future checkout.", "actors": "User", "preconditions": "User has found a book on Rokomari.com.", "steps": ["User selects a book and clicks on 'Add to Cart'.", "The system adds the book to the cart and confirms the addition."]}, "testcases": [{"name": "Valid Add to Cart", "description": "Verify that a book can be successfully added to the cart.", "input": {"bookID": "12345"}, "expected": {"outcome": "Book added to cart.", "status": "Success"}}, {"name": "Add Out of Stock Book", "description": "Verify the system's behavior when adding an out-of-stock book to the cart.", "input": {"bookID": "54321"}, "expected": {"outcome": "Out of stock message is displayed.", "status": "Failed"}}, {"name": "Add Multiple Copies", "description": "Ensure the system can handle adding multiple copies of the same book.", "input": {"bookID": "12345", "quantity": 5}, "expected": {"outcome": "Multiple copies added to cart.", "status": "Success"}}, {"name": "Add More Copies Than Available", "description": "Verify the system's behavior when trying to add more copies of a book than are available in stock.", "input": {"bookID": "12345", "quantity": 10}, "expected": {"outcome": "System adds only the available copies to the cart and displays a message indicating limited stock.", "status": "Partial Success"}}]}, {"usecase": {"id": "by 2005092", "name": "Complete Checkout and Payment", "scenario": "User checks out and completes payment.", "actors": "User", "preconditions": "User has books in the cart and proceeds to checkout.", "steps": ["User reviews the cart.", "User reviews account details and selects the delivery address", "User selects payment method.", "System processes payment and confirms order."]}, "testcases": [{"name": "Successful Payment", "description": "Verify payment completion with valid methods.", "input": {"paymentMethod": "Cash on Delivery", "amount": 348}, "expected": {"outcome": "Order placed. Order ID given 16193274886385.", "status": "Success"}}, {"name": "Payment Declined", "description": "Ensure proper handling of declined payment.", "input": {"paymentMethod": "bKash", "amount": 348, "Status": "Incorrect PIN entered"}, "expected": {"outcome": "Payment failed.", "status": "Failed"}}]}, {"usecase": {"id": "by 2005092", "name": "Track Order and Receive Notifications", "scenario": "User tracks the order and receives updates.", "actors": "User, System", "preconditions": "User has placed an order.", "steps": ["User checks 'My Orders'.", "User selects delivery status.", "User receives system notifications."]}, "testcases": [{"name": "Valid Order Tracking", "description": "Ensure users can track orders.", "input": {"orderID": "16193274886385"}, "expected": {"outcome": "Order status displayed.", "status": "Tracking Successful"}}, {"name": "Receive Notifications", "description": "Ensure notifications are shown correctly.", "input": {}, "expected": {"outcome": "Notifications displayed.", "status": "Success"}}]}, {"usecase": {"id": "by 2005093", "name": "Sign In/Sign Up", "scenario": "User  signs in or signs up using email/phone number or social media.", "actors": [{"role": "User ", "description": "The individual who wishes to access their account.", "goals": ["Access account features.", "Create a new account if not registered.", "Securely log out when finished."]}, {"role": "System", "description": "The application that authenticates the user and manages account creation.", "responsibilities": ["Verify user credentials.", "Send OTP for account creation.", "Grant access to authorized users.", "Maintain session security."]}, {"role": "Facebook", "description": "The social media platform that allows users to sign in with their Facebook account.", "responsibilities": ["Authenticate user credentials.", "Provide user data to the system."]}, {"role": "Google", "description": "The search engine platform that allows users to sign in with their Google account.", "responsibilities": ["Authenticate user credentials.", "Provide user data to the system."]}], "preconditions": ["User  has a compatible web browser or mobile app.", "User  has a valid Facebook or Google account (for social sign-in)."], "steps": ["User  clicks on 'Sign In' and is redirected to the Sign In/Sign Up page.", "User  selects either Google or Facebook login option or manual login.", "If manual login, then user enters their phone number or email.", "System checks if an account exists with the provided phone number or email.", "If no account exists, System sends an OTP to the corresponding number or email.", "User  enters the received OTP.", "If OTP is correct, System creates a new account and logs the user in automatically.", "If an account exists, user is prompted to enter their password.", "System verifies the password.", "If password is correct, System logs the user in automatically.", "User  can now access account features.", "User  clicks the 'Log Out' button.", "System logs the user out and redirects to the Sign In/Sign Up page.", "System invalidates the session to prevent unauthorized access."]}, "testcases": [{"name": "Valid Manual Login", "description": "Ensure users can log in with valid credentials.", "input": {"username": "2005093@gmail.com", "password": "password1234"}, "expected": {"outcome": "User  logged in successfully and redirected to the homepage", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Invalid Manual Login", "description": "Ensure users receive an error message when logging in with invalid credentials.", "input": {"username": "2005093@gmail.com", "password": "wrongpassword"}, "expected": {"outcome": "Login failed due to invalid credentials.", "status": "Failure", "errorMessage": "Invalid password."}, "postconditions": ["User  remains on the login page and can attempt to log in again.", "System does not establish a session."]}, {"name": "Facebook Log In", "description": "Ensure users can log in with their Facebook account.", "input": {"facebookToken": "facebook_token_1234"}, "expected": {"outcome": "User  logged in successfully with Facebook.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Google Log In", "description": "Ensure users can log in with their Google account.", "input": {"googleToken": "google_token_1234"}, "expected": {"outcome": "User  logged in successfully with Google.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is logged in and has access to account features.", "Session is established with a unique identifier."]}, {"name": "Concurrent Log In Attempt", "description": "Ensure the system handles concurrent log in attempts from the same user.", "input": {"username": "2005093@gmail.com", "password": "password1234", "concurrentAttempt": true}, "expected": {"outcome": "System accepts concurrent log in attempts.", "status": "Success", "errorMessage": null}, "postconditions": ["Existing session remains active."]}, {"name": "Idle Session Expiration", "description": "Ensure the system logs out users after a prolonged period of inactivity (e.g., a few days).", "input": {"username": "2005093@gmail.com", "password": "password1234", "idleTimeout": 3}, "expected": {"outcome": "User  is logged out due to prolonged inactivity.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is redirected to the login page and cannot access account features.", "Session is invalidated to prevent unauthorized access."]}, {"name": "Successful Log Out", "description": "Ensure users can log out successfully.", "input": {}, "expected": {"outcome": "User  logged out successfully.", "status": "Success", "errorMessage": null}, "postconditions": ["User  is redirected to the login page and cannot access account features.", "Session is invalidated to prevent unauthorized access."]}]}, {"usecase": {"id": "by 2005093", "name": "Apply Voucher or Promo Code", "scenario": "User  applies a voucher or promo code during checkout.", "actors": [{"role": "User ", "description": "The individual who wishes to apply a discount code."}, {"role": "System", "description": "The application that processes the discount code."}], "preconditions": ["User  has a valid account.", "User  has items in their cart.", "User  has a valid voucher or promo code."], "steps": ["User  enters the voucher or promo code during checkout.", "System checks if the code is valid.", "If the code is invalid, the system returns an error message.", "If the code is valid, the system checks if it is expired.", "If the code is expired, the system returns an error message.", "If the code is not expired, the system retrieves the discount percentage.", "System applies the discount to the original price.", "If multiple coupons are applied, system calculates the individual discounts.", "If total discounts exceed 100%, the purchase price is set to tk0 but shipping fees remain.", "If multiple invalid attempts are made, the system deducts all Rokomari Points from previous purchases."]}, "testcases": [{"name": "Invalid Discount Code", "description": "Ensure an error is returned for an invalid discount code.", "input": {"discountCode": "INVALID_CODE"}, "expected": {"outcome": "Error message returned: 'Invalid code.'", "status": "Failure"}}, {"name": "Expired Discount Code", "description": "Ensure an error is returned for an expired discount code.", "input": {"discountCode": "EXPIRED_CODE"}, "expected": {"outcome": "Error message returned: 'Code expire date over.'", "status": "Failure"}}, {"name": "Valid Discount Code", "description": "Ensure a valid discount code applies the correct discount.", "input": {"discountCode": "VALID_CODE", "originalPrice": 100.0, "discountPercentage": 20}, "expected": {"outcome": "Discount applied. New price is tk80.00.", "status": "Success"}}, {"name": "Multiple Valid Discount Codes", "description": "Ensure multiple valid discount codes apply correctly.", "input": {"discountCodes": ["VALID_CODE_1", "VALID_CODE_2"], "originalPrice": 150.0, "discountPercentages": [30, 20]}, "expected": {"outcome": "Total discount applied. New price is tk90.00.", "status": "Success"}}, {"name": "Total Discount Exceeds 100%", "description": "Ensure the purchase price is set to $0 when total discounts exceed 100%.", "input": {"discountCodes": ["VALID_CODE_1", "VALID_CODE_2"], "originalPrice": 50.0, "discountPercentages": [60, 50]}, "expected": {"outcome": "Total discount applied. Purchase price is tk0.00, but shipping fees apply.", "status": "Success"}}, {"name": "Multiple Invalid Attempts", "description": "Ensure penalty is applied after multiple invalid attempts.", "input": {"invalidAttempts": 5, "currentRewardPoints": 100}, "expected": {"outcome": "All reward points deducted. Current Rokomari Points are 0.", "status": "Success"}}]}, {"usecase": {"id": "by 2005099", "name": "Income by Affiliate Role", "scenario": "User recommends others any rokomari product and if anyone buys the product through the recommendation, the first user get a commission on the sale and later can withdraw the money following appropriate process.", "actors": "User, System, other user who buys the product", "preconditions": "User has an affiliate account and updated profile with compulsory information.", "steps": ["User takes any product link on rokomari.", "Generate recommendation link from the affiliate report page using the link copied before.", "Share the recommendation link.", "Someone buys the product from rokomari through the recommendation link.", "System adds the promised commossion money to the affiliate-account.", "Affiliate-user withdraws the money by the transaction method provided in profile."]}, "testcases": [{"name": "Successful Recommendation Link Generation", "description": "Verify that the user has updated all the compulsory profile information.", "input": {"productLink": "https://www.rokomari.com/electronics/98744/a4-tech-wired-optical-mouse-2x-click-usb-black-op-620d", "generateLinkButton": "ON"}, "expected": {"outcome": "Recommendation link generated. Share the link with others.", "status": "Success"}}]}, {"usecase": {"id": "by 2005099", "name": "Add to Wish List", "scenario": "User adds books/other items to a personal list for future order.", "actors": "User", "preconditions": "User is logged in successfully and has found a product.", "steps": ["User adds a product to their list.", "System confirms the addition."]}, "testcases": [{"name": "Add product to List", "description": "Ensure products can be added to the personal list.", "input": {"productID": "15342"}, "expected": {"outcome": "Book added to wishlist. You can visit your wishlist and check.", "status": "Success"}}]}, {"usecase": {"id": "by 2005100", "name": "Personalized Book Recommendations", "scenario": "System customizes the homepage with book recommendations based on user purchases, input genres, and past searches.", "actors": "User, System", "preconditions": "User has provided input genres, made searches, or has made purchases.", "steps": ["System prompts the user to select at least 3 genres.", "User selects genres and provides at least 5 books from those genres.", "System records the user's searches, input, and purchase history.", "System analyzes the combined data from purchases, genre input, and searches.", "System customizes the homepage with personalized recommendations based on the analysis."]}, "testcases": [{"name": "Personalized Homepage Recommendations Based on All Inputs", "description": "Ensure the system customizes the homepage based on user searches, input genres, and past purchases.", "input": {"userID": "U12345", "selectedGenres": ["Fiction", "Self-Help", "Science"], "selectedBooks": ["Amar Ache Jol", "You Can Win", "Rich Dad Poor Dad", "Cosmos", "Golpoguccho"], "pastPurchases": ["Fiction", "History"], "searchHistory": ["Science Fiction", "Biography"]}, "expected": {"outcome": "Homepage displays book recommendations relevant to the selected genres, books, searches, and past purchases.", "status": "Success"}}, {"name": "No Recommendations for New Users", "description": "Ensure that the system handles cases where no purchases, searches, or input genres exist.", "input": {"userID": "U67890", "selectedGenres": [], "selectedBooks": [], "pastPurchases": [], "searchHistory": []}, "expected": {"outcome": "System displays a message to prompt the user to select genres and books for personalized recommendations.", "status": "No Recommendations"}}, {"name": "Update Based on New User Preferences", "description": "Ensure that the homepage updates when the user selects new genres or books.", "input": {"userID": "U12345", "selectedGenres": ["Fantasy", "Mystery", "Romance"], "selectedBooks": ["The Complete Sherlock Holmes", "Na Hanyate", "Macbeth", "Harry Potter", "Arabian Nights"], "pastPurchases": ["Mystery"], "searchHistory": ["Romantic Novels"]}, "expected": {"outcome": "Homepage updates with new recommendations based on the updated genres and book selections along with past purchases and searches.", "status": "Success"}}]}, {"usecase": {"id": "by 2005100", "name": "Redeem and Apply Rokomari Reward Points", "scenario": "Users redeem points for discounts or offers and apply those offers during checkout.", "actors": "User, System", "preconditions": "User is logged in and has sufficient reward points for redemption. There are redeemable offers available.", "steps": ["User navigates to the 'Rokomari Points' section in their profile dashboard.", "System displays the user's available reward points balance and the list of redeemable offers.", "User selects an offer to redeem points (e.g., 40 TK discount for 400 points).", "System deducts the points from the user's balance and confirms the offer is successfully redeemed.", "The redeemed offer is stored in the user's account for future use.", "When the user checks out with items in the cart, the system applies the redeemed offer if the conditions are met (e.g., minimum order value).", "System updates the cart total, reflecting the redeemed offer (e.g., discount)."]}, "testcases": [{"name": "Successful Points Redemption", "description": "Ensure that the user can successfully redeem reward points for a discount offer.", "input": {"userID": "U12345", "availablePoints": 500, "offerSelected": {"offerID": "OFFER1", "pointsRequired": 400, "discount": "40 TK"}}, "expected": {"outcome": "The system deducts 400 points from the user's balance and applies the 40 TK discount during checkout.", "status": "Success"}}, {"name": "Insufficient Points for Redemption", "description": "Verify that the system prevents the user from redeeming points if they do not have enough points.", "input": {"userID": "U12345", "availablePoints": 100, "offerSelected": {"offerID": "OFFER1", "pointsRequired": 400}}, "expected": {"outcome": "The system displays an error message indicating insufficient points for redemption.", "status": "Failed"}}, {"name": "Apply Redeemed Offer During Checkout", "description": "Ensure that the redeemed offer is applied during the user's checkout process.", "input": {"userID": "U12345", "redeemedOffer": {"offerID": "OFFER1", "discount": "40 TK", "minimumOrderAmount": 200}, "cartTotal": 300}, "expected": {"outcome": "The system applies the 40 TK discount to the cart, reducing the total to 260 TK.", "status": "Success"}}, {"name": "Offer Not Applied If Minimum Order Not Met", "description": "Verify that the system does not apply the redeemed offer if the minimum order amount is not met.", "input": {"userID": "U12345", "redeemedOffer": {"offerID": "OFFER1", "discount": "40 TK", "minimumOrderAmount": 200}, "cartTotal": 150}, "expected": {"outcome": "The system does not apply the offer and displays a message indicating the minimum order amount is not met.", "status": "Failed"}}]}, {"usecase": {"id": "by 2005109", "name": "Register a New Account", "scenario": "User registers a new account on the platform.", "actors": "User,System", "preconditions": "User is not registered.", "steps": ["User selects registration method (email, phone number, Google, or Facebook).", "For phone number or email registration: User enters their phone number or email address.", "System sends an OTP (verification code) to the phone number.", "User enters the OTP.", "System verifies the code and completes the registration.", "For Google or Facebook: User logs in with their respective account.", "System retrieves user information and completes the registration."]}, "testcases": [{"name": "Successful Phone Registration", "description": "Ensure users can register using a phone number.", "input": {"phone": "+8801734567890"}, "expected": {"outcome": "Verification code sent to phone number. Account registered after code verification.", "status": "Success"}}, {"name": "Successful Email Registration", "description": "Ensure users can register using an email address.", "input": {"email": "noushinaoishy@gmail.com"}, "expected": {"outcome": "Verification code sent to email. Account registered after code verification.", "status": "Success"}}, {"name": "Successful Google Registration", "description": "Ensure users can register using a Google account.", "input": {"method": "Google"}, "expected": {"outcome": "User logged in with Google and account registered.", "status": "Success"}}, {"name": "Successful Facebook Registration", "description": "Ensure users can register using a Facebook account.", "input": {"method": "Facebook"}, "expected": {"outcome": "User logged in with Facebook and account registered.", "status": "Success"}}, {"name": "Email Already Registered", "description": "Ensure system does not allow account creation with an email that is already registered.", "input": {"email": "existinguser@example.com"}, "expected": {"outcome": "Error message displayed: 'Email already registered.'", "status": "Failure"}}, {"name": "Invalid Email Format", "description": "Ensure users cannot register with an invalid email format.", "input": {"email": "invalid-email-format"}, "expected": {"outcome": "Error message displayed: 'Invalid email format.'", "status": "Failure"}}, {"name": "Invalid Phone Number Format", "description": "Ensure users cannot register with an invalid phone number format.", "input": {"phone": "12345"}, "expected": {"outcome": "Error message displayed: 'Invalid phone number format.'", "status": "Failure"}}, {"name": "Incorrect Verification Code", "description": "Ensure users cannot complete registration with an incorrect email verification code.", "input": {"email": "noushinaoishy@gmail.com", "verificationCode": "wrongCode"}, "expected": {"outcome": "Error message displayed: 'Invalid verification code.'", "status": "Failure"}}, {"name": "Google Account Linking Error", "description": "Ensure system handles errors during Google account linking (e.g., failed login, denied permissions).", "input": {"method": "Google", "error": "Google login failed"}, "expected": {"outcome": "Error message displayed: 'Google login failed.'", "status": "Failure"}}, {"name": "Facebook Account Linking Error", "description": "Ensure system handles errors during Facebook account linking (e.g., failed login, denied permissions).", "input": {"method": "Facebook", "error": "Facebook login failed"}, "expected": {"outcome": "Error message displayed: 'Facebook login failed.'", "status": "Failure"}}]}, {"usecase": {"id": "by 2005109", "name": "Submit Review and Rating", "scenario": "User submits a review and rating for a book.", "actors": "User", "preconditions": "User may or may not have purchased the book.", "steps": ["User writes a review (at least 25 characters) and rates the book.", "User optionally uploads a photo with the review.", "If the user has purchased the book, the system marks the review as a 'Verified Purchase'.", "System confirms the submission."]}, "testcases": [{"name": "Submit Review with Verified Purchase and Optional Photo", "description": "Ensure reviews are posted with or without a photo when the user has purchased the book and the review meets the character limit.", "input": {"reviewText": "This book is amazing! The story and characters are fantastic.", "rating": 5, "purchaseStatus": "Verified", "photo": "book.jpg"}, "expected": {"outcome": "Review posted with 'Verified Purchase' label. Photo included if uploaded.", "status": "Success"}}, {"name": "Submit Review without Purchase and Optional Photo", "description": "Ensure reviews are posted with or without a photo even if the user has not purchased the book, as long as the review meets the character limit.", "input": {"reviewText": "The book has an interesting concept, but lacks depth in some areas.", "rating": 4, "purchaseStatus": "Not Verified", "photo": "book.jpg"}, "expected": {"outcome": "Review posted without 'Verified Purchase' label. Photo included if uploaded.", "status": "Success"}}, {"name": "Submit Review with Less than 25 Characters", "description": "Ensure system prevents reviews with less than 25 characters from being posted.", "input": {"reviewText": "Great book!", "rating": 5, "purchaseStatus": ["Verified", "Non Verified"]}, "expected": {"outcome": "Error message displayed: 'Review must be at least 25 characters long.'", "status": "Failure"}}]}, {"usecase": {"name": "Flight Search and Booking", "scenario": "A user searches for a flight between two destinations and proceeds to book the desired flight.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects flight search option.", "User inputs destination, travel dates, and number of passengers.", "User clicks 'Search' to view available flights.", "System displays available flights.", "User selects a flight and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes payment and confirms booking."]}, "testcases": [{"name": "Valid Flight Search", "description": "Verify that a user can successfully search for available flights between two valid destinations.", "input": {"departure": "Dhaka", "destination": "Bangkok", "date": "2024-12-10"}, "expected": {"outcome": "Available flights are shown.", "status": "Success"}}, {"name": "Invalid Destination Input", "description": "Verify that the system handles the case where the user inputs an invalid destination.", "input": {"departure": "Dhaka", "destination": "", "date": "2024-12-10"}, "expected": {"outcome": "Error message is displayed indicating invalid input.", "status": "Failure"}}, {"name": "Successful Flight Booking", "description": "Verify that a user can successfully book a flight after selecting it.", "input": {"selectedFlight": "Flight-XYZ123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Flight is booked successfully, and confirmation is sent.", "status": "Success"}}, {"name": "Failed Payment for Booking", "description": "Verify that the system handles failed payments during the booking process.", "input": {"selectedFlight": "Flight-XYZ123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, booking is not confirmed.", "status": "Failure"}}], "author": "2005094"}, {"usecase": {"name": "Hotel Search and Booking", "scenario": "A user searches for available hotels in a destination and proceeds to book a hotel.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects hotel search option.", "User inputs destination, travel dates, and number of rooms and guests.", "User clicks 'Search' to view available hotels.", "System displays available hotels.", "User selects a hotel and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes payment and confirms booking."]}, "testcases": [{"name": "Valid Hotel Search", "description": "Verify that a user can successfully search for available hotels in a valid destination.", "input": {"destination": "Cox's Bazar", "check_in_date": "2024-11-15", "check_out_date": "2024-11-20"}, "expected": {"outcome": "Available hotels are shown.", "status": "Success"}}, {"name": "Invalid Check-in Date", "description": "Verify that the system handles invalid check-in dates.", "input": {"destination": "Cox's Bazar", "check_in_date": "2023-01-15", "check_out_date": "2024-11-20"}, "expected": {"outcome": "Error message is displayed indicating invalid check-in date.", "status": "Failure"}}, {"name": "Successful Hotel Booking", "description": "Verify that a user can successfully book a hotel after selecting it.", "input": {"selectedHotel": "Hotel-ABC123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Hotel is booked successfully, and confirmation is sent.", "status": "Success"}}, {"name": "Hotel Booking Failed Payment", "description": "Verify that the system handles failed payments during the hotel booking process.", "input": {"selectedHotel": "Hotel-ABC123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, booking is not confirmed.", "status": "Failure"}}], "author": "2005107"}, {"usecase": {"name": "Cancel Flight Booking", "scenario": "A user cancels a booked flight.", "actors": "User, System", "preconditions": "User has booked a flight through the system.", "steps": ["User navigates to 'My Bookings' section.", "User selects the flight booking to cancel.", "User confirms the cancellation.", "System processes the cancellation and issues a refund."]}, "testcases": [{"name": "Valid Flight Cancellation", "description": "Verify that a user can successfully cancel a booked flight.", "input": {"bookingID": "XYZ123", "confirmation": true}, "expected": {"outcome": "Flight is canceled, refund is processed.", "status": "Success"}}, {"name": "Invalid Booking ID for Cancellation", "description": "Verify that the system handles invalid booking IDs during cancellation.", "input": {"bookingID": "Invalid123", "confirmation": true}, "expected": {"outcome": "Error message is displayed indicating invalid booking ID.", "status": "Failure"}}], "author": "2005116"}, {"usecase": {"name": "Apply Discount Code", "scenario": "A user applies a valid or invalid discount code during payment.", "actors": "User, System", "preconditions": "User has selected a flight or hotel and is at the payment stage.", "steps": ["User inputs discount code.", "System validates the discount code.", "System applies the discount if the code is valid."]}, "testcases": [{"name": "Valid Discount Code", "description": "Verify that a user can successfully apply a valid discount code.", "input": {"discountCode": "SAVE10"}, "expected": {"outcome": "Discount is applied successfully.", "status": "Success"}}, {"name": "Invalid Discount Code", "description": "Verify that the system handles invalid discount codes.", "input": {"discountCode": "INVALID50"}, "expected": {"outcome": "Error message is displayed indicating invalid discount code.", "status": "Failure"}}], "author": "2005116"}, {"usecase": {"name": "Rental Car Search and Booking", "scenario": "A user searches for rental cars at a destination and proceeds to book a car.", "actors": "User, System", "preconditions": "User has access to the internet and a valid payment method.", "steps": ["User selects the rental car search option.", "User inputs destination, pick-up/drop-off dates, and the type of car.", "User clicks 'Search' to view available rental cars.", "System displays available cars.", "User selects a car and proceeds to booking.", "User confirms the booking and provides payment details.", "System processes the payment and confirms the car rental booking."]}, "testcases": [{"name": "Valid Car Search", "description": "Verify that a user can successfully search for available rental cars in a valid destination.", "input": {"destination": "Dhaka", "pick_up_date": "2024-12-01", "drop_off_date": "2024-12-05"}, "expected": {"outcome": "Available rental cars are shown.", "status": "Success"}}, {"name": "Invalid Pick-up Date", "description": "Verify that the system handles invalid pick-up dates.", "input": {"destination": "Dhaka", "pick_up_date": "2022-01-01", "drop_off_date": "2024-12-05"}, "expected": {"outcome": "Error message indicating the invalid pick-up date is displayed.", "status": "Failure"}}, {"name": "Successful Car Booking", "description": "Verify that a user can successfully book a rental car after selecting it.", "input": {"selectedCar": "Car-XYZ123", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Car rental booking is confirmed, and confirmation is sent.", "status": "Success"}}, {"name": "Car Booking Failed Payment", "description": "Verify that the system handles failed payments during car booking.", "input": {"selectedCar": "Car-XYZ123", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, and booking is not confirmed.", "status": "Failure"}}], "author": "2005094"}, {"usecase": {"name": "Travel Insurance Purchase", "scenario": "A user opts to purchase travel insurance while booking a flight or hotel.", "actors": "User, System, Insurance Provider", "preconditions": "User is booking a flight or hotel and the system offers travel insurance.", "steps": ["User selects the option to add travel insurance during booking.", "System displays available insurance plans.", "User selects an insurance plan and confirms purchase.", "System processes the payment for the insurance.", "Insurance provider sends confirmation details.", "System sends insurance confirmation to the user."]}, "testcases": [{"name": "Valid Insurance Purchase", "description": "Verify that a user can successfully purchase travel insurance during flight or hotel booking.", "input": {"selectedInsurancePlan": "Plan A", "paymentDetails": "Valid Card"}, "expected": {"outcome": "Travel insurance is successfully purchased, and confirmation is sent.", "status": "Success"}}, {"name": "Failed Insurance Payment", "description": "Verify that the system handles failed payments for insurance.", "input": {"selectedInsurancePlan": "Plan A", "paymentDetails": "Invalid Card"}, "expected": {"outcome": "Payment failed, and insurance is not purchased.", "status": "Failure"}}, {"name": "Insurance Not Selected", "description": "Verify that the system handles the scenario where the user does not select travel insurance.", "input": {"selectedInsurancePlan": null}, "expected": {"outcome": "No travel insurance is added to the booking.", "status": "Success"}}, {"name": "Invalid Insurance Plan", "description": "Verify that the system handles invalid insurance plan selections.", "input": {"selectedInsurancePlan": "Invalid Plan"}, "expected": {"outcome": "Error message indicating the invalid insurance plan is displayed.", "status": "Failure"}}], "author": "2005107"}, {"usecase": {"name": "Joining the Young Pilot Program", "scenario": "A user applies for the Young Pilot Program on the GoZayaan website.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has access to the GoZayaan website.", "The user has the required information (e.g., name, age, email, academic details)."], "steps": ["User visits the GoZayaan website.", "The user clicks 'Join Young Pilot Program.'", "The system displays an application form.", "The user fills out the form with personal details.", "The user uploads necessary documents.", "The user reviews and submits the form.", "The system sends a confirmation message or email.", "GoZayaan reviews the application.", "If accepted, the user is notified with further steps."]}, "testcases": [{"name": "Successful Application Submission", "description": "Verify the user can submit the application successfully.", "input": {"form": "Filled with valid information", "documents": "Uploaded correctly"}, "expected": {"outcome": "Application submitted with success message and acknowledgment email."}}, {"name": "Form Validation - Missing Required Fields", "description": "Verify the system prompts the user to complete all required fields.", "input": {"form": "Incomplete (missing required fields)"}, "expected": {"outcome": "Error message displayed indicating missing fields."}}, {"name": "Invalid Input - Email Format", "description": "Ensure the system validates the email format.", "input": {"email": "Incorrect format (e.g., 'user@domain')"}, "expected": {"outcome": "Error message prompting for a valid email."}}, {"name": "Document Upload Validation", "description": "Verify the system allows only specific document formats.", "input": {"file": "Unsupported format (e.g., .exe)"}, "expected": {"outcome": "Error message indicating valid file formats."}}, {"name": "Maximum File Size for Upload", "description": "Verify the system enforces a file size limit.", "input": {"file": "Larger than allowed size"}, "expected": {"outcome": "Error message indicating the file size is too large."}}, {"name": "Acknowledgment Message", "description": "Verify the user receives an acknowledgment message after submission.", "input": {"form": "Successfully submitted"}, "expected": {"outcome": "Success message displayed and email sent."}}, {"name": "Application Status Check", "description": "Verify the user can check their application status.", "input": {"login": "User logs into their account"}, "expected": {"outcome": "Application status displayed (e.g., 'Under Review', 'Accepted', 'Rejected')."}}], "author": "2005108"}, {"usecase": {"name": "Viewing and Managing Booked Trips", "scenario": "A user views, modifies, or cancels their booked trips on GoZayaan.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has an account on the GoZayaan platform.", "The user has previously booked a flight, hotel, or tour."], "steps": ["User logs into their GoZayaan account.", "The user navigates to the 'My Trips' section.", "The system displays a list of previously booked trips.", "The user selects a trip to view more details.", "The system shows trip details with options to modify or cancel.", "The user may modify or cancel the trip if allowed."]}, "testcases": [{"name": "View Booked Trips", "description": "Verify the user can view all previously booked trips.", "input": {"login": "User logs into their account"}, "expected": {"outcome": "List of booked trips displayed with details."}}, {"name": "Modify a Booked Trip", "description": "Verify the user can modify a booked trip if allowed.", "input": {"tripSelection": "Eligible trip selected for modification"}, "expected": {"outcome": "Trip details updated with modifications."}}, {"name": "Cancel a Booked Trip", "description": "Verify the user can cancel a booked trip if allowed.", "input": {"tripSelection": "Eligible trip selected for cancellation"}, "expected": {"outcome": "Trip canceled and confirmation sent to the user."}}, {"name": "View Trip Details", "description": "Verify the user can view detailed information of a specific trip.", "input": {"tripSelection": "User selects a specific trip"}, "expected": {"outcome": "Detailed trip information displayed."}}], "author": "2005112"}, {"usecase": {"name": "Requesting a Customized Tour", "scenario": "A user requests a customized tour through the GoZayaan platform.", "actors": ["User", "GoZayaan System"], "preconditions": ["The user has an account on the GoZayaan platform and is logged in.", "The user has location, travel date, and contact information ready."], "steps": ["User navigates to the 'Customized Tour' section.", "The system displays a form for tour details.", "The user fills in location, date, and contact information.", "The user adds any additional requirements.", "The user submits the form.", "A GoZayaan travel expert reviews the request and contacts the user.", "The travel expert sends a customized plan to the user.", "The user reviews the plan and proceeds with booking."]}, "testcases": [{"name": "Successful Customized Tour Request", "description": "Verify the user can submit a tour request successfully.", "input": {"form": "Filled with valid details"}, "expected": {"outcome": "Request submitted and confirmation message displayed."}}, {"name": "Form Validation - Missing Required Fields", "description": "Verify the system shows an error for missing fields.", "input": {"form": "Missing required fields"}, "expected": {"outcome": "Error message indicating missing fields."}}, {"name": "Invalid Date Format", "description": "Verify the system validates date format.", "input": {"date": "Incorrect format"}, "expected": {"outcome": "Error message prompting for valid date."}}, {"name": "Invalid Contact Information", "description": "Verify the system validates contact information.", "input": {"contact": "Invalid phone number or email"}, "expected": {"outcome": "Error message indicating invalid contact information."}}, {"name": "Acknowledgment Message", "description": "Verify the system sends acknowledgment after submission.", "input": {"form": "Successfully submitted"}, "expected": {"outcome": "Confirmation message displayed, and user is informed that a travel expert will contact them."}}, {"name": "Additional Requirements Input", "description": "Verify the user can add extra requirements.", "input": {"form": "Filled with additional requirements"}, "expected": {"outcome": "System accepts input and displays confirmation."}}], "author": "2005108"}, {"usecase": {"name": "Requesting a Refund for a Canceled Booking", "scenario": "A user requests a refund for a canceled booking through the GoZayaan platform.", "actors": ["User", "GoZayaan System", "Payment Processor"], "preconditions": ["The user has an account on the GoZayaan platform.", "The user has canceled a booking eligible for a refund."], "steps": ["User logs into their GoZayaan account.", "The user navigates to the 'My Trips' section.", "The system displays eligible canceled trips.", "The user selects a trip and requests a refund.", "The system processes the request and informs the user of the status.", "The refund is processed through the payment processor and credited to the user's payment method."]}, "testcases": [{"name": "Successful Refund Request", "description": "Verify the user can request a refund successfully.", "input": {"tripStatus": "Canceled and eligible for a refund"}, "expected": {"outcome": "Refund request submitted, confirmation message displayed, and user notified."}}, {"name": "Refund Eligibility Check", "description": "Verify the system allows refunds only for eligible bookings.", "input": {"tripStatus": "Canceled but not eligible for a refund"}, "expected": {"outcome": "Error message indicating ineligibility for a refund."}}, {"name": "Refund Confirmation Message", "description": "Verify the user receives a confirmation message after requesting a refund.", "input": {"refundRequest": "Successfully submitted"}, "expected": {"outcome": "Confirmation message displayed and email sent to the user."}}, {"name": "Refund Processing Time", "description": "Verify the system informs the user about the expected refund processing time.", "input": {"refundRequest": "Submitted"}, "expected": {"outcome": "Estimated processing time displayed and email notification sent."}}], "author": "2005112"}, {"usecase": {"name": "User Registration", "scenario": "A user registers on eBay by providing personal information and agreeing to terms and conditions.", "actors": "User", "preconditions": "User has not previously registered on eBay.", "steps": ["User provides email, password, and other required details.", "User agrees to terms and conditions.", "User submits the registration form.", "System sends a confirmation email."], "author": "2005096"}, "testcases": [{"name": "Valid User Registration", "description": "Verify that a user can successfully register with valid information.", "input": {"email": "user@example.com", "password": "Password@123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration successful", "status": "Confirmation email sent"}}, {"name": "Invalid Email Format", "description": "Verify that the system prevents registration when the email is in invalid format", "input": {"email": "user@invalid", "password": "Password123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Invalid email format'"}}, {"name": "Weak Password", "description": "Verify that the system prevents registration with a weak password.", "input": {"email": "user@example.com", "password": "123", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Password is too weak'"}}, {"name": "Missing Mandatory Fields", "description": "Verify that the system prevents registration when required fields are missing.", "input": {"email": "user@example.com", "password": "", "personalInfo": {"name": "John Doe", "address": "123 Main St"}, "termsAccepted": true}, "expected": {"outcome": "Registration failed", "status": "Error message: 'Password is missing!'"}}]}, {"usecase": {"name": "User Login", "scenario": "A registered user logs in to their account using valid credentials.", "actors": "User", "preconditions": "User is already registered on eBay.", "steps": ["User provides email and password.", "User submits the login form.", "System validates the credentials.", "User is logged in and redirected to homepage."], "author": "2005096"}, "testcases": [{"name": "Valid Login", "description": "Verify that the user is logged in with valid credentials.", "input": {"email": "user@example.com", "password": "Password123"}, "expected": {"outcome": "Login successful!", "status": "Redirected to homepage"}}, {"name": "Invalid Password", "description": "Verify that the system prevents login with an incorrect password.", "input": {"email": "user@example.com", "password": "WrongPassword123"}, "expected": {"outcome": "Login failed", "status": "Error message: 'Password is incorrect'"}}, {"name": "Unregistered Email", "description": "Verify that the system prevents login if the email is unregistered", "input": {"email": "unregistered@example.com", "password": "Password123"}, "expected": {"outcome": "Login failed", "status": "Error message: 'Email not found'"}}]}, {"usecase": {"name": "Password Reset", "scenario": "A user resets their password after forgetting it.", "actors": "User", "preconditions": "User has an existing account and access to the registered email.", "steps": ["User clicks on 'Forgot Password'.", "User provides the registered email.", "System sends a password reset link to the user's email.", "User clicks the link and resets the password."], "author": "2005096"}, "testcases": [{"name": "Valid Password Reset", "description": "Verify that a user can reset their password successfully using a valid email.", "input": {"email": "john.doe@example.com", "newPassword": "NewPassword123"}, "expected": {"outcome": "Password reset successful.", "status": "Success"}}, {"name": "Invalid Email for Password Reset", "description": "Verify that the system does not send a reset link if the email is not registered.", "input": {"email": "unknown@example.com"}, "expected": {"outcome": "Reset failed. Email not registered.", "status": "Failed"}}]}, {"usecase": {"name": "Search for Items", "scenario": "User searches for items by entering keywords into the search bar.", "actors": "User", "preconditions": "User is on the eBay homepage or search page.", "steps": ["User enters keywords into the search bar.", "User submits the search query.", "System displays a list of matching items."], "author": "2005095"}, "testcases": [{"name": "Valid Search", "description": "Verify that the system returns relevant search results for valid keywords.", "input": {"searchQuery": "laptop"}, "expected": {"outcome": "Search results displayed", "status": "Items matching 'laptop' are shown"}}, {"name": "No Search Results", "description": "Verify that the system handles cases where no items match the search query.", "input": {"searchQuery": "rareitemxyz"}, "expected": {"outcome": "No results displayed", "status": "Message: 'No items found for rareitemxyz'"}}]}, {"usecase": {"name": "Purchase Item (Buy It Now)", "scenario": "User purchases an item using the 'Buy It Now' option.", "actors": "User", "preconditions": "User is logged in and viewing an item available for 'Buy It Now'.", "steps": ["User selects 'Buy It Now' option.", "User confirms the purchase.", "System processes the payment.", "Purchase is confirmed, and the item is marked as sold."], "author": "2005095"}, "testcases": [{"name": "Successful Purchase", "description": "Verify that the user can successfully purchase an item using 'Buy It Now'.", "input": {"itemID": "12345", "paymentMethod": "Credit Card", "buyItNowPrice": 150}, "expected": {"outcome": "Purchase successful", "status": "Item marked as sold"}}, {"name": "Insufficient Funds", "description": "Verify that the system handles cases where the user has insufficient funds for the purchase.", "input": {"itemID": "12345", "paymentMethod": "Credit Card", "buyItNowPrice": 150, "accountBalance": 100}, "expected": {"outcome": "Purchase failed", "status": "Error message: 'Insufficient funds'"}}]}, {"usecase": {"name": "Bid on an Auction", "scenario": "A user places a bid on an auction for a product. The bid must be higher than the current highest bid, and the auction should still be open.", "actors": "User, System", "preconditions": "The auction is active, and the user is logged in.", "steps": ["User views the product and the auction details", "User places a bid that is higher than the current highest bid", "System accepts the bid and updates the auction"], "author": "2005095"}, "testcases": [{"name": "Successful Bid", "description": "Verify that a user can successfully place a valid bid on an active auction.", "input": {"currentHighestBid": 50, "userBid": 60}, "expected": {"outcome": "Bid placed successfully", "auctionStatus": "Bid Accepted"}}, {"name": "Bid Lower than Current Highest Bid", "description": "Verify that the system rejects a bid that is lower than the current highest bid.", "input": {"currentHighestBid": 70, "userBid": 65}, "expected": {"outcome": "Bid rejected", "auctionStatus": "Bid Too Low"}}, {"name": "Auction Closed", "description": "Verify that the system rejects a bid placed on a closed auction.", "input": {"auctionStatus": "Closed", "userBid": 100}, "expected": {"outcome": "Bid rejected", "auctionStatus": "Auction Closed"}}]}, {"usecase": {"name": "Message Seller", "scenario": "A user sends a message to the seller regarding a product.", "actors": "User, Seller", "preconditions": "User is logged in and viewing a product page.", "steps": ["User clicks on 'Contact Seller'.", "User composes a message and sends it.", "System forwards the message to the seller."], "author": "2005113"}, "testcases": [{"name": "Valid Message to Seller", "description": "Verify that a user can successfully send a message to the seller.", "input": {"productID": "12345", "message": "Is this product available in blue?"}, "expected": {"outcome": "Message sent successfully.", "status": "Success"}}, {"name": "Empty Message", "description": "Verify that the system prevents sending an empty message to the seller.", "input": {"productID": "12345", "message": ""}, "expected": {"outcome": "Message sending failed. Empty message error displayed.", "status": "Failed"}}]}, {"usecase": {"name": "Adding to Cart", "scenario": "User adds a product to their shopping cart.", "actors": "User", "preconditions": "User is logged in and viewing a product page.", "steps": ["User selects a product and clicks 'Add to Cart'.", "System confirms the product is added to the cart."], "author": "2005113"}, "testcases": [{"name": "Add Valid Product to Cart", "description": "Verify that a user can add a valid product to their cart.", "input": {"productID": "12345"}, "expected": {"outcome": "Product added to cart.", "status": "Success"}}, {"name": "Add Out-of-Stock Product", "description": "Verify that the system prevents adding an out-of-stock product to the cart.", "input": {"productID": "54321"}, "expected": {"outcome": "Product not added. Out of stock message displayed.", "status": "Failed"}}]}, {"usecase": {"name": "Placing an Order", "scenario": "User completes the checkout process to place an order.", "actors": "User", "preconditions": "User has items in their cart and is logged in.", "steps": ["User reviews their cart.", "User proceeds to checkout.", "User enters payment details and shipping address.", "User confirms the order.", "System processes the order and displays an order confirmation."], "author": "2005113"}, "testcases": [{"name": "Successful Order Placement", "description": "Verify that the user can successfully place an order with valid payment and shipping details.", "input": {"cartItems": ["Product1", "Product2"], "paymentDetails": {"cardNumber": "4111111111111111", "expiry": "12/25", "CVV": "123"}, "shippingAddress": "123 Main St, City, Country"}, "expected": {"outcome": "Order placed successfully.", "status": "Confirmed"}}, {"name": "Failed Order Due to Invalid Payment", "description": "Verify that the order placement fails if the payment details are invalid.", "input": {"cartItems": ["Product1", "Product2"], "paymentDetails": {"cardNumber": "0000000000000000", "expiry": "12/25", "CVV": "123"}, "shippingAddress": "123 Main St, City, Country"}, "expected": {"outcome": "Order failed. Invalid payment details.", "status": "Failed"}}]}, {"usecase": {"name": "Track Order", "scenario": "User tracks the status of their order after purchase.", "actors": "User", "preconditions": "User has placed an order and is logged into their account.", "steps": ["User navigates to 'My Orders'.", "User selects the order to track.", "System displays the current tracking status."], "author": "2005111"}, "testcases": [{"name": "Valid Order Tracking", "description": "Verify that a user can successfully track the status of their order.", "input": {"orderID": "123ABC"}, "expected": {"outcome": "Tracking information displayed successfully.", "status": "Success"}}, {"name": "Invalid Order ID", "description": "Verify that the system handles an invalid order ID during tracking.", "input": {"orderID": "XYZ123"}, "expected": {"outcome": "Order not found. Tracking failed.", "status": "Failed"}}]}, {"usecase": {"name": "Leave feedback and rating", "scenario": "A user is giving review and rating of a product.", "actors": "User", "preconditions": "The user must buy the product.", "steps": ["User navigates to order history", "User selects the order to review", "User writes a review", "User gives a product rating", "User submits the review"], "author": "2005111"}, "testcases": [{"name": "Successful Review Submission", "description": "Verify that the user submitted product rating and the review textbox is not empty.", "input": {"orderId": "order123"}, "expected": {"outcome": "Review submitted successfully", "status": "Success"}}, {"name": "Empty review textbox", "description": "Verify that the system prevents submission of empty review textbox.", "input": {"orderId": "order456"}, "expected": {"outcome": "Review submission failed", "status": "Failed to post review"}}, {"name": "No rating selected", "description": "Verify that the system prevents submission of unselected rating stars.", "input": {"orderId": "order45645"}, "expected": {"outcome": "Rating submission null", "status": "Failed to select rating stars"}}]}, {"usecase": {"name": "Create a Listing", "scenario": "A user creates a new listing for a product to sell. The system processes the listing and makes it visible to potential buyers.", "actors": "User, System", "preconditions": "The user is logged in and eligible to create listings.", "steps": ["User navigates to 'Sell' and fills out the product details", "User submits the listing", "System processes the listing and publishes it"], "author": "2005111"}, "testcases": [{"name": "Successful Listing Creation", "description": "Verify that a user can successfully create a listing for a product.", "input": {"productName": "Vintage Watch", "productPrice": 250, "listingType": "Auction"}, "expected": {"outcome": "Listing created successfully", "listingStatus": "Published"}}, {"name": "Missing Product Details", "description": "Verify that the system rejects listing creation when required product details are missing.", "input": {"productName": "", "productPrice": null, "listingType": "Auction"}, "expected": {"outcome": "Listing creation failed", "listingStatus": "Rejected"}}]}, {"usecase": {"name": "Cancel a Bid", "scenario": "A user cancels their bid on an active auction before the auction ends. The system removes the bid and updates the auction.", "actors": "User, System", "preconditions": "The auction is still active, and the user is the current highest bidder.", "steps": ["User navigates to the auction page", "User cancels their bid", "System removes the bid and updates the auction"], "author": "2005114"}, "testcases": [{"name": "Successful Bid Cancellation", "description": "Verify that a user can successfully cancel their bid on an active auction.", "input": {"auctionStatus": "Active", "userIsHighestBidder": true}, "expected": {"outcome": "Bid cancelled successfully", "auctionStatus": "Updated"}}, {"name": "Bid Cancellation After Auction End", "description": "Verify that the system rejects bid cancellations after the auction has ended.", "input": {"auctionStatus": "Closed", "userIsHighestBidder": true}, "expected": {"outcome": "Bid cancellation failed", "auctionStatus": "Auction Closed"}}]}, {"usecase": {"name": "Add Item to Watchlist", "scenario": "A user adds an item to their watchlist to monitor it for future bidding or purchasing.", "actors": "User, System", "preconditions": "The user is logged in, and the item is available for purchase or bidding.", "steps": ["User navigates to the product page", "User clicks 'Add to Watchlist'", "System adds the item to the user's watchlist"], "author": "2005114"}, "testcases": [{"name": "Successfully Add Item to Watchlist", "description": "Verify that a user can add an available item to their watchlist.", "input": {"itemStatus": "Available", "userAction": "Add to Watchlist"}, "expected": {"outcome": "Item added to watchlist successfully", "watchlistStatus": "Item Added"}}, {"name": "Add Unavailable Item to Watchlist", "description": "Verify that the system prevents adding an unavailable item to the watchlist.", "input": {"itemStatus": "Unavailable", "userAction": "Add to Watchlist"}, "expected": {"outcome": "Failed to add item to watchlist", "watchlistStatus": "Item Unavailable"}}]}, {"usecase": {"name": "Update Payment Method", "scenario": "A user updates their default payment method for future purchases.", "actors": "User, System", "preconditions": "The user is logged in, and has an existing payment method linked to their account.", "steps": ["User navigates to their account settings", "User selects 'Update Payment Method'", "User enters new payment information", "System verifies and updates the payment method"], "author": "2005114"}, "testcases": [{"name": "Successfully Update Payment Method", "description": "Verify that a user can successfully update their payment method.", "input": {"existingPaymentMethod": "Visa", "newPaymentMethod": "MasterCard"}, "expected": {"outcome": "Payment method updated successfully", "paymentStatus": "Updated"}}, {"name": "Invalid Payment Information", "description": "Verify that the system rejects an invalid payment method during the update.", "input": {"existingPaymentMethod": "Visa", "newPaymentMethod": "Invalid Card"}, "expected": {"outcome": "Payment update failed", "paymentStatus": "Invalid Information"}}]}, {"usecase": {"name": "Apply a Coupon Code", "scenario": "A user applies a discount coupon code during checkout to receive a discount on their purchase.", "actors": "User, System", "preconditions": "The user is logged in, has items in their cart, and a valid coupon code.", "steps": ["User proceeds to checkout with items in their cart", "User enters the coupon code", "System validates the coupon and applies the discount"], "author": "2005119"}, "testcases": [{"name": "Successful Coupon Application", "description": "Verify that a valid coupon code can be applied, and the discount is reflected in the total amount.", "input": {"couponCode": "SAVE10", "cartTotal": 100}, "expected": {"outcome": "Coupon applied successfully", "discount": 10, "newTotal": 90}}, {"name": "Expired Coupon Code", "description": "Verify that the system rejects an expired coupon code and does not apply the discount.", "input": {"couponCode": "EXPIRED20", "cartTotal": 100}, "expected": {"outcome": "Coupon application failed", "discount": 0, "newTotal": 100}}]}, {"usecase": {"name": "Add Item to Wishlist", "scenario": "User adds a product to their wishlist for future reference.", "actors": "User", "preconditions": "User is logged in and viewing a product page.", "steps": ["User selects a product and clicks 'Add to Wishlist'.", "System confirms that the product is added to the wishlist."], "author": "2005119"}, "testcases": [{"name": "Valid Wishlist Addition", "description": "Verify that a user can successfully add a product to their wishlist.", "input": {"productID": "54321"}, "expected": {"outcome": "Product added to wishlist.", "status": "Success"}}, {"name": "Adding Out-of-Stock Product to Wishlist", "description": "Verify that the system allows adding an out-of-stock product to the wishlist.", "input": {"productID": "98765"}, "expected": {"outcome": "Product added to wishlist.", "status": "Success"}}]}, {"usecase": {"name": "Request Refund", "scenario": "A user requests a refund for an item they purchased, and the system processes the refund request.", "actors": "User, Seller, System", "preconditions": "The user has completed the purchase and the refund window is open.", "steps": ["User navigates to their order history", "User selects the item and clicks 'Request Refund'", "System processes the refund request"], "author": "2005119"}, "testcases": [{"name": "Successful Refund Request", "description": "Verify that a user can successfully request a refund for an eligible item.", "input": {"purchaseStatus": "Completed", "refundEligibility": true}, "expected": {"outcome": "Refund request submitted successfully", "refundStatus": "Pending"}}, {"name": "Refund Request Outside Window", "description": "Verify that the system prevents a refund request\n"}]}, {"usecase": {"name": "Create a Board", "scenario": "A user creates a new board to organize their tasks or projects.", "actors": "User", "preconditions": "User has a Trello account and is logged in.", "steps": ["User navigates to the dashboard", "User clicks on 'Create New Board'", "User enters the board name and optional settings like background or team visibility", "User clicks 'Create' to finalize the board creation"]}, "testcases": [{"name": "Valid Board Creation", "description": "Verify that a user can successfully create a new board with valid details.", "input": {"boardName": "Project X", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board created successfully", "status": "Active"}}, {"name": "Empty Board Name", "description": "Verify that the system handles the case where the user attempts to create a board without entering a name.", "input": {"boardName": "", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board creation failed", "status": "Error: Name required"}}, {"name": "Duplicate Board Name", "description": "Verify that the system allows the creation of a board with a name that already exists.", "input": {"boardName": "Project X", "background": "blue", "visibility": "private"}, "expected": {"outcome": "Board created successfully", "status": "Active"}}]}, {"usecase": {"name": "Add a New List", "scenario": "A user adds a new list to a board to organize tasks or items.", "actors": "User", "preconditions": "User has created or has access to a board.", "steps": ["User selects a board", "User clicks on 'Add a list' at the end of the lists on the board", "User enters a name for the new list", "User clicks 'Add List' to confirm"]}, "testcases": [{"name": "Valid List Addition", "description": "Verify that a user can successfully add a new list with a valid name.", "input": {"board": "Project X", "listName": "To Do"}, "expected": {"outcome": "List added successfully", "status": "Visible"}}, {"name": "Empty List Name", "description": "Verify that the system handles the case where the user attempts to add a list without providing a name.", "input": {"board": "Project X", "listName": ""}, "expected": {"outcome": "List addition failed", "status": "Error: Name required"}}, {"name": "Duplicate List Name", "description": "Verify that the system allows the addition of a list with a name that already exists on the board.", "input": {"board": "Project X", "listName": "To Do"}, "expected": {"outcome": "List added successfully", "status": "Visible"}}, {"name": "Exceed Maximum Open Lists", "description": "Verify that the system prevents adding a new list when the board already has 475 open lists.", "input": {"board": "Project X", "listName": "New List"}, "expected": {"outcome": "List addition failed", "status": "Error: Maximum number of open lists reached"}}, {"name": "Exceed Maximum Total Lists", "description": "Verify that the system prevents adding a new list when the board has 2850 total lists (including archived).", "input": {"board": "Project X", "listName": "New List"}, "expected": {"outcome": "List addition failed", "status": "Error: Maximum number of total lists reached"}}]}, {"usecase": {"name": "Add a Task (Card) to a List", "scenario": "A user adds a new task (card) to a specific list on a Trello board to organize tasks.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to an existing board with at least one list."], "steps": ["User navigates to a specific board.", "User selects a list where they want to add a task.", "User clicks on 'Add a card' at the bottom of the list.", "User enters the name of the task in the input field.", "User clicks 'Add Card' or presses Enter to finalize the task addition."]}, "testcases": [{"name": "Valid Task Addition", "description": "Verify that the user can successfully add a new task with valid details to a list.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "Task is added to the 'To Do' list.", "status": "Task added successfully."}}, {"name": "Empty Task Name", "description": "Verify that the system prevents adding a task without a name.", "input": {"board": "Project Board", "list": "To Do", "taskName": ""}, "expected": {"outcome": "The system shows an error or prevents the task from being added.", "status": "Task addition failed with a required field error."}}, {"name": "Duplicate Task Name in the Same List", "description": "Verify that the system allows adding tasks with duplicate names in the same list.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "The system allows the task with the same name to be added.", "status": "Task added successfully with duplicate name."}}, {"name": "Exceed Maximum Task Length", "description": "Verify that the system handles the case where the task name exceeds the maximum character limit.", "input": {"board": "Project Board", "list": "To Do", "taskName": "<string_exceeding_max_length>"}, "expected": {"outcome": "The system displays an error message indicating the task name is too long.", "status": "Task addition failed with a length error."}}, {"name": "Add Task to a Full List", "description": "Verify that the system prevents adding a task when the list has reached the maximum number of cards allowed.", "input": {"board": "Project Board", "list": "To Do", "taskName": "New Task"}, "expected": {"outcome": "The system shows an error message indicating the maximum number of tasks in the list has been reached.", "status": "Task addition failed with an error indicating list capacity is full."}}, {"name": "Task Addition Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to add a task without an active internet connection.", "input": {"board": "Project Board", "list": "To Do", "taskName": "Design mockups", "connection": "Offline"}, "expected": {"outcome": "The system shows an error indicating that an internet connection is required to add the task.", "status": "Task addition failed due to lack of internet connection."}}, {"name": "Task Addition with Special Characters", "description": "Verify that the system allows adding a task name with special characters, including emojis and symbols.", "input": {"board": "Project Board", "list": "To Do", "taskName": "\ud83d\udcbb Fix UI bugs #urgent"}, "expected": {"outcome": "The system successfully adds the task with special characters.", "status": "Task added successfully with special characters."}}]}, {"usecase": {"name": "Add Labels to a Card", "scenario": "User adds color-coded labels to categorize or prioritize cards.", "actors": "User", "preconditions": "User must be logged in and have access to a board with cards."}, "testcases": [{"name": "Add a label to a card successfully", "description": "Verify that a user can successfully add a label to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User logs in to Trello.", "User navigates to the desired board.", "User selects the card to add a label.", "User clicks on 'Labels' and selects 'Priority' label with 'Green' color.", "User applies the label."], "expected": {"outcome": "Label 'Priority' with color 'Green' is successfully added to the card.", "status": "done"}}, {"name": "Add multiple labels to a card", "description": "Verify that a user can successfully add multiple labels to a card.", "input": {"labels": [{"label_name": "Priority", "label_color": "Green"}, {"label_name": "Bug", "label_color": "Red"}]}, "steps": ["User logs in to Trello.", "User selects the card to add labels.", "User clicks on 'Labels' and selects both 'Priority' and 'Bug' labels.", "User applies both labels."], "expected": {"outcome": "Labels 'Priority' and 'Bug' are added to the card.", "status": "done"}}, {"name": "Attempt to add a label without selecting a label", "description": "Verify that an error message is displayed when attempting to add a label without selecting one.", "input": {}, "steps": ["User selects the card to add a label.", "User clicks on 'Labels' but does not select a label.", "User attempts to apply a label without choosing any."], "expected": {"outcome": "Error message: 'Please select a label before applying.'", "status": "failed"}}, {"name": "Attempt to add a label to a non-existent card", "description": "Verify that an error message is displayed when attempting to add a label to a non-existent card.", "input": {"card_id": "invalid_card_id"}, "steps": ["User attempts to add a label to a card that does not exist."], "expected": {"outcome": "Error message: 'Card not found.'", "status": "failed"}}, {"name": "Add an empty label to a card", "description": "Verify that an error message is displayed when attempting to create a label without a name or color.", "input": {"label_name": "", "label_color": ""}, "steps": ["User selects a card.", "User clicks on 'Labels' and tries to apply a label without entering a name or selecting a color."], "expected": {"outcome": "Error message: 'Label name and color are required.'", "status": "failed"}}, {"name": "Add a label to a card as a non-logged-in user", "description": "Verify that a user cannot add labels to a card without being logged in.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["Non-logged-in user attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Please log in to perform this action.'", "status": "failed"}}, {"name": "Add a label to a card without sufficient permissions", "description": "Verify that a user with view-only access cannot add labels to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User with view-only access attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Insufficient permissions to add labels.'", "status": "failed"}}, {"name": "Add a duplicate label to a card", "description": "Verify that an error message is displayed when attempting to add a duplicate label to a card.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User selects the card and tries to add the same label twice."], "expected": {"outcome": "Error message: 'Label already applied to this card.'", "status": "failed"}}, {"name": "Add a label to a card while network is disconnected", "description": "Verify that an error message is displayed when attempting to add a label without an internet connection.", "input": {"label_name": "Priority", "label_color": "Green"}, "steps": ["User disconnects from the internet and attempts to add a label to a card."], "expected": {"outcome": "Error message: 'Network error. Please check your connection.'", "status": "failed"}}, {"name": "Remove a label from a card", "description": "Verify that a user can successfully remove a label from a card.", "input": {"label_name": "Priority"}, "steps": ["User selects a card with the 'Priority' label applied.", "User clicks on 'Labels' and removes the 'Priority' label."], "expected": {"outcome": "'Priority' label is successfully removed from the card.", "status": "done"}}]}, {"usecase": {"name": "Add a Comment to a Card", "scenario": "A user adds a comment to a card to provide feedback.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a card."], "steps": ["User navigates to the specific card.", "User clicks on the comment section.", "User types the comment.", "User clicks 'Add Comment.'"]}, "testcases": [{"name": "Valid Comment Addition", "description": "Verify that the user can successfully add a comment to a card.", "input": {"card": "Design Mockup", "comment": "Looks great! Please make the text larger."}, "expected": {"outcome": "Comment is added and visible on the card.", "status": "Comment added successfully."}}, {"name": "Empty Comment Submission", "description": "Verify that the system shows an error when trying to submit an empty comment.", "input": {"card": "Design Mockup", "comment": ""}, "expected": {"outcome": "System displays error: 'Comment cannot be empty.'", "status": "Comment submission failed."}}, {"name": "Edit a Comment", "description": "Verify that the user can edit an existing comment.", "input": {"card": "Design Mockup", "originalComment": "Looks great!", "editedComment": "Looks great! Please make the text larger."}, "expected": {"outcome": "Comment is updated with the new text.", "status": "Comment edited successfully."}}, {"name": "Delete a Comment", "description": "Verify that the user can delete a comment from a card.", "input": {"card": "Design Mockup", "comment": "Looks great!"}, "expected": {"outcome": "Comment is removed from the card.", "status": "Comment deleted successfully."}}]}, {"usecase": {"name": "Attach a File to a Task", "scenario": "A user attaches a file to a specific task (card) to provide additional resources or context.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card).", "The file is accessible on the user's device."], "steps": ["User navigates to a specific board.", "User selects a task (card) from a list.", "User clicks on 'Attach' or 'Upload File' in the task's details.", "User selects a file from their device and clicks 'Open' to upload.", "User confirms the upload and the file is attached to the task."]}, "testcases": [{"name": "Valid File Attachment", "description": "Verify that the user can successfully attach a file to a task.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf"}, "expected": {"outcome": "File 'requirements.pdf' is successfully attached to the task.", "status": "File attached successfully."}}, {"name": "Attach File with Unsupported Format", "description": "Verify that the system prevents attaching a file with an unsupported format.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "malicious.exe"}, "expected": {"outcome": "System displays error: 'Unsupported file format.'", "status": "File attachment failed."}}, {"name": "Attach File with Large Size", "description": "Verify that the system prevents attaching a file that exceeds the maximum size limit.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "large_video.mp4"}, "expected": {"outcome": "System displays error: 'File size exceeds the maximum limit.'", "status": "File attachment failed."}}, {"name": "Remove Attached File", "description": "Verify that the user can remove an attached file from a task.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf"}, "expected": {"outcome": "File 'requirements.pdf' is successfully removed from the task.", "status": "File removed successfully."}}, {"name": "Attach File Without Internet Connection", "description": "Verify that the system handles cases where the user attempts to attach a file while offline.", "input": {"board": "Development Board", "taskName": "Update Documentation", "file": "requirements.pdf", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "File attachment failed."}}]}, {"usecase": {"name": "Set Due Date for a Task", "scenario": "A user sets a due date for a task (card) to track deadlines.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card)."], "steps": ["User navigates to a specific board.", "User selects a task (card) from a list.", "User clicks on 'Due Date' in the task's details.", "User selects a date and time from the calendar.", "User clicks 'Save' to apply the due date."]}, "testcases": [{"name": "Valid Due Date Assignment", "description": "Verify that the user can successfully assign a valid due date to a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2024-10-01"}, "expected": {"outcome": "Due date '2024-10-01' is successfully assigned to the task.", "status": "Due date set successfully."}}, {"name": "Set Past Due Date", "description": "Verify that the system prevents setting a past due date for a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2023-09-01"}, "expected": {"outcome": "System displays error: 'Cannot set a due date in the past.'", "status": "Due date setting failed."}}, {"name": "Set Due Date Without Selecting a Date", "description": "Verify that the system handles cases where the user tries to set a due date without selecting a date.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation"}, "expected": {"outcome": "System displays error: 'Please select a due date.'", "status": "Due date setting failed."}}, {"name": "Change Due Date", "description": "Verify that the user can change an existing due date for a task.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "newDueDate": "2024-10-05"}, "expected": {"outcome": "Due date is successfully changed to '2024-10-05'.", "status": "Due date updated successfully."}}, {"name": "Set Due Date Without Internet Connection", "description": "Verify that the system handles cases where the user attempts to set a due date while offline.", "input": {"board": "Marketing Board", "taskName": "Prepare Presentation", "dueDate": "2024-10-01", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Due date setting failed."}}]}, {"usecase": {"name": "Search for a Card", "scenario": "User searches for a specific card within a board by entering keywords in the search bar.", "actors": "User", "preconditions": "User must be logged in and have access to a board with existing cards."}, "testcases": [{"name": "Search for an existing card by exact title", "description": "Verify that a user can successfully search for a card by its exact title.", "input": {"search_query": "Fix bug in login system"}, "steps": ["User logs in to Trello.", "User navigates to the board.", "User enters 'Fix bug in login system' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Card with the title 'Fix bug in login system' is displayed.", "status": "done"}}, {"name": "Search for a card using a partial keyword", "description": "Verify that a user can successfully search for a card using a partial keyword.", "input": {"search_query": "bug"}, "steps": ["User enters 'bug' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "All cards containing the keyword 'bug' are displayed.", "status": "done"}}, {"name": "Search for a card using a keyword that does not exist", "description": "Verify that a 'No results' message is displayed when searching for a non-existent card.", "input": {"search_query": "nonexistent keyword"}, "steps": ["User enters 'nonexistent keyword' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed.", "status": "done"}}, {"name": "Search for a card in an empty board", "description": "Verify that a 'No results' message is displayed when searching in an empty board.", "input": {"search_query": "Any search term"}, "steps": ["User enters any search term in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed.", "status": "done"}}, {"name": "Search for a card using special characters", "description": "Verify that the system handles searches with special characters properly.", "input": {"search_query": "@#$%"}, "steps": ["User enters special characters '@#$%' in the search bar.", "User presses 'Search'."], "expected": {"outcome": "Message 'No results found' is displayed if no card contains special characters.", "status": "done"}}, {"name": "Search for a card with an empty search query", "description": "Verify that an error message is displayed when searching with an empty query.", "input": {"search_query": ""}, "steps": ["User leaves the search bar empty.", "User presses 'Search'."], "expected": {"outcome": "Message 'Please enter a search term' is displayed.", "status": "failed"}}, {"name": "Search for a card with a long search query", "description": "Verify that an error message is displayed when entering a search query longer than allowed.", "input": {"search_query": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}, "steps": ["User enters a very long search query.", "User presses 'Search'."], "expected": {"outcome": "Message 'Search term too long' is displayed.", "status": "failed"}}, {"name": "Search for a card while not logged in", "description": "Verify that an error message is displayed when attempting to search without logging in.", "input": {"search_query": "Fix bug in login system"}, "steps": ["Non-logged-in user attempts to search for a card using 'Fix bug in login system' as the query."], "expected": {"outcome": "Error message 'Please log in to perform this action' is displayed.", "status": "failed"}}, {"name": "Search for a card with network issues", "description": "Verify that an error message is displayed when searching while disconnected from the internet.", "input": {"search_query": "Fix bug in login system"}, "steps": ["User disconnects from the internet.", "User attempts to search for a card using 'Fix bug in login system' as the query."], "expected": {"outcome": "Error message 'Network error. Please check your connection' is displayed.", "status": "failed"}}]}, {"usecase": {"name": "Move a Task (Card) from One List to Another", "scenario": "A user moves a task (card) from one list to another to update the task's status or progress.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least two lists and one task."], "steps": ["User navigates to a specific board.", "User selects the task (card) they want to move.", "User clicks on the 'Move' option from the task's options menu.", "User selects the target list from the dropdown menu.", "User clicks 'Move' to confirm the action."]}, "testcases": [{"name": "Valid Task Movement", "description": "Verify that the user can successfully move a task from one list to another.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Design mockups"}, "expected": {"outcome": "The task 'Design mockups' is moved from 'To Do' to 'In Progress'.", "status": "Task moved successfully."}}, {"name": "Move Task to Same List", "description": "Verify that the system handles the case where the user attempts to move a task to the same list.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "To Do", "taskName": "Design mockups"}, "expected": {"outcome": "The system allows the task to stay in the same list without any issues.", "status": "Task remains in the same list."}}, {"name": "Move Nonexistent Task", "description": "Verify that the system handles the case where the user attempts to move a task that no longer exists.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Nonexistent Task"}, "expected": {"outcome": "The system shows an error message indicating that the task no longer exists.", "status": "Task move failed with an error."}}, {"name": "Move Task to a Full List", "description": "Verify that the system prevents moving a task to a list that has reached its maximum capacity for tasks.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "Completed", "taskName": "Design mockups"}, "expected": {"outcome": "The system shows an error message indicating that the target list is full.", "status": "Task move failed due to list capacity."}}, {"name": "Move Task Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to move a task without an active internet connection.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "In Progress", "taskName": "Design mockups", "connection": "Offline"}, "expected": {"outcome": "The system shows an error message indicating that an internet connection is required to move the task.", "status": "Task move failed due to lack of internet connection."}}, {"name": "Move Task to a List with Special Characters in Name", "description": "Verify that the system allows moving a task to a list that contains special characters in its name.", "input": {"board": "Project Board", "sourceList": "To Do", "targetList": "\ud83d\udca1 Ideas", "taskName": "Design mockups"}, "expected": {"outcome": "The system successfully moves the task to the list with special characters in its name.", "status": "Task moved successfully."}}]}, {"usecase": {"name": "Invite Team Members to a Board", "scenario": "A user invites team members to collaborate on a project board.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board they want to share."], "steps": ["User navigates to the specific board.", "User clicks on the 'Invite' button.", "User enters the email addresses of team members.", "User clicks 'Send Invitation.'"]}, "testcases": [{"name": "Valid Team Member Invitation", "description": "Verify that the user can successfully invite valid email addresses.", "input": {"board": "Project Board", "emails": ["team_member1@example.com", "team_member2@example.com"]}, "expected": {"outcome": "Invitations are sent successfully.", "status": "Invitations sent."}}, {"name": "Invite Team Member with Invalid Email", "description": "Verify that the system shows an error when trying to invite an invalid email address.", "input": {"board": "Project Board", "emails": ["invalid-email"]}, "expected": {"outcome": "System displays error: 'Invalid email address.'", "status": "Invitation failed."}}, {"name": "Invite Team Member Without Email", "description": "Verify that the system shows an error when trying to invite without an email.", "input": {"board": "Project Board", "emails": [""]}, "expected": {"outcome": "System displays error: 'Please enter an email address.'", "status": "Invitation failed."}}]}, {"usecase": {"name": "Assign a Task to a User", "scenario": "A user assigns a task (card) to a specific team member to ensure accountability.", "actors": "User, Team Member", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one task (card).", "Team members are added to the board."], "steps": ["User navigates to a specific board.", "User selects the task (card) they want to assign.", "User clicks on 'Members' in the task's details.", "User selects the team member to assign the task to.", "User clicks 'Save' or 'Close' to finalize the assignment."]}, "testcases": [{"name": "Valid Task Assignment", "description": "Verify that the user can successfully assign a task to a valid team member.", "input": {"board": "Development Board", "taskName": "Complete API documentation", "member": "John Doe"}, "expected": {"outcome": "Task is assigned to John Doe.", "status": "Assignment successful."}}, {"name": "Assign Task to Multiple Users", "description": "Verify that the user can assign a task to multiple users simultaneously.", "input": {"board": "Development Board", "taskName": "Design Landing Page", "members": ["John Doe", "Jane Smith"]}, "expected": {"outcome": "Task is assigned to both John Doe and Jane Smith.", "status": "Assignment successful."}}, {"name": "Assign Task Without Selecting a Member", "description": "Verify that the system shows an error when attempting to assign a task without selecting a team member.", "input": {"board": "Development Board", "taskName": "Fix Bugs"}, "expected": {"outcome": "System displays error: 'Please select a member to assign the task.'", "status": "Assignment failed."}}, {"name": "Assign Task to Nonexistent Member", "description": "Verify that the system prevents assigning a task to a nonexistent or removed team member.", "input": {"board": "Development Board", "taskName": "Update UI", "member": "Invalid User"}, "expected": {"outcome": "System displays error: 'Member not found.'", "status": "Assignment failed."}}, {"name": "Assign Task Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to assign a task without an active internet connection.", "input": {"board": "Development Board", "taskName": "Optimize Database", "member": "John Doe", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Assignment failed."}}]}, {"usecase": {"name": "Receive Notifications for Card Updates", "scenario": "A user receives notifications for updates made to cards they are watching.", "actors": "User", "preconditions": ["User is logged into Trello.", "User is watching a card."], "steps": ["User navigates to the specific card.", "User clicks on the 'Watch' button to start watching the card.", "Another user makes an update to the card.", "User receives a notification for the update."]}, "testcases": [{"name": "Notification for Card Update", "description": "Verify that the user receives a notification when the card they are watching is updated.", "input": {"card": "Design Mockup", "update": "Change due date"}, "expected": {"outcome": "User receives notification: 'Design Mockup has been updated.'", "status": "Notification received."}}, {"name": "No Notification for Unwatched Card", "description": "Verify that the user does not receive notifications for cards they are not watching.", "input": {"card": "To Do", "update": "Change status to 'In Progress'"}, "expected": {"outcome": "No notification is sent to the user.", "status": "No notification received."}}]}, {"usecase": {"name": "Create a Rule in a List", "scenario": "A user creates a rule that automatically moves tasks between lists based on specific conditions.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one list and tasks (cards)."], "steps": ["User navigates to a specific board.", "User selects the list where the rule will be applied.", "User clicks on 'Rules' or 'Automations' in the list's options.", "User selects 'Create a Rule'.", "User defines the trigger (e.g., due date approaching, label added).", "User specifies the action (e.g., move card to another list).", "User saves the rule."]}, "testcases": [{"name": "Valid Rule Creation", "description": "Verify that the user can successfully create a valid rule.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day", "action": "Move to 'In Progress'"}, "expected": {"outcome": "Rule is created and will move tasks from 'To Do' to 'In Progress' when the due date is in 1 day.", "status": "Rule creation successful."}}, {"name": "Create Rule Without Trigger", "description": "Verify that the system shows an error when trying to create a rule without a trigger.", "input": {"board": "Marketing Board", "list": "To Do", "action": "Move to 'In Progress'"}, "expected": {"outcome": "System displays error: 'Please specify a trigger for the rule.'", "status": "Rule creation failed."}}, {"name": "Create Rule Without Action", "description": "Verify that the system shows an error when trying to create a rule without an action.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day"}, "expected": {"outcome": "System displays error: 'Please specify an action for the rule.'", "status": "Rule creation failed."}}, {"name": "Create Rule with Invalid Trigger", "description": "Verify that the system prevents creating a rule with an invalid trigger.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Invalid Trigger", "action": "Move to 'In Progress'"}, "expected": {"outcome": "System displays error: 'Invalid trigger specified.'", "status": "Rule creation failed."}}, {"name": "Create Rule Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to create a rule without an active internet connection.", "input": {"board": "Marketing Board", "list": "To Do", "trigger": "Due date in 1 day", "action": "Move to 'In Progress'", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Rule creation failed."}}]}, {"usecase": {"name": "Archive a List", "scenario": "A user archives a list to remove it from the board without deleting its contents.", "actors": "User", "preconditions": ["User is logged into Trello.", "User has access to a board with at least one list containing tasks (cards)."], "steps": ["User navigates to a specific board.", "User selects the list they want to archive.", "User clicks on the 'More' button (three dots) next to the list's name.", "User selects 'Archive this List' from the dropdown menu.", "User confirms the action when prompted."]}, "testcases": [{"name": "Valid List Archiving", "description": "Verify that the user can successfully archive a list.", "input": {"board": "Project Board", "list": "Completed Tasks"}, "expected": {"outcome": "List 'Completed Tasks' is successfully archived and no longer visible on the board.", "status": "Archiving successful."}}, {"name": "Archive Already Archived List", "description": "Verify that the system handles an attempt to archive a list that is already archived.", "input": {"board": "Project Board", "list": "Archived List"}, "expected": {"outcome": "System displays error: 'List is already archived.'", "status": "Archiving failed."}}, {"name": "Archive List Without Confirmation", "description": "Verify that the system shows an error when the user tries to archive a list without confirming.", "input": {"board": "Project Board", "list": "To Do", "confirm": false}, "expected": {"outcome": "System displays message: 'Archiving canceled.'", "status": "Archiving action aborted."}}, {"name": "Archive List Without Internet Connection", "description": "Verify that the system handles a scenario where the user tries to archive a list without an active internet connection.", "input": {"board": "Project Board", "list": "Ongoing Tasks", "connection": "Offline"}, "expected": {"outcome": "System displays error: 'Network error. Please check your connection.'", "status": "Archiving failed."}}, {"name": "Archive List with Active Cards", "description": "Verify that the system allows archiving a list even if it contains active cards.", "input": {"board": "Project Board", "list": "In Progress"}, "expected": {"outcome": "List 'In Progress' is successfully archived with all cards retained in the archive.", "status": "Archiving successful."}}]}, {"usecase": {"name": "Account Registration", "author": 2005103, "scenario": "A user registers for an account on the platform with their mobile number, receives an OTP code for verification, fills in personal details like name, gender, HSC year, and sets a password.", "actors": "User", "preconditions": "User must have a valid mobile number", "steps": ["User enters their mobile number", "System sends OTP code to the user's mobile", "User enters the OTP code for verification", "User fills in personal profile details (name, gender, HSC year)", "User sets a password to complete registration"]}, "testcases": [{"name": "Valid Registration", "description": "Verify that a user can successfully register with valid details.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "ValidPassword123"}, "expected": {"outcome": "Registration successful", "status": "Registered"}}, {"name": "Invalid OTP", "description": "Verify that registration fails when an incorrect OTP is provided.", "input": {"mobileNumber": "01712345678", "otpCode": "654321", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "ValidPassword123"}, "expected": {"outcome": "Registration failed", "status": "OTP Invalid"}}, {"name": "Empty Personal Details", "description": "Verify that registration fails when personal details are not provided.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "", "gender": "", "hscYear": "", "password": "ValidPassword123"}, "expected": {"outcome": "Registration failed", "status": "Incomplete Profile"}}, {"name": "Weak Password", "description": "Verify that registration fails when a weak password is provided.", "input": {"mobileNumber": "01712345678", "otpCode": "123456", "name": "John Doe", "gender": "Male", "hscYear": "2023", "password": "123"}, "expected": {"outcome": "Registration failed", "status": "Weak Password"}}]}, {"usecase": {"name": "Course Enrollment", "author": 2005103, "scenario": "A user enrolls in a course by selecting a course from the available options, applying a promo code (if any), agreeing to terms and conditions, and paying via an online payment gateway.", "actors": "User", "preconditions": "User must have an account and be logged in", "steps": ["User navigates to the course page", "User checks available ongoing and future programs", "User selects a course to enroll in", "User applies a promo code (optional)", "User agrees to terms and conditions", "User selects a payment method and proceeds to payment"]}, "testcases": [{"name": "Valid Course Enrollment with Promo Code", "description": "Verify that a user can successfully enroll in a course with a valid promo code.", "input": {"selectedCourse": "Math101", "promoCode": "PROMO50", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 100}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Valid Course Enrollment without Promo Code", "description": "Verify that a user can successfully enroll in a course without applying a promo code.", "input": {"selectedCourse": "English202", "promoCode": "", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 200}, "expected": {"outcome": "Enrollment successful", "status": "Enrolled"}}, {"name": "Enrollment without Agreeing to Terms", "description": "Verify that the system prevents enrollment if the user does not agree to the terms and conditions.", "input": {"selectedCourse": "History150", "promoCode": "", "termsAgreed": false, "paymentMethod": "Online Payment Gateway", "paymentAmount": 150}, "expected": {"outcome": "Enrollment failed", "status": "Terms not agreed"}}, {"name": "Invalid Promo Code", "description": "Verify that the system handles invalid promo codes properly during course enrollment.", "input": {"selectedCourse": "Physics301", "promoCode": "INVALIDPROMO", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 250}, "expected": {"outcome": "Promo code invalid", "status": "Promo Rejected"}}, {"name": "Enrollment with Failed Payment", "description": "Verify that the system handles payment failure and prevents enrollment in a course.", "input": {"selectedCourse": "Chemistry201", "promoCode": "", "termsAgreed": true, "paymentMethod": "Online Payment Gateway", "paymentAmount": 300, "paymentStatus": "Failed"}, "expected": {"outcome": "Enrollment failed", "status": "Payment Failed"}}]}, {"usecase": {"name": "Taking a Chapter Quiz", "author": 2005110, "scenario": "A user wants to take a practice MCQ quiz for a specific chapter and report any question if necessary.", "actors": "Student", "preconditions": "The student must be logged in and enrolled in the course. The quiz must be available for the selected chapter.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Practice MCQ' from the dashboard.", "System navigates to a new page displaying the rules for taking the quiz.", "Student clicks on the 'Start Test' button.", "System navigates to the first question page.", "Student answers the first question and clicks 'Go Ahead'.", "System navigates to the next question.", "Student repeats this process until all questions are answered.", "On the last question page, the student clicks 'Submit'.", "System navigates to a new page displaying the student's score, the time taken, and two buttons: 'See the Solve' and 'Give the Test Again'.", "If the student clicks 'Give the Test Again', they are taken back to the start page of the test.", "If the student clicks 'See the Solve', they are shown the solutions for each question one by one.", "While viewing the solution for each question, the student has the option to click a 'Report' button for any problematic question.", "When the student clicks 'Report', the system navigates to a new page displaying options for reporting the question (e.g., 'Incorrect Answer', 'Question Unclear', etc.).", "Student selects a reason for reporting the question and clicks 'Submit'.", "The system submits the report and returns the student to the solution page."]}, "testcases": [{"name": "Successful Quiz Completion", "description": "Verify that a student successfully take a quiz homework", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "The student successfully completes the quiz, views the score, and can access the options to retake the quiz or view the solutions.", "status": "Quiz Completed"}}, {"name": "Retaking the Quiz", "description": "Verify that a student retakes a quiz", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "After completing the quiz, the student clicks 'Give the Test Again' and is redirected to the start page to retake the quiz.", "status": "Retake Test Initiated"}}, {"name": "Viewing Solutions", "description": "Verify that a student successfully see all the solutions of the quiz", "input": {"userId": "stu_12345", "chapterId": "Chapter1"}, "expected": {"outcome": "After completing the quiz, the student clicks 'See the Solve' and is shown the solutions to each question one by one.", "status": "Viewing Solutions"}}, {"name": "Reporting a Question", "description": "Verify that a student successfully submit a report about a question", "input": {"userId": "stu_12345", "chapterId": "Chapter1", "questionId": "Question_3", "reportReason": "Incorrect Answer"}, "expected": {"outcome": "The student clicks the 'Report' button while viewing the solution, selects a report reason, submits the report, and the system successfully processes the report.", "status": "Report Submitted"}}]}, {"usecase": {"name": "Accessing and Adding Notes in Smart Notes", "author": 2005110, "scenario": "A user wants to view and add Smart Notes for a specific subject.", "actors": "Student", "preconditions": "The student must be logged in and enrolled in the course. Smart Notes must be available for the selected subject.", "steps": ["Student logs in and navigates to their dashboard.", "Student clicks on the 'Smart Notes' button from the dashboard.", "System navigates to a new page displaying all the subjects the student is enrolled in.", "Student clicks on a specific subject (e.g., Bangla).", "System navigates to a new page displaying all the Smart Notes available for that subject.", "Student reviews the existing Smart Notes for different chapters.", "Student clicks on the 'Add Note' button if they want to add their own note.", "System opens a form where the student can input their custom note.", "Student writes a note and clicks 'Submit'.", "System saves the note and displays it alongside the existing notes for the selected subject."]}, "testcases": [{"name": "Viewing of Smart Notes", "description": "Verify that a student successfully see all the smart notes", "input": {"userId": "stu_12345", "subjectId": "Bangla101"}, "expected": {"outcome": "The Smart Notes for the selected subject are displayed, and the student can view all notes organized by chapter.", "status": "Smart Notes Displayed"}}, {"name": "Adding a New Note", "description": "Verify that a student added a new note", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "noteContent": "This is my custom note for Chapter 1."}, "expected": {"outcome": "The student successfully adds a new note, and the system displays it alongside the existing notes for that subject.", "status": "Note Added"}}, {"name": "Adding an Empty Note", "description": "Verify that a student added a empty note", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "noteContent": ""}, "expected": {"outcome": "The system displays an error message prompting the student to enter note content before submitting.", "status": "Note Addition Failed"}}]}, {"usecase": {"name": "Viewing Progress Report", "author": 2005106, "scenario": "A student wants to view their progress report after completing chapters in a course.", "actors": "Student", "preconditions": "The student must be logged in, enrolled in the course, and have completed the chapters.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Report Card' from the dashboard.", "System navigates to a new page displaying all the student's enrolled courses.", "Student selects the course they want to view progress for (e.g., Bangla).", "System navigates to a new page showing all the chapters in the selected course.", "Student selects a specific chapter to view the report for that chapter.", "System fetches and displays the student's progress report for the selected chapter."]}, "testcases": [{"name": "Viewing Progress Report", "description": "Verify that a student successfully see the progress report of a chapter", "input": {"userId": "stu_12345", "courseId": "Bangla101", "chapterId": "chapter_1"}, "expected": {"outcome": "The progress report is displayed with the correct statistics for the selected chapter, including quiz scores and lesson completion status.", "status": "Progress Retrieved Successfully"}}, {"name": "Progress Report Unavailable - Not Enrolled", "description": "Verify that progress report of a student is unavailable when the student is not enrolled in that course or subject", "input": {"userId": "stu_12345", "courseId": "Math101", "chapterId": "chapter_1"}, "expected": {"outcome": "Error message stating 'As you are not enrolled, you have no report.'", "status": "Progress Retrieval Failed - Not Enrolled"}}, {"name": "Progress Report Unavailable - Incomplete Lessons", "description": "Verify that progress report of a student is unavailable when the student is not completed the course lessons in that course or subject", "input": {"userId": "stu_12345", "courseId": "Bangla101", "chapterId": "chapter_2"}, "expected": {"outcome": "Error message stating 'As you did not complete the lesson, you have no report.'", "status": "Progress Retrieval Failed - Incomplete Lessons"}}]}, {"usecase": {"name": "Downloading eBook", "author": 2005106, "scenario": "A user wants to download an eBook for a specific chapter in a subject.", "actors": "Student", "preconditions": "The student must be logged in and have access to the eBooks for their enrolled subjects.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'eBook' from the dashboard.", "System navigates to a new page displaying all subjects available to the student.", "Student selects the subject they want to view (e.g., Bangla).", "System navigates to a new page showing all chapters for the selected subject.", "Student selects a specific chapter to download the eBook.", "System starts the download process for the eBook of the selected chapter."]}, "testcases": [{"name": "Successful eBook Download", "description": "Verify that a student successfully download the ebooks", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "chapterId": "chapter_1"}, "expected": {"outcome": "The eBook for the selected chapter is downloaded successfully to the student's device.", "status": "Download Successful"}}, {"name": "eBook Not Available for Chapter", "description": "Verify that a student fails to see when the ebook is not avaiable", "input": {"userId": "stu_12345", "subjectId": "Bangla101", "chapterId": "chapter_2"}, "expected": {"outcome": "Error message stating 'eBook not available for this chapter.'", "status": "Download Failed - eBook Not Available"}}]}, {"usecase": {"name": "Viewing and Downloading Course Material", "author": 2005105, "scenario": "A registered user, enrolled in a specific course, attempts to access the course materials.", "actors": "User", "preconditions": "The user must have a registered account and be enrolled in the course. The course materials must be available for viewing and downloading.", "steps": ["The user logs into their account using valid credentials.", "The user navigates to the dashboard of the enrolled course.", "The user enters the Course Materials section.", "The user applies filters to find the desired material.", "The user clicks on 'View' to preview the selected material.", "The user clicks on 'Download' to download the selected material."]}, "testcases": [{"name": "Successful Access and Download of Course Material", "description": "Verify that a user can successfully view and download course materials.", "input": {"userId": "user_12345", "courseId": "English101", "courseMaterialID": "note_456"}, "expected": {"outcome": "Successful access and download of the desired material.", "status": "Material is available/downloaded."}}, {"name": "Failed Download due to Invalid ID", "description": "Verify that a user cannot view or download course materials if the course or material ID is invalid.", "input": {"userId": "user_12345", "courseId": "English10", "courseMaterialID": "note.456"}, "expected": {"outcome": "An error message stating 'Course material not available.'", "status": "Material access denied."}}, {"name": "Failed Download due to Unavailability", "description": "Verify that a user cannot view or download course materials if the course or material is no longer available.", "input": {"userId": "user_12345", "courseId": "English101", "courseMaterialID": "note_455"}, "expected": {"outcome": "An error message stating 'Course material is no longer available.'", "status": "Material access denied."}}]}, {"usecase": {"name": "Accessing Guidelines for Extra-Curricular Activities", "author": 2005105, "scenario": "A registered user, interested in enhancing skills beyond traditional coursework, seeks access to resources such as freelancing, skill development, or career-building guidelines.", "actors": "User", "preconditions": "Relevant guidelines and materials for the chosen activity must be available.", "steps": ["User visits the homepage.", "User navigates to the Skills section and is directed to an external website for further resources.", "User selects the appropriate course or guideline based on interest.", "User accesses free or paid resources to learn about opportunities and best practices.", "User receives certification upon completing the course or assigned tasks"]}, "testcases": [{"name": "Successful Access to Guidelines", "description": "Ensure that the user can access the selected guidelines for extra-curricular activities without any issues.", "input": {"userId": "user_54321", "guidelineCategory": "Freelancing", "guidelineID": "Freelance_303"}, "expected": {"outcome": "Guidelines are successfully accessed.", "status": "Guideline available"}}, {"name": "Failed Access due to Unavailability", "description": "Verify that the user receives an error message when attempting to access a guideline that is not available.", "input": {"userId": "user_54321", "guidelineCategory": "Asset Management"}, "expected": {"outcome": "Error message stating 'Guideline not available.'", "status": "Guideline unavailable"}}, {"name": "Certification Upon Task Completion", "description": "Ensure that the user receives certification after successfully completing the required tasks or course.", "input": {"userId": "user_54321", "guidelineCategory": "Freelancing", "guidelineID": "Freelance_303", "TaskMarks": ["94%", "87%", "88%", "92%"]}, "expected": {"outcome": "Success message: 'Course completed' and certification granted.", "status": "Course completed"}}]}, {"usecase": {"name": "Participating in Live Classes", "author": 2005097, "scenario": "A student wants to join a scheduled live class session for a course they are enrolled in.", "actors": "Student", "preconditions": "The student must be logged in, enrolled in the course, and the live class must be scheduled.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Live Classes' from the dashboard.", "System displays the schedule of upcoming live classes.", "Student selects the scheduled live class they want to join.", "At the scheduled time, the 'Join' button becomes active.", "Student clicks 'Join' to enter the live class session.", "System connects the student to the live video stream.", "Student participates in the live class."]}, "testcases": [{"name": "Successful Live Class Participation", "description": "Verify that a student can successfully join a live class at the scheduled time.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T10:00:00Z"}, "expected": {"outcome": "Student successfully joins the live class session.", "status": "Live Class Joined"}}, {"name": "Attempting to Join Before Scheduled Time", "description": "Verify that the student cannot join the live class before the scheduled time.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T09:50:00Z"}, "expected": {"outcome": "Error message 'Class has not started yet' is displayed.", "status": "Cannot Join Before Scheduled Time"}}, {"name": "Attempting to Join After Class Ended", "description": "Verify that the student cannot join the live class after it has ended.", "input": {"userId": "stu_12345", "courseId": "Physics101", "liveClassId": "live_001", "currentTime": "2024-09-27T11:30:00Z"}, "expected": {"outcome": "Error message 'Class has ended' is displayed.", "status": "Cannot Join After Class Ended"}}, {"name": "Not Enrolled in Course", "description": "Verify that a student cannot join a live class for a course they are not enrolled in.", "input": {"userId": "stu_12345", "courseId": "Chemistry101", "liveClassId": "live_002", "currentTime": "2024-09-27T10:00:00Z"}, "expected": {"outcome": "Error message 'You are not enrolled in this course' is displayed.", "status": "Access Denied - Not Enrolled"}}]}, {"usecase": {"name": "Accessing Recorded Lectures", "author": 2005097, "scenario": "A student wants to access and watch recorded lectures for a course they are enrolled in.", "actors": "Student", "preconditions": "Student must be logged in, enrolled in the course, and recorded lectures must be available.", "steps": ["Student logs in and navigates to their dashboard.", "Student selects 'Recorded Lectures' from the course menu.", "System displays a list of available recorded lectures organized by date or topic.", "Student selects a lecture to watch.", "System streams the selected lecture video.", "Student can pause, rewind, or fast-forward the lecture.", "Student can take notes while watching the lecture."]}, "testcases": [{"name": "Successful Lecture Playback", "description": "Verify that a student can successfully play a recorded lecture.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_010"}, "expected": {"outcome": "Lecture video plays without issues.", "status": "Lecture Played Successfully"}}, {"name": "Accessing Lecture Without Enrollment", "description": "Verify that a student cannot access recorded lectures for a course they are not enrolled in.", "input": {"userId": "stu_12345", "courseId": "Biology101", "lectureId": "lecture_005"}, "expected": {"outcome": "Error message 'You are not enrolled in this course' is displayed.", "status": "Access Denied"}}, {"name": "Lecture Not Available", "description": "Verify that the system handles cases where a lecture is not available.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_999"}, "expected": {"outcome": "Error message 'Lecture not available' is displayed.", "status": "Lecture Not Found"}}, {"name": "Video Playback Issues", "description": "Verify that the system handles video playback errors gracefully.", "input": {"userId": "stu_12345", "courseId": "Math101", "lectureId": "lecture_010", "networkStatus": "Poor Connection"}, "expected": {"outcome": "Video pauses and displays a buffering icon; an optional message 'Experiencing network issues' may be displayed.", "status": "Playback Interrupted"}}]}, {"usecase": {"name": "Changing current class", "author": 2005115, "scenario": "A user wants to change the current class", "actors": "user", "preconditions": "User must login and answered the question asked to confirm his current class", "steps": ["User logs in to his account", "User navigates to his dashboard", "User clicks on the button to change current class", "User answers the qestion asked to confirm his current class (i.e Updated current class?, Updated Group?, Updated Batch?)"]}, "testcases": [{"name": "Successful Class Change", "description": "Verify that a user can successfully change his current class", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 11", "updatedGroup": "Science", "updatedBatch": "2023"}, "expected": {"outcome": "Class change successful", "status": "Class Changed"}}, {"name": "Failed Class Change", "description": "Verify that a user cannot change his current class if any of the provided information is empty", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 11", "updatedGroup": null, "updatedBatch": "2023"}, "expected": {"outcome": "Class change failed", "status": "Incorrect Information"}}, {"name": "Failed Class Change", "description": "Verify that a user cannot change his current class if the updated class is the same as the current class", "input": {"userId": "user_12345", "currentClass": "Class 10", "updatedClass": "Class 10", "updatedGroup": "Science", "updatedBatch": "2023"}, "expected": {"outcome": "Class change failed", "status": "Same Class"}}]}, {"usecase": {"name": "Changing Personal Information", "author": 2005115, "scenario": "A user wants to change or update his personal information", "actors": "User", "preconditions": "User must login to his account", "steps": ["User logs in to his account", "User navigates to his profile settings", "User clicks on the button to edit personal information", "User updates the personal information (i.e Name, Gender, Birthday, Class Shift, Institution, Guadian's Name, Guadian's Mobile Number, )"]}, "testcases": [{"name": "Successful Personal Information Update", "description": "Verify that a user can successfully update his personal information", "input": {"userId": "user_12345", "name": "John Doe", "gender": "Male", "birthday": "1990-01-01", "classShift": "Morning", "institution": "ABC School", "guardianName": "Jane Doe", "guardianMobile": "01712345678"}, "expected": {"outcome": "Personal information update successful", "status": "Information Updated"}}, {"name": "Failed Personal Information Update", "description": "Verify that a user cannot update his personal information if any of the provided information is empty", "input": {"userId": "user_12345", "name": "John Doe", "gender": null, "birthday": "1990-01-01", "classShift": "Morning", "institution": "ABC School", "guardianName": "Jane Doe", "guardianMobile": "01712345678"}, "expected": {"outcome": "Personal information update failed", "status": "Incorrect Information"}}]}]