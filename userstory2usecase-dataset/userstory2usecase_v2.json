[
  {
    "usecases": [
      {
        "name": "Access Account",
        "scenario": "The bank client accesses their account using a PIN code for authentication.",
        "precondition": "Client is registered with a valid account and PIN.",
        "actors": "['Bank_Client', 'Bank Application']",
        "steps": "1: Client opens the bank application. 2: Client enters account number and PIN. 3: Application verifies PIN. 4: If valid, access is granted. Otherwise, access is denied."
      },
      {
        "name": "Deposit Amount",
        "scenario": "The client deposits money into their checking or saving account.",
        "precondition": "Client is authenticated and selects a valid account.",
        "actors": "['Bank_Client', 'Bank Application']",
        "steps": "1: Client selects deposit option. 2: Client enters deposit amount and selects the target account. 3: Application adds the amount to the selected account. 4: Application records the transaction with date, time, type, amount, and resulting balance."
      },
      {
        "name": "Withdraw Amount",
        "scenario": "The client withdraws money from their account with possible overdraft from a linked saving account.",
        "precondition": "Client is authenticated and has a valid checking account.",
        "actors": "['Bank_Client', 'Bank Application']",
        "steps": "1: Client selects withdrawal option and enters amount. 2: Application checks checking account balance. 3: If sufficient, withdraws directly. 4: If insufficient, checks linked saving account. 5: If combined balance covers the amount, withdraws remaining from saving. 6: If still insufficient, informs user and cancels transaction. 7: Records the transaction."
      },
      {
        "name": "Review Transaction",
        "scenario": "The client views all transactions performed on a selected account.",
        "precondition": "Client is authenticated and selects a valid account.",
        "actors": "['Bank_Client', 'Bank Application']",
        "steps": "1: Client chooses an account. 2: Application retrieves all transaction records. 3: Each transaction includes date, time, type, amount, and resulting balance. 4: Transactions are displayed to the client."
      },
      {
        "name": "Inform User",
        "scenario": "The system notifies the client when a transaction cannot be processed.",
        "precondition": "Client has initiated a transaction that violates rules (e.g., overdraft limit).",
        "actors": "['Bank_Client', 'Bank Application']",
        "steps": "1: Client attempts a transaction. 2: System evaluates rules (e.g., sufficient balance). 3: If rules are violated, system displays an appropriate error message. 4: Transaction is aborted."
      }
    ],
    "user_story": "As a bank client, I want to access my account securely with a PIN, deposit and withdraw funds, and review my past transactions. If I try to withdraw more than what's available in my checking account, the system should try using my linked saving account. If total funds are insufficient, the system should notify me and cancel the transaction.",
    "length": 5
  } ,
  {
    "usecases": [
      {
        "name": "Log COS",
        "scenario": "The Patron logs into the Cafeteria Ordering System (COS).",
        "precondition": "Patron has a valid login credential.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron navigates to the COS login page. 2: Patron enters login credentials. 3: System verifies credentials. 4: If valid, Patron is logged in. Otherwise, access is denied."
      },
      {
        "name": "Place an Order",
        "scenario": "The Patron places an order for one or more meals after logging into COS.",
        "precondition": "Patron is logged into COS and has chosen to place an order.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron selects meal(s) to order. 2: System checks if Patron is registered for payroll deduction. 3: If registered, proceeds with order. 4: If not, prompts for options (register, pickup, exit)."
      },
      {
        "name": "Register Payroll Deduction",
        "scenario": "The Patron registers for payroll deduction to continue placing an order.",
        "precondition": "Patron is not currently registered for payroll deduction.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron chooses to register for payroll deduction. 2: System collects required information. 3: Registration is confirmed and Patron can proceed with the order."
      },
      {
        "name": "Place Order for Pickup",
        "scenario": "The Patron places an order for pickup instead of delivery.",
        "precondition": "Patron is not registered for payroll deduction or chooses pickup.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron chooses to place the order for pickup. 2: System confirms the selection and proceeds with order placement."
      },
      {
        "name": "Exit from COS",
        "scenario": "The Patron exits from the COS without placing an order.",
        "precondition": "Patron has chosen not to register or place an order.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron chooses to exit. 2: System logs out the Patron and redirects to the home screen."
      },
      {
        "name": "Change Meal Date",
        "scenario": "The Patron changes the meal date after being informed it's too late for today's order.",
        "precondition": "Meal date is today and current time is past the cutoff.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: System informs Patron that it is too late to place an order for today. 2: Patron chooses to change the meal date. 3: System prompts for a new valid meal date."
      },
      {
        "name": "Cancel Order",
        "scenario": "The Patron cancels the order after being informed it's too late to place one.",
        "precondition": "Meal date is today and current time is past the cutoff.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: System informs Patron that the order cannot be placed for today. 2: Patron chooses to cancel the order. 3: System cancels the ongoing order process."
      },
      {
        "name": "Specify Option",
        "scenario": "The Patron specifies whether the order should be picked up or delivered.",
        "precondition": "Meal date is valid and order placement has begun.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron is prompted to choose between pickup and delivery. 2: Patron selects the option. 3: System proceeds accordingly."
      },
      {
        "name": "Provide Valid Delivery Location",
        "scenario": "The Patron provides a valid delivery location for a delivery order.",
        "precondition": "Patron has selected delivery and delivery time slots are available.",
        "actors": "['Patron', 'COS System']",
        "steps": "1: Patron chooses delivery. 2: System checks for available delivery slots. 3: If available, Patron is prompted for a valid delivery location. 4: Patron enters the location. 5: System confirms and saves the information."
      }
    ],
    "user_story": "As a Patron using the Cafeteria Ordering System (COS), I want to log in, place a meal order, and choose either delivery or pickup. If Iâ€™m not registered for payroll deduction, I want options to register, place a pickup order, or exit. If I try to order after the cutoff time, I want to either change the meal date or cancel the order. If I choose delivery and times are available, I want to provide a valid delivery location.",
    "length": 9
  }, 
  {
    "usecases": [
      {
        "name": "Issue Membership Card",
        "scenario": "A new customer is registered as a library member and issued a unique membership card.",
        "precondition": "Customer is not already a registered member.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer provides personal details (name, address, date-of-birth). 2: System generates a unique membership number. 3: Membership card is printed and issued to the customer. 4: Member information is stored in the system."
      },
      {
        "name": "Borrow Item",
        "scenario": "The customer borrows an item from the library using their membership card.",
        "precondition": "Customer is a valid member and has borrowed fewer than 8 items.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer presents membership number (scanned or entered manually). 2: System verifies membership and current number of loans. 3: Customer scans or enters item barcode. 4: If eligible, item is stamped and issued. 5: System records the loan transaction."
      },
      {
        "name": "Reserve Item",
        "scenario": "The customer reserves an item currently not available for immediate borrowing.",
        "precondition": "Customer is a valid member.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer searches for an unavailable item. 2: Customer selects to reserve the item. 3: System confirms the reservation and stores it."
      },
      {
        "name": "Renew Item",
        "scenario": "The customer renews a borrowed item to extend the due date.",
        "precondition": "Customer has a currently borrowed item that is eligible for renewal.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer selects the item to renew. 2: System checks eligibility. 3: If allowed, due date is extended and system updates the loan record."
      },
      {
        "name": "Extend Loan",
        "scenario": "The customer extends the loan duration of a borrowed item.",
        "precondition": "Customer has a borrowed item and requests more time.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer requests extension. 2: System checks rules (item not reserved, within extension limit). 3: If valid, system updates due date and logs the change."
      },
      {
        "name": "Scan Membership Number",
        "scenario": "The customer's membership number is scanned during a library transaction.",
        "precondition": "Customer presents physical membership card.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer provides membership card. 2: Librarian scans the barcode. 3: System retrieves member details."
      },
      {
        "name": "Enter Membership Number",
        "scenario": "The librarian manually enters the customer's membership number.",
        "precondition": "Customer has a valid membership number.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer provides their membership number verbally or on request. 2: Librarian types it into the system. 3: System verifies and retrieves member record."
      },
      {
        "name": "Search Item",
        "scenario": "The customer searches for an item in the library database.",
        "precondition": "Library catalog is accessible and up to date.",
        "actors": "['Customer', 'Library System']",
        "steps": "1: Customer inputs search criteria (title, author, language, etc.). 2: System searches the database. 3: Matching results are displayed with availability status."
      }
    ],
    "user_story": "As a library customer, I want to register and receive a membership card with a unique number, borrow up to 8 items, and search, reserve, renew, or extend loans on items. During transactions, my membership number can be scanned or entered manually. Each item is identified by a barcode. I can interact with books and language tapes, and the library supports a searchable catalog and transactional records.",
    "length": 8
  },
  {
    "usecases": [
      {
        "name": "Put Kind of Part",
        "scenario": "The user places a part (dish or cup) onto the moving belt.",
        "precondition": "User has access to parts and the assembly belt is idle or running.",
        "actors": "['User']",
        "steps": "1: User selects a part (dish or cup). 2: User places the part on the conveyor belt. 3: Belt carries the part forward toward the vision system."
      },
      {
        "name": "Enter Sensor Zone",
        "scenario": "A part enters the sensor zone of the vision system.",
        "precondition": "A part is placed on the belt and is in motion.",
        "actors": "['Vision System']",
        "steps": "1: Part moves toward the vision system. 2: Vision system detects the part entering the sensor zone."
      },
      {
        "name": "Inform Belt",
        "scenario": "The vision system informs the belt to stop when a part enters the sensor zone.",
        "precondition": "Vision system detects part in sensor zone.",
        "actors": "['Vision System']",
        "steps": "1: Vision system detects presence of part. 2: Vision system sends a signal to stop the belt. 3: Belt halts movement."
      },
      {
        "name": "Recognize Type",
        "scenario": "The vision system identifies the type of part (dish or cup).",
        "precondition": "Belt has stopped and part is in sensor zone.",
        "actors": "['Vision System']",
        "steps": "1: Vision system scans the part. 2: It classifies it as either a dish or a cup. 3: It prepares this information for the robot."
      },
      {
        "name": "Inform Robot",
        "scenario": "The vision system informs the robot of the detected part type.",
        "precondition": "Part has been classified by the vision system.",
        "actors": "['Vision System', 'Robot']",
        "steps": "1: Vision system sends part type and location to robot. 2: Robot receives instructions for picking and placing."
      },
      {
        "name": "Pick Part",
        "scenario": "The robot picks up the part from the belt after receiving classification.",
        "precondition": "Robot has been informed of the part type and location.",
        "actors": "['Robot']",
        "steps": "1: Robot moves arm to part location. 2: Robot picks up the part. 3: Robot prepares to place it in the tray."
      },
      {
        "name": "Place Cup",
        "scenario": "The robot places a cup onto the tray.",
        "precondition": "Robot has picked up a cup.",
        "actors": "['Robot']",
        "steps": "1: Robot moves cup to the tray. 2: Robot places the cup in the designated cup area."
      },
      {
        "name": "Place Dish",
        "scenario": "The robot places a dish onto the tray.",
        "precondition": "Robot has picked up a dish.",
        "actors": "['Robot']",
        "steps": "1: Robot moves dish to the tray. 2: Robot places the dish in the designated dish area."
      }
    ],
    "user_story": "As a user of the assembly unit, I place dishes and cups on a moving belt. The vision system detects when a part enters its sensor zone, stops the belt, identifies the part as a dish or cup, and informs the robot. The robot picks up the part and places it correctly on the tray. A complete assembly is made when both a dish and a cup are placed using the robot arms.",
    "length": 8
  },
  {
    "usecases": [
      {
        "name": "Use Browser",
        "scenario": "The developer uses a web browser to store timestamp records of their work.",
        "precondition": "Developer is logged into the Time Monitor Software System.",
        "actors": "['Developer', 'System', 'Web Browser']",
        "steps": "1: Developer opens the web browser and logs into the system. 2: Developer selects or enters project, user ID, and date. 3: Developer enters task name, activity, and artefact. 4: Developer inputs time duration. 5: System stores the timestamp record in the database."
      },
      {
        "name": "Analyse Time Record",
        "scenario": "The manager analyzes timestamp records submitted by developers.",
        "precondition": "Manager is logged in and timestamp records exist.",
        "actors": "['Manager', 'System']",
        "steps": "1: Manager logs into the system. 2: Manager selects filters such as user, project, date, or task. 3: System retrieves relevant timestamp records. 4: System aggregates data by current week or custom range. 5: Manager reviews time spent on tasks and activities."
      },
      {
        "name": "Define Task",
        "scenario": "The manager defines tasks that are assigned to developers.",
        "precondition": "Manager is logged into the system and a project exists.",
        "actors": "['Manager', 'System']",
        "steps": "1: Manager creates a new task with name, start date, and end date. 2: Manager assigns the task to one or more developers. 3: System records and updates the schedule. 4: Assigned developers are notified of the new task."
      }
    ],
    "user_story": "As a developer, I want to use a web browser to store timestamp records including task name, activity, artefact, and time spent, uniquely identified by project, user, and date. As a manager, I want to define tasks for developers and analyze stored timestamp records, with the ability to filter by current week, project, user, or task to track productivity and task completion.",
    "length": 3
  }
]