[
  {
    "usecases": [
      {
        "name": "User Enters Patient Notes",
        "scenario": "A user enters patient notes in an Automated AI-based Clinical Coding App for medical coding.",
        "precondition": "User has access to the Clinical Coding App and patient notes are available for coding.",
        "actors": "['User']",
        "steps": "1: User navigates to the patient notes section in the App. 2: User enters the patient notes including relevant medical information. 3: User saves the entered patient notes."
      },
      {
        "name": "Patient Notes Added in Data Service",
        "scenario": "The patient notes entered by the user in an Automated AI-based Clinical Coding App for medical coding are added in the Data Service for further processing.",
        "precondition": "Patient notes are successfully entered in the App.",
        "actors": "['System']",
        "steps": "1: The entered patient notes are automatically sent to the Data Service for processing. 2: Data Service processes and stores the patient notes for further analysis."
      },
      {
        "name": "Assignment of ICD Codes to patient notes using Language Classification Model for an Automated AI-based Clinical Coding App",
        "scenario": "ICD codes are assigned to the patient notes using a language classification model from the AI center.",
        "precondition": "Patient notes are available in the Data Service for processing.",
        "actors": "['AI Center']",
        "steps": "1: The AI center's language classification model processes the patient notes. 2: The model assigns ICD codes based on the information extracted from the patient notes."
      },
      {
        "name": "Review of Assigned ICD Codes to Patient Notes in An Automated AI-based Clinical Coding App by Medical Coder",
        "scenario": "The assigned ICD codes are reviewed by a medical coder in the UiPath Action Center.",
        "precondition": "ICD codes have been assigned to the patient notes and are available for review in the Action Center of the app.",
        "actors": "['Medical Coder']",
        "steps": "1: Medical coder accesses the assigned ICD codes in the Action Center. 2: Medical coder reviews the assigned codes and verifies their accuracy and relevance. 3: Medical coder either approves or rejects the assigned ICD codes."
      },
      {
        "name": "Data Entry in Legacy Application by Robot",
        "scenario": "A user enters patient notes in an Automated AI-based Clinical Coding App for medical coding. After it is assgined ICD code by AI, it is approved or rejected by the medical coder. If the assigned codes are approved by the medical coder, the data is entered in the legacy application by a robot.",
        "precondition": "The assigned ICD codes have been approved by the medical coder in the Action Center.",
        "actors": "['Robot']",
        "steps": "1: Robot fetches the approved ICD codes and associated patient notes from the Data Service. 2: Robot enters the data including the approved ICD codes into the legacy application for further processing."
      }
    ],
    "user_story_gpt": "As a user, I want to enter patient notes into an Automated AI-based Clinical Coding App so that they can be processed for medical coding. The system then automatically sends these notes to a Data Service where ICD codes are assigned using a language classification model from the AI center. A medical coder reviews these assigned codes in the Action Center to ensure accuracy and relevance, either approving or rejecting them. Once approved, a robot enters the data, including the ICD codes, into a legacy application for further processing, ensuring efficient and accurate medical coding.",
    "user_story_llama": "As a user, I want to enter patient notes in an Automated AI-based Clinical Coding App so that the notes can be processed and assigned ICD codes using a language classification model from the AI center. After the ICD codes are assigned, I want a medical coder to review the codes in the UiPath Action Center to verify their accuracy and relevance. If the assigned codes are approved by the medical coder, I want a robot to automatically enter the data, including the approved ICD codes, into the legacy application for further processing, thereby streamlining the clinical coding process and reducing manual data entry.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Blood Test Report Extraction (ai-enabled-blood-test-report-analysis project)",
        "scenario": "Automated extraction of required fields from the lab report for a specific type of blood test.",
        "precondition": "Lab reports are available in a format readable by the RPA robot and the UiPath Document Understanding is able to classify the reports.",
        "actors": "['RPA Robot', 'Lab Clinician', 'Doctor']",
        "steps": "1: RPA robot fetches the lab report for a specific type of blood test. 2: RPA robot uses UiPath Document Understanding to classify the lab report for the type of test. 3: RPA robot extracts the required fields from the report. 4: RPA robot saves the extracted data in a global database without any Personally Identifiable Information (PII)."
      },
      {
        "name": "Blood Test Report Analysis using ML Models (ai-enabled-blood-test-report-analysis project)",
        "scenario": "Analysis of blood test reports using ML models hosted in the UiPath AI Center to derive prescriptive observations.",
        "precondition": "Automatically extracted data from the lab report is available in the global database, and ML models for different types of blood tests are available in the UiPath AI Center.",
        "actors": "['RPA Robot', 'ML Model', 'Lab Clinician', 'Doctor']",
        "steps": "1: RPA robot sends the report parameters to the ML models hosted in the UiPath AI Center. 2: ML models analyze the report parameters and derive prescriptive observations. 3: Prescriptive observations are attached to the test report and sent to the lab clinician."
      },
      {
        "name": "Highlight Similar Cases (ai-enabled-blood-test-report-analysis project)",
        "scenario": "Highlighting similar cases of a test report found in the database for the specific hospital or laboratory to the lab clinician.",
        "precondition": "Data on similar cases is available in the database and is accessible by the RPA robot.",
        "actors": "['RPA Robot', 'Lab Clinician', 'Doctor']",
        "steps": "1: RPA robot identifies similar cases for the specific hospital or laboratory based on the test report. 2: Lab clinician or doctor receives information on similar cases found in the database."
      },
      {
        "name": "Review Past Blood Test Reports (ai-enabled-blood-test-report-analysis project)",
        "scenario": "Provide additional recommendations based on a test report on changes observed over time by reviewing past blood test reports of the same patient.",
        "precondition": "Past blood test reports of the same patient are available in the database and accessible by the RPA robot.",
        "actors": "['RPA Robot', 'Lab Clinician', 'Doctor']",
        "steps": "1: RPA robot retrieves past blood test reports of the same patient. 2: Lab clinician or doctor receives additional recommendations based on changes observed over time."
      }
    ],
    "user_story_gpt": "As a lab clinician, I want the automation system to efficiently extract and store key data from blood test reports, ensuring privacy by excluding any personally identifiable information. I also need the system to leverage machine learning models to provide insightful, prescriptive observations from the report data and highlight any similar cases present in our database. Moreover, the system should assist by reviewing past reports of the same patient to offer valuable recommendations based on observed changes over time, enhancing our diagnostic capabilities.",
    "user_story_llama": "As a lab clinician, I want to use the RPA Robot so that necessary details from blood test reports can be automatically extracted and saved in a global database, without any personally identifiable information. In addition, the system should use ML models to analyze these reports giving us prescriptive observations. Adding to this feature, the system should also highlight any similar cases related to a specific test report from our hospital or laboratory database. The system should also provide the facility to retrieve past blood test reports of the same patient, providing additional recommendations based on changes observed over time in a patient's test reports",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Customer Registration in Online AI Assisted Grocery Store for Elderly",
        "scenario": "A new customer registers an account on the online grocery store platform.",
        "precondition": "Customer does not have an existing account on the platform.",
        "actors": "['New Customer']",
        "steps": "1: New Customer navigates to the registration page of the online grocery store platform. 2: New Customer fills in the required registration details such as name, contact details, and preferred language. 3: The system validates the provided details and creates a new customer account."
      },
      {
        "name": "Vendor Registration to Online AI Assisted Grocery Store for Elderly",
        "scenario": "A new vendor registers an account on the online grocery store platform.",
        "precondition": "Vendor does not have an existing account on the platform.",
        "actors": "['New Vendor']",
        "steps": "1: New Vendor navigates to the registration page of the online grocery store platform. 2: New Vendor fills in the required registration details such as business name, contact details, and preferred language for communication. 3: New Vendor submits any required licenses or certifications for verification. 4: The system validates the provided details, creates a new vendor account, and enables the vendor to receive and process orders."
      },
      {
        "name": "Customer Places an Order on the Online AI Assisted Grocery Store for Elderly",
        "scenario": "A customer submits a grocery order on the online store platform using an image of their handwritten list.",
        "precondition": "Customer is logged in.",
        "actors": "['Customer']",
        "steps": "1: Customer uploads an image of the grocery list or selects a previously uploaded list from their profile. 2: The system generates a list from the image. 3: Customer reviews and confirms the items listed based on the translated content. 4: Customer proceeds to checkout. 5: The system triggers the checkout process and notifies the vendor about the new order using Twilio API."
      },
      {
        "name": "Vendor Processes an Order",
        "scenario": "A vendor receives and fulfills a customer's grocery order on the online store platform.",
        "precondition": "Vendor is logged in and has received a new order notification.",
        "actors": "Vendor",
        "steps": "1: Vendor reviews the details of the customer's order including the translated content. 2: Vendor confirms the availability of the listed items and determines the delivery or pickup options. 3: Vendor marks the order as processed and ready for delivery or pickup."
      },
      {
        "name": "Automated Language Translation in Online AI Assisted Grocery Store for Elderly",
        "scenario": "The system automatically translates the handwritten grocery list image into the preferred language for both customers and vendors.",
        "precondition": "Handwritten grocery list image is uploaded by the customer or received by the vendor.",
        "actors": "System",
        "steps": "1: The system processes the uploaded image using Google Cloud Vision API to extract the text content. 2: The system translates the extracted text into the preferred language selected by the customer or vendor. 3: The translated content is displayed for review and confirmation by the respective user."
      },
      {
        "name": "Customer Support via Twilio on Online AI Assisted Grocery Store for Elderly",
        "scenario": "The system provides customer support and order notifications using Twilio API.",
        "precondition": "Customer places an order or requires assistance.",
        "actors": "System, Customer",
        "steps": "1: The system sends order confirmation and updates to the customer via SMS using Twilio API. 2: The system notifies the customer about the order status, delivery details, and other relevant updates through automated messages."
      }
    ],
    "user_story_gpt": "As an elderly customer using the online AI-assisted grocery store, I want a seamless and accessible shopping experience. I need to register easily on the platform, where the system validates my information and sets up my account in my preferred language. I can conveniently upload handwritten lists, which the system translates and processes to create my order. The translation feature ensures that both I and the vendors communicate effectively in our chosen languages, improving overall service. Once I place an order, I am kept informed through SMS notifications using Twilio, updating me on my order status and delivery details. Additionally, I appreciate knowing that vendors, equipped with my translated list, can efficiently fulfill my orders, ensuring a smooth and reliable shopping process.",
    "user_story_llama": "As a customer of the online AI assisted grocery store for elderly, I want to be able to register an account on the platform and upload an image of my handwritten grocery list, so that the system can automatically translate it into my preferred language and allow me to place an order. Additionally, I want the system to notify me about the order status, delivery details, and other relevant updates through automated messages using Twilio API. Furthermore, I want the vendor to receive my order and be able to process it efficiently, using the translated content to confirm the availability of the listed items and determine the delivery or pickup options. I also want the system to provide customer support via Twilio, so that I can receive assistance whenever I need it. Moreover, I want vendors to be able to register on the platform, submit required licenses or certifications, and receive notifications about new orders, so that they can fulfill my grocery needs effectively. Overall, my goal is to have a seamless and convenient online grocery shopping experience, with the help of automated language translation and customer support features.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Receive Input Excel File (Module: Currency Conversion in Banking Backend using Google Live Data)",
        "scenario": "The currency conversion team receives an input Excel file containing currency conversion data.",
        "precondition": "An input Excel file containing currency conversion data is available.",
        "actors": "['Currency Conversion Team']",
        "steps": "1: The currency conversion team obtains the input Excel file from the source. 2: The team verifies the integrity and correctness of the data within the Excel file."
      },
      {
        "name": "Retrieve Live Data from Google (Module: Currency Conversion in Banking Backend using Google Live Data)",
        "scenario": "The system retrieves live currency conversion data from Google.",
        "precondition": "The system is connected to the internet and has access to Google's live data.",
        "actors": "['System']",
        "steps": "1: The system triggers a request to Google for live currency conversion data. 2: Google's live data is fetched and validated for accuracy and reliability."
      },
      {
        "name": "Automatic Currency Conversion in a Currency Conversion Module in Banking Backend using Google Live Data",
        "scenario": "The system automatically processes the currency conversion based on the retrieved live data (specified by user by an Excel file).",
        "precondition": "Input Excel file and live currency conversion data from Google are available.",
        "actors": "System",
        "steps": "1: The system reads the currency conversion data from the input Excel file. 2: Using the live data from Google, the system performs the currency conversion for each entry in the Excel file. 3: The converted currency values are recorded and validated by the system."
      },
      {
        "name": "Validate Currency Conversion Results (Module: Currency Conversion in Banking Backend using Google Live Data)",
        "scenario": "The system validates the results of the automated currency conversion.",
        "precondition": "Automated currency conversion tasks have been completed.",
        "actors": "System",
        "steps": "1: The system performs a validation check on the converted currency values. 2: Any discrepancies or potential errors are flagged for review. 3: Validated currency conversion results are ready for further processing."
      }
    ],
    "user_story_gpt": "As a member of the currency conversion team, I want to obtain an input Excel file with currency conversion data and ensure its integrity. The system will then connect to Google's live data service to fetch current currency conversion rates. Using this live data, the system should automatically process each conversion entry from the Excel file. After conversions are made, it should validate the results, flagging any discrepancies for review, ensuring accuracy before finalizing the results for further processing.",
    "user_story_llama": "As a member of the currency conversion team, I want the system to automatically process currency conversions using live data from Google, so that I can receive accurate and reliable conversions. The process should start with the team obtaining an input Excel file containing currency conversion data, which the system can then use to retrieve the corresponding live data from Google. The system should then perform the currency conversions based on this live data and validate the results to ensure accuracy and reliability, flagging any discrepancies or potential errors for review, thereby providing validated currency conversion results for further processing.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Search and Download Journals",
        "scenario": "A user searches defined websites for specific topics and downloads journals and white papers.",
        "precondition": "User has access to the system and defined websites for journal search and download.",
        "actors": "['User', 'System']",
        "steps": "1: User enters the specified search topics or keywords for journals and white papers. 2: The system retrieves the relevant journals and white papers from the defined websites. 3: User selects the journals and white papers to download."
      },
      {
        "name": "Extract Journal Publication Details",
        "scenario": "The system extracts specific details from downloaded journals and white papers (provided by user).",
        "precondition": "Journals and white papers are downloaded and accessible for extraction.",
        "actors": "['System']",
        "steps": "1: The system extracts the Date of Publication, Author, Heading/Topic, and Year of Publish from the downloaded journals. 2: The system identifies the Country of Publish for each journal. 3: The system summarizes the content of the entire journal or paper. 4: The system organizes the extracted details into an excel file."
      }
    ],
    "user_story_gpt": "As a researcher, I want to efficiently search and download relevant journals and white papers from defined websites using specific keywords, so that I can easily access the most pertinent information for my studies. Once the journals are downloaded, I want the system to automatically extract essential publication details such as the date, author, topic, year, and country of publication. Additionally, I need these details to be summarized and organized into an easily accessible excel file, helping me manage my research data effectively.",
    "user_story_llama": "As a user, I want to use the system to search and download journals and white papers from defined websites based on specific topics, so that I can access relevant information. Additionally, I want the system to automatically extract specific details such as Date of Publication, Author, Heading/Topic, Year of Publish, and Country of Publish from the downloaded journals, summarize the content, and organize the extracted details into an excel file, enabling me to easily review and analyze the publication details without having to manually go through each journal and white paper.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Receive Business Travel Information",
        "scenario": "The 'Easy Business Tour' system receives business travel information of an employee or group of employees via email.",
        "precondition": "The email containing business travel information must be sent to the specified email address or system.",
        "actors": "System, Employee/Group of Employees",
        "steps": "1: System monitors the specified email address for incoming travel information emails. 2: System parses the email content to extract date, time range, source, destination, and number of passengers for the travel. 3: System validates the received travel information data."
      },
      {
        "name": "Display Available Flights",
        "scenario": "A system named 'Easy Business Tour' receives travel information (source, destination, people count, date range) through email, parses the info. Now the system displays available flights for the specified date, time range, source, and destination.",
        "precondition": "The travel information must be successfully received and validated.",
        "actors": "System, Employee/Group of Employees",
        "steps": "1: System processes the received travel information to search for available flights matching the criteria. 2: System retrieves and displays a list of available flights with relevant details such as airlines, departure/arrival times, and seat availability."
      },
      {
        "name": "Reserve Ticket for Customer(s)",
        "scenario": "The 'Easy Business Tour' system reserves the flight ticket for the customer(s) based on the selected flight from the options provided by the system after it was provided the source, destination, and date range.",
        "precondition": "Available flights must be displayed and a specific flight must be selected by the employee/group of employees.",
        "actors": "System, Employee/Group of Employees",
        "steps": "1: Employee/Group of Employees selects a flight from the displayed available options. 2: System processes the reservation request and updates the seat availability for the selected flight. 3: System completes the ticket reservation for the customer(s) based on the provided details."
      },
      {
        "name": "Send Flight Ticket",
        "scenario": "The 'Easy Business Tour' system sends the reserved flight ticket to the concerned email-id from where the booking request was sent.",
        "precondition": "The flight ticket must be successfully reserved for the customer(s).",
        "actors": "System, Employee/Group of Employees",
        "steps": "1: System generates the flight ticket with all necessary details for the reserved booking. 2: System sends the flight ticket to the email address from which the initial booking request was received."
      },
      {
        "name": "Request New Proposal of Date/Time",
        "scenario": "If the booking request cannot be processed successfully by 'Easy Business Tour' system (automated flight ticket booking based on passanger info), the system requests a new proposal of date/time from the requesting team.",
        "precondition": "The system must encounter an issue while processing the booking request.",
        "actors": "System, Employee/Group of Employees",
        "steps": "1: System identifies the issue in the received travel information or reservation process. 2: System sends a request to the employee/group of employees for a new proposal of date/time due to the encountered issue."
      }
    ],
    "user_story_gpt": "As an employee, I want the 'Easy Business Tour' system to automatically receive and parse my travel information sent via email, so that it can display available flight options for my business trip. Once I select the preferred flight, the system should reserve the ticket and send the confirmation to my email. If there are any issues processing the reservation, the system should notify me to propose new travel dates or times.",
    "user_story_llama": "As an employee or group of employees, I want to use the 'Easy Business Tour' system so that I can easily receive and process business travel information via email, and have the system automatically display available flights for the specified date, time range, source, and destination. I also want the system to allow me to reserve a flight ticket for myself or my group based on the selected flight, and then send the reserved flight ticket to my email address. Furthermore, if there are any issues with the booking request, I want the system to request a new proposal of date/time from me, ensuring that the booking process is seamless and efficient. This will enable me to quickly and effortlessly manage my business travel arrangements, saving time and reducing the complexity of booking flights.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Enrollment in Facial Recognition System",
        "scenario": "A user enrolls in the facial recognition system for the first time.",
        "precondition": "User intends to enroll in the facial recognition system.",
        "actors": "User",
        "steps": "1: User initiates enrollment process in the system. 2: User provides personal biometric data (e.g., facial scan, iris scan). 3: System validates and stores the biometric data associated with the user's identity."
      },
      {
        "name": "User Authentication using Facial Recognition System",
        "scenario": "A registered user is authenticated using facial recognition.",
        "precondition": "User is registered in the facial recognition system.",
        "actors": "User",
        "steps": "1: User stands before the facial recognition device for authentication. 2: Facial recognition system captures and processes user's facial features. 3: System compares the captured features with the stored biometric data of the user. 4: System grants access if the features match within a certain threshold."
      },
      {
        "name": "Real-Time Identification of Individual Using Facial Recognition",
        "scenario": "The facial recognition system identifies individuals in real-time.",
        "precondition": "System is operational and actively monitoring for individuals.",
        "actors": "Facial Recognition System",
        "steps": "1: Facial recognition system continuously scans the environment for faces. 2: Upon detection of a face, the system captures facial features and processes them. 3: System matches the captured features against the stored biometric data of enrolled users. 4: If a match is found, the system identifies the individual in real-time."
      },
      {
        "name": "Secure and Swift Verification using Facial Recognition",
        "scenario": "The facial recognition system verifies individuals swiftly and securely.",
        "precondition": "System is available for verification purposes.",
        "actors": "Facial Recognition System",
        "steps": "1: Individual presents themselves before the facial recognition device for verification. 2: Facial recognition system swiftly captures and processes the facial features. 3: System compares the features with the stored biometric data of the individual. 4: If the features match within the defined threshold, the system securely verifies the individual."
      }
    ],
    "user_story_gpt": "As a user of the facial recognition system, I want to enroll by providing my biometric data, so that I can be authenticated quickly and securely in future interactions. The system ensures that my data is validated and stored accurately for seamless authentication whenever I need access. Additionally, the system should be capable of real-time identification, continuously monitoring and matching my biometric data to recognize me swiftly and effectively, ensuring a secure verification process each time I use the system.",
    "user_story_llama": "As a user, I want to enroll in the facial recognition system by providing my personal biometric data, such as a facial scan, so that I can be securely and swiftly verified in the future. I also want the system to authenticate me using facial recognition when I stand before the device, by comparing my captured facial features with the stored biometric data associated with my identity. Furthermore, I want the facial recognition system to identify me in real-time when I am in its vicinity, by continuously scanning the environment, capturing and processing my facial features, and matching them against the stored biometric data. Additionally, when I need to verify my identity, I want the system to swiftly and securely verify me by capturing and processing my facial features and comparing them with my stored biometric data, ensuring a seamless and secure experience.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Automated Offer Letter Generation (Automated Salary Hike Handling Software)",
        "scenario": "HR initiates the process of generating offer letters for the salary hike cycle.",
        "precondition": "HR has received and validated the results shared from the managers for the salary hike cycle.",
        "actors": "['HR']",
        "steps": "1: HR triggers the bot to generate offer letters for the salary hike. 2: The bot accepts the results shared from the managers. 3: The bot checks all pre-defined validations, such as years of experience, allowed percentage hike, and any missed employees for appraisal. 4: The bot creates action tickets for HR to follow up on highlighted cases and requests responses from the managers. 5: All evidence and communication are stored in the bot's system. 6: The bot processes the generation of offer letters in a multi-architecture-based approach to ensure completion within a day."
      },
      {
        "name": "Employee Detail Update using Automated Salary Hike Handling Software",
        "scenario": "Updating employee details and mailing all candidates about the salary hike.",
        "precondition": "Offer letters for the salary hike cycle have been generated.",
        "actors": "HR",
        "steps": "1: HR initiates the update of employee details in the system with the new salary and designation. 2: HR triggers the bot to send out emails to all the candidates about the salary hike process. 3: The bot updates the employee details in the system with the new salary and designation. 4: The bot sends out emails to all the candidates about the salary hike."
      },
      {
        "name": "Validation Checks in Automated Salary Hike Handling Software",
        "scenario": "The bot performs validation checks on the salary hike parameters and employee details.",
        "precondition": "Results for the salary hike cycle are shared by the managers.",
        "actors": "['Bot']",
        "steps": "1: The bot checks all the validation rules set for the salary hike process, including years of experience, allowed percentage hike, and any missed employees for appraisal. 2: The bot highlights cases that do not meet the pre-defined validations and creates action tickets for HR to follow up. 3: The bot requests responses from the managers for the highlighted cases. 4: All evidence and communication related to the validation checks are stored in the bot's system."
      },
      {
        "name": "Multi-Architecture Processing in Automated Salary Hike Handling Software",
        "scenario": "The bot initiates multi-architecture processing for completing the salary hike process.",
        "precondition": "All required validations and employee details are updated and verified.",
        "actors": "Bot",
        "steps": "1: The bot starts the multi-architecture based processing to ensure completion of the salary hike process within a day's time."
      }
    ],
    "user_story_gpt": "As an HR professional, I want to utilize an automated salary hike handling system to efficiently generate offer letters, ensuring that all pre-defined validations are met, such as experience and percentage hikes. The system should create action tickets for any discrepancies and facilitate communication with managers. Furthermore, once offer letters are generated, it should update employee records with new salaries and designations, and promptly notify candidates via email. The entire process should be expedited through multi-architecture processing to ensure timely completion.",
    "user_story_llama": "As an HR, I want to use the Automated Salary Hike Handling Software so that I can initiate the process of generating offer letters for the salary hike cycle, where the bot performs validation checks on the salary hike parameters and employee details, and creates action tickets for me to follow up on highlighted cases. The software should also update employee details and mail all candidates about the salary hike once the offer letters are generated. Additionally, the bot should utilize a multi-architecture-based approach to ensure the completion of the salary hike process within a day, storing all evidence and communication in its system, thereby streamlining the entire salary hike handling process and reducing manual effort.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Collect Resumes",
        "scenario": "Human resources collect resumes from various sources.",
        "precondition": "There should be a source of resumes available for collection.",
        "actors": "['Human Resources']",
        "steps": "1: Human Resources access various sources such as job portals, career fairs, and online submissions to collect resumes. 2: Resumes are gathered and stored in the company's database or a designated location."
      },
      {
        "name": "Determine Candidates from a list of resumes",
        "scenario": "The system determines potential candidates from a set of resumes collected from several job portals.",
        "precondition": "Resumes must be available in the company's database or designated location.",
        "actors": "['System']",
        "steps": "1: The system uses OCR (Optical Character Recognition) and UiPath to extract relevant information from the resumes. 2: ChatGPT is employed to analyze the extracted information and identify potential candidates based on predefined criteria. 3: The system utilizes Amazon Web Services to assist in processing and analyzing the candidate data. 4: A list of potential candidates is generated based on the analysis and presented to the human resources team for review."
      },
      {
        "name": "Improve Hiring Process of Company",
        "scenario": "The company implements an assistant software to enhance the hiring process.",
        "precondition": "The assistant software must be developed and integrated into the hiring process.",
        "actors": "['Company']",
        "steps": "1: The company utilizes UiPath, OCR, ChatGPT, and Amazon Web Services to create an assistant software. 2: The assistant software streamlines the hiring process by automating repetitive tasks such as resume parsing, candidate evaluation, and initial communications. 3: The software assists in scheduling interviews, sending automated updates to candidates, and maintaining candidate engagement throughout the hiring process. 4: Human resources team leverages the assistant software to efficiently manage the workflow and improve overall hiring effectiveness."
      }
    ],
    "user_story_gpt": "As a member of the human resources team, I need an advanced system to efficiently collect and analyze resumes from various sources, including job portals and career fairs. By employing technologies like OCR, UiPath, and ChatGPT, the system will streamline the extraction and evaluation process, enabling us to identify potential candidates more effectively. Additionally, with the integration of Amazon Web Services, the system will automate repetitive tasks, such as resume parsing and candidate evaluations, improving the efficiency of our hiring process. The assistant software will also assist in scheduling interviews, sending updates to candidates, and ensuring continuous engagement, thus enhancing the overall workflow and effectiveness of our recruitment strategy.",
    "user_story_llama": "As a human resources team, I want to utilize a system that can collect resumes from various sources, determine potential candidates from the collected resumes, and improve the hiring process, so that the company can efficiently manage the workflow, automate repetitive tasks, and make informed hiring decisions. The system should be able to access various sources, extract relevant information from resumes using OCR and UiPath, analyze the information using ChatGPT, and process candidate data with Amazon Web Services. Additionally, the system should generate a list of potential candidates, assist in scheduling interviews, send automated updates to candidates, and maintain candidate engagement throughout the hiring process, ultimately enhancing the overall hiring effectiveness and experience for both the company and the candidates.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Negotiation Facilitation in Online Second-hand Car-Buying System",
        "scenario": "User negotiates the price of a vehicle through the Trusted Wheels application.",
        "precondition": "User must be logged in and have selected a vehicle of interest.",
        "actors": "['User', 'Seller']",
        "steps": "1: User selects a vehicle for purchase 2: User initiates negotiation for the price of the vehicle 3: The system facilitates the negotiation process by providing a platform for communication between the user and the seller 4: Seller responds with a counteroffer or acceptance of the user's proposal 5: User and seller reach an agreement on the price"
      },
      {
        "name": "Document Verification in Online Second-hand Car-Buying System",
        "scenario": "User validates all documents related to the purchased vehicle using the Trusted Wheels application.",
        "precondition": "User must have purchased a vehicle after negotiating with the seller through the Trusted Wheels application.",
        "actors": "['User']",
        "steps": "1: User navigates to the purchased vehicle's profile 2: User accesses the documents section 3: The system displays the list of documents associated with the vehicle, including invoices, warranty, and claims 4: User verifies the authenticity of each document"
      },
      {
        "name": "Secure Payment in Online Second-hand Car-Buying System",
        "scenario": "User makes a payment for a vehicle through the Trusted Wheels application.",
        "precondition": "User must have agreed to purchase a vehicle and be ready to make the payment.",
        "actors": "['User', 'Payment Gateway']",
        "steps": "1: User selects the payment option 2: User enters the payment details 3: The system redirects the user to a secure payment gateway 4: User completes the payment using a secure channel 5: Payment gateway confirms the transaction"
      },
      {
        "name": "Vehicle Condition Validation in Online Second-hand Car-Buying System",
        "scenario": "User validates the condition of a vehicle using the Trusted Wheels application.",
        "precondition": "User must have selected a vehicle for potential purchase.",
        "actors": "['User']",
        "steps": "1: User accesses the vehicle's profile 2: The system utilizes AI Object Detection to present an analysis of the vehicle's condition 3: User examines the AI analysis to understand the vehicle's condition 4: User makes an informed decision based on the analysis"
      },
      {
        "name": "Transparency in Trade in Online Second-hand Car-Buying System",
        "scenario": "User engages in a trade for a vehicle through the Trusted Wheels application.",
        "precondition": "User must have agreed to purchase a vehicle and be ready to engage in the trade.",
        "actors": "['User', 'Seller']",
        "steps": "1: User and seller agree on the terms of the trade 2: The system facilitates the trade process, ensuring transparency in the transaction 3: User and seller complete the trade as agreed 4: The system updates the status of the transaction"
      }
    ],
    "user_story_gpt": "As a user of the Trusted Wheels application, I want to seamlessly negotiate and agree on the price for a second-hand vehicle by directly communicating with sellers. Once a purchase decision is made, I expect the system to validate all necessary documents to ensure their authenticity and accuracy. I also want to securely make payments through a trusted payment gateway, assuring me of my transaction's safety. Additionally, using AI-powered analysis to understand the vehicle’s condition, I aim to make informed decisions before finalizing any purchase. Lastly, I seek transparency during the entire trade process, ensuring that all agreed terms with the seller are honored and the status of the transaction is updated accordingly.",
    "user_story_llama": "As a user, I want to use the Trusted Wheels application so that I can negotiate the price of a vehicle with the seller through a facilitated negotiation process, validate the condition of the vehicle using AI Object Detection, and make a secure payment for the vehicle through a trusted payment gateway. Additionally, I want to be able to verify all documents related to the purchased vehicle, ensuring their authenticity, and engage in a transparent trade process, with the system updating the status of the transaction. This will enable me to make informed decisions and complete transactions with confidence, knowing that the system is providing a secure and trustworthy environment for buying and selling second-hand cars.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Download Source Files",
        "scenario": "Downloading source files from multiple locations like shared location, email, etc. of predetermined types",
        "precondition": "Availability of source files in the specified locations",
        "actors": "['System']",
        "steps": "1: System accesses the shared location and downloads the source files 2: System retrieves source files from emails and downloads them 3: System verifies the integrity of the downloaded files"
      },
      {
        "name": "Data Cleaning and Filtering for Automated Invoice Generation",
        "scenario": "Cleaning the supplied/downloaded data and filtering rows based on predefined conditions to exclude rows that are not to be billed",
        "precondition": "Availability of downloaded source files",
        "actors": "['System']",
        "steps": "1: System cleans the data from the downloaded files 2: System applies predefined conditions to filter out rows that are not to be billed 3: System creates an intermediate file with the filtered data"
      },
      {
        "name": "Calculate Quantity and Amount for Billing from a List of Filterd Billing Files/Sheets",
        "scenario": "Calculating Quantity and Amount based on given charge rate from the intermediate files (after preprocessing initial files based on preconditions)",
        "precondition": "Availability of the intermediate file with filtered data",
        "actors": "['System']",
        "steps": "1: System retrieves the filtered data from the intermediate file 2: System calculates the Quantity and Amount based on the provided charge rates 3: System records the calculated Quantity and Amount for each entity"
      },
      {
        "name": "Create Invoices from Source Files Containing Quantity and Amount",
        "scenario": "Creating invoices for each entity in the source file and inserting data into pre-defined invoice templates",
        "precondition": "Availability of calculated Quantity and Amount for each entity",
        "actors": "['System']",
        "steps": "1: System generates individual invoices for each entity using pre-defined templates 2: System inserts the calculated Quantity and Amount data into the respective invoice templates 3: System validates the created invoices"
      },
      {
        "name": "Upload Automatically Generated Invoices to Database",
        "scenario": "Uploading the created invoices into the database using excel add-ins and generating a transaction number",
        "precondition": "Availability of validated invoices",
        "actors": "['System']",
        "steps": "1: System utilizes excel add-ins to upload the invoices to the database 2: System ensures the successful upload of the invoices 3: System generates a unique transaction number for each uploaded invoice"
      },
      {
        "name": "Send Summary File to the Department",
        "scenario": "Sending a summary file containing details of the submitted invoices to the department",
        "precondition": "Completion of the entire invoicing process",
        "actors": "['System']",
        "steps": "1: System compiles a summary file with details of the submitted invoices 2: System sends the summary file to the respective department for reconciliation"
      }
    ],
    "user_story_gpt": "As a financial administrator, I want a system that automates the entire invoicing process, starting with the downloading of source files from various locations and verifying their integrity. Once the files are downloaded, the system should clean and filter the data, excluding any sections that are not billable. It should then calculate the quantity and amount for billing using predefined charge rates. After this, the system needs to generate invoices for each entity using standardized templates and ensure that all data is correctly inserted and validated. Finally, these invoices should be uploaded into the database, with a unique transaction number generated for each. Additionally, the system should also send a summary file of the invoicing details to the department for reconciliation, streamlining our financial operations and ensuring accurate and efficient processing of invoices.\"",
    "user_story_llama": "As a system, I want to automate the invoicing process so that I can download source files from multiple locations, clean and filter the data to exclude non-billable rows, calculate the quantity and amount for billing, create invoices for each entity, and upload them to the database. In addition, I should be able to send a summary file to the department containing details of the submitted invoices, ensuring a seamless and efficient invoicing process from start to finish, with minimal manual intervention, and providing a unique transaction number for each uploaded invoice.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Automated Email Monitoring",
        "scenario": "The system monitors finance emails for vendor bills and validates them using Document Understanding and AI Centre.",
        "precondition": "The system has access to the finance emails and the Document Understanding and AI Centre.",
        "actors": "['Bot']",
        "steps": "1: The bot checks all the emails received for vendor bills. 2: Whitelisted vendors' bills are processed automatically, while other bills are moved to the action center for processing. 3: In the action center, the end user can choose to pay the bill or neglect it based on their understanding of the situation. 4: If the bot notices a spike in expense from a whitelisted vendor, it moves the expense to the action center for further review."
      },
      {
        "name": "Expense Tracking and Monitoring in a Monthly Payment Automation System",
        "scenario": "The system uses historical expense data to track and monitor the expenses incurred by the company.",
        "precondition": "The system has access to historical expense data and is integrated with the finance dashboard.",
        "actors": "['Bot']",
        "steps": "1: The bot utilizes historical expense data to track and monitor the expenses incurred by the company during the financial years. 2: The data is stored in a database and made visible on a dashboard for the finance team for real-time monitoring. 3: Real-time monitoring allows the finance team to minutely watch the expenses and avoid late payments."
      },
      {
        "name": "Monthly Bill Payment Processing in a Monthly Payment Automation System",
        "scenario": "The system processes the monthly bills received from vendors to avoid late fee fines.",
        "precondition": "The system has access to the received monthly bills and is integrated with the payment processing capabilities.",
        "actors": "['Bot', 'End User']",
        "steps": "1: The bot processes the bills received from vendors to ensure timely payments. 2: Whitelisted vendors' bills are processed automatically, while others are moved to the action center for processing by the end user. 3: The end user in the action center can pay the bill or neglect it based on their understanding. 4: If any spike in expense from a whitelisted vendor is noticed, the bot moves the expense to the action center for further review."
      }
    ],
    "user_story_gpt": "As a member of the finance team, I want to utilize a bot system to automate the monitoring and processing of vendor bills and expenses, ensuring timely payments and avoiding late fees. The bot should automatically process bills from whitelisted vendors, while moving others to an action center for review. It should also alert us to any unusual expense spikes from trusted vendors for further evaluation. Additionally, I want the system to track and monitor expenses using historical data, providing real-time visibility on a finance dashboard to assist in better financial oversight and decision-making.",
    "user_story_llama": "As a finance team member, I want to utilize a bot that can monitor finance emails for vendor bills, validate them using Document Understanding and AI Centre, and automatically process whitelisted vendors' bills, while moving other bills to the action center for my review. Additionally, I want the system to track and monitor the company's expenses using historical data, providing real-time monitoring on a dashboard to avoid late payments. The system should also process monthly bills from vendors to ensure timely payments, allowing me to review and approve or neglect bills in the action center, with the bot flagging any unusual spikes in expenses from whitelisted vendors for further review, so that I can efficiently manage the company's finances and avoid late fee fines.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Integration with Billing System for Automated Retail Inventory Manager System",
        "scenario": "Integration of the UiPath inventory manager bot with the shop's billing system to trigger the bot in orchestrator upon completion of a billing transaction at the counter.",
        "precondition": "The shop uses a specific billing system that can be integrated with the UiPath inventory manager bot.",
        "actors": "['UiPath Inventory Manager Bot', 'Billing System']",
        "steps": "1: The billing system completes a transaction at the counter. 2: Upon transaction completion, the billing system triggers the UiPath inventory manager bot in orchestrator."
      },
      {
        "name": "Maintain Centralized Product Repository for an Automated Retail Inventory Manager System with Help from UiPath Inventory Manager Bot",
        "scenario": "Maintenance of a centralized repository containing the count for all products in the retail shop.",
        "precondition": "A centralized repository system exists to store the count for all the products in the retail shop.",
        "actors": "['UiPath Inventory Manager Bot']",
        "steps": "1: The UiPath inventory manager bot updates the count of items in the centralized repository. 2: The repository is regularly synchronized with the actual inventory count in the shop."
      },
      {
        "name": "Automated Purchase Order Placement in an Automated Retail Inventory Manager System",
        "scenario": "Automatic placement of a purchase order for a specific item when its count in the repository reaches a pre-defined threshold value.",
        "precondition": "The UiPath inventory manager bot has access to vendor information and can place automated purchase orders.",
        "actors": "['UiPath Inventory Manager Bot', 'Vendor']",
        "steps": "1: The UiPath inventory manager bot monitors the item counts in the repository. 2: When the count of a specific item reaches the pre-defined threshold value, the bot automatically places a purchase order for that item with the specific vendor."
      }
    ],
    "user_story_gpt": "As a retail shop owner, I want to integrate the UiPath Inventory Manager Bot with our billing system so that every transaction completion at the counter automatically triggers inventory updates, ensuring our product counts are always accurate in a centralized repository. Additionally, this system should automatically place purchase orders with vendors when stock levels fall below a predefined threshold, enabling seamless inventory management and reducing stockout situations, thereby enhancing operational efficiency.",
    "user_story_llama": "As a retail shop owner, I want to integrate the UiPath inventory manager bot with our billing system so that upon completion of a billing transaction at the counter, the bot is triggered in orchestrator to maintain a centralized product repository, updating the count of items in real-time and synchronizing it with the actual inventory count in the shop. Furthermore, I want the UiPath inventory manager bot to automatically place a purchase order for a specific item when its count in the repository reaches a pre-defined threshold value, ensuring that we never run out of stock, and streamlining our inventory management process with the help of automated purchase orders to vendors.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "CCTV Footage Analysis",
        "scenario": "The system detects and analyzes accidents in real-time using CCTV footage.",
        "precondition": "CCTV footage of the area is available and accessible to the system.",
        "actors": "['System']",
        "steps": "1: The system continuously monitors the CCTV footage for any signs of accidents. 2: Upon identifying a potential accident, the system captures relevant footage for analysis. 3: The system employs computer vision and image processing algorithms, utilizing AI models for efficient accident detection."
      },
      {
        "name": "Location Mapping",
        "scenario": "The system integrates with the CCTV database to retrieve the precise location of the accident for accurate reporting and response.",
        "precondition": "The system has access to the CCTV database and coordinates of accident locations.",
        "actors": "['System']",
        "steps": "1: The system retrieves the geographic coordinates of the accident from the CCTV database. 2: The system utilizes the obtained coordinates for accurate reporting and emergency response purposes."
      },
      {
        "name": "Automated Reporting",
        "scenario": "The system automatically generates detailed accident reports, including relevant data, for aiding the investigation.",
        "precondition": "The system has detected and confirmed an accident through CCTV footage analysis.",
        "actors": "['System']",
        "steps": "1: The system compiles relevant data such as date, time, and location of the accident. 2: The system generates a detailed accident report based on the compiled data."
      },
      {
        "name": "Automated Calls",
        "scenario": "The system triggers automated calls to local authorities for real-time alerts and emergency response.",
        "precondition": "The system has detected and confirmed an accident, and the required data for alerting authorities is available.",
        "actors": "['System']",
        "steps": "1: The system initiates automated calls to the designated local police stations or emergency services. 2: The system delivers real-time alerts with relevant accident details to the authorities."
      },
      {
        "name": "Fax Notification",
        "scenario": "The system integrates with fax services to send detailed accident reports and images to designated police stations for quick response and dispatch of emergency services.",
        "precondition": "The system has generated a detailed accident report and captured relevant images.",
        "actors": "['System']",
        "steps": "1: The system sends the comprehensive accident report and images to the designated police stations via fax services. 2: The system ensures that map coordinates are included in the report for quick response and dispatch of emergency services."
      }
    ],
    "user_story_gpt": "As a city safety administrator, I want a system that can analyze CCTV footage to detect accidents in real-time, allowing for immediate response. The system should accurately map the accident location using coordinates obtained from the CCTV database to ensure prompt and precise reporting. Additionally, the system must automatically generate comprehensive accident reports that include all relevant details, which can assist in investigations. It should also trigger automated calls to alert local authorities and emergency services, ensuring quick response times. Furthermore, the system must integrate with fax services to send detailed reports and images to police stations, enhancing emergency dispatch efficiency.",
    "user_story_llama": "As a system administrator, I want the system to detect and analyze accidents in real-time using CCTV footage, so that it can automatically generate detailed accident reports, including relevant data, and trigger automated calls and fax notifications to local authorities for real-time alerts and emergency response. The system should integrate with the CCTV database to retrieve the precise location of the accident for accurate reporting and response, and utilize computer vision and image processing algorithms, along with AI models, for efficient accident detection. Furthermore, the system should compile relevant data, such as date, time, and location of the accident, and send comprehensive accident reports and images to designated police stations via fax services, ensuring that map coordinates are included for quick response and dispatch of emergency services.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Train ML Model",
        "scenario": "Training the machine learning model with different existing datasets from hospitals and other sources.",
        "precondition": "Availability of diverse datasets for training the ML model.",
        "actors": "['AI System']",
        "steps": "1: Collecting diverse lab report datasets from hospitals and other sources. 2: Preprocessing and cleaning the collected datasets. 3: Training the machine learning model using the preprocessed datasets."
      },
      {
        "name": "Predict Disease Likelihood",
        "scenario": "Using the trained ML model to predict the likelihood of chronic diseases for a patient based on their lab report data and lifestyle information.",
        "precondition": "Availability of the patient's lab report data and lifestyle information.",
        "actors": "['AI System']",
        "steps": "1: Receiving the lab report data and lifestyle information of the patient. 2: Pushing the data to the ML model to predict the likelihood of chronic diseases. 3: Comparing the results with lifestyle data and making the prediction."
      },
      {
        "name": "Send Report for Doctor Validation",
        "scenario": "Sending the lab report data to the doctor for validation in case of any alarming prediction.",
        "precondition": "Detection of an alarming prediction from the ML model.",
        "actors": "['AI System', 'Doctor']",
        "steps": "1: Sending the report data to the doctor via an automated email for validation. 2: Doctor accessing the UiPath App to approve or disapprove the reading. 3: Doctor's input sent to the ML model for refining future predictions."
      },
      {
        "name": "Inform Patient about Susceptibility",
        "scenario": "Informing the patient immediately if the doctor confirms their susceptibility to a chronic disease based on the AI prediction.",
        "precondition": "Confirmation from the doctor regarding the patient's susceptibility to a chronic disease.",
        "actors": "['AI System', 'Doctor', 'Patient']",
        "steps": "1: Sending an immediate notification to the patient about their susceptibility to a chronic disease. 2: Providing the patient with information to take corrective actions as soon as possible."
      }
    ],
    "user_story_gpt": "As a healthcare provider utilizing AI technology, I want our AI system to train machine learning models using diverse datasets from hospitals to predict chronic diseases based on patient lab reports and lifestyle information. This system should identify any alarming predictions and alert doctors for validation, allowing them to refine the model based on their expert input. In case a patient's susceptibility to a chronic disease is confirmed by a doctor, the system will promptly inform the patient, ensuring they receive crucial information to take proactive health measures.",
    "user_story_llama": "As an AI system, I want to train a machine learning model using diverse datasets from hospitals and other sources, so that I can predict the likelihood of chronic diseases for a patient based on their lab report data and lifestyle information. In addition, I want to send the lab report data to the doctor for validation if the prediction is alarming, and once the doctor confirms the patient's susceptibility, I want to inform the patient immediately, providing them with information to take corrective actions as soon as possible, thereby enabling the doctor and patient to take proactive measures to prevent or manage the disease.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Accessing Crop Recommendation System",
        "scenario": "A user accesses the Crop Recommendation system to get suggestions for suitable crops to grow based on soil and environmental parameters.",
        "precondition": "User has access to the Crop Recommendation system and has the required soil and environmental parameter values (N, P, K, temperature, humidity, pH, rainfall) available.",
        "actors": "['User']",
        "steps": "1: User navigates to the Predict section of the UiPath Apps 2: User enters the corresponding nutrient values of the soil, i.e., N, P, K ratios 3: User enters the temperature in degrees Celsius, relative humidity in percentage, pH value of the soil, and the rainfall in mm 4: The system processes the entered values 5: The Crop Recommender system suggests the type of crop/fruit to grow in order to increase production based on the entered parameters"
      },
      {
        "name": "Updating Soil and Environmental Parameter Values",
        "scenario": "A user updates the soil and environmental parameter values to get updated recommendations for suitable crops to grow.",
        "precondition": "User has accessed the Crop Recommendation system and has previously entered the soil and environmental parameter values.",
        "actors": "['User']",
        "steps": "1: User navigates to the section for updating soil and environmental parameter values in the Crop Recommendation system 2: User modifies the existing values of N, P, K ratios, temperature, humidity, pH, and rainfall 3: User submits the updated values 4: The system processes the updated values 5: The Crop Recommender system provides new crop recommendations based on the modified parameters"
      },
      {
        "name": "Viewing Recommended Crops",
        "scenario": "A user views the list of recommended crops/fruits generated by the Crop Recommendation system based on the entered soil and environmental parameters.",
        "precondition": "User has entered the soil and environmental parameter values and has accessed the Crop Recommendation system.",
        "actors": "['User']",
        "steps": "1: User navigates to the section for viewing recommended crops/fruits in the Crop Recommendation system 2: The system displays the list of recommended crops/fruits along with relevant details such as expected yield or suitability for the specified conditions"
      }
    ],
    "user_story_gpt": "As a user, I want to access the Crop Recommendation System to input and update soil and environmental parameters like nutrient levels, temperature, and rainfall, so that I can receive accurate suggestions for suitable crops to cultivate. The system should process these parameters and provide me with a list of recommended crops or fruits, including detailed information about their expected yield and suitability, to optimize my agricultural production decisions.",
    "user_story_llama": "As a user, I want to access the Crop Recommendation system so that I can get suggestions for suitable crops to grow based on soil and environmental parameters such as N, P, K ratios, temperature, humidity, pH, and rainfall. I also want to be able to update these parameter values at any time, so the system can provide me with new and updated crop recommendations. Furthermore, I want to be able to view the list of recommended crops/fruits, along with relevant details such as expected yield or suitability for the specified conditions, allowing me to make informed decisions about which crops to grow and how to optimize production.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Data Collection",
        "scenario": "UiPath robots collect sales data from various sources for demand forecasting.",
        "precondition": "UiPath robots are operational and have access to the required data sources.",
        "actors": "UiPath robots",
        "steps": "1: UiPath robots initiate data collection from POS systems, e-commerce platforms, and social media. 2: Data collection process captures historical sales data and relevant factors. 3: Collected data is stored in a designated repository for further processing."
      },
      {
        "name": "Data Preprocessing",
        "scenario": "Preprocessing of collected sales data to prepare it for demand forecasting model development.",
        "precondition": "Collected sales data is available and accessible to UiPath Studio.",
        "actors": "UiPath Studio",
        "steps": "1: UiPath Studio performs data cleaning to handle missing or inconsistent data. 2: Normalization of data and feature engineering is carried out using UiPath Studio's data manipulation activities. 3: Preprocessed data is stored for model development."
      },
      {
        "name": "Model Development",
        "scenario": "Utilizing UiPath AI Center to build and train a demand forecasting model using machine learning algorithms.",
        "precondition": "Preprocessed sales data is available within UiPath AI Center for model development.",
        "actors": "UiPath AI Center",
        "steps": "1: Selection of appropriate machine learning algorithms, such as regression, time series analysis, or deep learning, for model development. 2: Training the demand forecasting model using historical sales data and relevant factors. 3: Validation of the model's performance and accuracy for demand forecasting."
      },
      {
        "name": "Model Deployment",
        "scenario": "Deployment of the trained demand forecasting model to UiPath AI Center for integration with automation processes.",
        "precondition": "Trained demand forecasting model is available and validated for deployment.",
        "actors": "UiPath AI Center",
        "steps": "1: Integration of the trained model with automation processes within UiPath AI Center. 2: Testing the integrated model's functionality and compatibility with other automated tasks. 3: Deployment of the model for real-time demand forecasting and inventory management."
      },
      {
        "name": "UiPath Apps Activation",
        "scenario": "Activation of UiPath Apps for stock managers to monitor and manage stock levels.",
        "precondition": "UiPath Apps are installed and accessible to stock managers.",
        "actors": "Stock Managers, UiPath Apps",
        "steps": "1: Stock managers access the UiPath Apps dashboard for real-time stock monitoring. 2: The dashboard displays a list of best-selling products at risk of going out of stock. 3: Stock managers initiate orders by clicking on 'place the order' triggering automated order placement by UiPath robots."
      }
    ],
    "user_story_gpt": "As a stock manager, I want to leverage UiPath robots to automatically collect sales data from various sources so that we can utilize it for accurate demand forecasting. The system should preprocess this data to clean and normalize it in preparation for model development. With the help of the UiPath AI Center, I need to create and train a demand forecasting model using advanced machine learning algorithms. Once trained, the model should be seamlessly integrated and deployed for real-time forecasting and inventory management. Additionally, I want to use UiPath Apps to monitor stock levels effectively, receive alerts for best-selling products at risk of running out of stock, and automate the reordering process, ensuring optimal inventory levels are maintained at all times.",
    "user_story_llama": "As a stock manager, I want to utilize UiPath robots and UiPath Studio so that sales data can be collected from various sources, preprocessed, and used to develop a demand forecasting model using UiPath AI Center, enabling accurate predictions of stock levels. Furthermore, I want the trained model to be deployed to UiPath AI Center, integrated with automation processes, and used to power UiPath Apps, providing me with real-time monitoring and management of stock levels, including alerts for best-selling products at risk of going out of stock, and allowing me to initiate automated orders directly from the UiPath Apps dashboard, thereby streamlining inventory management and minimizing stockouts.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Input Channel Registration",
        "scenario": "A new input channel is registered in the system.",
        "precondition": "The admin has the necessary permissions to register new input channels.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the input channel registration page 2: Admin fills in the details of the new input channel (e.g., channel name, description, contact information) 3: Admin submits the registration form 4: The system validates the provided details 5: The system registers the new input channel"
      },
      {
        "name": "Input Classification",
        "scenario": "An input is classified into predefined categories using AI.",
        "precondition": "The input is available in the system and the AI engine is active.",
        "actors": "AI Engine",
        "steps": "1: AI Engine receives the input 2: AI Engine processes the input using predefined classification algorithms 3: The system verifies the classification results 4: The system assigns the input to the respective category (e.g., customer complaints, service requests, information requests)"
      },
      {
        "name": "Peak Detection",
        "scenario": "The system detects peaks in the incoming inputs",
        "precondition": "There are incoming inputs and the peak detection module is active.",
        "actors": "System",
        "steps": "1: The system continuously monitors the volume of incoming inputs 2: The system compares the current input volume with historical data to identify peaks 3: When a peak is detected, the system triggers an alert or notification for the relevant personnel"
      },
      {
        "name": "Priority Setting for Employee Base",
        "scenario": "The system assigns priorities to the employee base based on input classification and peak detection.",
        "precondition": "Inputs are classified and peaks are detected.",
        "actors": "System",
        "steps": "1: The system evaluates the nature of classified inputs and the detected peaks 2: The system assigns priorities to different departments or personnel based on the evaluation 3: The priorities are communicated to the respective departments or personnel"
      }
    ],
    "user_story_gpt": "As an admin, I want to register new input channels in the system so that we can effectively handle various communications. Once the input is registered, the AI Engine should classify it into predefined categories, such as customer complaints or service requests, ensuring proper allocation. Furthermore, the system should detect any peaks in incoming inputs and alert relevant personnel, allowing us to respond promptly to increased demands. Finally, the system must assign priorities to departments based on the classification and detected peaks, ensuring that our resources are allocated efficiently and effectively.",
    "user_story_llama": "As an admin, I want to register new input channels in the system so that inputs can be received and classified into predefined categories using AI, allowing the system to detect peaks in incoming inputs and trigger alerts or notifications for relevant personnel. Furthermore, I want the system to assign priorities to the employee base based on the classified inputs and detected peaks, ensuring that different departments or personnel are informed of their respective priorities, enabling efficient management and response to the inputs.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Download Purchase Orders",
        "scenario": "The system automatically downloads purchase orders from email attachments.",
        "precondition": "Email containing purchase orders is received and accessible by the system. Purchase orders are named using a code as PO_xxx in the attchment",
        "actors": "['System']",
        "steps": "1: System accesses the email server to retrieve new emails with purchase order attachments 2: System downloads the purchase order attachments from the received emails"
      },
      {
        "name": "Extract PO Details and train PO ML Model",
        "scenario": "The system extracts purchase order details through Document understanding and training the PO ML model.",
        "precondition": "Purchase orders are successfully downloaded and accessible by the system.",
        "actors": "['System']",
        "steps": "1: System processes the purchase orders using Document understanding phases 2: System trains the PO ML model to extract relevant details from the purchase orders"
      },
      {
        "name": "Validate PO Details",
        "scenario": "The system detects any accuracy or business validation issues and creates a task in the action center for business validation, modification, and submission.",
        "precondition": "Purchase order details are extracted and processed by the system.",
        "actors": "['System', 'Business Users']",
        "steps": "1: System checks for accuracy and business validation issues in the extracted PO details 2: If issues are found, system creates a task in the action center for business users to validate, modify, and submit the details"
      },
      {
        "name": "Create Order in SAP",
        "scenario": "The system creates the purchase order in the SAP application to notify the respective stakeholders and initiate necessary actions.",
        "precondition": "PO details are validated and finalized by the business users.",
        "actors": "['System', 'SAP Application']",
        "steps": "1: System initiates the creation of the purchase order in the SAP application 2: SAP application processes the received order and notifies the respective stakeholders for further actions"
      }
    ],
    "user_story_gpt": "As a business user, I want the system to automatically download purchase orders from email attachments and process them with precision. The system should extract relevant details using Document Understanding and continuously train the PO ML model for improved accuracy. It must validate the extracted details, raising tasks in the action center if any issues are detected for further validation and modification. Finally, the validated purchase orders should be created in the SAP application to notify stakeholders and kickstart necessary actions efficiently.",
    "user_story_llama": "As a business user, I want the system to automatically download purchase orders from email attachments, extract the relevant details using document understanding and train the PO ML model, and then validate these details to ensure accuracy and compliance with business rules. If any issues are found during validation, I want the system to create a task in the action center for me to review, modify, and submit the corrected details. Finally, once the details are validated and finalized, I want the system to create the purchase order in the SAP application, notifying the respective stakeholders and initiating the necessary actions, so that I can efficiently manage and process purchase orders.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Upload Image from CCTV Camera",
        "scenario": "CCTV cameras detect motion and take screenshots in the coverage area.",
        "precondition": "Motion is detected within the camera's coverage area",
        "actors": "CCTV System, Motion Detection Software",
        "steps": "1: CCTV system detects motion in the coverage area 2: The camera takes a screenshot when motion is detected 3: The image is saved in a specified OneDrive location"
      },
      {
        "name": "Trigger UiPath Bot",
        "scenario": "An image is uploaded to the specified OneDrive location, triggering the UiPath bot integration",
        "precondition": "Image is uploaded to the specified OneDrive location",
        "actors": "OneDrive, UiPath Integration Service",
        "steps": "1: An image is uploaded to the specified OneDrive location 2: UiPath Integration Service detects the new image 3: UiPath bot is triggered upon detection of the new image"
      },
      {
        "name": "Move Image to Local Storage",
        "scenario": "UiPath bot moves the image from OneDrive to local storage for processing",
        "precondition": "UiPath bot is triggered, and an image is available in the specified OneDrive location",
        "actors": "UiPath Bot, Local Storage System",
        "steps": "1: UiPath bot identifies the new image in the specified OneDrive location 2: The bot initiates the process to move the image to the local storage for further analysis"
      },
      {
        "name": "Process Image Using Object Detection Model",
        "scenario": "UiPath Object Detection Model AI Centre processes the image from the local storage",
        "precondition": "The image is successfully moved to the local storage",
        "actors": "UiPath Object Detection Model AI Centre, Local Storage System",
        "steps": "1: UiPath Object Detection Model AI Centre receives the image from the local storage 2: The AI model processes the image to identify objects and patterns"
      },
      {
        "name": "Alert Generation for Mask Detection",
        "scenario": "The system detects whether a person is wearing a mask, and if not, triggers an alert",
        "precondition": "The image has been successfully processed, and the AI model has detected a person's face",
        "actors": "UiPath Object Detection Model AI Centre",
        "steps": "1: The AI model analyzes the image to determine if a person is not wearing a mask 2: If no mask is detected, the system triggers an alert for mask non-compliance"
      },
      {
        "name": "Alert Generation for Person Count Threshold",
        "scenario": "The system triggers alerts if the number of persons detected in the image exceeds the predefined threshold",
        "precondition": "The image has been successfully processed, and the AI model has detected persons",
        "actors": "UiPath Object Detection Model AI Centre",
        "steps": "1: The AI model determines the number of persons in the image 2: If the person count exceeds the predefined threshold, the system triggers an alert for overcrowding"
      },
      {
        "name": "Prevention of Suicides and Intrusions",
        "scenario": "The system is able to prevent suicides and intrusion cases based on image analysis",
        "precondition": "The image has been successfully processed, and the AI model has detected relevant patterns",
        "actors": "UiPath Object Detection Model AI Centre",
        "steps": "1: The AI model analyzes the image to detect patterns associated with suicides or intrusions 2: If such patterns are detected, the system takes preventive actions or triggers appropriate alerts"
      }
    ],
    "user_story_gpt": "As a security system operator, I want to automate the process of monitoring through CCTV cameras to effectively manage motion detection and safety compliance. The system will use CCTV to capture images upon motion detection and store them in OneDrive. Upon image upload, a UiPath bot will be triggered to transfer the images to local storage for processing. The UiPath Object Detection Model will analyze these images to identify objects and patterns, determining if there are individuals failing to wear masks or if the number of people exceeds safety thresholds. Alerts will be generated for any non-compliance or overcrowding, assisting in safety management. Additionally, the system will help in preventing suicides and intrusions by detecting pertinent patterns and triggering necessary alerts for timely intervention and prevention.\"}",
    "user_story_llama": "As a security administrator, I want the CCTV system to automatically detect motion and upload images to a specified OneDrive location, triggering the UiPath bot integration, so that the images can be moved to local storage for processing using the UiPath Object Detection Model AI Centre. The system should then analyze the images to detect objects, patterns, and persons, and generate alerts for mask non-compliance, overcrowding, and potential suicide or intrusion cases, enabling preventive actions to be taken, thereby enhancing the overall security and safety of the premises.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Capture Handwritten Feedback",
        "scenario": "Automated capturing of handwritten feedback from customers at the automobile service center.",
        "precondition": "Customer provides handwritten feedback on paper or a form",
        "actors": "['System', 'Customer']",
        "steps": "1: System processes the handwritten feedback using image recognition technology 2: System converts the handwritten feedback into digital text 3: System stores the digital feedback for further processing"
      },
      {
        "name": "Classify Feedback as Positive or Negative",
        "scenario": "Automated classification of customer feedback as positive or negative using machine learning integration.",
        "precondition": "Digital feedback is available for processing",
        "actors": "['System']",
        "steps": "1: System applies machine learning algorithms to analyze the content of the feedback 2: System categorizes the feedback as positive or negative based on predefined criteria 3: System stores the classified feedback for further actions"
      },
      {
        "name": "Upload Feedback to Social Media",
        "scenario": "Automated upload of classified feedback to the automobile service center's social media platforms.",
        "precondition": "Feedback has been classified as positive or negative",
        "actors": "['System']",
        "steps": "1: System identifies the positive feedback 2: System creates social media posts based on the positive feedback 3: System uploads the posts to the service center's social media accounts"
      },
      {
        "name": "Automated Email Follow-Up",
        "scenario": "Automated email sent to customers as a follow-up based on their feedback.",
        "precondition": "Feedback has been processed and classified",
        "actors": "['System', 'Customer']",
        "steps": "1: System identifies customers with negative feedback 2: System triggers automated emails to customers with negative feedback 3: Email includes a message acknowledging the feedback and providing contact information for further assistance"
      },
      {
        "name": "Customer Service Executive Follow-Up",
        "scenario": "Customer service executive reaches out to customers with negative feedback in person.",
        "precondition": "Customers have received automated follow-up emails",
        "actors": "['Customer Service Executive', 'Customer']",
        "steps": "1: Customer service executive is provided with the list of customers who gave negative feedback 2: Executive contacts the customers to address their concerns in person 3: Executive works on resolving the issues to improve customer satisfaction"
      }
    ],
    "user_story_gpt": "As a customer service manager at an automobile service center, I want a system that can automatically capture and digitize handwritten customer feedback using image recognition technology. Once converted to digital text, the feedback should be classified as positive or negative through machine learning algorithms. Positive feedback will be used to generate and upload posts on our social media platforms to boost our online presence. For negative feedback, the system will automatically send follow-up emails to acknowledge the concerns and provide assistance contact information. Additionally, customer service executives will receive a list of customers with negative feedback, allowing them to personally contact and resolve these issues, thus enhancing overall customer satisfaction.",
    "user_story_llama": "As a customer service manager at an automobile service center, I want the system to automatically capture handwritten feedback from customers, convert it into digital text, and classify it as positive or negative using machine learning integration, so that positive feedback can be uploaded to our social media platforms and negative feedback can be addressed through automated email follow-ups and in-person interactions with our customer service executives, ultimately improving customer satisfaction and our service center's online reputation.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Setup Screening process for Resumes/Profiles",
        "scenario": "Setup Automated screening of resumes and LinkedIn profiles to identify potential candidates for a job opening.",
        "precondition": "Availability of resumes and/or LinkedIn profiles for screening",
        "actors": "['HR Manager', 'Machine Learning Model']",
        "steps": "1: HR Manager initiates the screening process by providing job requirements and keywords. 2: Machine Learning Model processes the resumes/profiles and filters based on job requirements and other contributing factors. 3: The model performs trend analysis and considers candidate history (e.g., social presence, posts, paper presentations) to assess cultural fit."
      },
      {
        "name": "Shortlist Candidates",
        "scenario": "Automated shortlisting of candidates based on the screening results for further evaluation.",
        "precondition": "Completed screening process with identified potential candidates",
        "actors": "['HR Manager', 'Machine Learning Model']",
        "steps": "1: HR Manager reviews the shortlisted candidates from the screening results. 2: Machine Learning Model assists in identifying the candidates who are likely to be a good fit based on the job requirements and cultural fit assessment. 3: The model provides a ranked list of potential candidates for the next stage of the hiring process."
      },
      {
        "name": "Automated Email Outreach",
        "scenario": "Automatic sending of emails to potential candidates to inquire about their interest in job opportunities.",
        "precondition": "Shortlisted candidates identified from the screening process",
        "actors": "['HR Manager', 'Bot']",
        "steps": "1: Bot sends personalized emails to the shortlisted candidates to gauge their interest in job opportunities. 2: HR Manager monitors the responses and proceeds with further communication based on candidate responses."
      },
      {
        "name": "Automated Interview Scheduling",
        "scenario": "Automated scheduling of interviews for the shortlisted candidates based on technical panel availability.",
        "precondition": "Shortlisted candidates available for interview",
        "actors": "['HR Manager', 'Bot', 'Technical Panel']",
        "steps": "1: Bot schedules interviews for the shortlisted candidates based on the calendar availability of the technical panel members. 2: HR Manager oversees the interview scheduling process and makes necessary adjustments if required."
      }
    ],
    "user_story_gpt": "As an HR Manager, I want to automate the candidate screening process by utilizing a Machine Learning Model to efficiently filter resumes and LinkedIn profiles based on specific job requirements and cultural fit. Following this, I need the system to automatically shortlist and rank potential candidates for further evaluation. Once shortlisted, I wish to initiate personalized email outreach to gauge their interest in the job opportunities, followed by seamless interview scheduling that aligns with the availability of the technical panel, ensuring a smooth and efficient hiring process.",
    "user_story_llama": "As an HR Manager, I want to utilize a Machine Learning Model and automated tools so that I can efficiently setup a screening process for resumes and LinkedIn profiles to identify potential candidates for a job opening, and then shortlist them based on the screening results, taking into account job requirements and cultural fit. Additionally, I want a Bot to automatically send personalized emails to the shortlisted candidates to gauge their interest in the job opportunity. Once interested candidates are identified, I want the system to automate the scheduling of interviews based on the availability of the technical panel, allowing me to oversee and adjust the process as necessary, ultimately streamlining the hiring process and reducing manual effort.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Verify Order Creation in EBS Application",
        "scenario": "Validate that the order is created in the EBS application and cross-verify the information with the finance data spreadsheet.",
        "precondition": "Finance data and order creation data must be accessible and available for comparison.",
        "actors": "['Tester', 'EBS Application']",
        "steps": "1: Tester initiates the order creation process in the EBS application. 2: EBS Application processes the order creation request and generates the relevant order information. 3: Tester retrieves the finance data pertaining to the created order. 4: Tester compares the order information from the EBS application with the finance data spreadsheet. 5: The order information is validated for accuracy and correctness."
      },
      {
        "name": "Perform Revenue Calculation",
        "scenario": "Automate revenue calculations for the order scenarios uploaded in the test suite.",
        "precondition": "Test suite must contain the relevant order scenarios and the required finance data for revenue calculation.",
        "actors": "['UiPath', 'Test Suite']",
        "steps": "1: UiPath accesses the test suite and retrieves the order scenarios for revenue calculation. 2: UiPath performs automated calculations using the finance data for each scenario. 3: UiPath generates the calculated revenue for each scenario. 4: The calculated revenue is cross-verified for accuracy."
      },
      {
        "name": "Validate Frontend to Backend Data",
        "scenario": "Automate the validation process to ensure consistency between frontend and backend data.",
        "precondition": "Frontend and backend data must be accessible for comparison and validation.",
        "actors": "['UiPath', 'Frontend', 'Backend']",
        "steps": "1: UiPath retrieves frontend data from the UI components. 2: UiPath accesses and retrieves corresponding backend data. 3: UiPath compares the frontend data with the backend data to validate consistency. 4: Any inconsistencies or disparities are flagged for further investigation."
      }
    ],
    "user_story_gpt": "As a quality assurance specialist, I want to use automated tools like UiPath to streamline the validation and verification processes in our EBS application. First, the system should allow me to verify that order creations are accurately reflected by comparing them with finance data spreadsheets. Second, it should facilitate automated revenue calculations by accessing relevant test suites and finance scenarios, ensuring that calculations are precise and cross-verified. Additionally, the system should validate that frontend data matches backend data, flagging any inconsistencies for further review to maintain data integrity across the application. This will enhance the efficiency and reliability of our testing processes.",
    "user_story_llama": "As a tester, I want to utilize the EBS application and UiPath automation so that I can verify the creation of orders in the EBS application, cross-verifying the information with finance data spreadsheets to ensure accuracy. Additionally, I want the system to perform automated revenue calculations for various order scenarios uploaded in the test suite, using finance data to generate calculated revenue for each scenario. Furthermore, the system should validate the consistency of data between the frontend and backend systems, flagging any inconsistencies for further investigation, thereby ensuring that all data remains consistent and reliable throughout the application.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Trigger Attended Bot",
        "scenario": "User triggers the Attended Bot to initiate the extraction and validation process for background verification documents.",
        "precondition": "User has downloaded the documents from the internal application to the local folder.",
        "actors": "['User']",
        "steps": "1: User triggers the Attended Bot for the background verification process. 2: Bot fetches all the folders and documents from the specified local folder. 3: Bot segregates PDF and Excel documents separately for processing."
      },
      {
        "name": "Process Excel Document",
        "scenario": "Bot processes the Excel document for extracting required education and employment information.",
        "precondition": "Bot has received an Excel document for processing.",
        "actors": "['Bot']",
        "steps": "1: Bot reads and extracts required education and employment information from the Excel document. 2: Bot stores the extracted information into a collection for data entry."
      },
      {
        "name": "Process PDF Document",
        "scenario": "Bot processes the PDF document for extracting required education and employment details.",
        "precondition": "Bot has received a PDF document for processing.",
        "actors": "['Bot']",
        "steps": "1: Bot extracts required education and employment details from each PDF document. 2: Bot stores the extracted details into a collection for data entry."
      },
      {
        "name": "Move Documents",
        "scenario": "Bot moves the processed documents to a specific completed folder.",
        "precondition": "Bot has extracted and processed the required information from the documents.",
        "actors": "['Bot']",
        "steps": "1: Bot moves the processed documents from the current folder to a designated completed folder."
      },
      {
        "name": "Data Entry on Web Application",
        "scenario": "Bot logs in to the web application, navigates to the required screen, and performs data entry.",
        "precondition": "Bot has the required information extracted and stored for data entry.",
        "actors": "['Bot']",
        "steps": "1: Bot logs in to the web application. 2: Bot navigates to the designated screen for data entry. 3: Bot uploads education, employment, and personal documents and information into the required fields. 4: Bot submits the record if there are no errors on the screen."
      },
      {
        "name": "Logout and Reporting",
        "scenario": "Bot logs out of the web application and captures the success/failure details into an excel file.",
        "precondition": "Bot has completed the data entry process on the web application.",
        "actors": "['Bot']",
        "steps": "1: Bot performs the logout step on the web application. 2: Bot captures all the success/failure details and exceptions into an excel file."
      },
      {
        "name": "Send Final Report",
        "scenario": "Bot sends the final report with success and exception details for each candidate to a specific mail ID.",
        "precondition": "Bot has captured all the success/failure details and exceptions in an excel file.",
        "actors": "['Bot']",
        "steps": "1: Bot sends the final report via email to the specified mail ID."
      }
    ],
    "user_story_gpt": "As a user involved in the background verification process, I want to trigger an Attended Bot to efficiently handle the extraction and validation of documents. This process involves downloading documents to a local folder, where the Bot can effectively segregate and process PDF and Excel files. For Excel documents, the Bot will extract crucial educational and employment information, while doing the same for PDF files. After processing, the Bot will move files to a designated completed folder. It will also perform data entry on a web application, ensuring all necessary educational and employment details are accurately uploaded. Finally, the Bot will logout from the application, record the success/failure of each entry in an Excel report, and send a final report via email, providing comprehensive information about the process for each candidate.",
    "user_story_llama": "As a user, I want to trigger an Attended Bot so that it can initiate the extraction and validation process for background verification documents, by fetching and segregating the documents from a local folder. The bot should then process the Excel and PDF documents to extract the required education and employment information, and store it in a collection for data entry. After processing, the bot should move the documents to a completed folder. The bot should then log in to the web application, navigate to the required screen, and perform data entry by uploading the extracted information and documents. Once the data entry is complete, the bot should log out of the web application and capture the success/failure details in an excel file. Finally, the bot should send a final report with the success and exception details for each candidate to a specific mail ID, providing a comprehensive overview of the background verification process.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "User Input Data for Stroke Prediction",
        "scenario": "A user provides input data to the UiPath App for predicting the vulnerability to a brain stroke.",
        "precondition": "The UiPath App is installed and accessible to the user.",
        "actors": "['User']",
        "steps": "1: User opens the UiPath App on their device. 2: User enters the required input data such as age, blood pressure, cholesterol level, exercise habits, and smoking status. 3: The UiPath App processes the input data using UiPath AI Centre. 4: The UiPath App predicts the vulnerability to a brain stroke based on the input data. 5: The prediction result is displayed to the user."
      },
      {
        "name": "Integration with UiPath Orchestrator Process",
        "scenario": "The UiPath App integrates with UiPath Orchestrator Process for managing the prediction of barinstroke.",
        "precondition": "The UiPath Orchestrator Process is set up and connected to the UiPath App.",
        "actors": "['UiPath App', 'UiPath Orchestrator Process']",
        "steps": "1: The UiPath App sends the prediction task to the UiPath Orchestrator Process. 2: UiPath Orchestrator Process receives the task from the UiPath App. 3: UiPath Orchestrator Process manages the task scheduling and resource allocation for the prediction process. 4: The prediction result is sent back to the UiPath App by UiPath Orchestrator Process. 5: The UiPath App receives and displays the prediction result to the user."
      }
    ],
    "user_story_gpt": "As a user, I want to input my health data into the UiPath App to understand my vulnerability to a brain stroke. The app should process this data using its AI capabilities to provide a prediction which will help me take preventive measures if necessary. Additionally, the app should integrate seamlessly with the UiPath Orchestrator Process to manage predictions efficiently, ensuring accurate and timely results are shown to me.",
    "user_story_llama": "As a user, I want to use the UiPath App to predict my vulnerability to a brain stroke by providing input data such as age, blood pressure, cholesterol level, exercise habits, and smoking status, so that I can receive a personalized prediction result. The UiPath App should integrate with the UiPath Orchestrator Process to manage the prediction task, allowing for efficient task scheduling and resource allocation, and ultimately display the prediction result to me, enabling me to take informed decisions about my health.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Track Number of Emails Sent",
        "scenario": "To track the number of emails sent out in the organization by a user to identify spam, unwanted, or bulk emails.",
        "precondition": "Bot is active and monitoring the organization's email server.",
        "actors": "['Bot', 'IT Server Team', 'Users']",
        "steps": "1: Bot continuously monitors the count of emails sent out by users in the organization. 2: Bot checks the count of emails sent out by each user per day and compares it to the set threshold for email volume per user per hour. 3: If a user exceeds the set threshold and is not on the whitelist, the bot triggers an alert to the IT server management team. 4: The bot automatically blocks the user's email ID from sending any more emails if it crosses the threshold and is not whitelisted."
      },
      {
        "name": "Notify IT Server Team of High Email Volume",
        "scenario": "To inform the IT server team of users sending out excessive emails within a day, exceeding the set threshold.",
        "precondition": "Bot is active and monitoring the organization's email server.",
        "actors": "['Bot', 'IT Server Team']",
        "steps": "1: Bot calculates the number of emails sent out by each user in the organization for the day. 2: If any user sends out emails above the set threshold, the bot triggers a notification to the IT server team. 3: The IT server team is informed about the user's excessive email sending activity for further action."
      },
      {
        "name": "Predict Future Email Volume",
        "scenario": "To predict the number of emails that will be sent out in the coming week or year using the data collected.",
        "precondition": "Bot has collected sufficient data on email sending patterns within the organization.",
        "actors": "['Bot', 'IT Server Team']",
        "steps": "1: Bot analyses the historical data on email volume to predict the number of emails that will be sent out in the upcoming week or year. 2: The prediction is based on the historical patterns and is presented to the IT server team for capacity planning decisions. 3: The server team utilizes the prediction to adjust server capacity or threshold values as needed."
      },
      {
        "name": "Store Data in Database and Display on Dashboard",
        "scenario": "To store the email tracking data in a database and present it on a dashboard for the IT server team's visibility.",
        "precondition": "Bot has collected email tracking data and needs to store and display the data for further analysis.",
        "actors": "['Bot', 'IT Server Team']",
        "steps": "1: Bot stores the collected email tracking data in a database for future reference. 2: The stored data is made available on a dashboard for the IT server team to monitor and analyze the email sending patterns within the organization."
      }
    ],
    "user_story_gpt": "As a member of the IT server team, I want to use a monitoring bot to track the number of emails sent by each user within the organization. This ensures that any user exceeding the set email volume threshold can be detected and managed efficiently. The bot should notify us if someone sends excessive emails and automatically block any suspicious accounts not whitelisted. Additionally, the bot should predict future email volumes based on historical data to aid in our capacity planning. All this information should be stored in a database and displayed on a dashboard for easy visibility and analysis of email sending patterns across the organization.",
    "user_story_llama": "As a member of the IT server team, I want the bot to track the number of emails sent out by users in the organization, so that it can identify and alert us to potential spam, unwanted, or bulk emails by comparing the email volume to a set threshold. The system should notify us when a user exceeds this threshold, and also predict future email volume based on historical data to inform our capacity planning decisions. Additionally, the bot should store the email tracking data in a database and display it on a dashboard, providing us with visibility into email sending patterns within the organization, and enabling us to take further action, such as adjusting server capacity or threshold values as needed, and automatically blocking email IDs that exceed the threshold and are not whitelisted.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Extract Data from Packing List",
        "scenario": "The system extracts key data from a packing list document provided by the vendor.",
        "precondition": "A packing list document is available for processing.",
        "actors": "['System']",
        "steps": "1: The system processes the packing list document using the custom-trained ML package for packing lists and invoices. 2: The system extracts relevant data such as item names, quantities, and descriptions. 3: The extracted data is saved into variables for further processing."
      },
      {
        "name": "Extract Data from Invoice",
        "scenario": "The system extracts key data from an invoice document provided by the vendor.",
        "precondition": "An invoice document is available for processing.",
        "actors": "['System']",
        "steps": "1: The system processes the invoice document using the custom-trained ML package for packing lists and invoices. 2: The system extracts relevant data such as invoice number, date, total amount, and vendor details. 3: The extracted data is saved into variables for further processing."
      },
      {
        "name": "Compare Captured Data for Accuracy",
        "scenario": "The system compares the extracted data from the packing list and the invoice for accuracy.",
        "precondition": "Data has been extracted from both the packing list and the invoice.",
        "actors": "['System']",
        "steps": "1: The system compares the extracted data from the packing list with the data from the invoice to ensure consistency. 2: Any discrepancies or inconsistencies are flagged for further review."
      },
      {
        "name": "Enter Data into Web Based System",
        "scenario": "The system enters the accurate captured data into a web-based system for further processing.",
        "precondition": "Accurate data from the packing list and invoice has been validated.",
        "actors": "['System']",
        "steps": "1: The system populates the web-based system with the accurate captured data. 2: The data is used to generate a notification email to the contact in the country of destination."
      }
    ],
    "user_story_gpt": "As a logistics coordinator, I want the system to automatically extract key data from vendor-provided packing lists and invoices using a custom-trained ML package, ensuring all essential item details, quantities, invoice numbers, and vendor information are accurately captured. Additionally, the system should compare extracted data for consistency between documents, flagging any discrepancies for review. Once validated, the system should enter this accurate data into a web-based platform to facilitate further processing and generate notification emails for relevant contacts at the destination country.",
    "user_story_llama": "As a system, I want to extract key data from packing list and invoice documents provided by vendors, using a custom-trained ML package, so that I can compare the extracted data for accuracy and consistency. Once the data is validated, I want to enter the accurate captured data into a web-based system for further processing, generating a notification email to the contact in the country of destination, thereby automating the data extraction and entry process, reducing errors, and increasing efficiency.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Administer Prescription Reminder",
        "scenario": "A care taker receives a notification for administering medication to a patient at a specific time.",
        "precondition": "Care taker must have the app installed and be responsible for administering medications to patients.",
        "actors": "Care Taker",
        "steps": "1: Care taker sets up the medication schedule for each patient within the app. 2: At the specified time, the app sends a notification to the care taker for administering the medication. 3: The care taker administers the medication to the patient and marks it as completed within the app."
      },
      {
        "name": "Medical Information Inquiry",
        "scenario": "A care taker seeks information about a general medical problem, treatment, side effects, or home remedies using the chatbot feature.",
        "precondition": "Care taker must have access to the app's chatbot feature.",
        "actors": "Care Taker",
        "steps": "1: Care taker accesses the chatbot feature within the app. 2: Care taker inputs the query regarding a medical problem, treatment, side effects, or home remedies. 3: The chatbot processes the query and provides relevant information to the care taker."
      }
    ],
    "user_story_gpt": "As a care taker, I want to have access to an app that helps me manage medication schedules by sending timely reminders, so I can ensure medications are administered to patients correctly and on time. Additionally, the app should provide a chatbot feature that allows me to quickly inquire about general medical issues, treatments, side effects, or home remedies, enabling me to provide informed care to the patients.",
    "user_story_llama": "As a care taker, I want to use the app to manage and administer medications to my patients, so that I can receive reminders and notifications at the right time to ensure they take their medications as prescribed. Additionally, I want to be able to inquire about general medical information, such as problems, treatments, side effects, and home remedies, using the chatbot feature, so that I can provide better care and support to my patients, and make informed decisions about their health and well-being.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account to interact with the Cloth Consultant Bot.",
        "precondition": "User must have a registered account and login credentials.",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the Cloth Consultant Bot interface. 2: Registered User enters their login credentials (e.g., username, password). 3: Registered User submits the login form. 4: The system validates the login credentials. 5: The system grants access to the user account."
      },
      {
        "name": "Select Climate Condition",
        "scenario": "User selects a climate condition for which they need cloth suggestions.",
        "precondition": "User must be logged in and navigated to the Bot's recommendation section.",
        "actors": "User",
        "steps": "1: User navigates to the climate selection section within the Cloth Consultant Bot interface. 2: User selects a specific climate condition (e.g., hot, cold, rainy). 3: The system registers the selected climate condition for further use."
      },
      {
        "name": "Receive Cloth Recommendation",
        "scenario": "The user receives personalized cloth recommendations based on the selected climate condition.",
        "precondition": "User must have selected a climate condition and be logged into the Bot interface.",
        "actors": "User",
        "steps": "1: The system processes the selected climate condition. 2: The system analyzes the user's preferences and previous purchases (if available). 3: The system generates personalized cloth recommendations based on the climate condition and user preferences. 4: The recommendations are displayed to the user within the Bot interface."
      },
      {
        "name": "View Cloth Details",
        "scenario": "User views detailed information about a recommended cloth item.",
        "precondition": "User must have received cloth recommendations within the Bot interface.",
        "actors": "User",
        "steps": "1: User selects a specific cloth item from the recommended list. 2: The system fetches and displays detailed information about the selected cloth item, including fabric, size availability, price, and customer reviews."
      },
      {
        "name": "Add Cloth to Cart",
        "scenario": "User adds a recommended cloth item to the shopping cart for potential purchase.",
        "precondition": "User must have logged in and received cloth recommendations within the Bot interface.",
        "actors": "User",
        "steps": "1: User selects a specific cloth item from the recommended list. 2: User clicks on the 'Add to Cart' option for the selected cloth item. 3: The system adds the selected cloth item to the user's shopping cart for further consideration."
      }
    ],
    "user_story_gpt": "As a registered user, I want to log into the Cloth Consultant Bot and select a climate condition so that I can receive personalized clothing recommendations tailored to my preferences and needs. After reviewing the detailed information about recommended items, I want to easily add my selected cloth items to my shopping cart for potential purchase, ensuring a seamless and customized shopping experience.",
    "user_story_llama": "As a registered user, I want to log into the Cloth Consultant Bot so that I can select a climate condition and receive personalized cloth recommendations based on my preferences and the chosen climate. I also want to be able to view detailed information about each recommended cloth item, including fabric, size availability, price, and customer reviews. Furthermore, I want to be able to add my preferred cloth items to a shopping cart for potential purchase, allowing me to easily manage and consider my selections within the Bot interface.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Dispatcher Receives Request",
        "scenario": "The support team receives a request for distribution list creation via email.",
        "precondition": "Email system is set up and functioning, User has access to email communication with the support team",
        "actors": "Support Team, User",
        "steps": "1: User sends an email request for distribution list creation to the support team 2: The support team receives the email request 3: The robot checks all emails and filters them based on the subject for distribution list creation requests"
      },
      {
        "name": "Robot Processes Email Request",
        "scenario": "For each matched email, the robot performs the necessary steps to process the distribution list creation request",
        "precondition": "Email request matches the criteria for a distribution list creation request",
        "actors": "Robot",
        "steps": "1: Robot replies to the email sender, updating them that the process is in progress 2: Robot extracts the sender's email ID and necessary details from the email body (e.g., DL name, usernames, owner name, country code) 3: Robot adds the extracted details as a queue item in orchestrator"
      },
      {
        "name": "Robot Processes Queue Item",
        "scenario": "The robot picks each request from the queue item and processes the distribution list creation",
        "precondition": "Queue item contains a valid distribution list creation request",
        "actors": "Robot",
        "steps": "1: Robot picks the request from the queue item 2: Robot adds the country code as a prefix to the distribution list (if required by customer) 3: Robot verifies the existence of the owner in Active Directory (AD) 4: If owner exists in AD, the robot creates the DL in the exchange server and adds the owner to it 5: If owner doesn't exist in AD, the robot emails the user with the status and stops the process 6: If DL creation is successful, the robot proceeds to the next step. Otherwise, the robot emails the user and stops the process 7: Robot checks the existence of the users in Active Directory and adds only valid users as members to the distribution list 8: Finally, the robot emails the user about the successful creation of the distribution list"
      }
    ],
    "user_story_gpt": "As a user, I want to send a request for creating a distribution list via email to the support team so that the process can be automated. First, the support team will receive and filter these requests, identifying those related to distribution list creation. Next, the robot will acknowledge the request, extract necessary details, and queue the task for processing. The robot then handles the task, ensuring that all details such as owner and user information are verified against Active Directory. If valid, the distribution list is successfully created in the exchange server, and I am informed of the completion. This ensures efficiency and accuracy in managing distribution list requests.",
    "user_story_llama": "As a user, I want to request the creation of a distribution list via email to the support team, so that the robot can automatically process my request, extract the necessary details, and create the distribution list with the specified owner and members, while also handling cases where the owner or members do not exist in Active Directory, and finally notify me of the creation status, thereby streamlining the distribution list creation process and reducing manual effort.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Bot Start on Scheduled Time",
        "scenario": "The bot initiates and starts processing according to the scheduled time.",
        "precondition": "Bot is installed and configured with the scheduled time for execution.",
        "actors": "Bot",
        "steps": "1: Bot triggers as per the scheduled time. 2: Bot reads the input file for the details of the files to be processed."
      },
      {
        "name": "Download File from Local Drive",
        "scenario": "The bot downloads the files to the local drive upon meeting the specified conditions.",
        "precondition": "Bot has determined that the file needs to be downloaded to the local drive.",
        "actors": "Bot",
        "steps": "1: Bot checks the cycle time and process file status in the input file. 2: If cycle time is more than a year and process file status is yes, and download status is successful, the bot downloads the files to the local drive."
      },
      {
        "name": "Check File Size",
        "scenario": "The bot checks the size of the downloaded file.",
        "precondition": "Bot has downloaded the file to the local drive.",
        "actors": "Bot",
        "steps": "1: Bot checks the size of the downloaded file."
      },
      {
        "name": "Upload File to AWS S3 Bucket",
        "scenario": "The bot uploads the file to the AWS S3 bucket after checking its size.",
        "precondition": "Bot has successfully downloaded the file to the local drive and determined its size.",
        "actors": "Bot",
        "steps": "1: If the file size is less than 20GB, the bot directly uploads it to the AWS S3 bucket. 2: If the file size is larger than 20GB and contains more than 1 file, the bot merges them into one zip file. 3: The bot then uploads the file or the zip file to the AWS S3 bucket."
      }
    ],
    "user_story_gpt": "As an admin, I want to use a bot that automatically triggers at scheduled times to process files systematically. The bot should read input details, download necessary files to a local drive, and then evaluate their sizes. Depending on the file size, the bot should either directly upload the file to an AWS S3 bucket or merge and zip files larger than 20GB before uploading. This ensures efficient and organized file management in our system.",
    "user_story_llama": "As a bot administrator, I want the bot to start processing at a scheduled time, so that it can automatically download files to the local drive based on specified conditions, such as cycle time and process file status. The bot should then check the size of the downloaded files and upload them to an AWS S3 bucket, handling large files by merging them into a zip file if necessary, thereby ensuring efficient and automated file management.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Extract Speed Records",
        "scenario": "Collect the speed records of various drivers during races on the same circuit.",
        "precondition": "Speed records and race data are available for extraction and analysis.",
        "actors": "Data Analyst, System",
        "steps": "1: Data Analyst accesses the database or system containing the speed records and race data. 2: System provides the necessary interface for extracting the speed records. 3: Data Analyst specifies the criteria for the extraction, such as circuit name and race dates. 4: System retrieves the speed records of various drivers for the specified races on the circuit."
      },
      {
        "name": "Collect Engine Information",
        "scenario": "Gather details of the engines used by the drivers during the races on the same circuit.",
        "precondition": "Information about the engines used by each driver is available.",
        "actors": "Data Analyst, System",
        "steps": "1: Data Analyst accesses the relevant database or system housing the engine information. 2: System provides the necessary interface for collecting engine details. 3: Data Analyst specifies the criteria for engine data collection, such as race dates and driver IDs. 4: System retrieves the engine information for the specified races and drivers."
      },
      {
        "name": "Analyze Driver Skills",
        "scenario": "Analyze the driver skills based on the extracted speed records and engine information.",
        "precondition": "Speed records and engine information for the drivers are available for analysis.",
        "actors": "Data Analyst, Performance Evaluation System",
        "steps": "1: Data Analyst combines the speed records and engine information to correlate driver performance. 2: Performance Evaluation System processes the aggregated data to assess the drivers' skills. 3: Performance Evaluation System generates skill insights based on the analysis. 4: Data Analyst reviews and interprets the skill insights to derive conclusions about driver skills."
      }
    ],
    "user_story_gpt": "As a data analyst, I want to efficiently extract and analyze speed records and engine information during races on the same circuit so that I can assess and evaluate driver skills. This requires accessing a system that simplifies the extraction of speed data and engine information based on specific criteria like circuit name, race dates, and driver IDs. By combining these data sets, the performance evaluation system will process and generate insights, allowing me to interpret and draw meaningful conclusions about the drivers' skills.",
    "user_story_llama": "As a Data Analyst, I want to use the System so that I can extract speed records of various drivers during races on the same circuit and collect engine information used by the drivers, allowing me to analyze driver skills based on the extracted data. The system should provide an interface for me to access and extract the necessary data, and then combine the speed records and engine information to correlate driver performance. Furthermore, the Performance Evaluation System should process the aggregated data to assess the drivers' skills and generate skill insights, enabling me to review and interpret the results to derive conclusions about driver skills, ultimately enhancing my understanding of driver performance on specific circuits.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Fill in Sharepoint Form",
        "scenario": "SME fills in the Sharepoint form based on client's request, providing details for the bot to perform specific actions.",
        "precondition": "SME has access to the Sharepoint form and the client's request details.",
        "actors": "Subject Matter Expert (SME)",
        "steps": "1: SME logs into the Sharepoint platform. 2: SME navigates to the designated form for website updates. 3: SME fills in the form with the required details as per the client's request. 4: SME submits the form for processing by the bot."
      },
      {
        "name": "Process Website Updates",
        "scenario": "UiPath bot processes the website updates based on the information provided by the SME through the Sharepoint form.",
        "precondition": "SME has filled in the Sharepoint form with the necessary details.",
        "actors": "UiPath bot",
        "steps": "1: UiPath bot retrieves the processed request from the Sharepoint form. 2: UiPath bot analyses the website update requirements as per the provided details. 3: UiPath bot performs the necessary actions on the website based on the processed request."
      },
      {
        "name": "Update JIRA with Processing Details",
        "scenario": "The system updates JIRA with accurate details of the processing carried out for the website updates.",
        "precondition": "Website updates have been processed by the UiPath bot.",
        "actors": "System",
        "steps": "1: The system captures the details of the processing carried out by the UiPath bot. 2: The system updates the respective JIRA ticket with accurate and comprehensive details of the processing."
      },
      {
        "name": "Create Ingest Process",
        "scenario": "System initiates the creation of an ingest process to further streamline the website update procedures.",
        "precondition": "Website updates have been successfully processed and JIRA has been updated with processing details.",
        "actors": "System",
        "steps": "1: The system identifies the need for creating an ingest process based on the processed website updates. 2: The system initiates the creation of an ingest process to streamline future website update procedures."
      }
    ],
    "user_story_gpt": "As a Subject Matter Expert (SME), I need to fill in a Sharepoint form detailing the client’s request for website updates so that the UiPath bot can accurately process and implement the updates. Once the updates are completed, the system will automatically update the corresponding JIRA ticket with all relevant processing details. To ensure efficiency and improve the process, the system will also initiate the creation of an ingest process, streamlining future website update procedures.",
    "user_story_llama": "As a Subject Matter Expert (SME), I want to fill in a Sharepoint form with the client's request details so that a UiPath bot can process the website updates based on the provided information. Additionally, I want the system to update JIRA with accurate details of the processing carried out for the website updates, and further streamline the website update procedures by creating an ingest process, thereby ensuring efficient and automated website maintenance, and enabling easy tracking and monitoring of website updates through JIRA.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Collect Meter Reading Data",
        "scenario": "The user captures a picture of the electricity meter and uploads it to the electricity board portal for the meter reading data collection.",
        "precondition": "The user needs to have access to the electricity board portal and a functioning electricity meter.",
        "actors": "['User', 'Meter Reader']",
        "steps": "1: User captures a picture of the electricity meter with a clear view of the reading. 2: User uploads the picture to the electricity board portal. 3: Meter reader retrieves the information from the uploaded picture and records the reading data. 4: Meter reader inputs the reading data into the billing system."
      },
      {
        "name": "Retrieve Data using Document Understanding and AI/ML",
        "scenario": "The system uses document understanding along with predefined AI/ML datasets to retrieve the information from the picture uploaded by the user.",
        "precondition": "The picture of the electricity meter reading needs to be uploaded to the system.",
        "actors": "['System']",
        "steps": "1: User uploads the picture of the electricity meter reading to the system. 2: System processes the picture using document understanding and AI/ML algorithms to extract the reading data."
      },
      {
        "name": "Calculation and Invoice Generation",
        "scenario": "The standalone RPA bots handle the calculation of electricity usage and generate an invoice for the user.",
        "precondition": "The electricity meter reading data must be available in the system.",
        "actors": "['RPA Bots']",
        "steps": "1: RPA bots calculate the electricity usage based on the provided meter reading data. 2: RPA bots generate an invoice for the user based on the calculated electricity usage."
      },
      {
        "name": "Send Invoice to Customers",
        "scenario": "The RPA bot sends the generated invoice to the end customers via email.",
        "precondition": "The invoice for the user must be generated by the system.",
        "actors": "['RPA Bot', 'End Customers']",
        "steps": "1: RPA bot sends the invoice to the end customer via email. 2: End customers receive the invoice in their email."
      },
      {
        "name": "Manage Due Date of Bill",
        "scenario": "The RPA bot takes care of setting the due date for the electricity bill.",
        "precondition": "The invoice for the user must be generated by the system.",
        "actors": "['RPA Bot']",
        "steps": "1: RPA bot sets the due date for the electricity bill based on predefined criteria."
      }
    ],
    "user_story_gpt": "As a user, I want to easily capture and upload a picture of my electricity meter to the electricity board portal, allowing the system to accurately retrieve and process my meter reading data using advanced document understanding and AI/ML algorithms. This will enable the system's RPA bots to efficiently calculate my electricity usage and automatically generate an invoice. Once the invoice is ready, I expect it to be emailed to me promptly, with a clearly set due date for payment, ensuring a seamless and efficient billing experience.",
    "user_story_llama": "As a user, I want to be able to capture and upload a picture of my electricity meter to the electricity board portal, so that the system can automatically collect the meter reading data using document understanding and AI/ML algorithms. The system should then use this data to calculate my electricity usage and generate an invoice, which will be sent to me via email by an RPA bot. Additionally, the RPA bot should set a due date for the bill based on predefined criteria, allowing me to manage my payments efficiently. This automated process should streamline the entire billing cycle, reducing manual errors and enabling timely payments.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Request Patient Health Record",
        "scenario": "A patient electronically requests access to their health record.",
        "precondition": "Patient must have a registered account with the healthcare system.",
        "actors": "Patient, Data Release Bot",
        "steps": "1: Patient logs into their account 2: Patient navigates to the health record section 3: Patient selects the option to request their health record 4: Data Release Bot receives the request 5: Data Release Bot collects relevant data from various systems 6: Data Release Bot packages the data for digital or print release 7: Data Release Bot intimates the patient to collect the data"
      },
      {
        "name": "Data Update and Management",
        "scenario": "The Data Compliance bot reviews and updates patient data to ensure compliance and accuracy.",
        "precondition": "Patient data must be available within the healthcare system.",
        "actors": "Data Compliance Bot",
        "steps": "1: Data Compliance Bot reviews patient data for completeness and accuracy 2: Data Compliance Bot identifies aged data based on HIPAA guidelines 3: Data Compliance Bot takes actions to archive or clean up aged data 4: Data Compliance Bot ensures all required data is updated and meets compliance standards"
      },
      {
        "name": "Archival of Patient Data",
        "scenario": "A bot automatically archives patient data to secondary storage after a certain age.",
        "precondition": "Data Compliance Bot must identify patient data that has reached the archival age threshold.",
        "actors": "Data Compliance Bot",
        "steps": "1: Data Compliance Bot identifies patient data that has reached the archival age threshold 2: Data Compliance Bot initiates the archival process to move the data to secondary storage"
      },
      {
        "name": "Disposal of Patient Data",
        "scenario": "A bot initiates the disposal of patient data in accordance with state or federal mandates or in case of patient's death.",
        "precondition": "Data Compliance Bot must identify patient data that needs to be disposed based on mandates or patient's status.",
        "actors": "Data Compliance Bot",
        "steps": "1: Data Compliance Bot identifies patient data that needs to be disposed based on mandates or patient's status 2: Data Compliance Bot initiates the disposal process"
      },
      {
        "name": "Release of Patient Health Record to Another Practice",
        "scenario": "A bot facilitates the release of a patient's health record to another healthcare practice.",
        "precondition": "The receiving healthcare practice must request the health record of the patient.",
        "actors": "Data Release Bot, Receiving Healthcare Practice",
        "steps": "1: Receiving Healthcare Practice requests the health record of the patient 2: Data Release Bot receives the request 3: Data Release Bot collects and packages the health record data 4: Data Release Bot releases the packaged data to the receiving healthcare practice"
      }
    ],
    "user_story_gpt": "As a patient using the healthcare system, I want to be able to effortlessly access and manage my health records through a secure online platform managed by efficient bots. I need to request my health record electronically, with the assurance that a Data Release Bot will seamlessly gather and present my data. Additionally, a Data Compliance Bot should continually review and update my data to ensure compliance and accuracy, archiving or disposing of it as needed. Moreover, when my health records need to be shared with another healthcare practice, the Data Release Bot should facilitate this securely, assuring that my sensitive information transfers smoothly and in compliance with all regulations.",
    "user_story_llama": "As a patient, I want to be able to electronically request access to my health record, and have the Data Release Bot collect and package the relevant data for digital or print release, while ensuring that my data is handled in compliance with regulations by the Data Compliance Bot, which reviews and updates my data for accuracy and completeness, archives it to secondary storage when it reaches a certain age, and disposes of it according to state or federal mandates or in case of my death. Additionally, I want the Data Release Bot to be able to facilitate the release of my health record to another healthcare practice when requested, so that my care can be seamlessly transferred between practices, and I can have confidence that my personal health information is being properly managed and protected throughout its lifecycle.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Request Email OTP",
        "scenario": "A user requests an email OTP for verification.",
        "precondition": "User must have access to the Email OTP Verification App and provide a valid email address.",
        "actors": "User",
        "steps": "1: User opens the Email OTP Verification App. 2: User enters a valid email address to receive the OTP. 3: User requests the app to send the OTP to the specified email address."
      },
      {
        "name": "Receive and Enter OTP",
        "scenario": "User receives the OTP in their email and enters it for verification.",
        "precondition": "User must have a valid email address where the OTP can be received.",
        "actors": "User",
        "steps": "1: User checks their email for the received OTP. 2: User enters the received OTP into the Email OTP Verification App. 3: User submits the OTP for verification."
      },
      {
        "name": "Access Database/File after Email OTP Verification",
        "scenario": "User accesses data from a database or file after successfully verifying with the email OTP.",
        "precondition": "User must have completed the Email OTP verification process.",
        "actors": "User",
        "steps": "1: User opens the database or file access interface. 2: User is prompted to enter the verified email OTP. 3: System validates the entered OTP and grants access to the database or file upon successful verification."
      },
      {
        "name": "Read Reports/Logs after Email OTP Verification",
        "scenario": "User reads the reports/logs after successfully verifying with the email OTP.",
        "precondition": "User must have completed the Email OTP verification process.",
        "actors": "User",
        "steps": "1: User navigates to the reports/logs section. 2: User is prompted to enter the verified email OTP. 3: System validates the entered OTP and allows the user to access the reports/logs upon successful verification."
      },
      {
        "name": "Secure Transaction with Email OTP Verification",
        "scenario": "User executes a secure transaction, such as making a payment, after verifying with the email OTP.",
        "precondition": "User must have completed the Email OTP verification process and initiated the secure transaction.",
        "actors": "User",
        "steps": "1: User initiates the secure transaction process (e.g., making a payment). 2: User is prompted to enter the verified email OTP for authentication. 3: System validates the entered OTP and authorizes the secure transaction upon successful verification."
      },
      {
        "name": "Access User-Specific Data after Email OTP Verification",
        "scenario": "User accesses user-specific data after successfully verifying with the email OTP.",
        "precondition": "User must have completed the Email OTP verification process.",
        "actors": "User",
        "steps": "1: User navigates to the user-specific data section. 2: User is prompted to enter the verified email OTP. 3: System validates the entered OTP and grants access to the user-specific data upon successful verification."
      }
    ],
    "user_story_gpt": "As a user, I want to securely verify my identity using an email OTP through the Email OTP Verification App. By entering my valid email address, I request and receive an OTP, which I use to verify myself. Once verified, I gain secure access to various functionalities such as accessing databases or files, reviewing reports/logs, executing secure transactions, and accessing user-specific data. This verification process ensures that only authorized users can proceed with these sensitive actions, enhancing the security of the system.",
    "user_story_llama": "As a user, I want to request and receive an email OTP for verification, so that I can securely access various resources and perform transactions. After receiving the OTP, I want to enter it into the Email OTP Verification App to complete the verification process. Once verified, I want to be able to access databases or files, read reports and logs, execute secure transactions such as making payments, and access user-specific data, with the system validating my verified email OTP at each step to ensure my identity and authorize my actions, thereby providing an additional layer of security to my interactions with the system.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Monitor Shared Mailbox",
        "scenario": "The bot continuously monitors the shared mailbox of the support team for new emails.",
        "precondition": "The bot is active and has access to the shared mailbox.",
        "actors": "['Bot']",
        "steps": "1: The bot checks for new emails in the shared mailbox. 2: When a new email is received, the bot proceeds to read the email details including subject, body, and attachments."
      },
      {
        "name": "Identify Support Ticket Type",
        "scenario": "The bot identifies the type of support ticket based on the keywords in the email content.",
        "precondition": "The bot has access to the email content and keywords list for ticket types.",
        "actors": "['Bot']",
        "steps": "1: The bot analyzes the email content for specific keywords related to different types of support requests. 2: Based on the identified keywords, the bot determines the appropriate support team to assign the ticket."
      },
      {
        "name": "Filter New or Update Request",
        "scenario": "The bot categorizes the email request as a new support request or an update request based on the email subject.",
        "precondition": "The bot has access to the email subject and ticketing system.",
        "actors": "['Bot']",
        "steps": "1: The bot checks the email subject to determine if it contains the ticket number. 2: If the email subject contains the ticket number, the bot categorizes it as an update request; otherwise, it categorizes it as a new request."
      },
      {
        "name": "Create New Ticket",
        "scenario": "The bot creates a new support ticket in the support tool based on the received email.",
        "precondition": "The bot has identified the ticket type and confirmed it as a new support request.",
        "actors": "['Bot']",
        "steps": "1: The bot enters the relevant details from the email into the support tool to create a new ticket."
      },
      {
        "name": "Update Ticket",
        "scenario": "The bot updates an existing support ticket in the support tool based on the received email.",
        "precondition": "The bot has identified the ticket type and confirmed it as an update request.",
        "actors": "['Bot']",
        "steps": "1: The bot retrieves the existing ticket details using the ticket number from the email subject. 2: The bot updates the ticket with any new information provided in the email."
      }
    ],
    "user_story_gpt": "As a support team manager, I want our bot to continuously monitor our shared mailbox and manage support tickets efficiently. The bot should read new emails, determine the type of support ticket using specific keywords, and categorize the request as new or an update based on the email subject. For new requests, the bot will create support tickets, and for updates, it will amend existing tickets with the new information. This automation ensures that our team consistently handles and prioritizes incoming support requests effectively and reduces manual workload.",
    "user_story_llama": "As a support team member, I want the bot to continuously monitor the shared mailbox for new emails, identify the type of support ticket based on the email content, and categorize the request as new or an update. If it's a new request, I want the bot to create a new support ticket in the support tool with the relevant details from the email. If it's an update request, I want the bot to update the existing ticket with any new information provided in the email, so that support requests are efficiently processed and tracked, and the support team can focus on resolving the issues rather than manually managing the tickets.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Process KYC Form for New Customer",
        "scenario": "A new customer's KYC form is processed in the system.",
        "precondition": "New customer has submitted the KYC form.",
        "actors": "KYC Processor, New Customer",
        "steps": "1: New customer's KYC form is received and logged into the system. 2: KYC Processor reviews the KYC form for completeness and accuracy. 3: System checks for any missing or inaccurate information. 4: If form is complete and accurate, system processes the KYC form and creates a new customer record. 5: If form is incomplete or inaccurate, system sends notification to the customer to provide the necessary information or make corrections."
      },
      {
        "name": "Handle Volume Spikes in KYC Form Submissions",
        "scenario": "The system manages a sudden surge in KYC form submissions efficiently.",
        "precondition": "Significant increase in KYC form submissions beyond the normal processing capacity.",
        "actors": "System",
        "steps": "1: System detects the volume spike in KYC form submissions. 2: System automatically scales resources to handle the increased load. 3: System ensures that processing time for each KYC form remains within acceptable limits. 4: System provides real-time status updates on the processing of KYC forms."
      },
      {
        "name": "Ensure Accuracy in Customer Data Verification",
        "scenario": "Customer data verification is performed with high accuracy during the KYC process.",
        "precondition": "KYC form is submitted for a new or existing customer.",
        "actors": "KYC Processor, System",
        "steps": "1: KYC Processor initiates the customer data verification process. 2: System cross-checks the provided customer data against reliable sources and databases. 3: System flags any discrepancies or inconsistencies in the customer data. 4: KYC Processor resolves flagged issues through further verification or clarification with the customer."
      },
      {
        "name": "Enhance KYC Process Efficiency",
        "scenario": "The KYC process is optimized to ensure faster and more efficient processing.",
        "precondition": "Ongoing KYC processing operations are in place.",
        "actors": "KYC Processor, System Administrator",
        "steps": "1: System Administrator identifies potential areas for improvement in the KYC process. 2: System Administrator implements process enhancements such as automation of certain verification steps and streamlining of data entry. 3: KYC Processor adapts to the updated process and provides feedback on the effectiveness of the enhancements. 4: System continuously monitors the impact of the enhancements on processing time and accuracy, making further adjustments as necessary."
      }
    ],
    "user_story_gpt": "As a KYC processor, I want an efficient system that processes new customer KYC forms accurately and swiftly, ensuring completeness and creating new customer records only when information is verified. The system should handle unexpected surges in submissions by scaling resources to maintain processing times within acceptable limits. It should also verify customer data with high precision, cross-referencing reliable sources to flag discrepancies, and enabling resolution through detailed verification. Continuous enhancements should be implemented to optimize the KYC process, utilizing automation and streamlined operations for greater efficiency and accuracy.",
    "user_story_llama": "As a KYC Processor, I want the system to efficiently process new customer KYC forms, ensuring accuracy and completeness, so that customer records are created swiftly and reliably. The system should be able to handle sudden spikes in KYC form submissions without compromising processing times, providing real-time status updates to manage expectations. Furthermore, I want the system to verify customer data with high accuracy, flagging any discrepancies for resolution, and continuously optimize the KYC process through automation and streamlining, allowing me to focus on high-value tasks and provide better service to our customers.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Extract Daily Data from Stock Exchange",
        "scenario": "The BOT extracts the daily CSV file containing results related to all the scrips for the current day from the stock exchange website.",
        "precondition": "BOT has access to the stock exchange website and the daily CSV file is available for extraction.",
        "actors": "BOT",
        "steps": "1: BOT navigates to the stock exchange website. 2: BOT locates and extracts the daily CSV file containing results for all the scrips of the current day. 3: BOT saves the file for further processing."
      },
      {
        "name": "Process Data and Store in Database",
        "scenario": "The BOT reads the extracted CSV file and adds the relevant data to the database.",
        "precondition": "BOT has the daily CSV file containing scrip results.",
        "actors": "BOT",
        "steps": "1: BOT reads the CSV file with the scrip results. 2: BOT processes the data and stores it in the database. 3: BOT verifies the successful addition of data in the database."
      },
      {
        "name": "Extract Top Performing Scrips",
        "scenario": "The BOT queries the database to extract data related to the top 5 scrips with the highest closing balance.",
        "precondition": "Data from the stock exchange has been added to the database.",
        "actors": "BOT",
        "steps": "1: BOT queries the database for the top 5 scrips with the highest closing balance. 2: BOT retrieves and processes the data for the top performing scrips. 3: BOT creates a new file for further processing and adds the data of the top 5 scrips."
      },
      {
        "name": "Retrieve Company Names from Depository",
        "scenario": "The BOT reads the ISIN from the file containing the top 5 records and fetches the corresponding company names from the depository website.",
        "precondition": "The file containing the top 5 records and their ISINs is available.",
        "actors": "BOT",
        "steps": "1: BOT reads the ISINs from the file containing the top 5 records. 2: BOT navigates to the depository website. 3: BOT fetches the company names associated with the ISINs. 4: BOT populates the company names in front of each record in the top 5 records file."
      }
    ],
    "user_story_gpt": "As a financial analyst using a BOT, I want to automatically extract daily data from the stock exchange website in CSV format, ensuring that it is processed and stored in our database for reporting and analysis. Additionally, I want the BOT to identify the top 5 performing scrips based on their closing balance and cross-reference their ISINs to fetch corresponding company names from the depository. This automated workflow will help streamline our daily data extraction, processing, and analysis tasks, allowing us to focus on strategic decisions driven by these insights.",
    "user_story_llama": "As a user, I want the BOT to extract the daily CSV file from the stock exchange website, process the data, and store it in the database, so that the system can query the database to extract the top 5 scrips with the highest closing balance. Additionally, the system should retrieve the company names associated with these top performing scrips from the depository website and populate them in the file, providing a comprehensive overview of the top scrips, including their company names, to facilitate further analysis and decision-making.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Extract Patient Information",
        "scenario": "A doctor uses the app to extract essential patient information with a single click.",
        "precondition": "Doctor must be logged into the app and have a patient's medical report open.",
        "actors": "['Doctor']",
        "steps": "1: Doctor opens the patient's medical report within the app. 2: Doctor clicks on the 'Extract Information' button. 3: The app utilizes UiPath's Generative Extractor to extract essential patient information. 4: The extracted information is displayed for the doctor to review and utilize for patient care."
      },
      {
        "name": "Manage High-Volume Patient Medical Reports",
        "scenario": "The app facilitates efficient management of high-volume patient medical reports for doctors.",
        "precondition": "Doctor has multiple patient medical reports to manage within the app.",
        "actors": "['Doctor']",
        "steps": "1: Doctor navigates to the 'Manage Reports' section of the app. 2: Doctor selects a specific patient's medical report from the list. 3: The app displays the medical report in a user-friendly format, allowing for easy review and navigation. 4: Doctor utilizes features such as search and filter to locate specific details within the extensive report."
      },
      {
        "name": "Real-Time Chat Function",
        "scenario": "Medical teams use the real-time chat function to communicate seamlessly within the app.",
        "precondition": "Doctor and medical team members are logged into the app.",
        "actors": "['Doctor', 'Medical Team Members']",
        "steps": "1: Doctor accesses the real-time chat function within the app. 2: Doctor initiates a chat or responds to existing chats with other medical team members. 3: The app ensures real-time delivery of messages and updates for all members participating in the chat. 4: Medical team members engage in seamless communication, sharing vital information and collaborating effectively."
      }
    ],
    "user_story_gpt": "As a doctor, I need to efficiently manage patient medical reports and communicate with my medical team within a single app. This involves extracting essential patient information from medical reports with one click, utilizing a user-friendly interface to manage and review high-volume reports, and accessing real-time chat functions. These features ensure I can provide timely and informed patient care while seamlessly collaborating with my team.",
    "user_story_llama": "As a doctor, I want to use the app to extract essential patient information with a single click, so that I can efficiently manage high-volume patient medical reports and have all the necessary details at my fingertips. Additionally, I want the app to facilitate seamless communication with my medical team through a real-time chat function, enabling us to collaborate effectively and share vital information instantly, thereby enhancing patient care and streamlining our workflow.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Upload Documents to Workspace",
        "scenario": "Notarizer uploads required documents to the workspace.",
        "precondition": "Notarizer must have access to the notary service platform.",
        "actors": "Notarizer",
        "steps": "1: Notarizer logs into the notary service platform. 2: Notarizer navigates to the workspace for document upload. 3: Notarizer selects the required documents from their device. 4: Notarizer uploads the selected documents to the workspace."
      },
      {
        "name": "Customer Identification Verification",
        "scenario": "Customer provides proof of identification for verification.",
        "precondition": "Customer must have an appointment with the notarizer for notarization.",
        "actors": "Customer, Computer Vision Technology",
        "steps": "1: Customer accesses the customer identification verification section of the platform. 2: Customer captures and uploads proof of identification using computer vision technology. 3: The system verifies the customer's information through computer vision technology."
      },
      {
        "name": "Schedule Online Virtual Meeting",
        "scenario": "Scheduled online virtual meeting between notarizer and customer for document signing.",
        "precondition": "Documents and customer verification must be completed.",
        "actors": "Notarizer, Customer",
        "steps": "1: Notarizer schedules an online virtual meeting with the customer. 2: Customer joins the virtual meeting at the scheduled time. 3: Notarizer and customer discuss the document details virtually. 4: Customer signs the documents during the virtual meeting."
      },
      {
        "name": "Document Notarization and Data Extraction",
        "scenario": "Notarizer notarizes the documents and data is extracted using UiPath’s Document Understanding technology.",
        "precondition": "Virtual meeting for document signing must be completed.",
        "actors": "Notarizer, UiPath’s Document Understanding Technology",
        "steps": "1: Notarizer notarizes the signed documents. 2: Notarized documents are sent to UiPath’s Document Understanding technology for data extraction. 3: The data extracted is securely stored in AWS S3."
      },
      {
        "name": "Distribute Notarized Documents",
        "scenario": "Notarized documents are distributed among relevant parties and securely accessed by authorized users for future reference.",
        "precondition": "Notarization and data extraction must be completed.",
        "actors": "Notarizer, Authorized Users",
        "steps": "1: Notarizer distributes the notarized documents to relevant parties. 2: Authorized users access the securely stored notarized documents for future reference."
      },
      {
        "name": "Chatbot Support and Document Data Retrieval",
        "scenario": "User interacts with chatbots for support and document data retrieval.",
        "precondition": "User must have access to the chatbot feature within the notary service application.",
        "actors": "User, Chatbots",
        "steps": "1: User accesses the chatbot feature within the application. 2: User asks the chatbot questions for support or document data retrieval. 3: User interacts with specific areas within the document using the chatbot for data retrieval."
      }
    ],
    "user_story_gpt": "As a notarizer, I want to efficiently manage and conduct the notarization process using a digital platform. This involves uploading necessary documents into the workspace, verifying customer identity with the help of computer vision technology, and scheduling virtual meetings for document signing. Once the documents are notarized, they should be processed through UiPath’s Document Understanding technology for data extraction, and securely stored in AWS S3. Finally, I want to ensure that notarized documents are distributed to relevant parties and accessible to authorized users. To enhance the user experience, I seek chatbot support for document data retrieval and customer assistance, creating a seamless and secure workflow for all involved.",
    "user_story_llama": "As a notarizer, I want to upload required documents to the workspace and have customers verify their identification, so that I can schedule an online virtual meeting for document signing. During the meeting, the customer will sign the documents, which I will then notarize and have data extracted using UiPath's Document Understanding technology. After notarization, I want to distribute the documents among relevant parties, allowing authorized users to securely access them for future reference. Additionally, I want users to have access to a chatbot feature for support and document data retrieval, enabling them to interact with the chatbot for answers and retrieve specific document data, thereby streamlining the notarization process and improving user experience.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Upload Product List",
        "scenario": "The user uploads an Excel sheet listing the products to be priced on the platform.",
        "precondition": "User has the Excel sheet ready with the products to be priced",
        "actors": "User",
        "steps": "1: User navigates to the upload page on the platform 2: User selects the Excel sheet listing the products 3: User uploads the Excel sheet 4: The system validates the format of the uploaded file 5: The system acknowledges the successful receipt of the product list by sending an email to the support team"
      },
      {
        "name": "Search for Product Prices",
        "scenario": "The system searches for the prices of the products listed in the uploaded Excel sheet on the specified websites",
        "precondition": "Excel sheet with product list has been successfully uploaded",
        "actors": "System",
        "steps": "1: The system processes the product list from the queue 2: The system searches for each product on Souq, Noon, and Jumia websites 3: The system compiles the results into another Excel sheet 4: The system sends the compiled results to the user via email"
      }
    ],
    "user_story_gpt": "As a user, I want to efficiently manage product pricing on multiple platforms by uploading an Excel sheet of products to the system. Once uploaded, the system should verify the format and ensure successful receipt by notifying the support team. Subsequently, the system will process the list, searching for product prices on designated websites such as Souq, Noon, and Jumia. Finally, the compiled pricing results will be emailed to me, providing a convenient and comprehensive overview.",
    "user_story_llama": "As a user, I want to upload an Excel sheet listing the products to be priced on the platform, so that the system can automatically search for the prices of these products on specified websites such as Souq, Noon, and Jumia, and send me the compiled results via email, thereby streamlining the price comparison process and saving me time.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Retrieve Website List",
        "scenario": "The UiPath automation retrieves the list of websites stored in a CSV file or database.",
        "precondition": "The CSV file or database containing the list of websites must be accessible to the UiPath automation.",
        "actors": "['UiPath Automation']",
        "steps": "1: UiPath automation loads the list of websites from the specified CSV file or database. 2: UiPath automation validates the format and structure of the imported website list."
      },
      {
        "name": "Monitor Website Status",
        "scenario": "The UiPath automation monitors the status/health of the websites listed.",
        "precondition": "The list of websites has been successfully retrieved by the UiPath automation.",
        "actors": "['UiPath Automation']",
        "steps": "1: UiPath automation iterates through the list of websites. 2: For each website, UiPath automation performs a PowerShell scripting to check its status/health. 3: UiPath automation captures and records the status/health of each website."
      },
      {
        "name": "Generate Status Report",
        "scenario": "The UiPath automation generates a report showing the status/health of the monitored websites.",
        "precondition": "The status/health of all websites in the list has been monitored.",
        "actors": "['UiPath Automation']",
        "steps": "1: UiPath automation compiles the captured status/health data of the websites. 2: UiPath automation creates a report with the website names and their corresponding status/health. 3: The report is saved or sent to the specified destination."
      },
      {
        "name": "Handle Exceptions",
        "scenario": "The UiPath automation handles exceptions encountered during the monitoring process.",
        "precondition": "An exception occurs during website status monitoring.",
        "actors": "['UiPath Automation']",
        "steps": "1: UiPath automation identifies the nature of the exception (e.g., website unresponsive, connection timeout). 2: UiPath automation logs the exception details. 3: Depending on the type of exception, UiPath automation either retries monitoring the website or flags it for further investigation."
      }
    ],
    "user_story_gpt": "As an IT administrator, I want to use UiPath Automation to efficiently manage and monitor the status of multiple websites. The automation should retrieve the list of websites from a CSV file or database and ensure the data is correctly formatted. It should then monitor the health of each website using PowerShell scripts, logging their status and handling any exceptions, such as unresponsive websites or connection timeouts. Finally, I want a comprehensive report generated that compiles the website statuses, which can be easily saved or distributed, ensuring I have a clear overview and can proactively address any issues.",
    "user_story_llama": "As a system administrator, I want the UiPath automation to retrieve a list of websites from a CSV file or database, so that it can monitor the status and health of these websites, generating a report that shows the status of each website. Additionally, the system should be able to handle any exceptions that occur during the monitoring process, such as logging exception details and retrying or flagging websites for further investigation, ensuring that the report is accurate and reliable, and providing me with the information needed to take corrective actions on any websites that are experiencing issues.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Get Job Description Detail",
        "scenario": "The bot retrieves the job description detail from the database.",
        "precondition": "Bot has access to the database and the job details are available",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot accesses the database to retrieve the job description detail"
      },
      {
        "name": "Check and Select Job Status",
        "scenario": "The bot checks the status of the job description and selects whether it should be marked as new or rerun.",
        "precondition": "Bot has access to the job status information",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot checks the status of the job description 2: The bot selects whether the job should be marked as new or to be rerun"
      },
      {
        "name": "Get Required Candidate Count",
        "scenario": "The bot retrieves the required number of candidates from the job description.",
        "precondition": "Bot has access to the job description and the required candidate count",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot obtains the required number of candidates from the job description"
      },
      {
        "name": "Select Job Portal",
        "scenario": "The bot selects the appropriate job portal (e.g., LinkedIn, Naukri) based on the job description.",
        "precondition": "Bot has access to the job description specifying the job portal",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot identifies the specified job portal from the job description"
      },
      {
        "name": "Search Candidate",
        "scenario": "The bot enters the searching field from the job description and searches for candidates on the selected job portal.",
        "precondition": "Bot has access to the selected job portal and the searching field from the job description",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot enters the searching field provided in the job description 2: The bot initiates the candidate search on the selected job portal"
      },
      {
        "name": "Extract Candidate Information",
        "scenario": "If the candidate count is greater than zero, the bot extracts the candidate information and updates it in an excel sheet by setting a priority number.",
        "precondition": "Bot has extracted candidate information and access to the excel sheet",
        "actors": "HR Recruiter Bot",
        "steps": "1: If the candidate count is greater than zero, the bot extracts the candidate information 2: The bot updates the candidate information in an excel sheet by setting a priority number"
      },
      {
        "name": "Remove Unimportant Search Field",
        "scenario": "If no candidate is found, the bot removes the unimportant search field and tries again for candidate search.",
        "precondition": "Bot has access to the job description and search results",
        "actors": "HR Recruiter Bot",
        "steps": "1: If no candidate is found, the bot removes the unimportant search field 2: The bot tries again for candidate search"
      },
      {
        "name": "Stop Searching Process",
        "scenario": "If the extracted candidate count meets the required count, the bot stops the searching process.",
        "precondition": "Bot has access to the extracted candidate count and the required count",
        "actors": "HR Recruiter Bot",
        "steps": "1: If the extracted candidate count meets the required count, the bot stops the searching process"
      },
      {
        "name": "Upload Candidate Info to Database",
        "scenario": "Finally, the bot uploads the extracted candidate information into the database.",
        "precondition": "Bot has access to the extracted candidate information and the database",
        "actors": "HR Recruiter Bot",
        "steps": "1: The bot uploads the extracted candidate information into the database"
      }
    ],
    "user_story_gpt": "As an HR recruiter, I want a bot to efficiently manage the hiring process by accessing job descriptions from the database and determining their status as new or rerun. The bot should retrieve the required candidate count and select the appropriate job portal for candidate search. It needs to search for candidates using specified fields, extract relevant information when available, and prioritize this data in an Excel sheet. If no candidates are found, the bot should refine the search criteria and attempt again. Once the required candidate count is met, the search process should stop, and the extracted candidate information should be uploaded to the database to streamline our recruitment efforts.",
    "user_story_llama": "As an HR Recruiter Bot, I want to automate the recruitment process so that I can retrieve job description details from the database, check and select the job status, and get the required candidate count. I also want to select the appropriate job portal based on the job description and search for candidates on that portal. If no candidates are found, I want to remove unimportant search fields and try again. The system should stop searching once the required candidate count is met. Finally, I want to extract candidate information, update it in an excel sheet with a priority number, and upload the extracted candidate information into the database, thereby streamlining the recruitment process and reducing manual effort.",
    "length": 9
  },
  {
    "usecases": [
      {
        "name": "User Authentication",
        "scenario": "A user logs into the Absolute Automation APP_Contract Management System",
        "precondition": "User must have valid login credentials and access to the system",
        "actors": "User",
        "steps": "1: User navigates to the login page 2: User enters their login credentials 3: User submits the login form 4: The system validates the login credentials 5: The system grants access to the user account"
      },
      {
        "name": "Contract Generation",
        "scenario": "A user generates a new contract using the Absolute Automation APP_Contract Management System",
        "precondition": "User must be authenticated and have necessary permissions",
        "actors": "User",
        "steps": "1: User selects the option to create a new contract 2: User fills in the required details for the new contract 3: User submits the contract generation form 4: The system validates the input and generates the new contract"
      },
      {
        "name": "Contract Editing",
        "scenario": "A user makes edits to an existing contract within the Absolute Automation APP_Contract Management System",
        "precondition": "User must be authenticated and have necessary permissions",
        "actors": "User",
        "steps": "1: User navigates to the contract that requires editing 2: User selects the edit option 3: User makes the necessary changes to the contract 4: User saves the changes 5: The system updates the contract with the edits"
      },
      {
        "name": "Contract Risk Analysis",
        "scenario": "A user performs risk analysis for a specific contract using the Absolute Automation APP_Contract Management System",
        "precondition": "User must have access to the contract and necessary permissions",
        "actors": "User",
        "steps": "1: User selects the contract for risk analysis 2: User initiates the risk analysis process 3: The system conducts the risk analysis and provides the results 4: User reviews the risk analysis report"
      },
      {
        "name": "E-Signature",
        "scenario": "A user adds electronic signatures to a contract within the Absolute Automation APP_Contract Management System",
        "precondition": "User must be authenticated and have necessary permissions",
        "actors": "User",
        "steps": "1: User selects the contract that requires an e-signature 2: User accesses the e-signature feature 3: User applies the electronic signature 4: The system verifies and adds the e-signature to the contract"
      },
      {
        "name": "Status Tracking",
        "scenario": "A user tracks the status of a specific contract within the Absolute Automation APP_Contract Management System",
        "precondition": "User must be authenticated and have necessary permissions",
        "actors": "User",
        "steps": "1: User selects the contract to track its status 2: User accesses the status tracking feature 3: The system provides real-time status updates for the selected contract"
      },
      {
        "name": "Report Generation",
        "scenario": "A user generates a comprehensive report on contract management using the Absolute Automation APP_Contract Management System",
        "precondition": "User must be authenticated and have necessary permissions",
        "actors": "User",
        "steps": "1: User initiates the report generation process 2: User selects the parameters for the report 3: The system processes the request and generates the report 4: User downloads or accesses the generated report"
      }
    ],
    "user_story_gpt": "As a user of the Absolute Automation APP_Contract Management System, I want to log in using my credentials to access the system's functionalities. This includes generating new contracts by filling out detailed forms and editing existing ones with the necessary permissions. I need to perform risk analysis on contracts to understand potential risks and access the e-signature feature to sign contracts electronically. Additionally, I should be able to track the real-time status of contracts and generate comprehensive reports based on selected parameters. This suite of features enables efficient contract management and decision-making.",
    "user_story_llama": "As a user, I want to use the Absolute Automation APP_Contract Management System so that I can securely log in and access the system with my valid credentials. Once authenticated, I want to be able to generate new contracts, edit existing ones, and perform risk analysis on specific contracts to make informed decisions. Additionally, I want to be able to add electronic signatures to contracts and track their status in real-time. Furthermore, I want to generate comprehensive reports on contract management, selecting the parameters that matter most to me, so that I can download or access the reports as needed, ultimately streamlining my contract management workflow and improving overall efficiency.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Perform Video KYC for Customer Onboarding",
        "scenario": "A new customer undergoes the video KYC process for onboarding in the HyperHack-2023 app.",
        "precondition": "Customer must have access to a device with a camera and an internet connection.",
        "actors": "New Customer, HyperHack-2023 System",
        "steps": "1: New Customer launches the HyperHack-2023 app and selects the video KYC option. 2: The system requests and verifies the customer's consent for video KYC. 3: New Customer follows the on-screen instructions to capture their identity document and record a video as per provided guidelines. 4: The system uses AI models to validate the identity document and perform gesture-based image verification in real-time. 5: Upon successful verification, the system completes the customer onboarding process."
      },
      {
        "name": "Perform Automated Image KYC Verification",
        "scenario": "A user utilizes the app to undergo automated image KYC verification for regulatory compliance.",
        "precondition": "User must have the HyperHack-2023 app installed and access to an internet connection.",
        "actors": "User, HyperHack-2023 System",
        "steps": "1: User opens the HyperHack-2023 app and selects the automated image KYC option. 2: The system prompts the user to provide necessary details and capture their image. 3: The system employs UiPath forms and AI models to process the provided data and image for KYC verification. 4: Using AI models, the system validates the user's identity against national ID databases. 5: Upon successful verification, the system notifies the user about the completion of the image KYC process."
      },
      {
        "name": "Conduct Real-time Image Matching with National Identification Database",
        "scenario": "The system performs real-time image matching with the National Identification Database during the KYC process.",
        "precondition": "An active internet connection and access to the National Identification Database are required.",
        "actors": "HyperHack-2023 System, National Identification Database",
        "steps": "1: As part of the KYC process, the system retrieves the user's captured image and relevant identity information. 2: The system connects to the National Identification Database to conduct real-time matching of the user's image with the database records. 3: The system utilizes the Deepface AI Model to perform precise and secure image matching. 4: Upon successful matching, the system records the verification status and completes the KYC process."
      }
    ],
    "user_story_gpt": "As a new customer using the HyperHack-2023 app, I want to seamlessly complete my onboarding through a video KYC process by utilizing a device with a camera and internet connection. This process involves capturing my identity document and recording a video with guidance, which the system will validate in real-time using AI models. I can also choose the automated image KYC option, where I provide my image and details for verification against national ID databases. Additionally, the system ensures regulatory compliance by conducting real-time image matching with the National Identification Database using advanced AI models, ensuring a secure and efficient onboarding experience.",
    "user_story_llama": "As a new customer, I want to use the HyperHack-2023 app to undergo a seamless video KYC process for onboarding, where I can capture my identity document and record a video as per the provided guidelines, and have my identity verified in real-time using AI models. Additionally, I want the system to provide an option for automated image KYC verification, where I can provide necessary details and capture my image, and have it validated against national ID databases using UiPath forms and AI models. Furthermore, I want the system to conduct real-time image matching with the National Identification Database during the KYC process, utilizing the Deepface AI Model to ensure precise and secure image matching, so that upon successful verification, I can be notified about the completion of the KYC process and have my onboarding completed efficiently.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Upload CV for Analysis",
        "scenario": "HR personnel uploads a candidate's CV for analysis using the CV Screening App.",
        "precondition": "HR Personnel must have access to the CV Screening App.",
        "actors": "['HR Personnel']",
        "steps": "1: HR Personnel accesses the CV Screening App. 2: HR Personnel uploads the candidate's CV."
      },
      {
        "name": "Automated Candidate Shortlisting",
        "scenario": "The system automatically shortlists candidates based on the extracted CV information and customizable prompts from OpenAI's LLMs.",
        "precondition": "CVs have been uploaded and relevant text has been extracted for analysis.",
        "actors": "['Automated System']",
        "steps": "1: The system processes the extracted information from the candidate's CV. 2: The system utilizes customizable prompts to match candidate qualifications with job requirements. 3: Automated shortlisting of candidates based on the analysis is performed."
      },
      {
        "name": "Review Shortlisted Candidates",
        "scenario": "HR personnel review the candidates shortlisted by the system for further evaluation.",
        "precondition": "Shortlisted candidates are available for review in the system.",
        "actors": "['HR Personnel']",
        "steps": "1: HR Personnel accesses the list of shortlisted candidates. 2: HR Personnel reviews the shortlisted candidates' qualifications and suitability for the job role. 3: HR Personnel proceeds with further evaluation or selection processes."
      }
    ],
    "user_story_gpt": "As an HR personnel, I want to use the CV Screening App to upload candidates' CVs so that the system can automatically extract information and shortlist candidates. This involves using advanced prompts from OpenAI's LLMs to match qualifications with job requirements. Once the system has shortlisted candidates, I need to review and evaluate them to determine their suitability for further selection processes.",
    "user_story_llama": "As HR personnel, I want to use the CV Screening App so that I can upload a candidate's CV for analysis, and the system can automatically shortlist candidates based on the extracted CV information and customizable prompts from OpenAI's LLMs, allowing me to review and evaluate the most suitable candidates for the job role, thereby streamlining the recruitment process and improving the efficiency of candidate selection.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "System Scalability Testing",
        "scenario": "Testing the system's ability to handle high volumes of CVs efficiently without incurring additional costs as the organization grows.",
        "precondition": "The system is fully implemented and operational.",
        "actors": "['Testing Team']",
        "steps": "1: Testing team uploads a large volume of CVs to the system simultaneously. 2: The system processes the high volume of CVs without incurring additional costs or significant performance degradation. 3: Testing team validates the scalability and efficiency of the system."
      },
      {
        "name": "Customizable Prompts Configuration",
        "scenario": "HR personnel configures and customizes prompts for the automated candidate shortlisting process.",
        "precondition": "HR Personnel has access to the system's prompt configuration feature.",
        "actors": "['HR Personnel']",
        "steps": "1: HR Personnel accesses the prompt configuration interface. 2: HR Personnel customizes prompts based on job requirements and candidate qualifications. 3: The system applies the customized prompts for automated candidate shortlisting."
      }
    ],
    "user_story_gpt": "As a member of the testing team, I want to ensure that our system can handle a high volume of CVs efficiently, so we can maintain performance and cost-effectiveness as the organization grows. Additionally, as an HR personnel, I need the capability to configure and customize prompts for candidate shortlisting, allowing our recruitment process to be aligned with specific job requirements and qualifications efficiently.",
    "user_story_llama": "As a member of the testing team, I want to ensure that our system can efficiently handle high volumes of CVs without incurring additional costs as the organization grows, so that I can validate its scalability and efficiency. Additionally, as HR personnel, I want to be able to configure and customize prompts for the automated candidate shortlisting process, so that the system can apply these tailored prompts to effectively shortlist candidates based on specific job requirements and qualifications.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Upload Document for Summarization",
        "scenario": "User uploads a document to the BotGenesis platform for summarization.",
        "precondition": "User must be authenticated and have access to the document uploading feature.",
        "actors": "User",
        "steps": "1: User navigates to the document upload section of the BotGenesis platform. 2: User selects a document from their device to upload. 3: The system processes the uploaded document and generates a summary based on the content. 4: The system presents the summarized version of the document to the user."
      },
      {
        "name": "Query Document Content",
        "scenario": "User submits a query to retrieve specific information from a document using BotGenesis.",
        "precondition": "User must have an uploaded document or access to a document in the BotGenesis platform.",
        "actors": "User",
        "steps": "1: User enters a query or specific information they want to retrieve from a document. 2: The system uses Python scripts to call the OpenAI API and Langchain to fetch the results based on the user query. 3: The system presents the query results to the user."
      },
      {
        "name": "Utilize UiPath Document Understanding",
        "scenario": "User leverages UiPath Document Understanding to infer document structure and extract data from invoice-formatted documents.",
        "precondition": "User must have access to the UiPath Document Understanding feature within BotGenesis.",
        "actors": "User",
        "steps": "1: User selects the document requiring structure inference and data extraction. 2: The system uses UiPath Document Understanding to analyze the document and infer its structure. 3: The system extracts relevant data from the invoice-formatted document and presents it to the user."
      },
      {
        "name": "Create Custom UiPath Activities with Code Generation",
        "scenario": "User utilizes the OpenAI-powered code generation feature to create custom UiPath activities and publish them as packages for use in UiPath Studio.",
        "precondition": "User must have the necessary permissions to create and publish custom UiPath activities.",
        "actors": "User",
        "steps": "1: User accesses the OpenAI-powered code generation feature within BotGenesis. 2: User provides inputs or requirements for the custom UiPath activity to be generated. 3: The system utilizes Powershell and OpenAI to generate the code for the custom UiPath activity. 4: User reviews and approves the generated code. 5: The system packages the custom activity and enables its publication for use in UiPath Studio."
      }
    ],
    "user_story_gpt": "As a user of the BotGenesis platform, I want to seamlessly upload documents for summarization, allowing me to quickly access the summarized content. I also desire the ability to query specific information within these documents, using advanced AI-powered tools for precise results. Additionally, I aim to utilize UiPath Document Understanding to extract data efficiently from invoice-formatted documents. Furthermore, the platform should empower me to create custom UiPath activities with code generation capabilities, enabling the publication of these as packages for use in UiPath Studio, thereby enhancing my workflow automation capabilities.",
    "user_story_llama": "As a user, I want to utilize the BotGenesis platform so that I can upload documents for summarization, allowing me to quickly grasp the main points of the content. Additionally, I want to be able to query the document content using specific information or queries, and have the system fetch the relevant results using Python scripts and the OpenAI API. Furthermore, I want to leverage the UiPath Document Understanding feature to infer the structure of invoice-formatted documents and extract relevant data. I also want to create custom UiPath activities using the OpenAI-powered code generation feature, enabling me to generate and publish packages for use in UiPath Studio, thereby streamlining my workflow and increasing productivity.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Remove NuGet Packages",
        "scenario": "User wants to remove NuGet packages from their system",
        "precondition": "User has the application installed and running",
        "actors": "User",
        "steps": "1: User opens the application 2: User selects the option to remove NuGet packages 3: The application automatically detects the location of all NuGet packages on the user's system 4: The NuGet Package Analyzer Bot thoroughly examines each package and its versions, calculating the space consumption for each 5: The packages are arranged in descending order based on their space usage 6: The user is presented with a list of packages and their space usage 7: User selects specific package versions or entire packages to be deleted 8: The application initiates the deletion process as per the user's selection"
      },
      {
        "name": "Perform Custom Directory Analysis",
        "scenario": "User wants to perform custom analysis of directories for file deletion",
        "precondition": "User has the application installed and running",
        "actors": "User",
        "steps": "1: User opens the application 2: User selects the option for custom directory analysis 3: The Custom Directory Analyzer bot provides a list of random files or directories for potential deletion 4: User selects specific files or directories to be deleted 5: The application initiates the deletion process as per the user's selection"
      },
      {
        "name": "Backup Deleted Files to User's Email",
        "scenario": "User wants to backup deleted files to their email for future retrieval",
        "precondition": "User has performed file/folder deletions using the application",
        "actors": "User",
        "steps": "1: User opens the application 2: User navigates to the backup feature 3: The application sends deleted files to the user's email for future retrieval"
      },
      {
        "name": "Integration with UiPath Apps, Data Services and UiPath Studios",
        "scenario": "Integration of UiPath Apps, Data Services, and UiPath Studios to optimize the overall process",
        "precondition": "Integration services are set up and operational",
        "actors": "Application",
        "steps": "1: UiPath Studios and Data Services combine data elements from the apps and create efficient backend bots 2: UiPath Apps are used for front-end app design, where separate bots handle various operations including system file analysis, NiGet directory management, file deletion based on user input, and email backup"
      },
      {
        "name": "Potential Enhancement: Integration Services for Power BI Dashboard",
        "scenario": "Implementation of Integration Services for Power BI Dashboard Integration",
        "precondition": "Development team working on future enhancements",
        "actors": "Application Development Team",
        "steps": "1: Integration Services are implemented for Power BI Dashboard Integration 2: Users have seamless and comprehensive experience for file and folder management"
      }
    ],
    "user_story_gpt": "As a user, I want an application that efficiently manages and deletes unwanted files and NuGet packages from my system. The tool should allow me to analyze directories, choose files for deletion, and calculate package space consumption from largest to smallest. Additionally, I want to back up any deleted files to my email for future access. Integrations with UiPath Apps and Data Services should enhance the efficiency of these processes, providing seamless integration and management, while future enhancements might consider integrating with a Power BI Dashboard for a comprehensive experience.",
    "user_story_llama": "As a user, I want to use the application so that I can easily remove NuGet packages from my system, perform custom directory analysis to delete unnecessary files, and backup deleted files to my email for future retrieval. The application should automatically detect and analyze NuGet packages, arrange them by space usage, and allow me to select which packages or files to delete. Additionally, the application should integrate with UiPath Apps, Data Services, and UiPath Studios to optimize the overall process, enabling efficient backend bots and front-end app design. Furthermore, I would like the application to have the potential for future enhancement, including integration with Power BI Dashboard, providing a seamless and comprehensive experience for file and folder management, allowing the application development team to continuously improve and expand the application's capabilities.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Data Extraction from Application Forms",
        "scenario": "The system extracts data from application forms using OCR technology and parses the information into structured data.",
        "precondition": "Application forms are available in a scanned format.",
        "actors": "['System', 'UiPath Document Understanding suite']",
        "steps": "1: The system triggers the OCR technology to convert the scanned forms into usable, structured data. 2: The system validates the extracted data for accuracy and completeness."
      },
      {
        "name": "Straight-Through Processing and Business Rule Application for Application Forms",
        "scenario": "The system applies predefined business rules and ensures data quality, consistency, and completeness for application forms.",
        "precondition": "Data extraction from application forms is completed.",
        "actors": "['System', 'UiPath Automation Workflows']",
        "steps": "1: The system implements automation workflows to apply predefined business rules. 2: The system employs decision-making and exception handling functionalities to maintain data integrity. 3: The system validates the processed data against defined business rules."
      },
      {
        "name": "Image Processing for Application Forms",
        "scenario": "The system identifies and extracts photo and signature elements from the application forms for future use.",
        "precondition": "Data extraction from application forms is completed.",
        "actors": "['System', 'UiPath capabilities for image processing']",
        "steps": "1: The system leverages UiPath's image processing capabilities to identify and extract photo and signature elements. 2: The system saves the extracted elements for future use or verification purposes."
      },
      {
        "name": "Data Management for Application Forms",
        "scenario": "The system uploads the extracted and validated data to the database for storage and retrieval.",
        "precondition": "Data extraction and validation from application forms are completed.",
        "actors": "['System', 'UiPath Database Activities']",
        "steps": "1: The system utilizes UiPath Database Activities to upload the extracted and validated data to UiPath Data Services Entities. 2: The system ensures data integrity and completeness during the upload process."
      },
      {
        "name": "Communication Automation for Application Forms",
        "scenario": "The system automates the creation and dispatch of Examination Authority Letters, integrating candidate’s extracted photos into the document, and uses UiPath Integration Service with eMail connectors to email these letters to the candidates.",
        "precondition": "Data extraction, validation, image processing, and data management from application forms are completed.",
        "actors": "['System', 'UiPath Integration Service', 'eMail connectors']",
        "steps": "1: The system automates the creation of Examination Authority Letters, integrating candidate’s extracted photos into the document. 2: The system dispatches the letters using UiPath Integration Service with eMail connectors, ensuring efficient communication with the candidates."
      }
    ],
    "user_story_gpt": "As an administrative officer, I want the system to automatically extract and validate data from scanned application forms using OCR technology, so that the information is accurate and structured. The system should apply business rules to ensure data quality and automatically handle exceptions to maintain integrity. Additionally, it should extract photos and signatures for future verification. Once validated, the data should be uploaded to the database for easy retrieval. Lastly, I want the system to automate the creation and dispatch of Examination Authority Letters, incorporating candidates' photos and emailing them efficiently to ensure seamless communication.",
    "user_story_llama": "As a system administrator, I want the system to extract data from application forms using OCR technology, parse the information into structured data, and apply predefined business rules to ensure data quality, consistency, and completeness. Additionally, the system should identify and extract photo and signature elements from the application forms for future use, and upload the extracted and validated data to the database for storage and retrieval. Furthermore, the system should automate the creation and dispatch of Examination Authority Letters, integrating candidate’s extracted photos into the document, and email these letters to the candidates, thereby streamlining the application process and enhancing communication with candidates.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Data Extraction from Answer Sheets",
        "scenario": "The system extracts data from answer sheets including recognizing and interpreting multiple-choice responses using OCR technology.",
        "precondition": "Answer sheets are available in a scanned format.",
        "actors": "['System', 'UiPath Document Understanding framework']",
        "steps": "1: The system employs OCR technology to extract data from answer sheets, including multiple-choice responses. 2: The system validates the extracted data for accuracy and completeness."
      },
      {
        "name": "Straight-Through Processing and Business Rule Application for Answer Sheets",
        "scenario": "The system applies business rules to the extracted data from answer sheets, ensuring its consistency and completeness.",
        "precondition": "Data extraction from answer sheets is completed.",
        "actors": "['System', 'UiPath Automation Workflows']",
        "steps": "1: The system creates automation workflows to apply business rules to the extracted data from answer sheets. 2: The system validates the processed data against predefined business rules. 3: The system ensures the consistency and completeness of the processed data."
      },
      {
        "name": "Signature Extraction for Fraud Checking from Answer Sheets",
        "scenario": "The system identifies, extracts, and saves signatures from answer sheets for further verification and fraud detection using the Signature Comparison Machine Learning model from UiPath AI Center.",
        "precondition": "Data extraction and validation from answer sheets is completed.",
        "actors": "['System', 'UiPath capabilities for image processing', 'UiPath AI Center']",
        "steps": "1: The system utilizes image processing capabilities to identify and extract signatures from answer sheets. 2: The system saves the extracted signatures for further verification and fraud detection using the Signature Comparison Machine Learning model from UiPath AI Center."
      },
      {
        "name": "Data Validation and Two-way Matching from Answer Sheets to Application Forms",
        "scenario": "The system cross-verifies the extracted data from answer sheets (ID and name) against the data from application forms.",
        "precondition": "Data extraction and validation from answer sheets and application forms are completed.",
        "actors": "['System']",
        "steps": "1: The system implements two-way matching to cross-verify the extracted data from answer sheets with the corresponding data from application forms. 2: The system ensures the consistency and correctness of the matched data."
      },
      {
        "name": "Answer Scoring for Answer Sheets",
        "scenario": "The system applies scoring rules to the extracted answers against pre-defined answer keys, thereby determining the candidate’s score.",
        "precondition": "Data extraction and validation from answer sheets is completed.",
        "actors": "['System', 'Pre-defined answer keys']",
        "steps": "1: The system applies scoring rules to the extracted answers against the pre-defined answer keys. 2: The system determines the candidate's score based on the applied scoring rules."
      },
      {
        "name": "Communication Automation for Answer Sheets",
        "scenario": "The system automates the generation and dispatch of Rejection/Offer letters, incorporating the candidate’s photo, and using UiPath Integration Service with eMail connectors to email these letters to the candidates based on their score.",
        "precondition": "Data extraction, validation, signature extraction, and scoring from answer sheets are completed.",
        "actors": "['System', 'UiPath Integration Service', 'eMail connectors']",
        "steps": "1: The system automates the generation of Rejection/Offer letters, incorporating the candidate’s photo into the document. 2: The system dispatches the letters to the candidates based on their score using UiPath Integration Service with eMail connectors, ensuring efficient communication."
      }
    ],
    "user_story_gpt": "As an examination administrator, I need a robust system that leverages OCR technology to accurately extract and validate data from scanned answer sheets, including multiple-choice responses. Once the data is extracted, I want automation workflows to apply business rules ensuring the information's consistency and completeness. The system should also identify and extract signatures for fraud detection using machine learning models. Furthermore, two-way data matching between answer sheets and application forms should be implemented to ensure accuracy. Following data validation, the system should apply scoring rules to determine candidates' scores, and subsequently automate the generation and e-mailing of Rejection/Offer letters, complete with candidate photos, using integrated eMail connectors, ensuring streamlined and efficient communication with candidates.",
    "user_story_llama": "As a system administrator, I want to utilize the UiPath Document Understanding framework and UiPath Automation Workflows so that data from answer sheets can be automatically extracted and validated, including recognizing and interpreting multiple-choice responses using OCR technology. In addition, the system should apply business rules to the extracted data, ensuring its consistency and completeness, and identify, extract, and save signatures for further verification and fraud detection using the Signature Comparison Machine Learning model from UiPath AI Center. The system should also cross-verify the extracted data from answer sheets against the data from application forms, apply scoring rules to determine the candidate's score, and automate the generation and dispatch of Rejection/Offer letters to the candidates based on their score, incorporating the candidate's photo and using UiPath Integration Service with eMail connectors, thereby streamlining the entire process and ensuring efficient communication.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Retrieve Daily Energy Consumption Data",
        "scenario": "A user logs in to their energy account to retrieve daily consumption data from an online application.",
        "precondition": "User has valid login credentials for their energy account.",
        "actors": "User, Online Application",
        "steps": "1: User navigates to the login page of the energy account application. 2: User enters their login credentials and submits the login form. 3: The system validates the user's credentials and grants access to the account. 4: User navigates to the section displaying daily energy consumption data."
      },
      {
        "name": "Control Lighting/Heating/Cooling Systems",
        "scenario": "A user logs in to their energy account or control system to control the lighting, heating, or cooling systems via an application.",
        "precondition": "User has valid login credentials for the energy account or control system.",
        "actors": "User, Control System Application",
        "steps": "1: User logs in to the control system application using their credentials. 2: User navigates to the section to control the lighting, heating, or cooling systems. 3: User adjusts the settings to reduce energy waste by turning off the lights, heating, or cooling systems."
      },
      {
        "name": "Train ML Model for Historical Consumption Pattern",
        "scenario": "An ML model is trained to learn the historical consumption pattern for energy optimization.",
        "precondition": "Historical energy consumption data is available for training the ML model.",
        "actors": "ML Model Trainer, Data",
        "steps": "1: ML Model Trainer prepares the historical energy consumption data for training. 2: The ML model is trained to learn and analyze the historical consumption pattern."
      },
      {
        "name": "Automate Daily Data Extraction and Conversion",
        "scenario": "The UiPath Studio workflow automates the extraction and conversion of daily energy consumption data.",
        "precondition": "UiPath Studio workflow and Automation Cloud Document Understanding are set up and functional.",
        "actors": "UiPath Studio, Automation Cloud Document Understanding",
        "steps": "1: UiPath Studio workflow logs in to the energy account application and navigates to the daily data usage screen. 2: The workflow extracts the data and converts it into a PDF document. 3: The PDF file is uploaded into Automation Cloud Document Understanding for classification, extraction, and validation."
      },
      {
        "name": "Identify Inefficiencies and Trigger Alert",
        "scenario": "The system identifies inefficiencies in energy consumption and triggers an alert or warning message.",
        "precondition": "Data on energy consumption and patterns is available for analysis.",
        "actors": "System, User",
        "steps": "1: The system analyzes the energy consumption data and patterns to identify inefficiencies. 2: If inefficiencies are detected, the system triggers an alert or warning message to notify the user or appropriate personnel."
      }
    ],
    "user_story_gpt": "As a user, I want to log in to my energy account to easily retrieve and monitor my daily energy consumption data. I can then utilize the control system to adjust lighting, heating, or cooling settings to minimize energy waste. Furthermore, I want the system to automatically extract daily energy data and convert it into a format ready for analysis, ensuring efficient consumption management. To enhance energy optimization, I would like to train an ML model using historical data to identify patterns and help reduce inefficiencies. Additionally, the system should notify me with alerts if any inefficiencies in energy usage are detected, enabling proactive adjustments to my consumption habits.",
    "user_story_llama": "As a user, I want to be able to log in to my energy account and retrieve my daily energy consumption data through an online application, and also have the ability to control my lighting, heating, and cooling systems remotely to reduce energy waste. Additionally, I want the system to utilize machine learning models trained on historical consumption patterns to optimize energy usage. The system should also automate the daily extraction and conversion of my energy consumption data, and identify any inefficiencies in my energy usage, triggering alerts or warnings when necessary, so that I can make informed decisions to reduce my energy consumption and optimize my energy account.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Upload Receipt Image",
        "scenario": "User uploads an image of a receipt to the expense tracking system.",
        "precondition": "User must have an account and access to the receipt upload functionality.",
        "actors": "User",
        "steps": "1: User navigates to the receipt upload section of the expense tracking system. 2: User selects the image of the receipt from their device or cloud storage. 3: The system processes the uploaded image to extract expense information. 4: The system validates and saves the extracted expense details."
      },
      {
        "name": "View Expense Insights",
        "scenario": "User views insights and analysis of their expenses from the tracking system.",
        "precondition": "User must be logged in and have uploaded expense receipts.",
        "actors": "User",
        "steps": "1: User accesses the expense insights or analysis dashboard. 2: The system retrieves the expense data and generates insights based on the information. 3: The system presents the insights and analysis to the user."
      },
      {
        "name": "Automated Expense Extraction",
        "scenario": "The system automatically extracts expense amounts from uploaded receipt images.",
        "precondition": "Receipt images must be uploaded to the system.",
        "actors": "System",
        "steps": "1: The system continuously monitors for new receipt images uploaded to the expense tracking system. 2: Upon detecting a new receipt image, the system processes the image to extract expense amounts. 3: The system saves the extracted expense details into the expense tracking database."
      },
      {
        "name": "Export Expense Report",
        "scenario": "User exports a report of their expenses from the tracking system.",
        "precondition": "User must be logged in and have expense data in the system.",
        "actors": "User",
        "steps": "1: User navigates to the expense report export section of the system. 2: User selects the desired parameters for the expense report (e.g., date range, categories). 3: The system generates a report based on the user's parameters. 4: The system presents the user with options to download or email the generated expense report."
      }
    ],
    "user_story_gpt": "As a user of the expense tracking system, I want to seamlessly upload images of receipts so that the system can automatically extract and save expense details with minimal effort from my side. Once the receipts are uploaded, I should be able to view insightful analytics about my spending habits on the dashboard. Additionally, I want the flexibility to export detailed expense reports based on specific parameters like date ranges and categories, ensuring I have a complete overview of my expenses at any time.",
    "user_story_llama": "As a user, I want to be able to upload images of my receipts to the expense tracking system, so that the system can automatically extract and save the expense details for me. I also want to be able to view insights and analysis of my expenses, generated by the system based on the uploaded receipts. Furthermore, I want the system to continuously monitor for new receipt uploads and automatically extract expense amounts, saving me time and effort. Additionally, I want to be able to export a report of my expenses, with customizable parameters such as date range and categories, so that I can easily download or email the report for my records or for sharing with others.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Predict Food Requirement",
        "scenario": "The system predicts the amount of food required to be prepared based on various factors including the day, weather, events, holidays, and reservations.",
        "precondition": "The system must have access to relevant data such as weather forecast, events schedule, holiday calendar, and reservation records.",
        "actors": "Restaurant Staff",
        "steps": "1: Restaurant staff access the F.L.U.F.F.I.E system 2: Staff input the date, check the weather forecast, and verify scheduled events and holidays 3: The system processes the input data and predicts the quantity of food required for the day 4: The system provides the predicted food requirement to the restaurant staff"
      },
      {
        "name": "Divert Remaining Food",
        "scenario": "In the event of excess food, the system facilitates diverting it from landfills to donation programs.",
        "precondition": "There must be excess food available at the restaurant.",
        "actors": "Restaurant Staff",
        "steps": "1: Restaurant staff access the F.L.U.F.F.I.E system 2: Staff identifies the excess food that remains unconsumed 3: The system suggests local donation programs or food banks to redirect the excess food 4: Restaurant staff coordinate the donation of excess food through the provided information"
      },
      {
        "name": "Improve Operational Efficiency",
        "scenario": "The system aids in reducing costs and improving operational efficiency for the restaurant.",
        "precondition": "The system must have access to historical data and real-time inputs.",
        "actors": "Restaurant Management",
        "steps": "1: Restaurant management accesses the F.L.U.F.F.I.E system 2: The system analyzes historical data, real-time inputs, and various factors contributing to food wastage 3: System provides recommendations to optimize food preparation, minimize waste, and enhance operational efficiency"
      },
      {
        "name": "Promote Sustainable Food System",
        "scenario": "The system supports the promotion of a more equitable and sustainable food system.",
        "precondition": "The restaurant must be committed to sustainable practices.",
        "actors": "Restaurant Management",
        "steps": "1: Restaurant management accesses the F.L.U.F.F.I.E system 2: The system provides insights and recommendations for sustainable food management practices 3: Restaurant management implements the recommended sustainable practices to support a more equitable and sustainable food system"
      }
    ],
    "user_story_gpt": "As a restaurant manager, I want to utilize the F.L.U.F.F.I.E system to accurately predict the amount of food that needs to be prepared based on day-specific factors like weather, events, and reservations. This will help reduce waste and improve usage efficiency. In case of surplus food, I want the system to facilitate the redirection of this excess to local donation programs, aligning with our commitment to sustainability. Moreover, I desire the system to analyze data and provide actionable insights to enhance operational efficiency by optimizing food prep procedures and reducing costs. Finally, implementing sustainable practices should be a core benefit, helping us support an equitable food system.",
    "user_story_llama": "As a restaurant staff and management, I want to use the F.L.U.F.F.I.E system so that it can predict the amount of food required to be prepared based on various factors such as day, weather, events, holidays, and reservations, and provide us with the predicted food requirement. Additionally, the system should facilitate diverting excess food from landfills to donation programs by suggesting local donation programs or food banks. The system should also aid in improving operational efficiency by analyzing historical data and real-time inputs, and providing recommendations to optimize food preparation, minimize waste, and enhance operational efficiency. Furthermore, the system should support the promotion of a more equitable and sustainable food system by providing insights and recommendations for sustainable food management practices, enabling us to implement these practices and reduce food waste, ultimately contributing to a more sustainable food system.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Access Dashboard",
        "scenario": "Customer service team or data analysts access the user-friendly dashboard of the Google Reviews Analytics app.",
        "precondition": "The user must be authenticated and have the necessary permissions to access the dashboard.",
        "actors": "['Customer Service Team', 'Data Analysts']",
        "steps": "1: User logs into the Google Reviews Analytics app. 2: User is presented with the dashboard displaying Google reviews data. 3: User can view graphical representations and statistical insights of the reviews data."
      },
      {
        "name": "Extract Google Reviews",
        "scenario": "Users extract Google reviews for analysis using the app's functionality.",
        "precondition": "The user must have access to the Google Reviews Analytics app and be authenticated.",
        "actors": "['Customer Service Team', 'Data Analysts']",
        "steps": "1: User navigates to the extraction section of the app. 2: User specifies the parameters for extracting Google reviews (e.g., time range, keywords). 3: The app processes the request and retrieves the Google reviews data."
      },
      {
        "name": "Analyze Google Reviews",
        "scenario": "Users utilize the app to perform sentiment analysis and generate improvement suggestions for the extracted Google reviews.",
        "precondition": "The user must have the extracted Google reviews data available in the app.",
        "actors": "['Customer Service Team', 'Data Analysts']",
        "steps": "1: User accesses the analysis section of the app. 2: User selects the option to perform sentiment analysis on the reviews data. 3: The app uses GPT-4's advanced AI capabilities to analyze sentiments and generate improvement suggestions based on the reviews. 4: Generated insights and suggestions are displayed for user review and action."
      },
      {
        "name": "Make Data-Driven Decisions",
        "scenario": "Organization uses the analysis results to make data-driven decisions for service improvement.",
        "precondition": "The decision makers and management team have access to the analyzed Google reviews insights.",
        "actors": "['Decision Makers', 'Management Team']",
        "steps": "1: Decision makers review the sentiment analysis and improvement suggestions provided by the app. 2: They utilize the insights to identify areas for service improvement and formulate action plans. 3: Data-driven decisions are made based on the analysis results to enhance services and address negative feedback effectively."
      },
      {
        "name": "Continuous Improvement",
        "scenario": "Organization leverages the google review analysis results to drive continuous improvement and enhance overall performance.",
        "precondition": "The organization's leadership and quality assurance team have access to the analysis results and improvement suggestions.",
        "actors": "['Organization Leadership', 'Quality Assurance Team']",
        "steps": "1: Leadership encourages the implementation of improvement suggestions based on the analysis. 2: Action plans are developed to address service gaps and improve customer satisfaction. 3: Quality assurance team monitors the implementation and effectiveness of the improvement initiatives to ensure continuous enhancement of services."
      }
    ],
    "user_story_gpt": "As a member of the customer service team or a data analyst, I want to use the Google Reviews Analytics app to access a user-friendly dashboard, extract and analyze Google reviews, and perform sentiment analysis using advanced AI. This allows us to generate valuable insights and improvement suggestions. Decision makers utilize these insights to inform data-driven decisions for service enhancement, addressing any negative feedback effectively. Furthermore, organizational leadership and the quality assurance team collaborate to implement these suggestions, ensuring continuous improvement and maintaining superior service quality.",
    "user_story_llama": "As a customer service team member or data analyst, I want to access a user-friendly dashboard in the Google Reviews Analytics app, where I can extract and analyze Google reviews using the app's functionality, including sentiment analysis and generation of improvement suggestions powered by GPT-4's advanced AI capabilities. This will enable our decision makers and management team to make data-driven decisions for service improvement based on the analyzed insights. Furthermore, our organization's leadership and quality assurance team will leverage these analysis results to drive continuous improvement, enhancing overall performance by addressing service gaps, improving customer satisfaction, and ensuring the effective implementation of improvement initiatives.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Blood Test Report Upload",
        "scenario": "A user uploads their laboratory blood test report to the HSLA platform for analysis and personalized advice.",
        "precondition": "User must have a registered account on the HSLA platform",
        "actors": "User",
        "steps": "1: User navigates to the blood test report upload section of the HSLA platform 2: User selects the option to upload their laboratory blood test report 3: User uploads the report file 4: The system processes the uploaded report for analysis"
      },
      {
        "name": "View Deciphered Blood Test Results",
        "scenario": "A user views the deciphered results of their blood test report on the HSLA platform.",
        "precondition": "User must have uploaded a laboratory blood test report and be logged in to their HSLA account",
        "actors": "User",
        "steps": "1: User navigates to the section for viewing deciphered blood test results 2: User selects the previously uploaded blood test report 3: The system displays the easy-to-understand explanations and recommendations based on the deciphered results"
      },
      {
        "name": "Access Personalized Recommendations",
        "scenario": "A user accesses personalized recommendations based on their blood test results for aspects such as diet, exercise, stress management, and health risks.",
        "precondition": "User must have uploaded a laboratory blood test report and viewed deciphered results",
        "actors": "User",
        "steps": "1: User navigates to the personalized recommendations section of the HSLA platform 2: The system generates tailored advice based on the deciphered blood test results, including diet, exercise, stress management, and health risk mitigation 3: The user reviews the personalized recommendations"
      },
      {
        "name": "Ensure Data Confidentiality and Security",
        "scenario": "Users ensure that their laboratory blood test data is handled with utmost confidentiality and security on the HSLA platform.",
        "precondition": "User must have uploaded a laboratory blood test report",
        "actors": "User",
        "steps": "1: User reviews the data privacy and security policy of HSLA 2: The system provides information regarding the measures taken to secure and protect user data 3: The user acknowledges and confirms their understanding of the data confidentiality and security measures"
      },
      {
        "name": "Empowerment with Evidence-Based Health Information",
        "scenario": "Users access evidence-based health information on the HSLA platform to make informed decisions for a healthier life.",
        "precondition": "User must be logged in to their HSLA account",
        "actors": "User",
        "steps": "1: User navigates to the evidence-based health information section of the platform 2: The system presents scientifically backed health insights, tips, and articles 3: The user explores the evidence-based information to gain knowledge for making informed health decisions"
      }
    ],
    "user_story_gpt": "As a user of the HSLA platform, I want the ability to upload my laboratory blood test reports to receive detailed analysis and personalized health advice. Once my report is uploaded, I should be able to view easy-to-understand interpretations of my results and receive tailored recommendations for diet, exercise, stress management, and risk prevention. Further, I want to ensure my data is handled with complete confidentiality and security. Accessing evidence-based health information on the platform will empower me to make informed decisions and lead a healthier life.",
    "user_story_llama": "As a user, I want to upload my laboratory blood test report to the HSLA platform so that I can view deciphered results and receive personalized recommendations for improving my health, including diet, exercise, stress management, and mitigating health risks. I also want to ensure that my data is handled with utmost confidentiality and security, and have access to evidence-based health information to make informed decisions for a healthier life, by being able to review the platform's data privacy and security policy, and explore scientifically backed health insights, tips, and articles, thereby empowering me to take control of my health and wellbeing.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Upload Document",
        "scenario": "User uploads a PDF document to the app's database for future querying.",
        "precondition": "User must be logged into the app and have a PDF document ready for upload.",
        "actors": "User",
        "steps": "1: User navigates to the 'Upload Document' tab within the app. 2: User selects the option to upload a document. 3: User chooses the PDF file from their device and uploads it to the app's database. 4: The system securely stores the document in the database, associating it with the user's account."
      },
      {
        "name": "Query Knowledge Base",
        "scenario": "User engages in conversation with the GPT language model to obtain insights from a specific document.",
        "precondition": "User must have uploaded documents in the app's database and be logged into the app.",
        "actors": "User",
        "steps": "1: User navigates to the 'Query Knowledge Base' tab within the app. 2: User selects a specific document from the database for querying. 3: User formulates a question or request for information based on the selected document. 4: The system utilizes the GPT language model to provide insightful answers and information based on the query. 5: The system displays the responses from the GPT language model for the user's review."
      }
    ],
    "user_story_gpt": "As a user, I want to seamlessly upload my PDF documents to the app’s database after logging in, so they are securely stored and associated with my account. Additionally, I wish to query these documents by engaging in a conversation with a GPT language model. This way, I can easily obtain insightful answers and information based on my queries, enhancing my understanding and utilization of the stored documents.",
    "user_story_llama": "As a user, I want to upload PDF documents to the app's database and then be able to query those documents using the GPT language model, so that I can gain insights and obtain specific information from the documents I've uploaded, with the system securely storing my documents and providing me with relevant and accurate answers to my queries.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Query Website",
        "scenario": "User extracts information from a website using the app and gains insights about a company.",
        "precondition": "User must be logged into the app and have a website URL for querying.",
        "actors": "User",
        "steps": "1: User navigates to the 'Query Website' tab within the app. 2: User inputs the website URL of the company for which information is required. 3: The app automatically retrieves relevant details about the company, including general information, financial records, and a detailed financial analysis. 4: The system presents the extracted information and analysis to the user for review and analysis."
      }
    ],
    "user_story_gpt": "As a user, I want to be able to extract and analyze information from a company's website using an app, so that I can gain insights into the company's general information and financial status. Once logged into the app, I should be able to input a website URL, and the system will automatically retrieve and present the relevant details, providing me with a comprehensive review and analysis of the company's data for my evaluation.",
    "user_story_llama": "As a user, I want to use the app to query a website so that I can automatically extract and gain insights about a company, including its general information, financial records, and detailed financial analysis, by simply inputting the company's website URL, thereby saving time and effort in manually searching for the required information.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Monitor Students' Arrival by Bus",
        "scenario": "A teacher uses the Little Lighthouse system to monitor the arrival of students by bus.",
        "precondition": "The school bus is equipped with a tracking device that integrates with the Little Lighthouse system.",
        "actors": "Teacher",
        "steps": "1: Teacher logs into the Little Lighthouse system. 2: Teacher selects the 'Bus Arrival Monitoring' option. 3: The system displays the real-time location and status of the school bus. 4: Teacher verifies the arrival of students by bus using the information provided."
      },
      {
        "name": "Track Students During Walk/Excursion",
        "scenario": "Teachers use the Little Lighthouse system to track students during a walk or excursion.",
        "precondition": "The students are equipped with tracking devices and the excursion route is predefined in the system.",
        "actors": "Teacher",
        "steps": "1: Teacher accesses the Little Lighthouse system. 2: Teacher selects the 'Walk/Excursion Tracking' feature. 3: The system displays the real-time location of the students along the predefined route. 4: Teacher monitors the movement of students during the walk/excursion."
      },
      {
        "name": "Monitor Students' Off-school Departure",
        "scenario": "Teachers use the Little Lighthouse system to monitor students leaving school premises.",
        "precondition": "The students' departure time and departure location are integrated into the Little Lighthouse system.",
        "actors": "Teacher",
        "steps": "1: Teacher logs into the Little Lighthouse system. 2: Teacher selects the 'Off-school Departure Monitoring' option. 3: The system displays the departure status and location of the students. 4: Teacher ensures the safe departure of students from school to their respective locations."
      },
      {
        "name": "Provide Real-time Student Status to Caregivers",
        "scenario": "The Little Lighthouse system provides real-time updates on students' whereabouts to the caregivers/parents.",
        "precondition": "Caregivers/parents have authorized access to the Little Lighthouse system or receive notifications from the system.",
        "actors": "System",
        "steps": "1: System continuously updates and tracks the location/status of the students. 2: System sends real-time notifications or provides access to caregivers/parents to view the students' whereabouts. 3: Caregivers/parents receive and review the real-time updates on students' movements and location."
      }
    ],
    "user_story_gpt": "As a teacher, I want to use the Little Lighthouse system to ensure the safety and timely monitoring of students during their commute by bus, walks, and excursions. The system should enable me to verify their arrival and departure from school premises in real-time. Additionally, I want caregivers to receive real-time updates on students' locations and movements, ensuring peace of mind for both me and the caregivers.",
    "user_story_llama": "As a teacher, I want to use the Little Lighthouse system so that I can monitor the arrival of students by bus, track their movement during walks or excursions, and ensure their safe departure from school. Additionally, I want the system to provide real-time updates on students' whereabouts to their caregivers/parents, enabling them to stay informed about their children's location and status throughout the day, thereby enhancing the overall safety and supervision of students.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A new user registers an account on the loan accessing app.",
        "precondition": "User does not already have an account on the app",
        "actors": "New User",
        "steps": "1: New User navigates to the registration page of the app 2: New User fills in necessary registration details 3: New User submits the registration form 4: The system validates the provided details 5: The system creates a new user account"
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account on the loan accessing app.",
        "precondition": "User must have a registered account",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the login page of the app 2: Registered User enters their login credentials 3: Registered User submits the login form 4: The system validates the login credentials 5: The system grants access to the user account"
      },
      {
        "name": "Apply for a Loan",
        "scenario": "A user applies for a loan using the app.",
        "precondition": "User must be logged in and eligible to apply for a loan",
        "actors": "User",
        "steps": "1: User navigates to the loan application section in the app 2: User enters the required details for the loan application 3: User submits the loan application form 4: The system processes the application and performs initial eligibility checks 5: The system confirms the submission and provides a reference number for the application"
      },
      {
        "name": "Loan Approval Process",
        "scenario": "The loan approval process is initiated for a submitted loan application.",
        "precondition": "A loan application must have been submitted",
        "actors": "Loan Officer, System",
        "steps": "1: Loan Officer accesses the pending loan applications 2: Loan Officer reviews the details and credit history of the applicant 3: System performs advanced eligibility checks using AI and ML technologies 4: Loan Officer approves or rejects the loan application based on the assessment 5: The system updates the application status and notifies the user about the decision"
      },
      {
        "name": "Loan Repayment Management",
        "scenario": "A user manages their loan repayment through the app.",
        "precondition": "User must have an approved loan",
        "actors": "User",
        "steps": "1: User accesses the loan repayment section in the app 2: User views the loan details including outstanding amount and repayment schedule 3: User makes a repayment using the app's payment gateway 4: The system updates the repayment status and outstanding balance"
      },
      {
        "name": "Customer Support",
        "scenario": "A user seeks customer support regarding their loan or application.",
        "precondition": "User may have an ongoing loan application or an approved loan",
        "actors": "User, Customer Support Agent",
        "steps": "1: User navigates to the customer support section in the app 2: User initiates a support request or query 3: Customer Support Agent receives the request and provides assistance 4: The system logs the support interaction for reference and resolution tracking"
      }
    ],
    "user_story_gpt": "As a user of the loan accessing app, I want to register and create an account to seamlessly manage my financial needs. Once registered, I can log into my account and apply for loans, ensuring that my eligibility is checked and my application is processed efficiently. I rely on the app to inform me about the status of my loan application, which is reviewed by a loan officer and enhanced by AI technologies for a comprehensive assessment. With an approved loan, I can access the app to manage my repayment schedule and make payments securely. Should I have any questions or need assistance, I can reach out to customer support directly through the app, ensuring I receive timely and recorded assistance when necessary.",
    "user_story_llama": "As a user, I want to be able to register for an account on the loan accessing app, log in to my account, and apply for a loan using the app, so that I can easily access loan services. I also want the app to guide me through the loan approval process, which includes initial and advanced eligibility checks using AI and ML technologies, so that I can get a quick decision on my loan application. Additionally, I want to be able to manage my loan repayment through the app, including viewing my loan details, making repayments, and tracking my repayment status. Furthermore, I want to be able to seek customer support regarding my loan or application, and have my queries and issues resolved efficiently by the customer support team, so that I can have a seamless and supportive loan experience.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "User Initiated Personalized Meditation Session",
        "scenario": "User initiates a personalized guided meditation session with the UiPath App.",
        "precondition": "User has access to the UiPath App and wants to engage in a personalized guided meditation",
        "actors": "User, UiPath App",
        "steps": "1: User opens the UiPath App 2: User selects or types the context for the meditation session 3: UiPath App processes the context input 4: The App triggers the Attended Robot to generate a personalized guided meditation using generative AI 5: The meditation session is launched for the user"
      },
      {
        "name": "Generation of Personalized Guided Meditation",
        "scenario": "The Attended Robot generates a unique guided meditation experience personalized to the user's needs",
        "precondition": "The UiPath App has received the user's context for the meditation session",
        "actors": "Attended Robot, Generative AI",
        "steps": "1: The Attended Robot receives the parameters and context for the meditation session 2: Generative AI utilizes prompt-engineering to generate the guided meditation in real-time 3: The personalized guided meditation is created based on the user's needs and context 4: The meditation session is launched for the user"
      },
      {
        "name": "Delivery of Meditation Service via UiPath Apps",
        "scenario": "UiPath Apps deliver the personalized guided meditation service to the user",
        "precondition": "The personalized guided meditation session has been generated and is ready for delivery",
        "actors": "UiPath Apps",
        "steps": "1: UiPath Apps receive the generated personalized guided meditation 2: The guided meditation is delivered to the user via the UiPath Apps interface"
      },
      {
        "name": "Immediate Relief from 1-Minute Meditation Session",
        "scenario": "User experiences immediate effect and/or relief after a 1-minute personalized guided meditation session",
        "precondition": "User has engaged in a 1-minute personalized guided meditation session",
        "actors": "User",
        "steps": "1: User completes the 1-minute meditation session 2: User experiences immediate effect and/or relief from the session"
      }
    ],
    "user_story_gpt": "As a user seeking a personalized meditation experience, I want to access and utilize the UiPath App to engage in guided meditation sessions that are tailored to my needs. When I open the app, I can specify my desired context for the meditation. The app then processes my input and utilizes an Attended Robot teamed with generative AI to create a unique, personalized guided meditation session. This session is delivered directly to me through the app, allowing me to feel immediate relief and effect, even from a brief 1-minute session.",
    "user_story_llama": "As a user, I want to initiate a personalized guided meditation session through the UiPath App, so that I can receive a unique and tailored meditation experience generated by the Attended Robot using generative AI, and delivered to me via the UiPath Apps interface. I want the system to process my context input and trigger the generation of a personalized guided meditation, which can be launched immediately for my use. Additionally, I want to be able to experience immediate relief and effects after completing a 1-minute personalized guided meditation session, allowing me to benefit from the meditation service provided by the UiPath Apps.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A new user registers an account in the Portfolio Manager application.",
        "precondition": "User does not already have an account in the application",
        "actors": "New User",
        "steps": "1: New User navigates to the registration page of the Portfolio Manager application 2: New User fills in the required registration details 3: New User submits the registration form 4: The system validates the provided details 5: The system creates a new user account or rejects the registration if details are invalid or already in use"
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account in the Portfolio Manager application.",
        "precondition": "User must have a registered account and know their login credentials",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the login page of the Portfolio Manager application 2: Registered User enters their login credentials 3: Registered User submits the login form 4: The system validates the login credentials 5: The system grants access to the user account"
      },
      {
        "name": "Plan Investments",
        "scenario": "User plans their investments using the Portfolio Manager application.",
        "precondition": "User must be logged in and have access to the investment planning feature",
        "actors": "User",
        "steps": "1: User selects the investment planning option 2: User enters prerequisite details such as risk appetite, investment amount, and investment duration 3: The system processes the provided details 4: The system creates a personalized investment portfolio based on the user's input 5: The system integrates with Open AI to enhance the investment portfolio"
      },
      {
        "name": "Edit Portfolio",
        "scenario": "User modifies their personalized portfolio in the Portfolio Manager application.",
        "precondition": "User must have a personalized portfolio created",
        "actors": "User",
        "steps": "1: User accesses their personalized portfolio 2: User selects the option to edit the portfolio 3: User makes the necessary modifications to the portfolio 4: The system updates the personalized portfolio based on the user's modifications 5: The system re-evaluates the portfolio using Open AI integration"
      },
      {
        "name": "View Risk Analysis",
        "scenario": "User views the risk analysis of their personalized portfolio in the Portfolio Manager application.",
        "precondition": "User must have a personalized portfolio created",
        "actors": "User",
        "steps": "1: User navigates to the risk analysis section of their personalized portfolio 2: The system calculates and displays the risk analysis of the portfolio based on various factors 3: User reviews the risk analysis to understand the risk associated with their investments"
      }
    ],
    "user_story_gpt": "As a user of the Portfolio Manager application, I want to register an account to start managing my financial investments. Once registered, I can easily log in using my credentials. With access to the application, I am able to plan my investments by specifying details like risk preference, investment amount, and duration, resulting in a personalized portfolio. The system uses AI integration to optimize my portfolio. Furthermore, I can edit my portfolio at any time, ensuring it aligns with my current financial goals. To make informed decisions, I have the capability to view detailed risk analyses of my investments, helping me understand potential risks and make strategic adjustments as needed.",
    "user_story_llama": "As a user, I want to register for an account in the Portfolio Manager application, and then log in to access the investment planning feature, so that I can plan my investments by providing details such as risk appetite, investment amount, and duration, and receive a personalized investment portfolio. I also want to be able to edit my portfolio as needed, and view the risk analysis of my investments, with the system utilizing Open AI integration to enhance and re-evaluate my portfolio, thereby enabling me to make informed decisions about my investments.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Ambulance Registration",
        "scenario": "An ambulance service registers for the HyperHack-2023 - Rapid Response system.",
        "precondition": "The ambulance service has not yet registered with the system.",
        "actors": "Ambulance Service",
        "steps": "1: Ambulance service navigates to the registration page of the system. 2: Ambulance service fills in the required registration details (e.g., service name, contact information). 3: Ambulance service submits the registration form. 4: The system validates the provided details. 5: The system creates a new account for the ambulance service."
      },
      {
        "name": "Ambulance Login",
        "scenario": "Registered ambulance service securely logs into their account in the HyperHack-2023 - Rapid Response system.",
        "precondition": "Ambulance service must have a registered account and know their login credentials.",
        "actors": "Ambulance Service",
        "steps": "1: Ambulance service navigates to the login page of the system. 2: Ambulance service enters their login credentials (e.g., username, password). 3: Ambulance service submits the login form. 4: The system validates the login credentials. 5: The system grants access to the ambulance service account."
      },
      {
        "name": "Emergency Call Handling",
        "scenario": "An emergency call is received and handled by the HyperHack-2023 - Rapid Response system.",
        "precondition": "An emergency call is made to the dispatch center or routed directly to the system.",
        "actors": "Dispatch Center, Ambulance Service, Hospital",
        "steps": "1: Dispatch center receives the emergency call and enters the details into the system. 2: The system identifies the nearest available ambulance service and notifies them about the emergency. 3: Ambulance service acknowledges the call and proceeds to the emergency location. 4: The system alerts the relevant hospital based on the patient's needs and location. 5: The hospital confirms the availability of specialist or bed, and the system relays this information to the ambulance service. 6: If the hospital is not suitable, the system identifies the next nearest available hospital and repeats the process."
      },
      {
        "name": "Real-Time Traffic Monitoring",
        "scenario": "The system monitors live traffic conditions to optimize ambulance routing.",
        "precondition": "An ambulance has been dispatched for an emergency.",
        "actors": "System, Ambulance Service",
        "steps": "1: The system continuously monitors live traffic conditions using the Bing Maps API. 2: The system calculates the most optimal route for the ambulance to reach the designated hospital based on the real-time traffic data. 3: The system provides ongoing updates to the ambulance service about traffic conditions and suggests alternative routes if necessary."
      },
      {
        "name": "Communication with Hospital",
        "scenario": "Paramedics communicate vital updates on the patient's condition en route to the hospital.",
        "precondition": "An ambulance is en route to the hospital for an emergency.",
        "actors": "Paramedics, Hospital",
        "steps": "1: Paramedics use the UiPath Apps application to communicate directly with the hospital. 2: Paramedics provide vital updates on the patient's condition using the application. 3: The hospital receives and acknowledges the updates, preparing for the patient's arrival and treatment."
      },
      {
        "name": "Predictive Analysis using Machine Learning",
        "scenario": "The system utilizes patient vitals to implement predictive analysis using Machine Learning.",
        "precondition": "Vital information about the patient is available.",
        "actors": "System, Ambulance Service",
        "steps": "1: The system collects and analyzes the patient's vitals using AI Center and Machine Learning algorithms. 2: The system provides insights to the ambulance service regarding the patient's condition, aiding in timely diagnosis and preparation for potential critical conditions during transit."
      }
    ],
    "user_story_gpt": "As an ambulance service provider, I want to utilize the HyperHack-2023 - Rapid Response system to efficiently manage our operations during emergencies. The system should allow new ambulances to easily register and create an account. Once registered, ambulance teams should be able to securely log in to their accounts. When an emergency call comes in, the system should handle the call by dispatching the nearest available ambulance and notifying the relevant hospital about the incoming patient, ensuring the hospital is prepared by confirming resource availability. Meanwhile, real-time traffic monitoring should optimize our routing to the hospital. Additionally, paramedics on board need to communicate crucial updates on the patient's condition directly to the hospital en route, facilitating immediate care upon arrival. The system should also leverage Machine Learning to analyze patient vitals, offering predictive insights that aid in anticipating potential health issues during the journey.",
    "user_story_llama": "As an ambulance service, I want to register and securely log into the HyperHack-2023 - Rapid Response system so that I can receive and handle emergency calls efficiently. Once logged in, I want the system to identify the nearest available ambulance service and notify us about emergencies, while also alerting relevant hospitals based on patient needs and location. Additionally, I want the system to monitor live traffic conditions in real-time to optimize our routing, providing ongoing updates and suggesting alternative routes when necessary. Furthermore, I want to be able to communicate vital updates on patient conditions to hospitals en route, and have the system utilize patient vitals for predictive analysis using Machine Learning to aid in timely diagnosis and preparation for potential critical conditions during transit. This will enable us to provide better emergency services, reduce response times, and improve patient outcomes.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Volunteer Registration",
        "scenario": "A new volunteer registers an account on RefugeeConnect",
        "precondition": "Volunteer does not already have an account on RefugeeConnect",
        "actors": "New Volunteer",
        "steps": "1: New Volunteer navigates to the registration page of RefugeeConnect 2: New Volunteer fills in the required registration details (e.g., name, contact information, location) 3: New Volunteer submits the registration form 4: The system validates the provided details 5: The system creates a new volunteer account"
      },
      {
        "name": "Refugee Search for Volunteers",
        "scenario": "Refugees search for registered volunteers on RefugeeConnect",
        "precondition": "Refugee must have access to the RefugeeConnect platform",
        "actors": "Refugee",
        "steps": "1: Refugee navigates to the search feature on the RefugeeConnect platform 2: Refugee enters criteria for the type of volunteer they are looking for (e.g., location, availability) 3: The system processes the search query 4: The system displays the list of volunteers matching the search criteria"
      },
      {
        "name": "Request Connection with Volunteer",
        "scenario": "Refugee requests a connection with a registered volunteer",
        "precondition": "Refugee has searched for volunteers and identified a potential match",
        "actors": "Refugee",
        "steps": "1: Refugee views the profile of the volunteer 2: Refugee sends a connection request to the volunteer 3: The system notifies the volunteer about the connection request 4: The system awaits the volunteer's response"
      },
      {
        "name": "Volunteer Accepts Refugee Connection Request",
        "scenario": "A registered volunteer accepts a connection request from a refugee",
        "precondition": "Volunteer has received a connection request from a refugee",
        "actors": "Volunteer",
        "steps": "1: Volunteer views the connection request from the refugee 2: Volunteer accepts the connection request 3: The system establishes the connection between the volunteer and the refugee"
      },
      {
        "name": "Communication between Volunteer and Refugee",
        "scenario": "Establishing communication between the connected volunteer and refugee",
        "precondition": "Connection between the volunteer and refugee has been established",
        "actors": "Volunteer, Refugee",
        "steps": "1: Volunteer and Refugee exchange contact information through the platform 2: Volunteer and Refugee engage in communication to discuss the details of the connection"
      },
      {
        "name": "Refugee Feedback on Volunteer",
        "scenario": "Refugee provides feedback on the volunteer after the connection experience",
        "precondition": "Connection with the volunteer has been established and the engagement has taken place",
        "actors": "Refugee",
        "steps": "1: Refugee provides a rating and feedback for the volunteer through the RefugeeConnect platform 2: The system updates the volunteer's profile with the feedback provided"
      }
    ],
    "user_story_gpt": "As a humanitarian platform developer working on RefugeeConnect, I want a seamless experience for new volunteers to register and create accounts so that they can be available to refugees in need. Once their accounts are created, refugees should be able to search for suitable volunteers based on specific criteria such as location and availability. Additionally, the system should facilitate the process for refugees to request connections with volunteers, notifying the volunteers to allow for acceptance. Once a connection is made, the platform should enable direct communication between refugees and volunteers to discuss details. Finally, it's important that refugees have the opportunity to provide feedback on their experiences, ensuring transparency and helping improve volunteer services.",
    "user_story_llama": "As a new volunteer, I want to register an account on RefugeeConnect so that I can provide support to refugees in need. Additionally, as a refugee, I want to be able to search for and connect with registered volunteers on the platform, based on criteria such as location and availability. Once I've found a potential match, I want to be able to request a connection with the volunteer and await their response. As a volunteer, I want to be able to accept connection requests from refugees and establish a connection, facilitating communication and exchange of contact information. After the connection experience, as a refugee, I want to be able to provide feedback on the volunteer, which will be used to update their profile, helping to ensure that refugees can make informed decisions when searching for volunteers. Overall, the goal is to create a platform that enables refugees to easily find and connect with suitable volunteers, facilitating a supportive and helpful experience for all parties involved.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Report Emergency Incident",
        "scenario": "A user reports an emergency incident through the UiPath app.",
        "precondition": "User has the UiPath app installed and has access to the emergency reporting feature.",
        "actors": "['User', 'UiPath app']",
        "steps": "1: User opens the UiPath app and navigates to the emergency reporting section. 2: User fills in the details of the emergency incident, including location and type of emergency. 3: UiPath app uses Machine Learning to classify the emergency scenario. 4: If the Machine Learning model successfully classifies the incident, the system proceeds to dispatch the appropriate response unit. 5: If the Machine Learning model fails to classify the incident or deems it as non-emergency, the case is pushed to the Action Center for human intervention."
      },
      {
        "name": "Manual Intervention in Incident Classification",
        "scenario": "A member of the disaster response team provides manual intervention in the incident classification through the Action Center.",
        "precondition": "Incident is flagged for manual intervention by the Machine Learning model.",
        "actors": "['Disaster Response Team Member', 'Action Center']",
        "steps": "1: Disaster Response Team Member receives the notification for manual intervention. 2: Member accesses the Action Center to review the incident details and classification. 3: Member manually classifies the incident as an emergency type or non-emergency. 4: Action Center updates the incident status based on the member's classification."
      },
      {
        "name": "Handle High Volume Incident Reporting",
        "scenario": "The system efficiently manages a high volume of incident reporting during disasters.",
        "precondition": "High volume of incident reports are being received due to a disaster.",
        "actors": "['Bot', 'System Admin']",
        "steps": "1: Bot processes the incoming incident reports using the Machine Learning model. 2: If incidents are successfully classified, the appropriate response units are dispatched. 3: If incidents cannot be classified by the Machine Learning model, or are deemed as non-emergencies, the cases are routed to the Action Center for manual intervention. 4: System Admin monitors and manages the incident flow to ensure timely response and allocation of resources."
      },
      {
        "name": "Inform User of Estimated Time of Arrival",
        "scenario": "The system notifies the app user of the Estimated Time of Arrival (ETA) of the dispatched response unit.",
        "precondition": "A response unit has been dispatched to the reported emergency incident.",
        "actors": "['System', 'Google Cloud Platform', 'App User']",
        "steps": "1: System integrates with the Google Cloud Platform to obtain real-time traffic and navigation data. 2: System calculates the Estimated Time of Arrival (ETA) for the dispatched response unit based on the current traffic conditions. 3: App user receives a notification with the ETA of the response unit."
      }
    ],
    "user_story_gpt": "As a user of the emergency reporting system, I want to quickly report emergencies through the UiPath app, so that immediate assistance can be dispatched. When I report an incident, the app uses Machine Learning to classify the scenario, ensuring that appropriate response units are sent quickly. If the system cannot classify the incident, it is flagged for manual intervention by the disaster response team through the Action Center, ensuring all cases are addressed. During high-volume events like disasters, the system efficiently manages incident reports, and an admin oversees resource allocation to maintain a timely response. Additionally, I will receive real-time notifications about the Estimated Time of Arrival of the response units, giving me peace of mind that help is on the way.",
    "user_story_llama": "As a user, I want to be able to report emergency incidents through the UiPath app, so that I can quickly and easily alert the authorities and receive a timely response. The system should use Machine Learning to classify the emergency scenario and dispatch the appropriate response unit. If the Machine Learning model is unable to classify the incident, I want it to be flagged for manual intervention by a member of the disaster response team through the Action Center. Additionally, during disasters when there is a high volume of incident reporting, I want the system to efficiently manage the incoming reports, using bots and System Admins to ensure timely response and allocation of resources. Once a response unit has been dispatched, I want to receive a notification with the Estimated Time of Arrival (ETA) of the unit, which is calculated based on real-time traffic and navigation data from the Google Cloud Platform, so that I can plan and prepare accordingly.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "User Authentication",
        "scenario": "A user logs into the Smart Dev Assist system.",
        "precondition": "User must have valid credentials and access to the Smart Dev Assist system.",
        "actors": "['User']",
        "steps": "1: User navigates to the login page of Smart Dev Assist platform. 2: User enters their login credentials (e.g., username, password). 3: User submits the login form. 4: The system validates the login credentials. 5: The system grants access to the user account."
      },
      {
        "name": "Generate SDD",
        "scenario": "An RPA developer generates a Solution Design Document (SDD) using Smart Dev Assist.",
        "precondition": "RPA Developer must be authenticated and have access to the SDD generation feature.",
        "actors": "['RPA Developer']",
        "steps": "1: RPA Developer navigates to the SDD generation section of Smart Dev Assist. 2: RPA Developer provides relevant inputs and requirements for the SDD. 3: Smart Dev Assist processes the inputs and generates a comprehensive SDD. 4: RPA Developer reviews and finalizes the generated SDD."
      },
      {
        "name": "Automate Test Case Generation",
        "scenario": "A tester utilizes Smart Dev Assist to automate the generation of test cases.",
        "precondition": "Tester must be authenticated and have access to the test case generation module.",
        "actors": "['Tester']",
        "steps": "1: Tester accesses the test case generation feature within Smart Dev Assist. 2: Tester provides relevant details and requirements for the test case scenario. 3: Smart Dev Assist processes the inputs and automatically generates the test cases. 4: Tester reviews and validates the generated test cases."
      },
      {
        "name": "Code Review",
        "scenario": "A developer requests a code review using Smart Dev Assist.",
        "precondition": "Developer must be authenticated and have code to be reviewed. Reviewer must be authenticated and available for code review.",
        "actors": "['Developer', 'Reviewer']",
        "steps": "1: Developer navigates to the code review section of Smart Dev Assist. 2: Developer submits the code for review, with relevant details and context. 3: Reviewer receives notification about the code review request. 4: Reviewer accesses the code review section, reviews the code, and provides feedback. 5: Developer receives the feedback and updates the code as necessary."
      },
      {
        "name": "Build Code Snippets",
        "scenario": "A developer uses Smart Dev Assist to build code snippets for RPA development.",
        "precondition": "Developer must be authenticated and have access to the code snippet building tool.",
        "actors": "['Developer']",
        "steps": "1: Developer accesses the code snippet building tool within Smart Dev Assist. 2: Developer specifies the requirements and type of code snippet needed. 3: Smart Dev Assist generates the code snippet based on the provided details. 4: Developer integrates the code snippet into the RPA development project."
      },
      {
        "name": "Recommend Solutions",
        "scenario": "A user seeks recommendations for resolving an issue using Smart Dev Assist.",
        "precondition": "User must be authenticated and have access to the solution recommendation feature.",
        "actors": "['User']",
        "steps": "1: User describes the issue or requirements for which a solution is needed. 2: Smart Dev Assist processes the information and recommends potential solutions. 3: User reviews the recommended solutions and selects the most suitable one for implementation."
      },
      {
        "name": "Input Solution Design Document",
        "scenario": "The Solution Architect provides a detailed Solution Design Document (SDD) as input to the automation solution.",
        "precondition": "The Solution Architect has a detailed SDD created in a charting software.",
        "actors": "Solution Architect",
        "steps": "1: The Solution Architect uploads the SDD to the automation solution. 2: The automation solution extracts details from the SDD."
      },
      {
        "name": "Generate Logic and Wrapper Workflows",
        "scenario": "The automation solution generates Logic and Wrapper workflows in UiPath Studio based on the extracted details from the SDD.",
        "precondition": "Details from the SDD have been successfully extracted.",
        "actors": "Automation Solution",
        "steps": "1: The automation solution creates necessary input and output arguments for the Logic and Wrapper workflows. 2: The solution picks the correct template for each of the logic and wrapper workflows. 3: Generated workflows are ready to be consumed in any automation project, such as in a REFramework project."
      },
      {
        "name": "Streamline Design and Build Stage",
        "scenario": "The automation solution streamlines the design and build stage of an RPA project.",
        "precondition": "Solution Design Document has been inputted and workflows have been generated.",
        "actors": "RPA Developers, Solution Architect",
        "steps": "1: RPA Developers can focus on building robust logic rather than performing repetitive tasks in setting up boilerplates in UiPath Studio. 2: The Solution Architect can be assured that the design has been mostly replicated in the developed code."
      },
      {
        "name": "Optimize CoE Efforts",
        "scenario": "The automation solution helps CoEs optimize their efforts by automating the 'translation phase' of RPA projects.",
        "precondition": "The automation solution has been implemented and utilized within the organization.",
        "actors": "Center of Excellence (CoE) Members",
        "steps": "1: CoEs can ensure adherence to internal best practices by optimizing their processes with the automation solution."
      }
    ],
    "user_story_gpt": "As a user of the Smart Dev Assist platform, I want to seamlessly authenticate into the system so that I can efficiently utilize various features such as generating a Solution Design Document (SDD) for RPA development, automating test case creation, and building meaningful code snippets. Additionally, I can request and perform thorough code reviews and receive solution recommendations for any technical issues. As a Solution Architect, I can input detailed SDDs, allowing the automation solution to generate Logic and Wrapper workflows in UiPath Studio. Furthermore, the tool helps streamline the design and build stages, ensuring RPA Developers can focus on crafting robust logic while minimizing repetitive setup tasks. By leveraging Smart Dev Assist, Centers of Excellence (CoE) can optimize their processes by automating the translation phase of projects, adhering to best practices across the organization.\"}",
    "user_story_llama": "As a user of the Smart Dev Assist system, I want to be able to log in securely and access various features such as generating Solution Design Documents (SDD), automating test case generation, requesting code reviews, building code snippets, and seeking recommendations for resolving issues. I also want the system to be able to input and process SDDs, generate Logic and Wrapper workflows in UiPath Studio, and streamline the design and build stage of RPA projects. Furthermore, I want the system to help optimize Center of Excellence (CoE) efforts by automating the 'translation phase' of RPA projects, ensuring adherence to internal best practices and allowing RPA developers to focus on building robust logic. Overall, I want the Smart Dev Assist system to provide a comprehensive and automated platform for RPA development, from design to build, and enable users to work more efficiently and effectively.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A new user creates an account to access UnsubSimplify.",
        "precondition": "User does not have an existing account on UnsubSimplify",
        "actors": "New User",
        "steps": "1: New User navigates to the registration page of UnsubSimplify 2: New User fills in the required registration details (e.g., username, email, password) 3: New User submits the registration form 4: The system validates the provided details 5: The system creates a new user account"
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account in UnsubSimplify.",
        "precondition": "User must have a registered account on UnsubSimplify and know their login credentials",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the login page of UnsubSimplify 2: Registered User enters their login credentials (e.g., username, password) 3: Registered User submits the login form 4: The system validates the login credentials 5: The system grants access to the user account"
      },
      {
        "name": "Search and Unsubscribe from Spam Emails",
        "scenario": "User searches for and unsubscribes from spam emails effortlessly.",
        "precondition": "User must be logged in and have access to their mailbox",
        "actors": "User",
        "steps": "1: User navigates to the UnsubSimplify dashboard 2: User accesses the spam email management feature 3: User initiates a search for spam emails 4: User selects the spam emails they want to unsubscribe from 5: The system initiates the unsubscribe process for selected emails"
      },
      {
        "name": "Delete Past Spam Emails",
        "scenario": "User deletes past spam emails to reduce energy requirements for storing them.",
        "precondition": "User must be logged in and have access to their mailbox",
        "actors": "User",
        "steps": "1: User navigates to the UnsubSimplify dashboard 2: User accesses the spam email management feature 3: User identifies the past spam emails they want to delete 4: User selects the past spam emails for deletion 5: The system initiates the deletion process for the selected past spam emails"
      }
    ],
    "user_story_gpt": "As a user of UnsubSimplify, I want to easily register and log into my account so I can manage my spam emails efficiently. Once logged in, I should be able to search for spam emails and unsubscribe from them effortlessly through a dedicated dashboard. Additionally, I want the ability to delete past spam emails to manage my storage more effectively and reduce energy consumption.",
    "user_story_llama": "As a new user, I want to register for an account on UnsubSimplify so that I can access its features. Once registered, I want to be able to log in to my account using my credentials. After logging in, I want to be able to search for and effortlessly unsubscribe from spam emails, and also delete past spam emails to free up storage space, thereby simplifying my email management experience and reducing clutter in my mailbox.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Recommend Automation During Chat",
        "scenario": "Doc Robot recommends an automation to a user during a chat conversation.",
        "precondition": "Doc Robot is connected to UiPath Assistant and Orchestrator and has access to a database of automation definitions.",
        "actors": "['Doc Robot', 'User']",
        "steps": "1: User initiates a chat conversation with Doc Robot. 2: Doc Robot analyzes the user's request and identifies a suitable automation. 3: Doc Robot recommends the identified automation to the user. 4: User reviews the recommendation and decides whether to proceed with the suggested automation."
      },
      {
        "name": "Execute Automation on Call",
        "scenario": "Doc Robot executes an automation based on user's request during a call.",
        "precondition": "Doc Robot is integrated with UiPath Assistant and Orchestrator, and the user has provided a clear request for an automation execution.",
        "actors": "['Doc Robot', 'User']",
        "steps": "1: User makes a call to Doc Robot. 2: Doc Robot listens to the user's request for an automation execution. 3: Doc Robot identifies the appropriate automation based on the user's request and initiates its execution. 4: Doc Robot provides feedback to the user regarding the status and outcome of the automation execution."
      },
      {
        "name": "Update Automation Definitions",
        "scenario": "Doc Robot updates its database of automation definitions from UiPath Orchestrator and Assistant.",
        "precondition": "Doc Robot has established connections to UiPath Orchestrator and Assistant, and there are new or modified automation definitions available.",
        "actors": "['Doc Robot', 'UiPath Orchestrator', 'UiPath Assistant']",
        "steps": "1: Doc Robot requests the latest automation definitions from UiPath Orchestrator and Assistant. 2: UiPath Orchestrator and Assistant provide the updated automation definitions to Doc Robot. 3: Doc Robot processes the received automation definitions and updates its internal database. 4: Doc Robot confirms the successful update of automation definitions."
      }
    ],
    "user_story_gpt": "As a user engaging with Doc Robot, I want the system to analyze my requests during chat and call interactions, so that suitable automations can be recommended or executed seamlessly. This requires Doc Robot to constantly update its database with the latest automation definitions from UiPath Orchestrator and Assistant, ensuring I always receive accurate and relevant automation solutions specific to my needs. This process will allow me to make informed decisions about leveraging automations efficiently in my tasks.",
    "user_story_llama": "As a user, I want to interact with Doc Robot so that I can receive recommendations for automations during our chat conversations, and then execute the suggested automations on call, allowing me to streamline my workflow. Additionally, I want Doc Robot to stay up-to-date with the latest automation definitions from UiPath Orchestrator and Assistant, ensuring that the recommendations and executions are always based on the most current and relevant automations, thereby providing me with the most efficient and effective solutions to my needs.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Automate Manual Data Transfers",
        "scenario": "Automate the manual transfer of data to reduce the need for verification activities",
        "precondition": "Invoices and supporting documentation are sent to the email inbox",
        "actors": "['Bot']",
        "steps": "1: Bot identifies new invoices from the mailbox 2: Bot stores the UID onto the Data Service to keep track of the email 3: Bot classifies the invoices based on single and multiple invoices"
      },
      {
        "name": "Automate Placement of Items into Vendor Folders",
        "scenario": "Automate tedious manual processes such as placing items into vendor folders",
        "precondition": "Invoices and supporting documentation are sent to the email inbox",
        "actors": "['Bot']",
        "steps": "1: Bot identifies the items to be placed into vendor folders 2: Bot automatically places the items into the respective vendor folders"
      },
      {
        "name": "Check Confidence Level of Extracted Data",
        "scenario": "Bot checks for the confidence level of the extracted data and creates actions based on low confidence",
        "precondition": "Invoices and supporting documentation are sent to the email inbox and have been processed for data extraction",
        "actors": "['Bot']",
        "steps": "1: Bot evaluates the confidence level of the extracted data 2: If the confidence level is low, Bot creates actions for further verification or correction"
      },
      {
        "name": "Create Approval Forms for Users",
        "scenario": "Bot creates forms for users on Action Center for supporting approval and confirmation documentation",
        "precondition": "Invoices have been processed and actions have been created based on the extracted data",
        "actors": "['Bot']",
        "steps": "1: Bot generates approval and confirmation forms based on the actions created 2: Bot submits the forms to the Action Center for user review and input"
      },
      {
        "name": "Process Invoices onto Microsoft Dynamics",
        "scenario": "On approval, the invoices are processed onto Microsoft Dynamics",
        "precondition": "Invoices have been approved and confirmed by the users through the Action Center",
        "actors": "['Bot']",
        "steps": "1: Bot initiates the process to transfer the approved invoices onto Microsoft Dynamics 2: Bot confirms the successful processing of the invoices onto Microsoft Dynamics"
      }
    ],
    "user_story_gpt": "As a financial operations manager, I want to use a Bot to automate the manual transfer and processing of invoices to streamline our workflow. The Bot should identify and classify new invoices from our email inbox, accurately placing them into respective vendor folders and ensuring accurate data extraction by evaluating the confidence level. If the confidence level is low, the Bot should initiate actions for verification. Furthermore, the Bot must generate approval forms, sending them to the Action Center for user input. Upon confirmation, the invoices should be seamlessly processed onto Microsoft Dynamics, ensuring efficient and accurate data management across our systems.",
    "user_story_llama": "As a user, I want the Bot to automate the manual transfer of data from invoices and supporting documentation sent to the email inbox, so that it can identify and store new invoices, classify them, and place items into vendor folders. I also want the Bot to check the confidence level of the extracted data and create actions for further verification or correction if the confidence level is low. Additionally, I want the Bot to create approval forms for users on the Action Center for supporting approval and confirmation documentation. Finally, upon approval, I want the Bot to process the invoices onto Microsoft Dynamics, confirming successful processing, thereby reducing the need for manual verification activities and streamlining the invoice processing workflow.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Login to Reporting tool",
        "scenario": "User logs into the reporting tool to access the invoice data.",
        "precondition": "User has valid credentials and access to the reporting tool.",
        "actors": "User",
        "steps": "1: User navigates to the login page of the reporting tool. 2: User enters their login credentials. 3: User logs in to the reporting tool."
      },
      {
        "name": "Apply filter by selecting Vendor Name, Region, & Fin Year to search for invoices to extract for analytics",
        "scenario": "User applies filters to narrow down the data based on vendor name, region, and financial year.",
        "precondition": "User is logged in and has access to the filter functionality.",
        "actors": "User",
        "steps": "1: User navigates to the filter section. 2: User selects Vendor Name, Region, and Financial Year. 3: User applies the selected filters."
      },
      {
        "name": "Download the file as excel",
        "scenario": "User downloads the filtered data as an Excel file for further processing.",
        "precondition": "Filtered data is available and accessible for download.",
        "actors": "User",
        "steps": "1: User locates the download option for the filtered data. 2: User selects the download format as Excel. 3: User confirms the download."
      }
    ],
    "user_story_gpt": "As a user, I want to log into the reporting tool so that I can access invoice data efficiently. Once logged in, I will apply filters by selecting the Vendor Name, Region, and Financial Year to narrow down the data relevant to my analysis. After filtering, I need the ability to download this data as an Excel file, ensuring it is accessible for further processing and analytics.",
    "user_story_llama": "As a user, I want to log in to the reporting tool so that I can access the invoice data, apply filters by selecting vendor name, region, and financial year to narrow down the data, and then download the filtered data as an Excel file for further processing and analytics, thereby enabling me to efficiently manage and analyze the invoice data based on specific criteria.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Login to ERP, loop the excel row one by one and extract invoices",
        "scenario": "User logs into the ERP system and iterates through each row of the downloaded Excel file to extract invoices.",
        "precondition": "User has valid credentials and access to the ERP system.",
        "actors": "User",
        "steps": "1: User navigates to the login page of the ERP system. 2: User enters their login credentials. 3: User logs in to the ERP system. 4: User opens the downloaded Excel file. 5: User iterates through each row to extract invoices."
      },
      {
        "name": "Pass the invoice to DU to extract the data",
        "scenario": "The extracted invoices are passed to the Document Understanding system to extract the relevant data.",
        "precondition": "Invoices from the ERP system are available and accessible for processing.",
        "actors": "System",
        "steps": "1: The system passes each invoice to the Document Understanding (DU) system for data extraction."
      },
      {
        "name": "If the extracted data not met the confidence score then send it to human to validate",
        "scenario": "If the confidence score of the extracted data is below a certain threshold, it is sent to a human for validation.",
        "precondition": "Data extraction from the DU system has taken place.",
        "actors": "System, Human Validator",
        "steps": "1: The system checks the confidence score of the extracted data. 2: If the confidence score is below the threshold, the system sends the data to a human validator for validation."
      },
      {
        "name": "Then apply post processing the convert the data into standard excel format",
        "scenario": "The extracted data is post-processed to convert it into a standard Excel format.",
        "precondition": "Data extraction and validation have been completed.",
        "actors": "System",
        "steps": "1: The system applies post-processing to convert the extracted data into a standard Excel format."
      },
      {
        "name": "Upload it to Azure Blob Storage",
        "scenario": "The post-processed data is uploaded to Azure Blob Storage for storage and further access.",
        "precondition": "Post-processed data is available and accessible for upload.",
        "actors": "System",
        "steps": "1: The system initiates the upload process to Azure Blob Storage for the post-processed data."
      }
    ],
    "user_story_gpt": "As a user, I want to log into the ERP system using my credentials to access and extract invoices from an Excel file. Each invoice will then be processed through the Document Understanding system to extract relevant data. If the confidence score for the extracted data is too low, the system will ensure a human validator reviews and validates the data for accuracy. Once validated, the data will be post-processed and formatted into a standard Excel format. Finally, this processed data will be securely uploaded to Azure Blob Storage for storage and future access, ensuring efficient and reliable data management.",
    "user_story_llama": "As a user, I want to log in to the ERP system and extract invoices from an Excel file, which are then passed to the Document Understanding system for data extraction. If the extracted data does not meet a certain confidence score, I want it to be sent to a human validator for review. After validation, I want the system to apply post-processing to convert the data into a standard Excel format. Finally, I want the post-processed data to be uploaded to Azure Blob Storage for secure storage and easy access, so that I can efficiently manage and utilize the extracted data.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Receive Invoice via Email",
        "scenario": "The system receives an invoice(s) through email",
        "precondition": "Invoices have been sent to the designated email address",
        "actors": "System, Email Server",
        "steps": "1: The system checks the designated email address for incoming invoices 2: The system retrieves the email and its attachments 3: The system processes the attached invoice(s)"
      },
      {
        "name": "Process Invoices in Different Languages",
        "scenario": "Invoices in various languages (English, Dutch, German, and French) are processed",
        "precondition": "Invoices have been received and are in different languages",
        "actors": "OCR, System",
        "steps": "1: The OCR system processes the invoices in different languages 2: The OCR extracts relevant fields from the invoices in each language 3: The system verifies the accuracy of the extracted data"
      },
      {
        "name": "Auto-fill Data Using Lookup Tables",
        "scenario": "The OCR automatically populates values based on lookup tables of invoice payment",
        "precondition": "OCR extraction of relevant fields is completed",
        "actors": "OCR, System",
        "steps": "1: The OCR references lookup tables to auto-fill relevant data fields 2: The system verifies the accuracy of the auto-filled invoice data"
      },
      {
        "name": "Trigger Workflow for Exception Handling",
        "scenario": "In case of exceptions, a workflow is initiated for business user intervention",
        "precondition": "Exception detected in the OCR data extraction",
        "actors": "OCR, Business User",
        "steps": "1: The OCR system flags the exceptions in the data extraction 2: The system triggers a workflow to involve a business user for correction 3: The business user reviews and corrects the exception data"
      },
      {
        "name": "Update Data in Working Excel File",
        "scenario": "The system updates the working excel file with the corrected invoice data",
        "precondition": "Invoice data has been corrected by the business user",
        "actors": "System, Business User",
        "steps": "1: The business user updates the working excel file with the corrected invoice data 2: The system verifies the successful update of the excel file"
      },
      {
        "name": "Create Cover Sheet for Invoice",
        "scenario": "The system generates a cover sheet for each invoice",
        "precondition": "Invoice data is available and verified",
        "actors": "System",
        "steps": "1: The system creates a cover sheet containing essential invoice details 2: The system verifies the accuracy of the cover sheet information"
      },
      {
        "name": "Combine Cover Sheet and Invoice to PDF",
        "scenario": "The system combines the cover sheet and invoice into a single PDF file",
        "precondition": "Cover sheet and invoices are available and accurate",
        "actors": "System",
        "steps": "1: The system merges the cover sheet and invoice into a single PDF file 2: The system ensures the integrity and completeness of the PDF file"
      },
      {
        "name": "Route PDF for Approvals",
        "scenario": "The combined PDF file is routed for approvals",
        "precondition": "Combined PDF file is generated",
        "actors": "System, Approving Authorities",
        "steps": "1: The system initiates the approval workflow for the combined PDF file 2: The approving authorities review and approve the PDF file"
      },
      {
        "name": "Upload Final Sheet in SAP",
        "scenario": "The final PDF file is uploaded in SAP under a specific t-code",
        "precondition": "PDF file has been approved and is ready for SAP upload",
        "actors": "System, SAP User",
        "steps": "1: The system uploads the final PDF file in SAP using the specific t-code 2: The system verifies the successful upload of the PDF file in SAP"
      },
      {
        "name": "Send Final PDF to SAP Team for Payment Processing",
        "scenario": "The final PDF file is sent to the SAP team for payment processing",
        "precondition": "PDF file has been successfully uploaded in SAP",
        "actors": "System, SAP Team",
        "steps": "1: The system notifies the SAP team about the availability of the final PDF file for payment processing 2: The SAP team retrieves and processes the PDF file for payment"
      }
    ],
    "user_story_gpt": "As an accounts manager, I want the system to automate the handling of invoices received via email, so that they can be processed efficiently in different languages. The system should utilize OCR technology to extract and auto-fill data using lookup tables, ensuring accuracy while handling exceptions that require manual intervention by a business user. Corrected invoice data should be updated in an Excel file, and the system should generate a cover sheet to be combined with the invoice into a PDF for approvals. Once approved, the PDF should be uploaded into SAP and then sent to the SAP team for payment processing, ensuring a seamless, end-to-end invoice management workflow.",
    "user_story_llama": "As a system administrator, I want the system to receive invoices via email, process them in different languages using OCR, and auto-fill data using lookup tables, so that invoices can be efficiently processed and verified. In case of exceptions, I want the system to trigger a workflow for business user intervention to ensure accuracy. After correction, I want the system to update the working Excel file with the corrected invoice data and generate a cover sheet for each invoice. The system should then combine the cover sheet and invoice into a single PDF file, route it for approvals, and upload the final PDF file in SAP under a specific t-code. Finally, I want the system to send the final PDF file to the SAP team for payment processing, ensuring a seamless and automated invoice processing workflow.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Monitor Logs from Microsoft SCOM",
        "scenario": "The bot continuously monitors logs from Microsoft SCOM for any triggering events.",
        "precondition": "The bot is set up to monitor logs from Microsoft SCOM.",
        "actors": "['Bot']",
        "steps": "1: Bot establishes a connection with Microsoft SCOM log monitoring system. 2: Bot continuously monitors the logs for triggering events or alerts. 3: If a triggering event is detected, the bot proceeds to the next step."
      },
      {
        "name": "Trigger Bots based on SLA Predefined",
        "scenario": "Upon detecting a triggering event in the logs, the bot triggers specific bots based on predefined SLAs (Service Level Agreements).",
        "precondition": "A triggering event is detected in the logs from Microsoft SCOM.",
        "actors": "['Bot']",
        "steps": "1: Bot identifies the type of triggering event as per predefined SLAs. 2: Bot selects and triggers the appropriate bot or bots based on the type of event and corresponding SLA. 3: The triggered bots then proceed to execute their designated tasks."
      },
      {
        "name": "Create Ticket in ServiceNow Tool",
        "scenario": "After triggering the bots, the system creates a ticket in the ServiceNow tool for further action by support personnel.",
        "precondition": "A triggering event is detected, and specific bots have been triggered based on predefined SLAs.",
        "actors": "['Bot']",
        "steps": "1: Bot logs into the ServiceNow tool. 2: Bot fills in the necessary details from the triggering event to create a new ticket in the ServiceNow tool. 3: The ticket creation includes running prerequisite PUTTY/Support commands to capture information for L1 Support Engineer."
      },
      {
        "name": "L1 Support Engineer Resolution Process",
        "scenario": "L1 Support Engineer utilizes the captured information to troubleshoot the issue and drive towards a solution to reduce downtime.",
        "precondition": "A ticket has been created in the ServiceNow tool containing necessary captured information.",
        "actors": "['L1 Support Engineer']",
        "steps": "1: L1 Support Engineer accesses the ticket in the ServiceNow tool. 2: L1 Support Engineer reviews the captured information and initial analysis from the bot's actions. 3: L1 Support Engineer utilizes the captured information to troubleshoot and resolve the issue based on the outcome from the bot's actions."
      }
    ],
    "user_story_gpt": "As an operations manager, I want a bot to continuously monitor logs from Microsoft SCOM for triggering events, so that upon detection, appropriate bots are triggered based on predefined SLAs. This ensures timely execution of tasks and automated creation of tickets in the ServiceNow tool for further action. This process enables L1 Support Engineers to access comprehensive information and swiftly troubleshoot and resolve issues, thereby reducing system downtime.",
    "user_story_llama": "As a system administrator, I want the bot to continuously monitor logs from Microsoft SCOM, so that when a triggering event is detected, it can trigger specific bots based on predefined SLAs to execute their designated tasks. Additionally, the system should create a ticket in the ServiceNow tool with the necessary details from the triggering event, including captured information from prerequisite PUTTY/Support commands, to facilitate further action by L1 Support Engineers. This will enable L1 Support Engineers to utilize the captured information to troubleshoot the issue and drive towards a solution, reducing downtime and improving overall system efficiency.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Search Jira Issues",
        "scenario": "The automation searches Jira issues based on specific search criteria using JQL (Jira Query Language).",
        "precondition": "The automation system has access to the Jira platform and the necessary permissions to perform the search.",
        "actors": "['Automation System']",
        "steps": "1: The automation system uses JQL to search for Jira issues based on specific criteria. 2: For each ticket found, the automation system downloads the attachments and retrieves all the details from the ticket. 3: The automation system performs micro-level validation in the SQL server database. 4: The system updates some product information based on the ticket details. 5: If there are no validation errors, the system closes the ticket. 6: If there are validation errors, the system sets the status accordingly. 7: The system shares a OneDrive link of the error file using MS Office 365 activities. 8: The system re-processes the ticket after the issues are fixed."
      }
    ],
    "user_story_gpt": "As an automation engineer, I want the automation system to search for Jira issues using specific criteria with Jira Query Language (JQL) so that it can efficiently manage tickets by downloading attachments, retrieving details, and performing validations in the SQL server database. The system should be capable of updating product information based on the ticket details, closing tickets without validation errors, and appropriately setting the status for those with errors. Additionally, I need the system to share error files through a OneDrive link using MS Office 365 and reprocess tickets once issues are resolved.",
    "user_story_llama": "As an automation system, I want to search Jira issues based on specific search criteria using JQL, so that I can automatically download attachments, retrieve ticket details, perform micro-level validation, update product information, and close or update the ticket status accordingly, ultimately streamlining the issue resolution process and improving efficiency by automating the sharing of error files and re-processing of tickets after issues are fixed.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "User Input News Topic",
        "scenario": "User provides input for the news topic he/she is looking for.",
        "precondition": "User is prompted by the news robot to provide the news topic.",
        "actors": "User",
        "steps": "1: User interacts with the news robot to input the specific news topic. 2: User submits the news topic to the news robot."
      },
      {
        "name": "User Input Email ID",
        "scenario": "User provides the email ID to receive the latest news updates.",
        "precondition": "User is prompted to provide the email ID after inputting the news topic.",
        "actors": "User",
        "steps": "1: User provides the email ID to the news robot for receiving the latest news updates. 2: User submits the email ID to the news robot."
      },
      {
        "name": "Bot Search for Latest News",
        "scenario": "The bot looks for the latest news related to the user-provided news topic on Google.com.",
        "precondition": "The news robot has received the user-provided news topic.",
        "actors": "News Robot",
        "steps": "1: The news robot initiates a search for the latest news related to the user-provided news topic on Google.com. 2: The news robot retrieves the latest news articles and their links."
      },
      {
        "name": "Deliver Latest News to User's Mailbox",
        "scenario": "The bot sends an email to the user's mailbox with the latest news and relevant links.",
        "precondition": "The news robot has found the latest news articles related to the user-provided news topic.",
        "actors": "News Robot",
        "steps": "1: The news robot composes an email containing the latest news and their respective links. 2: The news robot sends the email to the user's provided email ID."
      }
    ],
    "user_story_gpt": "As a user, I want to interact with a news robot so that I can input a specific news topic and provide my email address. This allows the news robot to search for the latest articles on my chosen topic using Google.com and deliver these updates directly to my email inbox, ensuring I receive the most current information effortlessly.",
    "user_story_llama": "As a user, I want to interact with the news robot so that I can input a specific news topic and receive the latest news updates related to that topic directly in my email mailbox. The system should allow me to provide my email ID after selecting the news topic, and then the news robot should search for the latest news on Google.com, retrieve relevant news articles and their links, and finally send me an email with the latest news and links, keeping me updated on the topics that interest me.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Define Test Scenarios",
        "scenario": "Identify the various test scenarios for end-to-end testing and integration testing of the merchant payment system.",
        "precondition": "Availability of system requirements and understanding of functionality.",
        "actors": "['Test Analyst', 'Developer']",
        "steps": "1: Test Analyst identifies positive and negative test scenarios covering different functionalities and edge cases. 2: Test Analyst collaborates with the Developer to validate the identified test scenarios."
      },
      {
        "name": "Set Up Test Data",
        "scenario": "Prepare necessary test data for conducting tests.",
        "precondition": "Test data specifications and requirements are available.",
        "actors": "['Test Data Analyst', 'Test Analyst']",
        "steps": "1: Test Data Analyst prepares mock transactions, customer information, payment methods, and other relevant data required for tests. 2: Test Analyst verifies the completeness and accuracy of the prepared test data."
      },
      {
        "name": "Design Test Cases",
        "scenario": "Create detailed test cases for each identified test scenario.",
        "precondition": "Availability of defined test scenarios and understanding of system functionality.",
        "actors": "['Test Analyst']",
        "steps": "1: Test Analyst creates detailed test cases outlining specific steps, expected outcomes, and any preconditions or dependencies required for each test case."
      },
      {
        "name": "Configure UiPath Test Suite",
        "scenario": "Install and set up UiPath Test Suite to provide a comprehensive platform for test automation.",
        "precondition": "Access to UiPath Test Suite and understanding of its components.",
        "actors": "['Test Automation Engineer']",
        "steps": "1: Test Automation Engineer installs UiPath Test Suite components like UiPath Studio, UiPath Orchestrator, and UiPath Test Manager. 2: Test Automation Engineer sets up necessary environments, projects, and configurations within the Test Suite."
      },
      {
        "name": "Implement Test Automation",
        "scenario": "Automate the test cases using UiPath Studio.",
        "precondition": "Defined test cases and access to UiPath Studio.",
        "actors": "['Test Automation Engineer']",
        "steps": "1: Test Automation Engineer uses UiPath Studio to automate the designed test cases by leveraging UiPath activities and features to interact with the merchant payment system’s UI and validate data."
      },
      {
        "name": "Data-Driven Testing",
        "scenario": "Utilize data-driven testing capabilities provided by UiPath Test Suite.",
        "precondition": "Availability of test data variants and access to UiPath Test Suite.",
        "actors": "['Test Automation Engineer']",
        "steps": "1: Test Automation Engineer utilizes data-driven testing capabilities of UiPath Test Suite to execute test cases with different sets of test data."
      },
      {
        "name": "Test Execution and Reporting",
        "scenario": "Execute the automated test cases and generate detailed reports on test results.",
        "precondition": "Availability of automated test cases and access to UiPath Test Suite.",
        "actors": "['Test Automation Engineer']",
        "steps": "1: Test Automation Engineer executes the automated test cases within UiPath Test Suite. 2: Test Automation Engineer monitors the test execution, observes system behavior, and validates expected outcomes. 3: Test Automation Engineer generates detailed reports on test results including success rates, test coverage, and encountered issues or errors."
      },
      {
        "name": "Integration Testing",
        "scenario": "Execute specific test cases to verify interactions with other systems and automate them within UiPath Test Suite.",
        "precondition": "Understanding of system integrations and access to UiPath Test Suite.",
        "actors": "['Test Automation Engineer']",
        "steps": "1: Test Automation Engineer ensures correct interaction of the merchant payment system with other systems or components such as payment gateways, databases, or external APIs. 2: Test Automation Engineer implements specific test cases to verify these integrations and automates them within UiPath Test Suite."
      },
      {
        "name": "Continuous Integration/Continuous Delivery (CI/CD) Integration",
        "scenario": "Integrate UiPath Test Suite with the existing CI/CD pipeline.",
        "precondition": "Existing CI/CD pipeline and access to UiPath Test Suite.",
        "actors": "['DevOps Engineer', 'Test Automation Engineer']",
        "steps": "1: DevOps Engineer collaborates with the Test Automation Engineer to integrate UiPath Test Suite with the existing CI/CD tools and processes. 2: DevOps Engineer ensures that the test automation is triggered as part of the overall deployment process."
      },
      {
        "name": "Maintenance and Iteration",
        "scenario": "Update and maintain the automated test suite to adapt to system evolution and new features.",
        "precondition": "System updates or new feature additions.",
        "actors": "['Test Automation Engineer', 'Test Analyst']",
        "steps": "1: Test Automation Engineer updates and maintains the automated test suite to align with changes in the merchant payment system. 2: Test Analyst performs regular regression testing to ensure system stability and functionality."
      }
    ],
    "user_story_gpt": "As a test analyst or automation engineer working on the merchant payment system, I want a comprehensive testing framework that ensures system reliability and seamless integration with external components. By identifying diverse test scenarios and preparing accurate test data, we will create effective test cases. Using the UiPath Test Suite, we seek to automate these tests for efficient execution and reporting while integrating seamlessly with our CI/CD pipeline. This process will verify the system's interaction with other systems and adapt to ongoing updates or new features to maintain software integrity and performance.",
    "user_story_llama": "As a Test Analyst, I want to utilize the UiPath Test Suite so that I can define and design comprehensive test scenarios and cases for end-to-end testing and integration testing of the merchant payment system, covering various functionalities and edge cases. The system should allow me to set up necessary test data, configure the UiPath Test Suite, and implement test automation using UiPath Studio. Additionally, I want to leverage data-driven testing capabilities, execute automated test cases, and generate detailed reports on test results. The system should also enable integration testing to verify interactions with other systems and automate these tests within the UiPath Test Suite. Furthermore, I want the UiPath Test Suite to be integrated with our existing Continuous Integration/Continuous Delivery (CI/CD) pipeline, ensuring seamless test automation as part of the deployment process. Finally, the system should allow for easy maintenance and iteration of the automated test suite to adapt to system evolution and new features, ensuring the stability and functionality of the merchant payment system over time.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Detect Explicit Content in Uploaded Images",
        "scenario": "The system uses the image recognition cloud service (SafeSearch in the Google Cloud Vision API) to detect explicit content in images uploaded to the social media website.",
        "precondition": "New images have been uploaded to the social media website folder and are waiting for processing.",
        "actors": "['Administrator', 'Bot']",
        "steps": "1: Bot script detects new image uploads and copies them to a designated folder for processing. 2: Bot reads each file and creates an Excel log to pass to the administrator. 3: Bot loops through all image entries in the spreadsheet and invokes SafeSearch in the Google Cloud Vision API to check the images for adult, medical, violent, or racy content. 4: The API returns the detection results and the bot adds this output to Excel. 5: The bot sends the Excel file to the administrator for review and appropriate action."
      },
      {
        "name": "Moderate Posts and Text Content",
        "scenario": "The system uses UiPath’s AI Center to moderate text content of posts and comments.",
        "precondition": "New posts or text content have been uploaded to the social media website.",
        "actors": "['Bot']",
        "steps": "1: Bot detects new textual content and processes it using UiPath’s AI Center to check for inappropriate language or content. 2: The bot sends the results to the administrator for review and action."
      }
    ],
    "user_story_gpt": "As a social media platform administrator, I want an automated system that can efficiently detect explicit content in uploaded images and moderate text content. The system should use a bot to scan new image uploads and employ the Google Cloud Vision API to flag adult, medical, violent, or racy content, making a detailed log available for my review. Additionally, it should process new posts and comments with UiPath's AI Center to identify inappropriate language, ensuring a safe and welcoming environment for users. This functionality will allow me to take prompt and informed actions to maintain community standards.",
    "user_story_llama": "As an administrator, I want the system to automatically detect explicit content in images uploaded to the social media website using the Google Cloud Vision API, and moderate posts and text content using UiPath's AI Center, so that I can review and take appropriate action on any inappropriate content, ensuring a safe and respectful environment for users, by receiving a log of detected explicit images and moderated text content for my review and action.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Raise Motor Policy Cancellation Request",
        "scenario": "Policy holder raises a request for motor policy cancellation due to the sale of the insured vehicle before the end of insurance premium validity",
        "precondition": "Policy holder must have an active motor insurance policy and the insured vehicle must be sold before the end of insurance premium validity",
        "actors": "['Policy Holder']",
        "steps": "1: Policy holder logs into the company website 2: Policy holder navigates to the motor policy cancellation request section 3: Policy holder fills in the required details including policy information and reason for cancellation 4: Policy holder submits the cancellation request"
      },
      {
        "name": "Analysis of Cancellation Request",
        "scenario": "Support Team analyzes the motor policy cancellation request to check eligibility for refund",
        "precondition": "A cancellation request must be submitted by the policy holder",
        "actors": "['Support Team']",
        "steps": "1: Support Team accesses the list of cancellation requests 2: Support Team verifies the details provided in the request 3: Support Team determines if the request is eligible for refund based on the policy terms and conditions"
      },
      {
        "name": "Automated Validation of Cancellation Requests",
        "scenario": "RPA technology used to validate the motor policy cancellation requests in an automated manner",
        "precondition": "Cancellation request must be submitted and available for processing",
        "actors": "['Bot', 'Support Team']",
        "steps": "1: Bot receives the cancellation request through email 2: Bot validates the authenticity of the attachments 3: Bot executes the business logic to check the eligibility for refund 4: If eligible, Bot sends the request to a Human approver with all supporting data"
      },
      {
        "name": "Human Approval of Refund",
        "scenario": "Human approver reviews the motor policy cancellation request and approves the refund if eligible",
        "precondition": "Refund request must be sent by the Bot after automated validation",
        "actors": "['Human Approver']",
        "steps": "1: Human approver accesses the request and supporting data 2: Human approver reviews the details and verifies the eligibility for refund 3: If eligible, Human approver approves the refund 4: Post approval, the refund initiation process is triggered by the system"
      }
    ],
    "user_story_gpt": "As a policy holder, I want to seamlessly request the cancellation of my motor insurance policy through the company's website if I sell my vehicle before the insurance term ends. Once I submit my request, the support team and an automated system together ensure that my request is accurately analyzed and validated against the policy terms. I also expect, if I'm eligible, a human approver will finalize my refund, thus making the cancellation process smooth and efficient.",
    "user_story_llama": "As a policy holder, I want to be able to raise a motor policy cancellation request through the company website, so that I can cancel my policy when I sell my insured vehicle before the end of insurance premium validity. I also want the support team to analyze my cancellation request and determine my eligibility for a refund based on the policy terms and conditions. Furthermore, I want the cancellation request to be validated in an automated manner using RPA technology, and if eligible, sent to a human approver for review and approval. Finally, if approved, I want the refund initiation process to be triggered by the system, ensuring a seamless and efficient cancellation and refund process.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Download Reports from RTA Sites",
        "scenario": "Users download reports for 15 Asset Management Companies from 2 Registrar and Transfer Agents (RTA) sites/mail.",
        "precondition": "User has access to the RTA sites/mail and necessary permissions to download reports.",
        "actors": "['User']",
        "steps": "1: User navigates to the RTA sites/mail. 2: User selects the option to download reports for 15 Asset Management Companies. 3: User confirms the download and waits for the process to complete."
      },
      {
        "name": "Check Status of Existing Order Numbers",
        "scenario": "Users perform sorting to get the latest updates on existing order numbers from downloaded reports.",
        "precondition": "User has downloaded the reports from RTA sites/mail and has access to the necessary tools for sorting data.",
        "actors": "['User']",
        "steps": "1: User opens the downloaded reports for each Asset Management Company. 2: User performs sorting to get the latest updates on existing order numbers."
      },
      {
        "name": "Find Status of New Order Number",
        "scenario": "Users find the status of new order numbers from the downloaded reports.",
        "precondition": "User has downloaded the reports from RTA sites/mail and has access to the necessary tools for finding status of new order numbers.",
        "actors": "['User']",
        "steps": "1: User opens the downloaded reports for each Asset Management Company. 2: User looks for the status of new order numbers based on filtering or search functionality."
      },
      {
        "name": "Automate Report Download and Order Status Maintenance",
        "scenario": "Implement RPA (Robotic Process Automation) to automate the download of reports and maintenance of order status from RTA sites/mail.",
        "precondition": "RPA system is properly configured and integrated with the RTA sites/mail. Users have provided necessary input requirements for automation.",
        "actors": "['RPA System', 'User']",
        "steps": "1: RPA system accesses the RTA sites/mail and initiates the download of reports for 15 Asset Management Companies. 2: RPA system processes the downloaded reports to maintain the order status, ensuring accuracy and efficiency."
      }
    ],
    "user_story_gpt": "As a user, I want to seamlessly download reports for 15 Asset Management Companies from RTA sites or mail, so that I can access and sort the latest updates on existing and new order numbers efficiently. Additionally, by implementing RPA, the process of downloading these reports and maintaining the order status should be automated, enhancing accuracy and saving time.",
    "user_story_llama": "As a user, I want to download reports from Registrar and Transfer Agents (RTA) sites/mail for 15 Asset Management Companies, so that I can check the status of existing order numbers and find the status of new order numbers. I also want to automate this process using Robotic Process Automation (RPA) to maintain the order status, ensuring accuracy and efficiency, by implementing a system that can access the RTA sites/mail, download the reports, and process them to provide the latest updates on order numbers, thereby reducing manual effort and increasing productivity.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Dispatcher BOT Initialization",
        "scenario": "Initialization of the dispatcher BOT to retrieve the list of new hires from the Employee Central database and store specific information in Orchestrator queues.",
        "precondition": "BOT is functional and has access to the Employee Central database and Orchestrator",
        "actors": "['Dispatcher BOT', 'API', 'Employee Central Database', 'Orchestrator']",
        "steps": "1: Dispatcher BOT triggers the API call to fetch the list of new hires from the Employee Central database 2: API retrieves the list of new hires and sends the specific information (e.g., URL, Employee Name) to the Dispatcher BOT 3: Dispatcher BOT stores the received information in Orchestrator queues for further processing"
      },
      {
        "name": "New Hire Activation by Performer BOT",
        "scenario": "Processing of each new hire activation item (queue item) by the Performer BOT using UI interactions and stored credentials/data from the Orchestrator.",
        "precondition": "Performer BOT is functional, Dispatcher BOT has stored the required credentials and data in Orchestrator",
        "actors": "['Performer BOT', 'Dispatcher BOT', 'UI', 'Orchestrator']",
        "steps": "1: Performer BOT fetches a new hire activation item from the Orchestrator queue 2: Performer BOT uses UI interactions to log into the SuccessFactors website and complete the onboarding process for the new hire 3: Required Credentials and data are retrieved from Orchestrator assets and used during the onboarding process 4: Performer BOT marks the activation item as processed upon successful onboarding"
      },
      {
        "name": "Scheduling the Onboarding Process",
        "scenario": "Scheduling the onboarding process as per the HR Team’s requirement, either queue-based or time-based.",
        "precondition": "HR Team's requirement for scheduling the onboarding process is defined in the Orchestrator",
        "actors": "['HR Team', 'Orchestrator']",
        "steps": "1: HR Team defines the scheduling requirements for the onboarding process (queue-based or time-based) 2: Orchestrator sets up the scheduling based on the defined requirements"
      },
      {
        "name": "New Employee ID Generation and Communication",
        "scenario": "Automatic generation of a new employee ID to the Profile by the BOT using API and sending the ID to the respective manager.",
        "precondition": "Performer BOT successfully completes the new hire activation, Manager's contact information is available",
        "actors": "['Performer BOT', 'API', 'Manager', 'Orchestrator']",
        "steps": "1: Performer BOT uses API to generate a new employee ID for the activated profile 2: Performer BOT sends the new employee ID to the respective manager 3: Orchestrator logs the communication for future reference"
      },
      {
        "name": "Handling Business Exceptions",
        "scenario": "Notification of business exceptions to the HR Team via mail alerts for any mandatory information not present in SuccessFactors during onboarding.",
        "precondition": "Performer BOT encounters a business exception during the onboarding process",
        "actors": "['Performer BOT', 'HR Team', 'Mail Service', 'SuccessFactors']",
        "steps": "1: Performer BOT identifies the missing mandatory information in SuccessFactors 2: Performer BOT sends a mail alert to the HR Team notifying them of the business exception 3: HR Team reviews the business exception and takes necessary action"
      },
      {
        "name": "Reporting Successful Activations to HR Team",
        "scenario": "Sending a protected Excel report via mail to the HR Team every EOD containing details of successful onboarding activations.",
        "precondition": "Performer BOT has accumulated the details of successful activations",
        "actors": "['Performer BOT', 'HR Team', 'Mail Service', 'Excel', 'Orchestrator']",
        "steps": "1: Performer BOT compiles the details of successful activations into a protected Excel report 2: Performer BOT sends the Excel report via mail to the HR Team every EOD 3: Orchestrator logs the sent reports for records"
      }
    ],
    "user_story_gpt": "As a member of the HR team, I want a seamless automated process to manage new hire onboarding. This includes utilizing a Dispatcher BOT to gather new hire information from our Employee Central database and store it in Orchestrator queues. A Performer BOT will then process each new hire, completing onboarding through UI interactions and accessing stored credentials. The system should also facilitate scheduling based on our specific HR requirements and handle the automatic generation of employee IDs, communicating them to the respective managers. Additionally, should any mandatory information be absent, the system should alert us to address these exceptions promptly. At the end of each day, I expect a detailed, protected Excel report of all successful activations to be sent via email for record-keeping and review.",
    "user_story_llama": "As an HR Team member, I want to utilize the Dispatcher BOT and Performer BOT so that new hires can be automatically activated and onboarded, with their information retrieved from the Employee Central database and stored in Orchestrator queues. The Performer BOT should then process each new hire activation item using UI interactions and stored credentials/data from the Orchestrator, completing the onboarding process and generating a new employee ID that is communicated to the respective manager. The onboarding process should be schedulable as per our requirements, either queue-based or time-based. In cases where mandatory information is missing during onboarding, the Performer BOT should notify us via mail alerts, and at the end of each day, we should receive a protected Excel report containing details of successful onboarding activations, enabling us to efficiently track and manage the onboarding process for new hires.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Automate Patient Data Process",
        "scenario": "Automate the process of capturing and storing patient data in the database.",
        "precondition": "System and patient must be available and the patient's information must be accurately captured.",
        "actors": "['System', 'Patient']",
        "steps": "1: System captures patient data from various sources (e.g., forms, medical devices). 2: System validates and processes the captured data. 3: System loads the processed patient data into the database."
      },
      {
        "name": "Access Patient Data for Treatment",
        "scenario": "Doctors access patient data to determine the appropriate line of treatment.",
        "precondition": "Doctor must be authenticated and have patient information access rights.",
        "actors": "['Doctor']",
        "steps": "1: Doctor logs into the system. 2: Doctor searches for the desired patient's data. 3: System displays the patient's data for the doctor's review and analysis."
      },
      {
        "name": "Insurance Coverage Decision",
        "scenario": "Insurance companies access patient data to decide on insurance coverage.",
        "precondition": "Insurance company must be authenticated and have patient data access rights.",
        "actors": "['Insurance Company', 'System']",
        "steps": "1: Insurance company representative logs into the system. 2: Insurance company representative searches for the patient's data. 3: System displays the patient's data for the insurance company's review and assessment."
      },
      {
        "name": "Patient Health Information",
        "scenario": "Patients access their health information, illness details, and diagnosis through the system.",
        "precondition": "Patient must be authenticated and have access rights to their own health information.",
        "actors": "['Patient']",
        "steps": "1: Patient logs into the system. 2: Patient navigates to the health information section. 3: System provides access to the patient's health records, illness details, and diagnosis information."
      }
    ],
    "user_story_gpt": "As a healthcare provider, I want an automated system that can efficiently capture and store patient data from various sources in our database, ensuring data accuracy and system reliability. Doctors should be able to securely access this patient data to determine appropriate treatments, while insurance companies need to review data to make informed coverage decisions, both requiring proper authentication and access rights. Additionally, patients should have the ability to log into the system themselves to review their own health information, including illness details and diagnoses, empowering them to stay informed about their health.",
    "user_story_llama": "As a healthcare provider, I want the system to automate the process of capturing and storing patient data in the database, so that doctors can access patient data to determine the appropriate line of treatment, and insurance companies can access patient data to decide on insurance coverage, while also allowing patients to access their own health information, illness details, and diagnosis through the system, thereby streamlining patient care and improving health outcomes.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "ChatGPT Health Insights",
        "scenario": "Process uses ChatGPT to provide health insights and additional information to users.",
        "precondition": "User must be logged into the system and have access to the ChatGPT feature.",
        "actors": "['System', 'User']",
        "steps": "1: User initiates a health-related query or conversation using the ChatGPT feature. 2: System leverages ChatGPT to generate and provide health insights and additional information in response to the user's queries or conversation. 3: User receives and reviews the health insights provided by ChatGPT."
      }
    ],
    "user_story_gpt": "As a user, I want to access health insights and information by interacting with ChatGPT through the system, so that I can obtain relevant and helpful health-related answers and advice during my logged-in session.",
    "user_story_llama": "As a user, I want to use the ChatGPT feature in the system so that I can initiate health-related queries or conversations and receive relevant health insights and additional information, thereby enabling me to make informed decisions about my health.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Automated Zoom Link Download",
        "scenario": "Automated downloading of Zoom links into an Excel file for each shift",
        "precondition": "RPA Bot is properly configured and has access to the Zoom system",
        "actors": "['RPA Bot']",
        "steps": "1: RPA Bot logs into the system at the beginning of each shift 2: RPA Bot downloads all Zoom links for the shift into an Excel file"
      },
      {
        "name": "Automated Zoom Link Checking",
        "scenario": "Automated checking of Zoom links and lecturer presence",
        "precondition": "RPA Bot has the downloaded Excel file with Zoom links",
        "actors": "['RPA Bot']",
        "steps": "1: RPA Bot starts to loop through the Excel file, opening each Zoom link 2: If a Zoom link cannot be opened, RPA Bot updates the presence column in the Excel with the status 'not yet joined' 3: If the lecturer has joined, RPA Bot checks if the name has been renamed to the lecturer's name 4: If not, RPA Bot sends a private chat to the lecturer to immediately rename the name"
      },
      {
        "name": "Review of Lecturers Who Have Not Joined",
        "scenario": "Administrators receive a summary of lecturers who have not joined the class via the provided Zoom links",
        "precondition": "Zoom links have been checked by the RPA Bot",
        "actors": "['Administrator']",
        "steps": "1: Administrators immediately receive a summary of lecturers who have not joined the class along with the respective Zoom links 2: Administrators contact the lecturers who have not joined the Zoom class"
      },
      {
        "name": "Delayed Checking for Lecturers Who Have Not Joined",
        "scenario": "RPA Bot performs a delayed loop for lecturers who still haven’t joined",
        "precondition": "A certain amount of time has passed since the initial checking",
        "actors": "['RPA Bot']",
        "steps": "1: After 20 minutes, RPA Bot performs a loop to re-check for any lecturers who still haven’t joined the Zoom class"
      }
    ],
    "user_story_gpt": "As an administrator, I want the RPA Bot to automate the downloading and checking of Zoom links for each shift so that I can efficiently monitor lecturer presence and take action if they haven't joined. The system should download Zoom links into an Excel file, check if lecturers are present, and report any who have not joined. Additionally, I should receive immediate summaries to contact absent lecturers and utilize delayed checks to ensure everyone is present, thereby maintaining smooth operational flow.",
    "user_story_llama": "As an administrator, I want the RPA Bot to automatically download Zoom links into an Excel file for each shift, and then check these links to ensure lecturers have joined their respective classes, sending reminders to those who haven't. I also want the RPA Bot to update the Excel file with the presence status of each lecturer and send me a summary of lecturers who have not joined, so I can contact them. Furthermore, I want the RPA Bot to perform a delayed check for any lecturers who still haven't joined after a certain amount of time, ensuring that all classes have the necessary lecturer presence, and providing me with the necessary information to follow up with them.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Login to Oracle Support Forum",
        "scenario": "The bot logs in to the Oracle support forum using one of the configured email IDs.",
        "precondition": "The bot has access to the configured email IDs and the Oracle support forum.",
        "actors": "['Bot']",
        "steps": "1: Bot initiates the login process to the Oracle support forum using a configured email ID 2: The system verifies the login credentials 3: Upon successful verification, the bot gains access to the Oracle support forum"
      },
      {
        "name": "Search for Open Tickets based on CSI",
        "scenario": "The bot searches for open tickets in the Oracle support forum based on the Customer Support Identifier (CSI).",
        "precondition": "The bot is logged in to the Oracle support forum and has the necessary permissions to search for tickets.",
        "actors": "['Bot']",
        "steps": "1: Bot navigates to the ticket search section 2: Bot enters the CSI to filter the open tickets 3: The system processes the search query and retrieves the open tickets associated with the provided CSI"
      },
      {
        "name": "Check Ticket Status",
        "scenario": "The bot checks the status of the open tickets retrieved from the search.",
        "precondition": "The bot has retrieved the open tickets from the search results.",
        "actors": "['Bot']",
        "steps": "1: Bot selects each open ticket one by one 2: Bot retrieves the status of each ticket 3: The system provides the status of each ticket to the bot"
      },
      {
        "name": "Send Reminder to Assignee",
        "scenario": "If the status of the ticket indicates that Oracle is awaiting response, the bot sends a reminder to the assignee.",
        "precondition": "The ticket status indicates that Oracle is awaiting response and the assignee information is available.",
        "actors": "['Bot']",
        "steps": "1: Bot identifies the assignee of the ticket 2: Bot composes a reminder message to the assignee regarding the pending response 3: The reminder message is sent to the assignee"
      },
      {
        "name": "Send Reminder to Oracle",
        "scenario": "If Oracle is not awaiting a response, the bot sends a reminder to Oracle to update the ticket.",
        "precondition": "The ticket status indicates that Oracle is not awaiting response.",
        "actors": "['Bot']",
        "steps": "1: Bot identifies the relevant Oracle contact for the ticket 2: Bot composes a reminder message to Oracle requesting an update on the ticket 3: The reminder message is sent to Oracle"
      },
      {
        "name": "Consolidated Report Generation",
        "scenario": "At the end of each run, the bot generates a consolidated report and sends it to the manager.",
        "precondition": "The bot has completed processing tickets during the run.",
        "actors": "['Bot']",
        "steps": "1: Bot compiles the details of all processed tickets and their status 2: Bot generates a consolidated report 3: The report is sent to the manager"
      }
    ],
    "user_story_gpt": "As a system administrator, I want a bot that can streamline interaction with the Oracle support forum by logging in using a configured email ID. The bot should efficiently search for open tickets using the Customer Support Identifier (CSI) and check their status. Depending on the ticket status, the bot must send reminders to either the assignee or Oracle for needed updates. Additionally, at the end of each run, the bot should generate a comprehensive report of all processed tickets and their statuses, sending this report to the manager to keep stakeholders informed.",
    "user_story_llama": "As a manager, I want the bot to log in to the Oracle support forum, search for open tickets based on the Customer Support Identifier (CSI), check the status of these tickets, and send reminders to the assignee or Oracle as necessary, so that I can ensure timely updates and responses on ongoing tickets. Additionally, I want the bot to generate a consolidated report at the end of each run, summarizing the status of all processed tickets, and send it to me, providing a clear overview of the ticket status and enabling me to track progress and make informed decisions.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Login To LOS Website",
        "scenario": "User logs into the LOS website to extract and store the required details.",
        "precondition": "Bot has valid credentials to access the LOS website",
        "actors": "['Bot']",
        "steps": "1: Bot navigates to the login page of the LOS website 2: Bot enters the login credentials 3: Bot submits the login form 4: The system validates the credentials and grants access to the Bot's account"
      },
      {
        "name": "Order Flood Certificate",
        "scenario": "Bot navigates to the Flood Ordering Page and orders a Flood Certificate. Once ordered, a native PDF is generated.",
        "precondition": "Bot is logged into the LOS website",
        "actors": "['Bot']",
        "steps": "1: Bot navigates to the Flood Ordering Page 2: Bot places an order for a Flood Certificate 3: The system generates a native PDF of the ordered Flood Certificate"
      },
      {
        "name": "Extract Details from Flood Certificate",
        "scenario": "Bot extracts loan borrower name, flood zone identity, and property address (City, State) from the generated PDF.",
        "precondition": "A Flood Certificate has been ordered and a PDF is generated",
        "actors": "['Bot']",
        "steps": "1: Bot extracts the required details from the PDF"
      },
      {
        "name": "Validate Borrower Name and Flood Zone",
        "scenario": "Bot validates the borrower name and checks if the property is in a flood zone.",
        "precondition": "Details have been extracted from the Flood Certificate PDF",
        "actors": "['Bot']",
        "steps": "1: Bot compares the borrower name with the stored details in the LOS portal 2: If borrower name matches, Bot validates the flood zone identity and property address 3: If the property is not in a flood zone, Bot navigates to the Fraud Ordering page and orders a Fraud Certificate. Once ordered, a native PDF is generated 4: If the property is in a flood zone, Bot takes action to alert via email, saves, and exits the process"
      },
      {
        "name": "Process Flood Condition Code",
        "scenario": "Bot processes the Flood Condition Code from the PDF and takes necessary actions.",
        "precondition": "Flood Certificate PDF has been generated",
        "actors": "['Bot']",
        "steps": "1: Bot checks for the Condition Code (High, Medium, Low) in the PDF 2: If the PDF contains a Condition Code of High, Medium, or Low priority, Bot extracts the description from the PDF 3: Bot navigates to the Condition pane and inserts the extracted description for Fraudulence activity 4: Bot saves and exits the process"
      }
    ],
    "user_story_gpt": "As a bot operator, I want the Bot to log into the LOS website using valid credentials so that it can efficiently order a Flood Certificate and generate a native PDF. The Bot must then extract essential details such as the loan borrower name, flood zone identity, and property address from this PDF. Furthermore, the Bot should validate the borrower name against stored portal details and determine if the property is in a flood zone. If not, it should order a Fraud Certificate. If it is in a flood zone, the Bot must alert stakeholders via email. Additionally, the Bot must process the Flood Condition Code from the PDF to take appropriate actions based on the severity, inserting any necessary descriptions into the Condition pane before saving and exiting the process.",
    "user_story_llama": "As a bot, I want to log into the LOS website and navigate through the platform to extract and store required details, so that I can order a Flood Certificate, extract loan borrower name, flood zone identity, and property address from the generated PDF, and then validate the borrower name and check if the property is in a flood zone. If the property is not in a flood zone, I should be able to order a Fraud Certificate, and if it is, I should alert via email and save the details. Additionally, I should be able to process the Flood Condition Code from the PDF, extract the description, and insert it into the Condition pane for Fraudulence activity, ultimately saving and exiting the process.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Provide Medication List and Stock",
        "scenario": "Capturing the patient's medication list and current stock",
        "precondition": "Bot is initialized and patient's medication list and stock details are available",
        "actors": "['Patient', 'Bot']",
        "steps": "1: Patient shares medication list and current stock with the bot in the form of an excel sheet 2: Bot receives and validates the medication list and stock details 3: Bot updates the patient's medication list and stock in the system"
      },
      {
        "name": "Fetch Pharmacy Contact and Patient's Kin Details",
        "scenario": "Obtaining the nearest pharmacy contact and patient's kin details",
        "precondition": "Bot is initialized and patient's pharmacy and kin details are available",
        "actors": "['Bot']",
        "steps": "1: Bot retrieves the nearest pharmacy contact number through a predefined process 2: Bot obtains the contact details of the patient's kin for emergency purposes"
      },
      {
        "name": "Update Medication Stock Details",
        "scenario": "Keeping the stocking sheet updated with the patient's medication details",
        "precondition": "Bot has the patient's medication list and stock details, and pharmacy contact and patient's kin details are available",
        "actors": "['Bot']",
        "steps": "1: Bot records the patient's medication details in the stocking sheet 2: Bot updates the stocking sheet with the pharmacy contact and patient's kin details"
      },
      {
        "name": "Schedule Medication Stock Check",
        "scenario": "Scheduling regular checks for the patient's medication stock",
        "precondition": "Bot is initialized and has access to the patient's medication list and stock details",
        "actors": "['Bot']",
        "steps": "1: Bot sets itself to run the stock check process every day 2: Bot verifies if the patient has sufficient medication stock for the next 7 days"
      },
      {
        "name": "Send Medicine Delivery Reminder",
        "scenario": "Sending reminders for medicine delivery when stock is low",
        "precondition": "Bot has identified insufficient medication stock for the patient",
        "actors": "['Bot', 'Nearest Pharmacy', \"Patient's Kin\"]",
        "steps": "1: Bot notifies the nearest pharmacy about the need for medicine delivery or adds the required medication to the online cart for purchase 2: Bot sends a reminder to the patient's kin about the low medication stock"
      },
      {
        "name": "Confirm Medicine Receipt",
        "scenario": "Confirming receipt of delivered medication",
        "precondition": "Patient has received the delivered medication",
        "actors": "['Patient']",
        "steps": "1: Patient responds to the SMS confirming the receipt of the medicine"
      },
      {
        "name": "Notify Workflow on Medicine Receipt",
        "scenario": "Notifying the workflow about the receipt of medication",
        "precondition": "Patient has confirmed the receipt of the delivered medicine",
        "actors": "['Twilio Flow', 'Bot']",
        "steps": "1: Twilio Flow notifies the workflow about the received medicine 2: Bot updates the stocking sheet with the new medication details"
      }
    ],
    "user_story_gpt": "As a patient, I want to share my medication list and current stock with an automated bot so that my medication details can be kept up-to-date in the system. The bot should be able to fetch the contact details of the nearest pharmacy and my kin for emergencies. Regular checks should be scheduled to ensure I have enough medication for the next 7 days. If my stock runs low, the bot should notify the nearest pharmacy for delivery and remind my kin. Once I receive my medication, I should be able to confirm the receipt via SMS, allowing the system to update my stocking sheet with the new details.",
    "user_story_llama": "As a patient, I want to use a bot to manage my medication list and stock, so that I can ensure I have a sufficient supply of medication at all times. The bot should be able to capture my medication list and current stock, and update this information in the system. Additionally, the bot should be able to fetch the contact details of the nearest pharmacy and my kin, and use this information to update my medication stock details. The bot should also schedule regular checks of my medication stock, and send reminders to the nearest pharmacy and my kin when my stock is running low. Once my medication has been delivered, I want to be able to confirm receipt of the medication, which will then trigger the bot to notify the workflow and update my stocking sheet with the new medication details, ensuring that my medication list and stock remain up-to-date and accurate.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Capture Orchestrator Logs",
        "scenario": "The system captures the orchestrator logs to be used as input for predicting the next process failure time.",
        "precondition": "The RPA process must have an orchestrator that logs process activities.",
        "actors": "['RPA Process', 'AI Model']",
        "steps": "1: The orchestrator logs the activities of the RPA process. 2: The logs are collected and prepared to be used as input for the AI model."
      },
      {
        "name": "Train AI Model",
        "scenario": "The AI model is trained using historical orchestrator logs to predict the next process failure time.",
        "precondition": "Sufficient historical orchestrator logs of process activities are available for training.",
        "actors": "['AI Model Trainer']",
        "steps": "1: Historical orchestrator logs are collected and preprocessed for training data. 2: The AI model trainer develops and trains the AI model using the prepared training data."
      },
      {
        "name": "Predict Next Process Failure Time",
        "scenario": "The AI model predicts the next process failure time based on the input from the orchestrator logs.",
        "precondition": "The trained AI model is available and the orchestrator logs are captured.",
        "actors": "['AI Model']",
        "steps": "1: The AI model receives the orchestrator logs as input. 2: The AI model processes the input data to predict the next process failure time. 3: The predicted failure time is output by the AI model."
      }
    ],
    "user_story_gpt": "As a process manager, I want to leverage an RPA system that captures orchestrator logs of ongoing activities. This data will be collected and utilized to train an AI model capable of predicting the next potential process failure. By analyzing these logs through the trained model, I will receive timely predictions regarding failure times, allowing us to proactively address issues and maintain smooth operational workflows.",
    "user_story_llama": "As an RPA process administrator, I want the system to capture orchestrator logs and use them to train an AI model, so that it can predict the next process failure time, allowing me to take proactive measures to prevent failures and ensure continuous process execution, by providing the AI model with sufficient historical logs to develop accurate predictions and receiving timely predictions of potential failures to enable prompt intervention.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Design Customer-Oriented Promotional Graphics",
        "scenario": "BOT designs promotional graphics tailored to customer needs and seeks approval from the SME.",
        "precondition": "BOT has access to customer-oriented promotional details and SME is available for approval.",
        "actors": "['BOT', 'SME']",
        "steps": "1: BOT designs promotional graphics using customer-oriented details. 2: BOT submits the graphics for approval to the SME."
      },
      {
        "name": "Distribute Promotion Artwork on Social Media and Email",
        "scenario": "Distribute approved promotion artwork to various social media platforms and email.",
        "precondition": "Promotion artwork is approved by the SME and the distribution platforms are accessible.",
        "actors": "['BOT', 'FB Graph API', 'Instagram Marketing API', 'Twillio SendGrid API', 'Viber Business Account API', 'SMS API']",
        "steps": "1: BOT initiates distribution of approved promotion artwork through FB Graph API for Facebook, and Instagram Marketing API for Instagram. 2: BOT utilizes Twillio SendGrid API for bulk email distribution. 3: BOT uses Viber Business Account API for Viber promotions. 4: BOT employs SMS API for sending promotional texts."
      },
      {
        "name": "Update Weekly Promotional Graphics into CRM",
        "scenario": "The analytical team updates weekly promotional graphics into the CRM, and the SME uploads the details to the CRM.",
        "precondition": "Weekly promotions are finalized by the analytical team, and SME has access to update the CRM.",
        "actors": "['Analytical Team', 'SME']",
        "steps": "1: Analytical Team finalizes the weekly promotions. 2: SME updates the CRM with the details of weekly promotions."
      },
      {
        "name": "Create Promotion Artwork Using Analytical Details",
        "scenario": "The bot creates the promotion artwork using analytical details from the CRM.",
        "precondition": "All promotion details and customer data are updated in the CRM.",
        "actors": "['BOT']",
        "steps": "1: BOT retrieves the updated promotion details and customer data from the CRM. 2: BOT creates promotion artwork using the analytical details."
      },
      {
        "name": "Retrieve Product Images and Templates from Azure BLOB",
        "scenario": "Retrieve product images and templates from the Azure BLOB storage.",
        "precondition": "BOT has access to the Azure BLOB storage and the required product images and templates are available.",
        "actors": "['BOT']",
        "steps": "1: BOT accesses the Azure BLOB storage. 2: BOT retrieves the product images and templates."
      },
      {
        "name": "Maintain Status Using APIs",
        "scenario": "All status maintenance is performed using APIs with no direct interaction with the CRM database.",
        "precondition": "APIs are available for maintaining status and there is no direct access to the CRM database.",
        "actors": "['BOT']",
        "steps": "1: BOT performs status maintenance using the available APIs."
      },
      {
        "name": "Approve or Reject Promotions on CRM",
        "scenario": "SME approves all promotions on the CRM, while defects lead to rejection and re-initiation of the artwork creation by the bot.",
        "precondition": "Promotions are submitted for approval and the SME has access to the CRM.",
        "actors": "['SME', 'BOT']",
        "steps": "1: SME reviews and approves promotions on the CRM. 2: In case of defects, SME rejects the promotions, triggering a re-initiation of artwork creation by the bot."
      }
    ],
    "user_story_gpt": "As a social media manager, I want to leverage BOT capabilities to design customer-focused promotional graphics, ensuring they align with client needs and are approved by the SME. Once approved, these graphics should be efficiently distributed across platforms like Facebook, Instagram, email, Viber, and SMS. Moreover, weekly promotions should be updated into the CRM by the SME, ensuring that all customer data and analytical details are up-to-date and used for creating promotional artwork. I will rely on the BOT to retrieve product images and templates from Azure BLOB storage and maintain status using APIs, ensuring seamless operations without direct CRM database access. Finally, the SME should be able to approve or reject promotions in the CRM, with any issues triggering the BOT to re-initiate the artwork creation process, ensuring high-quality promotional materials are consistently maintained and distributed.",
    "user_story_llama": "As a Subject Matter Expert (SME), I want to utilize a BOT that can design customer-oriented promotional graphics, distribute approved promotion artwork to various social media platforms and email, and update weekly promotional graphics into the CRM, so that I can efficiently manage and approve promotions. The system should enable the BOT to create promotion artwork using analytical details from the CRM, retrieve product images and templates from Azure BLOB storage, and maintain status using APIs without direct interaction with the CRM database. Additionally, I want to approve or reject promotions on the CRM, with the ability to reject defective promotions and trigger the BOT to re-initiate artwork creation, ensuring that all promotions meet the required standards and are properly distributed to customers.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Search Files Older Than Given Days",
        "scenario": "The automation searches for files existing older than the specified number of days in the source path.",
        "precondition": "The source path must be accessible and the automation system must have the necessary permissions.",
        "actors": "Automation System",
        "steps": "1: The automation system retrieves the configurable parameter for the number of days from the Config file or an Assets. 2: The automation system searches for files older than the specified number of days in the source path. 3: If files older than the specified number of days exist, the automation system proceeds to the next step. 4: If no files older than the specified number of days exist, the process ends with a notification that no action was taken."
      },
      {
        "name": "Delete Files Older Than Given Days",
        "scenario": "The automation deletes all the files older than the specified number of days in the source path.",
        "precondition": "Files older than the specified number of days must exist in the source path.",
        "actors": "Automation System",
        "steps": "1: The automation system initiates the deletion of files older than the specified number of days in the source path. 2: The automation system confirms the deletion of the files. 3: The automation system checks if the files are successfully deleted. 4: If files are successfully deleted, the process continues to the next step. 5: If files are not successfully deleted, the system sends an error notification."
      },
      {
        "name": "Send Result via Email",
        "scenario": "The automation sends the result of the file purge process to the required team via email.",
        "precondition": "The email configuration must be set up and accessible by the automation system.",
        "actors": "Automation System",
        "steps": "1: The automation system prepares the result report of the file purge process. 2: The automation system sends the result report via email to the required team. 3: The automation system confirms the successful delivery of the email."
      }
    ],
    "user_story_gpt": "As a system administrator, I want to automate the process of managing files older than a specified number of days in a source path. The system should automatically search for these files, and if any exist, it should delete them to free up storage space. Following the deletion process, I want the system to email a detailed report of the actions taken, ensuring our team stays informed and can address any errors swiftly if they occur.",
    "user_story_llama": "As an automation system, I want to search for files older than a given number of days in a specified source path, so that I can identify and delete them, thereby maintaining a clean and organized file system. Once the outdated files are identified, I want to delete them, ensuring that the system has the necessary permissions to perform this action. After the file purge process is complete, I want to send the result via email to the required team, providing them with an update on the files that were deleted, and confirming that the process was successfully executed, or notifying them of any errors that occurred during the deletion process.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Build Project in RE Framework",
        "scenario": "The user builds the project using the RE Framework for record creation bot.",
        "precondition": "['UiPath Studio Installed']",
        "actors": "['Developer']",
        "steps": "1: Developer opens UiPath Studio. 2: Developer creates a new project in UiPath Studio. 3: Developer selects the RE Framework template for the project. 4: Developer sets up the project following the RE Framework structure and best practices."
      },
      {
        "name": "Use RE Framework without Queues",
        "scenario": "The user implements the record creation bot using the RE Framework without utilizing queues.",
        "precondition": "['UiPath Studio Installed', 'Project built in RE Framework']",
        "actors": "['Developer']",
        "steps": "1: Developer configures the data sources without utilizing queues for processing. 2: Developer implements error handling and logging within the RE Framework structure. 3: Developer tests the bot to ensure it performs the record creation without queues effectively."
      },
      {
        "name": "Step by Step Demonstration (LIVE Build)",
        "scenario": "The user provides a step-by-step live demonstration of building the record creation bot using RE Framework.",
        "precondition": "['UiPath Studio Installed', 'Project built in RE Framework']",
        "actors": "['Instructor']",
        "steps": "1: Instructor schedules a live session for the demonstration. 2: Instructor starts the live demonstration and provides step-by-step guidance on building the record creation bot using the RE Framework. 3: Instructor addresses questions and clarifies doubts during the live session."
      },
      {
        "name": "Follow Industry Standards and Best Practices",
        "scenario": "The user ensures that the record creation bot project follows industry standards and best practices.",
        "precondition": "['UiPath Studio Installed', 'Project built in RE Framework']",
        "actors": "['Developer']",
        "steps": "1: Developer conducts a review of the project to ensure adherence to industry standards and best practices. 2: Developer incorporates necessary changes to align the project with industry standards and best practices. 3: Developer documents the project's compliance with industry standards and best practices."
      }
    ],
    "user_story_gpt": "As a developer, I want to build and implement a record creation bot using the RE Framework in UiPath Studio, ensuring that the project adheres to industry standards and best practices. Initially, I will create the project by selecting the RE Framework template and setting it up correctly. I will then implement the bot without utilizing queues, focusing on effective data source configuration and robust error handling. To support learning and promote best practices, I will provide a step-by-step live demonstration of the process, addressing any questions and clarifying doubts. Throughout the project, I will conduct reviews to ensure compliance with industry standards and document these for future reference.",
    "user_story_llama": "As a developer, I want to build a project using the RE Framework in UiPath Studio so that I can create a record creation bot that follows industry standards and best practices. The system should allow me to set up the project without utilizing queues for processing, and instead, configure data sources directly for effective record creation. Additionally, I want to be able to provide a step-by-step live demonstration of building the record creation bot using the RE Framework, addressing any questions or doubts that may arise during the demonstration. Furthermore, I want to ensure that the project adheres to industry standards and best practices, and be able to document this compliance, so that the record creation bot is reliable, efficient, and easy to maintain.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Perform Risk Classification of Credit Operations",
        "scenario": "The system calculates the risk classification for all credit operations released.",
        "precondition": "Credit operations data must be available for risk classification.",
        "actors": "['System', 'Employee']",
        "steps": "1: The system gathers the necessary data for each credit operation, including associate risk (RA) and operation risk (RO). 2: The system automatically updates the value for associate risk (RA). 3: Employee manually inputs the operation risk (RO) based on payment capacity/adequacy, term, and guarantee. 4: The employee selects the best guarantee criterion from the four available options (very low risk, medium and low risk, 1st degree, and very high risk). 5: The system calculates the operation provision (PO) using the formula (RA+RO)/2. 6: The system classifies the credit operation based on the calculated operation provision (PO)."
      },
      {
        "name": "Automate Risk Classification Process",
        "scenario": "The system automates the risk classification process to reduce operational load and potential errors.",
        "precondition": "Credit operations data must be available and the risk classification process should be activated.",
        "actors": "['System', 'Employee']",
        "steps": "1: The system automatically gathers and updates associate risk (RA) for each credit operation. 2: Employee inputs the operation risk (RO) based on payment capacity/adequacy, term, and guarantee. 3: The system provides the available guarantee criteria for the employee to select the best option for the operation. 4: The system calculates the operation provision (PO) using the formula (RA+RO)/2. 5: The system classifies the credit operation based on the calculated operation provision (PO). 6: Employee verifies and confirms the automated risk classification results."
      },
      {
        "name": "Select Best Guarantee Criterion",
        "scenario": "Employee selects the best guarantee criterion from the available options for the credit operation.",
        "precondition": "Employee must be evaluating the guarantee criterion for a specific credit operation.",
        "actors": "['Employee']",
        "steps": "1: Employee reviews the four available guarantee criteria: very low risk guarantor, medium and low risk guarantor, 1st degree cedular and mercantile pledge, very high risk guarantor. 2: Employee selects the most suitable guarantee criterion based on the specific credit operation's requirements and associated risks."
      }
    ],
    "user_story_gpt": "As a financial analyst, I want a system that automates the risk classification of credit operations to minimize errors and save time. The system should gather necessary data for each operation, updating associate risk values automatically. Additionally, I want to manually input operation risk measures, selecting the best guarantee criterion from available options. The system will then calculate the operation provision and classify the credit operation accordingly, allowing me to verify and confirm the results. This will streamline the risk assessment process, ensuring accuracy and efficiency in managing credit operations.",
    "user_story_llama": "As an employee, I want the system to automate the risk classification process for credit operations, so that I can reduce the operational load and potential errors. The system should gather the necessary data, update the associate risk, and calculate the operation provision using the formula (RA+RO)/2. I also want to be able to manually input the operation risk based on payment capacity, term, and guarantee, and select the best guarantee criterion from the available options. Additionally, the system should classify the credit operation based on the calculated operation provision and allow me to verify and confirm the automated risk classification results, ensuring that the credit operations are accurately assessed and managed.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Automated Payroll Processing",
        "scenario": "The system automatically processes payroll using the payroll automation module.",
        "precondition": "Payroll data is available for processing and the automation module is correctly configured.",
        "actors": "['HR Manager', 'Payroll System']",
        "steps": "1: HR Manager triggers the payroll processing through the automation module. 2: The automation module retrieves the payroll data from the HR system. 3: The module processes the payroll data, taking into account tax regulations and other relevant factors. 4: The system updates the payroll records and generates the necessary reports. 5: HR Manager reviews the processed payroll data and reports for accuracy."
      },
      {
        "name": "Automated Record Updates",
        "scenario": "The system automatically updates employee records to reflect changes in payroll information.",
        "precondition": "Changes in employee payroll information are available and the automation module is properly configured.",
        "actors": "['HR Manager', 'Payroll System']",
        "steps": "1: HR Manager initiates the record update process through the automation module. 2: The automation module retrieves the updated payroll information for the affected employees. 3: The module applies the changes to the employee records in the HR system. 4: The system verifies the updated records for accuracy and consistency."
      },
      {
        "name": "Automated Tax Compliance",
        "scenario": "The system automatically ensures tax compliance during payroll processing.",
        "precondition": "Tax regulations and updates are integrated into the automation module.",
        "actors": "['HR Manager', 'Payroll System', 'Tax Authority']",
        "steps": "1: HR Manager initiates the payroll processing through the automation module. 2: The automation module checks for the latest tax regulations and updates. 3: The module applies the relevant tax calculations and deductions to the payroll data. 4: The system generates tax reports and submits the necessary information to the tax authority. 5: HR Manager reviews the tax reports for accuracy and compliance."
      }
    ],
    "user_story_gpt": "As an HR Manager, I want a fully automated payroll system to efficiently process employee payroll, ensure accurate record updates, and maintain tax compliance. By using the payroll automation module, I can trigger automated processing that retrieves and calculates payroll data, adheres to current tax regulations, updates employee records with the latest information, and generates comprehensive reports. This allows me to review all data for accuracy and compliance, ensuring seamless payroll operations and adherence to tax obligations.",
    "user_story_llama": "As an HR Manager, I want to utilize the Payroll System with its automation module so that payroll processing can be done automatically, taking into account the latest tax regulations and other relevant factors, and ensuring compliance with tax authorities. Additionally, I want the system to automatically update employee records to reflect changes in payroll information, ensuring data accuracy and consistency. The system should also generate necessary reports and submit required information to the tax authority, allowing me to review the processed payroll data, reports, and tax compliance for accuracy, thereby streamlining the payroll processing and reducing the risk of non-compliance.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Automate Audit Processes",
        "scenario": "An auditor utilizes the RPA robot to automate audit processes.",
        "precondition": "The RPA suite must be accessible and configured for audit automation.",
        "actors": "Auditor",
        "steps": "1: Auditor accesses the RPA suite for audit automation. 2: Auditor selects the specific audit process to be automated. 3: The RPA robot executes the audit process based on the defined parameters and rules. 4: The RPA robot generates audit reports and updates relevant documentation."
      },
      {
        "name": "Automate Accounting Processes",
        "scenario": "An accountant uses the RPA robot to automate accounting processes.",
        "precondition": "The RPA suite must be accessible and configured for accounting automation.",
        "actors": "Accountant",
        "steps": "1: Accountant accesses the RPA suite for accounting automation. 2: Accountant selects the specific accounting process to be automated. 3: The RPA robot executes the accounting process based on the defined parameters and rules. 4: The RPA robot updates ledgers, financial statements, and other accounting documentation based on the automated process."
      },
      {
        "name": "Automate Tax Processes",
        "scenario": "A tax professional leverages the RPA robot to automate tax processes.",
        "precondition": "The RPA suite must be accessible and configured for tax automation.",
        "actors": "Tax Professional",
        "steps": "1: Tax Professional accesses the RPA suite for tax automation. 2: Tax Professional selects the specific tax process to be automated. 3: The RPA robot executes the tax process based on the defined parameters and tax regulations. 4: The RPA robot updates tax filings, calculations, and relevant tax documentation as per the automated process."
      },
      {
        "name": "Automate Corporate Secretarial Processes",
        "scenario": "A corporate secretary utilizes the RPA robot to automate corporate secretarial processes.",
        "precondition": "The RPA suite must be accessible and configured for corporate secretarial automation.",
        "actors": "Corporate Secretary",
        "steps": "1: Corporate Secretary accesses the RPA suite for corporate secretarial automation. 2: Corporate Secretary selects the specific corporate secretarial process to be automated. 3: The RPA robot executes the corporate secretarial process based on the defined parameters and regulatory requirements. 4: The RPA robot updates corporate governance documents, filings, and other secretarial documentation following the automated process."
      }
    ],
    "user_story_gpt": "As a financial and administrative professional, I want to use the RPA robot to automate key processes so that I can efficiently handle auditing, accounting, tax, and corporate secretarial tasks. By accessing the RPA suite, I can select specific processes to automate, allowing the robot to execute tasks according to predefined parameters and rules. This automation ensures that audit reports, financial statements, tax filings, and corporate governance documents are accurately updated and maintained, enabling me to focus on more strategic activities while ensuring compliance and efficiency across all financial and administrative operations.",
    "user_story_llama": "As an auditor, accountant, tax professional, or corporate secretary, I want to utilize the RPA robot to automate various business processes such as audit, accounting, tax, and corporate secretarial tasks, so that I can increase efficiency, reduce manual errors, and ensure compliance with regulatory requirements. The system should allow me to access the RPA suite, select the specific process to be automated, and execute it based on predefined parameters and rules. Additionally, the RPA robot should generate reports, update relevant documentation, and maintain accurate records for audit, accounting, tax, and corporate secretarial processes, enabling me to focus on high-value tasks and make informed decisions.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Send Account Number to Orchestrator Queue",
        "scenario": "Web application sends the account number to the orchestrator queue for processing by the Ui-Robot.",
        "precondition": "Web application must have received a payment disagreement request from the customer.",
        "actors": "['Web Application', 'Orchestrator Queue', 'Ui-Robot']",
        "steps": "1: Web application identifies the payment disagreement and retrieves the account number related to the conflict. 2: Web application sends the account number to the orchestrator queue for further processing."
      },
      {
        "name": "Validate Account in Database",
        "scenario": "Ui-Robot retrieves the account from the orchestrator queue and validates it in the database.",
        "precondition": "Ui-Robot must have received the account number from the orchestrator queue.",
        "actors": "['Ui-Robot', 'Database']",
        "steps": "1: Ui-Robot dequeues the account number from the orchestrator queue. 2: Ui-Robot validates the account in the database. 3: Ui-Robot provides validation result to the orchestrator."
      },
      {
        "name": "Provide Data to Requested Application",
        "scenario": "Ui-Robot provides the requested data to the third-party application based on the validated account number.",
        "precondition": "Ui-Robot must have successfully validated the account in the database.",
        "actors": "['Ui-Robot', 'Third-Party Application']",
        "steps": "1: Ui-Robot retrieves the necessary data based on the validated account number. 2: Ui-Robot sends the data to the third-party application for conflict resolution."
      },
      {
        "name": "Handle Manual Review Request",
        "scenario": "Ui-Robot receives a request for manual review in case of any failure during the process.",
        "precondition": "Ui-Robot encounters a failure while processing the account number or data retrieval.",
        "actors": "['Ui-Robot', 'Manual Review Team']",
        "steps": "1: Ui-Robot acknowledges the failure and receives a manual review request. 2: Ui-Robot forwards the request to the manual review team."
      }
    ],
    "user_story_gpt": "As a customer service representative, I want our web application to automatically send account numbers related to payment disagreements to the orchestrator queue, so that our Ui-Robot can efficiently process them. The system should validate these accounts in our database, ensuring accuracy before providing necessary data to any third-party application for resolving conflicts. In case of any failures during processing, I need the Ui-Robot to promptly initiate a manual review request to guarantee every issue is addressed effectively.",
    "user_story_llama": "As a customer service representative, I want the web application to send the account number to the orchestrator queue for processing by the Ui-Robot, so that when a payment disagreement request is received, the account number can be validated in the database and the necessary data can be provided to the third-party application for conflict resolution. Additionally, in case of any failure during the process, the Ui-Robot should handle the manual review request and forward it to the manual review team, ensuring that the issue is resolved efficiently and effectively, and the customer receives a timely response to their payment disagreement request.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Get Prospective Contacts",
        "scenario": "Sales team retrieves the list of prospective contacts from Sales Navigator or a relevant tool.",
        "precondition": "Access to Sales Navigator or relevant tool, and availability of prospective contacts in the tool.",
        "actors": "['Sales Team']",
        "steps": "1: Sales team navigates to Sales Navigator or relevant tool. 2: Sales team exports the list of prospective contacts in the form of an excel sheet."
      },
      {
        "name": "Add Customized Sales Message",
        "scenario": "Sales team adds a customized sales message to the excel sheet containing the list of prospective contacts.",
        "precondition": "Access to the excel sheet containing the list of prospective contacts.",
        "actors": "['Sales Team']",
        "steps": "1: Sales team opens the excel sheet with the list of prospective contacts. 2: Sales team adds the customized sales message to the appropriate column in the excel sheet."
      },
      {
        "name": "Read Excel Sheet",
        "scenario": "Bot reads the content of the excel sheet containing the list of prospective contacts and customized sales message.",
        "precondition": "Availability of the excel sheet with the list of prospective contacts and customized sales message.",
        "actors": "['Bot']",
        "steps": "1: Bot accesses the designated excel sheet. 2: Bot reads the content of the sheet to prepare for automated email notifications."
      },
      {
        "name": "Send Automated Email and Calendar Invite",
        "scenario": "Bot sends automated email notifications along with calendar invites to the prospective contacts.",
        "precondition": "Availability of the list of prospective contacts and customized sales message in the excel sheet.",
        "actors": "['Bot']",
        "steps": "1: Bot composes personalized email notifications using the information from the excel sheet. 2: Bot sends email notifications to the prospective contacts. 3: Bot sends calendar invites using calendly.com or similar tool to schedule meetings with prospective contacts."
      },
      {
        "name": "Update Sheet Based on Customer Response",
        "scenario": "Bot updates the excel sheet based on customer responses and sets reminders for the next set of customers.",
        "precondition": "Responses from the prospective contacts and the availability of the excel sheet.",
        "actors": "['Bot']",
        "steps": "1: Bot receives and processes customer responses from the sent email notifications. 2: If a response is received, Bot updates the excel sheet with the relevant details. 3: If no response is received, Bot sets reminders for the next set of customers in the next run."
      }
    ],
    "user_story_gpt": "As a member of the sales team, I want to efficiently manage and communicate with prospective contacts. This system will allow us to retrieve prospects from Sales Navigator, customize messages, and compile these into an accessible excel sheet. A bot will then read this sheet, sending personalized emails and calendar invites automatically. Additionally, the bot will update the sheet based on customer responses, ensuring that we have a structured follow-up process and reminders for continuous engagement with potential clients.",
    "user_story_llama": "As a sales team member, I want to use a bot to automate the process of reaching out to prospective contacts, so that I can efficiently manage my sales pipeline. The system should allow me to retrieve a list of prospective contacts from Sales Navigator or a relevant tool and add a customized sales message to the list. The bot should then read the list and send automated email notifications along with calendar invites to the prospective contacts. After sending the notifications, the bot should update the list based on customer responses and set reminders for the next set of customers, enabling me to track interactions and follow up with potential leads in a timely manner.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Process SAP Account Creation Request",
        "scenario": "A new SAP account creation request is processed by the RPA system.",
        "precondition": "There is an approved and not completed SAP account creation request in the SharePoint list and the relevant data is available in the Excel file.",
        "actors": "['RPA Robot']",
        "steps": "1: RPA Robot retrieves the data from the SharePoint list and Excel file. 2: RPA Robot processes the account creation request using SAP Accelerator for Basis without interfacing with the SAP GUI. 3: RPA Robot calls the relevant BAPI for creating a new SAP account in the background. 4: Once the account is successfully created, RPA Robot updates the SharePoint Excel to tag the request as 'completed' and inputs the created username and password. 5: RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account creation."
      },
      {
        "name": "Process SAP Account Blocking Request",
        "scenario": "An SAP account blocking request is processed by the RPA system.",
        "precondition": "There is an approved and not completed SAP account blocking request in the SharePoint list and the relevant data is available in the Excel file.",
        "actors": "['RPA Robot']",
        "steps": "1: RPA Robot retrieves the data from the SharePoint list and Excel file. 2: RPA Robot processes the account blocking request using SAP Accelerator for Basis without interfacing with the SAP GUI. 3: RPA Robot calls the relevant BAPI for blocking the SAP account in the background. 4: Once the account is successfully blocked, RPA Robot updates the SharePoint Excel to tag the request as 'completed'. 5: RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account blocking."
      },
      {
        "name": "Process SAP Account Unlocking Request",
        "scenario": "An SAP account unlocking request is processed by the RPA system.",
        "precondition": "There is an approved and not completed SAP account unlocking request in the SharePoint list and the relevant data is available in the Excel file.",
        "actors": "['RPA Robot']",
        "steps": "1: RPA Robot retrieves the data from the SharePoint list and Excel file. 2: RPA Robot processes the account unlocking request using SAP Accelerator for Basis without interfacing with the SAP GUI. 3: RPA Robot calls the relevant BAPI for unlocking the SAP account in the background. 4: Once the account is successfully unlocked, RPA Robot updates the SharePoint Excel to tag the request as 'completed'. 5: RPA Robot sends an email to the requestor, RPA admin, and process owner notifying them about the account unlocking."
      }
    ],
    "user_story_gpt": "As an RPA system administrator, I want the RPA Robot to automatically process SAP account requests, including creation, blocking, and unlocking, by retrieving data from our SharePoint list and Excel file. This ensures efficiency and accuracy as the robot utilizes the SAP Accelerator for Basis to handle requests in the background without interfacing with the SAP GUI. Once tasks are completed, the system updates the SharePoint Excel file and informs relevant stakeholders through email. This streamlined process not only reduces manual effort but also ensures seamless communication and documentation.",
    "user_story_llama": "As an RPA admin, I want the RPA Robot to process SAP account requests so that new account creation, account blocking, and account unlocking requests can be automatically handled without manual intervention in the SAP GUI. The system should retrieve the relevant data from the SharePoint list and Excel file, process the request using SAP Accelerator for Basis, and update the request status in the SharePoint Excel once the request is completed. Additionally, the system should send notifications to the requestor, RPA admin, and process owner for each request, providing them with the necessary information, such as the created username and password for new account creation requests. This automation will streamline the SAP account management process, reducing the time and effort required to handle these requests.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Candidate Applies for Open Role",
        "scenario": "A candidate applies for an open role on the recruitment portal, submitting their resume.",
        "precondition": "Role must be open for applications on the recruitment portal.",
        "actors": "Candidate",
        "steps": "1: Candidate navigates to the role's application page on the recruitment portal. 2: Candidate uploads their resume along with other required details. 3: The system records the application and the uploaded resume."
      },
      {
        "name": "RPA Bot Downloads and Processes Resumes",
        "scenario": "RPA bot identifies an open role and downloads resumes of candidates that have applied to the role.",
        "precondition": "Resumes must be available for the open role.",
        "actors": "RPA Bot",
        "steps": "1: RPA bot identifies the open role on the recruitment portal. 2: RPA bot downloads the resumes of all candidates who have applied to the role. 3: The downloaded resumes are then fed into the document understanding bot for further processing."
      },
      {
        "name": "Document Understanding Bot Matches Skills and Responsibilities",
        "scenario": "Document understanding bot matches the skills and responsibilities in the downloaded resumes with the master template defined by the Hiring Manager.",
        "precondition": "Resumes must be downloaded and master template defined by Hiring Manager must be available.",
        "actors": "Document Understanding Bot",
        "steps": "1: Document Understanding Bot analyzes each resume loaded from the RPA bot. 2: The bot compares the skills and responsibilities in the resume with the master template defined by the Hiring Manager. 3: If the resume contains the required skills and responsibilities, the candidate's resume is forwarded to the Hiring Manager."
      },
      {
        "name": "Forward Resume to Hiring Manager",
        "scenario": "If the candidate's resume matches the required skills and responsibilities, it is forwarded to the Hiring Manager for further review.",
        "precondition": "Candidate's resume must match the required skills and responsibilities according to the master template.",
        "actors": "Document Understanding Bot",
        "steps": "1: Document Understanding Bot sends the candidate's resume to the Hiring Manager for further review and consideration."
      },
      {
        "name": "Notify Candidate of Application Status",
        "scenario": "If the candidate's resume does not match the required skills and responsibilities, an email is sent to the candidate informing them of their application status.",
        "precondition": "Candidate's resume must not match the required skills and responsibilities according to the master template.",
        "actors": "Document Understanding Bot",
        "steps": "1: Document Understanding Bot sends an email to the candidate, informing them of their application status and the outcome of the resume review process."
      }
    ],
    "user_story_gpt": "As a Hiring Manager, I want candidates to apply for open roles through our recruitment portal by submitting their resumes. An RPA bot should then download these resumes and feed them into a document understanding bot. The bot will match the candidates' skills and responsibilities with our predefined master template. Those candidates whose resumes match are forwarded to me for further review. If the resumes do not match, the system should automatically notify the candidates of their application status via email.",
    "user_story_llama": "As a candidate, I want to apply for an open role on the recruitment portal and have my resume automatically processed and matched with the required skills and responsibilities for the role, so that if my resume is a good fit, it is forwarded to the Hiring Manager for further review, and if not, I receive an email notification of my application status, thereby streamlining the recruitment process and providing timely updates on my application.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Capture Real-Time Video Input",
        "scenario": "The system captures real-time video input from a camera for sign language recognition.",
        "precondition": "The system and camera are operational and connected.",
        "actors": "['System', 'Camera']",
        "steps": "1: The system activates the camera to capture real-time video input. 2: The camera captures the user performing sign language gestures. 3: The system receives the video input for processing."
      },
      {
        "name": "Preprocess Video Input",
        "scenario": "The system preprocesses the captured video input for sign language recognition.",
        "precondition": "The system has received the real-time video input.",
        "actors": "['System']",
        "steps": "1: The system applies preprocessing techniques to enhance the quality of the video input. 2: Preprocessing may include noise reduction, image stabilization, and normalization of lighting conditions."
      },
      {
        "name": "Feed Preprocessed Input to Deep Learning Model",
        "scenario": "The system feeds the preprocessed video input to a trained deep learning model for sign language classification.",
        "precondition": "The video input has been preprocessed successfully.",
        "actors": "['System']",
        "steps": "1: The system passes the preprocessed video frames to the trained deep learning model. 2: The model processes the frames to classify and recognize the sign language gestures."
      },
      {
        "name": "Display Predicted Sign",
        "scenario": "The system displays the predicted sign either as text or as an animated sign on-screen.",
        "precondition": "The deep learning model has classified the sign language gestures.",
        "actors": "['System', 'Display Interface']",
        "steps": "1: The system interprets the model's prediction and converts it into text or an animated sign. 2: The text or animated sign is displayed on the screen for the user or audience to see."
      },
      {
        "name": "Improve Accuracy and Performance",
        "scenario": "The system continuously improves its accuracy and performance for sign language recognition.",
        "precondition": "The system has been operational and has received user feedback.",
        "actors": "['System', 'Users']",
        "steps": "1: The system utilizes data augmentation techniques to enhance the training dataset. 2: Model fine-tuning is performed based on user feedback and additional training data. 3: User feedback on sign interpretations is collected and incorporated into the system's learning process."
      }
    ],
    "user_story_gpt": "As a user, I want a system that can capture real-time video input of my sign language gestures using a camera, so that it can accurately recognize and interpret them into text or animated signs. The system should preprocess this video input to enhance its quality before feeding it into a deep learning model for classification. I also want the system to display the predicted sign on-screen for easy viewing. Additionally, I need the system to continuously improve its accuracy and performance by utilizing user feedback and advanced data techniques, ensuring that the recognition is consistently reliable and precise.",
    "user_story_llama": "As a user, I want the system to capture real-time video input from a camera, preprocess it, and feed it to a deep learning model so that it can recognize and classify sign language gestures, ultimately displaying the predicted sign as text or an animated sign on-screen. Additionally, I want the system to continuously improve its accuracy and performance by utilizing user feedback, data augmentation, and model fine-tuning, ensuring that it provides the most accurate sign language recognition possible, and enhancing the overall user experience through its ability to learn and adapt over time.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Automated Data Entry for Payroll Processing",
        "scenario": "The system automatically processes employee data for payroll, reducing the need for manual data entry.",
        "precondition": "The system has access to updated employee data and the payroll processing module is active.",
        "actors": "['System', 'Payroll Administrator']",
        "steps": "1: The system retrieves updated employee data from the HR database. 2: The system cross-verifies the employee data for accuracy and completeness. 3: The system automatically processes the data for payroll computation and tax deductions. 4: The system notifies the Payroll Administrator about the completed payroll processing."
      },
      {
        "name": "Automated Tax Calculation and Filing",
        "scenario": "The system automatically calculates and files taxes for the payroll, ensuring accuracy and compliance.",
        "precondition": "The payroll data is complete and up-to-date, and the tax filing module is active.",
        "actors": "['System', 'Tax Compliance Officer']",
        "steps": "1: The system retrieves the necessary payroll data for tax computation. 2: The system utilizes tax laws and regulations to calculate accurate tax amounts. 3: The system automatically files tax forms and documents to the IRS or relevant tax authorities. 4: The system notifies the Tax Compliance Officer about the completed tax filing."
      },
      {
        "name": "Automated Payroll Report Generation",
        "scenario": "The system automatically generates detailed payroll reports for analysis and record-keeping.",
        "precondition": "The payroll data is processed, and the report generation module is active.",
        "actors": "['System', 'Business Analyst']",
        "steps": "1: The system compiles payroll data into comprehensive reports based on defined criteria (e.g., pay period, employee categories). 2: The system validates the accuracy of the generated reports. 3: The system saves the reports in specified formats (e.g., PDF, Excel) for access and analysis. 4: The system notifies the Business Analyst about the completed report generation."
      }
    ],
    "user_story_gpt": "As a Payroll Administrator, I want to utilize an automated system that handles the entire payroll processing workflow to reduce manual data entry and ensure accuracy. The system should automatically retrieve and verify employee data, process payroll computations, and accurately handle tax calculations and filings in compliance with regulations. Additionally, it should generate detailed payroll reports for analysis and record-keeping, notifying relevant stakeholders like the Tax Compliance Officer and Business Analyst to streamline the payroll operations.",
    "user_story_llama": "As a Payroll Administrator, I want the system to automatically process employee data for payroll, reducing manual data entry, so that I can ensure accurate and efficient payroll computation. Additionally, I want the system to automatically calculate and file taxes for the payroll, utilizing up-to-date tax laws and regulations, to guarantee compliance and accuracy. Furthermore, I want the system to generate detailed payroll reports automatically, based on defined criteria, so that our Business Analyst can analyze and keep records of payroll data, enabling informed decision-making and audit readiness.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Digitization & Text Extraction of Kitchen Groceries",
        "scenario": "Automate the process of digitizing and extracting information from scanned sticky notes containing the list of kitchen groceries.",
        "precondition": "Scanned sticky notes containing the list of kitchen groceries are available.",
        "actors": "['Home-makers']",
        "steps": "1: Home-makers initiate the scanning process of the sticky notes using the automation system. 2: The system digitizes the content of the sticky notes and extracts the information using Document Understanding (DU) module."
      },
      {
        "name": "Classification of Extracted Information",
        "scenario": "Automatically classify the digitized and extracted kitchen groceries information into categories such as veggies, fruits, diaries, etc.",
        "precondition": "Digitized and extracted information from the sticky notes is available.",
        "actors": "['AI Center']",
        "steps": "1: AI Center processes the extracted information using a text classification algorithm. 2: The system classifies the information into different categories such as veggies, fruits, diaries, etc."
      },
      {
        "name": "Price Comparison and Order Placement",
        "scenario": "Automate the process of comparing prices of kitchen groceries in various e-commerce sites and placing the order in the cart for user confirmation.",
        "precondition": "Classified information of kitchen groceries and access to various e-commerce sites is available.",
        "actors": "['Robot Workflow']",
        "steps": "1: Robot Workflow looks up the products in various e-commerce sites to compare the prices. 2: The system then places the selected items in the respective e-commerce cart for the user to finalize and confirm the order."
      }
    ],
    "user_story_gpt": "As a home-maker, I want an automated system that scans and digitizes my handwritten kitchen grocery lists, accurately extracting the information. This system should categorize the groceries into groups like veggies, fruits, and dairy, and then compare their prices across various e-commerce platforms. Finally, it should place the items in an online shopping cart for my review and confirmation, saving me time and ensuring I get the best prices.",
    "user_story_llama": "As a home-maker, I want to use an automation system so that I can digitize and extract information from scanned sticky notes containing my kitchen groceries list, and then have the system automatically classify the extracted information into categories such as veggies, fruits, and diaries. Furthermore, I want the system to compare prices of these groceries across various e-commerce sites and place the order in the cart for my confirmation, allowing me to easily finalize and confirm my purchases.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Automated Document Digitization",
        "scenario": "Cognize automatically digitizes documents, images, and scanned images into well-structured PDFs.",
        "precondition": "Documents, images, or scanned images are available for digitization.",
        "actors": "['Cognize System']",
        "steps": "1: The user uploads documents or images to the Cognize platform. 2: The Cognize system processes the uploaded content and converts it into well-structured PDFs."
      },
      {
        "name": "Document Classification and Data Extraction",
        "scenario": "Cognize classifies documents and extracts common clauses, provisions, and data points with built-in document intelligence.",
        "precondition": "Documents requiring classification and data extraction are available.",
        "actors": "['Cognize System']",
        "steps": "1: The user submits documents to the Cognize platform for classification and data extraction. 2: The Cognize system analyzes the documents, identifies common clauses, provisions, and data points, and extracts them accurately."
      }
    ],
    "user_story_gpt": "As a user, I want to leverage the Cognize System to automatically digitize my documents, images, and scanned images into well-structured PDFs efficiently. Moreover, I want the system to classify these documents and extract important information such as common clauses and data points using its built-in document intelligence. This will streamline my document management process and ensure I quickly access the key details I need.",
    "user_story_llama": "As a user, I want to utilize the Cognize system so that I can automatically digitize my documents, images, and scanned images into well-structured PDFs, and then have the system classify these documents and extract common clauses, provisions, and data points using its built-in document intelligence, thereby streamlining my document processing and data extraction tasks.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Actionable Item Handling",
        "scenario": "Action Centre provides a user interface for business users to handle actionable items and provide business inputs to Robots.",
        "precondition": "Actionable items are available for handling, and business input is required by Robots.",
        "actors": "['Business User', 'Robots']",
        "steps": "1: The business user accesses the Action Centre interface. 2: The business user provides required business inputs to Robots for handling actionable items."
      }
    ],
    "user_story_gpt": "As a business user, I want to utilize the Action Centre interface to efficiently manage actionable items, ensuring that I can provide the necessary business inputs to Robots, thereby streamlining and enhancing our collaborative efforts in automation tasks.",
    "user_story_llama": "As a business user, I want to use the Action Centre interface so that I can handle actionable items and provide necessary business inputs to Robots, enabling them to effectively process these items, given that actionable items are available for handling and require my input.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Integration with Power Platform for Data Push",
        "scenario": "Cognize integrates with the Power Platform to push data into Salesforce with a certain percentage of confidence for the keys.",
        "precondition": "Data needs to be pushed into Salesforce with a defined degree of confidence for data keys.",
        "actors": "['Cognize System', 'Power Platform', 'Salesforce']",
        "steps": "1: Cognize system integrates with the Power Platform for data push into Salesforce. 2: The system pushes data into Salesforce, ensuring a certain percentage of confidence for the keys."
      },
      {
        "name": "Document Processing Visualization with Power BI",
        "scenario": "Integration with Power BI provides a comprehensive document processing report with drill-down graphical representation for individual documents.",
        "precondition": "Document processing data is available and requires visualization.",
        "actors": "['Cognize System', 'Power BI Users']",
        "steps": "1: The Cognize system integrates with Power BI for document processing visualization. 2: Power BI users can access and view the comprehensive document processing report with drill-down graphical representation for individual documents."
      },
      {
        "name": "Document Field Verification Guidance",
        "scenario": "Users can check which fields they need to verify before processing the documents into BPM.",
        "precondition": "Documents need to be processed into Business Process Management (BPM) system with required field verification.",
        "actors": "['Document Processing User', 'Cognize System']",
        "steps": "1: The document processing user accesses the Cognize platform to identify fields requiring verification before processing into the BPM system. 2: The system provides guidance on the fields that need verification before document processing."
      }
    ],
    "user_story_gpt": "As a business analyst, I want to utilize the Cognize system to seamlessly integrate with Power Platform for confident data transfer into Salesforce, enabling robust data management. Furthermore, the integration with Power BI should allow me to visualize document processing activities through detailed reports with drill-down capabilities, enhancing my understanding of individual document metrics. Additionally, I need guidance from the system on which fields require verification before processing documents into our Business Process Management (BPM) system, ensuring data accuracy and efficiency in our workflows.",
    "user_story_llama": "As a document processing user, I want the Cognize system to integrate with the Power Platform so that data can be pushed into Salesforce with a certain percentage of confidence for the keys, and also integrate with Power BI to provide a comprehensive document processing report with drill-down graphical representation for individual documents. Additionally, I want the system to guide me on which fields need to be verified before processing documents into the Business Process Management (BPM) system, ensuring that all required fields are accurately verified and validated, thereby streamlining the document processing workflow and improving overall efficiency.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Check Folder Structure and Application",
        "scenario": "The bot checks the folder structure and ensures Adobe Reader application is available to grab details from the list of files (PDF or other source data).",
        "precondition": "Bot must have access to the folder structure and the Adobe Reader application.",
        "actors": "['Bot']",
        "steps": "1: Bot navigates to the designated folder location to commence the check. 2: Bot verifies the availability and accessibility of the Adobe Reader application. 3: Bot proceeds with the extraction process if the preconditions are met."
      },
      {
        "name": "Extract Header Information and Create Excel",
        "scenario": "For each PDF file, the bot extracts the header information and creates an Excel file from a template.",
        "precondition": "The PDF files must be available and accessible to the bot.",
        "actors": "['Bot']",
        "steps": "1: Bot selects a PDF file for header information extraction. 2: Bot utilizes data scraping technique to extract header information. 3: Bot uses the extracted information to populate the Excel template. 4: Once done, the bot saves the Excel file in the specified location."
      },
      {
        "name": "Tabular Data Extraction and Storage in Excel",
        "scenario": "The bot employs data scraping technique to extract tabular data from the PDF files and stores it in an Excel file.",
        "precondition": "The PDF files must contain tabular data that is accessible and extractable by the bot.",
        "actors": "['Bot']",
        "steps": "1: Bot identifies and selects the PDF file for tabular data extraction. 2: Bot utilizes data scraping technique to extract the tabular data from the PDF. 3: Bot populates the Excel template with the extracted tabular data. 4: Bot saves the Excel file with the tabular data in the specified location."
      },
      {
        "name": "Multiple PDF Processing and Moving",
        "scenario": "The bot iterates through multiple PDF files, creates Excel files, and then moves the processed PDFs to a designated processed folder.",
        "precondition": "Multiple PDF files must be available in the designated folder.",
        "actors": "['Bot']",
        "steps": "1: Bot iterates through each PDF file in the designated folder. 2: For each PDF, the bot extracts header information and tabular data to create an Excel file. 3: Once the Excel file is created, the bot moves the processed PDF to the designated processed folder."
      },
      {
        "name": "Utilize Excel Template for Reporting and Sending via Email",
        "scenario": "The bot utilizes the Excel template for reporting purposes and sends the reports to groups via email.",
        "precondition": "The Excel template must be populated with the required data and the email groups must be set up and accessible.",
        "actors": "['Bot']",
        "steps": "1: Bot accesses the populated Excel template for reporting purposes. 2: Bot generates reports based on the data in the Excel template. 3: Bot drafts and sends the reports to the designated email groups."
      }
    ],
    "user_story_gpt": "As a user, I want the bot to efficiently manage and process a collection of PDF files to automate my document handling tasks. The bot should check the folder structure and verify the availability of the Adobe Reader application, ensuring it can extract information from each PDF. It must extract header information and tabular data, creating Excel files for each and saving them in a specified location. Additionally, the bot should iterate through multiple PDFs, process them, and then relocate the processed files to a designated folder. Finally, the bot must use the populated Excel template to generate reports and send them to predefined email groups, streamlining the reporting process.",
    "user_story_llama": "As a bot, I want to automate the process of extracting data from PDF files and storing it in Excel files, so that I can efficiently process multiple PDF files, extract header and tabular data, and create reports to be sent via email. The system should first check the folder structure and ensure the Adobe Reader application is available, then extract header information and create an Excel file from a template for each PDF file, and extract tabular data from the PDF files and store it in the corresponding Excel files. After processing each PDF file, the system should move the file to a designated processed folder. Finally, the system should utilize the populated Excel template to generate reports and send them to designated email groups, thereby streamlining the data extraction, reporting, and email sending process.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Authenticate Gmail Account",
        "scenario": "User authenticates their Gmail account to enable access for data scrapping.",
        "precondition": "User must have valid Gmail credentials and internet connectivity.",
        "actors": "User",
        "steps": "1: User launches the email scrapping application. 2: User navigates to the settings or authentication section. 3: User enters their Gmail username and password. 4: The system validates the credentials and grants access to the user's mailbox."
      },
      {
        "name": "Select Mail for Scrapping",
        "scenario": "User selects the specific email(s) from which they want to scrape the subject and information.",
        "precondition": "User must be logged in and have access to the mailbox with relevant emails.",
        "actors": "User",
        "steps": "1: User navigates to the mailbox or folder containing the emails to be scrapped. 2: User selects the specific email(s) based on the sender, subject, or other criteria. 3: The system identifies the selected email(s) for data extraction."
      },
      {
        "name": "Scrape Mail Subject and Information",
        "scenario": "The system extracts the subject and information from the selected email(s) for further processing.",
        "precondition": "Selected email(s) must contain relevant subject and information for scraping.",
        "actors": "System",
        "steps": "1: The system accesses the content of the selected email(s). 2: The system identifies the subject line and key information within the email body. 3: The system extracts the subject and information, organizing them for future use or export."
      },
      {
        "name": "Export Scraped Data to Excel",
        "scenario": "The system exports the scraped mail subjects and information to an Excel file for storage or analysis.",
        "precondition": "Scraped data must be available and ready for export.",
        "actors": "System",
        "steps": "1: The system prepares or creates an Excel file for data storage. 2: The system formats the data into rows and columns within the Excel file. 3: The system populates the Excel file with the scraped mail subjects and corresponding information."
      }
    ],
    "user_story_gpt": "As a user of the email scraping application, I want to authenticate my Gmail account to safely access my emails for data extraction. Once authenticated, I will be able to select specific emails from my mailbox that contain the information I need. The system will then scrape the selected emails to capture the subject and essential details, ensuring the extracted data is well-organized. Finally, I want the system to export this data into an Excel file, making it easy to store and analyze the information as needed.",
    "user_story_llama": "As a user, I want to authenticate my Gmail account so that I can select specific emails and scrape their subjects and information, which the system can then export to an Excel file for easy storage and analysis, thereby streamlining my email data extraction process and enabling me to efficiently organize and utilize the scraped data.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Receive Input Data in Chinese Language",
        "scenario": "The system receives input data in the Chinese language through email.",
        "precondition": "The system is set up to receive and process emails containing input data in Chinese.",
        "actors": "['System']",
        "steps": "1: The system accesses the email containing the input data in the Chinese language. 2: The system extracts the data from the email body."
      },
      {
        "name": "Validate Input Data",
        "scenario": "The system validates the input data from the email to check if the same data already exists in the business application.",
        "precondition": "The system has access to the business application and the input data from the email.",
        "actors": "['System']",
        "steps": "1: The system compares the extracted data from the email with the existing data in the business application. 2: The system performs validation to determine if the data already exists or not."
      },
      {
        "name": "Update Business Application with Translated Data",
        "scenario": "The system translates the input data from Chinese to English and updates the business application with the translated data.",
        "precondition": "The system has the capability to translate data from Chinese to English and has the necessary permissions to update the business application.",
        "actors": "['System']",
        "steps": "1: The system translates the input data from Chinese to English. 2: The system updates the business application with the translated data. 3: The system ensures that the updated data is accurately reflected in the business application."
      },
      {
        "name": "Validate Business Application Data in Chinese and English",
        "scenario": "The system performs validation on the data within the business application, considering both Chinese and English versions of the data.",
        "precondition": "The system has access to the business application data in both Chinese and English versions.",
        "actors": "['System']",
        "steps": "1: The system compares and validates the data in the business application considering both Chinese and English versions. 2: The system ensures that the data integrity is maintained for both Chinese and English representations within the business application."
      }
    ],
    "user_story_gpt": "As a system administrator, I want the system to automatically receive and process input data in Chinese from emails, ensuring that it is accurately extracted and checked against existing data in our business application. The system should translate this data from Chinese to English and update the application accordingly, maintaining data integrity. Furthermore, it should validate the data in both Chinese and English to ensure consistency across both versions within the business application.",
    "user_story_llama": "As a system administrator, I want the system to receive input data in the Chinese language through email, validate the data to check for duplicates, translate the data from Chinese to English, and update the business application with the translated data, so that the system can ensure data integrity and maintain accurate representations of the data in both Chinese and English, allowing for seamless validation and comparison of the data within the business application.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "User Input",
        "scenario": "User provides input including departing place, destination, travel date, and email ID for the travel buddy robot to search for flights.",
        "precondition": "Travel Buddy Robot system is operational and ready to receive input.",
        "actors": "User, Travel Buddy Robot",
        "steps": "1: User interacts with the Travel Buddy Robot to provide the source, destination, travel date, and email ID. 2: Travel Buddy Robot receives and validates the input. 3: Travel Buddy Robot acknowledges successful input validation."
      },
      {
        "name": "Search for Flights",
        "scenario": "The Travel Buddy Robot looks for available flights based on the user-provided input.",
        "precondition": "Valid user input has been received and acknowledged.",
        "actors": "Travel Buddy Robot",
        "steps": "1: Travel Buddy Robot processes the input to search for suitable flights. 2: Travel Buddy Robot retrieves flight data based on the provided input."
      },
      {
        "name": "Data Extraction",
        "scenario": "The Travel Buddy Robot extracts the flight data and stores it in an Excel file for further processing.",
        "precondition": "Relevant flight data has been successfully retrieved.",
        "actors": "Travel Buddy Robot",
        "steps": "1: Travel Buddy Robot organizes the flight data and exports it to an Excel file. 2: Travel Buddy Robot confirms the successful extraction and storage of flight data."
      },
      {
        "name": "Email Data",
        "scenario": "The Travel Buddy Robot sends the extracted flight data as an email attachment to the user's provided email ID.",
        "precondition": "Flight data has been successfully extracted and stored in an Excel file.",
        "actors": "Travel Buddy Robot",
        "steps": "1: Travel Buddy Robot composes an email with the extracted flight data as an attachment. 2: Travel Buddy Robot sends the email to the user's provided email ID. 3: Travel Buddy Robot confirms the successful email delivery."
      },
      {
        "name": "Logging and Exception Handling",
        "scenario": "The Travel Buddy Robot creates logs and handles exceptions during the entire process.",
        "precondition": "The Travel Buddy Robot is operational and engaged in the flight search and data processing.",
        "actors": "Travel Buddy Robot",
        "steps": "1: Travel Buddy Robot sets up logging mechanisms to record the steps and events during the flight search and data processing. 2: Travel Buddy Robot implements exception handling to address errors or issues that may occur during the process."
      }
    ],
    "user_story_gpt": "As a traveler, I want to interact with the Travel Buddy Robot to input my trip details, such as departure location, destination, travel date, and my email, so that the robot can search for suitable flights. The Travel Buddy Robot should efficiently process and validate my input, retrieve and extract relevant flight options, and store this information in an organized manner within an Excel file. I want the robot to send me the flight data as an email attachment to help facilitate my travel planning. Additionally, it should maintain good logging practices and handle any errors smoothly throughout the process.",
    "user_story_llama": "As a user, I want to interact with the Travel Buddy Robot so that I can provide my travel details including departing place, destination, travel date, and email ID, and receive a list of available flights. The system should then search for flights based on my input, extract the relevant flight data, and store it in an Excel file. After that, the Travel Buddy Robot should send me the extracted flight data as an email attachment to my provided email ID. Additionally, the system should create logs and handle exceptions during the entire process to ensure smooth operation and notify me of any issues that may arise, thereby providing me with a seamless and reliable travel planning experience.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Extract Invoices from Incoming Emails",
        "scenario": "Robots extract invoices from incoming emails sent to the Accounts Payable inbox.",
        "precondition": "Invoices are available in the Accounts Payable inbox, Abbyy OCR server is operational and configured with invoice templates.",
        "actors": "Robots",
        "steps": "1: Robots access the incoming emails in the Accounts Payable inbox. 2: Robots extract the invoices from the emails. 3: Invoices are fed to the standalone Abbyy OCR server for data extraction using predefined templates. 4: Abbyy OCR server processes the invoices and outputs them into consumable files. 5: Processed invoices are encased into UiPath transaction records and placed on a work queue."
      },
      {
        "name": "Handle Parsing and Business Logic",
        "scenario": "UiPath ReFramework state-machine handles the parsing of transaction records and executes custom business logic specific to the customer.",
        "precondition": "Transaction records with extracted invoice data are available on the work queue.",
        "actors": "UiPath ReFramework",
        "steps": "1: UiPath ReFramework processes the transaction records from the work queue. 2: Custom business logic specific to the customer is executed by the state-machine. 3: The system checks the transaction data against dozens of business rules. 4: Transaction data that passes the business criteria continues to the next stage of processing."
      },
      {
        "name": "Launch SAP and Perform Data Entry",
        "scenario": "UiPath robot launches SAP and performs data entry based on the processed transaction data.",
        "precondition": "Transaction data has passed the business criteria and is ready for SAP data entry.",
        "actors": "UiPath robot",
        "steps": "1: UiPath robot launches SAP system. 2: The robot enters the required data into SAP based on the processed transaction data. 3: The system handles and recovers from multiple SAP error messages that may be emitted during data entry. 4: SAP error messages are managed by the robot to ensure smooth data entry without manual intervention."
      },
      {
        "name": "Reduce Manual Labor in SAP Error Handling",
        "scenario": "UiPath robots reduce manual effort and time spent in error handling and analysis within the SAP system.",
        "precondition": "SAP error messages related to invoice data entry can occur.",
        "actors": "UiPath robots, SAP system users",
        "steps": "1: UiPath robots automatically handle and recover from SAP error messages during data entry. 2: The robots reduce days of manual labor spent by SAP system users in responding to error conditions and performing analysis. 3: Efficiency in error handling reduces the labor from days to minutes, improving overall process efficiency."
      }
    ],
    "user_story_gpt": "As an accounts payable specialist, I want to automate the extraction and processing of invoices from incoming emails using robots, so that the invoices are quickly fed to Abbyy OCR for data extraction and entered into UiPath transaction records. The system should use UiPath ReFramework to parse these records, execute custom business logic, and verify them against business rules. Once verified, a robot should launch SAP to perform data entry efficiently, handling and recovering from errors automatically. This automation aims to significantly reduce manual intervention and enhance the efficiency of error handling within the SAP system, transforming days of labor into minutes.",
    "user_story_llama": "As an Accounts Payable team member, I want the robots to extract invoices from incoming emails and use Abbyy OCR server to process them, so that the invoices can be automatically parsed and business logic applied through the UiPath ReFramework. I also want the UiPath robot to launch SAP and perform data entry based on the processed transaction data, handling any SAP error messages that may occur, thereby reducing manual labor in error handling and analysis within the SAP system. This automation will enable the team to efficiently process invoices, reduce manual effort, and improve overall process efficiency, allowing us to focus on higher-value tasks.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Validate Value of UiPath Certification",
        "scenario": "The value of UiPath certification is validated based on the use-cases tackled and the expertise level of the developers.",
        "precondition": "Developers are certified at various expertise levels in UiPath.",
        "actors": "Company management, developers",
        "steps": "1: Company assesses the use-cases tackled by developers using UiPath automation. 2: Company evaluates the impact and efficiency of the automation based on the developers' expertise and certification level. 3: Evaluation validates the correlation between developers' expertise level and the successful execution of use-cases."
      }
    ],
    "user_story_gpt": "As a company manager, I want to validate the value of UiPath certification to assess how effectively our certified developers tackle use-cases. This will help me understand the correlation between a developer's expertise level and the impact and efficiency of the automation implemented. By doing so, I can make informed decisions on future training and project assignments.",
    "user_story_llama": "As company management, I want to validate the value of UiPath certification so that I can assess the correlation between developers' expertise levels and the successful execution of use-cases, thereby evaluating the impact and efficiency of automation based on their certification level, and ultimately determine the effectiveness of UiPath certification in tackling various use-cases and driving business efficiency.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Employee Vaccine Registration",
        "scenario": "An employee registers their vaccination status or COVID testing history.",
        "precondition": "Employee has access to the Vaccine Registration Status application.",
        "actors": "['Employee']",
        "steps": "1: Employee logs into the Vaccine Registration Status application. 2: Employee selects the option to enter their vaccination status or COVID testing history. 3: Employee fills in the required details such as vaccination date, type of vaccine, or testing history. 4: The system validates the entered information and stores it in the database. 5: The system confirms the successful registration of the vaccine status to the employee."
      },
      {
        "name": "Manager Bulk Vaccine Status Insert",
        "scenario": "Managers can enter the vaccination status of employees using bulk insert.",
        "precondition": "Manager has access to the Vaccine Registration Status application and authorization to update employee vaccine status.",
        "actors": "['Manager']",
        "steps": "1: Manager logs into the Vaccine Registration Status application. 2: Manager selects the bulk insert option for entering vaccination status of employees. 3: Manager uploads a file containing vaccination status data for multiple employees. 4: The system processes the uploaded file, validates the data, and updates the vaccine status for the respective employees. 5: The system provides a summary report of the successful and failed updates to the manager."
      },
      {
        "name": "Document Understanding for Vaccination Cards",
        "scenario": "Applying Document Understanding to extract data from vaccination cards and validate it with user-entered information.",
        "precondition": "System is integrated with Document Understanding capabilities and vaccination card upload feature is available.",
        "actors": "['System', 'Human in the Loop']",
        "steps": "1: User uploads a scanned copy of their vaccination card through the application. 2: The system applies Document Understanding to extract the data from the vaccination card. 3: The extracted data is compared with the user-entered information for validation. 4: In case of discrepancies, the system triggers human in the loop verification for cross verification. 5: The system updates the vaccination status based on the validated information."
      },
      {
        "name": "Integration with ServiceNow for Ticket Management",
        "scenario": "Integrating with ServiceNow to create and update service tickets related to user validation and vaccination status.",
        "precondition": "Integration with ServiceNow is configured and available for use.",
        "actors": "['System', 'Integration Service']",
        "steps": "1: Upon user validation failure, the system triggers the integration with ServiceNow for creating a service ticket. 2: The Integration Service creates a new ticket in ServiceNow for further validation action. 3: Once the user validation is completed, the system updates the status of the ticket in ServiceNow accordingly."
      },
      {
        "name": "Integration with Power BI for Reporting",
        "scenario": "Integrating with Power BI for HR and executive reporting of vaccination status.",
        "precondition": "Integration with Power BI is configured and accessible for generating reports.",
        "actors": "['HR', 'Executive']",
        "steps": "1: HR or Executive accesses the reporting feature integrated with Power BI. 2: HR or Executive selects the parameters for the vaccination status report. 3: The system generates the report using Power BI and presents it to the HR or Executive for review and sharing."
      }
    ],
    "user_story_gpt": "As an HR manager, I want to utilize a comprehensive Vaccine Registration Status system to efficiently manage employee vaccination and COVID testing information. Employees should be able to register their own vaccination status or testing history, ensuring the system validates and securely stores this data. Managers have the capability to update multiple employees’ statuses via bulk uploads. Additionally, the system must use Document Understanding to process vaccination cards, verifying with human oversight when discrepancies arise. Integration with ServiceNow will streamline ticket management for user validations, while Power BI reporting enables dynamic insights for HR and executives, facilitating data-driven decisions and compliance monitoring.",
    "user_story_llama": "As an employee, I want to register my vaccination status or COVID testing history through the Vaccine Registration Status application, so that I can easily enter and validate my information, with the option to upload my vaccination card for automated data extraction and validation. Additionally, I want managers to be able to bulk insert vaccination status for employees, ensuring efficient data management. The system should also integrate with Document Understanding to extract data from vaccination cards, validate it with user-entered information, and trigger human verification in case of discrepancies. Furthermore, the system should integrate with ServiceNow to create and update service tickets related to user validation and vaccination status, and with Power BI to provide HR and executive reporting of vaccination status, enabling informed decision-making and compliance tracking. This will provide a seamless, efficient, and accurate experience for employees, managers, and executives to manage and report on vaccination status.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Receive Vendor Creation/Modification Request",
        "scenario": "The application support team receives a request for vendor creation/modification via email with attachment.",
        "precondition": "The support team must have access to the email account where requests are received.",
        "actors": "['Support Team', 'Robot']",
        "steps": "1: Support team receives an email request with the subject indicating vendor creation/modification. 2: Robot checks all emails and filters them based on the specified subject. 3: For each matched email, robot downloads and reads the attachment to extract the vendor data."
      },
      {
        "name": "Process Vendor Data",
        "scenario": "Robot iterates through the filtered emails, processes the vendor data, and updates the database.",
        "precondition": "Robot has access to the vendor data and the webpage for updating the database.",
        "actors": "['Robot']",
        "steps": "1: Robot iterates through each filtered email containing vendor data. 2: Robot performs business validation on the data extracted from the attachment. 3: Based on key column values (New, Add, Replace, Delete), robot performs the necessary operations on the database through the webpage."
      },
      {
        "name": "Validate New Vendor Records in SAP System",
        "scenario": "Robot validates new vendor records in the SAP system to check for the existence of the customer.",
        "precondition": "Robot has access to the SAP system for validation.",
        "actors": "['Robot']",
        "steps": "1: Robot checks for NEW records in the vendor data extracted from the email attachment. 2: Robot validates each new record in the SAP system to confirm the existence of the customer."
      },
      {
        "name": "Upload Database File to SharePoint",
        "scenario": "Once all request emails are processed, the robot downloads the latest database file and uploads it to the SharePoint site for backup.",
        "precondition": "Robot has access to the database and the SharePoint site.",
        "actors": "['Robot']",
        "steps": "1: After successfully processing all the request emails, robot downloads the latest database file. 2: Robot uploads the downloaded database file to the specified location in the SharePoint site for backup."
      },
      {
        "name": "Notify Completion of Vendor Management in the mail and Report Results",
        "scenario": "Robot replies to the email, updating the user about the completion of the process and providing a list of all processed/failed customer details in tabular format.",
        "precondition": "Robot has access to the email system for sending notifications.",
        "actors": "['Robot']",
        "steps": "1: Robot compiles a tabular list of all processed and failed customer details. 2: Robot sends a reply email to the user, providing the list of processed/failed customer details and indicating the completion of the process."
      }
    ],
    "user_story_gpt": "As a member of the application support team, I want an automated system driven by a robot that efficiently manages vendor creation and modification requests. This system should filter through incoming emails, extract relevant vendor data, and perform business validations. The robot should update the vendor database via a web interface based on specified actions like New, Add, Replace, or Delete. Additionally, it will validate new vendor records against the SAP system to ensure customer existence. Once the request processing is complete, the system should back up the latest database file to a SharePoint site and inform users of the process completion by sending a detailed report of all processed and failed requests in a tabular email notification.",
    "user_story_llama": "As a support team member, I want the robot to automatically process vendor creation/modification requests received via email, so that the vendor data can be extracted, validated, and updated in the database without manual intervention. The robot should filter emails based on specific subjects, download and read attachments, and perform business validation on the extracted data. Additionally, the robot should validate new vendor records in the SAP system, upload the updated database file to SharePoint for backup, and notify the user about the completion of the process via email, providing a list of processed and failed customer details in a tabular format. This automation will enable the support team to efficiently manage vendor data, reduce manual errors, and improve overall productivity.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A new user registers for the Visual Language Translator application.",
        "precondition": "User has not registered an account in the application.",
        "actors": "New User",
        "steps": "1: New User navigates to the registration page of the application. 2: New User fills in the required registration details. 3: New User submits the registration form. 4: The system validates the provided details. 5: The system creates a new user account."
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account in the Visual Language Translator application.",
        "precondition": "User must have a registered account and know their login credentials.",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the login page of the application. 2: Registered User enters their login credentials. 3: Registered User submits the login form. 4: The system validates the login credentials. 5: The system grants access to the user account."
      },
      {
        "name": "Translate Hand Gestures to Text",
        "scenario": "A user uses the application to translate hand gestures to text.",
        "precondition": "User has access to a device with a camera and the Visual Language Translator application installed.",
        "actors": "User",
        "steps": "1: User opens the Visual Language Translator application. 2: User selects the 'Translate Hand Gestures to Text' feature. 3: User positions their hands in front of the camera. 4: The system captures and processes the hand gestures. 5: The system translates the hand gestures to text and displays the result to the user."
      },
      {
        "name": "Translate Spoken Words to Text",
        "scenario": "A user uses the application to translate spoken words to text.",
        "precondition": "User has access to a device with a microphone and the Visual Language Translator application installed.",
        "actors": "User",
        "steps": "1: User opens the Visual Language Translator application. 2: User selects the 'Translate Spoken Words to Text' feature. 3: User speaks into the microphone. 4: The system captures and processes the spoken words. 5: The system translates the spoken words to text and displays the result to the user."
      },
      {
        "name": "Facilitate Communication in Educational Settings",
        "scenario": "A teacher and a student use the application to facilitate communication in an educational setting.",
        "precondition": "Both the teacher and the student have access to the Visual Language Translator application on their devices.",
        "actors": "['Teacher', 'Student']",
        "steps": "1: Teacher and student open the Visual Language Translator application. 2: They select the appropriate communication mode (e.g., hand gesture translation or speech-to-text). 3: They engage in communication using the application to convey and understand information."
      },
      {
        "name": "Support Corporate Communication",
        "scenario": "Professionals use the application for communication in corporate environments.",
        "precondition": "Professionals have access to the Visual Language Translator application on their devices.",
        "actors": "Professionals",
        "steps": "1: Professionals open the Visual Language Translator application. 2: They utilize the features to facilitate communication during business meetings, presentations, or video conferences."
      }
    ],
    "user_story_gpt": "As a user of the Visual Language Translator application, I want to register and log into my account to access features that streamline communication across various settings. After registration, I can translate hand gestures to text by positioning my hands in front of the camera or convert spoken words to text using a microphone. This application supports my communication needs, whether in educational environments for students and teachers or during corporate meetings for professionals, ensuring seamless interaction and understanding.",
    "user_story_llama": "As a user, I want to be able to register for and log into the Visual Language Translator application, so that I can access its features to translate hand gestures and spoken words to text, facilitating communication in various settings, including educational environments where teachers and students can effectively convey and understand information, and corporate environments where professionals can seamlessly communicate during meetings, presentations, or video conferences, ultimately breaking down language barriers and enhancing overall communication experience.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "File Upload",
        "scenario": "User uploads a file, then it is signed with user's private key in browser side, then the file is uploaded to server side. User can view file after a successful upload.",
        "precondition": "User is logged in the website",
        "actors": "User",
        "steps": "1: User chooses a file from file browser 2: File is digitally signed. 3: The file is sent in 1 MB chunks to the server. 4: After last chunk is sent successfully, the file signature is sent to the server."
      },
      {
        "name": "Verify A File Signature",
        "scenario": "User can upload a file and it's signature and verify if the signature is authentic.",
        "precondition": "User is logged in the website and has the file, the signature and the public key.",
        "actors": "User",
        "steps": "1: User uploads the file, the signature, the public key. 2: System authenticates the signature 3: User views the result"
      }
    ],
    "user_story_gpt": "As a user, I need the ability to upload files securely by digitally signing them with my private key before sending them in chunks to the server. This will ensure that my files are authenticated and protected. Additionally, I want the option to verify the authenticity of any uploaded file by checking its signature using my public key, allowing me to view the verification results and ensure data integrity.",
    "user_story_llama": "As a user, I want to be able to upload a file to the server, with the file being digitally signed with my private key on the browser side, so that I can ensure the integrity and authenticity of the file, and then view the file after a successful upload. Additionally, I want to be able to verify the authenticity of a file signature by uploading the file, its signature, and the corresponding public key, so that I can confirm whether the signature is genuine or not, and view the result of the verification process.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Organization Operations",
        "scenario": "User can create a new Organization, add members to it, send notices to all members.",
        "precondition": "User is logged in the website",
        "actors": "User",
        "steps": "1: User creates an Organization 2: User adds members to Organization 3: User sends a notice to all members"
      },
      {
        "name": "Team Operations",
        "scenario": "User can create a new Team under an Organization, add members to it, send notices to all members.",
        "precondition": "User is logged in the website and is member of an Organization",
        "actors": "User",
        "steps": "1: User creates an Team 2: User adds members to Team 3: User sends a notice to all members"
      },
      {
        "name": "Thread Operations",
        "scenario": "User can create a new Thread under an Team, add members to it, send notices to all members and add files to the thread.",
        "precondition": "User is logged in the website and is member of an Organization and a Team",
        "actors": "User",
        "steps": "1: User creates an Thread 2: User adds members to Thread 3: User sends a notice to all members 4: User adds a file to the thread"
      }
    ],
    "user_story_gpt": "As a user, I want to effectively manage my organization's operations on the platform. This includes creating new organizations, adding members, and sending notices to keep everyone informed. Furthermore, I want to establish teams within these organizations, allowing me to similarly add members and communicate updates efficiently. For more focused discussions, I will create threads under each team, ensuring that each member is involved and informed, and enable file sharing for seamless collaboration.",
    "user_story_llama": "As a user, I want to be able to create and manage organizations, teams, and threads, so that I can collaborate with others by adding members, sending notices, and sharing files, thereby streamlining our communication and workflow, with the ability to create a new organization, add members to it, and send notices to all members, as well as create teams under the organization, add members to the team, send notices, and create threads under the team to facilitate more focused discussions, add members to the thread, send notices, and share relevant files with the thread members.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Register Retailer",
        "scenario": "Retailer wants to register with the platform to place orders for products from different manufacturers.",
        "precondition": "Retailer is not registered with the platform.",
        "actors": "Retailer",
        "steps": "1: Retailer visits the platform website 2: Retailer fills the registration form 3: Retailer submits the registration form"
      },
      {
        "name": "Place Order",
        "scenario": "Retailer places an order for products from different manufacturers, the order requires confirmation from each manufacturer.",
        "precondition": "Retailer is registered with the platform and has selected products from different manufacturers.",
        "actors": "Retailer, Manufacturers",
        "steps": "1: Retailer selects products from various manufacturers to include in the order 2: Retailer submits the order 3: Each manufacturer confirms and processes their part of the order"
      },
      {
        "name": "Track Order",
        "scenario": "Retailer wants to track the status of an order placed with different manufacturers.",
        "precondition": "Retailer has placed an order with different manufacturers.",
        "actors": "Retailer",
        "steps": "1: Retailer logs in to the platform 2: Retailer selects the order to track 3: Retailer views the status of the order"
      },
      {
        "name": "Make Payment",
        "scenario": "Retailer wants to make payment for an order placed with different manufacturers.",
        "precondition": "Retailer has placed an order with different manufacturers.",
        "actors": "Retailer",
        "steps": "1: Retailer logs in to the platform 2: Retailer proceeds to make payment after the order is confirmed and processed by the manufacturers 3: Retailer makes the payment"
      },
      {
        "name": "Register Manufacturer",
        "scenario": "Manufacturer wants to register with the platform to sell their products to retailers.",
        "precondition": "Manufacturer is not registered with the platform.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer visits the platform website 2: Manufacturer fills the registration form 3: Manufacturer submits the registration form"
      },
      {
        "name": "Manage Products",
        "scenario": "Manufacturer wants to manage their products on the platform.",
        "precondition": "Manufacturer is registered with the platform.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer adds a new product 3: Manufacturer updates an existing product 4: Manufacturer deletes a product"
      },
      {
        "name": "Manage Orders",
        "scenario": "Manufacturer wants to manage the orders placed for their products.",
        "precondition": "Manufacturer is registered with the platform and has received orders for their products.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer views the list of orders 3: Manufacturer updates the status of an order"
      },
      {
        "name": "Manage Inventory",
        "scenario": "Manufacturer wants to manage the inventory of their products on the platform.",
        "precondition": "Manufacturer is registered with the platform and has added products to their inventory.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer adds a new inventory 3: Manufacturer views the list of products in their inventory 4: Manufacturer adds a new batch of stock"
      },
      {
        "name": "Manage Production House",
        "scenario": "Manufacturer wants to manage the production house for their products.",
        "precondition": "Manufacturer is registered with the platform and has added production houses.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer adds a new production house 3: Manufacturer views the list of products in their production houses 4: Manufacturer adds a new batch of product in a production house"
      },
      {
        "name": "Give lease an inventory",
        "scenario": "Manufacturer wants to give lease an empty inventory to another manufacturer.",
        "precondition": "Manufacturer is registered with the platform and has added inventories.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer selects an inventory to lease 3: Manufacturer sets the lease terms and conditions"
      },
      {
        "name": "Take lease an inventory",
        "scenario": "Manufacturer wants to take lease an empty inventory from another manufacturer.",
        "precondition": "Manufacturer is registered with the platform and has added inventories.",
        "actors": "Manufacturer",
        "steps": "1: Manufacturer logs in to the platform 2: Manufacturer selects an inventory to lease 3: Manufacturer agrees to the lease terms and conditions"
      },
      {
        "name": "Manage Manufacturer Status",
        "scenario": "Admin wants to manage the status of manufacturers on the platform.",
        "precondition": "Admin and manufacturer both are registered with the platform.",
        "actors": "Admin",
        "steps": "1: Admin logs in to the platform 2: Admin views the list of manufacturers 3: Admin gives top batch to a manufacturer 4: Admin bans a manufacturer 5: Admin gives warning to a manufacturer 6: Admin unbans a manufacturer"
      },
      {
        "name": "Manage Retailer Status",
        "scenario": "Admin wants to manage the status of retailers on the platform.",
        "precondition": "Admin and retailer both are registered with the platform.",
        "actors": "Admin",
        "steps": "1: Admin logs in to the platform 2: Admin views the list of retailers 3: Admin bans a retailer 4: Admin gives warning to a retailer 5: Admin unbans a retailer"
      },
      {
        "name": "Adding a new Category",
        "scenario": "Admin wants to add a new category to the platform.",
        "precondition": "Admin is registered with the platform and the category is not currently registered.",
        "actors": "Admin",
        "steps": "1: Admin logs in to the platform 2: Admin submits new category details 3: Admin adds a new category"
      }
    ],
    "user_story_gpt": "As a retailer and manufacturer, I want to access a platform where I can seamlessly register, place, track, and manage orders. As a retailer, I wish to register on the platform to order products from various manufacturers, pay for these orders easily, and track their status. Meanwhile, as a manufacturer, I aim to register and manage my products, inventory, and production houses efficiently. I can also lease inventories with other manufacturers to optimize the supply chain. Additionally, I want the admin to manage the status of retailers and manufacturers, adding new categories to ensure the platform functions smoothly and inclusively.",
    "user_story_llama": "As a retailer, I want to register with the platform so that I can place orders for products from different manufacturers, track the status of my orders, and make payments for them. I also want to be able to view and manage my orders, and receive updates on the status of my orders. Additionally, as a manufacturer, I want to register with the platform to sell my products to retailers, manage my products, orders, and inventory, and have the ability to lease or take lease of empty inventories. Furthermore, I want to be able to manage my production houses and add new batches of products. Moreover, as an admin, I want to manage the status of manufacturers and retailers on the platform, including banning, warning, and unbanning them, as well as adding new categories to the platform. Overall, I want the platform to provide a seamless and efficient experience for retailers, manufacturers, and admins to manage their activities, products, and orders, and to facilitate a smooth and secure transaction process.",
    "length": 14
  },
  {
    "usecases": [
      {
        "name": "Prompt Creation and Marketplace",
        "scenario": "User creates a prompt and engages in the marketplace.",
        "precondition": "User is registered and logged in.",
        "actors": "Seller, Buyer, Admin",
        "steps": "1: Seller creates a new prompt 2: Seller uploads prompt details and files 3: Admin approves the prompt 4: Buyer purchases the approved prompt"
      },
      {
        "name": "VIP Membership Purchase",
        "scenario": "User purchases a VIP membership.",
        "precondition": "User is registered and logged in.",
        "actors": "User, Admin",
        "steps": "1: User purchases a VIP membership 2: Admin approves the VIP membership"
      },
      {
        "name": "User Rating",
        "scenario": "User rates a prompt seller.",
        "precondition": "User has purchased a prompt.",
        "actors": "Buyer, Seller",
        "steps": "1: Buyer rates the prompt seller"
      },
      {
        "name": "Search and Filter",
        "scenario": "User searches for prompts and applies filters.",
        "precondition": "User is logged in.",
        "actors": "User",
        "steps": "1: User enters search criteria 2: User applies filters"
      },
      {
        "name": "Discussion Forum Participation",
        "scenario": "User engages in the discussion forum.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User posts a discussion topic 2: User replies to a discussion topic"
      },
      {
        "name": "Prompt Approval by Admin",
        "scenario": "Admin reviews and approves prompts submitted by sellers.",
        "precondition": "Admin is logged in.",
        "actors": "Admin",
        "steps": "1: Admin reviews submitted prompts 2: Admin approves or rejects the prompts"
      }
    ],
    "user_story_gpt": "As a registered user in the prompt marketplace, I want to create and sell prompts easily, allowing me to engage with sellers and buyers effectively. Once I submit my prompt, the admin should review and approve it before it becomes available for purchase. I need to be able to search for and purchase prompts, apply filters, and rate sellers to ensure a quality experience. After purchasing a prompt, I can rate the seller to improve the marketplace's reliability. Additionally, by purchasing a VIP membership, I can gain exclusive benefits once approved by the admin. Engaging in discussion forums will enable me to participate in community conversations and enhance my interaction within the marketplace.",
    "user_story_llama": "As a registered user, I want to be able to create and engage with prompts in the marketplace, purchase VIP memberships, rate prompt sellers, search and filter prompts, and participate in the discussion forum, so that I can have a comprehensive and interactive experience. Additionally, I want the system to have an admin approval process for prompts and VIP memberships, ensuring the quality and security of the platform. This includes being able to create a new prompt, upload prompt details and files, have the prompt approved by an admin, and then have buyers purchase the approved prompt. I also want to be able to purchase a VIP membership and have it approved by an admin. Furthermore, after purchasing a prompt, I want to be able to rate the prompt seller, and be able to search for prompts using various criteria and apply filters to find relevant results. I also want to be able to engage with the community through the discussion forum by posting and replying to topics. Overall, the system should provide a seamless and engaging experience for both buyers and sellers, with robust administrative controls to ensure the platform's integrity.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Asset Group Creation",
        "scenario": "User creates a new crypto asset group.",
        "precondition": "User is registered in the system, User must have coins in the wallet to add an initial token.",
        "actors": "User",
        "steps": "1: User enters the name for the new crypto asset group 2: User adds a description 3: User adds an initial token (Optional)"
      },
      {
        "name": "Add Tokens to Asset Group",
        "scenario": "User adds valid tokens to an existing crypto asset group.",
        "precondition": "User is registered in the system, has an existing crypto asset group, and possesses the necessary wallet(s).",
        "actors": "User",
        "steps": "1: User selects an existing crypto asset group 2: User adds valid tokens to the selected asset group"
      },
      {
        "name": "View Assets in Asset Group",
        "scenario": "User wants to view the existing crypto assets within asset groups.",
        "precondition": "User is registered in the system and has at least one crypto asset group with assets.",
        "actors": "User",
        "steps": "1: User navigates to the 'Asset Groups' section of the application 2: User selects a specific asset group to view 3: User views the details of the selected asset group, including its name, description, and associated assets"
      },
      {
        "name": "Asset Management Request",
        "scenario": "User requests an experienced personal to manage user's assets.",
        "precondition": "User is registered in the system.",
        "actors": "User, System",
        "steps": "1: User selects token type(s) to be invested in 2: User enters the amount to invest 3: User selects the expected profit percentage 4: System dynamically populates the list of available experienced personals based on user's selections 5: User selects an experienced personal from the provided list 6: User submits the asset management request"
      },
      {
        "name": "Responds to Asset Management Request",
        "scenario": "Experienced personal receives an asset management request and responds to either accept or reject the request.",
        "precondition": "Experienced personal is registered in the system and has received an asset management request.",
        "actors": "Experienced Personal",
        "steps": "1: Experienced personal receives the asset management request notification 2: Experienced personal reviews the details of the request including token types, investment amount, and expected profit percentage 3: Experienced personal decides to either accept or reject the request 4: Experienced personal provides additional comments (optional) 5: Experienced personal submits the response"
      },
      {
        "name": "User Assigns or Refuses Accepted Personal to Manage Assets",
        "scenario": "User either assigns or refuses the experienced personal who has accepted the asset management request to actually manage the user's assets.",
        "precondition": "User has received an acceptance response from an experienced personal for the asset management request.",
        "actors": "User",
        "steps": "1: User receives the acceptance notification from the experienced personal 2: User reviews the details of the acceptance including personal's details and comments 3: User decides to either confirm the assignment or refuse it 4: If confirming, user provides additional instructions or preferences (optional) 5: User submits the assignment or refusal"
      }
    ],
    "user_story_gpt": "As a user of the crypto asset platform, I want to create and manage crypto asset groups efficiently. By entering the name and description, I can set up new asset groups and optionally add initial tokens if needed. I should be able to add more valid tokens to these asset groups as they grow. Moreover, I wish to view my asset groups and their details whenever necessary. I can also request experienced professionals to manage my assets by specifying token types, investment amounts, and expected profit percentages. The system will show me a list of available professionals based on my preferences, from which I can select one to submit a management request. Once a professional responds to my request, I can decide whether to assign them to manage my assets, ensuring all details and additional instructions are clear and agreed upon to achieve my investment goals.\"}",
    "user_story_llama": "As a user, I want to be able to create and manage my own crypto asset groups, including adding tokens and viewing the assets within each group, so that I can organize my investments efficiently. Additionally, I want to be able to request experienced personals to manage my assets, selecting from a list of available options based on my investment preferences, and then assign or refuse the accepted personal to actually manage my assets, providing additional instructions or preferences as needed. This will enable me to make informed decisions about my investments and potentially earn higher returns, while also having control over who manages my assets and how they are managed.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Registration",
        "scenario": "User signs up for an account on Jobify platform.",
        "precondition": "User visits Jobify platform for the first time.",
        "actors": "User",
        "steps": "1: User provides required information including username, email, password, full name, profile details, contact information, privacy settings, and job preferences. 2: User submits the registration form."
      },
      {
        "name": "Login",
        "scenario": "Registered user logs in to the Jobify platform.",
        "precondition": "User is registered on the Jobify platform.",
        "actors": "User",
        "steps": "1: User enters username and password. 2: User submits the login form."
      },
      {
        "name": "Job Search",
        "scenario": "User searches for jobs based on preferences and applies for suitable positions.",
        "precondition": "User is logged into the Jobify platform.",
        "actors": "User",
        "steps": "1: User enters search criteria including job type, location, and salary range. 2: User views the list of jobs matching the search criteria. 3: User selects a job to view details."
      },
      {
        "name": "Apply for Jobs",
        "scenario": "Employee submits job applications through the platform.",
        "precondition": "Employee has selected a job to apply for.",
        "actors": "Employee",
        "steps": "1: Employee uploads resume and cover letter. 2: Employee submits the application."
      },
      {
        "name": "Employer Job Posting",
        "scenario": "Employer posts job openings and manages posted jobs on the Jobify platform.",
        "precondition": "Employer is logged into the Jobify platform.",
        "actors": "Employer",
        "steps": "1: Employer navigates to the job posting section. 2: Employer fills in job details including title, description, requirements, and application deadline. 3: Employer previews the job posting. 4: Employer submits the job posting."
      },
      {
        "name": "Employer Update Company Details",
        "scenario": "Employer modifies company information on the platform.",
        "precondition": "Employer is logged in.",
        "actors": "Employer",
        "steps": "1: Employer accesses the company profile. 2: Employer edits details (e.g., company description, contact information). 3: System updates the company information."
      },
      {
        "name": "Interview Scheduling",
        "scenario": "Employer schedules interviews with selected candidates and manages interview details.",
        "precondition": "Employer has posted job openings and candidates have applied.",
        "actors": "Employer, Candidate",
        "steps": "1: Employer reviews job applications and selects candidates for interviews. 2: Employer sends interview invitations to selected candidates. 3: Candidate accepts the interview invitation. 4: Employer schedules the interview date, time, and medium (e.g., Zoom)."
      }
    ],
    "user_story_gpt": "As a user on the Jobify platform, I want to easily register by providing necessary details like my full name, username, and job preferences, so I can explore job opportunities. Once registered, I wish to log in securely to search for jobs by entering criteria such as job type and location, allowing me to apply for suitable positions by uploading my resume and cover letter. As an employer, I want to post job openings with detailed descriptions and requirements, update our company profile as needed, and efficiently manage the hiring process by scheduling interviews with candidates, ensuring we find the right fit for our positions.",
    "user_story_llama": "As a user, I want to be able to register for an account on the Jobify platform, providing necessary information, so that I can log in and utilize the platform's features. Once logged in, I want to be able to search for jobs based on my preferences, view job details, and apply for suitable positions by uploading my resume and cover letter. Additionally, as an employer, I want to be able to post job openings, manage my company's details, and schedule interviews with selected candidates, so that I can efficiently find the right candidates for my job openings. Furthermore, I want the system to facilitate the interview scheduling process, allowing me to send invitations to candidates and schedule interviews at a convenient date, time, and medium, thereby streamlining the hiring process for both employers and candidates.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Create a Group",
        "scenario": "A user creates a group with a name ,profile Photo  description",
        "precondition": "User is logged in",
        "actors": "Any valid user",
        "steps": "1: User clicks on create group button 2: User enters the group name 3: User enters the group description 4: User selects the group profile photo 5: User clicks on create group button"
      },
      {
        "name": " Join a group",
        "scenario": "A user sends a join request to a group, and the group admin approves the request.",
        "precondition": "There is an existing group with an admin",
        "actors": "User, Group Admin",
        "steps": "1: User searches for the group and sends a join request 2: Group admin receives the join request 3: Admin approves join request 4: A notification is sent to the user"
      },
      {
        "name": "Approve a Post",
        "scenario": "A group member posts a post and the group admin approves the post",
        "precondition": "Group member is logged in and is a member of the group and there is a group admin",
        "actors": "Group Member, Group Admin",
        "steps": "1: Group member selects images to post 2: Group member add relevant tags to the images 3: Group member adds a description to the post 4: Group member clicks on post button 5: A notification is sent to admin about the post 6: Group admin approves the post 7: A notification is sent to the group member about the approval"
      },
      {
        "name": " Perform Similar Search Operation",
        "scenario": "A user performs a search operation within a group to find specific contens.",
        "precondition": "The user is a member of the group",
        "actors": "User",
        "steps": "1: User navigates to the group's search functionality 2: User enters search criteria (keywords, member names,location etc.) 3: System processes the search query and presents relevant results"
      },
      {
        "name": "Modify Admin Moderator Role",
        "scenario": "Group admin can add other group members as an admin and may also resign from adminship ",
        "precondition": "There is an existing group admin",
        "actors": "Group Admin, Group Member",
        "steps": "1: Group admin selects a member to suggest for admin role 2: Admin suggests the member for adminship 3: Suggested member receives the admin offer through a notification 4: Suggested member accepts the offer"
      }
    ],
    "user_story_gpt": "As a user within a social platform, I want to create and manage groups by giving them a distinctive name, profile photo, and description so that I can facilitate focused discussions or interests. Once a group is created, users can join by sending a request, which is approved by the group admin to ensure a controlled member admission. Additionally, as members, users can post content which requires admin approval to maintain the quality and relevance of posts in the group. I also want to have the ability to search for specific content within the group using various criteria, enabling me to easily locate information or discussions pertinent to my interests. As a group admin, I possess the capability to assign other members to admin roles or manage my own admin status, allowing for dynamic management and delegation within the group. This comprehensive group functionality enhances our ability to connect and engage meaningfully within specific communities on the platform.\"",
    "user_story_llama": "As a valid user, I want to be able to create a group with a name, profile photo, and description, so that I can manage and interact with other users. Additionally, I want to be able to join existing groups by sending a join request to the group admin, who can then approve my request. Once I'm a group member, I want to be able to post content, such as images with relevant tags and descriptions, and have the group admin approve my posts. I also want to be able to search for specific content within the group using keywords, member names, locations, and other criteria. Furthermore, I want the group admin to have the ability to add other members as admins, and for admins to be able to resign from their role, ensuring that group management is flexible and dynamic. Overall, my goal is to have a seamless and interactive group experience, with efficient content management and administration.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Session Creation",
        "scenario": "A student creates a session for a specific academic term.",
        "precondition": "User is registered and logged in.",
        "actors": "Student",
        "steps": "1: User navigates to the 'Sessions' section. 2: User selects the academic term for which they want to create a session. 3: User enters the session title (e.g., '4-1' for level 4, term 1). 4: User creates the session."
      },
      {
        "name": "Session Creation with Visibility Settings",
        "scenario": "A student creates a session and sets its visibility.",
        "precondition": "User is registered and logged in.",
        "actors": "Student",
        "steps": "1: User navigates to the 'Sessions' section. 2: User selects to create a new session. 3: User enters the session title. 4: User selects the visibility setting: public, private, or publish. 5: User creates the session."
      },
      {
        "name": "Course Creation Under Session",
        "scenario": "A student creates a course under a session.",
        "precondition": "User is registered and logged in. A session exists.",
        "actors": "Student",
        "steps": "1: User navigates to the desired session. 2: User selects to create a new course. 3: User enters the course title. 4: User creates the course."
      },
      {
        "name": "Adding Resources to a Course",
        "scenario": "A student adds various resources to a course.",
        "precondition": "User is registered and logged in. A course exists under a session.",
        "actors": "Student",
        "steps": "1: User navigates to the desired course. 2: User selects to add a new resource. 3: User specifies the type of resource to add: lecture video, PDF, link, or notes. 4: User uploads or provides the necessary information for the selected resource type. 5: User adds the resource to the course."
      }
    ],
    "user_story_gpt": "As a student, I want to efficiently create and manage academic sessions so that I can organize my coursework for specific terms. I should be able to name each session (e.g., '4-1') and set its visibility according to its purpose, choosing options like public or private. Within these sessions, I need the ability to create courses and enrich them with various resources such as lecture videos, PDFs, links, or notes, ensuring a comprehensive learning experience.",
    "user_story_llama": "As a student, I want to create and manage my academic sessions, including setting their visibility, so that I can organize my courses and resources effectively. I want to be able to create new sessions for specific academic terms, and within those sessions, create new courses to help me stay focused on my goals. Additionally, I want to be able to add various resources to my courses, such as lecture videos, PDFs, links, and notes, so that I can access all the necessary materials in one place. By having control over the visibility of my sessions, I can choose to share my progress with others or keep it private, and by organizing my resources in a structured way, I can efficiently review and utilize them to achieve my academic objectives.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Writing Educational Blogs with Tags",
        "scenario": "A user writes an educational blog and adds tags to it.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User navigates to the 'Blogs' section. 2: User selects to create a new blog post. 3: User writes the content of the blog post. 4: User adds relevant tags to the blog post. 5: User publishes the blog post."
      }
    ],
    "user_story_gpt": "As a registered user, I want to write educational blog posts and add relevant tags to categorize my content, ensuring that my posts are easily discoverable by others. I will navigate to the 'Blogs' section, create a new blog post, carefully craft my content, and attach suitable tags before publishing it online.",
    "user_story_llama": "As a user, I want to be able to write and publish educational blog posts with relevant tags, so that I can share my knowledge and make it easily discoverable by others, by navigating to the 'Blogs' section, creating a new post, writing the content, adding tags, and publishing the post, once I am registered and logged in.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Team creation for a contest",
        "scenario": "A user registers for a contest by creatting a team",
        "precondition": "Contest has not started yet and team members are not part of any other team.",
        "actors": "Team leader",
        "steps": "1: User creates a team 2: User is assigned as the team leader"
      },
      {
        "name": "Submission of a problem solution in a contest",
        "scenario": "A member team submits a solution for a problem in a contest",
        "precondition": "Contest is ongoing, the team is registered for the contest and maximum number of submissions for the problem is not reached.",
        "actors": "Team member",
        "steps": "1: User submits a solution for a problem 2: System evaluates the solution 3: System updates the scoreboard 4: Team unlocks the new problems"
      },
      {
        "name": "Asking for clarification in a contest",
        "scenario": "A team member asks for clarification for a problem in a contest",
        "precondition": "Contest is ongoing and the team is registered for the contest.",
        "actors": "Team member, Contest organizer",
        "steps": "1: User asks for clarification for a problem 2: Contest organizer answers the clarification"
      },
      {
        "name": "Enter in the contest",
        "scenario": "A user enters in a contest section",
        "precondition": "Contest is ongoing or finished.",
        "actors": "Team member, regular users of the system",
        "steps": "1: register or unregistered users try to enter into the contest section 2: system verifies contest status and allows users to enter into the contest section 3: users can see problems, standings, and other contest related information"
      },
      {
        "name": "Creation of a contest",
        "scenario": "Admin creates a contest",
        "precondition": "user must be an admin of the system and the contest name must be unique",
        "actors": "Admin",
        "steps": "1: Admin creates a contest with a unique name and type of contest 2: System verifies user role and contest name and type 3: After sucessful creation of a contest admin can add problems and other specification, set time and date for the contest"
      }
    ],
    "user_story_gpt": "As a contest participant, I want to create a team before the contest starts so that I can register with my teammates and lead them. During the contest, my team should be able to submit solutions for problems, receive evaluations, and see the updated scoreboard, unlocking new challenges as we progress. If we encounter unclear problems, we should be able to ask contest organizers for clarifications. At any moment, both registered and unregistered users should be able to enter the contest section to view problems, standings, and other related information. Moreover, as an admin, I want to have the ability to create new contests with unique names and specific types, allowing me to set up problems, specifications, and schedule times and dates accordingly.",
    "user_story_llama": "As a user of the contest system, I want to be able to create and participate in contests, so that I can compete with other teams and showcase my skills. This includes being able to create a team for a contest, submit solutions to problems, ask for clarification on problems, and view contest information such as standings and problems. Additionally, as an admin, I want to be able to create new contests with unique names and specifications, add problems, and set the time and date for the contest. The system should allow users to enter the contest section, verify the contest status, and provide access to contest-related information, while also ensuring that teams can only submit a limited number of solutions for each problem and that the scoreboard is updated accordingly. Overall, the system should provide a seamless and organized experience for both users and admins to manage and participate in contests.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A new user registers on the TravelBee website.",
        "precondition": "User is not already registered",
        "actors": "User",
        "steps": "1: User provides valid registration details 2: User submits the registration form"
      },
      {
        "name": "Flight Booking",
        "scenario": "User books a flight for their travel.",
        "precondition": "User is registered and logged in",
        "actors": "User",
        "steps": "1: User provides valid flight details 2: User confirms the booking"
      },
      {
        "name": "Hotel Booking",
        "scenario": "User books a hotel for accommodation.",
        "precondition": "User is registered and logged in",
        "actors": "User",
        "steps": "1: User provides valid hotel details 2: User confirms the booking"
      },
      {
        "name": "User Search",
        "scenario": "User searches for flights or hotels based on specific criteria.",
        "precondition": "User is on the search page",
        "actors": "User",
        "steps": "1: User provides valid search criteria"
      },
      {
        "name": "Admin Flight Management",
        "scenario": "Admin adds or removes flights from the system.",
        "precondition": "Admin is logged into the admin dashboard",
        "actors": "Admin",
        "steps": "1: Admin adds a new flight 2: Admin removes an existing flight"
      },
      {
        "name": "Admin Hotel Management",
        "scenario": "Admin manages hotels by adding/removing hotels and adding rooms to hotels.",
        "precondition": "Admin is logged into the admin dashboard",
        "actors": "Admin",
        "steps": "1: Admin adds a new hotel 2: Admin adds a new room to an existing hotel 3: Admin removes an existing hotel"
      }
    ],
    "user_story_gpt": "As a user on the TravelBee platform, I want to seamlessly register and search for flights or hotels based on my travel criteria. Once I've found suitable options, I can efficiently book both my flights and accommodations. On the administrative side, admins can manage the offerings by adding or removing flights and hotels, as well as manage room availability, ensuring a smooth and updated service for all users.",
    "user_story_llama": "As a user, I want to register on the TravelBee website so that I can book flights and hotels for my travel. I want to be able to search for flights and hotels based on specific criteria, and then book them by providing valid details and confirming the booking. Additionally, as an admin, I want to manage the flights and hotels available on the system by adding or removing them, so that users have access to accurate and up-to-date options. This includes adding new flights, removing existing ones, adding new hotels, adding rooms to existing hotels, and removing hotels, in order to provide a seamless and efficient travel booking experience for users.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Problem Publication",
        "scenario": "Setter publishes a problem and Admin approves or rejects",
        "precondition": "Setter is an admin approved setter in our system",
        "actors": "Setter, Admin",
        "steps": "1: Setter designs a problem and saves it 2: Setter submits the problem for approval 3: Admin approves or rejects the problem"
      },
      {
        "name": "Problem Setter Registration",
        "scenario": "A user intends to become a problem setter and registers for the role. Admin reviews and approves/rejects the registration.",
        "precondition": "User is registered on the platform",
        "actors": "User, Admin",
        "steps": "1: User expresses the intention to become a problem setter 2: User submits the registration request 3: Admin reviews the registration request and makes a decision (approve/reject)"
      },
      {
        "name": "Problem Solution Submission",
        "scenario": "A registered user intends to solve a problem available on the platform. The user successfully solves the problem, and the system records the solution.",
        "precondition": "User is registered and logged into the system",
        "actors": "User",
        "steps": "1: User navigates to the list of available problems 2: User selects a specific problem to solve 3: User provides a solution to the problem 4: User submits the solution 5: System checks the solution, gives verdict and updates the user's solving history"
      },
      {
        "name": "Add Problem To Contest",
        "scenario": "A contest owner or collaborators can add own designed problems to the contest",
        "precondition": "contest setter should be a registered setter in our system. contest id should be a valid contest id and the problem also should be a valid one",
        "actors": "contest setter",
        "steps": "1: Setter navigates to the list of his/her owned or contributed conetests 2: Setter selects a specific contest to add problem in 3: Setter choose a problem of his/her own and add to the contest"
      },
      {
        "name": "Contest Submission for Approval",
        "scenario": "A contest organizer wants to submit a complete contest for approval. The organizer arranges the contest, including multiple problems, and submits it for approval. An administrator reviews and approves/rejects the submitted contest.",
        "precondition": "Contest Setter is registered as a setter in our system.",
        "actors": "Contest Setter, Admin",
        "steps": "1: Contest Organizer creates a new contest with multiple problems 2: Contest Organizer submits the complete contest for approval 3: Administrator reviews and approves/rejects the submitted contest"
      }
    ],
    "user_story_gpt": "As a problem setter, I want to publish problems after designing them and having them approved by an admin, ensuring high quality and consistency. Users intending to become setters can register for the role, subjected to admin approval, enhancing our pool of creative problem designers. Furthermore, registered users can solve problems, submit their solutions, and have their solving progress updated, maintaining engagement and competition. Contest setters can add their designed problems to contests they own, facilitating dynamic competitions and user participation. Contest organizers also need to submit contests with multiple problems for admin approval, ensuring the integrity and readiness of the contests before they go live.",
    "user_story_llama": "As a user, I want to be able to register as a problem setter, so that I can design and publish problems for others to solve, with the approval of the admin. Once registered, I want to be able to submit my problems for approval, and have them published on the platform if approved by the admin. Additionally, I want to be able to add my designed problems to contests that I own or collaborate on, and submit these contests for approval. As a contest organizer, I want to be able to create and submit complete contests, including multiple problems, for approval by the admin. Meanwhile, as a registered user, I want to be able to navigate the list of available problems, select a problem to solve, provide a solution, and have the system record my solution and update my solving history. Overall, the system should facilitate the creation, approval, and solving of problems, as well as the organization and management of contests, to provide a comprehensive and engaging experience for all users.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Bus Tracking",
        "scenario": "Admin can track a live bus.",
        "precondition": "Driver must initiate an allocated trip ",
        "actors": "Admin, Driver",
        "steps": "1: Admin navigates to Tracking module 2: Admin selects a live trip from the list 3: System shows the trace of the trip using map api"
      },
      {
        "name": "Add a trip allocation",
        "scenario": "Admin defines a new trip allocation",
        "precondition": "Dependencies between Routes, Buses and Bus Staffs are not violated.",
        "actors": "Admin",
        "steps": "1: Admin navigates to Upcoming Trips module 2: Admin enters details for a new trip e.g. route, driver, bus, date and shift 3: Admin submits single trip allocation 4: Admin submits bulk trip allocation 5: System adds the allocation to the database"
      },
      {
        "name": "View lists of user, bus, route, staff etc",
        "scenario": "Authorized Admin can view list of all buses, routes, users and staff",
        "precondition": "Route, Bus and Bus Staff etc data are available.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the respective section (user, bus, route, bus_staff) in Database module 2: Admin views a list of entities in the selected list 3: Admin clicks on an entity to view its full details"
      },
      {
        "name": "Add data to user, bus, route, staff etc database",
        "scenario": "Authorized Admin can add new buses, routes, users and staff",
        "precondition": "Admin must be authorized to add new data.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the clicks on respective buttons to add users, buses, routes, or staff 2: Admin fills in the required fields for the new entity 3: Admin submits the request to add the new entity 4: System validates the data and adds the entity to the database"
      },
      {
        "name": "Feedbacks from clients and respond",
        "scenario": "Authorized Admin can view and respond to client feedbacks",
        "precondition": "Admin must be authorized to add new data.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the Feedback module. 2: Admin views all feedbacks from clients 3: Admin selects a feedback to read 4: Admin responds to the feedback 5: System updates the feedback status and optionally notifies the client"
      }
    ],
    "user_story_gpt": "As an admin in the transportation system, I want to efficiently manage and track the bus operations. I can allocate new trips by defining details like route, driver, and schedule. With the tracking module, I can monitor live bus trips on a map to ensure smooth operations. Additionally, I have the ability to view and add details about buses, routes, users, and staff, keeping the database up-to-date. Lastly, I can review and respond to client feedback, ensuring that passengers' concerns are addressed promptly, fostering a responsive and efficient service environment.",
    "user_story_llama": "As an Admin, I want to manage and track bus trips, so that I can have real-time visibility of live bus locations and efficiently allocate trips to drivers and buses. I need to be able to add new trip allocations, view and manage lists of users, buses, routes, and staff, as well as add new data to these databases. Additionally, I want to be able to view and respond to client feedback, in order to improve our services and build strong relationships with our clients. The system should allow me to navigate easily through different modules, such as Tracking, Upcoming Trips, Database, and Feedback, and perform various actions like submitting trip allocations, viewing entity details, and responding to feedback, while ensuring that dependencies between routes, buses, and bus staff are not violated and that data is validated before being added to the database.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Requisition from teachers and respond",
        "scenario": "Authorized Admin can view and respond to teacher requisition requests.",
        "precondition": "Admin needs to be logged in.",
        "actors": "Admin",
        "steps": "1: Admin logs into the system 2: Admin navigates to the requisition requests section 3: Admin views all requisition requests from teachers 4: Admin selects a request to view details 5: Admin approves or rejects the request 6: System updates the request status"
      }
    ],
    "user_story_gpt": "As an Admin, I want to manage teacher requisition requests efficiently by logging into the system and navigating to the requisition requests section. Here, I can view and assess each teacher's request, ensuring the system keeps me informed by updating the status once I approve or reject them. This streamlines our administrative process and enhances communication with teachers.",
    "user_story_llama": "As an Admin, I want to be able to view and respond to teacher requisition requests so that I can efficiently manage and address the needs of teachers, by logging into the system, navigating to the requisition requests section, viewing all requests, selecting a request to view details, and approving or rejecting the request, thereby ensuring that the system updates the request status accordingly.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Billing and Inventory list for automobiles",
        "scenario": "Authorized Admin can view and update billing and inventory management.",
        "precondition": "Admin needs to be logged in.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the Inventory module 2: Admin views the list of automobile parts and their billing information 3: Admin adds or deletes inventory items as needed 4: System updates the inventory list"
      }
    ],
    "user_story_gpt": "As an admin, I want to access the Inventory module so that I can view and update automobile parts and their billing information. This allows me to effectively manage the inventory by adding or deleting items as necessary, ensuring that our inventory list is always up to date.",
    "user_story_llama": "As an Admin, I want to be able to view and update the billing and inventory management for automobiles, so that I can effectively manage the inventory list, add or delete items as needed, and ensure that the system reflects the most up-to-date information, but only after I have logged in to the system.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Stock Management",
        "scenario": "Inventory managers/lab assistants stocks equipments according to need.",
        "precondition": "Inventory manager is assigned to an inventory and lab assistant is assigned to a lab",
        "actors": "Inventory Manager, Lab Assistant",
        "steps": "1: Inventory manager/lab assistant checks own location for equipments that are below the threshold 2: Inventory manager/lab assistant restocks the equipments which are running low and high in demand 3: Inventory manager/lab assistant discards damaged equipments 4: Inventory manager/lab assistant updates the stock in the system"
      },
      {
        "name": "Request Processing",
        "scenario": "Student/Lab Assistant requests for equipments and the request is forwarded to required authority and finally the request is accepted/rejected",
        "precondition": "Student is enrolled in the university, Lab Assistant is assigned to a lab, Inventory Manager is assigned to an inventory, Lab Supervisor is assigned to a lab, Department Head is assigned to a department",
        "actors": "Student, Lab Assistant, Inventory Manager, Lab Supervisor, Department Head",
        "steps": "1: Student/Lab Assistant requests for equipments 2: Lab Assistant forwards students' request to lab supervisor if required, otherwise accept/reject/modify it 3: Lab Supervisor forwards the request to Department Head if required, otherwise accept/reject/modify it 4: Inventory Manager/Department Head accepts/rejects the request"
      },
      {
        "name": "Due Management",
        "scenario": "Lab Assistant/Super Admin monitors dues and takes necessary actions to recover them",
        "precondition": "Lab Assistant is assigned to a lab, Student is enrolled in the university",
        "actors": "Lab Assistant, Student, Super Admin",
        "steps": "1: Lab Assistant monitors dues 2: Lab Assistant sends reminders to students with dues 3: Lab Assistant updates the system with the status of dues 4: Super Admin monitors the dues 5: Students return their dues or report lost/damaged 6: Lab Assistant updates the system with the status of dues 7: Lab Assistant clears the dues after receiving the equipments"
      },
      {
        "name": "Clearance Management",
        "scenario": "Student requests for clearance, superadmin verifies the request and forwards it to the department head, department head gives clearance.",
        "precondition": "Student is enrolled in the university, Super Admin is assigned to the university, Department Head is assigned to a department",
        "actors": "Student, Super Admin, Department Head",
        "steps": "1: Student requests for clearance 2: Super Admin verifies the request and forwards it to the department head 3: Department Head gives clearance"
      },
      {
        "name": "User Management",
        "scenario": "Super Admin assigns labs to lab assistants and lab supervisors, assigns inventory to inventory managers",
        "precondition": "Super Admin is assigned to the university",
        "actors": "Super Admin",
        "steps": "1: Super Admin assigns labs to lab assistants and lab supervisors 2: Super Admin assigns inventory to inventory managers"
      }
    ],
    "user_story_gpt": "As an inventory manager and lab assistant at the university, I need an efficient system to manage lab equipment and inventory seamlessly. This system should allow us to stock equipment as needed, discard damaged items, and update inventory records accordingly. Additionally, students and lab assistants can request equipment, and these requests are processed through a hierarchy involving lab supervisors and department heads, ensuring proper authorization and management. The system must also monitor equipment due from students, with reminders and updates on the status of dues, handled by lab assistants and overseen by a super admin. For students seeking clearance, we require a streamlined process where their requests are verified by a super admin and authorized by department heads. Moreover, user management requires that super admins can assign labs and inventories to lab assistants, lab supervisors, and inventory managers, ensuring everyone knows their roles and responsibilities within the university's system.",
    "user_story_llama": "As a university administrator, I want to manage the inventory and equipment requests efficiently, so that lab assistants and students can access the necessary equipment for their work. This includes having inventory managers and lab assistants stock and manage equipment according to need, and process requests from students and lab assistants in a timely manner. The system should also enable lab assistants and super admins to monitor and manage dues, send reminders, and update the status of dues. Additionally, the system should allow students to request clearance and super admins to verify and forward these requests to department heads for approval. Furthermore, the system should enable super admins to assign labs to lab assistants and lab supervisors, and assign inventory to inventory managers, to ensure that all personnel have the necessary access and responsibilities. Overall, the goal is to create a streamlined and efficient equipment management system that supports the university's operations and ensures that all users have a seamless experience.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Authentication and Access Control",
        "scenario": "Users, authors, and admins log in to the website to access their relevant pages.",
        "precondition": "The website is operational and user credentials are stored securely.",
        "actors": "User, Author, Admin",
        "steps": "1: User, Author, or Admin navigates to the login page. 2: User enters their credentials (username and password). 3: System verifies the credentials and grants access based on the user's role. 4: User, Author, or Admin is redirected to their relevant page upon successful authentication."
      },
      {
        "name": "Course Enrollment and Management",
        "scenario": "A user can browse available courses, enroll in a course, view lessons and quizzes within the course, rate the course, and view their user profile.",
        "precondition": "The user is registered and logged in to the website.",
        "actors": "User",
        "steps": "1: User navigates to the list of available courses. 2: User browses and selects a course to enroll in. 3: User enrolls in the selected course. 4: User accesses the course page and views the lessons and quizzes. 5: User attends the quizzes within the course. 6: User completes the course and gives a rating to the course. 7: User views their user profile to track course progress and ratings."
      },
      {
        "name": "Author Course Management",
        "scenario": "An author can view analytics of their courses, create a new course, edit lessons within the course, and submit the course to an admin or moderator for review.",
        "precondition": "The author is registered and logged in to the platform as an author.",
        "actors": "Author",
        "steps": "1: Author navigates to the analytics dashboard to view statistics of their existing courses. 2: Author decides to create a new course. 3: Author enters course details, including title, description, and objectives. 4: Author adds lessons and content to the course. 5: Author reviews and edits lessons within the course. 6: Author submits the completed course to an admin or moderator for review."
      },
      {
        "name": "Admin Course Management",
        "scenario": "An admin can view analytics of a course, send feedback on a submitted course, approve the submitted course, and view analytics about authors.",
        "precondition": "The admin is registered and logged in to the platform as an admin.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the analytics dashboard to view statistics of a specific course. 2: Admin reviews the submitted course and sends feedback to the author. 3: Admin evaluates the submitted course and decides to approve or reject it. 4: Admin views analytics about authors to track their performance."
      },
      {
        "name": "Lesson Content with Interactive Elements",
        "scenario": "Lessons in the website can contain interactive graphs, callouts, questions, and links. The website should properly display them.",
        "precondition": "The user is logged in and accessing a lesson.",
        "actors": "User",
        "steps": "1: User navigates to a lesson containing interactive elements. 2: User views the interactive graphs, callouts, questions, and links within the lesson. 3: User interacts with the elements as required."
      }
    ],
    "user_story_gpt": "As a user, I want to access the website to log in securely and browse available courses, enrolling in those that interest me. I can view lessons and interactive content, participate in quizzes, rate courses, and track my progress through my profile. As an author, I want to create and manage my courses by viewing analytics, adding lessons, and submitting courses for review. As an admin, I want to manage course approvals, provide feedback to authors, and view analytics to ensure the platform's quality and growth. This system supports a role-based access control, allowing each user to interact fluidly with the system according to their role.",
    "user_story_llama": "As a user, author, or admin, I want to log in to the website and access my relevant pages, so that I can browse and enroll in available courses, view and interact with lessons and quizzes, and manage my user profile. Additionally, as an author, I want to view analytics of my courses, create and edit new courses, and submit them for review, so that I can track my course performance and improve my content. Furthermore, as an admin, I want to view course analytics, provide feedback on submitted courses, approve or reject them, and track author performance, so that I can ensure the quality of courses and support authors in creating engaging content. The website should also properly display interactive elements within lessons, such as graphs, callouts, questions, and links, to enhance the learning experience. Overall, the system should provide a seamless and interactive experience for users, authors, and admins to achieve their goals, whether it's learning, creating, or managing courses.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Add Product",
        "scenario": "Manager adds a product in the company",
        "precondition": "Manager is authorized",
        "actors": "Manager",
        "steps": "1: Manager fillups all the details of the product 2: Manager submits the product"
      },
      {
        "name": "Generate a sale",
        "scenario": "Showroom manager enters the details of a customer and the products and quantity s/he buys.",
        "precondition": "Showroom manager is approved",
        "actors": "Showroom manager",
        "steps": "1: Showroom manager adds the product to the cart 2: Showroom manager fillups the quantity for every product"
      },
      {
        "name": "Generate an order to factory",
        "scenario": "Showroom manager enters the products and quantity s/he wants to order to factory",
        "precondition": "Showroom manager is approved",
        "actors": "Showroom manager",
        "steps": "1: Showroom manager adds the product to the cart 2: Showroom manager fillups the quantity for every product"
      },
      {
        "name": "Generate a transfer to showroom",
        "scenario": "Factory manager enters the products and quantity s/he wants to transfer to showroom",
        "precondition": "Factory manager is approved",
        "actors": "Factory manager",
        "steps": "1: Factory manager adds the product to the cart 2: Factory manager fillups the quantity for every product"
      },
      {
        "name": "Add Employee",
        "scenario": "Manager adds an employee in the company",
        "precondition": "Manager is authorized",
        "actors": "Manager",
        "steps": "1: Manager fillups all the details of the employee 2: Manager submits the information"
      }
    ],
    "user_story_gpt": "As a manager, I want to efficiently manage our company's operations by utilizing a streamlined system. This system allows me to add new products and register employees securely, ensuring only authorized personnel can perform these tasks. At the showroom, the manager can effortlessly generate sales by entering customer and product details, ensuring each transaction is recorded precisely. The showroom manager is also able to order products from the factory seamlessly by selecting items and specifying quantities. On the other side, the factory manager is empowered to transfer products to the showroom, managing inventory effectively. These features are designed to facilitate smooth coordination between the showroom and factory, ensuring that both product management and personnel records are up to date and accessible when needed, thus enhancing operational efficiency across the board.",
    "user_story_llama": "As a manager, I want to be able to add products and employees to the company, so that I can effectively manage the company's inventory and workforce. Additionally, I want the showroom manager to be able to generate sales by entering customer details and product quantities, as well as generate orders to the factory for restocking purposes. Furthermore, I want the factory manager to be able to generate transfers to the showroom, so that products can be efficiently distributed. In all cases, I want to ensure that only authorized and approved personnel can perform these actions, in order to maintain the integrity and security of the company's operations.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Purchase Crop",
        "scenario": "A buyer wants to buy a specific kind of crop from a seller in the agriculture platform. The system facilitates the transaction between the buyer and the seller.",
        "precondition": "['The buyer and seller are registered users on the platform.', 'The seller has listed the crop for sale.']",
        "actors": "['Buyer', 'Seller']",
        "steps": "1: {'stepId': 1, 'description': 'Buyer selects the desired crop.', 'input': 'Buyer navigates to the marketplace and chooses a specific kind of crop they want to purchase.'} 2: {'stepId': 2, 'description': 'View crop details.', 'input': 'System displays detailed information about the selected crop.'}"
      }
    ],
    "user_story_gpt": "As a registered buyer on the agriculture platform, I want to easily purchase specific crops from sellers by browsing the marketplace. Once I select a crop I'm interested in, the system should provide detailed information about it, ensuring a smooth and informed transaction process.",
    "user_story_llama": "As a buyer, I want to purchase a specific kind of crop from a seller on the agriculture platform, so that I can easily find and acquire the crops I need, with the system facilitating a smooth transaction between the buyer and the seller, by allowing me to select the desired crop, view its details, and complete the purchase, given that both the buyer and seller are registered users on the platform and the seller has listed the crop for sale.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "View Business Analytics Dashboard",
        "scenario": "A user wants to view detailed analytics of their business on the website's dashboard.",
        "precondition": "['The user is logged in to the website.', 'The user has an active business account.']",
        "actors": "['User']",
        "steps": "1: {'stepId': 1, 'description': 'Navigate to the Analytics Dashboard.', 'input': \"User clicks on the 'Analytics' section in the website navigation.\"} 2: {'stepId': 2, 'description': 'View Overall Business Statistics.', 'input': \"System displays an overview of the user's business statistics, including total revenue, sales trends, and key performance indicators.\"} 3: {'stepId': 3, 'description': 'Explore Detailed Analytics.', 'input': 'User can drill down into specific analytics sections such as product performance, customer demographics, and marketing effectiveness.'}"
      },
      {
        "name": "Search and Sort Products",
        "scenario": "A user wants to search for crops and have the ability to sort the search results by name, rate, and popularity.",
        "precondition": "['The user is logged in to the website.', 'The website has a variety of crops listed in the marketplace.']",
        "actors": "['User']",
        "steps": "1: {'stepId': 1, 'description': 'Enter search criteria.', 'input': 'User enters the desired search criteria (e.g., crop name or category) into the search bar.'} 2: {'stepId': 2, 'description': 'Initiate search.', 'input': \"User clicks on the 'Search' button to initiate the search.\"} 3: {'stepId': 3, 'description': 'Sort search results.', 'input': \"User selects sorting options such as 'Sort by Name,' 'Sort by Rate,' or 'Sort by Popularity.'\"}"
      },
      {
        "name": "Buyer-Seller Chat",
        "scenario": "A buyer wants to communicate with a seller using the chat option on the platform.",
        "precondition": "['The buyer is logged in to the website.', 'The buyer has initiated communication with a specific seller.']",
        "actors": "['Buyer', 'Seller']",
        "steps": "1: {'stepId': 1, 'description': 'Open Chat Interface.', 'input': \"Buyer clicks on the 'Chat' option within the seller's profile or product page.\"} 2: {'stepId': 2, 'description': 'Send Message.', 'input': \"Buyer enters a message and clicks 'Send' to communicate with the seller.\"} 3: {'stepId': 3, 'description': 'Receive Reply.', 'input': \"Seller receives the message and replies to the buyer's inquiry.\"}"
      },
      {
        "name": "Admin Monitoring and Profile Management",
        "scenario": "The admin wants to observe total transactions on the platform and has the authority to shut down any user profile or allow a new seller.",
        "precondition": "['The admin is logged in to the admin dashboard.', 'There are existing user profiles and ongoing transactions on the platform.']",
        "actors": "['Admin']",
        "steps": "1: {'stepId': 1, 'description': 'Observe Total Transactions.', 'input': 'Admin views the total number and details of transactions on the platform.'} 2: {'stepId': 2, 'description': 'Review User Profiles.', 'input': 'Admin has the option to review user profiles, including sellers and buyers.'} 3: {'stepId': 3, 'description': 'Take Action on Profile.', 'input': 'Admin can take actions such as shutting down a profile or allowing a new seller based on their review.'}"
      },
      {
        "name": "User Registration",
        "scenario": "A new user registers an account in the website.",
        "precondition": "User does not already have an account in the website",
        "actors": "New User",
        "steps": "1: New User navigates to the registration page of the website 2: New User fills in the required registration details (e.g., username, email, password) 3: New User submits the registration form 4: The system validates the provided details 5: The system creates a new user account or rejects the registration if details are invalid or already in use"
      }
    ],
    "user_story_gpt": "As a business user on the platform, I want to seamlessly view detailed analytics of my business through the website's dashboard, so that I can monitor sales trends, revenue, and customer demographics effectively. I should also be able to easily search for and sort crop products in the marketplace to find what I need quickly. Additionally, having the ability to chat with sellers directly within the platform allows for transparent communication and better negotiation. As an admin, I require oversight of platform transactions and user profiles to manage and maintain the integrity of the marketplace. Finally, as a new user, I want a straightforward registration process to swiftly start engaging with the platform's features.",
    "user_story_llama": "As a user of the website, I want to be able to register for an account, log in, and view detailed analytics of my business on the dashboard, including overall statistics and the ability to explore detailed analytics. I also want to be able to search for products, sort the search results by various criteria, and communicate with sellers through a chat option. Additionally, I expect the platform to be managed by an admin who can monitor total transactions, review user profiles, and take actions such as shutting down profiles or allowing new sellers. This will provide a comprehensive and user-friendly experience, enabling me to effectively manage my business and interact with other users on the platform.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account in the CineConnect website.",
        "precondition": "User must have a registered account and know their login credentials",
        "actors": "Registered User",
        "steps": "1: Registered User navigates to the login page of the forum 2: Registered User enters their login credentials (e.g., username, password) 3: Registered User submits the login form 4: The system validates the login credentials 5: The system grants access to the user account"
      },
      {
        "name": "Search Movies, MoviePersons, Users, Awards",
        "scenario": "Users can search for movies, movie-persons, other users, or movie awards like the Oscars within the platform.",
        "precondition": "User must be on the platform with access to the search functionality",
        "actors": "User",
        "steps": "1: User accesses the search feature on the CineConnect platform 2: User enters a search query (it could be a movie title, username, or award name) 3: The system processes the search query 4: The system displays the search results relevant to the query"
      },
      {
        "name": "Add Movies to Watchlist and Watched List",
        "scenario": "A user adds movies to their watchlist or marks them as watched on their profile.",
        "precondition": "User must be logged in and have a movie in mind to add to their watchlist or watched list",
        "actors": "User",
        "steps": "1: User searches for a movie using the platform's search feature 2: User selects the movie from the search results 3: User clicks on 'Add to Watchlist' or 'Mark as Watched' 4: The system updates the user's profile with the movie added to the specified list"
      },
      {
        "name": "Rate a Movie",
        "scenario": "User submits a rating for a specific movie identified by ID.",
        "precondition": "User has a valid account and is authenticated and the movie identified by movieId exists in the system.",
        "actors": "User",
        "steps": "1: User selects a movie by movieId to rate. 2: User submits a rating for the movie. 3: System validates the user's authentication and permission to rate the movie. 4: System updates the movie with the new rating. 5: System confirms the rating update to the user."
      },
      {
        "name": "Create New Post in Movie Discussion Forum",
        "scenario": "A user creates a new post within a movie discussion forum.",
        "precondition": "User must be a registered member of the forum",
        "actors": "User",
        "steps": "1: User navigates to the desired movie discussion forum 2: User clicks on 'Create New Post' 3: User enters the content, and adds images related to the post 4: User submits the post for publication"
      },
      {
        "name": "Create New Comment or Reply in Movie Discussion Forum",
        "scenario": "A user comments on an existing post or replies to another comment within a movie discussion forum.",
        "precondition": "User must be a registered member of the forum and the post or comment must exist",
        "actors": "User",
        "steps": "1: User navigates to an existing post within the movie discussion forum 2: User clicks on 'Comment' or 'Reply' to engage with the post or an existing comment 3: User enters the content of their comment or reply 4: User submits the comment or reply for publication"
      },
      {
        "name": "Vote on a Post/Comment/Reply in Movie Discussion Forum",
        "scenario": "A user votes on an existing post, comment, or reply within a movie discussion forum.",
        "precondition": "User must be a registered member of the forum, and the post, comment, or reply must exist",
        "actors": "User",
        "steps": "1: User navigates to an existing post, comment, or reply within the movie discussion forum 2: User decides to upvote, downvote, or undo a previous vote 3: User clicks on 'Upvote', 'Downvote', or 'Undo Vote' button 4: The system updates the vote count accordingly"
      },
      {
        "name": "Report a Post",
        "scenario": "A user reports a post in the discussion forum for violating community guidelines or other specific reasons.",
        "precondition": "User must be logged in and have identified a post they believe violates the forum's rules or is otherwise inappropriate.",
        "actors": "User, Moderator",
        "steps": "1: User navigates to the post they wish to report 2: User clicks on the 'Report' button associated with the post 3: User selects a reason for reporting the post from a predefined list or specifies a custom reason in the provided text area 4: User submits the report 5: The system acknowledges the report and forwards it to moderators for review"
      },
      {
        "name": "Send CineFellow Request",
        "scenario": "A user sends a CineFellow request to another user to connect within the platform.",
        "precondition": "Both users must have a registered account on the platform. The sender must be logged in.",
        "actors": "User, Recipient User",
        "steps": "1: Sender navigates to the profile of the user they wish to connect with 2: Sender clicks on the 'Send CineFellow Request' button 3: The system sends a request to the recipient user 4: The recipient user receives a notification of the CineFellow request"
      },
      {
        "name": "Accept or Reject CineFellow Request",
        "scenario": "A user responds to a CineFellow request from another user by either accepting or rejecting it.",
        "precondition": "Recipient User must have received a CineFellow request and must be logged in to respond.",
        "actors": "Recipient User",
        "steps": "1: Recipient User navigates to their notifications or CineFellow requests section 2: Recipient User views the CineFellow request 3: Recipient User chooses to 'Accept' or 'Reject' the request 4: The system updates the CineFellow status based on the user's decision"
      },
      {
        "name": "Add or Modify a Movie",
        "scenario": "A verified user adds a new movie to the platform or modifies details of an existing movie.",
        "precondition": "User must be logged in as a verified account. For modification, the movie must already exist in the database.",
        "actors": "Verified User",
        "steps": "1: Verified User navigates to the 'Add Movie' or 'Edit Movie' section 2: Verified User fills in the movie details: title, release date, plot summary, poster URL, trailer URL, duration, language, country of first release, certification, awards, and casts 3: Verified User submits the form 4: The system validates the input and updates the database with the new or modified movie details"
      }
    ],
    "user_story_gpt": "As a user of the CineConnect platform, I want to log into my account so that I can engage fully with the site's features. I need the ability to search for movies, people in the film industry, users, and awards like the Oscars. Once logged in, I should be able to add movies to my watchlist or mark them as watched, rate them, and ensure my profile reflects these activities. I want to participate in vibrant discussions by creating posts and commenting in movie forums, as well as vote on or report posts if necessary. I'm also interested in connecting socially by sending and responding to CineFellow requests with other users. If I'm a verified user, I want to add or edit movie details to keep the platform's database accurate and up-to-date. Overall, CineConnect should allow me to immerse myself in a rich, collaborative movie-watching community.",
    "user_story_llama": "As a registered user of the CineConnect platform, I want to be able to log in to my account and navigate through the website to search for movies, movie persons, users, or awards, so that I can find and engage with content that interests me. I also want to be able to add movies to my watchlist or mark them as watched, rate movies, and create new posts or comments in the movie discussion forum, as well as vote on existing posts or comments. Additionally, I want to be able to report any posts that violate community guidelines and send or accept CineFellow requests to connect with other users. Furthermore, as a verified user, I want to be able to add new movies to the platform or modify existing movie details, so that the database remains up-to-date and accurate. Overall, my goal is to have a seamless and engaging experience on the CineConnect platform, where I can interact with others, discover new movies, and contribute to the community.",
    "length": 11
  },
  {
    "usecases": [
      {
        "name": "Update Showtimes for Existing Theater",
        "scenario": "Theater manager updates the showtimes for a specific theater identified by ID.",
        "precondition": "Theater manager has valid credentials to access the system and the theater identified by theaterId exists in the system.",
        "actors": "Theater Manager",
        "steps": "1: Theater manager selects a theater by theaterId to update its showtimes. 2: Theater manager provides new showtime details for one or more movies. 3: System updates the showtimes for the specified theater. 4: System confirms the successful update to the theater manager."
      }
    ],
    "user_story_gpt": "As a theater manager, I need to update the showtimes for my theater efficiently by selecting the theater using its unique ID. This allows me to input new schedules for movies, ensuring the system accurately reflects these changes and confirms the updates. By having these capabilities, I can ensure my theater operates smoothly and informs patrons of the correct showtimes.",
    "user_story_llama": "As a theater manager, I want to update the showtimes for existing theaters so that I can manage and modify the schedules of movies playing at specific theaters, ensuring that the system reflects the most current and accurate information, and confirms the successful update to me.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Post New Product in Marketplace",
        "scenario": "User submits a new product to the marketplace.",
        "precondition": "User has a registered and approved account on the marketplace and is logged in and has permission to list new products.",
        "actors": "User",
        "steps": "1: User prepares the new product details according to the marketplace guidelines. 2: User navigates to the product submission section and inputs the new product details. 3: System validates the submitted product details. 4: System adds the new product to the marketplace. 5: System confirms the successful submission to the user."
      }
    ],
    "user_story_gpt": "As a user of the marketplace, I want to submit new products so that they can be listed and available for purchase by others. With a registered and approved account, I can enter the product details according to the marketplace guidelines. The system will then validate these details and confirm the successful submission, ensuring my product is added to the marketplace efficiently and seamlessly.",
    "user_story_llama": "As a user, I want to be able to post a new product in the marketplace so that I can submit a new product to the marketplace, by preparing the product details according to the guidelines, navigating to the submission section, and inputting the details, and have the system validate and add the product, confirming the successful submission to me, provided I have a registered and approved account, am logged in, and have the necessary permission to list new products.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Ticket Purchase",
        "scenario": "A student can purchase a ticket for bus trip",
        "precondition": "Student is enrolled in the university ",
        "actors": "Student, Bus Company",
        "steps": "1: Student selects the number of tickets 2: Student submits the request"
      },
      {
        "name": "Ticket scanning",
        "scenario": "A bus staff can scan the ticket of student for bus trip",
        "precondition": "Student is enrolled in the university ",
        "actors": "Bus Staff, Student",
        "steps": "1: Student shows the ticket to the Bus Staff 2: Bus Staff scans the ticket"
      },
      {
        "name": "Route Time Calendar",
        "scenario": "A student can view the future bus trips",
        "precondition": "Student is enrolled in the university",
        "actors": "Student, Admin",
        "steps": "1: Student selects the date 2: Student selects the route 3: Student submits the request"
      },
      {
        "name": "Feedback Submission",
        "scenario": "A student can submit feedback about their bus trip experience",
        "precondition": "Student is enrolled in the university",
        "actors": "Student, Admin",
        "steps": "1: Student selects the date and time of the bus trip 2: Student provides feedback on various aspects such as cleanliness, punctuality, and comfort 3: Student submits the feedback form"
      },
      {
        "name": "Tracking",
        "scenario": "A student can track the location of the bus in real-time",
        "precondition": "Student is enrolled in the university, Bus has GPS tracking enabled",
        "actors": "Student, Bus Driver, Admin",
        "steps": "1: Driver enables GPS tracking on the bus 2: Student opens the tracking page or app 3: Student selects the bus route 4: Student views the real-time location of the bus on the map"
      },
      {
        "name": "Bus Requisition",
        "scenario": "A teacher can request various types of buses for specific dates for their own reasons",
        "precondition": "Teacher is employed by the university",
        "actors": "Teacher, Admin",
        "steps": "1: Teacher logs into the bus requisition system 2: Teacher selects the date for the bus requisition 3: Teacher selects the type of bus required (e.g., shuttle bus, coach, mini-van) 4: Teacher provides the reason for the bus requisition 5: Teacher submits the bus requisition request"
      },
      {
        "name": "Repair and Request for parts from inventory",
        "scenario": "A bus driver can request for repair and parts from the inventory",
        "precondition": "Bus is in need of repair and parts",
        "actors": "Bus Driver, Admin",
        "steps": "1: Bus Driver logs into the system 2: Bus Driver selects the bus that needs repair 3: Bus Driver selects the parts required from the inventory 4: Bus Driver submits the repair and parts request"
      }
    ],
    "user_story_gpt": "As a student, I want to seamlessly purchase and scan bus tickets so that I can efficiently manage my travel for university trips. Additionally, I want to view upcoming bus routes and submit feedback about my bus trip experience, ensuring it meets my needs for cleanliness and punctuality. To enhance my travel experience, I should be able to track the bus in real-time. As a teacher, I want the ability to requisition different types of buses for specific dates to accommodate various academic activities. Furthermore, as a bus driver, I need to request repairs and parts from the inventory, ensuring the bus fleet remains reliable and safe for all users. This integrated system should enhance the overall efficiency and satisfaction of the university's transportation services.",
    "user_story_llama": "As a student, I want to be able to purchase tickets for bus trips and have them scanned by the bus staff when I board, so that I can easily travel to and from the university. Additionally, I want to be able to view the schedule of future bus trips using the route time calendar, submit feedback about my bus trip experience, and track the location of the bus in real-time, so that I can plan my travels and provide input on the quality of the service. Furthermore, I want the university staff, including teachers and administrators, to be able to request buses for specific dates and purposes, and for bus drivers to be able to request repairs and parts from the inventory, so that the bus service can operate efficiently and effectively, providing a reliable and comfortable transportation experience for all students and staff.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Reading Book Summaries",
        "scenario": "User reads summaries called bytes of books.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User browses the list of book summaries 2: User selects and reads a summary"
      },
      {
        "name": "Managing Favorites",
        "scenario": "User saves books to and manages their favorites list.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User selects a book or summary 2: User adds the selection to their favorites list"
      },
      {
        "name": "Highlighting Quotations",
        "scenario": "User highlights and saves quotations from a book.",
        "precondition": "User is registered, logged in, and reading a book.",
        "actors": "User",
        "steps": "1: User selects a quotation from the book 2: User highlights and saves the quotation"
      },
      {
        "name": "Reporting Vulgar Content",
        "scenario": "User reports vulgar or inappropriate content in a book or summary.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User encounters vulgar content 2: User reports the content"
      },
      {
        "name": "Content Creation by Creators",
        "scenario": "Creators add new book summaries or full books to the platform.",
        "precondition": "Creator is registered, logged in, and has content creation privileges.",
        "actors": "Creator",
        "steps": "1: Creator writes a book summary or full book 2: Creator submits the content to the platform"
      }
    ],
    "user_story_gpt": "As a user of the book summary platform, I want to browse and read summaries, called bytes, of books to quickly understand their essence. I also wish to save my favorite books and summaries to a personalized favorites list for easy access. Furthermore, I want to highlight and save meaningful quotations while reading to revisit and reflect on impactful thoughts. In cases where I encounter vulgar or inappropriate content, I need the ability to report such issues to maintain a positive reading environment. Additionally, as a creator, I desire to add new book summaries or complete books to the platform, contributing valuable content and expanding the library for all users.",
    "user_story_llama": "As a user, I want to be able to read summaries of books, called bytes, and manage my favorites list by saving books that interest me, so that I can easily access and revisit them later. Additionally, I want to be able to highlight and save quotations from the books I'm reading, and report any vulgar or inappropriate content I encounter, to ensure a safe and enjoyable reading experience. Furthermore, I want creators to be able to add new book summaries or full books to the platform, so that the content is constantly updated and expanded, providing me with a wide range of reading materials to choose from, all while being a registered and logged-in user with the necessary privileges for content creation and management.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Complaint Submission",
        "scenario": "Student submits a complaint to the hall authority and the hall authority responds to the complaint",
        "precondition": "Student is registered in the hall",
        "actors": "Student, Hall Authority",
        "steps": "1: Student inputs the complaint title and details 2: Student submits the complaint 3: Hall authority receives the complaint"
      },
      {
        "name": "Seat Allocation",
        "scenario": "Student applies for a seat in the hall and the hall authority allocates a seat to the student",
        "precondition": "Student is registered in the hall",
        "actors": "Student, Hall Authority",
        "steps": "1: Student applies for a seat 2: Hall authority allocates a seat to the student"
      },
      {
        "name": "Notice Board",
        "scenario": "Hall authority posts notices on the notice board and students view the notices",
        "precondition": "Student is registered in the hall",
        "actors": "Student, Hall Authority",
        "steps": "1: Hall authority posts a notice 2: Student views the notice"
      },
      {
        "name": "Dining Management",
        "scenario": "Student takes lunch and dinner meals from the dining hall and the dining hall authority manages the daily meal records",
        "precondition": "Student is registered in the hall",
        "actors": "Student, Dining Hall Authority",
        "steps": "1: Student takes lunch 2: Student takes dinner 3: Dining hall authority records the meals taken by the student"
      },
      {
        "name": "Mess Managing By Most Senior Batch Students",
        "scenario": "2 or 3 students from most senior batch manages a mess month and the hall authority facilitates the mess management",
        "precondition": "Student is registered in the hall",
        "actors": "Student, Hall Authority",
        "steps": "1: 2 or 3 students from most senior batch manages the mess month 2: Hall authority facilitates the mess management"
      }
    ],
    "user_story_gpt": "As a student registered in the hall, I want to submit complaints easily and receive swift responses from the hall authority, apply for and receive seat allocations efficiently, and stay informed of important updates via the notice board. Additionally, I wish to manage my meals seamlessly in the dining hall with the assurance that meal records are accurately kept. Moreover, I appreciate the system where senior batch students manage the mess, supported by the hall authority, ensuring a collaborative and smooth mess management experience each month.",
    "user_story_llama": "As a student, I want to be able to submit complaints to the hall authority and receive responses, so that my concerns are addressed. I also want to be able to apply for a seat in the hall and have it allocated to me, providing me with a comfortable living space. Additionally, I want to be able to view notices posted by the hall authority on the notice board, keeping me informed about important updates. Furthermore, I want to be able to take meals from the dining hall and have my daily meal records managed by the dining hall authority, ensuring that my meal preferences are taken into account. Lastly, I want the mess to be managed by my senior batch students, with the hall authority facilitating the process, so that the mess runs smoothly and efficiently, and I can focus on my studies.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Posting in Community Forums",
        "scenario": "User shares experiences or seeks advice in the community forums, upvotes and comments on posts",
        "precondition": "User is logged in the app",
        "actors": "['User']",
        "steps": "1: User enters the post title and content 2: User adds tags and other attachments to their post"
      },
      {
        "name": "Direct Messaging",
        "scenario": "User engages in a private conversation with another user",
        "precondition": "Users are logged in the app",
        "actors": "['User']",
        "steps": "1: User sends a direct message"
      },
      {
        "name": "Seeking Expert Opinion",
        "scenario": "User seeks expert advice by posting a question for healthcare professionals",
        "precondition": "['User is logged in the app', 'Expert is logged in and verified']",
        "actors": "['User', 'Experts']",
        "steps": "1: User posts a question for expert opinion 2: Expert can reply to the question"
      },
      {
        "name": "Tracking Routine Entries",
        "scenario": "User tracks routine entries including blood sugar levels, insulin dosage and blood pressure",
        "precondition": "User is logged in the app",
        "actors": "['User']",
        "steps": "1: User selects the type of entry 2: User inputs the entry date, time and details"
      },
      {
        "name": "Planning Routine Entries",
        "scenario": "User tracks routine entries including medicine and diet/calories",
        "precondition": "User is logged in the app",
        "actors": "['User']",
        "steps": "1: User selects the type of entry 2: User inputs the planned date, time and details"
      },
      {
        "name": "Emergency Contacts",
        "scenario": "User manages emergency contacts for quick access during urgent situations",
        "precondition": "User is logged in the app",
        "actors": "['User']",
        "steps": "1: User adds emergency contacts with relevant information"
      },
      {
        "name": "Expert Verification",
        "scenario": "Experts add their credentials and get verified by the admin",
        "precondition": "Expert is logged in the app",
        "actors": "['Expert', 'Admin']",
        "steps": "1: Expert adds their credentials 2: Admin verifies or rejects the expert"
      }
    ],
    "user_story_gpt": "As a user, I want to interact with the community by posting experiences or seeking advice, while being able to directly message other users, ensuring a rich engagement experience. Additionally, I need the capability to seek expert opinions by posting questions to healthcare professionals, who are verified by the admin to ensure credible responses. Tracking my health metrics like blood sugar levels, insulin dosage, and blood pressure is crucial, along with the ability to plan diet and medication routines. For safety, I want to manage emergency contacts efficiently, ensuring quick access during urgent situations. Experts will also have their credentials verified by the admin to maintain the community's integrity and trustworthiness.",
    "user_story_llama": "As a user, I want to use the app so that I can share my experiences and seek advice in community forums by posting, upvoting, and commenting, as well as engage in private conversations with other users through direct messaging. I also want to be able to seek expert opinions from verified healthcare professionals by posting questions and receiving replies. Additionally, I want to track and plan my routine entries, including blood sugar levels, insulin dosage, blood pressure, medicine, and diet/calories, and manage my emergency contacts for quick access during urgent situations. Furthermore, I want experts to be able to add their credentials and get verified by the admin, ensuring that I receive reliable advice. Overall, I want the app to provide a comprehensive platform for me to manage my health and wellness, connect with others, and access trusted expert advice, all while being logged in and having a seamless user experience.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Custom Puzzle Selection",
        "scenario": "User selects different modes of the tensor puzzle game and the system generates a tensor puzzle accordingly.",
        "precondition": "none",
        "actors": "Both registered and unregistered users",
        "steps": "1: User selects appropriate tensor generator functions 2: User selects appropriate tensor manipulation functions 3: User chooses the difficulty level 4: User selects the number of problems in the set 5: The system generates a tensor puzzle accordingly 6: The system displays the tensor puzzle to the user, along with the timer"
      },
      {
        "name": "Solving a Puzzle",
        "scenario": "User solves the tensor puzzle generated by the system.",
        "precondition": "A tensor puzzle should be generated by the system.",
        "actors": "User",
        "steps": "1: User inputs code to solve the tensor puzzle 2: The system runs the code 3: The system checks if the output of the code matches the expected output 4: The system displays the result to the user 5: The system displays the next problem to the user"
      },
      {
        "name": "Addition of a user-define tensor puzzle",
        "scenario": "User adds a user-defined tensor puzzle to the system.",
        "precondition": "User should be a registered user and should be logged in.",
        "actors": "User",
        "steps": "1: User inputs the tensor puzzle 2: The system checks if the tensor puzzle is valid 3: The system adds the tensor puzzle to the system"
      },
      {
        "name": "Additon of a question on a tensor manipulation problem",
        "scenario": "User adds a question on a tensor manipulation problem to the system.",
        "precondition": "User should be a registered user and should be logged in.",
        "actors": "User",
        "steps": "1: User inputs the question 2: The system checks if the question is valid 3: The system adds the question to the system"
      },
      {
        "name": "Initiation of a 1v1 custom tensor puzzle game",
        "scenario": "User initiates a 1v1 custom tensor puzzle game.",
        "precondition": "User1 and User2 should be registered users and should be logged in.",
        "actors": "User1, User2",
        "steps": "1: User1 selects the appropriate tensor generator functions 2: User1 selects the appropriate tensor manipulation functions 3: User1 chooses the difficulty level 4: User1 selects the number of problems in the set 5: User1 selects the opponent 6: User1 initiates the game 7: The system generates a tensor puzzle accordingly 8: The system displays the tensor puzzle to User1, along with the timer 9: User2 receives a notification about the game 10: User2 accepts the game 11: The system displays the tensor puzzle to User2, along with the timer"
      }
    ],
    "user_story_gpt": "As a user of the tensor puzzle platform, I want the ability to select and customize my puzzle experience by choosing different modes, difficulty levels, and the number of problems so that personalized challenges can be enjoyed. I can solve these puzzles by inputting code, with the system checking and displaying my results immediately. In addition, as a registered user, I want to add my own tensor puzzles and questions to expand the variety available in the system. Moreover, I want to engage in competitive 1v1 tensor puzzles with others, selecting opponents and customizing the game setup, ensuring dynamic and interactive gameplay with peers.",
    "user_story_llama": "As a user, I want to be able to select different modes of the tensor puzzle game and have the system generate a tensor puzzle accordingly, so that I can solve it and have fun. I also want to be able to solve the generated puzzle by inputting code, and have the system check my solution and display the result. Additionally, as a registered user, I want to be able to add my own custom tensor puzzles to the system, as well as add questions on tensor manipulation problems, so that I can share them with others. Furthermore, I want to be able to initiate a 1v1 custom tensor puzzle game with another registered user, and have the system generate a puzzle and display it to both of us, along with a timer, so that we can compete and enjoy the game together.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Order Medicine",
        "scenario": "User orders medicine from the online pharmacy.",
        "precondition": "User is registered and logged in, Admin manages the system.",
        "actors": "User, Admin",
        "steps": "1: User selects the medicine to order 2: User submits the order 3: Admin processes the order"
      },
      {
        "name": "Add New Medicine",
        "scenario": "Admin adds new medicine to the online pharmacy.",
        "precondition": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.",
        "actors": "Admin",
        "steps": "1: Admin adds the details of the new medicine 2: Admin submits the new medicine details"
      },
      {
        "name": "Remove Banned Medicine",
        "scenario": "Admin removes banned medicine from the online pharmacy.",
        "precondition": "Admin manages the system and currently logged in the system. Admin has the privilege to add medicine in the system.",
        "actors": "Admin",
        "steps": "1: Admin selects the medicine to remove 2: Admin confirms the removal of the medicine 3: Admin reconfirms the removal"
      },
      {
        "name": "Return Expired Medicine",
        "scenario": "Admin returns expired medicines back to the pharmaceutical company.",
        "precondition": "Admin manages the system and there are expired medicines.",
        "actors": "Admin",
        "steps": "1: Admin identifies the expired medicine 2: Admin returns the expired medicine 3: Admin reconfirms the return"
      },
      {
        "name": "Order Medicine to Update Stock",
        "scenario": "Admin orders medicine from the pharmaceutical company to update the online pharmacy stock.",
        "precondition": "Admin manages the system and there's a need to update stock.",
        "actors": "Admin",
        "steps": "1: Admin selects the medicines to order from the company 2: Admin submits the order to the company"
      }
    ],
    "user_story_gpt": "As a user of the online pharmacy system, I want to easily order medicines by selecting my required items and submitting my order for processing. Meanwhile, as an admin, I need to efficiently manage the pharmacy's inventory by adding new medicines, removing banned items, and returning expired stock to pharmaceutical companies. Furthermore, I need to ensure we have sufficient inventory by ordering medicines to update our stock accurately.",
    "user_story_llama": "As a user, I want to be able to order medicine from the online pharmacy, so that I can conveniently purchase the medicines I need. Additionally, I want the admin to be able to manage the system, including adding new medicines, removing banned medicines, and returning expired medicines to the pharmaceutical company, ensuring that the online pharmacy remains up-to-date and compliant with regulations. Furthermore, I want the admin to be able to order medicines from the pharmaceutical company to update the stock, so that the online pharmacy always has the medicines that users need, thereby providing a reliable and efficient service.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Get All User Boards",
        "scenario": "User retrieves a list of all their boards for display on the dashboard page.",
        "precondition": "User is registered, logged in, and has created or is a member of one or more boards.",
        "actors": "User",
        "steps": "1: User requests to view all boards 2: System retrieves and displays all boards associated with the user"
      },
      {
        "name": "Create a New Board",
        "scenario": "User creates a new task board with specific details such as board name, description, deadline, and members.",
        "precondition": "User is registered and logged in.",
        "actors": "User",
        "steps": "1: User provides board details including name, description, deadline, and members. 2: User submits the request to create a new board."
      },
      {
        "name": "Get Board Content",
        "scenario": "User retrieves the content of a specific board, including lists and tasks for the board view page.",
        "precondition": "User is registered, logged in, and has access to the specified board.",
        "actors": "User",
        "steps": "1: User selects a board by its ID 2: System retrieves and displays all lists and tasks associated with the board"
      },
      {
        "name": "Add a List to a Board",
        "scenario": "User adds a new list to an existing board with specific details such as list name, description, and deadline.",
        "precondition": "User is registered, logged in, and has access to the board.",
        "actors": "User",
        "steps": "1: User selects a board by its ID 2: User provides list details including name, description, and deadline 3: User submits the request to add the new list to the selected board"
      },
      {
        "name": "Update Board Settings",
        "scenario": "User updates the settings of an existing board, including the board name, description, and deadline.",
        "precondition": "User is registered, logged in, and has admin rights to the specified board.",
        "actors": "User",
        "steps": "1: User selects a board by its ID 2: User provides updated settings for the board 3: User submits the request to update the board settings"
      },
      {
        "name": "Delete Board",
        "scenario": "Board owner deletes a specific board.",
        "precondition": "User is registered, logged in, and is the owner of the board to be deleted.",
        "actors": "User (Board Owner)",
        "steps": "1: User selects a board by its ID 2: User requests to delete the board"
      }
    ],
    "user_story_gpt": "As a user, I want to efficiently manage my task boards to keep organized and focused. I should be able to view all of my boards quickly on the dashboard, create new boards with specific details like name, description, deadline, and members, and access the content of any board to see its lists and tasks. Additionally, I should have the capability to add new lists to existing boards with pertinent details, update board settings when needed, and delete boards that I own. This will help me maintain an effective and streamlined workflow.",
    "user_story_llama": "As a user, I want to be able to view and manage all my boards, so that I can easily access and organize my tasks and projects. I want to be able to create new boards with specific details such as name, description, deadline, and members, and retrieve the content of a specific board, including lists and tasks. Additionally, I want to be able to add new lists to existing boards, update the settings of my boards, and delete boards that are no longer needed, all while ensuring that I have the necessary permissions and access rights to perform these actions. This will enable me to efficiently manage my workflow and collaborate with others on shared boards.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Create New Project",
        "scenario": "Project Manager wants to create a new project in the project management tool.",
        "precondition": "Project Manager is logged in to the system.",
        "actors": "Project Manager",
        "steps": "1: Project Manager provides project details 2: Project Manager submits the project creation form"
      },
      {
        "name": "Create Tasks for an project",
        "scenario": "Admin creates tasks ",
        "precondition": "Admin is logged in and has access to the project.",
        "actors": "Admin",
        "steps": "1: Admin creates tasks with details 2: Admin submits the task creation form"
      },
      {
        "name": "Add Team Members to a Task",
        "scenario": "Admin wants to add team members to an existing Task.",
        "precondition": "Admin is logged in and has access to the Task.",
        "actors": "Admin",
        "steps": "1: Admin selects team members to add 2: Admin submits the team member addition form"
      },
      {
        "name": "Track Project Progress",
        "scenario": "Monitor and track the progress of tasks within a project.",
        "precondition": "Project manager is logged in and has access to the project.",
        "actors": "Project Manager",
        "steps": "1: Project manager accesses the project dashboard and gantt chart"
      },
      {
        "name": "Track Task Progress",
        "scenario": "Monitor and track the progress of subtasks within a task.",
        "precondition": "Admin is logged in and has access to the task.",
        "actors": "Admin",
        "steps": "1: Admin accesses the task dashboard"
      },
      {
        "name": "Task Completion",
        "scenario": "A team member completes a task assigned to them.",
        "precondition": "Team member is logged into the system and has been assigned tasks.",
        "actors": "Team Member",
        "steps": "1: Team member selects a task assigned to them. 2: Team member marks the task as completed."
      }
    ],
    "user_story_gpt": "As a Project Manager, I want to create new projects within our project management tool efficiently, submitting all necessary details easily. Once a project is set up, I aim to track its progress using dashboards and Gantt charts, ensuring we stay on schedule. As an Admin, I want to create detailed tasks for projects and assign specific team members to these tasks, enabling efficient collaboration. Furthermore, I wish to monitor task progress to ensure everything is on track. Finally, as a Team Member, I want to complete assigned tasks and mark them as done, maintaining smooth workflow and clear communication within the team.",
    "user_story_llama": "As a Project Manager, I want to create new projects in the project management tool, and have Admins create tasks for these projects, as well as add team members to these tasks, so that I can track the progress of tasks within a project and Admins can monitor the progress of subtasks within a task. Additionally, I want team members to be able to complete tasks assigned to them, and have their progress reflected in the project and task dashboards, providing a comprehensive overview of project progress and enabling effective project management.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "User Sign-Up",
        "scenario": "Users sign up on the eLearning platform as either a student or a content creator by providing necessary information.",
        "precondition": "User has access to the internet and the eLearning website.",
        "actors": "Student, Content Creator",
        "steps": "1: User navigates to the sign-up page 2: User selects the type of account (Student or Content Creator) 3: User fills in the required information 4: User submits the sign-up form"
      },
      {
        "name": "Course Browsing and Enrollment",
        "scenario": "Students browse available courses, view details, and enroll in courses of their choice.",
        "precondition": "Student is signed in to the platform.",
        "actors": "Student",
        "steps": "1: Student navigates to the courses page 2: Student views popular, recommended, and all courses 3: Student selects a course 4: Student views course details and enrolls"
      },
      {
        "name": "Interaction with Edurika Chatbot",
        "scenario": "Students interact with the Edurika chatbot to ask questions or get help on various topics.",
        "precondition": "Student is signed in and is on the platform where the chatbot is accessible.",
        "actors": "Student",
        "steps": "1: Student initiates chat with the Edurika chatbot 2: Student types a question or request 3: Chatbot processes the query and provides an answer or guidance"
      },
      {
        "name": "Taking Exams or Quizzes",
        "scenario": "Students take exams or quizzes related to their courses, which can be in MCQ or written formats.",
        "precondition": "Student is enrolled in a course and has reached the exam or quiz section.",
        "actors": "Student",
        "steps": "1: Student navigates to the exam or quiz section of the course 2: Student completes the MCQs and/or written questions 3: Student submits the exam or quiz for evaluation 4: System evaluates the submission and provides instant feedback or grades"
      },
      {
        "name": "Content Creation",
        "scenario": "Content creators upload course materials, including course name, block names, lesson names, lecture videos, and PDFs.",
        "precondition": "Content creator is signed in and has permissions to upload course materials.",
        "actors": "Content Creator",
        "steps": "1: Content creator navigates to the course creation section 2: Content creator inputs course details and uploads materials 3: Content creator submits the course for review or publishes directly if authorized"
      },
      {
        "name": "Participation in Discussion Forum",
        "scenario": "Users participate in the discussion forum by posting questions, answering, liking, and disliking posts.",
        "precondition": "User is signed in to the platform.",
        "actors": "Student, Content Creator",
        "steps": "1: User navigates to the discussion forum 2: User posts a new question or browses existing questions 3: User responds to questions, likes, or dislikes posts"
      },
      {
        "name": "Course Request by Student",
        "scenario": "Students can request new courses they are interested in, which content creators can review and potentially create.",
        "precondition": "Student is signed in to the platform.",
        "actors": "Student, Content Creator",
        "steps": "1: Student navigates to the course request section 2: Student fills out and submits a course request form 3: Content Creator reviews the request"
      },
      {
        "name": "Administrative Oversight",
        "scenario": "Admin reviews course content, user activities, and site statistics for quality control and site management.",
        "precondition": "Admin is signed in with administrative privileges.",
        "actors": "Admin",
        "steps": "1: Admin navigates to the administrative dashboard 2: Admin reviews course content submissions, user activities, and site statistics 3: Admin takes necessary actions like approving courses, issuing warnings, or removing inappropriate content"
      },
      {
        "name": "User Feedback on Courses",
        "scenario": "Students provide feedback on courses they've completed, including ratings and comments.",
        "precondition": "Student is signed in and has completed at least one course.",
        "actors": "Student",
        "steps": "1: Student navigates to the completed course page 2: Student submits a rating and optional comments 3: System records and aggregates the feedback"
      },
      {
        "name": "Advanced Content Management by Creators",
        "scenario": "Content creators update existing courses, add new lessons or resources, and respond to student feedback for continuous improvement.",
        "precondition": "Content Creator is signed in and has published content on the platform.",
        "actors": "Content Creator",
        "steps": "1: Content Creator selects a course to update 2: Content Creator adds new lessons, updates existing content, or adds additional resources 3: Content Creator publishes the updates 4: Content Creator reviews and responds to student feedback"
      }
    ],
    "user_story_gpt": "As a participant on the eLearning platform, whether as a student or content creator, I want seamless functionality to enhance my learning and teaching experience. Students should easily sign up, browse, and enroll in a variety of courses, with guidance from the Edurika chatbot if needed. The platform should support taking exams or quizzes with instant feedback, participating in discussions, and giving feedback on completed courses to facilitate engagement and quality improvement. Students can also request new courses, which creators can review for potential creation. For content creators, there should be intuitive tools for uploading and managing course materials and responding to student feedback, fostering continuous enhancement of educational offerings. Administrators need oversight capabilities to maintain quality and security throughout the site. Together, these features ensure a dynamic and collaborative learning environment for all users.",
    "user_story_llama": "As a user of the eLearning platform, I want to be able to sign up as either a student or a content creator and have access to various features such as browsing and enrolling in courses, interacting with the Edurika chatbot for help, taking exams or quizzes, and participating in discussion forums. Additionally, as a content creator, I want to be able to upload course materials and manage my content, while as a student, I want to be able to request new courses and provide feedback on completed courses. The platform should also allow for administrative oversight to ensure quality control and site management. Furthermore, I want the platform to facilitate continuous improvement through features such as advanced content management by creators, allowing them to update existing courses and respond to student feedback. Overall, the goal is to create a comprehensive and interactive eLearning environment that supports the needs of both students and content creators, with the ultimate aim of providing high-quality educational experiences.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Product Price Comparison",
        "scenario": "User compares prices for multiple products from different online retailers.",
        "precondition": "User is on the product search page",
        "actors": "User",
        "steps": "1: User enters search criteria for a product 2: User views the list of product results with prices from multiple retailers 3: User selects a product to view detailed information 4: User compares prices and retailer ratings 5: User adds the selected product to the cart"
      },
      {
        "name": "Price Drop Alerts",
        "scenario": "User sets up price drop alerts for specific products.",
        "precondition": "User is viewing the product detail page",
        "actors": "User",
        "steps": "1: User navigates to the product details page 2: User sets up a price drop alert for the selected product"
      },
      {
        "name": "View Product Details",
        "scenario": "User explores detailed information about a specific product.",
        "precondition": "User is on the search results page",
        "actors": "User",
        "steps": "1: User enters search criteria for a product 2: User selects a product from the search results 3: User views detailed information about the selected product"
      },
      {
        "name": "Product Recommendations",
        "scenario": "User receives personalized product recommendations based on their previous interactions with the website.",
        "precondition": "User is registered and logged in, has previous interactions with the website",
        "actors": "User, Recommendation Engine",
        "steps": "1: User logs in with their credentials 2: User views the homepage or a dedicated recommendations section 3: Recommendation Engine analyzes user's browsing history 4: User receives personalized product recommendations"
      }
    ],
    "user_story_gpt": "As an online shopper, I want to efficiently compare product prices across multiple retailers so that I can make informed purchasing decisions. I also want to set up alerts for when product prices drop, ensuring I can buy at the best rate. Additionally, I wish to explore detailed product information effortlessly and receive personalized recommendations based on my previous interactions to discover new products of interest.",
    "user_story_llama": "As a user, I want to be able to compare prices for multiple products from different online retailers, so that I can make informed purchasing decisions. I also want to be able to set up price drop alerts for specific products, so that I can be notified when the price drops. Additionally, I want to be able to view detailed information about a product, including its features, reviews, and ratings. Furthermore, as a registered and logged-in user with previous interactions with the website, I want to receive personalized product recommendations based on my browsing history, so that I can discover new products that are relevant to my interests. Overall, I want a seamless and user-friendly experience that allows me to easily find, compare, and purchase products that meet my needs.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Admin Adds Website for Product Integration",
        "scenario": "Admin adds a new website to integrate its products.",
        "precondition": "Admin is authenticated and has appropriate permissions",
        "actors": "Admin",
        "steps": "1: Admin logs in with admin credentials 2: Admin navigates to the admin dashboard 3: Admin selects the option to add a new website for integration 4: Admin provides details of the new website, such as name, URL 5: Admin saves the new website configuration"
      },
      {
        "name": "Collaborator Submits Offers/Events",
        "scenario": "Collaborator submits offers or events to be featured as top offers or events.",
        "precondition": "Collaborator is registered and authenticated, Admin is authenticated",
        "actors": "Collaborator, Admin",
        "steps": "1: Collaborator logs in with their credentials 2: Collaborator navigates to the collaboration dashboard 3: Collaborator submits details of the offer or event, including product details, discount information, and validity period 4: Admin reviews and approves the submitted offer or event 5: Approved offer or event is displayed as a top offer or event on the Website"
      },
      {
        "name": "customer signup",
        "scenario": "customer creates account in the website",
        "precondition": "User cannot have any account using same email",
        "actors": "Customer,System",
        "steps": "1: Customer fills necessary information 2: Customer submit the necessary information 3: System provides verifying link 4: Customer verifies himself using the link"
      },
      {
        "name": "customer login",
        "scenario": "customer log in to the account in the website",
        "precondition": "User must have an account",
        "actors": "Customer,System",
        "steps": "1: Customer fills necessary information 2: Customer submit the necessary information 3: System approves"
      },
      {
        "name": "Customer cart",
        "scenario": "Customer adding food to cart and viewing cart",
        "precondition": "Customer must be logged in",
        "actors": "Customer",
        "steps": "1: Customer select the quantity of the food 2: Customer add it to the cart"
      },
      {
        "name": "Place Order",
        "scenario": "Customer place the order from cart",
        "precondition": "Customer must be logged in and cart must not be empty",
        "actors": "Customer",
        "steps": "1: Customer finalize the order 2: Customer gives necessary info like location, phone number 3: System show the total price 4: Customer orders the food"
      },
      {
        "name": "Customer Track the Order",
        "scenario": "Customer can track status of the active order and see the prvious order",
        "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.",
        "actors": "Cutomer, Delivery Person,Restaurant",
        "steps": "1: Restaurant approved the order 2: Delivery person update the status 3: Customer view the status"
      },
      {
        "name": "Customer profile update",
        "scenario": "Customer can update his necessary info",
        "precondition": "Customer must be logged in.",
        "actors": "Cutomer,System",
        "steps": "1: Customer fills the field which is to be updated 2: Customer clicks the submit button and update the info 3: System approved the info"
      },
      {
        "name": "Restaurant signup",
        "scenario": "Restaurant can add category",
        "precondition": "User cannot have any account using same email",
        "actors": "Restaurant,System",
        "steps": "1: Restaurant fills necessary information 2: Restaurant submit the necessary information 3: System provides verifying link 4: Restaurant verifies using the link"
      },
      {
        "name": "Restaurant login",
        "scenario": "Restaurant log in to the account in the website",
        "precondition": "User must have an account",
        "actors": "Restaurant,System",
        "steps": "1: Restaurant fills necessary information 2: Restaurant submit the necessary information 3: System approves"
      },
      {
        "name": "Restaurant Adding Food",
        "scenario": "Restaurant can add food under category",
        "precondition": "Restaurant must be logged in.",
        "actors": "Restaurant",
        "steps": "1: Restaurant add category if necessary 2: Restaurant fills information about food 3: Restaurant add the food by clicking submit button"
      },
      {
        "name": "Restaurant Adding Category",
        "scenario": "Restaurant can add category",
        "precondition": "Restaurant must be logged in and category must not exist",
        "actors": "Restaurant",
        "steps": "1: Restaurant fills information about category 2: Restaurant add the category by clicking submit button"
      },
      {
        "name": "Restaurant Order",
        "scenario": "Restaurant,Customer ",
        "precondition": "Customer, Restaurant and Delivery Person must be logged in. Delivery person must bes assigned that order.",
        "actors": "Cutomer, Delivery Person,Restaurant",
        "steps": "1: Customer order the foods 2: Restaurant making the food 3: Restaurant completed the order"
      },
      {
        "name": "Restaurant Updating Food",
        "scenario": "Restaurant can update food",
        "precondition": "Restaurant must be logged in and food must be exist",
        "actors": "Restaurant",
        "steps": "1: Restaurant fills ne information about food 2: Restaurant add the food by clicking submit button"
      },
      {
        "name": "Restaurants Collaborating",
        "scenario": "Restaurant can collaborate with each other if they want",
        "precondition": "Restaurants must be logged in",
        "actors": "Restaurant",
        "steps": "1: One restaurant send request for collaboration 2: Other restaurant accept the request"
      },
      {
        "name": "Home Kitchen or Cloud Kitchen",
        "scenario": "Restaurant owner or sole business owner can open a home kitchen",
        "precondition": "Restaurants must be logged in.Home kitchen cannot should not exist",
        "actors": "Restaurant, System",
        "steps": "1: One restaurant or business owner send request for becoming a home kitchen 2: Systems accept the request"
      },
      {
        "name": "Restaurant profile update",
        "scenario": "Restaurant can update necessary info",
        "precondition": "Customer must be logged in.",
        "actors": "Restaurant,System",
        "steps": "1: Customer fills the field which is to be updated 2: Customer clicks the submit button and update the info 3: System approved the info"
      },
      {
        "name": "Delivery Person signup",
        "scenario": "Delivery Person creates account in the website",
        "precondition": "User cannot have any account using same email",
        "actors": "Delivery Person,System",
        "steps": "1: Delivery Person fills necessary information 2: Delivery Person submit the necessary information 3: System provides verifying link 4: Delivery Person verifies himself using the link"
      },
      {
        "name": "Delivery Person login",
        "scenario": "Delivery Person log in to the account in the website",
        "precondition": "User must have an account",
        "actors": "Delivery Person,System",
        "steps": "1: Delivery Person fills necessary information 2: Delivery Person submit the necessary information 3: System approves"
      },
      {
        "name": "Delivery Person Order",
        "scenario": "Delivery Person accept an order if he is free.He can take multiple order too if the locations are near but not more than three",
        "precondition": "User must have an account",
        "actors": "Delivery Person,System",
        "steps": "1: System finds a delivery person and assigned the order 2: Delivery Person accept the request 3: System approves"
      },
      {
        "name": "Delivery Person Update Orders",
        "scenario": "Delivery Person update the status of the orders",
        "precondition": "User must have an account",
        "actors": "Delivery Person, Customer",
        "steps": "1: Delivery Person upddate the status 2: Customer see the status"
      },
      {
        "name": "Delivery Person profile update",
        "scenario": "Delivery Person can update necessary info",
        "precondition": "Delivery Person must be logged in.",
        "actors": "Delivery Person,System",
        "steps": "1: Delivery Person fills the field which is to be updated 2: Delivery Person clicks the submit button and update the info 3: System approved the info"
      }
    ],
    "user_story_gpt": "As a user of an online food-ordering platform, various profiles including Admin, Collaborators, Customers, Restaurants, and Delivery Personnel each have distinct roles that facilitate seamless service integration and delivery. Admins securely add new websites for better product integration, enhancing user experience by displaying submitted offers or events. Customers create accounts, update profiles, add food items to their carts, and finalize orders with ease, tracking their orders for real-time updates. Restaurants manage their offerings by signing up, logging in, adding, and updating food categories, and accepting orders, while also having opportunities to collaborate or open home kitchens. Delivery Personnel ensure timely order completion by managing their tasks through account sign-ups, order acceptances, and status updates. Together, these interactions provide a comprehensive and streamlined service for accessing and delivering gastronomic experiences.\"}",
    "user_story_llama": "As an admin, I want to integrate websites for product integration, and have collaborators submit offers and events to be featured, so that customers can sign up and log in to the website, add food to their cart, place orders, and track the status of their orders. Additionally, I want restaurants to be able to sign up, log in, add food and categories, update their food and profile information, and collaborate with each other, as well as have the option to open a home kitchen or cloud kitchen. Furthermore, I want delivery persons to be able to sign up, log in, accept and update orders, and update their profile information, so that the system can efficiently manage the entire food delivery process, from customer ordering to delivery, while ensuring that all users have a seamless and user-friendly experience.",
    "length": 22
  },
  {
    "usecases": [
      {
        "name": "Messenger",
        "scenario": "Different user can send and receive messages with some restriction",
        "precondition": "User must have an account",
        "actors": "Customer, Restaurant, Delivery Person",
        "steps": "1: one user send nessage to another user 2: another user reply to the meesage"
      },
      {
        "name": "Search Food",
        "scenario": "Customer and Guest can search food.",
        "precondition": "No precondition",
        "actors": "Customer, Guest",
        "steps": "1: User writes the name of food 2: User uses the filter"
      },
      {
        "name": "Search Restaurant",
        "scenario": "Customer and Guest can search Restaurant.",
        "precondition": "No precondition",
        "actors": "Customer, Guest",
        "steps": "1: User writes the name of Restaurant 2: User uses the filter"
      }
    ],
    "user_story_gpt": "As a user of the app, whether I'm a customer, a restaurant owner, or a delivery person, I want the ability to send and receive messages easily once I have an account, so that I can communicate effectively within the platform. Additionally, as both a customer and guest, I want to be able to search for food and restaurants using filters, so that I can find exactly what I am looking for quickly and efficiently.",
    "user_story_llama": "As a customer or guest, I want to be able to search for food and restaurants using filters and keywords, so that I can easily find what I'm looking for. Additionally, I want to be able to send and receive messages with other users, such as restaurants and delivery persons, but only after I've created an account, in order to facilitate communication and ordering, with the ability to reply to messages and have a conversation, thereby enhancing my overall experience.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Conference Creation",
        "scenario": "Conference Chair creates a conference.",
        "precondition": "User is registered as conference Chair in the website",
        "actors": "Conference Chair",
        "steps": "1: Conference Chair enters conference title 2: Conference Chair enters conference description 3: Conference Chair enters conference webpage 4: Conference Chair enters conference venue 5: Conference Chair selects conference start date, end date 6: Conference Chair selects submission deadline 7: Conference Chair enters research track 8: Conference Chair creates the conference"
      },
      {
        "name": "Paper Submission",
        "scenario": "Users submit a paper in a conference.",
        "precondition": "User is registered in the website",
        "actors": "Users",
        "steps": "1: User enters paper title 2: User selects co-authors 3: User selects reaseach track 4: User enters abstract 5: User uploads pdf of the paper 6: User submits the paper"
      },
      {
        "name": "Paper Review",
        "scenario": "Reviewer reviews a paper.",
        "precondition": "User is assigned as a reviewer",
        "actors": "Reviewer",
        "steps": "1: Reviewer enters paper rating 2: Reviewer enters paper review 3: Reviewer submits the paper review"
      },
      {
        "name": "Reviewer assignment",
        "scenario": "Conference Chair assign reviewrs in papers of a conference while satisfying constraints",
        "precondition": "User is registered as conference chair in the website",
        "actors": "Conference Chair",
        "steps": "1: Conference Chair enters conference page 2: Conference Chair selects reviewer from suggestions and request for review"
      },
      {
        "name": "View Published Papers",
        "scenario": "Verify that a user can successfully view his/her own published papers.",
        "precondition": "User is registered in the website",
        "actors": "Users",
        "steps": "1: User enters his profile 2: User goes on published papers"
      }
    ],
    "user_story_gpt": "As a Conference Chair, I want to efficiently create and manage a conference by entering all necessary details such as title, description, webpage, venue, dates, and research tracks. This process sets the foundation for a seamless paper submission experience for users, who can submit their papers with titles, co-authors, and abstracts. Once papers are submitted, I will assign qualified reviewers to evaluate and provide feedback. This ensures that the paper review process is thorough and organized. Additionally, users can view their own published papers within the platform to track their contributions and completed research. These functionalities collectively enhance the academic conference experience, making it more streamlined and collaborative for everyone involved.\" \n}",
    "user_story_llama": "As a conference chair, I want to create a conference by providing its title, description, webpage, venue, start and end dates, submission deadline, and research track, so that users can submit papers to it. Additionally, as a user, I want to be able to submit papers to the conference by entering the paper title, selecting co-authors, choosing a research track, entering an abstract, and uploading the paper, so that it can be reviewed. Furthermore, as a reviewer, I want to be able to review assigned papers by entering a rating and review, so that the conference chair can make informed decisions. The conference chair should also be able to assign reviewers to papers while satisfying constraints, and suggest potential reviewers. Lastly, as a user, I want to be able to view my own published papers by accessing my profile, so that I can keep track of my work.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Search and Book",
        "scenario": "Guest searches with appropriate filters, selects a property, adds a payment method, adds meals if meal option is on for that property, negotiates (optional), makes payment, and completes the booking.",
        "precondition": "For booking, Guest is registered in the system",
        "actors": "Guest, Host",
        "steps": "1: Guest performs a search with appropriate filters 2: Guest selects a property from the search results 3: Guest adds a payment method 4: If meal option is on for the property, guest adds meals (optional) 5: Guest negotiates with the host (optional) 6: Guest makes payment 7: Booking is confirmed upon successful payment"
      },
      {
        "name": "Negotiation",
        "scenario": "Guest starts a negotiation after selecting a property. Host may agree to the guest's proposal, propose another fare, or stick to the actual price. Guest may accept or reject the host's response.",
        "precondition": "Guest and Host are registered in the system, Property is available for booking and selected by Guest",
        "actors": "Guest, Host",
        "steps": "1: Guest selects a property for booking 2: Guest initiates negotiation by proposing a fare 3: Host receives negotiation proposal 4: Host may agree, propose another fare, or stick to the actual price 5: Guest accepts or rejects the host's response"
      },
      {
        "name": "Meal Options",
        "scenario": "Guest, after selecting a property, chooses meals for breakfast, lunch, and/or dinner. The selection can be empty. After selection, the system calculates the total meal price and adds it to the total amount to pay.",
        "precondition": "Guest is registered in the system, Property is selected for booking",
        "actors": "Guest, System",
        "steps": "1: Guest selects a property for booking 2: Guest chooses meals for breakfast, lunch, and/or dinner (optional) 3: System calculates the total meal price 4: System adds the total meal price to the total amount to pay"
      },
      {
        "name": "Paying Guest Booking",
        "scenario": "Guest searches for and selects a property that allows paying guest. If auto book is on for that property, the guest makes a payment, and the booking is confirmed. If auto book is off, the host can accept or reject the booking. If accepted, the payment is done, and the booking is confirmed.",
        "precondition": "Guest and Host are registered in the system, Property allows paying guest",
        "actors": "Guest, Host",
        "steps": "1: Guest searches for properties allowing paying guest 2: Guest selects a property 3: If auto book is on, the guest makes payment and booking is confirmed 4: If auto book is off, the host can accept or reject the booking 5: If accepted, payment is done, and the booking is confirmed"
      },
      {
        "name": "Payment",
        "scenario": "Guest initiates payment for a booking only when the booking is in the 'Ready for Payment' state.",
        "precondition": "Guest is registered in the system, Booking is in 'Ready for Payment' state",
        "actors": "Guest",
        "steps": "1: Guest selects a booking in 'Ready for Payment' state 2: Guest initiates the payment process 3: System processes the payment 4: Booking is confirmed upon successful payment"
      },
      {
        "name": "Property Registration",
        "scenario": "Host registers a property by providing photos and other mandatory fields. If the host turns on the meal option, they have to add meals for breakfast with names, photos, and prices. If the host allows paying guests, they have to add a description of the meal and the price.",
        "precondition": "Host is registered in the system",
        "actors": "Host",
        "steps": "1: Host initiates property registration 2: Host provides mandatory property details such as name, location, type, and photos 3: If meal option is turned on, host adds meals for breakfast with names, photos, and prices 4: If allowing paying guests, host adds a description of the meal and the price 5: Host completes the property registration"
      }
    ],
    "user_story_gpt": "As a guest on the booking platform, I wish to efficiently search for properties and complete my booking with ease. By utilizing available filters, I can find the perfect stay and proceed to add a payment method. If meal options are available, I can optionally select my meals for added convenience. The platform should allow me to negotiate with the host to agree on a fair price or select the best deal for my stay. For properties with an auto book feature, I expect a seamless payment process to confirm my reservation instantly. For those without, the host should have the flexibility to accept or reject my booking. On the other hand, as a host, I want to register my property by providing essential details, including the option to offer meals or allow paying guests, ensuring that my listing attracts the right audience. Ultimately, the process should lead to a confirmed, hassle-free booking experience for both guests and hosts, with secure payment and clear communication throughout.\"",
    "user_story_llama": "As a guest, I want to be able to search and book a property with ease, using filters to find the perfect fit, and then securely make a payment to confirm my booking, with the option to negotiate the price with the host if needed. Additionally, I want to be able to choose meal options for my stay, with the system automatically calculating the total meal price and adding it to my total amount to pay. I also want the flexibility to book properties that allow paying guests, with the option for auto-book or host approval. To facilitate this, I want the host to be able to register their property, providing all necessary details, including photos and meal options if applicable, so that I can make an informed decision about my booking. Furthermore, I want the system to handle payments efficiently, allowing me to initiate payment only when my booking is in the 'Ready for Payment' state, and confirming my booking upon successful payment. Overall, my goal is to have a seamless and user-friendly booking experience, with all the necessary features and functionality to make my stay enjoyable and stress-free.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Student Registration",
        "scenario": "Student is registered in the oncampus system",
        "precondition": "Student is enrolled in the university and admin is logged in",
        "actors": "Admin",
        "steps": "1: Admin enters student information 2: Admin submits the registration"
      },
      {
        "name": "Club Creation",
        "scenario": "A club is created in the oncampus system.",
        "precondition": "There is not a club with the same name already and Admin is logged in",
        "actors": "Admin",
        "steps": "1: Admin enters club information 2: Admin submits the club information"
      },
      {
        "name": "Create a post",
        "scenario": "User creates a post",
        "precondition": "User is registered and logged in",
        "actors": "User",
        "steps": "1: User enters post information 2: User submits post"
      },
      {
        "name": "View a Single Post",
        "scenario": "User attempts to view a single post",
        "precondition": "User is logged in and user has access to the post",
        "actors": "User",
        "steps": "1: User Clicks on a post"
      },
      {
        "name": "View All General Post",
        "scenario": "User attempts to view all general posts",
        "precondition": "User is logged in and user has access to the general posts",
        "actors": "User",
        "steps": "1: User Clicks on the General Posts Tab"
      },
      {
        "name": "Create an Event",
        "scenario": "User creates an event",
        "precondition": "User is registered and logged in",
        "actors": "User",
        "steps": "1: User enters event information 2: User submits the event"
      },
      {
        "name": "View a Single Event",
        "scenario": "User attempts to view a single Event",
        "precondition": "User is logged in and user has access to the Event",
        "actors": "User",
        "steps": "1: User Clicks on a event"
      },
      {
        "name": "View All Events",
        "scenario": "User attempts to view all Events",
        "precondition": "User is logged in and user has access to the Events",
        "actors": "User",
        "steps": "1: User Clicks on the All Events Tab"
      },
      {
        "name": "View Saved Events",
        "scenario": "User attempts to view his saved Events",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User Clicks on My Saved Events Tab"
      },
      {
        "name": "View user profile",
        "scenario": "User attempts to view a user profile",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User Clicks on a user profile"
      }
    ],
    "user_story_gpt": "As a university admin, I want to efficiently register students and create clubs within the on-campus system to ensure streamlined management of student details and club activities. Additionally, as a user, I want the ability to create posts and events, view single or all posts and events, and access my saved events to stay engaged and informed. I also want to view user profiles to connect with peers and stay updated on news and activities available on campus.",
    "user_story_llama": "As an admin, I want to register students in the on-campus system and create clubs, so that users can interact with the system. As a user, I want to create posts and events, view single posts and events, and have access to all general posts and events, as well as my saved events, so that I can stay updated and engaged with the on-campus community. Additionally, I want to be able to view user profiles, including my own, so that I can connect with others and manage my account, all while being logged in and having the necessary access permissions, thereby facilitating a seamless and interactive on-campus experience.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Flight Route Selection",
        "scenario": "Users select their endpoint airports and traveling date, and get to choose from avaiable airlines well suited for their travel",
        "precondition": "User is logged in to the flight booking platform",
        "actors": "Users",
        "steps": "1: Users select their source airport, destination airport, travelling date as well as the number of seats and the class they are booking tickets for  2: System responds with a list of airlines avaiable as per their Selection"
      },
      {
        "name": "Airline Selection",
        "scenario": "Users select the airlines they prefer from the availability list",
        "precondition": "Users have selected their endpoint airports, travel date, number of seats to be booked and a specific class",
        "actors": "Users",
        "steps": "1: Users select their prefered airline from the list that pops up on selecting travel details 2: Users can sort the list by categories like, cheapest flight, quickest flight, or by their takeoff time 3: Users can also filter the list by categories like, cheapest flight or quickest flight 4: System responds with a grid shaped airline layout for that flight"
      },
      {
        "name": "Seat Selection",
        "scenario": "Users select the seat they prefer from the availability list",
        "precondition": "Users have selected their choice of airline prefered and landed on the flight layout",
        "actors": "Users",
        "steps": "1: Users select their prefered seat from the grid that pops up on selecting the airline 2: Users can select exactly that many seats that they claimed to have required 3: System redirects to payment page upon seat request submission"
      },
      {
        "name": "Payment",
        "scenario": "Users pay for the flight they are going to board",
        "precondition": "Users have booked seats in the airlines they prefered",
        "actors": "Users",
        "steps": "1: Users book their prefered seat from the layout and system redirects to payment page 2: System calculates the amount that has to be paid for the seat 3: Users make the payment 4: System updates the payment status of the user"
      },
      {
        "name": "Flight Review Submission System",
        "scenario": "Users can submit reviews for their flight experiences ",
        "precondition": "Users have booked and completed a flight.",
        "actors": "Users",
        "steps": "1: Users submit reviews for their flights, providing ratings and optional comments. 2: System responds with a valid response"
      },
      {
        "name": "Flight Review Viewing System",
        "scenario": "Users can view reviews for specific flights ",
        "precondition": "User is logged into the system",
        "actors": "Users",
        "steps": "1: Users search reviews for specific flight 2: System responds with a list fo available reviews"
      },
      {
        "name": "Flight Review Editing System",
        "scenario": "Users can edit reviews for specific flights ",
        "precondition": "Users have to have a review of that specific flight",
        "actors": "Users",
        "steps": "1: Users edit reviews for specific flights 2: System responds with a valid response"
      },
      {
        "name": "Flight Review Deletion",
        "scenario": "Users can delete reviews for specific flights ",
        "precondition": "Users have to have a review of that specific flight",
        "actors": "Users",
        "steps": "1: Users delete reviews for specific flights 2: System responds with a valid response"
      }
    ],
    "user_story_gpt": "As a traveler, I want to effortlessly plan my flights starting with selecting my departure and destination airports, traveling date, and preferred class to view available airlines. I want the option to sort and filter flights to find the best option based on cost, duration, and schedule. Once I've chosen my airline, I wish to select my desired seats seamlessly and proceed to make payments efficiently. After completing my journey, I want the ability to share my flight experience through reviews and manage those reviews, knowing I can edit or delete them as needed, and access other travelers' reviews to make informed decisions for future travels.",
    "user_story_llama": "As a user, I want to be able to select my flight route by choosing my source and destination airports, traveling date, and other preferences, so that I can get a list of available airlines that suit my travel needs. Additionally, I want to be able to select my preferred airline from the list, sort and filter the options based on factors like price and duration, and view the seat layout to choose my preferred seat. After selecting my seat, I want to be able to proceed to payment and complete the booking process. Furthermore, after completing my flight, I want to be able to submit a review of my experience, view reviews from other users for specific flights, edit my own reviews if needed, and delete them if I change my mind, so that I can make informed decisions about my future flights and share my opinions with others.",
    "length": 8
  },
  {
    "usecases": [
      {
        "name": "Profile Creation",
        "scenario": "User creates an account on several social media marketing platform.",
        "precondition": "User is not already registered on the platform and has a valid email/phone number.",
        "actors": "User, Entrepreneur",
        "steps": "1: User provides necessary information for account creation on the platform 2: User verifies email/phone number 3: User sets up account details (username, password, etc.)"
      },
      {
        "name": "User Account Creation",
        "scenario": "A consumer creates an account on the platform using a valid email and phone number.",
        "precondition": "['The platform is accessible.', 'The consumer is on the account creation page.']",
        "actors": "['Consumer']",
        "steps": "1: Consumer enters valid email address and phone number. 2: Consumer sets a secure password. 3: Consumer agrees to terms and conditions. 4: Consumer submits the registration form."
      },
      {
        "name": "Content Creation and Posting",
        "scenario": "User creates content and posts it on selected social media platforms.",
        "precondition": "User is logged in and has active social media accounts",
        "actors": "User",
        "steps": "1: User creates promotional content (text, image, video, etc.) 2: User specifies the product/service to be promoted and target audience 3: User schedules the content for posting (optional) 4: User selects social media platforms for posting 5: User posts the content"
      },
      {
        "name": "Content Analytics",
        "scenario": "User views analytics for their posted content on social media platforms.",
        "precondition": "User is logged in and has posted content on selected social media platforms",
        "actors": "User",
        "steps": "1: User navigates to the analytics section 2: User selects a specific content or time range 3: User views analytics data for engagement, reach, and interactions"
      },
      {
        "name": "Profile Analytics",
        "scenario": "User views analytics for their social media profiles connected to the platform.",
        "precondition": "User is logged in and has connected social media accounts",
        "actors": "User",
        "steps": "1: User navigates to the profile analytics section 2: User selects a specific social media profile 3: User views analytics data for followers, engagement, and growth"
      },
      {
        "name": "Community Communication",
        "scenario": "Users within the community (sellers and buyers of similar products) communicate and share information.",
        "precondition": "Users are logged in and have joined the relevant community",
        "actors": "Seller, Buyer",
        "steps": "1: User navigates to the community section 2: User selects a specific community related to their product niche 3: User posts a message, question, or information within the community 4: Other users within the community can view and respond to the post"
      }
    ],
    "user_story_gpt": "As a user on a social media marketing platform, I want to create an account using my email or phone number so that I can access various features like content creation and posting on multiple platforms. Once my account is set up and I'm logged in, I can create promotional content and post it to reach my target audience. I also want to view analytics to understand the engagement and reach of my posts, as well as analytics for my social media profiles to track follower growth and engagement. Additionally, I want to communicate with other users in the community to share and receive information relevant to my product niche, enhancing my networking and marketing strategies.",
    "user_story_llama": "As a user, I want to create an account on the social media marketing platform so that I can manage my online presence and promote my products or services. I want to be able to create content, such as text, images, and videos, and post it on selected social media platforms, targeting specific audiences and scheduling posts as needed. Additionally, I want to view analytics for my posted content and social media profiles, including engagement, reach, and interactions, to understand the effectiveness of my marketing efforts. Furthermore, I want to be able to communicate and share information with other users within relevant communities, related to my product niche, to build relationships and stay informed. Overall, I want the platform to provide a seamless and integrated experience for creating, posting, analyzing, and engaging with my online content and community, making it easier for me to achieve my marketing goals.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Project Showcase",
        "scenario": "Users can showcase their created projects on our platform through this feature.",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters basic project details 2: User selects the appropriate tags for the post 3: User decides whether he/she wants to make the post public/private 4: User decides whether he/she wants to make the post it on marketplace 5: User adds different types of blocks to the post with necessary details"
      },
      {
        "name": "Note Taker",
        "scenario": "Users can create,update and share their notes on our platform through this feature",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters basic notes details 2: User selects the appropriate tags for the note 3: User decides whether he/she wants to make the post public/private 4: User writes note in markdown"
      },
      {
        "name": "Chatbot Setup",
        "scenario": "Users can choose different models that they want to chat with",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters chatbot 2: User adds documents 3: User creates prompts to chat"
      },
      {
        "name": "Profile Details",
        "scenario": "Users can set and edit their profile details which will be propagated to their portfolios",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters email and password 2: User enters full/partial details 3: User decides whether he/she wants to edit profile details 4: User edits details"
      },
      {
        "name": "Summarizer inference",
        "scenario": "Users prompt the plugin with the content they want to summarize",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters summarizer 2: User creates prompt to summarize"
      },
      {
        "name": "Paraphraser inference",
        "scenario": "Users prompt the plugin with the content they want to paraphrase",
        "precondition": "User has created his/her profile on the platform",
        "actors": "User",
        "steps": "1: User enters paraphraser 2: User creates prompt to paraphrase"
      }
    ],
    "user_story_gpt": "As a user on the platform, I want to showcase my projects by entering details, selecting tags, and deciding visibility options, allowing me to reach a wider audience or keep my work private as desired. I also want to efficiently create and update notes using markdown, sharing them publicly or keeping them private based on my needs. To enhance my experience, I would like to set up a chatbot with my preferred models and prompts, interacting in a personalized way. Additionally, I need the capability to manage my profile, ensuring my details are accurately reflected in my portfolio. Lastly, I seek tools to summarize or paraphrase content, using prompts to generate concise or rephrased versions of texts, enhancing my productivity and creativity on the platform.\"}",
    "user_story_llama": "As a user, I want to utilize the platform's features so that I can showcase my created projects, create and share notes, set up and interact with chatbots, manage my profile details, and leverage AI-powered tools such as summarizer and paraphraser. Specifically, I want to be able to enter project details and share them publicly or privately, create and update notes with tags and markdown formatting, choose from various chatbot models and engage with them using prompts and documents, edit my profile details and have them reflected in my portfolio, and use the summarizer and paraphraser tools to generate concise and rewritten content based on my input prompts, all while having a seamless and intuitive experience on the platform, and I can only do this if I have first created my profile on the platform.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Place Purchase Order Request",
        "scenario": "Distributor places a purchase order request to the warehouse via the central system",
        "precondition": "Distributor has enough balance to cover the purchase order value",
        "actors": "['Warehouse', 'Distributor', 'Central System']",
        "steps": "1: {'step': '(a) Distributor selects his required products for purchase order', 'action': 'Distributor selects products for the purchase order', 'expected_result': \"Distributor's selected products are ready for order placement\"} 2: {'step': \"(b) After confirmation from Distributor's end, purchase order is sent to the central system\", 'action': 'Distributor confirms the selected products, and the purchase order is forwarded to the central system', 'expected_result': 'Purchase order is successfully transmitted to the central system'} 3: {'step': '(c) If requested products are available in the warehouse, confirmation is sent to the corresponding warehouse', 'action': 'Central system checks product availability and sends confirmation to the warehouse if products are available', 'expected_result': 'Warehouse receives confirmation and proceeds to check the load fill condition'} 4: {'step': '(d) Warehouse checks whether the goods in the purchase order satisfy the load fill condition. If the condition is satisfied, the purchase order is approved. If the condition is not satisfied, the purchase order is put on hold for combined orders', 'action': 'Warehouse evaluates load fill condition for the goods in the purchase order', 'expected_result': 'Purchase order is approved if load fill condition is satisfied; otherwise, it is put on hold for combined orders'}"
      },
      {
        "name": "Purchase order to shipment",
        "scenario": "Warehouse confirms one or multiple incoming purchase orders, and the central system converts them to a shipment.",
        "precondition": "There are one or more confirmed or pending purchase orders in the central system.",
        "actors": "['Warehouse', 'Central System']",
        "steps": "1: {'step': '(a) Confirmation or hold status of purchase order is forwarded to central system', 'action': 'Warehouse forwards confirmation or hold status of the purchase order to the central system', 'expected_result': 'Central system receives and processes the confirmation or hold status'} 2: {'step': '(b) Central system checks load fill of pending purchase orders whether they can be combined and processes confirmed purchase orders to create a shipment', 'action': 'Central system checks load fill of pending purchase orders, combines eligible orders, and processes confirmed purchase orders to create a shipment', 'expected_result': 'Shipment is created with the combined purchase orders'} 3: {'step': '(c) Shipments are forwarded to corresponding transport agencies for vehicle confirmation', 'action': 'Shipment is forwarded to corresponding transport agencies for vehicle confirmation', 'expected_result': 'Transport agencies confirm the availability of vehicles for the shipments'}"
      },
      {
        "name": "Load a shipment to vehicle",
        "scenario": "List of products in a shipment is provided to the person in charge. After successful load of all products in a shipment, transport acknowledges that shipment is en route.",
        "precondition": "A valid shipment with products in stock for warehouse",
        "actors": "['Warehouse', 'Transport']",
        "steps": "1: {'step': '(a) Warehouse in-charge receives a list of products to be loaded', 'action': 'receive_list_of_products', 'actor': 'Warehouse'} 2: {'step': '(b) Product status is updated one by one while loading a vehicle', 'action': 'update_product_status', 'actor': 'Warehouse'} 3: {'step': '(c) After loading of shipment, transport acknowledges that he has received the products without any issue', 'action': 'acknowledge_shipment_en_route', 'actor': 'Transport'}"
      },
      {
        "name": "Choose the best route for combined town",
        "scenario": "Central system has multiple pending purchase orders with tonnage less than loadfill quantity. It has to combine multiple orders to save transport cost.",
        "precondition": "Purchase order contains weight less than loadfill",
        "actors": "['Central system']",
        "steps": "1: {'step': '(a) Central system lists the destination towns and checks which two towns can be combined', 'action': 'list_destination_towns', 'actor': 'Central system'} 2: {'step': '(b) For each possible combination, it checks which pair incurs less amount of transportation bill', 'action': 'check_best_combination', 'actor': 'Central system'}"
      }
    ],
    "user_story_gpt": "As a distributor, I want to place purchase orders via the central system, ensuring that my selected products are ready for order placement. Once confirmed, the order should be transmitted to the warehouse if the products are available. The warehouse then checks if the order meets the load fill condition, approving or holding it for combined orders if necessary. Upon confirmation, I want the central system to create shipments efficiently, combining eligible orders to optimize transportation costs. Warehouses should then load shipments onto vehicles, updating product statuses. Additionally, I seek the most cost-effective routes for shipments with orders under loadfill capacity, combining destinations to minimize transport expenses.",
    "user_story_llama": "As a distributor, I want to place a purchase order request to the warehouse via the central system, so that I can easily manage my orders and ensure timely delivery. The system should check if I have enough balance to cover the purchase order value and confirm the order placement. Once the order is confirmed, the central system should check the product availability in the warehouse and send a confirmation if the products are available. The warehouse should then evaluate the load fill condition for the goods in the purchase order and approve or put it on hold for combined orders. After the purchase order is approved, the central system should convert it to a shipment, combining multiple orders if possible to save transport costs, and forward the shipment to the corresponding transport agencies for vehicle confirmation. The warehouse in-charge should receive a list of products to be loaded, update the product status while loading, and transport should acknowledge that the shipment is en route. The central system should also be able to choose the best route for combined towns to minimize transportation costs, by listing destination towns, checking possible combinations, and selecting the pair with the least transportation bill. This will enable me to track my orders, receive timely deliveries, and reduce transportation costs.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Generate sales report",
        "scenario": "Sales report can be generated based on various attributes like sales volume, revenue generated by brand or category",
        "precondition": "Distributor has regularly updated its sales quantity and product stock",
        "actors": "['Central System', 'Distributor']",
        "steps": "1: {'step': '(a) Central system requests sales data from distributor', 'action': 'request_sales_data', 'actor': 'Central System'} 2: {'step': '(b) Distributor provides data to generate report', 'action': 'provide_sales_data', 'actor': 'Distributor'} 3: {'step': '(c) Central system generates report according to his preference', 'action': 'generate_report', 'actor': 'Central System'}"
      }
    ],
    "user_story_gpt": "As a distributor, I want the central system to generate sales reports based on various attributes such as sales volume and revenue by brand or category. This requires regularly updating sales quantity and product stock to ensure accurate report generation. The system should request the necessary sales data, and upon receiving it, create a detailed report according to specific preferences.",
    "user_story_llama": "As a central system, I want to generate sales reports based on various attributes like sales volume and revenue generated by brand or category, so that I can have a comprehensive overview of sales performance, given that the distributor has regularly updated its sales quantity and product stock, and the system can request and receive sales data from the distributor, and then generate the report according to my preference.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Pet Adoption Process",
        "scenario": "A user browses through available pets for adoption, selects a pet, and submits an adoption application. The system reviews the application and approves or rejects it based on predefined criteria.",
        "precondition": "The user is registered and logged into the system. There are pets available for adoption.",
        "actors": "Adopter (User), System, PetOwner",
        "steps": "1: User browses available pets. 2: User selects a pet and views detailed information. 3: User submits an adoption application for the pet. 4: System validates the application. 5: PetOwner reviews and approves or rejects the application."
      },
      {
        "name": "Donation Process",
        "scenario": "A user decides to donate to a cause or a specific pet's care. The user enters donation details and submits the donation. The system confirms the donation and updates the donation status.",
        "precondition": "The user is registered and logged into the system.",
        "actors": "Donor (User), System",
        "steps": "1: User selects a donation cause or a specific pet for donation. 2: User enters donation amount and details. 3: User submits the donation. 4: System processes the donation and updates the donation status."
      },
      {
        "name": "Pet Profile Update",
        "scenario": "A pet owner or an admin updates the profile of a pet, including details like name, breed, health status, and other pertinent information.",
        "precondition": "The pet is registered in the system, and the user has the necessary permissions to update the pet's profile.",
        "actors": "Pet Owner, System",
        "steps": "1: User selects a pet to update. 2: User edits pet details. 3: User submits the updated pet profile. 4: System validates and saves the updated profile."
      },
      {
        "name": "Rescuer Application Process",
        "scenario": "A user applies to become a rescuer at the animal shelter. The system reviews the application and approves or rejects it based on predefined criteria.",
        "precondition": "The user is registered and logged into the system.",
        "actors": "Applicant (User), System, Admin",
        "steps": "1: User fills out the rescuer application form. 2: User submits the application. 3: System validates the application. 4: Admin reviews and approves or rejects the application."
      },
      {
        "name": "Pet Health Record Management",
        "scenario": "A veterinarian updates the health records of pets after check-ups or treatments. The system stores and displays the updated health records.",
        "precondition": "The pet is registered in the system, and the veterinarian is logged in and assigned to the pet.",
        "actors": "Veterinarian, System",
        "steps": "1: Veterinarian selects a pet to update health records. 2: Veterinarian enters the details of the check-up or treatment. 3: Veterinarian submits the updated health records. 4: System stores and confirms the update."
      }
    ],
    "user_story_gpt": "As a user engaged with the pet adoption system, I want to explore available pets, select one for adoption, and submit an application that is evaluated by the system and approved by the pet owner. Additionally, I want the ability to support the care of pets through donations and ensure my transactions are processed smoothly. For those managing pets, the system should allow updates to pet profiles, maintaining accurate and relevant information. Aspiring rescuers should be able to apply easily to join our network, with their applications being reviewed systematically. Finally, veterinarians need a reliable way to update and manage the health records of pets post-treatment, ensuring that all crucial health data is accurately reflected and accessible within the system.",
    "user_story_llama": "As a user of the pet adoption system, I want to be able to browse through available pets for adoption, select a pet, and submit an adoption application, so that the system can review and approve or reject it based on predefined criteria. Additionally, I want to be able to donate to a cause or a specific pet's care, and have the system confirm and update the donation status. I also want pet owners and admins to be able to update pet profiles, including details like name, breed, health status, and other pertinent information. Furthermore, I want users to be able to apply to become rescuers at the animal shelter, with the system reviewing and approving or rejecting the application based on predefined criteria. Lastly, I want veterinarians to be able to update the health records of pets after check-ups or treatments, with the system storing and displaying the updated health records, so that all stakeholders can have access to accurate and up-to-date information about the pets in the system.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "Farmers, SMEs, or Vendors register in Pushti.",
        "precondition": "The individual is a Bangladeshi adult citizen and intends to use Pushti for agricultural business activities.",
        "actors": "Farmers/SMEs/Vendors",
        "steps": "1: New user selects their account type (Farmer, SME, Vendor). 2: If the user is a farmer, they also specify their farmer type. 3: User selects their geographic location including division, district, upazila, and union. 4: User provides personal and contact information including name, phone number, email, and address. 5: User creates a password, confirms it, and sets up their account security. 6: User reviews all provided information and submits the registration form."
      },
      {
        "name": "Loan Application",
        "scenario": "The scenario involves a Farmer or Small and Medium-sized Enterprise (SME) applying for a loan.",
        "precondition": "The Farmer or SME is registered under an Agent.",
        "actors": "Farmer or SME.",
        "steps": "1: The Farmer or SME logs into the system and submits a loan application. 2: The system processes the loan application."
      },
      {
        "name": "Loan Approval Process",
        "scenario": "An agent reviews and makes a decision on loan applications submitted by registered farmers or SMEs.",
        "precondition": "A loan application has been submitted by a farmer or SME who is registered under the agent.",
        "actors": "Agent",
        "steps": "1: Agent accesses the system and reviews the list of pending loan requests. 2: Agent evaluates the loan request considering the applicant's details and the requested amount. 3: Based on the assessment and available budget, the agent either approves or rejects the loan."
      },
      {
        "name": "Buy Request and Approval",
        "scenario": "An agent generates a buy request for products, which is then reviewed and approved or rejected by the farmer or SME.",
        "precondition": "The farmer or SME is registered under the agent and has products available for sale.",
        "actors": "Agent, Farmer/SME",
        "steps": "1: Agent assesses the available products and inputs their details along with the desired quantities. 2: Agent generates and sends a buy request to the farmer or SME. 3: Farmer or SME reviews the buy request and either approves or rejects it."
      },
      {
        "name": "Sell Request and Approval",
        "scenario": "An agent creates a sell request for products, which is then reviewed and either approved or rejected by the vendor or SME.",
        "precondition": "The vendor or SME is registered under the agent and is interested in purchasing products from the agent.",
        "actors": "Agent/Vendor/SME",
        "steps": "1: Agent compiles a list of items available for sale along with their quantities. 2: Agent formally generates a sell request and sends it to the vendor or SME. 3: Vendor or SME reviews the sell request and decides to approve or reject it."
      },
      {
        "name": "New Product Addition Process",
        "scenario": "An administrative user adds a new product to the system's inventory.",
        "precondition": "Admin has the necessary privileges to add new products.",
        "actors": "Admin",
        "steps": "1: Admin logs into the system with appropriate credentials. 2: Admin navigates to the product management section. 3: Admin inputs the details of the new product and submits the information."
      }
    ],
    "user_story_gpt": "As a Bangladeshi agricultural business participant, I want to register on Pushti to access a suite of services designed for Farmers, SMEs, and Vendors. Once registered, I can seamlessly apply for loans, which are processed and reviewed by assigned agents. As a Farmer or SME, I can handle buy and sell requests efficiently, assessing product inquiries and making informed decisions on approvals. As an admin, I'm able to manage the inventory by adding new products, ensuring that our systems offer current and comprehensive options for our users. This holistic process supports my agricultural business needs effectively.",
    "user_story_llama": "As a farmer, SME, or vendor, I want to register in Pushti so that I can utilize its features for my agricultural business activities, including applying for loans, buying and selling products, and managing my inventory. Once registered, I want to be able to apply for loans through the system, which will then be reviewed and approved or rejected by an agent. Additionally, I want to be able to receive and respond to buy and sell requests from agents, allowing me to manage my products and sales efficiently. Furthermore, I want the system to have a mechanism for administrative users to add new products to the inventory, ensuring that the system remains up-to-date and relevant to my business needs. Overall, I want Pushti to provide a comprehensive platform for me to conduct my agricultural business activities, from registration to loan applications, product management, and sales, in a secure and efficient manner.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Buy Plant",
        "scenario": "A user wants to buy a plant from an online plant store.",
        "precondition": "['The user has access to the online plant store.', 'The user is logged into their account.']",
        "actors": "['User', 'Plant Store']",
        "steps": "1: The user navigates through the plant catalog to explore available plants. 2: The user selects a specific plant they wish to purchase. 3: The user adds the selected plant to their shopping cart. 4: The user reviews the contents of their shopping cart, ensuring it includes the desired plant. 5: The user proceeds to the checkout process. 6: The user enters the required shipping information, such as address and contact details. 7: The user selects a preferred payment method (e.g., credit card, bKash, cash on delivery). 8: The user completes the purchase by confirming the order and making the payment. 9: The user receives an order confirmation with details of the purchased plant and the transaction."
      },
      {
        "name": "Add Plant",
        "scenario": "An admin wants to add a new plant to the online plant store.",
        "precondition": "['The admin has access to the admin panel of the online plant store.', 'The admin is logged into their admin account.']",
        "actors": "['Admin', 'Plant Store']",
        "steps": "1: The admin navigates to the plant management section in the admin panel. 2: The admin selects the option to add a new plant. 3: The admin provides details of the new plant, such as name, description, price, and stock quantity. 4: The admin uploads images of the plant for display in the store. 5: The admin specifies the category or tags associated with the plant for better organization. 6: The admin reviews the entered information to ensure accuracy. 7: The admin submits the new plant details for addition to the plant catalog. 8: The admin receives a confirmation message indicating that the plant has been successfully added."
      },
      {
        "name": "Sell Plant",
        "scenario": "A user wants to sell a plant through the online plant store.",
        "precondition": "['The user has an active account on the online plant store.', 'The user is logged into their account.']",
        "actors": "['User', 'Plant Store']",
        "steps": "1: The user navigates to the 'Sell Plant' section in their profile. 2: The user provides details of the plant they want to sell, such as name, description, and price. 3: The user uploads images of the plant for display in the store. 4: The user specifies the category associated with the plant for better organization. 5: The user reviews the entered information to ensure accuracy. 6: The user submits the plant details for listing in the online store. 7: The user receives a confirmation message indicating that the plant has been successfully listed for approval from admin."
      },
      {
        "name": "Approve Plant Selling Request",
        "scenario": "An admin needs to review and approve a user's request to sell a plant on the online plant store.",
        "precondition": "['The admin has access to the admin panel of the online plant store.', 'A user has submitted a request to sell a plant.']",
        "actors": "['Admin', 'Plant Store']",
        "steps": "1: The admin logs into the admin panel. 2: The admin navigates to the 'Pending Requests' section. 3: The admin views details of the pending plant selling request, including plant information and user details. 4: The admin reviews the uploaded images of the plant. 5: The admin evaluates the completeness and accuracy of the information provided by the user. 6: The admin decides whether to approve or reject the plant selling request. 7: If approved, the plant is listed in the online store; if rejected, the user is notified of the decision."
      },
      {
        "name": "Place Bid on a Plant",
        "scenario": "A user wants to participate in a bidding process for a specific plant available on the online plant store.",
        "precondition": "['The user is registered and logged into their account.', 'The online plant store is conducting a bidding event for the specified plant.']",
        "actors": "['User', 'Plant Store']",
        "steps": "1: The user navigates to the 'Bidding Events' section of the online plant store. 2: The user selects the plant for which they want to place a bid. 3: The user views detailed information about the selected plant, including images and current highest bid. 4: The user enters their bid amount in the provided input field. 5: The user submits the bid for review. 6: The system validates the bid amount and ensures it meets the minimum bid increment criteria. 7: If the bid is valid, it is recorded, and the user is notified of the successful bid placement; if not, the user is notified of the error. 8: The user can view their placed bids and the status of each bid in their account."
      }
    ],
    "user_story_gpt": "As an online plant store user, I want to seamlessly interact with the platform to buy, sell, and participate in bidding for plants. I can browse through the rich catalog, select my desired plant, and complete the purchase with a variety of payment methods. If I wish to sell a plant, I can easily list it on the platform, providing all necessary details and images, and await admin approval. To enhance my engagement, I can also join bidding events, placing and managing my bids with ease. Administrators efficiently handle the addition of new plants and the approval of user selling requests, ensuring a robust and dynamic marketplace for plant enthusiasts.",
    "user_story_llama": "As a user of the online plant store, I want to be able to buy plants from the store's catalog, as well as sell my own plants through the platform, so that I can easily find and purchase the plants I need, while also being able to sell my unwanted plants to others. Additionally, I want the store's administrators to be able to efficiently manage the plant catalog, including adding new plants and approving user requests to sell plants, so that the store remains up-to-date and relevant. Furthermore, I want to be able to participate in bidding events for specific plants, so that I can compete with other users to purchase rare or unique plants. Overall, I want the online plant store to provide a seamless and user-friendly experience for both buying and selling plants, with robust management and bidding capabilities, so that I can fully utilize the platform's features and achieve my goals.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Property Search with Selected Criteria",
        "scenario": "Users can search for properties based on various filters such as location, price range, beds and baths, perks.",
        "precondition": "User is logged in",
        "actors": "User, System",
        "steps": "1: The user selects the 'Search' option on the website 2: User inputs the search criteria: location, price range, beds and baths, perks 3: System retrieves the properties from database that match the search criteria 4: System displays the properties to the user"
      },
      {
        "name": "Posting Property for Rent or Sell",
        "scenario": "Users can post their property for rent or sell, providing necessary details, and the verified agents validate and approve the listing.",
        "precondition": "User is logged in",
        "actors": "User, System, Agent",
        "steps": "1: The user selects the 'Sell/Rent' option 2: The user fills in property details (e.g., location, price, for rent/sell, contact information, photos) 3: User submits the property for validation 4: Agent validates the property and approves the listing 5: System displays the property to the users"
      },
      {
        "name": "Post a Blog",
        "scenario": "Users can post blogs about real estate, sharing their experiences, tips, and advice.",
        "precondition": "User is logged in",
        "actors": "User, System",
        "steps": "1: The user selects the 'Create Post' option 2: The user fills in the blog details: title, content, photos 3: User presses the 'Post' button 4: System displays the blog to the users"
      },
      {
        "name": "Messaging System",
        "scenario": "Buyers and sellers or renters and landlords can communicate with each other through the messaging system.",
        "precondition": "User is logged in",
        "actors": "User, System",
        "steps": "1: The user selects the 'Send message' option 2: The user fills in the message details: recipient, subject, content 3: User presses the 'Send' button 4: System delivers the message to the recipient 5: Recipient receives the message and can reply"
      },
      {
        "name": "User Profile Management",
        "scenario": "Users can manage their profiles, update personal information, change password, view their activity history, view wishlist, and saved searches.",
        "precondition": "User is logged in",
        "actors": "User, System",
        "steps": "1: The user selects the 'Profile' option 2: The user can update personal information, change password, view activity history, wishlist 3: User presses the 'Save' button 4: System updates the user profile"
      }
    ],
    "user_story_gpt": "As a user, I want to seamlessly explore different functionalities on the real estate platform to optimize my experience. I want to search for properties using specific criteria such as location, price range, and amenities, and immediately view matching results. Additionally, I desire the ability to list my property for rent or sale, ensuring it is validated by agents for authenticity before going live. Sharing my insights through blog posts should be easy and engaging, allowing me to provide valuable tips to the community. I also want a reliable messaging system to communicate efficiently with buyers or sellers. Lastly, managing my profile should be straightforward, enabling me to update personal details, maintain a wishlist, and track activity effortlessly. These features collectively enhance my interactions and satisfaction while using the platform.",
    "user_story_llama": "As a user, I want to be able to search for properties based on various filters such as location, price range, beds and baths, and perks, so that I can find my ideal property. I also want to be able to post my own property for rent or sell, providing necessary details, and have verified agents validate and approve the listing. Additionally, I want to be able to share my experiences, tips, and advice about real estate by posting blogs. Furthermore, I want to be able to communicate with other users, such as buyers, sellers, renters, and landlords, through a messaging system. Lastly, I want to be able to manage my user profile, update my personal information, change my password, view my activity history, and keep track of my wishlist and saved searches, so that I can have control over my account and easily access my favorite properties.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Recipe Upload",
        "scenario": "Registered user can update the recipe",
        "precondition": "The user must be registered",
        "actors": "User",
        "steps": "1: User updates the form for the recipe update 2: User submits the recipe form 3: The recipe can be seen now from my_recipe section"
      },
      {
        "name": "Upload Blog",
        "scenario": "Registered users want to upload a blog",
        "precondition": "The user is registered and logged into the platform.",
        "actors": "User",
        "steps": "1: User selects 'Upload Blog' from the profile menu. 2: User creates and drafts the content of the blog. 3: User adds a title, description, and any relevant media (images, videos) to the blog. 4: User specifies relevant tags for the blog. 5: User initiates the upload process."
      },
      {
        "name": "Recipe from Photo",
        "scenario": "User takes a photo of a food item, uploads it to the system, and receives a list of recipes based on the identified ingredients.",
        "precondition": "User is logged in to the platform.",
        "actors": "User",
        "steps": "1: User takes a photo of a food item 2: User uploads the photo to the system 3: System identifies ingredients using Clarifai Food Item Recognition 4: System retrieves recipes using Spoonacular API based on identified ingredients 5: User views a list of recommended recipes"
      },
      {
        "name": "Recipe from Ingredients",
        "scenario": "User provides a list of ingredients, and the system returns a list of recipes that can be created using those ingredients.",
        "precondition": "User is logged to the platform.",
        "actors": "User",
        "steps": "1: User enters a list of ingredients 2: System retrieves recipes using Spoonacular API based on provided ingredients 3: User views a list of recommended recipes"
      },
      {
        "name": "Meal Plan as per Calorie Intake",
        "scenario": "User provides their details and calorie target. The system generates a meal plan based on the user's calorie requirements.",
        "precondition": "User is logged in and has access to the Meal Plan as per Calorie Intake feature.",
        "actors": "User",
        "steps": "1: User enters personal details (age, gender, height, weight) and calorie target 2: System calculates the daily calorie requirement using a calorie calculator API 3: System generates a meal plan using Spoonacular API based on the user's calorie target and preferences 4: User views the recommended meal plan"
      },
      {
        "name": "Registration",
        "scenario": "When a user wants to sign up our website",
        "precondition": "User is not already registered and has access to a valid email and internet connection.",
        "actors": "User , Admin",
        "steps": "1: users have to submit a form mentioning unique email,password,name,photo,phone,role,gender and birth type 2: admin cross check these infos and give a activation of that user"
      },
      {
        "name": "login",
        "scenario": "When a user wants to login to the website ",
        "precondition": "User is already registered and has internet access.",
        "actors": "User",
        "steps": "1: user have to give email , password and role"
      }
    ],
    "user_story_gpt": "As a registered user, I want to be able to upload and update my recipes, blog posts, and create meal plans tailored to my calorie intake. The platform should allow me to take a photo of a food item, analyze it for ingredients, and suggest recipes based on them. Additionally, I should be able to search for recipes by directly entering a list of ingredients. All these functionalities must be accessible once I'm logged into the system. To ensure a smooth initial setup, the platform should provide a registration process where I can create an account with unique credentials, which will then be approved by an admin. Once registered, I can log in to access all features including uploading content and managing my recipes and blogs. This allows me to curate and organize my culinary experiences efficiently within the platform.",
    "user_story_llama": "As a registered user, I want to be able to upload and manage my own recipes, as well as upload blogs to share my experiences with the community. I also want to be able to take a photo of a food item and receive a list of recipes based on the identified ingredients, or provide a list of ingredients and get a list of recipes that can be created using those ingredients. Furthermore, I want to be able to generate a personalized meal plan based on my calorie intake requirements. To achieve this, I first need to be able to register for the platform by providing my details, and then log in to access these features. Once logged in, I should be able to upload recipes, blogs, and photos, and receive recommendations and meal plans tailored to my needs. Additionally, as an admin, I want to be able to manage user registrations and activate new user accounts. Overall, the system should provide a seamless and user-friendly experience for both users and admins, allowing them to easily interact with the platform and achieve their goals.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "find a doctor",
        "scenario": "User can search for doctors, analyze their ratings,reviews etc",
        "precondition": "User is registered and logged in. User has access to the internet.",
        "actors": "User",
        "steps": "1: User have to go find a doctor page. 2: User can filter doctor by their specialization , slot availability , fee  and reviews 3: User can serach for doctors by their names"
      },
      {
        "name": "Medishop",
        "scenario": "User can see vairous types of medicine and appropiate medicine for  appropiate deseases",
        "precondition": "User is registered and logged in, User has access to the internet.",
        "actors": "User",
        "steps": "1: User have to go medishop page."
      },
      {
        "name": "Appoinment Creation",
        "scenario": "When a user create appointment.",
        "precondition": "User and doctor are registered and logged in. Internet access is available.",
        "actors": "User , doctors",
        "steps": "1: Users have to go create appioint page 2: He/She has to fix slot,name,address, fee 3: User submits the form and doctor approves it"
      },
      {
        "name": "MediLab",
        "scenario": "User can search for labtest, analyze their ratings,reviews etc",
        "precondition": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HealthBook system. A treatment between the doctor and patient is present.",
        "actors": "User",
        "steps": "1: User have to go MediLab page. 2: User can filter Lab by their specialization , slot availability , fee  and reviews 3: User can serach for Lab by their names"
      },
      {
        "name": "Prescription Upload",
        "scenario": "Doctor uploads a prescription for a patient under a current treatment",
        "precondition": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. A treatment between the doctor and patient is present",
        "actors": "Doctor",
        "steps": "1: Doctor navigates to the 'Prescription Upload' section. 2: Doctor uploads the prescription 3: System confirms the upload and updates the patient's medical history"
      },
      {
        "name": "requesting patient patient data",
        "scenario": "doctor requests access to incoming patient's health history to do proper treatment",
        "precondition": "Doctor is registered and logged in to the HealthBook system. Patient is registered to the HeathBook system. The doctor currently doesn't have access to the patient's data",
        "actors": "Doctor",
        "steps": "1: Doctor searches for the patient 2: Doctor sends access request"
      },
      {
        "name": "search for doctors",
        "scenario": "patient searches for doctors based on department, name, visiting location and designation",
        "precondition": "Patient is registered and logged in",
        "actors": "Patient",
        "steps": "1: Patient goes to the 'Search for Doctors' section 2: Patient enters search criteria"
      },
      {
        "name": "doctor views patient's treatments",
        "scenario": "doctor views patient's health history before proceeding to do treatment",
        "precondition": "Doctor is registered and logged in. Patient is registered. Doctor has access to Patient health history",
        "actors": "Doctor",
        "steps": "1: Doctor searches for the patient 2: Doctor goes to patient's current treatments section"
      },
      {
        "name": "admin downloads health data",
        "scenario": "admin looks for downloading heath related data for further analysis",
        "precondition": "Admin is registered and logged in. Admin has access for the related data",
        "actors": "Admin",
        "steps": "1: admin searches for relevant data 2: admin downloads the csv file"
      }
    ],
    "user_story_gpt": "As a user of the HealthBook system, I want a seamless experience where I can easily find and book appointments with doctors based on their specialization, availability, and reviews. Additionally, I should be able to browse a variety of medicines tailored for specific diseases. For lab tests, I want to search and analyze options by their ratings and availability. As a doctor, I want the ability to upload prescriptions to update patient records and request access to patients' health history for effective treatment planning. Meanwhile, administrators should be able to download relevant health data for analysis. This comprehensive platform aims to streamline interactions between patients, doctors, and administrative staff for better health management.",
    "user_story_llama": "As a user, I want to be able to search for doctors and labs, analyze their ratings and reviews, and create appointments with them, so that I can easily find and book medical services. Additionally, I want doctors to be able to upload prescriptions and view my health history, and request access to my data if needed, so that they can provide me with proper treatment. I also want to be able to search for doctors based on various criteria and view their information, and have administrators be able to download health-related data for further analysis, so that the system can be used efficiently and effectively by all stakeholders, including patients, doctors, and administrators.",
    "length": 9
  },
  {
    "usecases": [
      {
        "name": "Add a new task in To Do list",
        "scenario": "User should be able to add a new task",
        "precondition": "User should be logged in",
        "actors": "['User']",
        "steps": "1: User should be logged in 2: User should be on the To Do list page 3: User should click on the Add button 4: User should enter the task name and description 5: User should choose the Deadline 6: User should set the importance of the task on a scale of 1 to 10 7: User should click on the Submit button"
      }
    ],
    "user_story_gpt": "As a user, I want to seamlessly add a new task to my To Do list by logging in, navigating to the list page, and using the Add button to enter the task details, including its name, description, deadline, and importance level, so that I can efficiently manage my tasks and priorities.",
    "user_story_llama": "As a user, I want to be able to add a new task to my To Do list so that I can keep track of my tasks, by logging in and navigating to the To Do list page, where I can click the Add button, enter the task details such as name, description, deadline, and importance level, and then submit the task to have it included in my list.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Chat with AI bot",
        "scenario": "Every user can chat with an AI bot and take help from it",
        "precondition": "User should be logged in",
        "actors": "['User', 'AI Bot']",
        "steps": "1: User should be logged in 2: User should be on the chat page 3: User can type in the chat box and get the response from the bot"
      }
    ],
    "user_story_gpt": "As a user, I want to seamlessly interact with an AI bot on the platform so that I can receive assistance and answers to my inquiries. Once logged in, I should be able to access the chat page, where I can type my questions into the chat box and receive prompt responses from the AI bot, streamlining my experience and solving my queries efficiently.",
    "user_story_llama": "As a user, I want to be able to chat with an AI bot so that I can receive helpful responses and assistance, but only after I have logged in and navigated to the chat page, where I can type my queries in the chat box and get relevant responses from the bot.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Grading the student after completion of the quiz",
        "scenario": "The trainer should be able to grade the student after the completion of the quiz",
        "precondition": "['The student has completed the quiz', 'The student has submitted the quiz', 'The trainer is logged in and has access to the quiz']",
        "actors": "['Trainer','Learner']",
        "steps": "1: The trainer should be able to view the student's answers 2: The trainer should be able to grade the student's answers 3: The trainer should be able to view the student's score 4: The trainer should be able to edit the student's performance"
      },
      {
        "name": "Learner Sign Up",
        "scenario": "A learner can sign up to the platform, by mail and password, or by Google or by Discord",
        "precondition": "['The learner is not signed in', 'The learner has access to the internet', 'The learner has a valid email id or Google account or Discrod account', 'The learner has not used the same email or account to sign up before']",
        "actors": "Learner",
        "steps": "1: The learner opens the platform 2: The learner clicks on the sign up button 3: The learner chooses the sign up method 4: The learner enters the email id and password or selects the Google or Discord account 5: The learner clicks on the sign up button 6: The learner verifies the email id or Google or Discord account 7: The learner is registered to the platform 8: The learner is signed in to the platform"
      },
      {
        "name": "Review and Rating Check",
        "scenario": "['Only who has taken the class can review the class', 'The review should be a maximum of 50 characters', 'The rating should be between 1 and 5']",
        "precondition": "['Learner is logged in', 'Learner has taken the class']",
        "actors": "Learner",
        "steps": "1: Learner clicks on the review button 2: Learner writes the review 3: Learner submits the review"
      },
      {
        "name": "Adding a new class",
        "scenario": "This use case is used to add a new class to the system by the trainer ",
        "precondition": "The trainer should be logged in",
        "actors": "Trainer",
        "steps": "1: The trainer should click on the add class button 2: The trainer should enter the class details 3: The trainer should click on the save button"
      },
      {
        "name": "Trainer Add Blogs",
        "scenario": "Trainer should be able to add blogs",
        "precondition": "['Trainer should be logged in', 'The blog post should not exceed 1000 words']",
        "actors": "Trainer",
        "steps": "1: Trainer will click My Articles from the left menu 2: Trainer will click Add New Post 3: Trainer will fill the required fields 4: Trainer will click Done With Editing"
      },
      {
        "name": "Sign Up as a Trainer",
        "scenario": "A trainer has to give his details to sign up",
        "precondition": "['The trainer is not signed in.', 'The trainer should have access to the internet.', 'The trainer should have a valid email id and a contact number', 'The learner has not used the same email or account to sign up before']",
        "actors": "Trainer",
        "steps": "1: The trainer has to go to the sign up page 2: The trainer has to fill in the details 3: The trainer has to verify the email 4: The trainer has to wait for the approval"
      }
    ],
    "user_story_gpt": "As a platform user, whether a learner or a trainer, I want a comprehensive and seamless experience that allows me to engage with educational content effectively. Learners should be able to easily sign up using their preferred method, access classes, and provide feedback through reviews and ratings after completing a class. Trainers need the ability to sign up, create new classes, grade assignments, and share insights through blog posts. This ensures that both learners and trainers can maximize their potential, with streamlined avenues for education and feedback, fostering a supportive learning environment.",
    "user_story_llama": "As a trainer, I want to be able to add new classes, grade students after they complete quizzes, and add blog posts, so that I can effectively manage my classes and provide valuable content to my students. Additionally, I want learners to be able to sign up to the platform using their email, Google, or Discord accounts, and to be able to review and rate classes they have taken, with the review being limited to 50 characters and the rating being between 1 and 5. I also want to ensure that only learners who have taken a class can review it, and that I can view and edit student performance. Furthermore, I want to be able to sign up as a trainer by providing my details and waiting for approval, so that I can access the platform's features and manage my classes and students. Overall, the platform should provide a seamless experience for both trainers and learners, allowing us to effectively manage classes, provide valuable content, and track student performance.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Train Selection",
        "scenario": "A custumer serches for a train from one station to anoter on a specified date",
        "precondition": "shold have registed",
        "actors": "Customer",
        "steps": "1: valid train searh 2: select express 3: book tickets 4: confirm pyment"
      }
    ],
    "user_story_gpt": "As a registered customer, I want to search for trains between two stations on a specified date so that I can select an express train, book my tickets, and confirm the payment seamlessly.",
    "user_story_llama": "As a customer, I want to be able to search for a train from one station to another on a specified date, so that I can select an express train, book tickets, and confirm payment, provided I have registered beforehand.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Event Search and Ticket Booking of Registered Users",
        "scenario": "A Registered User/Customer searches for an event and books tickets for a specified event.",
        "precondition": "The customer should be registered and logged in. Events must be available in the system.",
        "actors": "A Registered User/Customer",
        "steps": "1: Navigate to the Events page 2: Search for an event using filters (event name, location, date) 3: Select an event from the search results 4: Select the number of tickets and seat type (if applicable) 5: Proceed to checkout 6: Confirm payment 7: Receive booking confirmation 8: View booking history"
      }
    ],
    "user_story_gpt": "As a registered user, I want to easily search for events using filters such as name, location, and date, so that I can select an event, choose the number of tickets and seat type, and seamlessly proceed to checkout. Once my payment is confirmed, I wish to receive an instant booking confirmation and have access to my booking history for future reference.",
    "user_story_llama": "As a registered user, I want to be able to search for events and book tickets for a specified event, so that I can easily find and attend events of my interest, with the ability to filter by event name, location, and date, select my preferred seats, and securely complete the payment process, ultimately receiving a booking confirmation and being able to view my booking history.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "One way Air Ticket Search",
        "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date",
        "precondition": "User is on the travel booking platform and has navigated to the 'Air' tab",
        "actors": "User",
        "steps": "1: User navigates to the \"Air\" tab 2: User selects the \"One Way\" option 3: User selects the \"Flying from\" and \"Flying to\" cities 4: User selects the journey date and (optional) return date 5: User selects the number of tickets and service class 6: User submits choice"
      },
      {
        "name": "Round way Air Ticket Search",
        "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date",
        "precondition": "User is on the travel booking platform and has navigated to the 'Air' tab",
        "actors": "User",
        "steps": "1: User navigates to the \"Air\" tab 2: User selects the \"Round Way\" option 3: User selects the \"Flying from\" and \"Flying to\" cities 4: User selects the journey date and return date 5: User selects the number of tickets and service class 6: User submits choice"
      },
      {
        "name": "Multi City Air Ticket Search",
        "scenario": "User searches for available one way tickets of a particular service-class between two cities on a specific date",
        "precondition": "User is on the travel booking platform and has navigated to the 'Air' tab",
        "actors": "User",
        "steps": "1: User navigates to the \"Air\" tab 2: User selects the \"Multi Way\" option 3: User selects the \"Flying from\" and \"Flying to\" cities for the first flight 4: For all subsequent flights the \"Flying from\" city will be the destination city of the previous flight 5: User can select a new \"Flying from\" city if he wants 6: User selects the journey date for each trip 7: User selects the number of tickets and service class 8: User can add and remove flight 9: User submits choice"
      }
    ],
    "user_story_gpt": "As a traveler, I want to seamlessly search for and book air tickets by choosing from various options, such as one-way, round-trip, or multi-city itineraries, so that I have flexibility in planning my journey. I can easily navigate through the \"Air\" tab to select my desired travel dates, departure and destination cities, number of passengers, and service class, ensuring a smooth and personalized booking experience.",
    "user_story_llama": "As a user, I want to be able to search for available air tickets so that I can easily find and book flights that suit my travel needs. I should be able to search for one way tickets between two cities on a specific date, selecting my preferred service class and number of tickets. Additionally, I should also be able to search for round way tickets, selecting both my journey and return dates. Furthermore, I should have the option to search for multi city tickets, allowing me to select multiple destinations and travel dates, with the flexibility to add or remove flights as needed, and selecting my preferred service class and number of tickets for each trip.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Event Search Based on Location and Date Range in Bangladesh",
        "scenario": "User searches for events happening in a specific location in Bangladesh during a defined date range",
        "precondition": "User is on the event search page",
        "actors": "User",
        "steps": "1: User navigates to the \"events\" tab 2: User selects a location from the available list 3: User selects a 'From Date' and a 'To Date' to define the range 4: User submits the search query"
      },
      {
        "name": "Launch Ticket Booking",
        "scenario": "User books a launch ticket from departure city to destination city for a future time, and the system confirms the booking.",
        "precondition": "there are available seats for the selected route and date.",
        "actors": "User",
        "steps": "1: User choose the launch option. 2: User chooses origin, destination, journey date and searches for launches. 3: User selects desired trip from launch/ship/house boat list. User can be sort the list based on departure time, arrival time, fare range respectively. 4: User can see previous available trips (if date condition allows it) and future trips of any date. 5: User selects desired trip and chooses seats. 6: User provides his/her phone number, email address. User provides First name, Last name and gender of each passenger. 7: User pays by bank cards or mobile banking to book tickets."
      },
      {
        "name": "Park Ticket Booking",
        "scenario": "User books a park ticket from available parks and selects the date for entry.",
        "precondition": "Tickets are available for the selected park, location, and date.",
        "actors": "User",
        "steps": "1: User navigates to the parks option from the main menu. 2: User selects a city or area in the location field to filter available parks. 3: User is presented with a card layout displaying a list of amusement parks, including their names, best attractions, and price ranges, even if they do not search for a specific park. 4: User selects a park card to view more details about the park, including ticket options for kids, infants, and adults. 5: User reviews ticket options and selects the desired ticket type and quantity. 6: User selects an entry date for the park visit. 7: User provides necessary contact and passenger details for the booking. 8: User proceeds to complete payment using a chosen payment method. 9: User receives a booking confirmation via email or in-app notification."
      },
      {
        "name": "Bus Selection",
        "scenario": "A customer searches for a bus from one station/bus_point to another, selects a specific bus, and proceeds to book tickets by providing necessary details.",
        "precondition": "['User must have access to the internet and the shohoz.com website or mobile app.', 'User must be on the bus search page.']",
        "actors": "Customer",
        "steps": "1: Customer searches for a bus from one station/bus_point to another. 2: Filter buses by type (e.g. AC, non-AC,express). 3: Select a bus from the available options. 4: Choose a seat and book tickets. 5: Enter contact and personal information. 6: Review and confirm booking. 7: proceed to payment"
      },
      {
        "name": "Complete Payment Process",
        "scenario": "Client selects seats and completes payment for the ticket",
        "precondition": "Client must select one or more seats of any transport",
        "actors": "Client",
        "steps": "1: Select payment method 2: Authenticate payment via OTP 3: Confirm payment 4: Handle payment confirmation or failure 5: Handle insufficient balance failure"
      }
    ],
    "user_story_gpt": "As a traveler in Bangladesh, I want to easily search for events based on location and date range to plan my outings effectively. Additionally, I want the capability to book various tickets for transportation such as buses and launches, ensuring that I can select my preferred options and seats from a convenient platform. For entertainment, booking park tickets with detailed cost and attraction information is essential. The system should support a smooth booking and secure payment process, enabling me to confirm my travel and leisure plans with confidence.",
    "user_story_llama": "As a user, I want to be able to search for events in Bangladesh based on location and date range, so that I can plan my activities accordingly. Additionally, I want to be able to book launch tickets, park tickets, and bus tickets seamlessly, by selecting my preferred route, date, and seat, and completing the payment process using my preferred payment method, such as bank cards or mobile banking, so that I can easily travel and visit my desired destinations. I also want the system to confirm my bookings and send me notifications, and handle any payment issues that may arise, such as insufficient balance, so that I can have a smooth and hassle-free experience.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Login into Splitwise Account",
        "scenario": "Users can log into their Splitwise account using their credentials.",
        "precondition": "User has installed the Splitwise app and has a valid account.",
        "actors": "User",
        "steps": "1: User opens the Splitwise app. 2: User navigates to the login screen. 3: User enters their registered email address. 4: User enters their password. 5: User clicks on the 'Login' button. 6: System verifies the credentials. 7: User is redirected to the home screen if credentials are valid. 8: Error message is displayed if credentials are invalid."
      },
      {
        "name": "Sign Up for Splitwise Account",
        "scenario": "Users can sign up for a Splitwise account using their details.",
        "precondition": "User does not have an existing account and has internet access.",
        "actors": "New User",
        "steps": "1: User opens the Splitwise app or website. 2: User navigates to the 'Sign Up' screen. 3: User enters their full name. 4: User enters their email address. 5: User enters their phone number. 6: User sets a password. 7: User confirms the password. 8: User clicks on the 'Sign Up' button. 9: System validates the provided information. 10: System checks if the email or phone number is already registered. 11: System sends a verification email if the email is not registered. 12: User clicks the verification link in the email. 13: System verifies the email and activates the account. 14: User is redirected to the home screen upon successful sign-up."
      },
      {
        "name": "Add More Friends",
        "scenario": "Users can add more friends to their Splitwise account by providing the friend's name, contact number, or email. If the friend doesn't have a Splitwise account, the user is prompted to send an app link via text message.",
        "precondition": "User has installed the Splitwise app and is logged into their account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Add Friends' screen. 2: User enters the friend's name, contact number, or email address. 3: System checks if the contact exists in the user's phone or is already a registered Splitwise user. 4: If the contact exists in the user's phone, the system prompts the user to select the contact. 5: If the friend is already a Splitwise user, the system adds the friend to the user's Splitwise account. 6: If the friend is not a registered Splitwise user, the system prompts the user to send an app download link via text message. 7: User confirms the action, and the app link is sent as a text message to the provided contact number."
      },
      {
        "name": "Start a New Group",
        "scenario": "Users can create a new group by providing a group name, uploading a group photo, and selecting a group type. For trip types, the user must provide a start and end date. Group type is optional.",
        "precondition": "User has installed the Splitwise app and is logged into their account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Start New Group' screen. 2: User enters the group name. 3: User uploads a group photo (optional). 4: User selects a group type from the following options: Trip, Home, Couple, Other. 5: If the selected group type is 'Trip', user must enter the start date and end date. 6: User reviews the entered information. 7: User clicks on the 'Create Group' button. 8: System creates the group and redirects the user to the group page."
      },
      {
        "name": "Add Expense",
        "scenario": "Users can add an expense by selecting one or more groups or friends, entering the expense details, and selecting how to split the expense among the members.",
        "precondition": "User has installed the Splitwise app and is logged into their account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Add Expense' screen. 2: User selects one or more groups or friends to include in the expense. 3: If a group is selected, all group members are automatically added to the expense list. 4: User enters a description for the expense. 5: User enters the total expense amount. 6: User selects the member from the expense list who paid for the expense. 7: User selects a split category from the following options: 8: 1. Equally 9: 2. Unequally 10: 3. By Percentages 11: 4. By Shares 12: 5. By Adjustments (if selected, the user enters specific amounts for each member in the list). 13: User reviews the entered information. 14: User clicks on the 'Add Expense' button. 15: System verifies the input data and adds the expense to the selected groups or friends."
      },
      {
        "name": "View Activity Feed",
        "scenario": "Users can view, search, edit, and delete a chronological list of all activities related to their expenses.",
        "precondition": "User has logged into their Splitwise account and has recorded activities.",
        "actors": "User",
        "steps": "1: User navigates to the 'Activity' section. 2: System displays a chronological list of all activities, including expenses added, payments made, and friends added. 3: User can filter activities by type (e.g., expenses, payments, friends). 4: User can search for specific activities using a search bar. 5: User can click on any activity for more details. 6: User can edit the selected activity. 7: User can delete an activity from the feed. 8: User can return to the main activity list."
      },
      {
        "name": "View Groups and Non-Group Expenses",
        "scenario": "Users can view the groups they are part of and see which groups owe them money, as well as view expenses that are not associated with any group.",
        "precondition": "User has logged into their Splitwise account and has created or joined groups.",
        "actors": "User",
        "steps": "1: User navigates to the 'Groups' section. 2: System displays a list of groups the user is part of. 3: User can see the total amount owed to them by each group. 4: User can select a group to view detailed expenses within that group. 5: User can also view non-group expenses that are related to their account. 6: User can click on any non-group expense to see further details."
      },
      {
        "name": "View Group Details",
        "scenario": "Users can view detailed information about a selected group, including members, expenses, and settings.",
        "precondition": "User has logged into their Splitwise account and is a member of at least one group.",
        "actors": "User",
        "steps": "1: User navigates to the 'Groups' section. 2: User selects a specific group from their list of groups. 3: System displays the group's details, including the group name, type, and photo. 4: User can view the list of all group members. 5: User can see the total expenses shared in the group. 6: User can view individual expense history related to the group. 7: User can view the group's settings and options to edit or remove the group. 8: User can invite new members to the group via email or a link. 9: User can show individual settings for each member, such as their contribution and notifications. 10: User can remove any individual from the group. 11: User can view a summary of each member's contribution to the group expenses. 12: User can leave the group if they wish to do so."
      },
      {
        "name": "View Friends and Balances",
        "scenario": "Users can view a list of all friends and see how much they owe their friends or how much their friends owe them, and can make payments to friends.",
        "precondition": "User has logged into their Splitwise account and has added friends.",
        "actors": "User",
        "steps": "1: User navigates to the 'Friends' section. 2: System displays a list of all friends added by the user. 3: User can see the total amount owed to each friend. 4: User can see the total amount owed by each friend. 5: User can click on a specific friend to view detailed transaction history with that friend. 6: User can choose to make a payment to a specific friend. 7: User selects a payment method and enters the amount to pay. 8: User confirms the payment. 9: System updates the balances accordingly and displays a confirmation message. 10: User can return to the main friends list."
      },
      {
        "name": "View Friends Details",
        "scenario": "Users can view detailed information about their friends, including expenses, mutual groups, and options to settle up, remind, export data, and manage their friendship.",
        "precondition": "User has logged into their Splitwise account and has friends added.",
        "actors": "User",
        "steps": "1: User navigates to the 'Friends' section. 2: User selects a specific friend from their friend list. 3: System displays the friend's details, including contact information and mutual groups. 4: User can view the friend's expense history with the user. 5: User can see all mutual groups they share with the friend. 6: User has the option to 'Settle Up' to clear outstanding balances with the friend. 7: User can send a reminder to the friend for pending payments. 8: User can export the friend's expense data as a spreadsheet. 9: User can manage friendship settings (block, report, remove) in the settings option. 10: User can view detailed activity related to the friend."
      },
      {
        "name": "Manage Account Settings",
        "scenario": "Users can edit their account information, manage notifications, and access support options.",
        "precondition": "User has logged into their Splitwise account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Account' section. 2: User can edit their account information (e.g., email, password). 3: User can scan a QR code to add friends or share their account details. 4: User can view and subscribe to Splitwise Pro for additional features. 5: User can adjust email notification settings. 6: User can configure device and push notification settings. 7: User can access security settings to enable two-factor authentication. 8: User can rate the Splitwise app. 9: User can contact Splitwise support for assistance."
      },
      {
        "name": "Logout from Account",
        "scenario": "Users can log out of their Splitwise account to ensure their account's security.",
        "precondition": "User is currently logged into their Splitwise account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Account' section. 2: User selects the 'Logout' option. 3: System prompts the user to confirm the logout action. 4: User confirms the logout action. 5: System logs the user out and redirects them to the login screen. 6: User can no longer access their account without logging in again."
      }
    ],
    "user_story_gpt": "As a user of the Splitwise app, I want to seamlessly manage my financial interactions by easily logging in and out of my account. I aim to be able to sign up if I don't have an existing account and to add friends for collaborative expense tracking. I want to have the flexibility to create groups for shared expenses, like trips or home expenses, and to add expenses while deciding on various splitting methods among members. Furthermore, I need the ability to view and manage my activity feed, group details, and friends' balances to keep track of who owes whom. To enhance my experience, I also wish to customize my account settings, manage notifications, and access support when needed, ensuring my account security through features like two-factor authentication. Lastly, I want to view detailed information about friends, including shared expenses and mutual groups, allowing for easy payments and reminders. Overall, I aim for a comprehensive, user-friendly interface that supports financial clarity and efficiency across all my social and group interactions.",
    "user_story_llama": "As a user, I want to be able to log into my Splitwise account securely and manage my expenses with friends and groups, so that I can easily track and split bills, view activity feeds, and settle up with friends. I also want to be able to add expenses, view group details, and manage my account settings, including notifications and security options. Additionally, I want to be able to view my friends' details, including mutual groups and expense history, and have the option to settle up, remind, or export data. Furthermore, I want to be able to start new groups, add friends to my account, and view non-group expenses, all while ensuring my account's security by being able to log out when needed. Overall, I want to use Splitwise to simplify my expense tracking and splitting with others, and have a user-friendly and secure experience.",
    "length": 12
  },
  {
    "usecases": [
      {
        "name": "Post New Sale Ad",
        "scenario": "User posts a new advertisement for selling an item, service, or property.",
        "precondition": "Seller has an account and is logged in.",
        "actors": "Seller",
        "steps": "1: Seller selects 'Post Your Ad' option 2: Seller selects 'Sell an item, property or service' option 3: Seller selects an item or service catergory from shown options 4: Seller selects a sub-catergory from shown options 5: Seller selects a location from shown options 6: Seller fills up necessary fields with relevant information (including price and image) 7: Seller selects 'Post Ad' option and submits the ad for review"
      },
      {
        "name": "Search for Items",
        "scenario": "User searches for an item using filters such as category, type of ad, type of poster, and location.",
        "precondition": "Buyer is on the homepage of the platform.",
        "actors": "Buyer",
        "steps": "1: Buyer selects 'All ads' option 2: Buyer selects category of desired item 3: (Optional) Buyer applies filters (type of ad, type of poster, location) 4: (Optional) Buyer searches specific advertisement titles in the search bar 5: Buyer selects a desired advertisement"
      },
      {
        "name": "Boost Ad Visibility",
        "scenario": "Seller boosts the visibility of an existing ad using 'Bump Up' or 'Urgent' or 'Spotlight' options to increase exposure.",
        "precondition": "Seller is logged in, has a valid ad posted, and has sufficient balance or payment options available.",
        "actors": "Seller",
        "steps": "1: Seller logs into their Bikroy.com account 2: Seller navigates to 'My Ads' section from the account dashboard 3: Seller selects the ad they wish to boost 4: Seller clicks on 'Boost Ad' option next to the ad 5: Seller selects a boosting option (e.g., 'Bump Up', 'Urgent', 'Spotlight') 6: Seller can select one or more boosting options using + 7: Seller chooses the duration for the boosting (e.g., '3 days', '7 days', '15 days') 8: Seller reviews the pricing for the selected boost option according to the duration (e.g., 'Tk 135', 'Tk 200', 'Tk 330') 9: Seller clicks 'Continue' 10: Seller selects a payment method 'Pay online' or 'Pay by voucher' 11: Seller can select different payment methods for 'Pay online' (e.g., Visa, MasterCard, Bikash, DBBL) 12: Seller clicks 'Continue' 13: Seller enters payment details and confirms the transaction 14: System processes the payment and activates the boost feature 15: Ad is promoted based on the selected option ('Bump Up' or 'Urgent' or 'Spotlight') 16: System sends a confirmation message and updates the ad’s status to reflect the boost (e.g., 'Bumped', 'Urgent')"
      }
    ],
    "user_story_gpt": "As a seller on the platform, I want to post a new ad for selling an item, service, or property. I need the process to be straightforward, allowing me to choose the appropriate category, sub-category, and location, and enter all necessary details such as price and images before my ad goes live after review. Additionally, I should be able to enhance the visibility of my active ads with options like 'Bump Up', 'Urgent', or 'Spotlight', choosing the duration and paying through various methods. This way, I can effectively reach more potential buyers. Meanwhile, as a buyer, I want to conveniently search for items using filters and categories on the platform, enabling me to find exactly what I'm looking for efficiently.",
    "user_story_llama": "As a seller, I want to be able to post a new advertisement for selling an item, service, or property on the platform, so that I can reach potential buyers. Additionally, I want buyers to be able to search for items using filters such as category, type of ad, type of poster, and location, making it easier for them to find my ad. Furthermore, I want to have the option to boost the visibility of my existing ad using 'Bump Up', 'Urgent', or 'Spotlight' options, allowing me to increase exposure and attract more buyers, and I want the system to process my payment and activate the boost feature accordingly, sending me a confirmation message and updating my ad's status to reflect the boost.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Post Job",
        "scenario": "An employer posts a new job listing.",
        "precondition": "Employer is logged in and has the necessary permissions to post jobs.",
        "actors": "Employer",
        "steps": "1: Employer navigates to the job posting page 2: Employer fills in job details such as title, description, location, category, and optionally, years of experience 3: Employer submits the job for review"
      },
      {
        "name": "Apply for a Job",
        "scenario": "A job seeker applies for a job.",
        "precondition": "Job seeker is logged in and viewing a job listing.",
        "actors": "Job Seeker",
        "steps": "1: Job seeker selects a job listing 2: Job seeker clicks 'Apply Now' 3: Job seeker submits their application with a resume"
      },
      {
        "name": "Look for Talents",
        "scenario": "An employer searches for and views profiles of job seekers.",
        "precondition": "Employer is logged in, has access to the talent search feature, and optionally has a membership to unlock full profiles.",
        "actors": "Employer",
        "steps": "1: Employer navigates to the profile database 2: (Optional) Employer enters search criteria such as job category, location, or keywords 3: (Optional) Employer filters various criteria (current job, experience, education level, gender, location, etc.) 4: Employer views the profiles of job seekers and adds to shortlist 5: (Optional) Employer with membership unlocks the full profile of selected job seekers"
      },
      {
        "name": "Membership Registration",
        "scenario": "User registers to become a member on Bikroy.com by selecting a business category, picking a membership plan (Plus or Premium), and providing personal details.",
        "precondition": "User is on the membership registration page and has not registered previously.",
        "actors": "User",
        "steps": "1: User navigates to the 'Sign Up' page. 2: System displays a list of business categories (e.g., Cars, Electronics, Mobile Accessories, etc.). 3: User selects a business category (e.g., 'Mobile Accessories'). 4: System displays membership plans with options such as Monthly, Quarterly, and Yearly under Plus and Premium categories. 5: User selects a membership plan (e.g., 'Plus - Monthly'). 6: User fills in their business information, such as Business Name, Email, and Phone Number. 7: User clicks 'Continue to Pay'. 8: System redirects the user to the payment page. 9: User completes the payment for the selected plan. 10: System confirms the payment and activates the user's account with the selected business category and membership plan."
      }
    ],
    "user_story_gpt": "As a platform user, I want to seamlessly engage in job-related interactions on the site, so that both employers and job seekers can achieve their goals efficiently. Employers can post new job listings by providing necessary details such as title, description, and location, ensuring opportunities are visible to potential candidates. They can also search for talents through a robust database where they can filter and view profiles based on specific criteria, with an optional membership to unlock full profiles. Job seekers can easily apply for these advertised opportunities by submitting applications and resumes directly through the platform. Additionally, users have the opportunity to register as members by selecting a business category and a suitable membership plan, completing payment, and activating their accounts to access exclusive features and benefits.",
    "user_story_llama": "As an employer, I want to be able to post new job listings and search for talented job seekers, so that I can find the best candidates for my company. In addition, I want job seekers to be able to easily apply for jobs that match their skills and interests. To facilitate this, I want users to be able to register for membership on our platform, selecting a business category and membership plan that suits their needs, and providing necessary personal details, so that they can access advanced features such as unlocking full job seeker profiles and posting jobs. Furthermore, I want the system to allow job seekers to submit their applications with resumes, and employers to view and manage these applications, as well as shortlist and view profiles of potential candidates, thereby streamlining the hiring process and making it more efficient for both parties.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "Creation of New Workspace",
        "scenario": "User creates a new workspace from their account.",
        "precondition": "['User is logged into their Notion account.', 'User does not exceed the maximum number of workspaces allowed.']",
        "actors": "User",
        "steps": "1: User navigates to 'Settings & Members' in the sidebar. 2: User selects 'Create or Join Workspace'. 3: User enters the workspace name and email domain, if applicable. 4: User clicks 'Create' to complete the process."
      },
      {
        "name": "Switching Workspaces",
        "scenario": "User switches between multiple workspaces they are a part of.",
        "precondition": "['User is a member of multiple workspaces.', 'User is logged in.']",
        "actors": "User",
        "steps": "1: User clicks on their profile picture in the top-left corner. 2: User selects the workspace they want to switch to from the dropdown menu. 3: User is redirected to the selected workspace."
      },
      {
        "name": "Joining an Existing Workspace",
        "scenario": "User joins an existing workspace by invitation or allowed domain.",
        "precondition": "['User has received an invitation or has an email matching the allowed domain.', 'User is logged into their Notion account.']",
        "actors": "User",
        "steps": "1: User clicks on the invitation link or logs in with an email matching the allowed domain. 2: User accepts the invitation to join the workspace."
      },
      {
        "name": "Update Workspace Name",
        "scenario": "User updates the name of current workspace",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User enters workspace name"
      },
      {
        "name": "Upload Workspace Icon",
        "scenario": "User updates the icon of current workspace",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User selects workspace icon"
      },
      {
        "name": "Delete Workspace",
        "scenario": "User deletes the current workspace",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User types 'Workspace Name' confirms deletion"
      },
      {
        "name": "Leaving a Workspace",
        "scenario": "User leaves a workspace they are a member of.",
        "precondition": "['User is logged into their Notion account.', 'User is a member of the workspace.']",
        "actors": "User",
        "steps": "1: User navigates to 'Settings & Members' in the sidebar. 2: User clicks on the 'Leave Workspace' button. 3: User confirms the action in the dialog box."
      },
      {
        "name": "Adding Another Account",
        "scenario": "User adds another email account to their Notion account.",
        "precondition": "['User is logged into their primary Notion account.', 'User has access to the secondary email account.']",
        "actors": "User",
        "steps": "1: User navigates to 'Settings & Members' in the sidebar. 2: User clicks on 'My Account' and selects 'Add Email'. 3: User enters the new email address and verifies it through the email link sent. 4: User confirms the new email as added to their account."
      },
      {
        "name": "Import Workspace",
        "scenario": "User imports entire workspace data from a file or cloud storage",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User uploads the file to be imported 2: Alternatively, user selects a cloud storage"
      },
      {
        "name": "Add Member to Workspace",
        "scenario": "User adds a member to the current workspace",
        "precondition": "User is logged in",
        "actors": "User",
        "steps": "1: User searches the email of the member to be added 2: User selects the person to be added or alternatively sends an invitation email"
      },
      {
        "name": "Managing Allowed Email Domains",
        "scenario": "User sets or updates allowed email domains for the workspace.",
        "precondition": "User is a workspace owner with permissions to modify settings.",
        "actors": "User",
        "steps": "1: User navigates to 'Settings' under the workspace menu. 2: User scrolls to 'Allowed email domains'. 3: User enters the domain name to be allowed (e.g., 'company.com','ugrad.cse.buet.ac.bd'). 4: User clicks 'Update' to save changes."
      },
      {
        "name": "Export Workspace Content",
        "scenario": "User exports all workspace content for backup, sharing, or legal purposes.",
        "precondition": "['User is a workspace owner with permissions to export content.', 'User has a Business or Enterprise plan for PDF export.']",
        "actors": "User",
        "steps": "1: User navigates to 'Settings' under the workspace menu. 2: User clicks on 'Export all workspace content'. 3: User selects export options such as format (Markdown, HTML, CSV, PDF) and content inclusion. 4: User clicks 'Export' to download the content."
      }
    ],
    "user_story_gpt": "As a Notion user, I want to efficiently manage my workspaces by creating new ones, switching between existing ones, and joining others via invitation or allowed domains. I also need the ability to update workspace details like names and icons, add members, and configure allowed email domains to streamline collaboration. Additionally, I should be able to delete or leave a workspace when necessary. For better account flexibility, I want to add additional email accounts and import or export workspace data for backup or sharing. Ensuring I have the right permissions for content management, such as exporting or importing data, is essential for seamless workspace administration.",
    "user_story_llama": "As a Notion user, I want to be able to create and manage my workspaces efficiently, so that I can organize my content and collaborate with others seamlessly. This includes creating new workspaces, switching between multiple workspaces, joining existing workspaces by invitation or allowed domain, updating workspace names and icons, and deleting workspaces when necessary. Additionally, I want to be able to leave a workspace when I no longer need access, add another email account to my Notion account for flexibility, import entire workspace data from a file or cloud storage, and add members to my workspace by searching for their email or sending an invitation. I also need to manage allowed email domains for my workspace, ensuring that only authorized users can join. Furthermore, I want to be able to export all my workspace content for backup, sharing, or legal purposes, with options to choose the format and content inclusion. By having these features, I can effectively utilize Notion to streamline my workflow and enhance productivity.",
    "length": 12
  },
  {
    "usecases": [
      {
        "name": "Rich Text Formatting",
        "scenario": "Users format their text with rich options adding links.",
        "precondition": "The text block exists in the document.",
        "actors": "User",
        "steps": "1: User selects the text block. 2: User applies the formatting options 3: User checks the formatted result."
      },
      {
        "name": "Organize Content into Columns",
        "scenario": "A user arranges content side-by-side by creating multiple columns on a page.",
        "precondition": "A Notion page with content exists.",
        "actors": "User",
        "steps": "1: User drags and drops blocks into columns. 2: Content is organized into multiple columns."
      },
      {
        "name": "Add Headings for Structure",
        "scenario": "The user adds headings to structure the content on a Notion page.",
        "precondition": "A Notion page with content exists.",
        "actors": "User",
        "steps": "1: User adds H1, H2, and H3 headings for different sections. 2: Content is structured with headings."
      },
      {
        "name": "Add Icons and Cover Art",
        "scenario": "A user personalizes a page by adding icons and cover images.",
        "precondition": "A Notion page exists.",
        "actors": "User",
        "steps": "1: User adds or changes the page icon. 2: User adds or changes the cover image."
      },
      {
        "name": "Add and Manage Images in Content",
        "scenario": "A user uploads images, arranges them on a page, and resizes them as needed.",
        "precondition": "A Notion page is open and ready for editing.",
        "actors": "User",
        "steps": "1: User uploads an image to the page. 2: User arranges and resizes the image. 3: User adds captions and alt text for the image."
      },
      {
        "name": "Add and Embed Files",
        "scenario": "A user uploads or embeds files like PDFs or documents into a Notion page.",
        "precondition": "A Notion page is ready for file uploads.",
        "actors": "User",
        "steps": "1: User uploads a PDF file to the page. 2: User embeds a file link from an external source. 3: User arranges the file block on the page."
      },
      {
        "name": "Embed and Manage Media",
        "scenario": "A user embeds videos and audio files into a Notion page.",
        "precondition": "A Notion page is open for editing.",
        "actors": "User",
        "steps": "1: User embeds a video from a streaming service. 2: User uploads an audio file. 3: User resizes and aligns the media blocks."
      },
      {
        "name": "Link to Notion Page",
        "scenario": "A user links one Notion page to another within a paragraph or as a block.",
        "precondition": "Both Notion pages exist and are accessible.",
        "actors": "User",
        "steps": "1: User types '@', '[[' or '+' followed by the page name. 2: User selects the page from the dropdown. 3: Link is added in the desired format."
      },
      {
        "name": "Link to a Web Page",
        "scenario": "A user pastes a URL into Notion and formats it as a mention for easier readability.",
        "precondition": "A web page link is copied.",
        "actors": "User",
        "steps": "1: User pastes the URL into a Notion page. 2: User selects 'Paste as mention' to format the link."
      },
      {
        "name": "Transfer Content to Another Account",
        "scenario": "A user transfers ownership of content (pages, databases) from one Notion account to another.",
        "precondition": "Both Notion accounts exist.",
        "actors": "User, New Account Owner",
        "steps": "1: User shares the page with the new account. 2: User grants ownership permissions to the new account."
      },
      {
        "name": "Duplicate and Delete Content",
        "scenario": "A user duplicates or deletes content on a Notion page.",
        "precondition": "A Notion page exists with content.",
        "actors": "User",
        "steps": "1: User selects a block of content. 2: User chooses either 'Duplicate' or 'Delete' from the menu."
      },
      {
        "name": "Restore Deleted Content",
        "scenario": "A user restores deleted content from the trash within 30 days.",
        "precondition": "The content is in the trash and within the restoration window.",
        "actors": "User",
        "steps": "1: User navigates to the trash. 2: User selects the deleted page to restore."
      },
      {
        "name": "Sync Content Across Pages",
        "scenario": "A user syncs content across multiple Notion pages.",
        "precondition": "Pages must exist, and user must have edit permissions.",
        "actors": "User",
        "steps": "1: User copies the content from a page. 2: User pastes it on a different page with the 'Paste and sync' option. 3: Content is now synced across pages."
      },
      {
        "name": "Unsync Content",
        "scenario": "A user unsyncs specific content across pages.",
        "precondition": "Synced blocks exist across multiple pages.",
        "actors": "User",
        "steps": "1: User selects the synced block. 2: User chooses the 'Unsync' option to remove the sync."
      },
      {
        "name": "Create and Edit Code Blocks",
        "scenario": "User creates and edits code blocks within Notion for documentation or sharing code snippets.",
        "precondition": "User is logged into Notion and has access to a workspace or page.",
        "actors": "User",
        "steps": "1: User navigates to a Notion page and selects the option to add a new block. 2: User selects the code block option from the available block types. 3: User types or pastes code into the code block. 4: User modifies the code block by selecting the language, formatting, or editing the code."
      },
      {
        "name": "Create and Display Math Equations in Notion",
        "scenario": "A user creates and formats math equations in Notion using LaTeX syntax.",
        "precondition": "The user must have access to a Notion page.",
        "actors": "User",
        "steps": "1: User types an equation using the inline math command `$$` or the block equation command `/math`. 2: The system processes the LaTeX syntax. 3: The system displays the equation in the correct format."
      },
      {
        "name": "Creating a Database",
        "scenario": "User creates a new database in Notion.",
        "precondition": "['User is logged into their Notion account.', 'User has permission to create databases in the workspace.']",
        "actors": "User",
        "steps": "1: User navigates to a Notion page and types '/' to access the command menu. 2: User selects a database type (e.g., table, board, list). 3: User enters the name of the new database. 4: User configures properties for the database."
      },
      {
        "name": "Customizing Database Views",
        "scenario": "User customizes the views of a database to display data in different formats.",
        "precondition": "['User has a database created in Notion.', 'User has editing permissions for the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database and selects 'Add a view'. 2: User chooses a view type such as 'Table', 'Board', 'Calendar', etc. 3: User customizes the view by adding filters, sorts, and grouping. 4: User saves the view for future use."
      },
      {
        "name": "Managing Database Pages",
        "scenario": "User manages individual pages within a database, adding, opening, and editing them.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to add and edit database pages.']",
        "actors": "User",
        "steps": "1: User navigates to the database and clicks on 'New' to add a new page. 2: User enters the details for the new page and saves it. 3: User opens an existing page to edit its content. 4: User modifies properties or adds new content to the page."
      },
      {
        "name": "Collaborating in a Database",
        "scenario": "User collaborates with team members in a shared database with specific permissions.",
        "precondition": "['Database is shared with team members.', 'User has appropriate permissions for collaboration.']",
        "actors": "User",
        "steps": "1: User shares the database with team members with 'Can edit content' permissions. 2: Team members add and edit pages within the database. 3: User reviews changes made by team members and provides feedback in comments."
      },
      {
        "name": "Managing Database Lock",
        "scenario": "User locks and unlocks a database to control structure changes.",
        "precondition": "['User is an admin with permissions to lock/unlock the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database settings. 2: User selects 'Lock/Unlock database' and confirms the action."
      },
      {
        "name": "Handling Changes in a Locked Database",
        "scenario": "User attempts to change structure of a locked database.",
        "precondition": "['Database is locked; user has edit permissions for content only.']",
        "actors": "User",
        "steps": "1: User tries to modify properties or views of the locked database."
      },
      {
        "name": "Managing Database Properties",
        "scenario": "User adds, edits, and deletes properties in a database.",
        "precondition": "['User has permissions to modify the database.']",
        "actors": "User",
        "steps": "1: User navigates to database settings. 2: User selects 'New property' to add a property. 3: User edits or deletes properties as needed."
      },
      {
        "name": "Handling Invalid and Empty Values for Properties",
        "scenario": "User enters invalid or empty values for different property types in a database.",
        "precondition": "['Database has predefined properties for testing different data types.']",
        "actors": "User",
        "steps": "1: User selects a property cell in the database. 2: User attempts to enter invalid or empty values for each property type. 3: System validates and either accepts or rejects the input."
      },
      {
        "name": "Creating and Managing Relations",
        "scenario": "User creates and manages relations between databases to link related data.",
        "precondition": "['User has two databases created in Notion.', 'User has permissions to modify database properties.']",
        "actors": "User",
        "steps": "1: User navigates to the database settings. 2: User adds a new 'Relation' property. 3: User selects the target database to link. 4: User configures relation settings and saves."
      },
      {
        "name": "Creating and Managing Rollups",
        "scenario": "User creates rollup properties to aggregate data from related databases.",
        "precondition": "['User has related databases with numeric or date properties.']",
        "actors": "User",
        "steps": "1: User navigates to the database settings. 2: User adds a new 'Rollup' property. 3: User selects the related property to roll up and chooses a calculation method. 4: User saves the rollup property settings."
      },
      {
        "name": "Handling Invalid or Empty Rollup Values",
        "scenario": "User tries to create rollup properties with invalid or empty values.",
        "precondition": "['Related databases contain inconsistent or empty data.']",
        "actors": "User",
        "steps": "1: User attempts to create a rollup with invalid data types or empty values."
      },
      {
        "name": "Managing Database Views",
        "scenario": "User creates, customizes, and switches between different views in a database.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to create and edit views.']",
        "actors": "User",
        "steps": "1: User navigates to the database and selects 'Add a view'. 2: User chooses a view type such as 'Table', 'Board', 'Calendar', etc. 3: User customizes the view settings (properties, filters, sorts). 4: User switches between different views using the dropdown menu."
      },
      {
        "name": "Applying Filters to a Database",
        "scenario": "User applies filters to a database view to display specific data.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to edit filters in the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database and clicks 'Filter'. 2: User selects a property and sets criteria for filtering. 3: User adds additional filters or groups using 'AND'/'OR' logic. 4: User saves the filter configuration."
      },
      {
        "name": "Sorting Items in a Database",
        "scenario": "User sorts database items based on a specific property in ascending or descending order.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to sort items in the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database and clicks 'Sort'. 2: User selects a property and chooses ascending or descending order. 3: User adds multiple sorts if needed and adjusts their order. 4: User saves the sort configuration."
      },
      {
        "name": "Grouping Items in a Database",
        "scenario": "User groups database items by a specific property to organize data visually.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to group items in the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database and clicks 'Group'. 2: User selects a property to group by (e.g., 'Status'). 3: User arranges the groups in a desired order. 4: User saves the group configuration."
      },
      {
        "name": "Searching a Database",
        "scenario": "User searches for specific items within a database using keywords.",
        "precondition": "['User has a database created in Notion.', 'User has permissions to search within the database.']",
        "actors": "User",
        "steps": "1: User navigates to the database and clicks the search icon. 2: User enters keywords related to page titles or properties. 3: User reviews the search results displayed in real-time."
      },
      {
        "name": "Managing Data in Table View",
        "scenario": "User creates, modifies, and deletes rows and columns in a table view.",
        "precondition": "['User has permissions to modify the table view.', 'Table view is already created.']",
        "actors": "User",
        "steps": "1: User navigates to the database table view. 2: User adds, edits, or deletes rows and columns as needed."
      },
      {
        "name": "Organizing Simple Data in List View",
        "scenario": "User organizes notes or articles using list view with minimal properties.",
        "precondition": "['User has permissions to modify the list view.', 'List view is already created.']",
        "actors": "User",
        "steps": "1: User navigates to the database list view. 2: User adds, edits, or deletes list items as needed."
      },
      {
        "name": "Visualizing Workflows in Board View",
        "scenario": "User creates boards to manage project stages or tasks.",
        "precondition": "['User has permissions to modify the board view.', 'Board view is already created.']",
        "actors": "User",
        "steps": "1: User navigates to the database board view. 2: User moves items between columns to represent changes in workflow stages."
      },
      {
        "name": "Managing Events in Calendar View",
        "scenario": "User schedules and views events on a calendar.",
        "precondition": "['User has permissions to modify the calendar view.', 'Calendar view is already created.']",
        "actors": "User",
        "steps": "1: User navigates to the database calendar view. 2: User adds, edits, or deletes events as needed."
      },
      {
        "name": "Assigning Unique Identifiers to Database Items",
        "scenario": "User assigns unique identifiers to each item for easy reference.",
        "precondition": "['User has permissions to modify the database.', 'Database has a unique ID property set up.']",
        "actors": "User",
        "steps": "1: User navigates to the database settings. 2: User configures or updates the unique ID format for each new item."
      }
    ],
    "user_story_gpt": "As a user of Notion, I want to efficiently manage and customize my content and databases for enhanced productivity and collaboration. I can format text with rich options, organize content into columns, and add headings for clarity. To personalize my pages, I add icons and cover art, and I manage images, files, and media within my workspace. Content linking and syncing across pages ensure coherence and accessibility. I transfer ownership seamlessly between accounts and can duplicate, delete, or restore content when needed. My ability to create and manage databases allows for detailed structuring, from customizing views to handling properties and relations. With a focus on collaboration, I'm able to share databases, manage permissions, and visualize workflows using board, calendar, and table views. Furthermore, with the option to apply filters, sort, and group items, I can organize data effectively. Notion empowers me to embed equations, code, and media, facilitating rich content creation, while maintaining unique identifiers for easy reference and logical workflows.",
    "user_story_llama": "As a Notion user, I want to be able to create and customize my pages with rich text formatting, organize content into columns, and add headings for structure, so that I can effectively communicate my ideas and thoughts. I also want to personalize my pages by adding icons and cover art, and manage images, files, and media within my content. Additionally, I need to be able to link to other Notion pages or web pages, transfer content to other accounts, duplicate, delete, and restore content as needed. Furthermore, I want to sync content across pages, create and edit code blocks, and display math equations using LaTeX syntax. I should also be able to create and manage databases, customize database views, and collaborate with team members in shared databases. The system should allow me to manage database properties, handle invalid or empty values, create and manage relations and rollups, and apply filters, sorts, and groups to my data. I should be able to search my databases, manage data in table, list, board, and calendar views, and assign unique identifiers to database items, so that I can efficiently organize, analyze, and share my data.",
    "length": 37
  },
  {
    "usecases": [
      {
        "name": "Create New Teamspace",
        "scenario": "A user creates a teamspace and invites other members by mentioning their emails. Those who accept the invitations become members of the teamspace.",
        "precondition": "User is logged in to Notion and has at least one workspace in Notion.",
        "actors": "User",
        "steps": "1: User provides name of the new Teamspace 2: User provides icon of the new Teamspace 3: User provides emails of other invited members"
      },
      {
        "name": "Manage Teamspace Permissions",
        "scenario": "A teamspace owner may change the permission levels of any other owner or member.A member may only change the permission levels of other members.",
        "precondition": "The teamspace is created and members have joined successfully.",
        "actors": "Teamspace Owner, Teamspace Member",
        "steps": "1: Teamspace owner changes the permission level of other members to one of 'Full Access', 'Çan View', 'Can Edit' or 'Can Comment' 2: Alternatively, Teamspace owner upgrades another member to owner. 3: Alternatively, Teamspace owner downgrades another owner to member."
      },
      {
        "name": "Share Page with Individuals",
        "scenario": "A user shares his page with other members or groups while specifying the access levels of each.",
        "precondition": "The user is logged in and the page is created.",
        "actors": "User",
        "steps": "1: User selects a page from his workspace. 2: User selects names of members or groups to share with. 3: User sets permission levels of each of the members or groups."
      },
      {
        "name": "Publish Page as Website",
        "scenario": "A user publishes a page as a website that if publicly available. The user selects domain name, SEO and link settings based on his subscription plan.",
        "precondition": "The user is logged in and the page is created.",
        "actors": "User",
        "steps": "1: User opens a page from his workspace. 2: User proceeds to publish as Website option. 3: User approves the proposed randomly generated website domain. 4: Alternatively, the user may choose his own domain if he is in a PLus subscription 5: The user chooses SEO and LInk Expiration related preferences and finalizes publishing."
      },
      {
        "name": "Collaborate in real-time",
        "scenario": "One or more than one user collaborates on a page content in real-time. The system approves or rejects the edits based on consistency.",
        "precondition": "The page is shared with the user(s).",
        "actors": "User",
        "steps": "1: User opens tha shared page. 2: User selects a particular block of the page. 3: User edits the content of the selected block."
      },
      {
        "name": "Add comments to Page Content",
        "scenario": "On the comment portion of a page block, user writes a text and/or mentions another persons/guests/pages.",
        "precondition": "User is logged in and has a privilege level equal or higher than 'Can Comment'.",
        "actors": "User",
        "steps": "1: User selects a particular block of the page. 2: User writes a textual comment. 3: Alternatively, user may mention other persons or groups or pages."
      },
      {
        "name": "Suggest Edits to Content",
        "scenario": "A user suggests edit to a block of a page content and the owner accepts or rejects the proposed change.",
        "precondition": "Guest user has enough privilege.",
        "actors": "Page owner, Guest User",
        "steps": "1: User selects a particular block of the page. 2: User writes a textual comment. 3: Alternatively, user may mention other persons or groups or pages."
      },
      {
        "name": "View Page Analytics",
        "scenario": "User accesses and views analytics data for a page including view counts and user interaction history",
        "precondition": "User has Full Access or Can Edit privileges for the page",
        "actors": "Page Owner, Page Editor",
        "steps": "1: User clicks on the clock icon in the top right of the page 2: User selects 'Analytics' option 3: System displays graph with total and unique page views 4: User can hover over specific days to see detailed view counts 5: System shows page creator information and recent viewer/editor list"
      }
    ],
    "user_story_gpt": "As a Notion user, I want to be able to create new teamspaces and invite team members via email, allowing for seamless collaboration once they accept the invitations. I should have the capability to manage permissions within the teamspace, adjusting access levels according to each member’s role. Furthermore, I want to share individual pages with specific individuals or groups, setting customized permissions for each. The ability to publish a page as a publicly accessible website by selecting domain and SEO settings is one of my desired features. I need to collaborate with other users in real-time on page content with system-driven consistency checks. Additionally, I want to add comments to page content blocks, mention other users, suggest edits, and review them for approval. Accessing page analytics to monitor interaction history and user activity will help me better understand engagement. Overall, these capabilities ensure efficient and dynamic teamwork within Notion.",
    "user_story_llama": "As a user, I want to create a new teamspace and invite other members, so that we can collaborate in real-time on page content, share pages with individuals or groups while specifying access levels, and publish pages as publicly available websites. I also want to manage teamspace permissions, allowing owners to change permission levels of members and upgrade or downgrade their roles. Additionally, I want to be able to add comments to page content, suggest edits to content, and view page analytics, including view counts and user interaction history, to track engagement and make data-driven decisions. Furthermore, I want to ensure that all collaborations, edits, and comments are done in a consistent and approved manner, with the system rejecting or approving edits based on consistency, and owners having control over accepting or rejecting proposed changes. Overall, my goal is to have a seamless and efficient collaboration experience, with the right level of control and visibility, to achieve our teamspace objectives.",
    "length": 8
  },
  {
    "usecases": [
      {
        "name": "Upgrade plan",
        "scenario": "A user wants to upgrades their subscription plan to access additional features and benefits.",
        "precondition": "User is loggged in",
        "actors": "User",
        "steps": "1: User navigates to the Upgrade plan or Explore plans section in the workspace settings 2: User selects the desired plan to upgrade to 3: User inputs the payment details 4: User confirms the upgrade 5: The system processes the payment and upgrades the plan 6: User receives a confirmation message along with an email"
      },
      {
        "name": "Downgrade plan",
        "scenario": "A user wants to downgrade their subscription plan to reduce costs or access fewer features",
        "precondition": "User is loggged in",
        "actors": "User",
        "steps": "1: User navigates to the Plans section in the workspace settings 2: User selects the desired plan to downgrade to 3: User confirms the downgrade 4: The system processes the request and adjusts the plan 5: User receives a confirmation message along with an email"
      },
      {
        "name": "Update payment method",
        "scenario": "A user wants to update their payment method for the subscription plan",
        "precondition": "User is loggged in",
        "actors": "User",
        "steps": "1: User navigates to the Billing section in the workspace settings 2: User modifies the details in the Payment method section 3: User confirms the update 4: The system processes the request and updates the payment method 5: User receives a confirmation message along with an email"
      }
    ],
    "user_story_gpt": "As a user, I want the ability to manage my subscription plans efficiently so that I can upgrade to access additional features and benefits, or downgrade to reduce costs and simplify my plan based on my needs. Additionally, I should be able to easily update my payment method to ensure my subscription continues seamlessly. Each time I make such changes, I expect the system to process my requests promptly and provide me with timely confirmations and email notifications.",
    "user_story_llama": "As a user, I want to be able to manage my subscription plan, so that I can upgrade to access additional features and benefits, downgrade to reduce costs or access fewer features, or update my payment method to ensure uninterrupted service, with the system processing my requests and sending confirmation messages, allowing me to navigate and modify my plan settings, including exploring and selecting different plans, inputting payment details, and confirming changes, all while being logged in and receiving email notifications to keep me informed of any updates or changes made to my account.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Task Management Integration",
        "scenario": "A third-party task management application integrates with Notion to synchronize tasks across platforms.",
        "precondition": "User has valid accounts on both platforms, and the integration is authorized.",
        "actors": "User, Notion API, Third-Party Task Management System",
        "steps": "1: User creates or updates tasks in the third-party app 2: Tasks are synchronized with Notion 3: Notion database reflects updated task information"
      },
      {
        "name": "CRM Data Synchronization",
        "scenario": "A CRM system integrates with Notion to sync customer data and notes to Notion databases.",
        "precondition": "Sales rep has authorized access to both the CRM and Notion, and the integration is configured.",
        "actors": "Sales Representative, Notion API, CRM System",
        "steps": "1: Sales rep adds or updates customer data in the CRM 2: The system syncs customer data to the Notion database 3: Notion database reflects updated customer information"
      }
    ],
    "user_story_gpt": "As a user, I want to integrate a third-party task management application with Notion, so that tasks are synchronized across platforms ensuring all my task information is up-to-date. Additionally, I want my CRM system to sync customer data and notes to Notion databases, so that I can access the most current customer information efficiently.",
    "user_story_llama": "As a user, I want to integrate third-party task management applications with Notion, so that tasks can be synchronized across platforms, and also integrate our CRM system with Notion to sync customer data and notes, thereby ensuring that my Notion database always reflects the most up-to-date task and customer information, whether I update it in the third-party app or in the CRM, allowing me to access and manage all my data in one place.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Search for Restaurants",
        "scenario": "Customer searches for restaurants using keywords such as cuisine type, restaurant name, or dish name.",
        "precondition": "FoodPanda app is running and is on the home or search page.",
        "actors": "Customer",
        "steps": "1: Customer clicks on the search bar 2: Customer enters a keyword or phrase 3: System displays search results based on the keyword or phrase 4: Customer selects a restaurant from the search results"
      },
      {
        "name": "Search for Restaurants with Offers",
        "scenario": "Customer searches for restaurants offering discounts or promotions.",
        "precondition": "FoodPanda app is running and is on the home or search page.",
        "actors": "Customer",
        "steps": "1: Customer filters search results by offers 2: System displays restaurants with active offers or discounts 3: Customer selects a restaurant with an offer"
      },
      {
        "name": "Recent Searches",
        "scenario": "Customer views and selects from a list of their recent search queries.",
        "precondition": "Customer has performed previous searches.",
        "actors": "Customer",
        "steps": "1: Customer clicks on the search bar 2: System displays a list of recent searches 3: Customer selects a recent search query to view the results"
      },
      {
        "name": "Select Food from Restaurant Menu",
        "scenario": "Customer selects food items from a restaurant's menu to add to his cart.",
        "precondition": "Customer is logged in and has selected a restaurant from the search results.",
        "actors": "Customer",
        "steps": "1: Customer views the restaurant menu 2: Customer selects a food item 3: System displays the food item details 4: Customer adds the item to the cart"
      },
      {
        "name": "View Food Item Details",
        "scenario": "Customer views the details of a food item like its description, ingredients, and price.",
        "precondition": "Customer is viewing the restaurant menu.",
        "actors": "Customer",
        "steps": "1: Customer selects a food item 2: System displays the item's details (e.g., price, ingredients, description)"
      },
      {
        "name": "Switch Between Delivery and Pickup Before Selecting Food/Restaurant",
        "scenario": "Customer switches between delivery and pickup before selecting a restaurant or food.",
        "precondition": "Customer is logged in and browsing the homepage.",
        "actors": "Customer",
        "steps": "1: Customer browses the homepage or search results 2: Customer switches between delivery and pickup options 3: System updates the restaurant list based on the chosen option"
      },
      {
        "name": "Switch Between Delivery and Pickup While Browsing the Restaurant Menu",
        "scenario": "Customer switches between delivery and pickup while browsing the menu of a restaurant.",
        "precondition": "Customer is logged in, has selected a restaurant, and is viewing the menu.",
        "actors": "Customer",
        "steps": "1: Customer switches between delivery and pickup options while browsing the menu 2: System updates the estimated delivery/pickup time and any available options based on the selection"
      },
      {
        "name": "Switch Between Delivery and Pickup After Adding Items to Cart",
        "scenario": "Customer switches between delivery and pickup after adding food items to their cart.",
        "precondition": "Customer is logged in, has added food items to their cart, and is at the review stage before checkout.",
        "actors": "Customer",
        "steps": "1: Customer switches between delivery and pickup options after adding items to the cart 2: System updates the estimated time and other details based on the selection 3: Customer reviews the cart and proceeds to checkout"
      },
      {
        "name": "Switch Between Delivery and Pickup at Payment Stage",
        "scenario": "Customer switches between delivery and pickup during the payment process before placing the order.",
        "precondition": "Customer has added food items to their cart and is at the payment stage.",
        "actors": "Customer",
        "steps": "1: Customer switches between delivery and pickup options at the payment stage 2: System updates the total cost, estimated time, and any service charges based on the selection 3: Customer confirms the order and places it"
      }
    ],
    "user_story_gpt": "As a customer using the FoodPanda app, I want to search for restaurants using keywords related to cuisine, restaurant names, or dish names, and have the flexibility to apply filters for discounts and promotions, so I can easily find enticing dining options. The app should showcase my recent searches, enabling quick re-selection of past queries. I can view detailed food items and add them to my cart after selecting a restaurant. Throughout the process, I want the convenience to switch between delivery and pickup options at any stage—from browsing restaurants or menus, through adding items to the cart, until the payment process—ensuring an adaptable ordering experience tailored to my immediate preferences.",
    "user_story_llama": "As a customer, I want to use the FoodPanda app so that I can search for restaurants by keywords such as cuisine type, restaurant name, or dish name, and also filter my search to find restaurants with active offers or discounts. Additionally, I want to be able to view and select from my recent search queries to quickly find my favorite restaurants. Once I've selected a restaurant, I want to be able to browse their menu, view the details of specific food items, and add them to my cart. I also want the flexibility to switch between delivery and pickup options at various stages of my order, including before selecting a restaurant, while browsing the menu, after adding items to my cart, and even during the payment process, with the system updating the estimated time, total cost, and any service charges accordingly. This will allow me to easily find and order my desired food, while also having control over how I receive it.",
    "length": 9
  },
  {
    "usecases": [
      {
        "name": "Send a Parcel Using Pandago",
        "scenario": "Customer sends a parcel using the Pandago service, specifying the sender and recipient addresses and collection time.",
        "precondition": "Customer is logged in and has access to the Pandago service.",
        "actors": "Customer, Rider",
        "steps": "1: Customer opens the Pandago service 2: Customer enters the sender and recipient addresses 3: Customer selects the collection time (ASAP or schedule for later) 4: Customer confirms the parcel details and adds delivery specifications 5: Rider picks up the parcel and delivers it to the recipient"
      },
      {
        "name": "Receive a Parcel Using Pandago",
        "scenario": "Customer receives a parcel sent by another user using the Pandago service.",
        "precondition": "Recipient has a valid delivery address and is awaiting the parcel.",
        "actors": "Customer, Rider",
        "steps": "1: Customer receives notification of a parcel being sent 2: Customer tracks the parcel in real-time via the app 3: Rider delivers the parcel to the recipient's address 4: Customer confirms the receipt of the parcel"
      },
      {
        "name": "Cancel a Pandago Delivery",
        "scenario": "Customer cancels the parcel delivery before it is picked up by the rider.",
        "precondition": "Parcel has not been picked up yet.",
        "actors": "Customer, Rider",
        "steps": "1: Customer initiates a cancellation request 2: System processes the cancellation if the rider has not yet picked up the parcel 3: Customer receives a cancellation confirmation"
      }
    ],
    "user_story_gpt": "As a Pandago user, I want to seamlessly send and receive parcels by entering the necessary addresses and scheduling the delivery time, allowing the rider to pick up and deliver the parcel as specified. Furthermore, I want to be able to track my parcels in real-time via the app, ensuring timely delivery and confirmation of receipt. Additionally, if needed, I should be able to cancel the delivery easily before the rider has picked up the parcel, receiving immediate confirmation of the cancellation to maintain flexibility and control over my deliveries.",
    "user_story_llama": "As a customer, I want to use the Pandago service so that I can send a parcel to a recipient by specifying the sender and recipient addresses and collection time, and track the parcel in real-time until it is delivered. I also want to be able to receive parcels sent by other users and confirm receipt of the parcel upon delivery. Additionally, I want the flexibility to cancel a parcel delivery before it is picked up by the rider, and receive a confirmation of the cancellation, ensuring that I have control over the delivery process from start to finish.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "Search for Products in Shops",
        "scenario": "Customer searches for products available in various shops using a keyword or product category.",
        "precondition": "Customer has launched app and is on the shop search page.",
        "actors": "Customer",
        "steps": "1: Customer enters a search keyword or selects a product category 2: System displays relevant products based on the search query or selected category 3: Customer selects a product from the search results"
      },
      {
        "name": "Search for Shops by Name",
        "scenario": "Customer searches for a specific shop by entering its name in the search bar.",
        "precondition": "Customer has launched app and is on the shop search page.",
        "actors": "Customer",
        "steps": "1: Customer enters a shop name in the search bar 2: System displays matching shops based on the entered name 3: Customer selects a shop from the search results"
      },
      {
        "name": "Filter Product Search Results by Availability",
        "scenario": "Customer filters product search results to display only products available for delivery or pickup.",
        "precondition": "Customer has launched app and has performed a product search.",
        "actors": "Customer",
        "steps": "1: Customer applies a filter to show only products available for delivery or pickup 2: System filters the search results based on availability 3: Customer selects a product from the filtered results"
      },
      {
        "name": "View Recent and Popular Product Searches",
        "scenario": "Customer views and selects from a list of their recent product searches and popular product searches.",
        "precondition": "Customer has launched app and performed some product searches.",
        "actors": "Customer",
        "steps": "1: Customer clicks on the search bar 2: System displays a list of recent searches 3: System displays a list of popular searches 4: Customer selects a recent search query to view the results"
      },
      {
        "name": "Select and View Product Details",
        "scenario": "Customer views the details of a product, including description, price, and availability.",
        "precondition": "Customer has performed a search, and relevant product results are displayed.",
        "actors": "Customer",
        "steps": "1: Customer views the search results 2: Customer selects a product from the search results or shop menu 3: System displays the product details (description, price, availability, etc.)"
      },
      {
        "name": "Add Product to Cart",
        "scenario": "Customer adds a selected product to their cart.",
        "precondition": "Customer has selected a product from search results to view its details.",
        "actors": "Customer",
        "steps": "1: Customer selects a product from the shop or search results 2: System displays the product details 3: Customer adds the product to the cart"
      },
      {
        "name": "Modify Product Quantity in Cart",
        "scenario": "Customer modifies the quantity of a product in their cart before proceeding to checkout.",
        "precondition": "Customer has already added a product to their cart.",
        "actors": "Customer",
        "steps": "1: Customer views their cart 2: Customer modifies the quantity of the product 3: System updates the cart with the new quantity and recalculates the total cost"
      },
      {
        "name": "Apply a Voucher Code",
        "scenario": "Customer applies a voucher code to their order during checkout.",
        "precondition": "Customer is logged in, has items in their cart, and is at the cart page of the checkout process.",
        "actors": "Customer",
        "steps": "1: Customer clicks on the 'Apply a voucher' option 2: Applicable voucher codes are displayed to the customer 3: Customer can select voucher valid for this order or enter a voucher code manually"
      },
      {
        "name": "Choose Payment Method",
        "scenario": "Customer selects a payment method (mobile banking, credit card, cash on delivery or other online methods) during checkout.",
        "precondition": "Customer is logged in, has items in their cart, and is at the payment stage in checkout page",
        "actors": "Customer",
        "steps": "1: Customer chooses a payment method 2: If information is needed for that method, such as credit card or mobile banking information, system asks those information. 3: System asks whether this would be a default payment option 4: System confirms the selected payment method and updates the order details 5: If discount is applied on certain payment methods, system handles that"
      },
      {
        "name": "Process Payment",
        "scenario": "Customer completes the payment process and confirms the order.",
        "precondition": "Customer is logged in, has selected a payment method, and is at the confirmation stage.",
        "actors": "Customer, Payment Gateway",
        "steps": "1: Customer initiates the payment 2: Customer enters payment information to the payment gateway 3: Payment gateway processes the payment and returns a response 4: System confirms the order if payment is successful"
      },
      {
        "name": "Apply Discount Automatically",
        "scenario": "Customer receives an automatic discount based on the items in their cart (e.g., restaurant offers or app-specific promotions).",
        "precondition": "Users select those specific foods or specific restaurants that is eligible for discount.",
        "actors": "Customer",
        "steps": "1: Customer adds eligible items to the cart 2: System applies the applicable discount automatically based on the promotion 3: Customer proceeds to checkout with the discount applied"
      },
      {
        "name": "Apply Discount on Minimum Order Value",
        "scenario": "Customer receives a discount only if their order exceeds a minimum value (e.g., Tk 500 or more).",
        "precondition": "Customer has added items to the cart, and the cart value must meet the minimum order value for the discount to be applied.",
        "actors": "Customer",
        "steps": "1: Customer adds items to the cart 2: System checks if the total cart value exceeds the minimum threshold for the discount 3: If eligible, system applies the discount automatically"
      }
    ],
    "user_story_gpt": "As a customer, I want to use the application to efficiently find and select products across various shops by searching with keywords or specific shop names. This includes the ability to apply filters such as availability for delivery or pickup to help me make informed decisions. I wish to easily view details such as product descriptions, prices, and availability, and then add desired items to my cart for purchase. Moreover, I want the flexibility to modify product quantities and apply voucher codes or receive automatic discounts while checking out. Finally, I need the process to support multiple payment methods securely, allowing me to complete my purchase seamlessly and enjoy special promotions when eligible.",
    "user_story_llama": "As a customer, I want to use the app to search for products in various shops by keyword or category, and also search for specific shops by name, so that I can find the products I need. I also want to filter my search results by availability, view my recent and popular searches, and select a product to view its details, including description, price, and availability. Additionally, I want to be able to add products to my cart, modify the quantity of products in my cart, apply voucher codes, and choose a payment method, such as mobile banking, credit card, or cash on delivery. I expect the system to automatically apply discounts when eligible, including discounts based on the items in my cart or when my order exceeds a minimum value. Finally, I want to complete the payment process and confirm my order, receiving confirmation of a successful payment, so that I can receive my products conveniently and efficiently.",
    "length": 12
  },
  {
    "usecases": [
      {
        "name": "Accept a Delivery Order",
        "scenario": "Rider accepts an available delivery order from a restaurant or shop.",
        "precondition": "Rider is logged into the app and has active orders waiting for acceptance.",
        "actors": "Rider",
        "steps": "1: Rider receives notification of an available delivery order 2: Rider views the order details 3: Rider accepts the order and heads to the pickup location"
      },
      {
        "name": "Pickup Order from Restaurant",
        "scenario": "Rider picks up the order from the restaurant and updates the system.",
        "precondition": "Rider has accepted the order and arrived at the restaurant.",
        "actors": "Rider, Restaurant",
        "steps": "1: Rider arrives at the restaurant 2: Restaurant hands over the order 3: Rider confirms the pickup in the system"
      },
      {
        "name": "Deliver Order to Customer",
        "scenario": "Rider delivers the order to the customer and updates the system with the delivery status.",
        "precondition": "Rider has picked up the order and arrived at the delivery location.",
        "actors": "Rider, Customer",
        "steps": "1: Rider arrives at the delivery location 2: Rider hands over the order to the customer 3: Rider confirms the delivery in the system"
      },
      {
        "name": "Accept a Customer Order",
        "scenario": "Restaurant receives a new order from a customer and accepts it to begin preparation.",
        "precondition": "Restaurant is logged in to the system and receives an order notification.",
        "actors": "Restaurant",
        "steps": "1: Restaurant receives a new order 2: Restaurant views the order details 3: Restaurant accepts the order and begins preparing it"
      },
      {
        "name": "Mark Order as Ready for Pickup",
        "scenario": "Restaurant marks the order as ready for the rider to pick up once preparation is complete.",
        "precondition": "Restaurant has accepted the order and completed the preparation.",
        "actors": "Restaurant, Rider",
        "steps": "1: Restaurant finishes preparing the order 2: Restaurant marks the order as ready for pickup 3: Rider is notified to pick up the order"
      }
    ],
    "user_story_gpt": "As a delivery rider, I want to seamlessly accept and manage delivery orders through the app so that I can efficiently deliver them from restaurants to customers. By receiving notifications of available orders, I can view details and accept them, ensuring timely pickups. After picking up orders at the restaurant, I confirm the pickup to keep the system updated. Upon arriving at the customer's location, I hand over the order and confirm the delivery for accurate tracking. Meanwhile, as a restaurant, I want to manage incoming customer orders, accept them, and ensure they are ready for pickup by marking them accordingly once prepared. This coordinated system helps streamline the process from order receipt to final delivery, enhancing both operational efficiency and customer satisfaction.",
    "user_story_llama": "As a rider, I want to be able to accept a delivery order from a restaurant or shop through the app, so that I can view the order details and head to the pickup location. Additionally, I want to be able to pick up the order from the restaurant and update the system, and then deliver the order to the customer while also updating the delivery status. This process should be facilitated by the restaurant, who should be able to accept a customer's order, prepare it, and mark it as ready for pickup, notifying me to pick up the order, thereby ensuring a seamless and efficient delivery experience for both the customer and the restaurant.",
    "length": 5
  },
  {
    "usecases": [
      {
        "name": "Login to the Application",
        "scenario": "Customer logs in to the app using valid or invalid credentials.",
        "precondition": "Customer has an account with valid credentials.",
        "actors": "Customer,System",
        "steps": "1: Customer enters email 2: System verifies the credentials 3: If valid, the system logs the customer in 4: If invalid, the system displays an error message"
      },
      {
        "name": "Sign Up for a New Account",
        "scenario": "A new customer signs up for an account using google or facebook account.",
        "precondition": "Customer does not have an existing account with the given g-mail or facebook account.",
        "actors": "Customer,System",
        "steps": "1: Customer gives a valid g-mail or facebook account 2: Customer gives a valid phone number 3: System creates the account and sends a confirmation email/SMS"
      },
      {
        "name": "Track Order in Real-Time",
        "scenario": "Customer tracks the status of their food or parcel delivery in real-time.",
        "precondition": "Customer has placed an order, and the rider is assigned to the delivery.",
        "actors": "Customer, Rider",
        "steps": "1: Customer opens the app and views the current order status 2: System displays real-time tracking of the rider’s location 3: Customer sees estimated time of arrival"
      }
    ],
    "user_story_gpt": "As a customer, I want to access the application easily by logging in with valid credentials or by signing up through my Google or Facebook account, so that I can manage my orders efficiently. After placing an order, I should be able to track it in real-time, viewing the rider's location and estimated time of arrival, to ensure timely delivery of my food or parcel.",
    "user_story_llama": "As a customer, I want to be able to log in to the application using my valid credentials so that I can access the app's features, and if I don't have an account, I want to be able to sign up for a new account using my google or facebook account. Once I've placed an order, I want to be able to track it in real-time, seeing the current status and the rider's location, as well as the estimated time of arrival, so that I can stay informed and plan accordingly.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "User Login",
        "scenario": "A registered user sign in into his Tripadvisor account.",
        "precondition": "User is not logged in.",
        "actors": "User",
        "steps": "1: User attempts to post a review or manage a booking. 2: System prompts the user to log in. 3: User enters their email and password. 4: System verifies the credentials and logs the user in. 5: User continues with the initial action (e.g., review submission or booking)."
      },
      {
        "name": "Trip Planning",
        "scenario": "A user creates a trip plan by adding places to visit, hotels, and restaurants.",
        "precondition": "User is logged in and has started a trip plan.",
        "actors": "User",
        "steps": "1: User adds places to visit. 2: User selects hotels and restaurants. 3: System saves the trip plan."
      },
      {
        "name": "Flight Search",
        "scenario": "A user searches for flights between two destinations on specific dates.",
        "precondition": "User is on the flight search page.",
        "actors": "User",
        "steps": "1: User selects departure and destination locations. 2: User selects travel dates. 3: System displays available flights."
      },
      {
        "name": "Tour or Activity Booking",
        "scenario": "A user books a tour or activity after reviewing the details and confirming payment.",
        "precondition": "User is logged in and has selected a tour or activity.",
        "actors": "User",
        "steps": "1: User reviews tour or activity details. 2: User selects the date and number of participants. 3: User enters payment details. 4: System confirms the booking."
      },
      {
        "name": "Hotel Booking",
        "scenario": "A user books a selected hotel after reviewing the details and confirming payment.",
        "precondition": "User has selected a hotel and entered the booking flow.",
        "actors": "User",
        "steps": "1: User reviews the hotel details. 2: User selects check-in and check-out dates. 3: User enters payment details. 4: System confirms the booking."
      },
      {
        "name": "Personalized Trip Recommendations",
        "scenario": "A user requests personalized recommendations for hotels, restaurants, and attractions based on their preferences, reviews, and interaction history.",
        "precondition": "User is logged in with a completed profile and previous interaction history (e.g., reviews, favorites).",
        "actors": "User, Recommendation System",
        "steps": "1: User navigates to the 'Recommendations' section from their dashboard. 2: User selects a new destination or activity type for recommendations. 3: System retrieves the user's profile details, including past interactions such as reviews, favorites, and past trips. 4: System analyzes these interactions using a recommendation algorithm and compares them with available listings for the selected destination. 5: System filters and ranks listings based on relevance to the user's preferences and other criteria (e.g., similar reviews from like-minded users). 6: Personalized recommendations for hotels, restaurants, and attractions are displayed to the user with detailed descriptions, reviews, and ratings. 7: User views the recommendations and can choose to save, share, or book directly from the recommendation list."
      },
      {
        "name": "Hotel Review Submission",
        "scenario": "A user writes and submits a review for a hotel they stayed at.",
        "precondition": "User has completed a stay at the hotel and is logged in.",
        "actors": "User",
        "steps": "1: User navigates to the review section for the hotel. 2: User writes a review and rates the hotel. 3: User submits the review."
      },
      {
        "name": "Account Registration",
        "scenario": "A new user creates an account on Tripadvisor.",
        "precondition": "User is on the registration page.",
        "actors": "User",
        "steps": "1: User enters their details (name, email, password, etc.). 2: User agrees to the terms and conditions. 3: User submits the registration form. 4: System creates the account and sends a confirmation email."
      },
      {
        "name": "Restaurant Review Submission",
        "scenario": "A user writes and submits a review for a restaurant they visited.",
        "precondition": "User has visited the restaurant and is logged in.",
        "actors": "User",
        "steps": "1: User navigates to the review section for the restaurant. 2: User writes a review and rates the restaurant. 3: User submits the review."
      },
      {
        "name": "User Profile Update",
        "scenario": "A logged-in user updates their personal profile information on Tripadvisor.",
        "precondition": "User is logged into their account.",
        "actors": "User",
        "steps": "1: User navigates to the profile settings. 2: User updates personal information (name, bio, etc.). 3: System saves the updated information."
      },
      {
        "name": "Hotel Search",
        "scenario": "A user searches for hotels in a specific destination with specific filters.",
        "precondition": "User is on the homepage or hotel search page.",
        "actors": "User",
        "steps": "1: User enters a destination. 2: User applies filters (price range, rating, amenities, etc.). 3: System displays the search results."
      },
      {
        "name": "Restaurant Search",
        "scenario": "A user searches for restaurants in a specific location with filters like cuisine type and rating.",
        "precondition": "User is on the restaurant search page.",
        "actors": "User",
        "steps": "1: User selects a location. 2: User applies filters (cuisine type, rating, etc.). 3: System displays the search results."
      }
    ],
    "user_story_gpt": "As a user on Tripadvisor, I want to seamlessly navigate through the platform to manage my trips, starting with logging into my account to access personalized features. Once logged in, I can plan trips by adding places, hotels, and restaurants I wish to visit. When researching my destination, I want to easily search for flights, hotels, and restaurants using specific filters to tailor results to my preferences. For each location I explore, I want to contribute by submitting reviews for hotels and restaurants to help other travelers. Additionally, I want Tripadvisor to provide me with personalized recommendations for accommodations, dining, and attractions based on my preferences and past interactions. This will enhance my travel planning experience, allowing me to discover new places and activities. Furthermore, I should be able to book tours and activities with ease, ensuring an enriched travel experience. Finally, managing my profile, whether by updating my information or registering a new account, should be straightforward, enhancing my overall interaction with the platform.",
    "user_story_llama": "As a user, I want to be able to register for an account on Tripadvisor and log in securely, so that I can plan my trips by searching for flights, hotels, and restaurants, and book them after reviewing the details and confirming payment. I also want to be able to create a personalized trip plan by adding places to visit, and receive personalized recommendations for hotels, restaurants, and attractions based on my preferences and interaction history. Additionally, I want to be able to write and submit reviews for hotels and restaurants I've visited, and update my personal profile information as needed. Furthermore, I want to be able to search for hotels and restaurants using specific filters, and view detailed descriptions, reviews, and ratings for each listing. Overall, I want to use Tripadvisor to make informed decisions about my travel plans, and to share my experiences with others by submitting reviews and ratings.",
    "length": 12
  },
  {
    "usecases": [
      {
        "name": "Individual Course enrollment",
        "scenario": "Learner selects a course, if its not free, he pays money to access all course content",
        "precondition": "Learner has a coursera account",
        "actors": "Learner",
        "steps": "1: Learner selects a paid course 2: Learner provides his name and country 3: Learner selects payment via card or paypal 4: For card payment, Learner provides number, Expiration date and Security code and make payment 5: For paypal payment, Learner logs in to his paypal account and make payment"
      },
      {
        "name": "Giving quiz",
        "scenario": "Learner gives quiz to test the learning of course contents.",
        "precondition": "Learner enrolled in the course",
        "actors": "Learner",
        "steps": "1: Learner select the quiz 2: Learner answers the MCQs 3: Learner submit the ans 4: System automatically shows the result"
      },
      {
        "name": "Post or reply on discussion forums",
        "scenario": "Learner creates a new discussion.",
        "precondition": "Student is enrolled in the course",
        "actors": "Student",
        "steps": "1: Learner clicks create post button 2: Learner add a Post title 3: Learner add a Post body 4: Learner select a forum"
      },
      {
        "name": "Apply for financial aid",
        "scenario": "An user requests for financial aid for a specific course",
        "precondition": "User has an account and the account is logged in",
        "actors": "User",
        "steps": "1: User clicks on a paid course to enroll it 2: User clicks on Financial aid available 3: User provides the required information 4: User clicks on Next button at the bottom of the form 5: User provides the required information and response 6: User clicks on Review button at the bottom"
      },
      {
        "name": "Team's Course Registration",
        "scenario": "An user wants to register for a team-based course ",
        "precondition": "User has an account and is logged in",
        "actors": "User",
        "steps": "1: User choose number of users for a team 2: User clicks on  Continue button in under plan details 3: User provides the required information in the form that appears 4: User clicks on the Continue button under account details"
      },
      {
        "name": "Add Education Credentials",
        "scenario": "An user adds their education credentials to their profile",
        "precondition": "User has an account and is logged in",
        "actors": "User",
        "steps": "1: User clicks on + Add button in the Credentials section under the Education Heading 2: User provides the required information in the form that appears 3: User clicks on the Save button to save the information"
      }
    ],
    "user_story_gpt": "As a learner on an online education platform, I want to seamlessly enroll in courses, whether individually or as part of a team, so that I can access comprehensive educational content. If a course is not free, I should be able to pay securely via card or PayPal. Additionally, I can apply for financial aid if needed. Once enrolled, I want to engage with quizzes to test my understanding and use discussion forums to connect with other learners by posting or replying to discussions. Furthermore, I want to enhance my profile by adding my educational credentials, ensuring my learning journey is well-documented and personalized.",
    "user_story_llama": "As a learner, I want to be able to enroll in individual courses, either by paying for them or applying for financial aid, so that I can access the course content and achieve my learning goals. Additionally, I want to be able to give quizzes to test my understanding of the course material and participate in discussion forums by posting or replying to threads. I also want to be able to register for team-based courses and add my education credentials to my profile, so that I can showcase my skills and qualifications. Furthermore, I want the system to allow me to easily navigate through these features, providing a seamless learning experience, and enabling me to make the most out of the courses I enroll in.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Project Intake",
        "scenario": "A user submits new project requests through a structured process that includes inputting details and prioritizing projects for review.",
        "precondition": "User has permission to submit project requests.",
        "actors": "User, Reviewer",
        "steps": "1: User navigates to the project intake section. 2: User fills in the project details: title, description, and start date. 3: User submits the project request. 4: The request is routed to the appropriate reviewer for approval. 5: Reviewer approves or rejects the project based on the details."
      },
      {
        "name": "Resource Planning",
        "scenario": "A project manager identifies and allocates resources (team members, time, budget) to various tasks in a project.",
        "precondition": "Project is created, and team members are available for resource allocation.",
        "actors": "Project Manager, Team Members",
        "steps": "1: Project Manager navigates to the resource planning section of the project. 2: Manager assigns a team member to a task and estimates the required effort. 3: Manager reviews potential resource conflicts. 4: The assigned tasks and resources are updated in the system."
      },
      {
        "name": "Task Management",
        "scenario": "A user creates, assigns, and manages tasks within a project, including modifying due dates.",
        "precondition": "User is logged in, has access to the project, and permissions to manage tasks.",
        "actors": "User, Team Members",
        "steps": "1: User navigates to the project and clicks 'Add Task'. 2: User fills in task details, assigns it to a team member, and sets a due date. 3: User can edit task details or modify the due date as required. 4: System updates the task details and ensures all assignments are reflected."
      },
      {
        "name": "Add Rules",
        "scenario": "A user adds automated rules to a project to trigger specific actions based on conditions.",
        "precondition": "User has access to the project and permission to manage rules.",
        "actors": "User",
        "steps": "1: User navigates to the project settings. 2: User selects the 'Rules' tab. 3: User clicks 'Add Rule' and selects a trigger (e.g., task moved to a section). 4: User selects the corresponding action (e.g., assign task, mark task as complete). 5: System saves the rule and applies it to the project."
      },
      {
        "name": "Custom Fields Management",
        "scenario": "A user adds, modifies, or deletes custom fields in a project to track additional task attributes.",
        "precondition": "User has access to the project and permission to manage custom fields.",
        "actors": "User",
        "steps": "1: User navigates to the project settings. 2: User selects the 'Custom Fields' tab. 3: User clicks 'Add Field' to create a new custom field with specific attributes (e.g., text, dropdown, number). 4: User can also edit existing custom fields or remove them from the project. 5: System saves or updates the custom fields and applies them to tasks within the project."
      },
      {
        "name": "Goal Management",
        "scenario": "A user creates and manages goals with clear objectives, deadlines, link tasks to goal and tracks progress towards goal completion.",
        "precondition": "User has permission to create and manage goals within the project.",
        "actors": "User",
        "steps": "1: User navigates to the Goals section in the project. 2: User clicks on 'Create New Goal'. 3: User fills in the goal details: title, description, and deadline. 4: User clicks 'Save' to create the goal. 5: User updates the goal's progress by tracking completed tasks related to the goal. 6: User can edit, monitor, and adjust the goal status until completion."
      },
      {
        "name": "Reporting and Analytics",
        "scenario": "A user generates reports for task completion rates, project deadlines, and overall project progress. The user can also create custom dashboards to track project performance metrics.",
        "precondition": "User has permission to access reporting features.",
        "actors": "User, System",
        "steps": "1: User navigates to the reporting and analytics section. 2: User selects the type of report (e.g., task completion rate, project deadline overview). 3: User configures the report parameters (e.g., date range, project selection). 4: User generates the report and views the output. 5: User customizes the dashboard to display key performance metrics."
      }
    ],
    "user_story_gpt": "As a project manager, I want to streamline project management through a comprehensive system that allows me to submit and prioritize new project requests while efficiently planning resources. I need to create, assign, and manage tasks, adding automated rules to trigger specific actions based on conditions. The ability to manage custom fields is crucial for tracking additional task attributes. I also aim to set and track project goals with clear objectives and deadlines. Furthermore, I require detailed reporting and analytics to monitor task completion rates, project deadlines, and overall progress, with customizable dashboards to visualize key performance metrics.",
    "user_story_llama": "As a user, I want to utilize a comprehensive project management system so that I can submit new project requests through a structured intake process, identify and allocate resources to tasks, create and manage tasks within a project, and add automated rules to trigger specific actions based on conditions. Additionally, I want to be able to add, modify, or delete custom fields to track additional task attributes, create and manage goals with clear objectives and deadlines, and link tasks to these goals to track progress towards completion. The system should also enable me to generate reports for task completion rates, project deadlines, and overall project progress, as well as create custom dashboards to track key performance metrics, thereby allowing me to efficiently manage projects from intake to completion and make data-driven decisions to optimize project performance.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Product Launches",
        "scenario": "A team creates and manages product launch roadmaps with key milestones, deadlines, and collaboration features.",
        "precondition": "Product concept is approved, and team members are assigned to the project.",
        "actors": "Product Manager, Team Members, Marketing Team",
        "steps": "1: Product Manager creates a product launch roadmap with key milestones and deadlines. 2: Team members collaborate by assigning tasks and commenting on milestones. 3: Milestones are tracked, and progress is updated based on completion."
      },
      {
        "name": "Permissions and Access Control",
        "scenario": "A user manages who can view, edit, or delete tasks/projects by configuring role-based access for different teams or individuals.",
        "precondition": "Admin has permission to manage access control settings.",
        "actors": "Admin, User, Team",
        "steps": "1: Admin navigates to the permissions settings of a project or task. 2: Admin assigns roles (e.g., Viewer, Editor, Admin) to users or teams. 3: Admin configures permissions for viewing, editing, or deleting tasks or projects. 4: User actions are restricted based on their assigned roles. 5: System prevents unauthorized actions like editing or deleting without the necessary permissions."
      },
      {
        "name": "Integration with External Tools",
        "scenario": "A user links Asana with external tools such as Google Drive, Dropbox, GitHub, or Jira to enhance project collaboration and streamline workflows. The user can access files, sync issues, and automate task creation between Asana and third-party tools.",
        "precondition": "User has appropriate permissions to configure external tool integrations.",
        "actors": "User, System, External Tools (Google Drive, Dropbox, GitHub, Jira)",
        "steps": "1: User navigates to the integration settings in Asana. 2: User selects an external tool (e.g., Google Drive, Dropbox, GitHub, Jira). 3: User authorizes Asana to connect with the selected external tool by logging in or granting access. 4: User configures integration settings, such as linking files, syncing tasks, or creating automated workflows. 5: User verifies the successful integration by performing actions (e.g., attaching files from Google Drive or creating a task from GitHub issues)."
      }
    ],
    "user_story_gpt": "As a Product Manager, I need to create and manage detailed product launch roadmaps with clear milestones and deadlines so that my team can collaborate efficiently. I want the ability to configure role-based access to ensure that only authorized team members can view, edit, or delete our tasks and projects, thus maintaining data security and integrity. Additionally, I require the integration of Asana with external tools like Google Drive, Dropbox, GitHub, or Jira to streamline workflows, allowing my team to access files, sync issues, and automate task creation effortlessly. This setup ensures a cohesive and productive project management environment.",
    "user_story_llama": "As a Product Manager, I want to create and manage product launch roadmaps with key milestones, deadlines, and collaboration features, so that my team and I can work together efficiently. I also want to control who can view, edit, or delete tasks and projects by configuring role-based access for different teams or individuals, to ensure that sensitive information is only accessible to authorized personnel. Furthermore, I want to integrate our project management tool with external tools such as Google Drive, Dropbox, GitHub, or Jira, to enhance collaboration, streamline workflows, and automate tasks, thereby increasing productivity and reducing manual effort. This will enable me and my team to focus on delivering high-quality products on time, while maintaining security and compliance with access controls, and leveraging the benefits of integrated workflows with external tools.",
    "length": 3
  },
  {
    "usecases": [
      {
        "name": "View Price for Selected Route",
        "scenario": "User selects the pickup location and destination, and the system shows the ride price. If the user is not logged in, they are prompted to log in before viewing the price.",
        "precondition": "['User is on the ride booking page.', 'Location and destination fields are available for selection.']",
        "actors": "User",
        "steps": "1: User selects their pickup location. 2: User selects their destination. 3: System checks if the user is logged in. 4: {'condition': 'User is not logged in', 'steps': ['System prompts the user to log in.', 'User provides login credentials.', 'System verifies the login and, if valid, redirects to the price page.']} 5: {'condition': 'User is logged in', 'steps': ['System calculates the price for the selected route.', 'System displays the price along with ride options (e.g., UberX, UberXL, etc.).']}"
      },
      {
        "name": "Sign Up with Account Verification",
        "scenario": "The user tries to sign up for a new Uber account. The system checks if an account with the provided email or phone number already exists. If the account exists, the user is notified and cannot proceed. If the account does not exist, the signup is successful.",
        "precondition": "['User is on the sign-up page.', 'User provides valid account information (email/phone number, password, and other required details).']",
        "actors": "User",
        "steps": "1: User enters the required account information (e.g., email, phone number, password). 2: User submits the sign-up form. 3: System checks if an account with the provided email or phone number already exists. 4: {'condition': 'An account exists with the provided email or phone number', 'steps': [\"System displays an error message to the user: 'An account with this email/phone number already exists. Please log in.'\", 'User is prompted to log in or use a different email/phone number.']} 5: {'condition': 'No account exists with the provided email or phone number', 'steps': ['System successfully creates a new account.', 'User is automatically logged in or directed to complete the sign-up process (e.g., email/phone verification).']}"
      },
      {
        "name": "Log in with QR Code",
        "scenario": "The user can log in by scanning a QR code displayed on their device using their phone’s camera. Both devices must be connected to the same WiFi or hotspot, and the user must be logged in to the Uber app on their phone.",
        "precondition": "['User is on the login page on a desktop or another device (not the phone).', 'A valid QR code is generated and displayed on the desktop/device.', 'User has the Uber app installed on their phone and is logged in.', 'Both devices (desktop and phone) are connected to the same WiFi network or hotspot.']",
        "actors": "User",
        "steps": "1: User selects the 'Log in with QR code' option on the desktop/device. 2: System generates and displays a QR code on the screen. 3: User scans the QR code with their phone’s camera. 4: The Uber app on the phone detects the QR code and processes the login request. 5: The phone app verifies if the devices are on the same WiFi or hotspot. 6: {'condition': 'Both devices are on the same network', 'steps': ['User is automatically logged in on the desktop/device.', 'System redirects the user to the next page (e.g., dashboard or price page).']} 7: {'condition': 'Devices are not on the same network', 'steps': [\"System displays an error message to the user: 'Devices must be connected to the same WiFi or hotspot.'\"]}"
      },
      {
        "name": "Request a Ride",
        "scenario": "Passengers request for a ride to reach their destination",
        "precondition": "Passengers must be logged in to Uber",
        "actors": "Passengers, Riders",
        "steps": "1: Passengers choose their preferred vehicle type 2: Request a ride 3: Riders confirm the ride"
      },
      {
        "name": "Payment Option Selection",
        "scenario": "A user selects a preferred payment method for their Uber ride.",
        "precondition": "The user has an active Uber account and is ready to request or complete a ride.",
        "actors": "Registered User",
        "steps": "1: {'scenario': 'Before placing order', 'description': 'Select payment method before requesting a ride.', 'steps': ['Open payment methods section in the app menu', 'Select payment method']} 2: {'scenario': 'While placing order', 'description': 'Select payment method while requesting a ride.', 'steps': ['Tap the payment icon next to the pickup address', 'Select payment method']}"
      },
      {
        "name": "Send Parcel with Uber Package System",
        "scenario": "A user wants to send a parcel to a specified destination through the Uber package delivery system. The system collects both the sender and receiver's information and asks for payment details, allowing either the sender or receiver to pay.",
        "precondition": "[\"The user is on the Uber app's parcel sending page.\", 'The user has the parcel details ready (e.g., parcel size, weight, and type).']",
        "actors": "Sender, Receiver, Uber System",
        "steps": "1: The sender selects the 'Send Parcel' option in the Uber app. 2: The system asks for sender's information (name, phone number, pickup location). 3: The sender fills in the required information. 4: The system asks for receiver's information (name, phone number, delivery location). 5: The sender enters the receiver's details. 6: The system prompts for the payment method, with options for the sender or receiver to pay. 7: {'condition': 'Sender opts to pay', 'steps': [\"The system asks for the sender's payment details.\", 'The sender provides payment information.', 'The system verifies the payment method and processes the payment.']} 8: {'condition': 'Receiver opts to pay', 'steps': ['The system informs the receiver that payment is required upon delivery.', 'The system completes the order, and the parcel is picked up from the sender.']} 9: The system confirms the booking and sends a notification to both the sender and receiver."
      },
      {
        "name": "Rent a Vehicle through Uber Rental System",
        "scenario": "A user wants to rent a vehicle for multiple stops with a custom pickup time. The system allows the user to select the pickup location, multiple destinations, and pick a time for pickup. The rental duration affects the price, and users can select a car model to determine the final cost.",
        "precondition": "['The user is logged into their Uber account.', 'The user has a clear idea of the pickup location, drop-off locations, and rental duration.']",
        "actors": "User, Uber System",
        "steps": "1: The user selects the 'Rent a Vehicle' option on the Uber app. 2: The system prompts the user to select a pickup location. 3: The user chooses a pickup location from available places or enters a custom address. 4: The system asks for one or more destinations where the user wants to go. 5: The user selects the destination(s) (one or multiple). 6: The system prompts the user to select a pickup time. 7: The user selects a custom pickup time (up to 90 days in advance). 8: The system displays options for rental durations, allowing the user to select the time for how long they need the vehicle (e.g., 1 hour, 2 hours, 4 hours). 9: The user chooses the rental time. 10: The system calculates and shows the price based on the rental time. 11: The system displays car options, along with prices based on the selected duration and vehicle type. 12: The user selects a car. 13: The system confirms the rental booking and provides details for both the pickup time and estimated cost. 14: The user receives a confirmation notification with booking details."
      },
      {
        "name": "Ride Payment",
        "scenario": "A user completes a ride and makes payment via card or mobile wallet.",
        "precondition": "The passenger is logged in to Uber and requests a ride.",
        "actors": "Passenger",
        "steps": "1: Passenger requests a ride and selects a payment method (card or mobile wallet). 2: System assigns a driver and provides an estimated fare for the ride. 3: Passenger completes the ride and reaches the drop-off location. 4: System calculates the final fare based on the ride details (e.g., distance, time). 5: Passenger confirms the payment method and initiates payment. 6: System processes the payment through the selected method. 7: System updates the ride status as completed and sends a payment confirmation to the passenger. 8: Passenger receives a receipt via the app or email."
      },
      {
        "name": "Rate the Ride",
        "scenario": "User rates the driver and the ride experience after completion of a trip.",
        "precondition": "Ride must be completed, and the user should have access to rating options on the app.",
        "actors": "Passenger, System",
        "steps": "1: Passenger receives a notification after the ride to rate the driver. 2: Passenger navigates to the rating screen in the app. 3: Passenger selects a rating from 1 to 5 stars. 4: Passenger can optionally add feedback or comments. 5: System records the rating and feedback in the driver’s profile."
      },
      {
        "name": "Rate the Passenger",
        "scenario": "Driver rates the passenger and their behavior after completion of a trip.",
        "precondition": "The ride must be completed, and the driver should have access to rating options on the app.",
        "actors": "Driver, System",
        "steps": "1: Driver receives a prompt or notification to rate the passenger after the ride is completed. 2: Driver navigates to the rating screen in the app. 3: Driver selects a rating from 1 to 5 stars. 4: Driver can optionally add feedback or comments about the passenger's behavior. 5: System records the rating and feedback in the passenger’s profile."
      },
      {
        "name": "Cancel a Ride",
        "scenario": "User cancels a ride before or after a driver is assigned.",
        "precondition": "['User must be logged in', 'User must have requested a ride', 'Penalty rules must apply based on the cancellation time']",
        "actors": "User",
        "steps": "1: User navigates to their active ride request 2: User selects the option to cancel the ride 3: System checks if a driver has already been assigned or if the driver is en route 4: System applies penalty if applicable 5: System updates the ride status to canceled 6: System sends a notification to the driver about the cancellation 7: System confirms the cancellation to the user"
      },
      {
        "name": "Access Help/Support Option",
        "scenario": "User seeks assistance through the Help section in the Uber app for ride-related issues, payment concerns, or account management.",
        "precondition": "['User must be logged in to the Uber app']",
        "actors": "User",
        "steps": "1: User navigates to the Help section from the menu 2: User selects a help category (e.g., ride issues, payment, account, etc.) 3: User chooses the relevant issue within the selected category 4: System displays information or prompts user to provide details 5: User submits a support request if the issue is not resolved by the information provided 6: System sends a confirmation and assigns the issue to Uber support"
      },
      {
        "name": "User Registration",
        "scenario": "A new user registers on the platform.",
        "precondition": "['User must not already have an account.', 'User must provide valid registration information.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to the registration page. 2: User fills in the required details (email, password, etc.). 3: System validates the details and creates a new user account."
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs into their account.",
        "precondition": "['User must have a registered account.', 'User must enter valid login credentials.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to the login page. 2: User enters email and password. 3: System validates the credentials and grants access to the account."
      }
    ],
    "user_story_gpt": "As an Uber user, I want a seamless experience when interacting with the app for various services. For a smooth ride booking process, I can view prices for selected routes after logging in, explore different vehicle options, and choose my preferred payment method either before or during the ride request. I'm also able to log in quickly using my phone by scanning a QR code, ensuring convenience and security. Additionally, I can sign up easily, with the system ensuring my provided details are unique. I feel supported with an accessible help section and have the flexibility to send parcels, rent vehicles for multiple stops, and decide on custom pickup times. After completing rides, I can rate my experiences and pay seamlessly through cards or mobile wallets, receiving confirmations and receipts instantly. The ability to cancel rides if needed, assisted by clear rules, further enhances my user experience. Finally, the system facilitates quick registration and login, ensuring my journey with Uber is personalized, efficient, and reliable.\"}",
    "user_story_llama": "As a user of the Uber platform, I want to be able to view prices for selected routes, sign up for an account with verification, log in using a QR code, request rides, select payment options, send parcels, rent vehicles, make payments, rate rides and drivers, cancel rides when necessary, access help and support, register for an account, and log in to my account, so that I can seamlessly use the various services provided by Uber, including ride-hailing, parcel delivery, and vehicle rental, with ease and convenience, while also being able to manage my account, access support, and provide feedback on my experiences.",
    "length": 14
  },
  {
    "usecases": [
      {
        "name": "Product Search",
        "scenario": "A user searches for products on Amazon.",
        "precondition": "['User must be on the homepage or product search page.']",
        "actors": "['User', 'System']",
        "steps": "1: User enters a search term into the search bar. 2: System fetches relevant products and displays them."
      },
      {
        "name": "Add to Cart",
        "scenario": "A user adds a product to their shopping cart.",
        "precondition": "['User must be logged in.', 'Product must be in stock.']",
        "actors": "['User', 'System']",
        "steps": "1: User selects a product. 2: User clicks 'Add to Cart'. 3: System adds the product to the user's cart."
      },
      {
        "name": "Checkout",
        "scenario": "A user proceeds to checkout with products in their cart.",
        "precondition": "['User must be logged in.', 'User must have items in their cart.']",
        "actors": "['User', 'System']",
        "steps": "1: User clicks 'Proceed to Checkout'. 2: System presents the shipping and payment options. 3: User completes the order."
      },
      {
        "name": "View Order History",
        "scenario": "A user views their past orders on Amazon.",
        "precondition": "['User must be logged in.', 'User must have placed at least one order.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to 'Account' and selects 'Order History'. 2: System fetches the order history from the database. 3: System displays the list of past orders."
      },
      {
        "name": "Product Review Submission",
        "scenario": "A user submits a review for a product they purchased.",
        "precondition": "['User must have purchased the product they are reviewing.']",
        "actors": "['User', 'System']",
        "steps": "1: User selects a product from their order history. 2: User writes and submits a review. 3: System posts the review on the product page."
      },
      {
        "name": "Cancel Order",
        "scenario": "A user cancels an order they have placed.",
        "precondition": "['The order must not be shipped.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to 'Order History'. 2: User selects an order and clicks 'Cancel Order'. 3: System processes the cancellation."
      },
      {
        "name": "Change Shipping Address",
        "scenario": "A user changes the shipping address for an upcoming order.",
        "precondition": "['Order must not be shipped.', 'User must provide a valid shipping address.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to 'Order History'. 2: User selects an order and clicks 'Change Shipping Address'. 3: User provides a new shipping address. 4: System updates the shipping address."
      },
      {
        "name": "Apply Discount Code",
        "scenario": "A user applies a discount code to their purchase.",
        "precondition": "['User must have a valid discount code.', 'User must have items in their cart.']",
        "actors": "['User', 'System']",
        "steps": "1: User enters a discount code during checkout. 2: System validates the code and applies the discount."
      },
      {
        "name": "Track Shipment",
        "scenario": "A user tracks the status of their shipment.",
        "precondition": "['User must be logged in.', 'Order must have been shipped.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to 'Order History'. 2: User selects the shipped order and clicks 'Track Shipment'. 3: System displays the current status of the shipment."
      },
      {
        "name": "Request Refund",
        "scenario": "A user requests a refund for an order they have received.",
        "precondition": "['User must have received the order.', 'Order must be eligible for a refund.']",
        "actors": "['User', 'System']",
        "steps": "1: User navigates to 'Order History'. 2: User selects the received order and clicks 'Request Refund'. 3: System processes the refund request."
      }
    ],
    "user_story_gpt": "As an Amazon shopper, I want to efficiently search for products, add them to my cart, and proceed to checkout with ease, ensuring I can apply discount codes and select preferred shipping options. I want the ability to manage my orders by tracking shipments, changing shipping addresses before dispatch, and canceling or requesting refunds as needed. Reviewing my past orders should be accessible, and I want to contribute by leaving reviews for purchased products. Overall, I aim for a seamless shopping experience where my interactions with the platform are intuitive and transactional management is straightforward.",
    "user_story_llama": "As a user, I want to be able to search for products on Amazon, add them to my cart, and proceed to checkout with the option to apply a discount code, so that I can purchase the products I need efficiently. Additionally, I want to be able to view my order history, submit reviews for products I've purchased, and track the status of my shipments. I also want the ability to cancel orders, change shipping addresses, and request refunds for orders I've received, so that I can manage my orders effectively. Furthermore, I want the system to validate my actions, such as ensuring I'm logged in and have a valid shipping address, to prevent errors and ensure a smooth shopping experience.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Search for Listings",
        "scenario": "A guest searches for available listings based on location, dates, and other filters.",
        "precondition": "The guest is on the Airbnb homepage or search page.",
        "actors": "Guest",
        "steps": "1: Guest enters a location in the search bar. 2: Guest selects dates for the stay. 3: Guest applies additional filters like number of guests, type of property, and amenities. 4: System displays available listings that match the search criteria."
      },
      {
        "name": "Booking a Listing",
        "scenario": "A guest books a listing after selecting the property, dates, and number of guests.",
        "precondition": "Guest has selected a listing and dates are available for booking.",
        "actors": "Guest",
        "steps": "1: Guest selects a listing and enters booking details. 2: System calculates the total price including service fees and taxes. 3: Guest confirms the booking. 4: System sends a confirmation to the guest and host."
      },
      {
        "name": "Cancel a Booking",
        "scenario": "A guest cancels a confirmed booking before the check-in date.",
        "precondition": "Guest has a confirmed booking.",
        "actors": "Guest",
        "steps": "1: Guest navigates to the booking details page. 2: Guest selects the option to cancel the booking. 3: System confirms the cancellation and updates the booking status."
      },
      {
        "name": "Host Listing Creation",
        "scenario": "A host creates a new listing by providing property details, pricing, and availability.",
        "precondition": "Host is logged in and has completed the account verification process.",
        "actors": "Host",
        "steps": "1: Host navigates to the create listing page. 2: Host enters property details (e.g., location, size, amenities). 3: Host sets pricing and availability. 4: Host submits the listing for review."
      },
      {
        "name": "Host Reviews a Guest",
        "scenario": "A host leaves a review for a guest after their stay is complete.",
        "precondition": "Guest has completed their stay.",
        "actors": "Host",
        "steps": "1: Host navigates to the review section. 2: Host enters a review and rating. 3: Host submits the review. 4: System publishes the review."
      },
      {
        "name": "Guest Reviews a Host",
        "scenario": "A guest leaves a review for a host after their stay is complete.",
        "precondition": "Guest has completed their stay.",
        "actors": "Guest",
        "steps": "1: Guest navigates to the review section. 2: Guest enters a review and rating. 3: Guest submits the review. 4: System publishes the review."
      },
      {
        "name": "Guest Messaging Host",
        "scenario": "A guest sends a message to the host to inquire about a listing.",
        "precondition": "Guest has found a listing they are interested in.",
        "actors": "Guest",
        "steps": "1: Guest clicks on the message host button. 2: Guest enters their message. 3: Guest sends the message to the host. 4: System delivers the message to the host."
      },
      {
        "name": "Host Blocking Dates",
        "scenario": "A host blocks off dates on their listing to prevent bookings.",
        "precondition": "Host has an active listing.",
        "actors": "Host",
        "steps": "1: Host navigates to the calendar section of their listing. 2: Host selects the dates to block. 3: Host saves the changes. 4: System updates the calendar to reflect the blocked dates."
      },
      {
        "name": "View Booking History",
        "scenario": "A guest views their booking history.",
        "precondition": "Guest has past bookings.",
        "actors": "Guest",
        "steps": "1: Guest navigates to the booking history page. 2: System displays a list of all past bookings."
      },
      {
        "name": "Guest Payment Processing",
        "scenario": "A guest books a property on Airbnb, selects payment options, and completes the payment process. The system validates the payment details, processes the payment, and updates the booking status to confirmed or fails with an error message.",
        "precondition": "['Guest has selected a property to book.', 'Guest is on the payment page with booking details.']",
        "actors": "Guest, Payment Gateway, Airbnb System",
        "steps": "1: Guest selects a payment method (e.g., credit card, PayPal). 2: Guest enters valid payment details. 3: System validates the payment details. 4: System sends payment details to the payment gateway. 5: Payment Gateway processes the payment and returns the response. 6: If successful, booking status is updated to 'confirmed' and a confirmation email is sent to the guest. 7: If failed, the booking remains 'pending' and an error message is displayed to the guest."
      },
      {
        "name": "Manage Wishlist",
        "scenario": "User adds listings to their wishlist to save for future reference. They can remove or view listings later.",
        "precondition": "User is logged in to their account.",
        "actors": "User",
        "steps": "1: User browses listings 2: User adds a listing to the wishlist 3: User removes a listing from the wishlist 4: User views wishlist"
      },
      {
        "name": "Redeem Airbnb Gift Card",
        "scenario": "A guest redeems an Airbnb gift card to add credit to their account, which can be used for future bookings.",
        "precondition": "['Guest has an Airbnb gift card.', 'Guest is logged into their Airbnb account.']",
        "actors": "Guest, Airbnb System",
        "steps": "1: Guest navigates to the gift card redemption page. 2: Guest enters the gift card code. 3: System validates the gift card code. 4: If valid, system adds the gift card balance to the guest's account. 5: If invalid, system displays an error message."
      },
      {
        "name": "Buy Airbnb Gift Card",
        "scenario": "A guest purchases an Airbnb gift card to send to themselves or another recipient.",
        "precondition": "['Guest is logged into their Airbnb account.', 'Guest has a valid payment method.']",
        "actors": "Guest, Payment Gateway, Airbnb System",
        "steps": "1: Guest navigates to the gift card purchase page. 2: Guest selects a gift card amount or customizes the amount. 3: Guest provides recipient information (name, email, message) or chooses to send the card to themselves. 4: Guest reviews the order and proceeds to payment. 5: System processes the payment via the payment gateway. 6: If successful, the system sends the gift card to the recipient via email. 7: If payment fails, an error message is displayed, and the order is not completed."
      }
    ],
    "user_story_gpt": "As an Airbnb user, I want to easily search for and book listings by entering a location, selecting dates, and applying filters for my ideal property. Once booked, I can manage my reservation, including canceling if needed, and communicate directly with the host for inquiries. I can also review my past booking history, add desirable properties to my wishlist, and review and rate my hosts after my stay. As a host, I need to efficiently list my property, set pricing and availability, and block dates as required. Additionally, I can review guests post-stay. The platform supports seamless payment processing and the ability to purchase or redeem gift cards, enhancing my overall booking experience.",
    "user_story_llama": "As a guest, I want to be able to search for available listings based on location, dates, and other filters, so that I can find the perfect place to stay. I also want to be able to book a listing, cancel a booking if needed, and view my booking history. Additionally, I want to be able to send messages to hosts to inquire about listings, and leave reviews for hosts after my stay is complete. Furthermore, I want to be able to manage my wishlist, redeem Airbnb gift cards, and purchase gift cards for myself or others. As a host, I want to be able to create new listings, block off dates on my calendar, and leave reviews for guests. I also want to be able to receive messages from guests and have a seamless payment processing experience for my guests, including the ability to handle guest payments and update booking status accordingly. Overall, I want to have a user-friendly and efficient experience on the Airbnb platform, with easy access to all the features and functionality I need to find, book, and manage my stays, as well as manage my listings and interactions with guests.",
    "length": 13
  },
  {
    "usecases": [
      {
        "name": "Admission Test Quiz Attempt",
        "scenario": "A registered user attempts a quiz of any unit.",
        "precondition": "User is logged in and the quiz is available.",
        "actors": "Registered User",
        "steps": "1: User chooses unit and a set 2: User navigates to the quiz page 3: User answers the questions 4: User submits the quiz"
      },
      {
        "name": "Course Enrollment",
        "scenario": "A registered user enrolls in a course on the 10 Minute School's website.",
        "precondition": "User is logged in and the course is available for enrollment.",
        "actors": "Registered User",
        "steps": "1: User selects course 2: User navigates to the course page 3: User clicks on the 'Buy course' button 4: User confirms enrollment"
      }
    ],
    "user_story_gpt": "As a registered user of the 10 Minute School platform, I want to easily enroll in available courses and attempt quizzes related to various units, so that I can enhance my learning experience. Once logged in, I should be able to select a course of interest, navigate to its page, and enroll by confirming my decision. Additionally, I should have the ability to choose any unit and attempt the associated quizzes by submitting my answers, enabling me to track my progress efficiently.",
    "user_story_llama": "As a registered user, I want to be able to enroll in a course on the 10 Minute School's website and attempt quizzes for any unit, so that I can access the course materials and assess my knowledge. Specifically, I want to be able to select a course, navigate to the course page, and confirm my enrollment, as well as choose a unit, navigate to the quiz page, answer questions, and submit the quiz, all while being logged in and having the course and quiz available to me.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Beta Tester Registration",
        "scenario": "User registers to become a beta tester by providing all required personal information and agreeing to be contacted for feedback.",
        "precondition": "User is logged in to their account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Beta Tester Registration' page. 2: User fills in the 'Full Name' field. 3: User enters their 'Mobile Number'. 4: User provides their 'Email Address'. 5: User enters their 'Profession'. 6: User selects their 'Segment' from the dropdown. 7: User selects their 'District' from the dropdown. 8: User provides their 'Thana'. 9: User fills in their 'Address'. 10: User shares ideas in the provided field. 11: User shares feedback in the provided field. 12: User selects their preference for being contacted. 13: User clicks on the 'Submit' button. 14: System validates all input fields and submits the registration."
      },
      {
        "name": "Change Password",
        "scenario": "User changes their password by entering the old password, new password, and confirming the new password.",
        "precondition": "User is logged in to their account.",
        "actors": "User",
        "steps": "1: User navigates to the 'Change Password' page. 2: User enters the current password in the 'Old Password' field. 3: User enters the new password in the 'New Password' field. 4: User re-enters the new password in the 'Confirm Password' field. 5: User clicks on the 'Submit' button. 6: System verifies the old password, checks if the new passwords match, and updates the password if valid."
      }
    ],
    "user_story_gpt": "As a user, I want to easily register as a beta tester by providing my personal details and feedback preferences so that I can be considered for future testing opportunities. Additionally, I want a simple process to change my password by entering my old and new passwords, ensuring my account remains secure and accessible.",
    "user_story_llama": "As a user, I want to be able to register to become a beta tester by providing my personal information and agreeing to be contacted for feedback, so that I can contribute to the development process and share my ideas and feedback. Additionally, I want to be able to change my password by entering my old password, new password, and confirming the new password, so that I can maintain the security and privacy of my account.",
    "length": 2
  },
  {
    "usecases": [
      {
        "name": "Book Purchase Process",
        "scenario": "User selects books, adds them to the cart, provides personal details and payment method, and completes the purchase.",
        "precondition": "User is on the bookstore page.",
        "actors": "User, System",
        "steps": "1: System displays a list of available books. 2: User selects one or more books and adds them to the cart. 3: User clicks 'Proceed to Checkout' and fills out their name, phone number, and delivery address. 4: User selects a payment method 5: User clicks 'Place Order' to complete the purchase."
      }
    ],
    "user_story_gpt": "As a user, I want to efficiently purchase books online by selecting from a list of available options, adding my chosen books to a cart, and completing my purchase with ease. The system should allow me to provide my personal details, select a preferred payment method, and seamlessly finalize my order for a convenient and efficient purchasing experience.",
    "user_story_llama": "As a user, I want to use the bookstore system so that I can select books, add them to my cart, provide my personal details and payment method, and complete the purchase, allowing me to easily buy books online with a seamless checkout process.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Online Batch Admission Process",
        "scenario": "User selects an HSC batch, chooses an available online course, fills in personal details, receives OTP for verification, provides city and address, selects payment method, and completes batch enrollment.",
        "precondition": "User is on the online batch admission page.",
        "actors": "User, System",
        "steps": "1: User selects 'HSC Batch' from the batch options. 2: System displays a list of available online courses. 3: User selects one or more courses from the list. 4: User fills in their name and phone number. 5: System sends an OTP to the provided phone number for verification. 6: User enters the OTP. 7: User provides city and address details. 8: User selects a payment method. 9: User clicks 'Enroll' to complete the batch enrollment."
      },
      {
        "name": "Enroll in Free Online Demo Class",
        "scenario": "A student or guardian enrolls in a free online demo class, selects the desired time slot, and provides the necessary login credentials.",
        "precondition": "User must be a student or guardian and must have access to valid login credentials.",
        "actors": "Student, Guardian",
        "steps": "1: User selects their role as either a 'Student' or 'Guardian'. 2: User selects their district from a drop-down menu or search bar. 3: User selects the class/Batch (HSC 26 Batch or HSC 25 Batch). 4: User selects an available time slot for the demo class (e.g., 29 Sept 8:30 PM, English: Completing Sentence). 5: User provides their mobile number or email address for verification. 6: User enters their password for authentication. 7: Upon successful login, the user is enrolled in the demo class and can access previous recorded classes."
      },
      {
        "name": "Free Offline Course Booking",
        "scenario": "User selects a free Course Programme with suitable branch location, fills in their personal details, and completes the booking process.",
        "precondition": "Student is on the free offline class booking page",
        "actors": "Student, System",
        "steps": "1: Student selects 'IELTS Programme' from the two course options: 'IELTS Programme' and 'Spoken English'. 2: Student selects a class location with available slots. 3: Student fills out their name, mobile number, district, education level, and expected IELTS score. 4: Student selects an expected IELTS class date. 5: Student submits the booking form."
      },
      {
        "name": "User Login",
        "scenario": "A user logs into their account on the 10 Minute School website or registers if they don't have an account.",
        "precondition": "User has access to the internet and a valid email address or mobile number.",
        "actors": "User",
        "steps": "1: User navigates to the login/registration page 2: User enters required details (e.g., email, password, or mobile number, OTP if registering) 3: User submits the login/registration form"
      },
      {
        "name": "Search Courses",
        "scenario": "A user searches for courses using keywords and filters.",
        "precondition": "User is on the search page.",
        "actors": "User",
        "steps": "1: User enters a keyword in the search bar 2: User applies filters (e.g., class, course type, price) 3: User submits the search 4: System displays search results"
      },
      {
        "name": "Free Session Booking",
        "scenario": "A user schedules a session with a student advisor. There are two types of sessions available: one for students in grades 6-12 and admission seekers, and another for individuals interested in skill development.",
        "precondition": "User is on the 'Book a free session page' of either types.",
        "actors": "User",
        "steps": "1: User either selects the class he/she is in or selects the 'Skill Development' option. 2: User writes his/her full name. 3: User enters his/her valid contact no. 4: User chooses the time when a student advisor will call him."
      },
      {
        "name": "Joining as a teacher",
        "scenario": "A user fills out the form to join as a teacher.",
        "precondition": "User is on the 'Join as a teacher' page.",
        "actors": "User",
        "steps": "1: User writes his/her full name. 2: User inputs his/her email address. 3: User enters his/her contact no. 4: User selects his/her current location between Inside Dhaka and Outside Dhaka. 5: User writes his/her current profession. 6: User fills in his/her university name. 7: User writes his/her department name. 8: User specifies his/her current education year. 9: User inputs his/her Facebook ID Link. 10: User selects two subjects he/she is interested in teaching. 11: User chooses the segment he/she is most comfortable teaching. The segments are: Class 6-10, HSC and University Admission and both. 12: User can provide link to a LIVE or recorded class he/she has taken. 13: User specifies if he/she has any teaching experience. 14: User writes the years of experience he/she has. 15: User can elaborate on his/her teaching experience along with other platform experience if any. 16: User can summarize why he/she wants to teach there. 17: User can upload his/her CV."
      }
    ],
    "user_story_gpt": "As a user of the 10 Minute School platform, I want to easily navigate and utilize various features such as enrolling in HSC batches and demo classes, booking free offline courses, and scheduling sessions with student advisors. I can search for courses using keywords and filters, ensuring I find the best fit for my learning needs. The platform also allows me to log in or register efficiently. Additionally, I have the option to join as a teacher by filling out a detailed form to share my teaching background and preferences. Overall, the platform provides a comprehensive and user-friendly interface to support both learners and educators.",
    "user_story_llama": "As a user, I want to be able to navigate through the 10 Minute School website seamlessly, so that I can enroll in online batches, book free offline courses, and join free demo classes. I want to be able to log in to my account or register if I don't have one, and search for courses using keywords and filters. Additionally, I want to be able to book free sessions with student advisors and join as a teacher by filling out the required form. The system should allow me to select my role, choose courses, provide personal details, and complete the booking or enrollment process efficiently. Furthermore, I want to be able to access previous recorded classes, receive verification OTPs, and submit forms without any hassle, so that I can achieve my goals of learning and personal development.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Create a New Task",
        "scenario": "A user creates a new task in their Todoist account.",
        "precondition": "User is logged into their Todoist account.",
        "actors": "User",
        "steps": "1: User clicks on the 'Add Task' button. 2: User enters the task name. 3: User sets optional details such as due date, priority, labels. 4: User saves the task. 5: System adds the task to the user's task list."
      },
      {
        "name": "Edit an Existing Task",
        "scenario": "A user edits the details of an existing task.",
        "precondition": "User is logged in and has existing tasks.",
        "actors": "User",
        "steps": "1: User selects a task from their task list. 2: User clicks on the 'Edit' option. 3: User modifies the task details. 4: User saves the changes. 5: System updates the task with new details."
      },
      {
        "name": "Complete a Task",
        "scenario": "A user marks a task as completed.",
        "precondition": "User is logged in and has existing tasks.",
        "actors": "User",
        "steps": "1: User views their task list. 2: User clicks on the checkbox next to the task. 3: System marks the task as completed and moves it to the completed tasks list."
      },
      {
        "name": "Delete a Task",
        "scenario": "A user deletes a task from their task list.",
        "precondition": "User is logged in and has existing tasks.",
        "actors": "User",
        "steps": "1: User selects a task from their task list. 2: User clicks on the 'Delete' option. 3: System prompts for confirmation. 4: User confirms the deletion. 5: System deletes the task."
      },
      {
        "name": "Create a New Project",
        "scenario": "A user creates a new project to organize tasks.",
        "precondition": "User is logged in.",
        "actors": "User",
        "steps": "1: User clicks on the 'Add Project' button. 2: User enters the project name. 3: User selects a color and other optional settings. 4: User saves the project. 5: System adds the new project to the user's project list."
      },
      {
        "name": "Share a Project with Another User",
        "scenario": "A user shares a project with another Todoist user for collaboration.",
        "precondition": "User is logged in and has a project to share.",
        "actors": "User",
        "steps": "1: User selects a project. 2: User clicks on the 'Share' option. 3: User enters the email address of the collaborator. 4: User sends the invitation. 5: System sends an invitation to the collaborator."
      },
      {
        "name": "Set Reminders for Tasks",
        "scenario": "A user sets reminders for their tasks to receive notifications.",
        "precondition": "User is logged in and has existing tasks.",
        "actors": "User",
        "steps": "1: User selects a task. 2: User adds a reminder to the task, specifying time and method (push notification, email). 3: User saves the reminder. 4: System schedules the reminder."
      },
      {
        "name": "Assign Labels and Priorities to Tasks",
        "scenario": "A user assigns labels and priorities to tasks for better organization.",
        "precondition": "User is logged in and has existing tasks.",
        "actors": "User",
        "steps": "1: User selects a task. 2: User assigns one or more labels to the task. 3: User sets the priority level of the task. 4: User saves the changes. 5: System updates the task with labels and priority."
      },
      {
        "name": "Use Filters to View Tasks",
        "scenario": "A user uses filters to view tasks based on specific criteria.",
        "precondition": "User is logged in and has tasks with various attributes.",
        "actors": "User",
        "steps": "1: User navigates to the filters section. 2: User selects or creates a filter (e.g., tasks due today, high priority). 3: System displays tasks matching the filter criteria."
      },
      {
        "name": "Search for Tasks",
        "scenario": "A user searches for tasks based on keywords, projects, labels, and other filters.",
        "precondition": "User is logged in and has tasks with various attributes.",
        "actors": "User",
        "steps": "1: User enters a search query in the search bar. 2: System displays tasks that match the search criteria."
      }
    ],
    "user_story_gpt": "As a user, I want to efficiently manage my tasks in Todoist by creating new tasks with specific details such as due dates, priority, and labels. I can edit and update these tasks, or mark them as completed to keep my list organized. I should be able to delete tasks when necessary, ensuring my task list remains up-to-date. To enhance productivity, I can create projects to organize tasks, share these projects with collaborators, and set reminders to receive timely notifications. Additionally, I want to assign labels and set priorities to tasks for better organization. I need the ability to filter and search through tasks using keywords, projects, and labels to quickly find what I need. This structured approach helps me maintain an efficient workflow, ensuring nothing falls through the cracks.",
    "user_story_llama": "As a Todoist user, I want to be able to create and manage my tasks and projects efficiently, so that I can stay organized and focused on my work. This includes creating new tasks and projects, editing and deleting existing ones, and marking tasks as completed. I also want to be able to share my projects with others for collaboration, set reminders for upcoming tasks, and assign labels and priorities to tasks for better organization. Additionally, I want to be able to use filters and search functionality to quickly find specific tasks based on various criteria, such as due date, project, or label. By having these features, I will be able to effectively manage my tasks and projects, and receive timely reminders and notifications to ensure I stay on track and meet my deadlines.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Integrate Todoist with Google Calendar",
        "scenario": "A user integrates their Todoist account with Google Calendar to synchronize tasks.",
        "precondition": "User is logged in to Todoist and has a Google account.",
        "actors": "User",
        "steps": "1: User navigates to the integrations settings. 2: User selects Google Calendar integration. 3: User authorizes Todoist to access their Google account. 4: User configures synchronization settings. 5: System syncs tasks with Google Calendar."
      }
    ],
    "user_story_gpt": "As a user, I want to integrate my Todoist account with Google Calendar so that my tasks are automatically synchronized, allowing me to manage my schedule more efficiently. By authorizing Todoist to access my Google account, I can configure synchronization settings to ensure all my tasks appear seamlessly in my calendar.",
    "user_story_llama": "As a user, I want to integrate my Todoist account with Google Calendar so that I can synchronize my tasks, by navigating to the integrations settings, selecting Google Calendar integration, authorizing Todoist to access my Google account, configuring synchronization settings, and having the system automatically sync my tasks with Google Calendar, thereby streamlining my task management across both platforms.",
    "length": 1
  },
  {
    "usecases": [
      {
        "name": "Product Search and Selection",
        "scenario": "User searches for products using a keyword and selects a desired product from the search results.",
        "precondition": "User is on the product search page, and the product catalog is loaded in the system.",
        "actors": "User, System",
        "steps": "1: User enters a product name or keyword in the search bar. 2: System displays a list of products that match the entered keyword. 3: User selects a product from the search results. 4: System displays the product details page."
      },
      {
        "name": "Product Filtering",
        "scenario": "User filters products based on various attributes such as category, price range, brand, and rating to narrow down the search results.",
        "precondition": "User is on the product listing page, and the product catalog is loaded with attribute filters available.",
        "actors": "User, System",
        "steps": "1: User selects one or more filter attributes (e.g., category, price range, brand, rating). 2: System updates the product listing based on the selected filters. 3: User reviews the filtered product list. 4: User can further refine the results by selecting additional filters or removing some filters."
      },
      {
        "name": "Add New Product",
        "scenario": "Seller adds a new product on the product list, with the available number",
        "precondition": "Seller is already registered in the application as a verified seller",
        "actors": "Seller, Admin, System",
        "steps": "1: Seller adds the name and price of the product he/she wants to add 2: Seller gives additional informations about the product 3: Seller submits his/her add product request 4: System checks if his/her addition request is valid 5: Admin approves or disapproves"
      },
      {
        "name": "Ask a Question.",
        "scenario": "Customers can ask questions about any specific product.",
        "precondition": "['Customer must be logged in as a valid and registered user.', \"Customer must be in a product's page.\"]",
        "actors": "Customer, System",
        "steps": "1: Customer selects a product. 2: System shows all the Q&A about the specific product. 3: Customer submits a new question about the specific product."
      },
      {
        "name": "Answer a Question.",
        "scenario": "Seller or other customers can answer any specific question about any specific product.",
        "precondition": "['Customer or seller must be logged in as a valid and registered user.', 'Customer or seller must select a question in a product page.']",
        "actors": "Customer, Seller, System",
        "steps": "1: Customer or seller selects a product. 2: System shows all the Q&A about the specific product. 3: Customer or seller selects a specific question. 4: Customer or seller submits an answer for the specific question."
      },
      {
        "name": "Add a New Product to the Cart",
        "scenario": "Customer adds a new product to his cart",
        "precondition": "[\"Customer must be in a product's page\", 'The product is available in stock', 'If the product is already in the cart, the quantity is less than 5']",
        "actors": "Customer",
        "steps": "1: Customer goes to the product page 2: Customer clicks the \"Add to Cart\" button"
      },
      {
        "name": "Increase Quantity of A Product in The Cart",
        "scenario": "Customer increases quantity of a product in his cart",
        "precondition": "['Product must be in the cart', 'The product is available in stock', 'The quantity of the product in the cart is less than 5']",
        "actors": "Customer",
        "steps": "1: Customer goes to his cart page 2: Customer clicks the \"+\" button for a product"
      },
      {
        "name": "Decrease Quantity of A Product in The Cart",
        "scenario": "Customer decreases quantity of a product in his cart",
        "precondition": "['Product must be in the cart']",
        "actors": "Customer",
        "steps": "1: Customer goes to his cart page 2: Customer clicks the \"-\" button for a product"
      },
      {
        "name": "Remove A Product from The Cart",
        "scenario": "Customer removes a product from his cart",
        "precondition": "['Customer must be in his cart page', 'The product is in the cart']",
        "actors": "Customer",
        "steps": "1: Customer goes to his cart page 2: Customer selects the product 3: Customer clicks the delete button 4: Customer confirms deletion"
      },
      {
        "name": "Process a Payment",
        "scenario": "Customer completes the payment for an order.",
        "precondition": "['Customer is logged in as a valid and registered user.', 'Customer has added products to the cart.', 'Customer has selected a payment method.']",
        "actors": "Customer, System, Payment Gateway",
        "steps": "1: Customer proceeds to the checkout page. 2: System displays the available payment options. 3: Customer selects a payment method (e.g., Credit/Debit Card, bKash, Nagad, Rocket, Cash on Delivery). 4: System redirects to the payment gateway if required (e.g., for Credit Card or bKash). 5: Customer completes the payment process. 6: Payment gateway confirms the payment status. 7: System updates the order status to 'Payment Successful' or 'Payment Failed' or with necessary information. 8: System sends confirmation of the order to the customer."
      },
      {
        "name": "Track Order",
        "scenario": "Customer tracks the status of an order.",
        "precondition": "['Customer is logged in as a valid and registered user.', 'Customer has placed an order.']",
        "actors": "Customer, System",
        "steps": "1: Customer goes to the Accounts section. 2: Customer selects Track Package Slider. 3: System displays the list of orders placed by the customer. 4: Customer selects the order to track. 5: System shows the current status of the order (e.g., Processing, Shipped, Delivered)."
      },
      {
        "name": "Review a Product",
        "scenario": "Customer reviews a specific product.",
        "precondition": "['Customer is logged in as a valid and registered user.', 'Customer purchased the product.']",
        "actors": "Customer, System, Admin",
        "steps": "1: Customer selects a product. 2: System shows all the reviews about the specific product. 3: Customer submits a review for the specific product. 4: Admin approves or disapproves."
      },
      {
        "name": "View Product Information",
        "scenario": "User navigates to the product page or searches for a product",
        "precondition": "User is logged in or browsing anonymously",
        "actors": "Customer,System",
        "steps": "1: User navigates to the product page or searches for a product 2: System retrieves product details from the database 3: System displays product information including title, description, price, availability, and images 4: User views additional information such as reviews, ratings, and related products"
      },
      {
        "name": "Apply Promo Code at Checkout",
        "scenario": "A customer wants to apply a discount promo code while completing their purchase to receive a reduced total price.",
        "precondition": "['Uder is logged in', 'User has selected items to purchase', 'Promo code is applicable to selected items']",
        "actors": "User,System",
        "steps": "1: User navigates to the checkout page after adding items to the cart. 2: User enters the promo code in the designated promo code field. 3: System validates the promo code (validity, expiration, applicability to products). 4: If the promo code is valid, the system applies the discount to the total price and shows the updated total. 5: User reviews the updated total price with the discount applied and proceeds with payment."
      },
      {
        "name": "Update Information of a Product",
        "scenario": "A seller updates the information about a product, the systems checks if the update request is valid and send the request to the admin for approval",
        "precondition": "The Product is already added in the product list.",
        "actors": "Seller, Admin, System",
        "steps": "1: Seller selects the product to update information 2: Seller updates all the information needed to be changed 3: Seller submits his/her update request 4: System checks if his/her update request is valid 5: Admin approves or disapproves"
      }
    ],
    "user_story_gpt": "As a customer navigating our online marketplace, I want the ability to efficiently search for and filter products using keywords and attributes like category and price range, ensuring I can find exactly what I need. Once a product is selected, I would like detailed information on its specifications and customer reviews to help me make informed purchasing decisions. To enhance my shopping experience, I can apply promo codes for discounts, add items to my cart, and adjust quantities as needed. Moreover, I wish to ask sellers questions directly on product pages and receive timely answers. In completing my purchase, I will proceed through a smooth checkout process where I can securely apply various payment methods. Subsequently, I want to track my order and receive updates on its status. For sellers, I expect them to be able to add new products with ease, update product details, and engage with customer questions to maintain a robust marketplace ecosystem. I aim to trust that my reviews will be considered fairly, ensuring a community of transparency and high-quality service for both buyers and sellers.",
    "user_story_llama": "As a customer, I want to be able to search for products using keywords and filters, and select a desired product to view its details, so that I can make informed purchasing decisions. I also want to be able to ask and answer questions about products, add products to my cart, increase or decrease the quantity of products in my cart, and remove products from my cart, in order to manage my shopping experience. Additionally, I want to be able to complete payments for my orders using various payment methods, track the status of my orders, and review products I have purchased, so that I can have a seamless and satisfactory shopping experience. Furthermore, I want to be able to view product information, apply promo codes at checkout, and have sellers update product information, so that I can have access to accurate and up-to-date product details. As a seller, I want to be able to add new products, update product information, and answer customer questions, so that I can effectively manage my products and provide excellent customer service. As an admin, I want to be able to approve or disapprove seller updates and customer reviews, so that I can ensure the accuracy and quality of product information and customer feedback.",
    "length": 15
  },
  {
    "usecases": [
      {
        "name": "Add Expense or Income Transaction in YNAB",
        "scenario": "User adds a new transaction (expense or income) to track financial activity within their budget.",
        "precondition": "User is logged into their YNAB account and has an active budget with categories.",
        "actors": "User",
        "steps": "1: User navigates to the 'Budget' or 'Accounts' section. 2: User selects 'Add Transaction' in a specific account. 3: User inputs the transaction details including the payee, amount, date, and category. 4: User saves the transaction. 5: System updates the user's budget and account balance to reflect the new transaction."
      },
      {
        "name": "Manage Payees",
        "scenario": "The user manages payees by editing, merging, or deleting payees in the budget.",
        "precondition": "User must have an existing budget with transactions that contain payees.",
        "actors": "User",
        "steps": "1: User navigates to the 'Manage Payees' section. 2: User selects a payee to edit, merge, or delete. 3: User performs the desired action (edit, merge, or delete). 4: The system updates the payee list and reflects changes in the budget."
      },
      {
        "name": "Set Savings Goal in YNAB",
        "scenario": "User sets a savings goal to allocate money for a specific purpose (e.g., vacation, emergency fund).",
        "precondition": "User is logged into their YNAB account and has an active budget with categories.",
        "actors": "User",
        "steps": "1: User navigates to the 'Budget' section. 2: User selects a category to set a savings goal (e.g., 'Vacation'). 3: User clicks on 'Set Goal' option. 4: User inputs the target amount and the target date for the goal. 5: User saves the goal. 6: System updates the budget to reflect the goal and tracks progress toward the savings goal."
      },
      {
        "name": "Create YNAB Together Group",
        "scenario": "A user creates a YNAB Together group to share budgeting with family members.",
        "precondition": "User is logged into YNAB with an active subscription.",
        "actors": "User",
        "steps": "1: User navigates to the 'YNAB Together' section in the settings. 2: User creates a new group and adds family members by email. 3: Members receive an invite and accept the invitation. 4: User and family members are linked under one YNAB Together group."
      },
      {
        "name": "Collaborate on Shared Budget",
        "scenario": "Members of a YNAB Together group work on a shared family budget.",
        "precondition": "User and family members are part of a YNAB Together group.",
        "actors": "User, Family Members",
        "steps": "1: User creates a shared family budget. 2: Other members access the shared budget. 3: Members can edit and view categories and budget allocations. 4: Changes are updated in real time for all members."
      },
      {
        "name": "Create a Budget",
        "scenario": "User creates a new Budget to track income and expenses for a specific time period.",
        "precondition": "User is logged into their account.",
        "actors": "User",
        "steps": "1: User selects 'Create New Budget' from the dashboard. 2: User provides the 'Budget Name', sets the currency, number format and sets the time period (monthly, yearly, etc.). 3: User enters initial income sources and categories for the expenses (Bills, Needs, Wants, etc.). 4: System saves the budget and returns the user to the dashboard."
      },
      {
        "name": "Sync Bank Account",
        "scenario": "User links their bank account to sync transactions automatically.",
        "precondition": "User must have an account with a supported bank.",
        "actors": "User",
        "steps": "1: User navigates to the 'Bank Accounts' section 2: User selects their bank and provides authentication details 3: System syncs the transactions"
      }
    ],
    "user_story_gpt": "As a user of YNAB, I want to efficiently manage my finances by adding new transactions, whether expenses or income, directly into my active budget so that my financial activity is accurately tracked and reflected in real time. I also wish to manage my payees by editing, merging, or deleting them for better organization. Setting savings goals is important for me to allocate funds for specific purposes like vacations or emergencies, and I want to monitor this progress within the system. Additionally, I would like to collaborate with my family by creating a YNAB Together group, enabling shared budgeting, and allowing real-time collaboration on financial decisions. Creating a comprehensive budget to track income and expenses and syncing my bank account for automatic transaction updates will further simplify my budgeting process.",
    "user_story_llama": "As a user, I want to manage my finances effectively using YNAB, so that I can track my income and expenses, set savings goals, and collaborate with family members on a shared budget. I want to be able to add new transactions, manage payees, and set savings goals for specific purposes, such as vacations or emergency funds. I also want to create a YNAB Together group to share budgeting with my family members and work together on a shared family budget, where we can edit and view categories and budget allocations in real-time. Additionally, I want to create a new budget to track my income and expenses for a specific time period, and sync my bank account to automatically import transactions. By doing so, I expect the system to update my budget and account balance accordingly, reflect changes in the budget, and track progress toward my savings goals, ultimately helping me achieve financial stability and make informed decisions about my money.",
    "length": 7
  },
  {
    "usecases": [
      {
        "name": "Browse, Search Books and Filter",
        "scenario": "User browses and searches the website to find books based on categories, authors, titles and apply filters.",
        "precondition": "User accesses the Rokomari website.",
        "actors": "User",
        "steps": "1: User navigates to the books section. 2: User selects categories or applies filters such as author, genre and publication. 3: User searches by title, author, or category using the search bar. 4: The system displays matching results based on search and filter criteria."
      },
      {
        "name": "Add to Cart",
        "scenario": "User adds a selected book to the shopping cart for future checkout.",
        "precondition": "User has found a book on Rokomari.com.",
        "actors": "User",
        "steps": "1: User selects a book and clicks on 'Add to Cart'. 2: The system adds the book to the cart and confirms the addition."
      },
      {
        "name": "Complete Checkout and Payment",
        "scenario": "User checks out and completes payment.",
        "precondition": "User has books in the cart and proceeds to checkout.",
        "actors": "User",
        "steps": "1: User reviews the cart. 2: User reviews account details and selects the delivery address 3: User selects payment method. 4: System processes payment and confirms order."
      },
      {
        "name": "Track Order and Receive Notifications",
        "scenario": "User tracks the order and receives updates.",
        "precondition": "User has placed an order.",
        "actors": "User, System",
        "steps": "1: User checks 'My Orders'. 2: User selects delivery status. 3: User receives system notifications."
      },
      {
        "name": "Sign In/Sign Up",
        "scenario": "User  signs in or signs up using email/phone number or social media.",
        "precondition": "['User  has a compatible web browser or mobile app.', 'User  has a valid Facebook or Google account (for social sign-in).']",
        "actors": "[{'role': 'User ', 'description': 'The individual who wishes to access their account.', 'goals': ['Access account features.', 'Create a new account if not registered.', 'Securely log out when finished.']}, {'role': 'System', 'description': 'The application that authenticates the user and manages account creation.', 'responsibilities': ['Verify user credentials.', 'Send OTP for account creation.', 'Grant access to authorized users.', 'Maintain session security.']}, {'role': 'Facebook', 'description': 'The social media platform that allows users to sign in with their Facebook account.', 'responsibilities': ['Authenticate user credentials.', 'Provide user data to the system.']}, {'role': 'Google', 'description': 'The search engine platform that allows users to sign in with their Google account.', 'responsibilities': ['Authenticate user credentials.', 'Provide user data to the system.']}]",
        "steps": "1: User  clicks on 'Sign In' and is redirected to the Sign In/Sign Up page. 2: User  selects either Google or Facebook login option or manual login. 3: If manual login, then user enters their phone number or email. 4: System checks if an account exists with the provided phone number or email. 5: If no account exists, System sends an OTP to the corresponding number or email. 6: User  enters the received OTP. 7: If OTP is correct, System creates a new account and logs the user in automatically. 8: If an account exists, user is prompted to enter their password. 9: System verifies the password. 10: If password is correct, System logs the user in automatically. 11: User  can now access account features. 12: User  clicks the 'Log Out' button. 13: System logs the user out and redirects to the Sign In/Sign Up page. 14: System invalidates the session to prevent unauthorized access."
      },
      {
        "name": "Apply Voucher or Promo Code",
        "scenario": "User  applies a voucher or promo code during checkout.",
        "precondition": "['User  has a valid account.', 'User  has items in their cart.', 'User  has a valid voucher or promo code.']",
        "actors": "[{'role': 'User ', 'description': 'The individual who wishes to apply a discount code.'}, {'role': 'System', 'description': 'The application that processes the discount code.'}]",
        "steps": "1: User  enters the voucher or promo code during checkout. 2: System checks if the code is valid. 3: If the code is invalid, the system returns an error message. 4: If the code is valid, the system checks if it is expired. 5: If the code is expired, the system returns an error message. 6: If the code is not expired, the system retrieves the discount percentage. 7: System applies the discount to the original price. 8: If multiple coupons are applied, system calculates the individual discounts. 9: If total discounts exceed 100%, the purchase price is set to tk0 but shipping fees remain. 10: If multiple invalid attempts are made, the system deducts all Rokomari Points from previous purchases."
      },
      {
        "name": "Income by Affiliate Role",
        "scenario": "User recommends others any rokomari product and if anyone buys the product through the recommendation, the first user get a commission on the sale and later can withdraw the money following appropriate process.",
        "precondition": "User has an affiliate account and updated profile with compulsory information.",
        "actors": "User, System, other user who buys the product",
        "steps": "1: User takes any product link on rokomari. 2: Generate recommendation link from the affiliate report page using the link copied before. 3: Share the recommendation link. 4: Someone buys the product from rokomari through the recommendation link. 5: System adds the promised commossion money to the affiliate-account. 6: Affiliate-user withdraws the money by the transaction method provided in profile."
      },
      {
        "name": "Add to Wish List",
        "scenario": "User adds books/other items to a personal list for future order.",
        "precondition": "User is logged in successfully and has found a product.",
        "actors": "User",
        "steps": "1: User adds a product to their list. 2: System confirms the addition."
      },
      {
        "name": "Personalized Book Recommendations",
        "scenario": "System customizes the homepage with book recommendations based on user purchases, input genres, and past searches.",
        "precondition": "User has provided input genres, made searches, or has made purchases.",
        "actors": "User, System",
        "steps": "1: System prompts the user to select at least 3 genres. 2: User selects genres and provides at least 5 books from those genres. 3: System records the user's searches, input, and purchase history. 4: System analyzes the combined data from purchases, genre input, and searches. 5: System customizes the homepage with personalized recommendations based on the analysis."
      },
      {
        "name": "Redeem and Apply Rokomari Reward Points",
        "scenario": "Users redeem points for discounts or offers and apply those offers during checkout.",
        "precondition": "User is logged in and has sufficient reward points for redemption. There are redeemable offers available.",
        "actors": "User, System",
        "steps": "1: User navigates to the 'Rokomari Points' section in their profile dashboard. 2: System displays the user's available reward points balance and the list of redeemable offers. 3: User selects an offer to redeem points (e.g., 40 TK discount for 400 points). 4: System deducts the points from the user's balance and confirms the offer is successfully redeemed. 5: The redeemed offer is stored in the user's account for future use. 6: When the user checks out with items in the cart, the system applies the redeemed offer if the conditions are met (e.g., minimum order value). 7: System updates the cart total, reflecting the redeemed offer (e.g., discount)."
      },
      {
        "name": "Register a New Account",
        "scenario": "User registers a new account on the platform.",
        "precondition": "User is not registered.",
        "actors": "User,System",
        "steps": "1: User selects registration method (email, phone number, Google, or Facebook). 2: For phone number or email registration: User enters their phone number or email address. 3: System sends an OTP (verification code) to the phone number. 4: User enters the OTP. 5: System verifies the code and completes the registration. 6: For Google or Facebook: User logs in with their respective account. 7: System retrieves user information and completes the registration."
      },
      {
        "name": "Submit Review and Rating",
        "scenario": "User submits a review and rating for a book.",
        "precondition": "User may or may not have purchased the book.",
        "actors": "User",
        "steps": "1: User writes a review (at least 25 characters) and rates the book. 2: User optionally uploads a photo with the review. 3: If the user has purchased the book, the system marks the review as a 'Verified Purchase'. 4: System confirms the submission."
      }
    ],
    "user_story_gpt": "As an avid reader using the Rokomari platform, I want to seamlessly browse, search, and filter books by categories, authors, and titles so that I can find my desired reads efficiently. I also wish to easily add books to my cart and wishlist for future purchases. When I proceed to checkout, I want a straightforward payment process, with the ability to apply voucher codes and redeem reward points for discounts, enhancing my shopping experience. Furthermore, I appreciate receiving personalized book recommendations based on my past purchases and searches, making my reading choices more exciting. With an affiliate feature, I can recommend books to others and earn commission, adding value to my role in the community. Finally, I want the convenience of signing up or logging in via my email, phone, or social media, ensuring secure and quick access to my account, where I can track orders and leave reviews for books I've read, whether purchased on Rokomari or not.\"}",
    "user_story_llama": "As a user, I want to be able to browse, search, and filter books on the Rokomari website, so that I can easily find the books I'm interested in. I also want to be able to add books to my cart, complete the checkout and payment process, and track my orders, receiving updates and notifications. Additionally, I want to be able to sign in or sign up using my email, phone number, or social media accounts, and apply vouchers or promo codes during checkout to get discounts. Furthermore, I want to be able to recommend products to others and earn commissions, add books to my wish list, and receive personalized book recommendations based on my purchases, searches, and input genres. I also want to be able to redeem and apply Rokomari reward points for discounts or offers, register a new account, and submit reviews and ratings for books, with the option to upload photos and have my reviews marked as 'Verified Purchase' if I've purchased the book. Overall, I want a seamless and user-friendly experience on the Rokomari platform, with features that make it easy for me to find, purchase, and engage with books and other products.",
    "length": 12
  },
  {
    "usecases": [
      {
        "name": "Flight Search and Booking",
        "scenario": "A user searches for a flight between two destinations and proceeds to book the desired flight.",
        "precondition": "User has access to the internet and a valid payment method.",
        "actors": "User, System",
        "steps": "1: User selects flight search option. 2: User inputs destination, travel dates, and number of passengers. 3: User clicks 'Search' to view available flights. 4: System displays available flights. 5: User selects a flight and proceeds to booking. 6: User confirms the booking and provides payment details. 7: System processes payment and confirms booking."
      },
      {
        "name": "Hotel Search and Booking",
        "scenario": "A user searches for available hotels in a destination and proceeds to book a hotel.",
        "precondition": "User has access to the internet and a valid payment method.",
        "actors": "User, System",
        "steps": "1: User selects hotel search option. 2: User inputs destination, travel dates, and number of rooms and guests. 3: User clicks 'Search' to view available hotels. 4: System displays available hotels. 5: User selects a hotel and proceeds to booking. 6: User confirms the booking and provides payment details. 7: System processes payment and confirms booking."
      },
      {
        "name": "Cancel Flight Booking",
        "scenario": "A user cancels a booked flight.",
        "precondition": "User has booked a flight through the system.",
        "actors": "User, System",
        "steps": "1: User navigates to 'My Bookings' section. 2: User selects the flight booking to cancel. 3: User confirms the cancellation. 4: System processes the cancellation and issues a refund."
      },
      {
        "name": "Apply Discount Code",
        "scenario": "A user applies a valid or invalid discount code during payment.",
        "precondition": "User has selected a flight or hotel and is at the payment stage.",
        "actors": "User, System",
        "steps": "1: User inputs discount code. 2: System validates the discount code. 3: System applies the discount if the code is valid."
      },
      {
        "name": "Rental Car Search and Booking",
        "scenario": "A user searches for rental cars at a destination and proceeds to book a car.",
        "precondition": "User has access to the internet and a valid payment method.",
        "actors": "User, System",
        "steps": "1: User selects the rental car search option. 2: User inputs destination, pick-up/drop-off dates, and the type of car. 3: User clicks 'Search' to view available rental cars. 4: System displays available cars. 5: User selects a car and proceeds to booking. 6: User confirms the booking and provides payment details. 7: System processes the payment and confirms the car rental booking."
      },
      {
        "name": "Travel Insurance Purchase",
        "scenario": "A user opts to purchase travel insurance while booking a flight or hotel.",
        "precondition": "User is booking a flight or hotel and the system offers travel insurance.",
        "actors": "User, System, Insurance Provider",
        "steps": "1: User selects the option to add travel insurance during booking. 2: System displays available insurance plans. 3: User selects an insurance plan and confirms purchase. 4: System processes the payment for the insurance. 5: Insurance provider sends confirmation details. 6: System sends insurance confirmation to the user."
      }
    ],
    "user_story_gpt": "As a traveler, I want to seamlessly search and book flights, hotels, and rental cars through an integrated system, ensuring each booking process is straightforward from selecting my options to confirming my payments. I also want the flexibility to cancel bookings easily through a 'My Bookings' section with assured refunds when necessary. During the payment stage, I should be able to apply valid discount codes for savings. Additionally, I want the option to purchase travel insurance during my booking process for added security, with a clear confirmation from the insurance provider. This comprehensive booking system allows me to manage all aspects of my trip in one place, enhancing my travel planning experience.",
    "user_story_llama": "As a user, I want to be able to search and book flights, hotels, and rental cars through the system, so that I can easily plan and organize my trips. I also want to be able to cancel my flight bookings if needed, and apply discount codes during payment to get the best deals. Additionally, I want the option to purchase travel insurance while booking my flights or hotels, so that I can have peace of mind during my travels. The system should allow me to easily navigate through the booking process, validate my discount codes, and process my payments securely. Furthermore, the system should be able to display available flights, hotels, and rental cars, and send me confirmations and details of my bookings, including any travel insurance purchases.",
    "length": 6
  },
  {
    "usecases": [
      {
        "name": "Joining the Young Pilot Program",
        "scenario": "A user applies for the Young Pilot Program on the GoZayaan website.",
        "precondition": "['The user has access to the GoZayaan website.', 'The user has the required information (e.g., name, age, email, academic details).']",
        "actors": "['User', 'GoZayaan System']",
        "steps": "1: User visits the GoZayaan website. 2: The user clicks 'Join Young Pilot Program.' 3: The system displays an application form. 4: The user fills out the form with personal details. 5: The user uploads necessary documents. 6: The user reviews and submits the form. 7: The system sends a confirmation message or email. 8: GoZayaan reviews the application. 9: If accepted, the user is notified with further steps."
      },
      {
        "name": "Viewing and Managing Booked Trips",
        "scenario": "A user views, modifies, or cancels their booked trips on GoZayaan.",
        "precondition": "['The user has an account on the GoZayaan platform.', 'The user has previously booked a flight, hotel, or tour.']",
        "actors": "['User', 'GoZayaan System']",
        "steps": "1: User logs into their GoZayaan account. 2: The user navigates to the 'My Trips' section. 3: The system displays a list of previously booked trips. 4: The user selects a trip to view more details. 5: The system shows trip details with options to modify or cancel. 6: The user may modify or cancel the trip if allowed."
      },
      {
        "name": "Requesting a Customized Tour",
        "scenario": "A user requests a customized tour through the GoZayaan platform.",
        "precondition": "['The user has an account on the GoZayaan platform and is logged in.', 'The user has location, travel date, and contact information ready.']",
        "actors": "['User', 'GoZayaan System']",
        "steps": "1: User navigates to the 'Customized Tour' section. 2: The system displays a form for tour details. 3: The user fills in location, date, and contact information. 4: The user adds any additional requirements. 5: The user submits the form. 6: A GoZayaan travel expert reviews the request and contacts the user. 7: The travel expert sends a customized plan to the user. 8: The user reviews the plan and proceeds with booking."
      },
      {
        "name": "Requesting a Refund for a Canceled Booking",
        "scenario": "A user requests a refund for a canceled booking through the GoZayaan platform.",
        "precondition": "['The user has an account on the GoZayaan platform.', 'The user has canceled a booking eligible for a refund.']",
        "actors": "['User', 'GoZayaan System', 'Payment Processor']",
        "steps": "1: User logs into their GoZayaan account. 2: The user navigates to the 'My Trips' section. 3: The system displays eligible canceled trips. 4: The user selects a trip and requests a refund. 5: The system processes the request and informs the user of the status. 6: The refund is processed through the payment processor and credited to the user's payment method."
      }
    ],
    "user_story_gpt": "As a user of the GoZayaan platform, I want to efficiently manage my travel plans by applying for the Young Pilot Program and viewing, modifying, or canceling my booked trips. Additionally, I wish to have the option to request customized tours based on my specific preferences, ensuring a tailored travel experience. If I need to cancel a booking, I expect to smoothly request and receive a refund for eligible trips. These functionalities allow me to seamlessly navigate my travel arrangements with confidence and convenience.",
    "user_story_llama": "As a user, I want to be able to join the Young Pilot Program by applying through the GoZayaan website, so that I can easily submit my application with the required information and receive confirmation. Additionally, I want to be able to view and manage my booked trips on the platform, including modifying or canceling them as needed. I also want to have the option to request a customized tour by providing my travel preferences and receiving a tailored plan from a GoZayaan travel expert. Furthermore, if I need to cancel a booking, I want to be able to request a refund through the platform and receive it in a timely manner, so that I can have a seamless and user-friendly experience with GoZayaan.",
    "length": 4
  },
  {
    "usecases": [
      {
        "name": "User Registration",
        "scenario": "A user registers on eBay by providing personal information and agreeing to terms and conditions.",
        "precondition": "User has not previously registered on eBay.",
        "actors": "User",
        "steps": "1: User provides email, password, and other required details. 2: User agrees to terms and conditions. 3: User submits the registration form. 4: System sends a confirmation email."
      },
      {
        "name": "User Login",
        "scenario": "A registered user logs in to their account using valid credentials.",
        "precondition": "User is already registered on eBay.",
        "actors": "User",
        "steps": "1: User provides email and password. 2: User submits the login form. 3: System validates the credentials. 4: User is logged in and redirected to homepage."
      },
      {
        "name": "Password Reset",
        "scenario": "A user resets their password after forgetting it.",
        "precondition": "User has an existing account and access to the registered email.",
        "actors": "User",
        "steps": "1: User clicks on 'Forgot Password'. 2: User provides the registered email. 3: System sends a password reset link to the user's email. 4: User clicks the link and resets the password."
      },
      {
        "name": "Search for Items",
        "scenario": "User searches for items by entering keywords into the search bar.",
        "precondition": "User is on the eBay homepage or search page.",
        "actors": "User",
        "steps": "1: User enters keywords into the search bar. 2: User submits the search query. 3: System displays a list of matching items."
      },
      {
        "name": "Purchase Item (Buy It Now)",
        "scenario": "User purchases an item using the 'Buy It Now' option.",
        "precondition": "User is logged in and viewing an item available for 'Buy It Now'.",
        "actors": "User",
        "steps": "1: User selects 'Buy It Now' option. 2: User confirms the purchase. 3: System processes the payment. 4: Purchase is confirmed, and the item is marked as sold."
      },
      {
        "name": "Bid on an Auction",
        "scenario": "A user places a bid on an auction for a product. The bid must be higher than the current highest bid, and the auction should still be open.",
        "precondition": "The auction is active, and the user is logged in.",
        "actors": "User, System",
        "steps": "1: User views the product and the auction details 2: User places a bid that is higher than the current highest bid 3: System accepts the bid and updates the auction"
      },
      {
        "name": "Message Seller",
        "scenario": "A user sends a message to the seller regarding a product.",
        "precondition": "User is logged in and viewing a product page.",
        "actors": "User, Seller",
        "steps": "1: User clicks on 'Contact Seller'. 2: User composes a message and sends it. 3: System forwards the message to the seller."
      },
      {
        "name": "Adding to Cart",
        "scenario": "User adds a product to their shopping cart.",
        "precondition": "User is logged in and viewing a product page.",
        "actors": "User",
        "steps": "1: User selects a product and clicks 'Add to Cart'. 2: System confirms the product is added to the cart."
      },
      {
        "name": "Placing an Order",
        "scenario": "User completes the checkout process to place an order.",
        "precondition": "User has items in their cart and is logged in.",
        "actors": "User",
        "steps": "1: User reviews their cart. 2: User proceeds to checkout. 3: User enters payment details and shipping address. 4: User confirms the order. 5: System processes the order and displays an order confirmation."
      },
      {
        "name": "Track Order",
        "scenario": "User tracks the status of their order after purchase.",
        "precondition": "User has placed an order and is logged into their account.",
        "actors": "User",
        "steps": "1: User navigates to 'My Orders'. 2: User selects the order to track. 3: System displays the current tracking status."
      },
      {
        "name": "Leave feedback and rating",
        "scenario": "A user is giving review and rating of a product.",
        "precondition": "The user must buy the product.",
        "actors": "User",
        "steps": "1: User navigates to order history 2: User selects the order to review 3: User writes a review 4: User gives a product rating 5: User submits the review"
      },
      {
        "name": "Create a Listing",
        "scenario": "A user creates a new listing for a product to sell. The system processes the listing and makes it visible to potential buyers.",
        "precondition": "The user is logged in and eligible to create listings.",
        "actors": "User, System",
        "steps": "1: User navigates to 'Sell' and fills out the product details 2: User submits the listing 3: System processes the listing and publishes it"
      },
      {
        "name": "Cancel a Bid",
        "scenario": "A user cancels their bid on an active auction before the auction ends. The system removes the bid and updates the auction.",
        "precondition": "The auction is still active, and the user is the current highest bidder.",
        "actors": "User, System",
        "steps": "1: User navigates to the auction page 2: User cancels their bid 3: System removes the bid and updates the auction"
      },
      {
        "name": "Add Item to Watchlist",
        "scenario": "A user adds an item to their watchlist to monitor it for future bidding or purchasing.",
        "precondition": "The user is logged in, and the item is available for purchase or bidding.",
        "actors": "User, System",
        "steps": "1: User navigates to the product page 2: User clicks 'Add to Watchlist' 3: System adds the item to the user's watchlist"
      },
      {
        "name": "Update Payment Method",
        "scenario": "A user updates their default payment method for future purchases.",
        "precondition": "The user is logged in, and has an existing payment method linked to their account.",
        "actors": "User, System",
        "steps": "1: User navigates to their account settings 2: User selects 'Update Payment Method' 3: User enters new payment information 4: System verifies and updates the payment method"
      },
      {
        "name": "Apply a Coupon Code",
        "scenario": "A user applies a discount coupon code during checkout to receive a discount on their purchase.",
        "precondition": "The user is logged in, has items in their cart, and a valid coupon code.",
        "actors": "User, System",
        "steps": "1: User proceeds to checkout with items in their cart 2: User enters the coupon code 3: System validates the coupon and applies the discount"
      },
      {
        "name": "Add Item to Wishlist",
        "scenario": "User adds a product to their wishlist for future reference.",
        "precondition": "User is logged in and viewing a product page.",
        "actors": "User",
        "steps": "1: User selects a product and clicks 'Add to Wishlist'. 2: System confirms that the product is added to the wishlist."
      },
      {
        "name": "Request Refund",
        "scenario": "A user requests a refund for an item they purchased, and the system processes the refund request.",
        "precondition": "The user has completed the purchase and the refund window is open.",
        "actors": "User, Seller, System",
        "steps": "1: User navigates to their order history 2: User selects the item and clicks 'Request Refund' 3: System processes the refund request"
      }
    ],
    "user_story_gpt": "As an eBay user, I want to seamlessly register on the platform by providing my personal details and agreeing to the terms and conditions, so that I can log in with my credentials and access features such as searching for items using keywords, adding products to my cart or wishlist, and purchasing items using options like 'Buy It Now' or bidding on auctions. I can track my orders, leave feedback, and even request refunds for my purchases. To enhance my shopping experience, I want to apply discount coupons during checkout, update my payment methods easily, and effectively communicate with sellers for any inquiries. Additionally, I wish to create listings for selling items, manage my auctions including canceling bids if necessary, and ensure that my interactions are smooth and secure on eBay's platform.\"",
    "user_story_llama": "As a user, I want to be able to register on eBay and log in to my account, so that I can search for items, add them to my cart, and purchase them using the 'Buy It Now' option or by bidding on an auction. I also want to be able to message sellers, track my orders, and leave feedback and ratings for products I've purchased. Additionally, I want to be able to create listings to sell my own products, cancel bids, add items to my watchlist or wishlist, update my payment method, apply coupon codes, and request refunds when necessary. Overall, I want a seamless and user-friendly experience on eBay that allows me to easily buy and sell products, manage my account, and interact with other users.",
    "length": 18
  },
  {
    "usecases": [
      {
        "name": "Create a Board",
        "scenario": "A user creates a new board to organize their tasks or projects.",
        "precondition": "User has a Trello account and is logged in.",
        "actors": "User",
        "steps": "1: User navigates to the dashboard 2: User clicks on 'Create New Board' 3: User enters the board name and optional settings like background or team visibility 4: User clicks 'Create' to finalize the board creation"
      },
      {
        "name": "Add a New List",
        "scenario": "A user adds a new list to a board to organize tasks or items.",
        "precondition": "User has created or has access to a board.",
        "actors": "User",
        "steps": "1: User selects a board 2: User clicks on 'Add a list' at the end of the lists on the board 3: User enters a name for the new list 4: User clicks 'Add List' to confirm"
      },
      {
        "name": "Add a Task (Card) to a List",
        "scenario": "A user adds a new task (card) to a specific list on a Trello board to organize tasks.",
        "precondition": "['User is logged into Trello.', 'User has access to an existing board with at least one list.']",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects a list where they want to add a task. 3: User clicks on 'Add a card' at the bottom of the list. 4: User enters the name of the task in the input field. 5: User clicks 'Add Card' or presses Enter to finalize the task addition."
      },
      {
        "name": "Add Labels to a Card",
        "scenario": "User adds color-coded labels to categorize or prioritize cards.",
        "precondition": "User must be logged in and have access to a board with cards.",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects a card to which they want to add labels. 3: User clicks on 'Labels' in the card's options. 4: User selects one or more labels from the available options or creates a new label. 5: User clicks 'Save' or closes the label menu to confirm the selection."
      },
      {
        "name": "Add a Comment to a Card",
        "scenario": "A user adds a comment to a card to provide feedback.",
        "precondition": "['User is logged into Trello.', 'User has access to a card.']",
        "actors": "User",
        "steps": "1: User navigates to the specific card. 2: User clicks on the comment section. 3: User types the comment. 4: User clicks 'Add Comment.'"
      },
      {
        "name": "Attach a File to a Task",
        "scenario": "A user attaches a file to a specific task (card) to provide additional resources or context.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least one task (card).', \"The file is accessible on the user's device.\"]",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects a task (card) from a list. 3: User clicks on 'Attach' or 'Upload File' in the task's details. 4: User selects a file from their device and clicks 'Open' to upload. 5: User confirms the upload and the file is attached to the task."
      },
      {
        "name": "Set Due Date for a Task",
        "scenario": "A user sets a due date for a task (card) to track deadlines.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least one task (card).']",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects a task (card) from a list. 3: User clicks on 'Due Date' in the task's details. 4: User selects a date and time from the calendar. 5: User clicks 'Save' to apply the due date."
      },
      {
        "name": "Search for a Card",
        "scenario": "User searches for a specific card within a board by entering keywords in the search bar.",
        "precondition": "User must be logged in and have access to a board with existing cards.",
        "actors": "User",
        "steps": "1: User clicks on the search bar at the top of the screen. 2: User types keywords or the title of the card they are searching for. 3: User views the search results and selects the relevant card from the list."
      },
      {
        "name": "Move a Task (Card) from One List to Another",
        "scenario": "A user moves a task (card) from one list to another to update the task's status or progress.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least two lists and one task.']",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects the task (card) they want to move. 3: User clicks on the 'Move' option from the task's options menu. 4: User selects the target list from the dropdown menu. 5: User clicks 'Move' to confirm the action."
      },
      {
        "name": "Invite Team Members to a Board",
        "scenario": "A user invites team members to collaborate on a project board.",
        "precondition": "['User is logged into Trello.', 'User has access to a board they want to share.']",
        "actors": "User",
        "steps": "1: User navigates to the specific board. 2: User clicks on the 'Invite' button. 3: User enters the email addresses of team members. 4: User clicks 'Send Invitation.'"
      },
      {
        "name": "Assign a Task to a User",
        "scenario": "A user assigns a task (card) to a specific team member to ensure accountability.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least one task (card).', 'Team members are added to the board.']",
        "actors": "User, Team Member",
        "steps": "1: User navigates to a specific board. 2: User selects the task (card) they want to assign. 3: User clicks on 'Members' in the task's details. 4: User selects the team member to assign the task to. 5: User clicks 'Save' or 'Close' to finalize the assignment."
      },
      {
        "name": "Receive Notifications for Card Updates",
        "scenario": "A user receives notifications for updates made to cards they are watching.",
        "precondition": "['User is logged into Trello.', 'User is watching a card.']",
        "actors": "User",
        "steps": "1: User navigates to the specific card. 2: User clicks on the 'Watch' button to start watching the card. 3: Another user makes an update to the card. 4: User receives a notification for the update."
      },
      {
        "name": "Create a Rule in a List",
        "scenario": "A user creates a rule that automatically moves tasks between lists based on specific conditions.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least one list and tasks (cards).']",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects the list where the rule will be applied. 3: User clicks on 'Rules' or 'Automations' in the list's options. 4: User selects 'Create a Rule'. 5: User defines the trigger (e.g., due date approaching, label added). 6: User specifies the action (e.g., move card to another list). 7: User saves the rule."
      },
      {
        "name": "Archive a List",
        "scenario": "A user archives a list to remove it from the board without deleting its contents.",
        "precondition": "['User is logged into Trello.', 'User has access to a board with at least one list containing tasks (cards).']",
        "actors": "User",
        "steps": "1: User navigates to a specific board. 2: User selects the list they want to archive. 3: User clicks on the 'More' button (three dots) next to the list's name. 4: User selects 'Archive this List' from the dropdown menu. 5: User confirms the action when prompted."
      }
    ],
    "user_story_gpt": "As a Trello user, I want to efficiently organize my projects by creating boards where I can add lists to categorize tasks. I need the ability to add tasks within lists, label them for easy prioritization, add comments, and attach relevant files to provide additional context. It’s crucial for me to assign tasks to team members and set due dates to track progress and ensure accountability. I want to invite team members to collaborate on boards and create automated rules that move tasks between lists based on specific conditions. Additionally, I want to receive notifications for any card updates and easily archive lists when they are no longer needed, keeping my workspace organized and manageable.",
    "user_story_llama": "As a Trello user, I want to be able to create and manage boards, lists, and tasks (cards) so that I can organize my projects and collaborate with my team. This includes creating new boards, adding lists and tasks, and customizing them with labels, comments, and due dates. I also want to be able to attach files, search for specific tasks, move tasks between lists, and invite team members to collaborate on boards. Additionally, I want to assign tasks to team members, receive notifications for updates, and automate tasks using rules. Furthermore, I want to be able to archive lists when they are no longer needed, all while maintaining access to the archived contents. By having these features, I can efficiently manage my projects, track progress, and work effectively with my team.",
    "length": 14
  },
  {
    "usecases": [
      {
        "name": "Account Registration",
        "scenario": "A user registers for an account on the platform with their mobile number, receives an OTP code for verification, fills in personal details like name, gender, HSC year, and sets a password.",
        "precondition": "User must have a valid mobile number",
        "actors": "User",
        "steps": "1: User enters their mobile number 2: System sends OTP code to the user's mobile 3: User enters the OTP code for verification 4: User fills in personal profile details (name, gender, HSC year) 5: User sets a password to complete registration"
      },
      {
        "name": "Course Enrollment",
        "scenario": "A user enrolls in a course by selecting a course from the available options, applying a promo code (if any), agreeing to terms and conditions, and paying via an online payment gateway.",
        "precondition": "User must have an account and be logged in",
        "actors": "User",
        "steps": "1: User navigates to the course page 2: User checks available ongoing and future programs 3: User selects a course to enroll in 4: User applies a promo code (optional) 5: User agrees to terms and conditions 6: User selects a payment method and proceeds to payment"
      },
      {
        "name": "Taking a Chapter Quiz",
        "scenario": "A user wants to take a practice MCQ quiz for a specific chapter and report any question if necessary.",
        "precondition": "The student must be logged in and enrolled in the course. The quiz must be available for the selected chapter.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student selects 'Practice MCQ' from the dashboard. 3: System navigates to a new page displaying the rules for taking the quiz. 4: Student clicks on the 'Start Test' button. 5: System navigates to the first question page. 6: Student answers the first question and clicks 'Go Ahead'. 7: System navigates to the next question. 8: Student repeats this process until all questions are answered. 9: On the last question page, the student clicks 'Submit'. 10: System navigates to a new page displaying the student's score, the time taken, and two buttons: 'See the Solve' and 'Give the Test Again'. 11: If the student clicks 'Give the Test Again', they are taken back to the start page of the test. 12: If the student clicks 'See the Solve', they are shown the solutions for each question one by one. 13: While viewing the solution for each question, the student has the option to click a 'Report' button for any problematic question. 14: When the student clicks 'Report', the system navigates to a new page displaying options for reporting the question (e.g., 'Incorrect Answer', 'Question Unclear', etc.). 15: Student selects a reason for reporting the question and clicks 'Submit'. 16: The system submits the report and returns the student to the solution page."
      },
      {
        "name": "Accessing and Adding Notes in Smart Notes",
        "scenario": "A user wants to view and add Smart Notes for a specific subject.",
        "precondition": "The student must be logged in and enrolled in the course. Smart Notes must be available for the selected subject.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student clicks on the 'Smart Notes' button from the dashboard. 3: System navigates to a new page displaying all the subjects the student is enrolled in. 4: Student clicks on a specific subject (e.g., Bangla). 5: System navigates to a new page displaying all the Smart Notes available for that subject. 6: Student reviews the existing Smart Notes for different chapters. 7: Student clicks on the 'Add Note' button if they want to add their own note. 8: System opens a form where the student can input their custom note. 9: Student writes a note and clicks 'Submit'. 10: System saves the note and displays it alongside the existing notes for the selected subject."
      },
      {
        "name": "Viewing Progress Report",
        "scenario": "A student wants to view their progress report after completing chapters in a course.",
        "precondition": "The student must be logged in, enrolled in the course, and have completed the chapters.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student selects 'Report Card' from the dashboard. 3: System navigates to a new page displaying all the student's enrolled courses. 4: Student selects the course they want to view progress for (e.g., Bangla). 5: System navigates to a new page showing all the chapters in the selected course. 6: Student selects a specific chapter to view the report for that chapter. 7: System fetches and displays the student's progress report for the selected chapter."
      },
      {
        "name": "Downloading eBook",
        "scenario": "A user wants to download an eBook for a specific chapter in a subject.",
        "precondition": "The student must be logged in and have access to the eBooks for their enrolled subjects.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student selects 'eBook' from the dashboard. 3: System navigates to a new page displaying all subjects available to the student. 4: Student selects the subject they want to view (e.g., Bangla). 5: System navigates to a new page showing all chapters for the selected subject. 6: Student selects a specific chapter to download the eBook. 7: System starts the download process for the eBook of the selected chapter."
      },
      {
        "name": "Viewing and Downloading Course Material",
        "scenario": "A registered user, enrolled in a specific course, attempts to access the course materials.",
        "precondition": "The user must have a registered account and be enrolled in the course. The course materials must be available for viewing and downloading.",
        "actors": "User",
        "steps": "1: The user logs into their account using valid credentials. 2: The user navigates to the dashboard of the enrolled course. 3: The user enters the Course Materials section. 4: The user applies filters to find the desired material. 5: The user clicks on 'View' to preview the selected material. 6: The user clicks on 'Download' to download the selected material."
      },
      {
        "name": "Accessing Guidelines for Extra-Curricular Activities",
        "scenario": "A registered user, interested in enhancing skills beyond traditional coursework, seeks access to resources such as freelancing, skill development, or career-building guidelines.",
        "precondition": "Relevant guidelines and materials for the chosen activity must be available.",
        "actors": "User",
        "steps": "1: User visits the homepage. 2: User navigates to the Skills section and is directed to an external website for further resources. 3: User selects the appropriate course or guideline based on interest. 4: User accesses free or paid resources to learn about opportunities and best practices. 5: User receives certification upon completing the course or assigned tasks"
      },
      {
        "name": "Participating in Live Classes",
        "scenario": "A student wants to join a scheduled live class session for a course they are enrolled in.",
        "precondition": "The student must be logged in, enrolled in the course, and the live class must be scheduled.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student selects 'Live Classes' from the dashboard. 3: System displays the schedule of upcoming live classes. 4: Student selects the scheduled live class they want to join. 5: At the scheduled time, the 'Join' button becomes active. 6: Student clicks 'Join' to enter the live class session. 7: System connects the student to the live video stream. 8: Student participates in the live class."
      },
      {
        "name": "Accessing Recorded Lectures",
        "scenario": "A student wants to access and watch recorded lectures for a course they are enrolled in.",
        "precondition": "Student must be logged in, enrolled in the course, and recorded lectures must be available.",
        "actors": "Student",
        "steps": "1: Student logs in and navigates to their dashboard. 2: Student selects 'Recorded Lectures' from the course menu. 3: System displays a list of available recorded lectures organized by date or topic. 4: Student selects a lecture to watch. 5: System streams the selected lecture video. 6: Student can pause, rewind, or fast-forward the lecture. 7: Student can take notes while watching the lecture."
      }
    ],
    "user_story_gpt": "As a user of the learning platform, I want to efficiently navigate through various functionalities to enhance my educational experience. I will begin by registering for an account using my mobile number and verify it with an OTP code, after which I will fill in my personal details and set a password. Once registered, I can enroll in courses by selecting from available options, apply any promo codes, agree to terms, and make payments. I will participate in features such as quizzes for practice, viewing and adding Smart Notes, accessing eBooks, and downloading course materials. Additionally, I will have the opportunity to join live and recorded lectures, which I can revisit for revision. I will also get the chance to engage in extra-curricular activities by accessing guidelines for skill development. Throughout, I can monitor my progress with detailed reports, ensuring a comprehensive and tailored learning journey.",
    "user_story_llama": "As a user, I want to register for an account on the platform, enroll in courses, and access various learning materials and features, including practice quizzes, smart notes, progress reports, eBooks, course materials, guidelines for extra-curricular activities, live classes, and recorded lectures, so that I can effectively learn and manage my educational journey, with the ability to report any issues with quiz questions, download resources, and participate in interactive sessions, thereby enhancing my overall learning experience.",
    "length": 10
  },
  {
    "usecases": [
      {
        "name": "Changing current class",
        "scenario": "A user wants to change the current class",
        "precondition": "User must login and answered the question asked to confirm his current class",
        "actors": "user",
        "steps": "1: User logs in to his account 2: User navigates to his dashboard 3: User clicks on the button to change current class 4: User answers the qestion asked to confirm his current class (i.e Updated current class?, Updated Group?, Updated Batch?)"
      },
      {
        "name": "Changing Personal Information",
        "scenario": "A user wants to change or update his personal information",
        "precondition": "User must login to his account",
        "actors": "User",
        "steps": "1: User logs in to his account 2: User navigates to his profile settings 3: User clicks on the button to edit personal information 4: User updates the personal information (i.e Name, Gender, Birthday, Class Shift, Institution, Guadian's Name, Guadian's Mobile Number, )"
      }
    ],
    "user_story_gpt": "As a user, I want to easily manage my personal account by updating my current class details and personal information. I need the ability to log in and navigate to my dashboard to change my current class by confirming necessary details such as class updates, group, and batch. Additionally, I want to access my profile settings to update my personal details, including name, gender, and guardian information, ensuring my account reflects my current status accurately.",
    "user_story_llama": "As a user, I want to be able to change my current class and update my personal information through my account, so that I can ensure my details are accurate and up-to-date. This should involve logging in to my account, navigating to my dashboard to change my current class, and answering confirmation questions to verify the changes. Additionally, I should be able to navigate to my profile settings to edit my personal information, including details such as name, gender, birthday, and contact information, allowing me to maintain control over my account and information.",
    "length": 2
  }
]